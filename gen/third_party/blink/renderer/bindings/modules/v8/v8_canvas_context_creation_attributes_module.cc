// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#include "third_party/blink/renderer/bindings/modules/v8/v8_canvas_context_creation_attributes_module.h"

#include "third_party/blink/renderer/bindings/core/v8/generated_code_helper.h"
#include "third_party/blink/renderer/bindings/core/v8/native_value_traits_impl.h"
#include "third_party/blink/renderer/bindings/core/v8/to_v8_traits.h"
#include "third_party/blink/renderer/platform/bindings/exception_messages.h"
#include "third_party/blink/renderer/platform/bindings/exception_state.h"
#include "third_party/blink/renderer/platform/bindings/v8_per_isolate_data.h"

namespace blink {



CanvasContextCreationAttributesModule* CanvasContextCreationAttributesModule::Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state) {
  CanvasContextCreationAttributesModule* dictionary = MakeGarbageCollected<CanvasContextCreationAttributesModule>(isolate);
if (v8_value->IsNullOrUndefined()) {
  return dictionary;
}
if (!v8_value->IsObject()) {
  // [PermissiveDictionaryConversion]
return dictionary;
}
dictionary->FillMembersFromV8Object(isolate, v8_value.As<v8::Object>(), exception_state);
if (UNLIKELY(exception_state.HadException())) {
  return nullptr;
}
return dictionary;
}

 CanvasContextCreationAttributesModule::CanvasContextCreationAttributesModule() {
  
}

 CanvasContextCreationAttributesModule::CanvasContextCreationAttributesModule(v8::Isolate* isolate) {
  
}




































































void CanvasContextCreationAttributesModule::Trace(Visitor* visitor) const {
  TraceIfNeeded<bool>::Trace(visitor, member_alpha_);
TraceIfNeeded<bool>::Trace(visitor, member_antialias_);
TraceIfNeeded<V8PredefinedColorSpace>::Trace(visitor, member_color_space_);
TraceIfNeeded<bool>::Trace(visitor, member_depth_);
TraceIfNeeded<bool>::Trace(visitor, member_desynchronized_);
TraceIfNeeded<bool>::Trace(visitor, member_fail_if_major_performance_caveat_);
TraceIfNeeded<V8CanvasPixelFormat>::Trace(visitor, member_pixel_format_);
TraceIfNeeded<V8CanvasPowerPreference>::Trace(visitor, member_power_preference_);
TraceIfNeeded<bool>::Trace(visitor, member_premultiplied_alpha_);
TraceIfNeeded<bool>::Trace(visitor, member_preserve_drawing_buffer_);
TraceIfNeeded<bool>::Trace(visitor, member_stencil_);
TraceIfNeeded<bool>::Trace(visitor, member_will_read_frequently_);
TraceIfNeeded<bool>::Trace(visitor, member_xr_compatible_);
bindings::DictionaryBase::Trace(visitor);
}

bool CanvasContextCreationAttributesModule::FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const {
  v8::Local<v8::Value> v8_value;
v8::Isolate* isolate = script_state->GetIsolate();
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool was_property_created;
if (hasAlpha()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_alpha_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[0].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasAntialias()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_antialias_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[1].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasColorSpace()) {
  if (!ToV8Traits<V8PredefinedColorSpace>::ToV8(script_state, member_color_space_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[2].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDepth()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_depth_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[3].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasDesynchronized()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_desynchronized_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[4].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasFailIfMajorPerformanceCaveat()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_fail_if_major_performance_caveat_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[5].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::CanvasColorManagementV2Enabled()) {
  if (hasPixelFormat()) {
  if (!ToV8Traits<V8CanvasPixelFormat>::ToV8(script_state, member_pixel_format_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[6].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
if (hasPowerPreference()) {
  if (!ToV8Traits<V8CanvasPowerPreference>::ToV8(script_state, member_power_preference_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[7].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPremultipliedAlpha()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_premultiplied_alpha_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[8].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasPreserveDrawingBuffer()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_preserve_drawing_buffer_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[9].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasStencil()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_stencil_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[10].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (hasWillReadFrequently()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_will_read_frequently_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[11].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
if (RuntimeEnabledFeatures::WebXREnabled()) {
  if (hasXrCompatible()) {
  if (!ToV8Traits<IDLBoolean>::ToV8(script_state, member_xr_compatible_).ToLocal(&v8_value)) {
  return false;
}
if (!v8_dictionary->CreateDataProperty(current_context, v8_own_member_names[12].Get(isolate), v8_value).To(&was_property_created)) {
  return false;
}
}
}
return true;
}

void CanvasContextCreationAttributesModule::FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state) {
  const char* const class_like_name = "CanvasContextCreationAttributesModule";
ExceptionState::ContextScope exception_context_scope(ExceptionContext(ExceptionContext::Context::kDictionaryMemberGet, class_like_name, ""), exception_state);
exception_context_scope.ChangePropertyNameAsOptimizationHack("alpha");
constexpr bool is_optional = false;
v8::Local<v8::Context> current_context = isolate->GetCurrentContext();
const auto& v8_own_member_names = GetV8OwnMemberNames(isolate);
bool fallback_presence_var;
v8::TryCatch try_block(isolate);
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[0].Get(isolate), fallback_presence_var, member_alpha_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("antialias");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[1].Get(isolate), fallback_presence_var, member_antialias_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("colorSpace");
if (!bindings::GetDictionaryMemberFromV8Object<V8PredefinedColorSpace, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[2].Get(isolate), fallback_presence_var, member_color_space_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("depth");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[3].Get(isolate), fallback_presence_var, member_depth_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("desynchronized");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[4].Get(isolate), fallback_presence_var, member_desynchronized_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("failIfMajorPerformanceCaveat");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[5].Get(isolate), fallback_presence_var, member_fail_if_major_performance_caveat_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::CanvasColorManagementV2Enabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("pixelFormat");
if (!bindings::GetDictionaryMemberFromV8Object<V8CanvasPixelFormat, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[6].Get(isolate), fallback_presence_var, member_pixel_format_, try_block, exception_state)) {
  return;
}
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("powerPreference");
if (!bindings::GetDictionaryMemberFromV8Object<V8CanvasPowerPreference, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[7].Get(isolate), fallback_presence_var, member_power_preference_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("premultipliedAlpha");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[8].Get(isolate), fallback_presence_var, member_premultiplied_alpha_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("preserveDrawingBuffer");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[9].Get(isolate), fallback_presence_var, member_preserve_drawing_buffer_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("stencil");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[10].Get(isolate), fallback_presence_var, member_stencil_, try_block, exception_state)) {
  return;
}
exception_context_scope.ChangePropertyNameAsOptimizationHack("willReadFrequently");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[11].Get(isolate), fallback_presence_var, member_will_read_frequently_, try_block, exception_state)) {
  return;
}
if (RuntimeEnabledFeatures::WebXREnabled()) {
  exception_context_scope.ChangePropertyNameAsOptimizationHack("xrCompatible");
if (!bindings::GetDictionaryMemberFromV8Object<IDLBoolean, is_optional>(isolate, current_context, v8_dictionary, v8_own_member_names[12].Get(isolate), fallback_presence_var, member_xr_compatible_, try_block, exception_state)) {
  return;
}
}
}

const base::span<const v8::Eternal<v8::Name>> CanvasContextCreationAttributesModule::GetV8OwnMemberNames(v8::Isolate* isolate) {
  static const char* const kOwnMemberNames[] = {
"alpha",
"antialias",
"colorSpace",
"depth",
"desynchronized",
"failIfMajorPerformanceCaveat",
"pixelFormat",
"powerPreference",
"premultipliedAlpha",
"preserveDrawingBuffer",
"stencil",
"willReadFrequently",
"xrCompatible",
};
return V8PerIsolateData::From(isolate)->FindOrCreateEternalNameCache(kOwnMemberNames, kOwnMemberNames);
}


}  // namespace blink
