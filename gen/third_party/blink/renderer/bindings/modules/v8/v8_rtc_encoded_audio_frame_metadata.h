// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// DO NOT EDIT: This file is auto-generated by
// //third_party/blink/renderer/bindings/scripts/generate_bindings.py
//
// Use the GN flag `blink_enable_generated_code_formatting=true` to enable
// formatting of the generated files.

#ifndef THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ENCODED_AUDIO_FRAME_METADATA_H_
#define THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ENCODED_AUDIO_FRAME_METADATA_H_

#include "base/containers/span.h"
#include "third_party/blink/renderer/modules/modules_export.h"
#include "third_party/blink/renderer/platform/bindings/dictionary_base.h"
#include "third_party/blink/renderer/platform/heap/collection_support/heap_vector.h"

namespace blink {

class ExceptionState;

class MODULES_EXPORT RTCEncodedAudioFrameMetadata : public bindings::DictionaryBase {
  
  public:
static RTCEncodedAudioFrameMetadata* Create() {
  return MakeGarbageCollected<RTCEncodedAudioFrameMetadata>();
}
static RTCEncodedAudioFrameMetadata* Create(v8::Isolate* isolate) {
  return MakeGarbageCollected<RTCEncodedAudioFrameMetadata>(isolate);
}
static RTCEncodedAudioFrameMetadata* Create(v8::Isolate* isolate, v8::Local<v8::Value> v8_value, ExceptionState& exception_state);

explicit  RTCEncodedAudioFrameMetadata();
explicit  RTCEncodedAudioFrameMetadata(v8::Isolate* isolate);

bool hasContributingSources() const {
  return has_contributing_sources_;
}
const Vector<uint32_t>& contributingSources() const {
  DCHECK(hasContributingSources());
return member_contributing_sources_;
}
Vector<uint32_t> getContributingSourcesOr(const Vector<uint32_t>& fallback_value) const;
Vector<uint32_t> getContributingSourcesOr(Vector<uint32_t>&& fallback_value) const;
void setContributingSources(const Vector<uint32_t>& value);
void setContributingSources(Vector<uint32_t>&& value);

bool hasPayloadType() const {
  return has_payload_type_;
}
int16_t payloadType() const {
  DCHECK(hasPayloadType());
return member_payload_type_;
}
int16_t getPayloadTypeOr(int16_t fallback_value) const {
  if (!hasPayloadType()) {
  return fallback_value;
}
return member_payload_type_;
}
void setPayloadType(int16_t value) {
  member_payload_type_ = value;
has_payload_type_ = true;
}

bool hasSynchronizationSource() const {
  return has_synchronization_source_;
}
uint32_t synchronizationSource() const {
  DCHECK(hasSynchronizationSource());
return member_synchronization_source_;
}
uint32_t getSynchronizationSourceOr(uint32_t fallback_value) const {
  if (!hasSynchronizationSource()) {
  return fallback_value;
}
return member_synchronization_source_;
}
void setSynchronizationSource(uint32_t value) {
  member_synchronization_source_ = value;
has_synchronization_source_ = true;
}




void Trace(Visitor* visitor) const override;


  protected:
bool FillV8ObjectWithMembers(ScriptState* script_state, v8::Local<v8::Object> v8_dictionary) const override;

void FillMembersFromV8Object(v8::Isolate* isolate, v8::Local<v8::Object> v8_dictionary, ExceptionState& exception_state);


  private:
static const base::span<const v8::Eternal<v8::Name>> GetV8OwnMemberNames(v8::Isolate* isolate);

bool has_contributing_sources_ = false;
bool has_payload_type_ = false;
bool has_synchronization_source_ = false;

Vector<uint32_t> member_contributing_sources_;
int16_t member_payload_type_;
uint32_t member_synchronization_source_;


  
};


}  // namespace blink

#endif  // THIRD_PARTY_BLINK_RENDERER_BINDINGS_MODULES_V8_V8_RTC_ENCODED_AUDIO_FRAME_METADATA_H_
