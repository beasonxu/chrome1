// third_party/blink/public/mojom/contacts/contacts_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTACTS_CONTACTS_MANAGER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTACTS_CONTACTS_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContactsManager_Select_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t multiple : 1;
  uint8_t include_names : 1;
  uint8_t include_emails : 1;
  uint8_t include_tel : 1;
  uint8_t include_addresses : 1;
  uint8_t include_icons : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ContactsManager_Select_Params_Data>;

  ContactsManager_Select_Params_Data();
  ~ContactsManager_Select_Params_Data() = delete;
};
static_assert(sizeof(ContactsManager_Select_Params_Data) == 16,
              "Bad sizeof(ContactsManager_Select_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContactsManager_Select_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ContactInfo_Data>>> contacts;

 private:
  friend class mojo::internal::MessageFragment<ContactsManager_Select_ResponseParams_Data>;

  ContactsManager_Select_ResponseParams_Data();
  ~ContactsManager_Select_ResponseParams_Data() = delete;
};
static_assert(sizeof(ContactsManager_Select_ResponseParams_Data) == 16,
              "Bad sizeof(ContactsManager_Select_ResponseParams_Data)");

}  // namespace internal


class ContactsManager_Select_ParamsDataView {
 public:
  ContactsManager_Select_ParamsDataView() = default;

  ContactsManager_Select_ParamsDataView(
      internal::ContactsManager_Select_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool multiple() const {
    return data_->multiple;
  }
  bool include_names() const {
    return data_->include_names;
  }
  bool include_emails() const {
    return data_->include_emails;
  }
  bool include_tel() const {
    return data_->include_tel;
  }
  bool include_addresses() const {
    return data_->include_addresses;
  }
  bool include_icons() const {
    return data_->include_icons;
  }
 private:
  internal::ContactsManager_Select_Params_Data* data_ = nullptr;
};



class ContactsManager_Select_ResponseParamsDataView {
 public:
  ContactsManager_Select_ResponseParamsDataView() = default;

  ContactsManager_Select_ResponseParamsDataView(
      internal::ContactsManager_Select_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetContactsDataView(
      mojo::ArrayDataView<ContactInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContacts(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::blink::mojom::ContactInfoDataView>, UserType>(),
    "Attempting to read the optional `contacts` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadContacts` instead "
    "of `ReadContacts if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->contacts.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ContactInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ContactsManager_Select_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void ContactsManager_Select_ResponseParamsDataView::GetContactsDataView(
    mojo::ArrayDataView<ContactInfoDataView>* output) {
  auto pointer = data_->contacts.Get();
  *output = mojo::ArrayDataView<ContactInfoDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTACTS_CONTACTS_MANAGER_MOJOM_PARAMS_DATA_H_