// third_party/blink/public/mojom/input/input_host.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_HOST_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_HOST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionHost_StartSuggestionMenuTimer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionHost_StartSuggestionMenuTimer_Params_Data>;

  TextSuggestionHost_StartSuggestionMenuTimer_Params_Data();
  ~TextSuggestionHost_StartSuggestionMenuTimer_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionHost_StartSuggestionMenuTimer_Params_Data) == 8,
              "Bad sizeof(TextSuggestionHost_StartSuggestionMenuTimer_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double caret_x;
  double caret_y;
  mojo::internal::Pointer<mojo::internal::String_Data> marked_text;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SpellCheckSuggestion_Data>>> suggestions;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data>;

  TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data();
  ~TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data) == 40,
              "Bad sizeof(TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TextSuggestionHost_ShowTextSuggestionMenu_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  double caret_x;
  double caret_y;
  mojo::internal::Pointer<mojo::internal::String_Data> marked_text;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::TextSuggestion_Data>>> suggestions;

 private:
  friend class mojo::internal::MessageFragment<TextSuggestionHost_ShowTextSuggestionMenu_Params_Data>;

  TextSuggestionHost_ShowTextSuggestionMenu_Params_Data();
  ~TextSuggestionHost_ShowTextSuggestionMenu_Params_Data() = delete;
};
static_assert(sizeof(TextSuggestionHost_ShowTextSuggestionMenu_Params_Data) == 40,
              "Bad sizeof(TextSuggestionHost_ShowTextSuggestionMenu_Params_Data)");

}  // namespace internal


class TextSuggestionHost_StartSuggestionMenuTimer_ParamsDataView {
 public:
  TextSuggestionHost_StartSuggestionMenuTimer_ParamsDataView() = default;

  TextSuggestionHost_StartSuggestionMenuTimer_ParamsDataView(
      internal::TextSuggestionHost_StartSuggestionMenuTimer_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::TextSuggestionHost_StartSuggestionMenuTimer_Params_Data* data_ = nullptr;
};



class TextSuggestionHost_ShowSpellCheckSuggestionMenu_ParamsDataView {
 public:
  TextSuggestionHost_ShowSpellCheckSuggestionMenu_ParamsDataView() = default;

  TextSuggestionHost_ShowSpellCheckSuggestionMenu_ParamsDataView(
      internal::TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  double caret_x() const {
    return data_->caret_x;
  }
  double caret_y() const {
    return data_->caret_y;
  }
  inline void GetMarkedTextDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMarkedText(UserType* output) {
    
    auto* pointer = data_->marked_text.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSuggestionsDataView(
      mojo::ArrayDataView<SpellCheckSuggestionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSuggestions(UserType* output) {
    
    auto* pointer = data_->suggestions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::SpellCheckSuggestionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::TextSuggestionHost_ShowSpellCheckSuggestionMenu_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TextSuggestionHost_ShowTextSuggestionMenu_ParamsDataView {
 public:
  TextSuggestionHost_ShowTextSuggestionMenu_ParamsDataView() = default;

  TextSuggestionHost_ShowTextSuggestionMenu_ParamsDataView(
      internal::TextSuggestionHost_ShowTextSuggestionMenu_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  double caret_x() const {
    return data_->caret_x;
  }
  double caret_y() const {
    return data_->caret_y;
  }
  inline void GetMarkedTextDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMarkedText(UserType* output) {
    
    auto* pointer = data_->marked_text.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSuggestionsDataView(
      mojo::ArrayDataView<TextSuggestionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSuggestions(UserType* output) {
    
    auto* pointer = data_->suggestions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::TextSuggestionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::TextSuggestionHost_ShowTextSuggestionMenu_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void TextSuggestionHost_ShowSpellCheckSuggestionMenu_ParamsDataView::GetMarkedTextDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->marked_text.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TextSuggestionHost_ShowSpellCheckSuggestionMenu_ParamsDataView::GetSuggestionsDataView(
    mojo::ArrayDataView<SpellCheckSuggestionDataView>* output) {
  auto pointer = data_->suggestions.Get();
  *output = mojo::ArrayDataView<SpellCheckSuggestionDataView>(pointer, message_);
}


inline void TextSuggestionHost_ShowTextSuggestionMenu_ParamsDataView::GetMarkedTextDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->marked_text.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void TextSuggestionHost_ShowTextSuggestionMenu_ParamsDataView::GetSuggestionsDataView(
    mojo::ArrayDataView<TextSuggestionDataView>* output) {
  auto pointer = data_->suggestions.Get();
  *output = mojo::ArrayDataView<TextSuggestionDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INPUT_INPUT_HOST_MOJOM_PARAMS_DATA_H_