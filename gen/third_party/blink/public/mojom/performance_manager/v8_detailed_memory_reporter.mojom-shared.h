// third_party/blink/public/mojom/performance_manager/v8_detailed_memory_reporter.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/performance_manager/v8_detailed_memory_reporter.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class PerContextV8MemoryUsageDataView;

class PerContextCanvasMemoryUsageDataView;

class PerIsolateV8MemoryUsageDataView;

class PerProcessV8MemoryUsageDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::PerContextV8MemoryUsageDataView> {
  using Data = ::blink::mojom::internal::PerContextV8MemoryUsage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::PerContextCanvasMemoryUsageDataView> {
  using Data = ::blink::mojom::internal::PerContextCanvasMemoryUsage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::PerIsolateV8MemoryUsageDataView> {
  using Data = ::blink::mojom::internal::PerIsolateV8MemoryUsage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::PerProcessV8MemoryUsageDataView> {
  using Data = ::blink::mojom::internal::PerProcessV8MemoryUsage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class V8DetailedMemoryReporter_Mode : int32_t {
  
  DEFAULT = 0,
  
  EAGER = 1,
  
  LAZY = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, V8DetailedMemoryReporter_Mode value);
inline bool IsKnownEnumValue(V8DetailedMemoryReporter_Mode value) {
  return internal::V8DetailedMemoryReporter_Mode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class V8DetailedMemoryReporterInterfaceBase {};

using V8DetailedMemoryReporterPtrDataView =
    mojo::InterfacePtrDataView<V8DetailedMemoryReporterInterfaceBase>;
using V8DetailedMemoryReporterRequestDataView =
    mojo::InterfaceRequestDataView<V8DetailedMemoryReporterInterfaceBase>;
using V8DetailedMemoryReporterAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<V8DetailedMemoryReporterInterfaceBase>;
using V8DetailedMemoryReporterAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<V8DetailedMemoryReporterInterfaceBase>;


class PerContextV8MemoryUsageDataView {
 public:
  PerContextV8MemoryUsageDataView() = default;

  PerContextV8MemoryUsageDataView(
      internal::PerContextV8MemoryUsage_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::blink::mojom::ExecutionContextTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = !data_->token.is_null() ? &data_->token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::ExecutionContextTokenDataView>(
        pointer, output, message_);
  }
  uint64_t bytes_used() const {
    return data_->bytes_used;
  }
  inline void GetUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUrl` instead "
    "of `ReadUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PerContextV8MemoryUsage_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PerContextCanvasMemoryUsageDataView {
 public:
  PerContextCanvasMemoryUsageDataView() = default;

  PerContextCanvasMemoryUsageDataView(
      internal::PerContextCanvasMemoryUsage_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::blink::mojom::ExecutionContextTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = !data_->token.is_null() ? &data_->token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::ExecutionContextTokenDataView>(
        pointer, output, message_);
  }
  uint64_t bytes_used() const {
    return data_->bytes_used;
  }
 private:
  internal::PerContextCanvasMemoryUsage_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PerIsolateV8MemoryUsageDataView {
 public:
  PerIsolateV8MemoryUsageDataView() = default;

  PerIsolateV8MemoryUsageDataView(
      internal::PerIsolateV8MemoryUsage_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint64_t num_detached_contexts() const {
    return data_->num_detached_contexts;
  }
  uint64_t detached_bytes_used() const {
    return data_->detached_bytes_used;
  }
  uint64_t shared_bytes_used() const {
    return data_->shared_bytes_used;
  }
  uint64_t blink_bytes_used() const {
    return data_->blink_bytes_used;
  }
  inline void GetContextsDataView(
      mojo::ArrayDataView<PerContextV8MemoryUsageDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContexts(UserType* output) {
    
    auto* pointer = data_->contexts.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::PerContextV8MemoryUsageDataView>>(
        pointer, output, message_);
  }
  inline void GetCanvasContextsDataView(
      mojo::ArrayDataView<PerContextCanvasMemoryUsageDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCanvasContexts(UserType* output) {
    
    auto* pointer = data_->canvas_contexts.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::PerContextCanvasMemoryUsageDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PerIsolateV8MemoryUsage_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PerProcessV8MemoryUsageDataView {
 public:
  PerProcessV8MemoryUsageDataView() = default;

  PerProcessV8MemoryUsageDataView(
      internal::PerProcessV8MemoryUsage_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIsolatesDataView(
      mojo::ArrayDataView<PerIsolateV8MemoryUsageDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIsolates(UserType* output) {
    
    auto* pointer = data_->isolates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::PerIsolateV8MemoryUsageDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PerProcessV8MemoryUsage_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::V8DetailedMemoryReporter_Mode>
    : public mojo::internal::EnumHashImpl<::blink::mojom::V8DetailedMemoryReporter_Mode> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::V8DetailedMemoryReporter_Mode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::V8DetailedMemoryReporter_Mode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::V8DetailedMemoryReporter_Mode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PerContextV8MemoryUsageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PerContextV8MemoryUsageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PerContextV8MemoryUsage_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::token(input)) in_token = Traits::token(input);
    mojo::internal::MessageFragment<decltype(fragment->token)>
        token_fragment(fragment.message());
    token_fragment.Claim(&fragment->token);
    mojo::internal::Serialize<::blink::mojom::ExecutionContextTokenDataView>(
        in_token, token_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null token in PerContextV8MemoryUsage struct");
    fragment->bytes_used = Traits::bytes_used(input);
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::PerContextV8MemoryUsage_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PerContextV8MemoryUsageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PerContextCanvasMemoryUsageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PerContextCanvasMemoryUsageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PerContextCanvasMemoryUsage_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::token(input)) in_token = Traits::token(input);
    mojo::internal::MessageFragment<decltype(fragment->token)>
        token_fragment(fragment.message());
    token_fragment.Claim(&fragment->token);
    mojo::internal::Serialize<::blink::mojom::ExecutionContextTokenDataView>(
        in_token, token_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null token in PerContextCanvasMemoryUsage struct");
    fragment->bytes_used = Traits::bytes_used(input);
  }

  static bool Deserialize(::blink::mojom::internal::PerContextCanvasMemoryUsage_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PerContextCanvasMemoryUsageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PerIsolateV8MemoryUsageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PerIsolateV8MemoryUsageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PerIsolateV8MemoryUsage_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->num_detached_contexts = Traits::num_detached_contexts(input);
    fragment->detached_bytes_used = Traits::detached_bytes_used(input);
    fragment->shared_bytes_used = Traits::shared_bytes_used(input);
    fragment->blink_bytes_used = Traits::blink_bytes_used(input);
    decltype(Traits::contexts(input)) in_contexts = Traits::contexts(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->contexts)::BaseType>
        contexts_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams contexts_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::PerContextV8MemoryUsageDataView>>(
        in_contexts, contexts_fragment, &contexts_validate_params);
    fragment->contexts.Set(
        contexts_fragment.is_null() ? nullptr : contexts_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->contexts.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null contexts in PerIsolateV8MemoryUsage struct");
    decltype(Traits::canvas_contexts(input)) in_canvas_contexts = Traits::canvas_contexts(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->canvas_contexts)::BaseType>
        canvas_contexts_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams canvas_contexts_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::PerContextCanvasMemoryUsageDataView>>(
        in_canvas_contexts, canvas_contexts_fragment, &canvas_contexts_validate_params);
    fragment->canvas_contexts.Set(
        canvas_contexts_fragment.is_null() ? nullptr : canvas_contexts_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->canvas_contexts.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null canvas_contexts in PerIsolateV8MemoryUsage struct");
  }

  static bool Deserialize(::blink::mojom::internal::PerIsolateV8MemoryUsage_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PerIsolateV8MemoryUsageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PerProcessV8MemoryUsageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PerProcessV8MemoryUsageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PerProcessV8MemoryUsage_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::isolates(input)) in_isolates = Traits::isolates(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->isolates)::BaseType>
        isolates_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams isolates_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::PerIsolateV8MemoryUsageDataView>>(
        in_isolates, isolates_fragment, &isolates_validate_params);
    fragment->isolates.Set(
        isolates_fragment.is_null() ? nullptr : isolates_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->isolates.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null isolates in PerProcessV8MemoryUsage struct");
  }

  static bool Deserialize(::blink::mojom::internal::PerProcessV8MemoryUsage_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PerProcessV8MemoryUsageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void PerContextV8MemoryUsageDataView::GetTokenDataView(
    ::blink::mojom::ExecutionContextTokenDataView* output) {
  auto pointer = &data_->token;
  *output = ::blink::mojom::ExecutionContextTokenDataView(pointer, message_);
}
inline void PerContextV8MemoryUsageDataView::GetUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->url.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PerContextCanvasMemoryUsageDataView::GetTokenDataView(
    ::blink::mojom::ExecutionContextTokenDataView* output) {
  auto pointer = &data_->token;
  *output = ::blink::mojom::ExecutionContextTokenDataView(pointer, message_);
}


inline void PerIsolateV8MemoryUsageDataView::GetContextsDataView(
    mojo::ArrayDataView<PerContextV8MemoryUsageDataView>* output) {
  auto pointer = data_->contexts.Get();
  *output = mojo::ArrayDataView<PerContextV8MemoryUsageDataView>(pointer, message_);
}
inline void PerIsolateV8MemoryUsageDataView::GetCanvasContextsDataView(
    mojo::ArrayDataView<PerContextCanvasMemoryUsageDataView>* output) {
  auto pointer = data_->canvas_contexts.Get();
  *output = mojo::ArrayDataView<PerContextCanvasMemoryUsageDataView>(pointer, message_);
}


inline void PerProcessV8MemoryUsageDataView::GetIsolatesDataView(
    mojo::ArrayDataView<PerIsolateV8MemoryUsageDataView>* output) {
  auto pointer = data_->isolates.Get();
  *output = mojo::ArrayDataView<PerIsolateV8MemoryUsageDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::V8DetailedMemoryReporter_Mode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::V8DetailedMemoryReporter_Mode value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_SHARED_H_