// third_party/blink/public/mojom/performance_manager/v8_detailed_memory_reporter.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class PerContextV8MemoryUsage_Data;
class PerContextCanvasMemoryUsage_Data;
class PerIsolateV8MemoryUsage_Data;
class PerProcessV8MemoryUsage_Data;

struct V8DetailedMemoryReporter_Mode_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PerContextV8MemoryUsage_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::ExecutionContextToken_Data token;
  uint64_t bytes_used;
  mojo::internal::Pointer<mojo::internal::String_Data> url;

 private:
  friend class mojo::internal::MessageFragment<PerContextV8MemoryUsage_Data>;

  PerContextV8MemoryUsage_Data();
  ~PerContextV8MemoryUsage_Data() = delete;
};
static_assert(sizeof(PerContextV8MemoryUsage_Data) == 40,
              "Bad sizeof(PerContextV8MemoryUsage_Data)");
// Used by PerContextV8MemoryUsage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PerContextV8MemoryUsage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PerContextV8MemoryUsage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PerContextV8MemoryUsage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PerContextV8MemoryUsage_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PerContextV8MemoryUsage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PerContextCanvasMemoryUsage_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::ExecutionContextToken_Data token;
  uint64_t bytes_used;

 private:
  friend class mojo::internal::MessageFragment<PerContextCanvasMemoryUsage_Data>;

  PerContextCanvasMemoryUsage_Data();
  ~PerContextCanvasMemoryUsage_Data() = delete;
};
static_assert(sizeof(PerContextCanvasMemoryUsage_Data) == 32,
              "Bad sizeof(PerContextCanvasMemoryUsage_Data)");
// Used by PerContextCanvasMemoryUsage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PerContextCanvasMemoryUsage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PerContextCanvasMemoryUsage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PerContextCanvasMemoryUsage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PerContextCanvasMemoryUsage_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PerContextCanvasMemoryUsage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PerIsolateV8MemoryUsage_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t num_detached_contexts;
  uint64_t detached_bytes_used;
  uint64_t shared_bytes_used;
  uint64_t blink_bytes_used;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PerContextV8MemoryUsage_Data>>> contexts;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PerContextCanvasMemoryUsage_Data>>> canvas_contexts;

 private:
  friend class mojo::internal::MessageFragment<PerIsolateV8MemoryUsage_Data>;

  PerIsolateV8MemoryUsage_Data();
  ~PerIsolateV8MemoryUsage_Data() = delete;
};
static_assert(sizeof(PerIsolateV8MemoryUsage_Data) == 56,
              "Bad sizeof(PerIsolateV8MemoryUsage_Data)");
// Used by PerIsolateV8MemoryUsage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PerIsolateV8MemoryUsage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PerIsolateV8MemoryUsage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PerIsolateV8MemoryUsage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PerIsolateV8MemoryUsage_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PerIsolateV8MemoryUsage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PerProcessV8MemoryUsage_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PerIsolateV8MemoryUsage_Data>>> isolates;

 private:
  friend class mojo::internal::MessageFragment<PerProcessV8MemoryUsage_Data>;

  PerProcessV8MemoryUsage_Data();
  ~PerProcessV8MemoryUsage_Data() = delete;
};
static_assert(sizeof(PerProcessV8MemoryUsage_Data) == 16,
              "Bad sizeof(PerProcessV8MemoryUsage_Data)");
// Used by PerProcessV8MemoryUsage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PerProcessV8MemoryUsage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PerProcessV8MemoryUsage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PerProcessV8MemoryUsage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PerProcessV8MemoryUsage_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PerProcessV8MemoryUsage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERFORMANCE_MANAGER_V8_DETAILED_MEMORY_REPORTER_MOJOM_SHARED_INTERNAL_H_