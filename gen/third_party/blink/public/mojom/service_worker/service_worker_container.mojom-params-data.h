// third_party/blink/public/mojom/service_worker/service_worker_container.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_Register_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> script_url;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerRegistrationOptions_Data> options;
  mojo::internal::Pointer<::blink::mojom::internal::FetchClientSettingsObject_Data> outside_fetch_client_settings_object;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_Register_Params_Data>;

  ServiceWorkerContainerHost_Register_Params_Data();
  ~ServiceWorkerContainerHost_Register_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_Register_Params_Data) == 32,
              "Bad sizeof(ServiceWorkerContainerHost_Register_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_Register_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerRegistrationObjectInfo_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_Register_ResponseParams_Data>;

  ServiceWorkerContainerHost_Register_ResponseParams_Data();
  ~ServiceWorkerContainerHost_Register_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_Register_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorkerContainerHost_Register_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_GetRegistration_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> client_url;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_GetRegistration_Params_Data>;

  ServiceWorkerContainerHost_GetRegistration_Params_Data();
  ~ServiceWorkerContainerHost_GetRegistration_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_GetRegistration_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerContainerHost_GetRegistration_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerRegistrationObjectInfo_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data>;

  ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data();
  ~ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_GetRegistrations_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_GetRegistrations_Params_Data>;

  ServiceWorkerContainerHost_GetRegistrations_Params_Data();
  ~ServiceWorkerContainerHost_GetRegistrations_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_GetRegistrations_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerContainerHost_GetRegistrations_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> error_msg;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerRegistrationObjectInfo_Data>>> infos;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data>;

  ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data();
  ~ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data) == 32,
              "Bad sizeof(ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data>;

  ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data();
  ~ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerRegistrationObjectInfo_Data> registration;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data>;

  ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data();
  ~ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data) == 16,
              "Bad sizeof(ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  int32_t purpose;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data>;

  ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data();
  ~ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_CloneContainerHost_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data container_host;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_CloneContainerHost_Params_Data>;

  ServiceWorkerContainerHost_CloneContainerHost_Params_Data();
  ~ServiceWorkerContainerHost_CloneContainerHost_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_CloneContainerHost_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerContainerHost_CloneContainerHost_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data>;

  ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data();
  ~ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_EnsureFileAccess_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data>>> files;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_EnsureFileAccess_Params_Data>;

  ServiceWorkerContainerHost_EnsureFileAccess_Params_Data();
  ~ServiceWorkerContainerHost_EnsureFileAccess_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_EnsureFileAccess_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerContainerHost_EnsureFileAccess_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data>;

  ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data();
  ~ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data) == 8,
              "Bad sizeof(ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainerHost_OnExecutionReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainerHost_OnExecutionReady_Params_Data>;

  ServiceWorkerContainerHost_OnExecutionReady_Params_Data();
  ~ServiceWorkerContainerHost_OnExecutionReady_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainerHost_OnExecutionReady_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerContainerHost_OnExecutionReady_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainer_SetController_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ControllerServiceWorkerInfo_Data> controller_info;
  uint8_t should_notify_controllerchange : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainer_SetController_Params_Data>;

  ServiceWorkerContainer_SetController_Params_Data();
  ~ServiceWorkerContainer_SetController_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainer_SetController_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerContainer_SetController_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainer_PostMessageToClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerObjectInfo_Data> source;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainer_PostMessageToClient_Params_Data>;

  ServiceWorkerContainer_PostMessageToClient_Params_Data();
  ~ServiceWorkerContainer_PostMessageToClient_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainer_PostMessageToClient_Params_Data) == 24,
              "Bad sizeof(ServiceWorkerContainer_PostMessageToClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerContainer_CountFeature_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t feature;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerContainer_CountFeature_Params_Data>;

  ServiceWorkerContainer_CountFeature_Params_Data();
  ~ServiceWorkerContainer_CountFeature_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerContainer_CountFeature_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerContainer_CountFeature_Params_Data)");

}  // namespace internal


class ServiceWorkerContainerHost_Register_ParamsDataView {
 public:
  ServiceWorkerContainerHost_Register_ParamsDataView() = default;

  ServiceWorkerContainerHost_Register_ParamsDataView(
      internal::ServiceWorkerContainerHost_Register_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetScriptUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptUrl(UserType* output) {
    
    auto* pointer = data_->script_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetOptionsDataView(
      ::blink::mojom::ServiceWorkerRegistrationOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerRegistrationOptionsDataView>(
        pointer, output, message_);
  }
  inline void GetOutsideFetchClientSettingsObjectDataView(
      ::blink::mojom::FetchClientSettingsObjectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutsideFetchClientSettingsObject(UserType* output) {
    
    auto* pointer = data_->outside_fetch_client_settings_object.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchClientSettingsObjectDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_Register_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_Register_ResponseParamsDataView {
 public:
  ServiceWorkerContainerHost_Register_ResponseParamsDataView() = default;

  ServiceWorkerContainerHost_Register_ResponseParamsDataView(
      internal::ServiceWorkerContainerHost_Register_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerErrorType>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerErrorType error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerErrorType>(data_->error));
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetRegistrationDataView(
      ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView, UserType>(),
    "Attempting to read the optional `registration` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRegistration` instead "
    "of `ReadRegistration if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_Register_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_GetRegistration_ParamsDataView {
 public:
  ServiceWorkerContainerHost_GetRegistration_ParamsDataView() = default;

  ServiceWorkerContainerHost_GetRegistration_ParamsDataView(
      internal::ServiceWorkerContainerHost_GetRegistration_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClientUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientUrl(UserType* output) {
    
    auto* pointer = data_->client_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_GetRegistration_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_GetRegistration_ResponseParamsDataView {
 public:
  ServiceWorkerContainerHost_GetRegistration_ResponseParamsDataView() = default;

  ServiceWorkerContainerHost_GetRegistration_ResponseParamsDataView(
      internal::ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerErrorType>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerErrorType error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerErrorType>(data_->error));
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetRegistrationDataView(
      ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView, UserType>(),
    "Attempting to read the optional `registration` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRegistration` instead "
    "of `ReadRegistration if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_GetRegistrations_ParamsDataView {
 public:
  ServiceWorkerContainerHost_GetRegistrations_ParamsDataView() = default;

  ServiceWorkerContainerHost_GetRegistrations_ParamsDataView(
      internal::ServiceWorkerContainerHost_GetRegistrations_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerContainerHost_GetRegistrations_Params_Data* data_ = nullptr;
};



class ServiceWorkerContainerHost_GetRegistrations_ResponseParamsDataView {
 public:
  ServiceWorkerContainerHost_GetRegistrations_ResponseParamsDataView() = default;

  ServiceWorkerContainerHost_GetRegistrations_ResponseParamsDataView(
      internal::ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerErrorType>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerErrorType error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerErrorType>(data_->error));
  }
  inline void GetErrorMsgDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMsg(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `error_msg` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadErrorMsg` instead "
    "of `ReadErrorMsg if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error_msg.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetInfosDataView(
      mojo::ArrayDataView<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfos(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>, UserType>(),
    "Attempting to read the optional `infos` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInfos` instead "
    "of `ReadInfos if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_GetRegistrationForReady_ParamsDataView {
 public:
  ServiceWorkerContainerHost_GetRegistrationForReady_ParamsDataView() = default;

  ServiceWorkerContainerHost_GetRegistrationForReady_ParamsDataView(
      internal::ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data* data_ = nullptr;
};



class ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParamsDataView {
 public:
  ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParamsDataView() = default;

  ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParamsDataView(
      internal::ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRegistrationDataView(
      ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegistration(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView, UserType>(),
    "Attempting to read the optional `registration` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadRegistration` instead "
    "of `ReadRegistration if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->registration.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_EnsureControllerServiceWorker_ParamsDataView {
 public:
  ServiceWorkerContainerHost_EnsureControllerServiceWorker_ParamsDataView() = default;

  ServiceWorkerContainerHost_EnsureControllerServiceWorker_ParamsDataView(
      internal::ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::ControllerServiceWorkerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadPurpose(UserType* output) const {
    auto data_value = data_->purpose;
    return mojo::internal::Deserialize<::blink::mojom::ControllerServiceWorkerPurpose>(
        data_value, output);
  }
  ControllerServiceWorkerPurpose purpose() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ControllerServiceWorkerPurpose>(data_->purpose));
  }
 private:
  internal::ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_CloneContainerHost_ParamsDataView {
 public:
  ServiceWorkerContainerHost_CloneContainerHost_ParamsDataView() = default;

  ServiceWorkerContainerHost_CloneContainerHost_ParamsDataView(
      internal::ServiceWorkerContainerHost_CloneContainerHost_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeContainerHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::ServiceWorkerContainerHostInterfaceBase>>(
            &data_->container_host, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::ServiceWorkerContainerHost_CloneContainerHost_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_HintToUpdateServiceWorker_ParamsDataView {
 public:
  ServiceWorkerContainerHost_HintToUpdateServiceWorker_ParamsDataView() = default;

  ServiceWorkerContainerHost_HintToUpdateServiceWorker_ParamsDataView(
      internal::ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data* data_ = nullptr;
};



class ServiceWorkerContainerHost_EnsureFileAccess_ParamsDataView {
 public:
  ServiceWorkerContainerHost_EnsureFileAccess_ParamsDataView() = default;

  ServiceWorkerContainerHost_EnsureFileAccess_ParamsDataView(
      internal::ServiceWorkerContainerHost_EnsureFileAccess_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFilesDataView(
      mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFiles(UserType* output) {
    
    auto* pointer = data_->files.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainerHost_EnsureFileAccess_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainerHost_EnsureFileAccess_ResponseParamsDataView {
 public:
  ServiceWorkerContainerHost_EnsureFileAccess_ResponseParamsDataView() = default;

  ServiceWorkerContainerHost_EnsureFileAccess_ResponseParamsDataView(
      internal::ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorkerContainerHost_OnExecutionReady_ParamsDataView {
 public:
  ServiceWorkerContainerHost_OnExecutionReady_ParamsDataView() = default;

  ServiceWorkerContainerHost_OnExecutionReady_ParamsDataView(
      internal::ServiceWorkerContainerHost_OnExecutionReady_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerContainerHost_OnExecutionReady_Params_Data* data_ = nullptr;
};



class ServiceWorkerContainer_SetController_ParamsDataView {
 public:
  ServiceWorkerContainer_SetController_ParamsDataView() = default;

  ServiceWorkerContainer_SetController_ParamsDataView(
      internal::ServiceWorkerContainer_SetController_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetControllerInfoDataView(
      ::blink::mojom::ControllerServiceWorkerInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadControllerInfo(UserType* output) {
    
    auto* pointer = data_->controller_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ControllerServiceWorkerInfoDataView>(
        pointer, output, message_);
  }
  bool should_notify_controllerchange() const {
    return data_->should_notify_controllerchange;
  }
 private:
  internal::ServiceWorkerContainer_SetController_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainer_PostMessageToClient_ParamsDataView {
 public:
  ServiceWorkerContainer_PostMessageToClient_ParamsDataView() = default;

  ServiceWorkerContainer_PostMessageToClient_ParamsDataView(
      internal::ServiceWorkerContainer_PostMessageToClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSourceDataView(
      ::blink::mojom::ServiceWorkerObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSource(UserType* output) {
    
    auto* pointer = data_->source.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerObjectInfoDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerContainer_PostMessageToClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerContainer_CountFeature_ParamsDataView {
 public:
  ServiceWorkerContainer_CountFeature_ParamsDataView() = default;

  ServiceWorkerContainer_CountFeature_ParamsDataView(
      internal::ServiceWorkerContainer_CountFeature_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFeature(UserType* output) const {
    auto data_value = data_->feature;
    return mojo::internal::Deserialize<::blink::mojom::WebFeature>(
        data_value, output);
  }
  ::blink::mojom::WebFeature feature() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::WebFeature>(data_->feature));
  }
 private:
  internal::ServiceWorkerContainer_CountFeature_Params_Data* data_ = nullptr;
};


inline void ServiceWorkerContainerHost_Register_ParamsDataView::GetScriptUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->script_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ServiceWorkerContainerHost_Register_ParamsDataView::GetOptionsDataView(
    ::blink::mojom::ServiceWorkerRegistrationOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::ServiceWorkerRegistrationOptionsDataView(pointer, message_);
}
inline void ServiceWorkerContainerHost_Register_ParamsDataView::GetOutsideFetchClientSettingsObjectDataView(
    ::blink::mojom::FetchClientSettingsObjectDataView* output) {
  auto pointer = data_->outside_fetch_client_settings_object.Get();
  *output = ::blink::mojom::FetchClientSettingsObjectDataView(pointer, message_);
}


inline void ServiceWorkerContainerHost_Register_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorkerContainerHost_Register_ResponseParamsDataView::GetRegistrationDataView(
    ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView(pointer, message_);
}


inline void ServiceWorkerContainerHost_GetRegistration_ParamsDataView::GetClientUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->client_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void ServiceWorkerContainerHost_GetRegistration_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorkerContainerHost_GetRegistration_ResponseParamsDataView::GetRegistrationDataView(
    ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView(pointer, message_);
}




inline void ServiceWorkerContainerHost_GetRegistrations_ResponseParamsDataView::GetErrorMsgDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_msg.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorkerContainerHost_GetRegistrations_ResponseParamsDataView::GetInfosDataView(
    mojo::ArrayDataView<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>* output) {
  auto pointer = data_->infos.Get();
  *output = mojo::ArrayDataView<::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView>(pointer, message_);
}




inline void ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParamsDataView::GetRegistrationDataView(
    ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView* output) {
  auto pointer = data_->registration.Get();
  *output = ::blink::mojom::ServiceWorkerRegistrationObjectInfoDataView(pointer, message_);
}








inline void ServiceWorkerContainerHost_EnsureFileAccess_ParamsDataView::GetFilesDataView(
    mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>* output) {
  auto pointer = data_->files.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::FilePathDataView>(pointer, message_);
}






inline void ServiceWorkerContainer_SetController_ParamsDataView::GetControllerInfoDataView(
    ::blink::mojom::ControllerServiceWorkerInfoDataView* output) {
  auto pointer = data_->controller_info.Get();
  *output = ::blink::mojom::ControllerServiceWorkerInfoDataView(pointer, message_);
}


inline void ServiceWorkerContainer_PostMessageToClient_ParamsDataView::GetSourceDataView(
    ::blink::mojom::ServiceWorkerObjectInfoDataView* output) {
  auto pointer = data_->source.Get();
  *output = ::blink::mojom::ServiceWorkerObjectInfoDataView(pointer, message_);
}
inline void ServiceWorkerContainer_PostMessageToClient_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_PARAMS_DATA_H_