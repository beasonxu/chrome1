// third_party/blink/public/mojom/service_worker/service_worker_object.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_OBJECT_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_OBJECT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data>;

  ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data();
  ~ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerObjectHost_TerminateForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerObjectHost_TerminateForTesting_Params_Data>;

  ServiceWorkerObjectHost_TerminateForTesting_Params_Data();
  ~ServiceWorkerObjectHost_TerminateForTesting_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerObjectHost_TerminateForTesting_Params_Data) == 8,
              "Bad sizeof(ServiceWorkerObjectHost_TerminateForTesting_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data>;

  ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data();
  ~ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ServiceWorkerObject_StateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ServiceWorkerObject_StateChanged_Params_Data>;

  ServiceWorkerObject_StateChanged_Params_Data();
  ~ServiceWorkerObject_StateChanged_Params_Data() = delete;
};
static_assert(sizeof(ServiceWorkerObject_StateChanged_Params_Data) == 16,
              "Bad sizeof(ServiceWorkerObject_StateChanged_Params_Data)");

}  // namespace internal


class ServiceWorkerObjectHost_PostMessageToServiceWorker_ParamsDataView {
 public:
  ServiceWorkerObjectHost_PostMessageToServiceWorker_ParamsDataView() = default;

  ServiceWorkerObjectHost_PostMessageToServiceWorker_ParamsDataView(
      internal::ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerObjectHost_PostMessageToServiceWorker_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ServiceWorkerObjectHost_TerminateForTesting_ParamsDataView {
 public:
  ServiceWorkerObjectHost_TerminateForTesting_ParamsDataView() = default;

  ServiceWorkerObjectHost_TerminateForTesting_ParamsDataView(
      internal::ServiceWorkerObjectHost_TerminateForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerObjectHost_TerminateForTesting_Params_Data* data_ = nullptr;
};



class ServiceWorkerObjectHost_TerminateForTesting_ResponseParamsDataView {
 public:
  ServiceWorkerObjectHost_TerminateForTesting_ResponseParamsDataView() = default;

  ServiceWorkerObjectHost_TerminateForTesting_ResponseParamsDataView(
      internal::ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ServiceWorkerObjectHost_TerminateForTesting_ResponseParams_Data* data_ = nullptr;
};



class ServiceWorkerObject_StateChanged_ParamsDataView {
 public:
  ServiceWorkerObject_StateChanged_ParamsDataView() = default;

  ServiceWorkerObject_StateChanged_ParamsDataView(
      internal::ServiceWorkerObject_StateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerState>(
        data_value, output);
  }
  ::blink::mojom::ServiceWorkerState state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerState>(data_->state));
  }
 private:
  internal::ServiceWorkerObject_StateChanged_Params_Data* data_ = nullptr;
};


inline void ServiceWorkerObjectHost_PostMessageToServiceWorker_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}







}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_OBJECT_MOJOM_PARAMS_DATA_H_