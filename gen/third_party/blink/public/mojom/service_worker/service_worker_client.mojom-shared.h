// third_party/blink/public/mojom/service_worker/service_worker_client.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CLIENT_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CLIENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_client.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/request_context_frame_type.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class ServiceWorkerClientQueryOptionsDataView;

class ServiceWorkerClientInfoDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ServiceWorkerClientQueryOptionsDataView> {
  using Data = ::blink::mojom::internal::ServiceWorkerClientQueryOptions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::ServiceWorkerClientInfoDataView> {
  using Data = ::blink::mojom::internal::ServiceWorkerClientInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class ServiceWorkerClientType : int32_t {
  
  kWindow = 0,
  
  kDedicatedWorker = 1,
  
  kSharedWorker = 2,
  
  kAll = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, ServiceWorkerClientType value);
inline bool IsKnownEnumValue(ServiceWorkerClientType value) {
  return internal::ServiceWorkerClientType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ServiceWorkerClientLifecycleState : int32_t {
  
  kActive = 0,
  
  kFrozen = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, ServiceWorkerClientLifecycleState value);
inline bool IsKnownEnumValue(ServiceWorkerClientLifecycleState value) {
  return internal::ServiceWorkerClientLifecycleState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class ServiceWorkerClientQueryOptionsDataView {
 public:
  ServiceWorkerClientQueryOptionsDataView() = default;

  ServiceWorkerClientQueryOptionsDataView(
      internal::ServiceWorkerClientQueryOptions_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool include_uncontrolled() const {
    return data_->include_uncontrolled;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadClientType(UserType* output) const {
    auto data_value = data_->client_type;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientType>(
        data_value, output);
  }
  ServiceWorkerClientType client_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerClientType>(data_->client_type));
  }
 private:
  internal::ServiceWorkerClientQueryOptions_Data* data_ = nullptr;
};



class ServiceWorkerClientInfoDataView {
 public:
  ServiceWorkerClientInfoDataView() = default;

  ServiceWorkerClientInfoDataView(
      internal::ServiceWorkerClientInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFrameType(UserType* output) const {
    auto data_value = data_->frame_type;
    return mojo::internal::Deserialize<::blink::mojom::RequestContextFrameType>(
        data_value, output);
  }
  ::blink::mojom::RequestContextFrameType frame_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RequestContextFrameType>(data_->frame_type));
  }
  inline void GetClientUuidDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientUuid(UserType* output) {
    
    auto* pointer = data_->client_uuid.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadClientType(UserType* output) const {
    auto data_value = data_->client_type;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientType>(
        data_value, output);
  }
  ServiceWorkerClientType client_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerClientType>(data_->client_type));
  }
  bool page_hidden() const {
    return data_->page_hidden;
  }
  bool is_focused() const {
    return data_->is_focused;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadLifecycleState(UserType* output) const {
    auto data_value = data_->lifecycle_state;
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerClientLifecycleState>(
        data_value, output);
  }
  ServiceWorkerClientLifecycleState lifecycle_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ServiceWorkerClientLifecycleState>(data_->lifecycle_state));
  }
  inline void GetLastFocusTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLastFocusTime(UserType* output) {
    
    auto* pointer = data_->last_focus_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetCreationTimeDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCreationTime(UserType* output) {
    
    auto* pointer = data_->creation_time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
 private:
  internal::ServiceWorkerClientInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::ServiceWorkerClientType>
    : public mojo::internal::EnumHashImpl<::blink::mojom::ServiceWorkerClientType> {};

template <>
struct hash<::blink::mojom::ServiceWorkerClientLifecycleState>
    : public mojo::internal::EnumHashImpl<::blink::mojom::ServiceWorkerClientLifecycleState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ServiceWorkerClientType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::ServiceWorkerClientType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::ServiceWorkerClientType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ServiceWorkerClientLifecycleState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::ServiceWorkerClientLifecycleState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::ServiceWorkerClientLifecycleState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ServiceWorkerClientQueryOptionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ServiceWorkerClientQueryOptionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ServiceWorkerClientQueryOptions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->include_uncontrolled = Traits::include_uncontrolled(input);
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerClientType>(
        Traits::client_type(input), &fragment->client_type);
  }

  static bool Deserialize(::blink::mojom::internal::ServiceWorkerClientQueryOptions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ServiceWorkerClientQueryOptionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ServiceWorkerClientInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ServiceWorkerClientInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ServiceWorkerClientInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in ServiceWorkerClientInfo struct");
    mojo::internal::Serialize<::blink::mojom::RequestContextFrameType>(
        Traits::frame_type(input), &fragment->frame_type);
    decltype(Traits::client_uuid(input)) in_client_uuid = Traits::client_uuid(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->client_uuid)::BaseType> client_uuid_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_client_uuid, client_uuid_fragment);
    fragment->client_uuid.Set(
        client_uuid_fragment.is_null() ? nullptr : client_uuid_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->client_uuid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null client_uuid in ServiceWorkerClientInfo struct");
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerClientType>(
        Traits::client_type(input), &fragment->client_type);
    fragment->page_hidden = Traits::page_hidden(input);
    fragment->is_focused = Traits::is_focused(input);
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerClientLifecycleState>(
        Traits::lifecycle_state(input), &fragment->lifecycle_state);
    decltype(Traits::last_focus_time(input)) in_last_focus_time = Traits::last_focus_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->last_focus_time)::BaseType> last_focus_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_last_focus_time, last_focus_time_fragment);
    fragment->last_focus_time.Set(
        last_focus_time_fragment.is_null() ? nullptr : last_focus_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->last_focus_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null last_focus_time in ServiceWorkerClientInfo struct");
    decltype(Traits::creation_time(input)) in_creation_time = Traits::creation_time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->creation_time)::BaseType> creation_time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_creation_time, creation_time_fragment);
    fragment->creation_time.Set(
        creation_time_fragment.is_null() ? nullptr : creation_time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->creation_time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null creation_time in ServiceWorkerClientInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::ServiceWorkerClientInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ServiceWorkerClientInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {



inline void ServiceWorkerClientInfoDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ServiceWorkerClientInfoDataView::GetClientUuidDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->client_uuid.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ServiceWorkerClientInfoDataView::GetLastFocusTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->last_focus_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void ServiceWorkerClientInfoDataView::GetCreationTimeDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->creation_time.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::ServiceWorkerClientType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::ServiceWorkerClientType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::ServiceWorkerClientLifecycleState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::ServiceWorkerClientLifecycleState value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CLIENT_MOJOM_SHARED_H_