// third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-params-data.h"
#include "third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_DISPATCH_FETCH_EVENT_PARAMS_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_DISPATCH_FETCH_EVENT_PARAMS_MOJOM_BLINK_JUMBO_H_
#include "services/network/public/mojom/cookie_access_observer.mojom.h"
#include "services/network/public/mojom/devtools_observer.mojom.h"
#include "third_party/blink/renderer/platform/loader/fetch/fetch_api_request_body_mojom_traits.h"
#endif



namespace blink {
namespace mojom {
namespace blink {
DispatchFetchEventParams::DispatchFetchEventParams()
    : request(),
      client_id(),
      preload_url_loader_client_receiver(),
      is_offline_capability_check(false) {}

DispatchFetchEventParams::DispatchFetchEventParams(
    ::blink::mojom::blink::FetchAPIRequestPtr request_in,
    const WTF::String& client_id_in,
    ::mojo::PendingReceiver<::network::mojom::blink::URLLoaderClient> preload_url_loader_client_receiver_in,
    bool is_offline_capability_check_in)
    : request(std::move(request_in)),
      client_id(std::move(client_id_in)),
      preload_url_loader_client_receiver(std::move(preload_url_loader_client_receiver_in)),
      is_offline_capability_check(std::move(is_offline_capability_check_in)) {}

DispatchFetchEventParams::~DispatchFetchEventParams() = default;

void DispatchFetchEventParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "request"), this->request,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::blink::FetchAPIRequestPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "client_id"), this->client_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "preload_url_loader_client_receiver"), this->preload_url_loader_client_receiver,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PendingReceiver<::network::mojom::blink::URLLoaderClient>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_offline_capability_check"), this->is_offline_capability_check,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool DispatchFetchEventParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::DispatchFetchEventParams::DataView, ::blink::mojom::blink::DispatchFetchEventParamsPtr>::Read(
    ::blink::mojom::blink::DispatchFetchEventParams::DataView input,
    ::blink::mojom::blink::DispatchFetchEventParamsPtr* output) {
  bool success = true;
  ::blink::mojom::blink::DispatchFetchEventParamsPtr result(::blink::mojom::blink::DispatchFetchEventParams::New());
  
      if (success && !input.ReadRequest(&result->request))
        success = false;
      if (success && !input.ReadClientId(&result->client_id))
        success = false;
      if (success) {
        result->preload_url_loader_client_receiver =
            input.TakePreloadUrlLoaderClientReceiver<decltype(result->preload_url_loader_client_receiver)>();
      }
      if (success)
        result->is_offline_capability_check = input.is_offline_capability_check();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif