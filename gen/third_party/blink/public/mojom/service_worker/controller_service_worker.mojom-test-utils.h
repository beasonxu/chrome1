// third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_CONTROLLER_SERVICE_WORKER_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_CONTROLLER_SERVICE_WORKER_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT ControllerServiceWorkerInterceptorForTesting : public ControllerServiceWorker {
  virtual ControllerServiceWorker* GetForwardingInterface() = 0;
  void DispatchFetchEventForSubresource(::blink::mojom::DispatchFetchEventParamsPtr params, ::mojo::PendingRemote<::blink::mojom::ServiceWorkerFetchResponseCallback> response_callback, DispatchFetchEventForSubresourceCallback callback) override;
  void Clone(::mojo::PendingReceiver<ControllerServiceWorker> receiver, const ::network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy, ::mojo::PendingRemote<::network::mojom::CrossOriginEmbedderPolicyReporter> coep_reporter) override;
};
class BLINK_COMMON_EXPORT ControllerServiceWorkerAsyncWaiter {
 public:
  explicit ControllerServiceWorkerAsyncWaiter(ControllerServiceWorker* proxy);

  ControllerServiceWorkerAsyncWaiter(const ControllerServiceWorkerAsyncWaiter&) = delete;
  ControllerServiceWorkerAsyncWaiter& operator=(const ControllerServiceWorkerAsyncWaiter&) = delete;

  ~ControllerServiceWorkerAsyncWaiter();
  void DispatchFetchEventForSubresource(
      ::blink::mojom::DispatchFetchEventParamsPtr params, ::mojo::PendingRemote<::blink::mojom::ServiceWorkerFetchResponseCallback> response_callback, ::blink::mojom::ServiceWorkerEventStatus* out_status);

 private:
  ControllerServiceWorker* const proxy_;
};


class BLINK_COMMON_EXPORT ControllerServiceWorkerConnectorInterceptorForTesting : public ControllerServiceWorkerConnector {
  virtual ControllerServiceWorkerConnector* GetForwardingInterface() = 0;
  void UpdateController(::mojo::PendingRemote<ControllerServiceWorker> controller) override;
};
class BLINK_COMMON_EXPORT ControllerServiceWorkerConnectorAsyncWaiter {
 public:
  explicit ControllerServiceWorkerConnectorAsyncWaiter(ControllerServiceWorkerConnector* proxy);

  ControllerServiceWorkerConnectorAsyncWaiter(const ControllerServiceWorkerConnectorAsyncWaiter&) = delete;
  ControllerServiceWorkerConnectorAsyncWaiter& operator=(const ControllerServiceWorkerConnectorAsyncWaiter&) = delete;

  ~ControllerServiceWorkerConnectorAsyncWaiter();

 private:
  ControllerServiceWorkerConnector* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_CONTROLLER_SERVICE_WORKER_MOJOM_TEST_UTILS_H_