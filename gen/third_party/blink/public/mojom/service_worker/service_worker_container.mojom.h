// third_party/blink/public/mojom/service_worker/service_worker_container.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-forward.h"
#include "mojo/public/mojom/base/file_path.mojom.h"
#include "mojo/public/mojom/base/string16.mojom-forward.h"
#include "third_party/blink/public/mojom/loader/fetch_client_settings_object.mojom-forward.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_error_type.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_object.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_registration.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_registration_options.mojom-forward.h"
#include "third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom-forward.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class ServiceWorkerContainerHostProxy;

template <typename ImplRefTraits>
class ServiceWorkerContainerHostStub;

class ServiceWorkerContainerHostRequestValidator;
class ServiceWorkerContainerHostResponseValidator;


class BLINK_COMMON_EXPORT ServiceWorkerContainerHost
    : public ServiceWorkerContainerHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ServiceWorkerContainerHostInterfaceBase;
  using Proxy_ = ServiceWorkerContainerHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = ServiceWorkerContainerHostStub<ImplRefTraits>;

  using RequestValidator_ = ServiceWorkerContainerHostRequestValidator;
  using ResponseValidator_ = ServiceWorkerContainerHostResponseValidator;
  enum MethodMinVersions : uint32_t {
    kRegisterMinVersion = 0,
    kGetRegistrationMinVersion = 0,
    kGetRegistrationsMinVersion = 0,
    kGetRegistrationForReadyMinVersion = 0,
    kEnsureControllerServiceWorkerMinVersion = 0,
    kCloneContainerHostMinVersion = 0,
    kHintToUpdateServiceWorkerMinVersion = 0,
    kEnsureFileAccessMinVersion = 0,
    kOnExecutionReadyMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Register_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetRegistration_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetRegistrations_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetRegistrationForReady_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct EnsureControllerServiceWorker_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CloneContainerHost_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct HintToUpdateServiceWorker_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct EnsureFileAccess_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnExecutionReady_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ServiceWorkerContainerHost() = default;


  using RegisterCallback = base::OnceCallback<void(::blink::mojom::ServiceWorkerErrorType, const absl::optional<std::string>&, ::blink::mojom::ServiceWorkerRegistrationObjectInfoPtr)>;
  
  virtual void Register(const ::GURL& script_url, ::blink::mojom::ServiceWorkerRegistrationOptionsPtr options, ::blink::mojom::FetchClientSettingsObjectPtr outside_fetch_client_settings_object, RegisterCallback callback) = 0;


  using GetRegistrationCallback = base::OnceCallback<void(::blink::mojom::ServiceWorkerErrorType, const absl::optional<std::string>&, ::blink::mojom::ServiceWorkerRegistrationObjectInfoPtr)>;
  
  virtual void GetRegistration(const ::GURL& client_url, GetRegistrationCallback callback) = 0;


  using GetRegistrationsCallback = base::OnceCallback<void(::blink::mojom::ServiceWorkerErrorType, const absl::optional<std::string>&, absl::optional<std::vector<::blink::mojom::ServiceWorkerRegistrationObjectInfoPtr>>)>;
  
  virtual void GetRegistrations(GetRegistrationsCallback callback) = 0;


  using GetRegistrationForReadyCallback = base::OnceCallback<void(::blink::mojom::ServiceWorkerRegistrationObjectInfoPtr)>;
  
  virtual void GetRegistrationForReady(GetRegistrationForReadyCallback callback) = 0;

  
  virtual void EnsureControllerServiceWorker(::mojo::PendingReceiver<::blink::mojom::ControllerServiceWorker> receiver, ControllerServiceWorkerPurpose purpose) = 0;

  
  virtual void CloneContainerHost(::mojo::PendingReceiver<ServiceWorkerContainerHost> container_host) = 0;

  
  virtual void HintToUpdateServiceWorker() = 0;


  using EnsureFileAccessCallback = base::OnceCallback<void()>;
  
  virtual void EnsureFileAccess(const std::vector<::base::FilePath>& files, EnsureFileAccessCallback callback) = 0;

  
  virtual void OnExecutionReady() = 0;
};

class ServiceWorkerContainerProxy;

template <typename ImplRefTraits>
class ServiceWorkerContainerStub;

class ServiceWorkerContainerRequestValidator;


class BLINK_COMMON_EXPORT ServiceWorkerContainer
    : public ServiceWorkerContainerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ServiceWorkerContainerInterfaceBase;
  using Proxy_ = ServiceWorkerContainerProxy;

  template <typename ImplRefTraits>
  using Stub_ = ServiceWorkerContainerStub<ImplRefTraits>;

  using RequestValidator_ = ServiceWorkerContainerRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kSetControllerMinVersion = 0,
    kPostMessageToClientMinVersion = 0,
    kCountFeatureMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SetController_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PostMessageToClient_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CountFeature_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ServiceWorkerContainer() = default;

  
  virtual void SetController(::blink::mojom::ControllerServiceWorkerInfoPtr controller_info, bool should_notify_controllerchange) = 0;

  
  virtual void PostMessageToClient(::blink::mojom::ServiceWorkerObjectInfoPtr source, ::blink::TransferableMessage message) = 0;

  
  virtual void CountFeature(::blink::mojom::WebFeature feature) = 0;
};



class BLINK_COMMON_EXPORT ServiceWorkerContainerHostProxy
    : public ServiceWorkerContainerHost {
 public:
  using InterfaceType = ServiceWorkerContainerHost;

  explicit ServiceWorkerContainerHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Register(const ::GURL& script_url, ::blink::mojom::ServiceWorkerRegistrationOptionsPtr options, ::blink::mojom::FetchClientSettingsObjectPtr outside_fetch_client_settings_object, RegisterCallback callback) final;
  
  void GetRegistration(const ::GURL& client_url, GetRegistrationCallback callback) final;
  
  void GetRegistrations(GetRegistrationsCallback callback) final;
  
  void GetRegistrationForReady(GetRegistrationForReadyCallback callback) final;
  
  void EnsureControllerServiceWorker(::mojo::PendingReceiver<::blink::mojom::ControllerServiceWorker> receiver, ControllerServiceWorkerPurpose purpose) final;
  
  void CloneContainerHost(::mojo::PendingReceiver<ServiceWorkerContainerHost> container_host) final;
  
  void HintToUpdateServiceWorker() final;
  
  void EnsureFileAccess(const std::vector<::base::FilePath>& files, EnsureFileAccessCallback callback) final;
  
  void OnExecutionReady() final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_COMMON_EXPORT ServiceWorkerContainerProxy
    : public ServiceWorkerContainer {
 public:
  using InterfaceType = ServiceWorkerContainer;

  explicit ServiceWorkerContainerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SetController(::blink::mojom::ControllerServiceWorkerInfoPtr controller_info, bool should_notify_controllerchange) final;
  
  void PostMessageToClient(::blink::mojom::ServiceWorkerObjectInfoPtr source, ::blink::TransferableMessage message) final;
  
  void CountFeature(::blink::mojom::WebFeature feature) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT ServiceWorkerContainerHostStubDispatch {
 public:
  static bool Accept(ServiceWorkerContainerHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ServiceWorkerContainerHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ServiceWorkerContainerHost>>
class ServiceWorkerContainerHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ServiceWorkerContainerHostStub() = default;
  ~ServiceWorkerContainerHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ServiceWorkerContainerHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ServiceWorkerContainerHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT ServiceWorkerContainerStubDispatch {
 public:
  static bool Accept(ServiceWorkerContainer* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ServiceWorkerContainer* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ServiceWorkerContainer>>
class ServiceWorkerContainerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ServiceWorkerContainerStub() = default;
  ~ServiceWorkerContainerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ServiceWorkerContainerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ServiceWorkerContainerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT ServiceWorkerContainerHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT ServiceWorkerContainerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT ServiceWorkerContainerHostResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class BLINK_COMMON_EXPORT ServiceWorkerContainerInfoForClient {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ServiceWorkerContainerInfoForClient, T>::value>;
  using DataView = ServiceWorkerContainerInfoForClientDataView;
  using Data_ = internal::ServiceWorkerContainerInfoForClient_Data;

  template <typename... Args>
  static ServiceWorkerContainerInfoForClientPtr New(Args&&... args) {
    return ServiceWorkerContainerInfoForClientPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ServiceWorkerContainerInfoForClientPtr From(const U& u) {
    return mojo::TypeConverter<ServiceWorkerContainerInfoForClientPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ServiceWorkerContainerInfoForClient>::Convert(*this);
  }


  ServiceWorkerContainerInfoForClient();

  ServiceWorkerContainerInfoForClient(
      ::mojo::PendingAssociatedRemote<ServiceWorkerContainerHost> host_remote,
      ::mojo::PendingAssociatedReceiver<ServiceWorkerContainer> client_receiver);

ServiceWorkerContainerInfoForClient(const ServiceWorkerContainerInfoForClient&) = delete;
ServiceWorkerContainerInfoForClient& operator=(const ServiceWorkerContainerInfoForClient&) = delete;

  ~ServiceWorkerContainerInfoForClient();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ServiceWorkerContainerInfoForClientPtr>
  ServiceWorkerContainerInfoForClientPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ServiceWorkerContainerInfoForClient::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ServiceWorkerContainerInfoForClient_UnserializedMessageContext<
            UserType, ServiceWorkerContainerInfoForClient::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ServiceWorkerContainerInfoForClient::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ServiceWorkerContainerInfoForClient::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ServiceWorkerContainerInfoForClient_UnserializedMessageContext<
            UserType, ServiceWorkerContainerInfoForClient::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ServiceWorkerContainerInfoForClient::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::mojo::PendingAssociatedRemote<ServiceWorkerContainerHost> host_remote;
  
  ::mojo::PendingAssociatedReceiver<ServiceWorkerContainer> client_receiver;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ServiceWorkerContainerInfoForClientPtr ServiceWorkerContainerInfoForClient::Clone() const {
  return New(
      mojo::Clone(host_remote),
      mojo::Clone(client_receiver)
  );
}

template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>*>
bool ServiceWorkerContainerInfoForClient::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->host_remote, other_struct.host_remote))
    return false;
  if (!mojo::Equals(this->client_receiver, other_struct.client_receiver))
    return false;
  return true;
}

template <typename T, ServiceWorkerContainerInfoForClient::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.host_remote < rhs.host_remote)
    return true;
  if (rhs.host_remote < lhs.host_remote)
    return false;
  if (lhs.client_receiver < rhs.client_receiver)
    return true;
  if (rhs.client_receiver < lhs.client_receiver)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::ServiceWorkerContainerInfoForClient::DataView,
                                         ::blink::mojom::ServiceWorkerContainerInfoForClientPtr> {
  static bool IsNull(const ::blink::mojom::ServiceWorkerContainerInfoForClientPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::ServiceWorkerContainerInfoForClientPtr* output) { output->reset(); }

  static  decltype(::blink::mojom::ServiceWorkerContainerInfoForClient::host_remote)& host_remote(
       ::blink::mojom::ServiceWorkerContainerInfoForClientPtr& input) {
    return input->host_remote;
  }

  static  decltype(::blink::mojom::ServiceWorkerContainerInfoForClient::client_receiver)& client_receiver(
       ::blink::mojom::ServiceWorkerContainerInfoForClientPtr& input) {
    return input->client_receiver;
  }

  static bool Read(::blink::mojom::ServiceWorkerContainerInfoForClient::DataView input, ::blink::mojom::ServiceWorkerContainerInfoForClientPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_SERVICE_WORKER_CONTAINER_MOJOM_H_