// third_party/blink/public/mojom/service_worker/service_worker_container.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* ControllerServiceWorkerPurposeToStringHelper(ControllerServiceWorkerPurpose value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case ControllerServiceWorkerPurpose::FETCH_SUB_RESOURCE:
      return "FETCH_SUB_RESOURCE";
    default:
      return nullptr;
  }
}

std::string ControllerServiceWorkerPurposeToString(ControllerServiceWorkerPurpose value) {
  const char *str = ControllerServiceWorkerPurposeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown ControllerServiceWorkerPurpose value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, ControllerServiceWorkerPurpose value) {
  return os << ControllerServiceWorkerPurposeToString(value);
}

namespace internal {


// static
bool ServiceWorkerContainerInfoForClient_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerInfoForClient_Data* object =
      static_cast<const ServiceWorkerContainerInfoForClient_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->host_remote, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->host_remote,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->client_receiver, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->client_receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

ServiceWorkerContainerInfoForClient_Data::ServiceWorkerContainerInfoForClient_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_Register_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_Register_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_Register_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->script_url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->script_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->options, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->options, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->outside_fetch_client_settings_object, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->outside_fetch_client_settings_object, validation_context))
    return false;

  return true;
}

ServiceWorkerContainerHost_Register_Params_Data::ServiceWorkerContainerHost_Register_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_Register_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_Register_ResponseParams_Data* object =
      static_cast<const ServiceWorkerContainerHost_Register_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::ServiceWorkerErrorType_Data
        ::Validate(object->error, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams error_msg_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_msg, validation_context,
                                         &error_msg_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->registration, validation_context))
    return false;

  return true;
}

ServiceWorkerContainerHost_Register_ResponseParams_Data::ServiceWorkerContainerHost_Register_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_GetRegistration_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_GetRegistration_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_GetRegistration_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->client_url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->client_url, validation_context))
    return false;

  return true;
}

ServiceWorkerContainerHost_GetRegistration_Params_Data::ServiceWorkerContainerHost_GetRegistration_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data* object =
      static_cast<const ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::ServiceWorkerErrorType_Data
        ::Validate(object->error, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams error_msg_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_msg, validation_context,
                                         &error_msg_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->registration, validation_context))
    return false;

  return true;
}

ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data::ServiceWorkerContainerHost_GetRegistration_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_GetRegistrations_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_GetRegistrations_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_GetRegistrations_Params_Data*>(data);

  return true;
}

ServiceWorkerContainerHost_GetRegistrations_Params_Data::ServiceWorkerContainerHost_GetRegistrations_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data* object =
      static_cast<const ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::ServiceWorkerErrorType_Data
        ::Validate(object->error, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams error_msg_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->error_msg, validation_context,
                                         &error_msg_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams infos_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->infos, validation_context,
                                         &infos_validate_params)) {
    return false;
  }

  return true;
}

ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data::ServiceWorkerContainerHost_GetRegistrations_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data*>(data);

  return true;
}

ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data::ServiceWorkerContainerHost_GetRegistrationForReady_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data* object =
      static_cast<const ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidateStruct(object->registration, validation_context))
    return false;

  return true;
}

ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data::ServiceWorkerContainerHost_GetRegistrationForReady_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }


  if (!::blink::mojom::internal::ControllerServiceWorkerPurpose_Data
        ::Validate(object->purpose, validation_context))
    return false;

  return true;
}

ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data::ServiceWorkerContainerHost_EnsureControllerServiceWorker_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_CloneContainerHost_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_CloneContainerHost_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_CloneContainerHost_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->container_host, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->container_host,
                                                 validation_context)) {
    return false;
  }

  return true;
}

ServiceWorkerContainerHost_CloneContainerHost_Params_Data::ServiceWorkerContainerHost_CloneContainerHost_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data*>(data);

  return true;
}

ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data::ServiceWorkerContainerHost_HintToUpdateServiceWorker_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_EnsureFileAccess_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_EnsureFileAccess_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_EnsureFileAccess_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->files, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams files_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->files, validation_context,
                                         &files_validate_params)) {
    return false;
  }

  return true;
}

ServiceWorkerContainerHost_EnsureFileAccess_Params_Data::ServiceWorkerContainerHost_EnsureFileAccess_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data* object =
      static_cast<const ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data*>(data);

  return true;
}

ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data::ServiceWorkerContainerHost_EnsureFileAccess_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainerHost_OnExecutionReady_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainerHost_OnExecutionReady_Params_Data* object =
      static_cast<const ServiceWorkerContainerHost_OnExecutionReady_Params_Data*>(data);

  return true;
}

ServiceWorkerContainerHost_OnExecutionReady_Params_Data::ServiceWorkerContainerHost_OnExecutionReady_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainer_SetController_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainer_SetController_Params_Data* object =
      static_cast<const ServiceWorkerContainer_SetController_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->controller_info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->controller_info, validation_context))
    return false;

  return true;
}

ServiceWorkerContainer_SetController_Params_Data::ServiceWorkerContainer_SetController_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainer_PostMessageToClient_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainer_PostMessageToClient_Params_Data* object =
      static_cast<const ServiceWorkerContainer_PostMessageToClient_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->source, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->message, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->message, validation_context))
    return false;

  return true;
}

ServiceWorkerContainer_PostMessageToClient_Params_Data::ServiceWorkerContainer_PostMessageToClient_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool ServiceWorkerContainer_CountFeature_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const ServiceWorkerContainer_CountFeature_Params_Data* object =
      static_cast<const ServiceWorkerContainer_CountFeature_Params_Data*>(data);


  if (!::blink::mojom::internal::WebFeature_Data
        ::Validate(object->feature, validation_context))
    return false;

  return true;
}

ServiceWorkerContainer_CountFeature_Params_Data::ServiceWorkerContainer_CountFeature_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::ControllerServiceWorkerPurpose>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::ControllerServiceWorkerPurpose value) {
  return std::move(context).WriteString(::blink::mojom::ControllerServiceWorkerPurposeToString(value));
}

} // namespace perfetto