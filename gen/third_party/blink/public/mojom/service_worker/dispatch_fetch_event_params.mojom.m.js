// third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  URLLoaderClientRemote as network_mojom_URLLoaderClientRemote,
  URLLoaderClientPendingReceiver as network_mojom_URLLoaderClientPendingReceiver
} from '../../../../../services/network/public/mojom/url_loader.mojom.m.js';

import {
  FetchAPIRequest as blink_mojom_FetchAPIRequest,
  FetchAPIRequestSpec as blink_mojom_FetchAPIRequestSpec
} from '../fetch/fetch_api_request.mojom.m.js';



/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DispatchFetchEventParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    DispatchFetchEventParamsSpec.$,
    'DispatchFetchEventParams',
    [
      mojo.internal.StructField(
        'request', 0,
        0,
        blink_mojom_FetchAPIRequestSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'clientId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'preloadUrlLoaderClientReceiver', 16,
        0,
        mojo.internal.InterfaceRequest(network_mojom_URLLoaderClientPendingReceiver),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'isOfflineCapabilityCheck', 20,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class DispatchFetchEventParams {
  constructor() {
    /** @type { !blink_mojom_FetchAPIRequest } */
    this.request;
    /** @type { !string } */
    this.clientId;
    /** @type { (network_mojom_URLLoaderClientPendingReceiver|undefined) } */
    this.preloadUrlLoaderClientReceiver;
    /** @type { !boolean } */
    this.isOfflineCapabilityCheck;
  }
}

