// third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_CONTROLLER_SERVICE_WORKER_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_CONTROLLER_SERVICE_WORKER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "services/network/public/mojom/cross_origin_embedder_policy.mojom-shared.h"
#include "services/network/public/mojom/url_request.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker_mode.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/dispatch_fetch_event_params.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_event_status.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_fetch_response_callback.mojom-shared.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_object.mojom-shared.h"
#include "third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class ControllerServiceWorkerInfoDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ControllerServiceWorkerInfoDataView> {
  using Data = ::blink::mojom::internal::ControllerServiceWorkerInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class ControllerServiceWorkerInterfaceBase {};

using ControllerServiceWorkerPtrDataView =
    mojo::InterfacePtrDataView<ControllerServiceWorkerInterfaceBase>;
using ControllerServiceWorkerRequestDataView =
    mojo::InterfaceRequestDataView<ControllerServiceWorkerInterfaceBase>;
using ControllerServiceWorkerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ControllerServiceWorkerInterfaceBase>;
using ControllerServiceWorkerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ControllerServiceWorkerInterfaceBase>;
class ControllerServiceWorkerConnectorInterfaceBase {};

using ControllerServiceWorkerConnectorPtrDataView =
    mojo::InterfacePtrDataView<ControllerServiceWorkerConnectorInterfaceBase>;
using ControllerServiceWorkerConnectorRequestDataView =
    mojo::InterfaceRequestDataView<ControllerServiceWorkerConnectorInterfaceBase>;
using ControllerServiceWorkerConnectorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ControllerServiceWorkerConnectorInterfaceBase>;
using ControllerServiceWorkerConnectorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ControllerServiceWorkerConnectorInterfaceBase>;


class ControllerServiceWorkerInfoDataView {
 public:
  ControllerServiceWorkerInfoDataView() = default;

  ControllerServiceWorkerInfoDataView(
      internal::ControllerServiceWorkerInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::blink::mojom::ControllerServiceWorkerMode>(
        data_value, output);
  }
  ::blink::mojom::ControllerServiceWorkerMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ControllerServiceWorkerMode>(data_->mode));
  }
  template <typename UserType>
  UserType TakeRemoteController() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::ControllerServiceWorkerInterfaceBase>>(
            &data_->remote_controller, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetClientIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClientId(UserType* output) {
    
    auto* pointer = data_->client_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFetchRequestWindowIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFetchRequestWindowId(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnguessableTokenDataView, UserType>(),
    "Attempting to read the optional `fetch_request_window_id` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFetchRequestWindowId` instead "
    "of `ReadFetchRequestWindowId if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->fetch_request_window_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetObjectInfoDataView(
      ::blink::mojom::ServiceWorkerObjectInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadObjectInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerObjectInfoDataView, UserType>(),
    "Attempting to read the optional `object_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadObjectInfo` instead "
    "of `ReadObjectInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->object_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerObjectInfoDataView>(
        pointer, output, message_);
  }
  inline void GetUsedFeaturesDataView(
      mojo::ArrayDataView<::blink::mojom::WebFeature>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsedFeatures(UserType* output) {
    
    auto* pointer = data_->used_features.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::WebFeature>>(
        pointer, output, message_);
  }
 private:
  internal::ControllerServiceWorkerInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ControllerServiceWorkerInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ControllerServiceWorkerInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::ControllerServiceWorkerInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::ControllerServiceWorkerMode>(
        Traits::mode(input), &fragment->mode);
    decltype(Traits::remote_controller(input)) in_remote_controller = Traits::remote_controller(input);
    mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::ControllerServiceWorkerInterfaceBase>>(
        in_remote_controller, &fragment->remote_controller, &fragment.message());
    decltype(Traits::client_id(input)) in_client_id = Traits::client_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->client_id)::BaseType> client_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_client_id, client_id_fragment);
    fragment->client_id.Set(
        client_id_fragment.is_null() ? nullptr : client_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->client_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null client_id in ControllerServiceWorkerInfo struct");
    decltype(Traits::fetch_request_window_id(input)) in_fetch_request_window_id = Traits::fetch_request_window_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->fetch_request_window_id)::BaseType> fetch_request_window_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_fetch_request_window_id, fetch_request_window_id_fragment);
    fragment->fetch_request_window_id.Set(
        fetch_request_window_id_fragment.is_null() ? nullptr : fetch_request_window_id_fragment.data());
    decltype(Traits::object_info(input)) in_object_info = Traits::object_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->object_info)::BaseType> object_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::ServiceWorkerObjectInfoDataView>(
        in_object_info, object_info_fragment);
    fragment->object_info.Set(
        object_info_fragment.is_null() ? nullptr : object_info_fragment.data());
    decltype(Traits::used_features(input)) in_used_features = Traits::used_features(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->used_features)::BaseType>
        used_features_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams used_features_validate_params(
        0, ::blink::mojom::internal::WebFeature_Data::Validate);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::WebFeature>>(
        in_used_features, used_features_fragment, &used_features_validate_params);
    fragment->used_features.Set(
        used_features_fragment.is_null() ? nullptr : used_features_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->used_features.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null used_features in ControllerServiceWorkerInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::ControllerServiceWorkerInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ControllerServiceWorkerInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void ControllerServiceWorkerInfoDataView::GetClientIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->client_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ControllerServiceWorkerInfoDataView::GetFetchRequestWindowIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->fetch_request_window_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void ControllerServiceWorkerInfoDataView::GetObjectInfoDataView(
    ::blink::mojom::ServiceWorkerObjectInfoDataView* output) {
  auto pointer = data_->object_info.Get();
  *output = ::blink::mojom::ServiceWorkerObjectInfoDataView(pointer, message_);
}
inline void ControllerServiceWorkerInfoDataView::GetUsedFeaturesDataView(
    mojo::ArrayDataView<::blink::mojom::WebFeature>* output) {
  auto pointer = data_->used_features.Get();
  *output = mojo::ArrayDataView<::blink::mojom::WebFeature>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SERVICE_WORKER_CONTROLLER_SERVICE_WORKER_MOJOM_SHARED_H_