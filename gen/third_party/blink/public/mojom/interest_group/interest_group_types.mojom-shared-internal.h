// third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class InterestGroupAd_Data;
class InterestGroup_Data;
class AuctionAdConfigNonSharedParams_Data;
class AuctionAdConfig_Data;

struct InterestGroup_ExecutionMode_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) InterestGroupAd_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> render_url;
  mojo::internal::Pointer<mojo::internal::String_Data> metadata;

 private:
  friend class mojo::internal::MessageFragment<InterestGroupAd_Data>;

  InterestGroupAd_Data();
  ~InterestGroupAd_Data() = delete;
};
static_assert(sizeof(InterestGroupAd_Data) == 24,
              "Bad sizeof(InterestGroupAd_Data)");
// Used by InterestGroupAd::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct InterestGroupAd_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  InterestGroupAd_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~InterestGroupAd_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<InterestGroupAd_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    InterestGroupAd_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) InterestGroup_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expiry;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> owner;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  double priority;
  int32_t execution_mode;
  uint8_t pad4_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> bidding_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> bidding_wasm_helper_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> daily_update_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> trusted_bidding_signals_url;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> trusted_bidding_signals_keys;
  mojo::internal::Pointer<mojo::internal::String_Data> user_bidding_signals;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::InterestGroupAd_Data>>> ads;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::InterestGroupAd_Data>>> ad_components;

 private:
  friend class mojo::internal::MessageFragment<InterestGroup_Data>;

  InterestGroup_Data();
  ~InterestGroup_Data() = delete;
};
static_assert(sizeof(InterestGroup_Data) == 112,
              "Bad sizeof(InterestGroup_Data)");
// Used by InterestGroup::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct InterestGroup_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  InterestGroup_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~InterestGroup_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<InterestGroup_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    InterestGroup_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AuctionAdConfigNonSharedParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>>> interest_group_buyers;
  mojo::internal::Pointer<mojo::internal::String_Data> auction_signals;
  mojo::internal::Pointer<mojo::internal::String_Data> seller_signals;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> seller_timeout;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>, mojo::internal::Pointer<mojo::internal::String_Data>>> per_buyer_signals;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>, mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data>>> per_buyer_timeouts;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> all_buyers_timeout;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>, uint16_t>> per_buyer_group_limits;
  uint16_t all_buyers_group_limit;
  uint8_t pad8_[6];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::AuctionAdConfig_Data>>> component_auctions;

 private:
  friend class mojo::internal::MessageFragment<AuctionAdConfigNonSharedParams_Data>;

  AuctionAdConfigNonSharedParams_Data();
  ~AuctionAdConfigNonSharedParams_Data() = delete;
};
static_assert(sizeof(AuctionAdConfigNonSharedParams_Data) == 88,
              "Bad sizeof(AuctionAdConfigNonSharedParams_Data)");
// Used by AuctionAdConfigNonSharedParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AuctionAdConfigNonSharedParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AuctionAdConfigNonSharedParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AuctionAdConfigNonSharedParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AuctionAdConfigNonSharedParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AuctionAdConfigNonSharedParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AuctionAdConfig_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> seller;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> decision_logic_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> trusted_scoring_signals_url;
  mojo::internal::Pointer<internal::AuctionAdConfigNonSharedParams_Data> auction_ad_config_non_shared_params;
  uint8_t has_seller_experiment_group_id : 1;
  uint8_t has_all_buyer_experiment_group_id : 1;
  uint8_t pad5_[1];
  uint16_t seller_experiment_group_id;
  int16_t all_buyer_experiment_group_id;
  uint8_t pad7_[2];
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Origin_Data>, uint16_t>> per_buyer_experiment_group_ids;

 private:
  friend class mojo::internal::MessageFragment<AuctionAdConfig_Data>;

  AuctionAdConfig_Data();
  ~AuctionAdConfig_Data() = delete;
};
static_assert(sizeof(AuctionAdConfig_Data) == 56,
              "Bad sizeof(AuctionAdConfig_Data)");
// Used by AuctionAdConfig::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AuctionAdConfig_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AuctionAdConfig_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AuctionAdConfig_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AuctionAdConfig_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AuctionAdConfig_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_INTEREST_GROUP_TYPES_MOJOM_SHARED_INTERNAL_H_