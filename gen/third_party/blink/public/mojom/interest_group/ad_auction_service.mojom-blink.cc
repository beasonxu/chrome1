// third_party/blink/public/mojom/interest_group/ad_auction_service.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/interest_group/ad_auction_service.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/interest_group/ad_auction_service.mojom-params-data.h"
#include "third_party/blink/public/mojom/interest_group/ad_auction_service.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/interest_group/ad_auction_service.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/interest_group/ad_auction_service.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_AD_AUCTION_SERVICE_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INTEREST_GROUP_AD_AUCTION_SERVICE_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
Replacement::Replacement()
    : match(),
      replacement() {}

Replacement::Replacement(
    const WTF::String& match_in,
    const WTF::String& replacement_in)
    : match(std::move(match_in)),
      replacement(std::move(replacement_in)) {}

Replacement::~Replacement() = default;
size_t Replacement::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->match);
  seed = mojo::internal::WTFHash(seed, this->replacement);
  return seed;
}

void Replacement::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "match"), this->match,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "replacement"), this->replacement,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool Replacement::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char AdAuctionService::Name_[] = "blink.mojom.AdAuctionService";

AdAuctionService::IPCStableHashFunction AdAuctionService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAdAuctionService_CreateAdRequest_Name: {
      return &AdAuctionService::CreateAdRequest_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_FinalizeAd_Name: {
      return &AdAuctionService::FinalizeAd_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_RunAdAuction_Name: {
      return &AdAuctionService::RunAdAuction_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_JoinInterestGroup_Name: {
      return &AdAuctionService::JoinInterestGroup_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_LeaveInterestGroup_Name: {
      return &AdAuctionService::LeaveInterestGroup_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_LeaveInterestGroupForDocument_Name: {
      return &AdAuctionService::LeaveInterestGroupForDocument_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_UpdateAdInterestGroups_Name: {
      return &AdAuctionService::UpdateAdInterestGroups_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_DeprecatedGetURLFromURN_Name: {
      return &AdAuctionService::DeprecatedGetURLFromURN_Sym::IPCStableHash;
    }
    case internal::kAdAuctionService_DeprecatedReplaceInURN_Name: {
      return &AdAuctionService::DeprecatedReplaceInURN_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AdAuctionService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAdAuctionService_CreateAdRequest_Name:
            return "Receive blink::mojom::AdAuctionService::CreateAdRequest";
      case internal::kAdAuctionService_FinalizeAd_Name:
            return "Receive blink::mojom::AdAuctionService::FinalizeAd";
      case internal::kAdAuctionService_RunAdAuction_Name:
            return "Receive blink::mojom::AdAuctionService::RunAdAuction";
      case internal::kAdAuctionService_JoinInterestGroup_Name:
            return "Receive blink::mojom::AdAuctionService::JoinInterestGroup";
      case internal::kAdAuctionService_LeaveInterestGroup_Name:
            return "Receive blink::mojom::AdAuctionService::LeaveInterestGroup";
      case internal::kAdAuctionService_LeaveInterestGroupForDocument_Name:
            return "Receive blink::mojom::AdAuctionService::LeaveInterestGroupForDocument";
      case internal::kAdAuctionService_UpdateAdInterestGroups_Name:
            return "Receive blink::mojom::AdAuctionService::UpdateAdInterestGroups";
      case internal::kAdAuctionService_DeprecatedGetURLFromURN_Name:
            return "Receive blink::mojom::AdAuctionService::DeprecatedGetURLFromURN";
      case internal::kAdAuctionService_DeprecatedReplaceInURN_Name:
            return "Receive blink::mojom::AdAuctionService::DeprecatedReplaceInURN";
    }
  } else {
    switch (message.name()) {
      case internal::kAdAuctionService_CreateAdRequest_Name:
            return "Receive reply blink::mojom::AdAuctionService::CreateAdRequest";
      case internal::kAdAuctionService_FinalizeAd_Name:
            return "Receive reply blink::mojom::AdAuctionService::FinalizeAd";
      case internal::kAdAuctionService_RunAdAuction_Name:
            return "Receive reply blink::mojom::AdAuctionService::RunAdAuction";
      case internal::kAdAuctionService_JoinInterestGroup_Name:
            return "Receive reply blink::mojom::AdAuctionService::JoinInterestGroup";
      case internal::kAdAuctionService_LeaveInterestGroup_Name:
            return "Receive reply blink::mojom::AdAuctionService::LeaveInterestGroup";
      case internal::kAdAuctionService_LeaveInterestGroupForDocument_Name:
            return "Receive reply blink::mojom::AdAuctionService::LeaveInterestGroupForDocument";
      case internal::kAdAuctionService_UpdateAdInterestGroups_Name:
            return "Receive reply blink::mojom::AdAuctionService::UpdateAdInterestGroups";
      case internal::kAdAuctionService_DeprecatedGetURLFromURN_Name:
            return "Receive reply blink::mojom::AdAuctionService::DeprecatedGetURLFromURN";
      case internal::kAdAuctionService_DeprecatedReplaceInURN_Name:
            return "Receive reply blink::mojom::AdAuctionService::DeprecatedReplaceInURN";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AdAuctionService::CreateAdRequest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::CreateAdRequest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::FinalizeAd_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::FinalizeAd");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::RunAdAuction_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::RunAdAuction");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::JoinInterestGroup_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::JoinInterestGroup");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::LeaveInterestGroup_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::LeaveInterestGroup");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::LeaveInterestGroupForDocument_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::LeaveInterestGroupForDocument");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::UpdateAdInterestGroups_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::UpdateAdInterestGroups");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::DeprecatedGetURLFromURN_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::DeprecatedGetURLFromURN");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AdAuctionService::DeprecatedReplaceInURN_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::AdAuctionService::DeprecatedReplaceInURN");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class AdAuctionService_CreateAdRequest_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_CreateAdRequest_ForwardToCallback(
      AdAuctionService::CreateAdRequestCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_CreateAdRequest_ForwardToCallback(const AdAuctionService_CreateAdRequest_ForwardToCallback&) = delete;
  AdAuctionService_CreateAdRequest_ForwardToCallback& operator=(const AdAuctionService_CreateAdRequest_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::CreateAdRequestCallback callback_;
};

class AdAuctionService_FinalizeAd_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_FinalizeAd_ForwardToCallback(
      AdAuctionService::FinalizeAdCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_FinalizeAd_ForwardToCallback(const AdAuctionService_FinalizeAd_ForwardToCallback&) = delete;
  AdAuctionService_FinalizeAd_ForwardToCallback& operator=(const AdAuctionService_FinalizeAd_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::FinalizeAdCallback callback_;
};

class AdAuctionService_RunAdAuction_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_RunAdAuction_ForwardToCallback(
      AdAuctionService::RunAdAuctionCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_RunAdAuction_ForwardToCallback(const AdAuctionService_RunAdAuction_ForwardToCallback&) = delete;
  AdAuctionService_RunAdAuction_ForwardToCallback& operator=(const AdAuctionService_RunAdAuction_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::RunAdAuctionCallback callback_;
};

class AdAuctionService_JoinInterestGroup_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_JoinInterestGroup_ForwardToCallback(
      AdAuctionService::JoinInterestGroupCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_JoinInterestGroup_ForwardToCallback(const AdAuctionService_JoinInterestGroup_ForwardToCallback&) = delete;
  AdAuctionService_JoinInterestGroup_ForwardToCallback& operator=(const AdAuctionService_JoinInterestGroup_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::JoinInterestGroupCallback callback_;
};

class AdAuctionService_LeaveInterestGroup_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_LeaveInterestGroup_ForwardToCallback(
      AdAuctionService::LeaveInterestGroupCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_LeaveInterestGroup_ForwardToCallback(const AdAuctionService_LeaveInterestGroup_ForwardToCallback&) = delete;
  AdAuctionService_LeaveInterestGroup_ForwardToCallback& operator=(const AdAuctionService_LeaveInterestGroup_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::LeaveInterestGroupCallback callback_;
};

class AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback(
      AdAuctionService::DeprecatedGetURLFromURNCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback(const AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback&) = delete;
  AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback& operator=(const AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::DeprecatedGetURLFromURNCallback callback_;
};

class AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback(
      AdAuctionService::DeprecatedReplaceInURNCallback callback
      ) : callback_(std::move(callback)) {
  }

  AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback(const AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback&) = delete;
  AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback& operator=(const AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AdAuctionService::DeprecatedReplaceInURNCallback callback_;
};

AdAuctionServiceProxy::AdAuctionServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AdAuctionServiceProxy::CreateAdRequest(
    ::blink::mojom::blink::AdRequestConfigPtr in_config, CreateAdRequestCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::CreateAdRequest", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("config"), in_config,
                        "<value of type ::blink::mojom::blink::AdRequestConfigPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_CreateAdRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_CreateAdRequest_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->config)::BaseType> config_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::AdRequestConfigDataView>(
      in_config, config_fragment);
  params->config.Set(
      config_fragment.is_null() ? nullptr : config_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->config.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null config in AdAuctionService.CreateAdRequest request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("CreateAdRequest");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_CreateAdRequest_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AdAuctionServiceProxy::FinalizeAd(
    const WTF::String& in_ads_guid, ::blink::mojom::blink::AuctionAdConfigPtr in_config, FinalizeAdCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::FinalizeAd", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ads_guid"), in_ads_guid,
                        "<value of type const WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("config"), in_config,
                        "<value of type ::blink::mojom::blink::AuctionAdConfigPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_FinalizeAd_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_FinalizeAd_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->ads_guid)::BaseType> ads_guid_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_ads_guid, ads_guid_fragment);
  params->ads_guid.Set(
      ads_guid_fragment.is_null() ? nullptr : ads_guid_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->ads_guid.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null ads_guid in AdAuctionService.FinalizeAd request");
  mojo::internal::MessageFragment<
      typename decltype(params->config)::BaseType> config_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::AuctionAdConfigDataView>(
      in_config, config_fragment);
  params->config.Set(
      config_fragment.is_null() ? nullptr : config_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->config.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null config in AdAuctionService.FinalizeAd request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("FinalizeAd");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_FinalizeAd_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AdAuctionServiceProxy::RunAdAuction(
    ::blink::mojom::blink::AuctionAdConfigPtr in_config, RunAdAuctionCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::RunAdAuction", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("config"), in_config,
                        "<value of type ::blink::mojom::blink::AuctionAdConfigPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_RunAdAuction_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_RunAdAuction_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->config)::BaseType> config_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::AuctionAdConfigDataView>(
      in_config, config_fragment);
  params->config.Set(
      config_fragment.is_null() ? nullptr : config_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->config.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null config in AdAuctionService.RunAdAuction request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("RunAdAuction");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_RunAdAuction_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AdAuctionServiceProxy::JoinInterestGroup(
    ::blink::mojom::blink::InterestGroupPtr in_group, JoinInterestGroupCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::JoinInterestGroup", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("group"), in_group,
                        "<value of type ::blink::mojom::blink::InterestGroupPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_JoinInterestGroup_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_JoinInterestGroup_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->group)::BaseType> group_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::InterestGroupDataView>(
      in_group, group_fragment);
  params->group.Set(
      group_fragment.is_null() ? nullptr : group_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->group.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null group in AdAuctionService.JoinInterestGroup request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("JoinInterestGroup");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_JoinInterestGroup_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AdAuctionServiceProxy::LeaveInterestGroup(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_owner, const WTF::String& in_name, LeaveInterestGroupCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::LeaveInterestGroup", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("owner"), in_owner,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("name"), in_name,
                        "<value of type const WTF::String&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_LeaveInterestGroup_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_LeaveInterestGroup_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->owner)::BaseType> owner_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_owner, owner_fragment);
  params->owner.Set(
      owner_fragment.is_null() ? nullptr : owner_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->owner.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null owner in AdAuctionService.LeaveInterestGroup request");
  mojo::internal::MessageFragment<
      typename decltype(params->name)::BaseType> name_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_name, name_fragment);
  params->name.Set(
      name_fragment.is_null() ? nullptr : name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null name in AdAuctionService.LeaveInterestGroup request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("LeaveInterestGroup");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_LeaveInterestGroup_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AdAuctionServiceProxy::LeaveInterestGroupForDocument(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::AdAuctionService::LeaveInterestGroupForDocument");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_LeaveInterestGroupForDocument_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_LeaveInterestGroupForDocument_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("LeaveInterestGroupForDocument");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AdAuctionServiceProxy::UpdateAdInterestGroups(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::AdAuctionService::UpdateAdInterestGroups");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_UpdateAdInterestGroups_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_UpdateAdInterestGroups_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("UpdateAdInterestGroups");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AdAuctionServiceProxy::DeprecatedGetURLFromURN(
    const ::blink::KURL& in_uuid_url, DeprecatedGetURLFromURNCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::DeprecatedGetURLFromURN", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("uuid_url"), in_uuid_url,
                        "<value of type const ::blink::KURL&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_DeprecatedGetURLFromURN_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_DeprecatedGetURLFromURN_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->uuid_url)::BaseType> uuid_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_uuid_url, uuid_url_fragment);
  params->uuid_url.Set(
      uuid_url_fragment.is_null() ? nullptr : uuid_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->uuid_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null uuid_url in AdAuctionService.DeprecatedGetURLFromURN request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("DeprecatedGetURLFromURN");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AdAuctionServiceProxy::DeprecatedReplaceInURN(
    const ::blink::KURL& in_uuid_url, WTF::Vector<ReplacementPtr> in_replacements, DeprecatedReplaceInURNCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::AdAuctionService::DeprecatedReplaceInURN", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("uuid_url"), in_uuid_url,
                        "<value of type const ::blink::KURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("replacements"), in_replacements,
                        "<value of type WTF::Vector<ReplacementPtr>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_DeprecatedReplaceInURN_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_DeprecatedReplaceInURN_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->uuid_url)::BaseType> uuid_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_uuid_url, uuid_url_fragment);
  params->uuid_url.Set(
      uuid_url_fragment.is_null() ? nullptr : uuid_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->uuid_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null uuid_url in AdAuctionService.DeprecatedReplaceInURN request");
  mojo::internal::MessageFragment<
      typename decltype(params->replacements)::BaseType>
      replacements_fragment(params.message());
  const mojo::internal::ContainerValidateParams replacements_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::ReplacementDataView>>(
      in_replacements, replacements_fragment, &replacements_validate_params);
  params->replacements.Set(
      replacements_fragment.is_null() ? nullptr : replacements_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->replacements.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null replacements in AdAuctionService.DeprecatedReplaceInURN request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("DeprecatedReplaceInURN");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class AdAuctionService_CreateAdRequest_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::CreateAdRequestCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_CreateAdRequest_ProxyToResponder> proxy(
        new AdAuctionService_CreateAdRequest_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_CreateAdRequest_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_CreateAdRequest_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_CreateAdRequest_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::CreateAdRequestCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const WTF::String& in_ads_guid);
};

bool AdAuctionService_CreateAdRequest_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_CreateAdRequest_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_CreateAdRequest_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  WTF::String p_ads_guid{};
  AdAuctionService_CreateAdRequest_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadAdsGuid(&p_ads_guid))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_ads_guid));
  return true;
}

void AdAuctionService_CreateAdRequest_ProxyToResponder::Run(
    const WTF::String& in_ads_guid) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AdAuctionService::CreateAdRequest", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ads_guid"), in_ads_guid,
                        "<value of type const WTF::String&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_CreateAdRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_CreateAdRequest_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->ads_guid)::BaseType> ads_guid_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_ads_guid, ads_guid_fragment);
  params->ads_guid.Set(
      ads_guid_fragment.is_null() ? nullptr : ads_guid_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("CreateAdRequest");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AdAuctionService_FinalizeAd_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::FinalizeAdCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_FinalizeAd_ProxyToResponder> proxy(
        new AdAuctionService_FinalizeAd_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_FinalizeAd_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_FinalizeAd_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_FinalizeAd_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::FinalizeAdCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::blink::KURL>& in_ad_display_url);
};

bool AdAuctionService_FinalizeAd_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_FinalizeAd_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_FinalizeAd_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::blink::KURL> p_ad_display_url{};
  AdAuctionService_FinalizeAd_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadAdDisplayUrl(&p_ad_display_url))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_ad_display_url));
  return true;
}

void AdAuctionService_FinalizeAd_ProxyToResponder::Run(
    const absl::optional<::blink::KURL>& in_ad_display_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AdAuctionService::FinalizeAd", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ad_display_url"), in_ad_display_url,
                        "<value of type const absl::optional<::blink::KURL>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_FinalizeAd_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_FinalizeAd_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->ad_display_url)::BaseType> ad_display_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_ad_display_url, ad_display_url_fragment);
  params->ad_display_url.Set(
      ad_display_url_fragment.is_null() ? nullptr : ad_display_url_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("FinalizeAd");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AdAuctionService_RunAdAuction_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::RunAdAuctionCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_RunAdAuction_ProxyToResponder> proxy(
        new AdAuctionService_RunAdAuction_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_RunAdAuction_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_RunAdAuction_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_RunAdAuction_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::RunAdAuctionCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::blink::KURL>& in_ad_display_url);
};

bool AdAuctionService_RunAdAuction_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_RunAdAuction_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_RunAdAuction_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::blink::KURL> p_ad_display_url{};
  AdAuctionService_RunAdAuction_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadAdDisplayUrl(&p_ad_display_url))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_ad_display_url));
  return true;
}

void AdAuctionService_RunAdAuction_ProxyToResponder::Run(
    const absl::optional<::blink::KURL>& in_ad_display_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AdAuctionService::RunAdAuction", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ad_display_url"), in_ad_display_url,
                        "<value of type const absl::optional<::blink::KURL>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_RunAdAuction_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_RunAdAuction_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->ad_display_url)::BaseType> ad_display_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_ad_display_url, ad_display_url_fragment);
  params->ad_display_url.Set(
      ad_display_url_fragment.is_null() ? nullptr : ad_display_url_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("RunAdAuction");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AdAuctionService_JoinInterestGroup_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::JoinInterestGroupCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_JoinInterestGroup_ProxyToResponder> proxy(
        new AdAuctionService_JoinInterestGroup_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_JoinInterestGroup_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_JoinInterestGroup_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_JoinInterestGroup_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::JoinInterestGroupCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_failed_well_known_check);
};

bool AdAuctionService_JoinInterestGroup_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_JoinInterestGroup_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_JoinInterestGroup_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_failed_well_known_check{};
  AdAuctionService_JoinInterestGroup_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_failed_well_known_check = input_data_view.failed_well_known_check();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_failed_well_known_check));
  return true;
}

void AdAuctionService_JoinInterestGroup_ProxyToResponder::Run(
    bool in_failed_well_known_check) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AdAuctionService::JoinInterestGroup", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("failed_well_known_check"), in_failed_well_known_check,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_JoinInterestGroup_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_JoinInterestGroup_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->failed_well_known_check = in_failed_well_known_check;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("JoinInterestGroup");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AdAuctionService_LeaveInterestGroup_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::LeaveInterestGroupCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_LeaveInterestGroup_ProxyToResponder> proxy(
        new AdAuctionService_LeaveInterestGroup_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_LeaveInterestGroup_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_LeaveInterestGroup_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_LeaveInterestGroup_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::LeaveInterestGroupCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_failed_well_known_check);
};

bool AdAuctionService_LeaveInterestGroup_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_LeaveInterestGroup_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_LeaveInterestGroup_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_failed_well_known_check{};
  AdAuctionService_LeaveInterestGroup_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_failed_well_known_check = input_data_view.failed_well_known_check();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_failed_well_known_check));
  return true;
}

void AdAuctionService_LeaveInterestGroup_ProxyToResponder::Run(
    bool in_failed_well_known_check) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AdAuctionService::LeaveInterestGroup", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("failed_well_known_check"), in_failed_well_known_check,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_LeaveInterestGroup_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_LeaveInterestGroup_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->failed_well_known_check = in_failed_well_known_check;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("LeaveInterestGroup");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::DeprecatedGetURLFromURNCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder> proxy(
        new AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::DeprecatedGetURLFromURNCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const absl::optional<::blink::KURL>& in_decoded_url);
};

bool AdAuctionService_DeprecatedGetURLFromURN_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_DeprecatedGetURLFromURN_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_DeprecatedGetURLFromURN_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  absl::optional<::blink::KURL> p_decoded_url{};
  AdAuctionService_DeprecatedGetURLFromURN_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDecodedUrl(&p_decoded_url))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_decoded_url));
  return true;
}

void AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder::Run(
    const absl::optional<::blink::KURL>& in_decoded_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::AdAuctionService::DeprecatedGetURLFromURN", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("decoded_url"), in_decoded_url,
                        "<value of type const absl::optional<::blink::KURL>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_DeprecatedGetURLFromURN_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_DeprecatedGetURLFromURN_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->decoded_url)::BaseType> decoded_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_decoded_url, decoded_url_fragment);
  params->decoded_url.Set(
      decoded_url_fragment.is_null() ? nullptr : decoded_url_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("DeprecatedGetURLFromURN");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AdAuctionService::DeprecatedReplaceInURNCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder> proxy(
        new AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AdAuctionService::DeprecatedReplaceInURNCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool AdAuctionService_DeprecatedReplaceInURN_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AdAuctionService_DeprecatedReplaceInURN_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AdAuctionService_DeprecatedReplaceInURN_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  AdAuctionService_DeprecatedReplaceInURN_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AdAuctionService::Name_, 8, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply blink::mojom::AdAuctionService::DeprecatedReplaceInURN");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAdAuctionService_DeprecatedReplaceInURN_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::AdAuctionService_DeprecatedReplaceInURN_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AdAuctionService::Name_);
  message.set_method_name("DeprecatedReplaceInURN");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AdAuctionServiceStubDispatch::Accept(
    AdAuctionService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAdAuctionService_CreateAdRequest_Name: {
      break;
    }
    case internal::kAdAuctionService_FinalizeAd_Name: {
      break;
    }
    case internal::kAdAuctionService_RunAdAuction_Name: {
      break;
    }
    case internal::kAdAuctionService_JoinInterestGroup_Name: {
      break;
    }
    case internal::kAdAuctionService_LeaveInterestGroup_Name: {
      break;
    }
    case internal::kAdAuctionService_LeaveInterestGroupForDocument_Name: {

      DCHECK(message->is_serialized());
      internal::AdAuctionService_LeaveInterestGroupForDocument_Params_Data* params =
          reinterpret_cast<internal::AdAuctionService_LeaveInterestGroupForDocument_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AdAuctionService_LeaveInterestGroupForDocument_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LeaveInterestGroupForDocument();
      return true;
    }
    case internal::kAdAuctionService_UpdateAdInterestGroups_Name: {

      DCHECK(message->is_serialized());
      internal::AdAuctionService_UpdateAdInterestGroups_Params_Data* params =
          reinterpret_cast<internal::AdAuctionService_UpdateAdInterestGroups_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AdAuctionService_UpdateAdInterestGroups_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UpdateAdInterestGroups();
      return true;
    }
    case internal::kAdAuctionService_DeprecatedGetURLFromURN_Name: {
      break;
    }
    case internal::kAdAuctionService_DeprecatedReplaceInURN_Name: {
      break;
    }
  }
  return false;
}

// static
bool AdAuctionServiceStubDispatch::AcceptWithResponder(
    AdAuctionService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAdAuctionService_CreateAdRequest_Name: {

      internal::AdAuctionService_CreateAdRequest_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_CreateAdRequest_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::mojom::blink::AdRequestConfigPtr p_config{};
      AdAuctionService_CreateAdRequest_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadConfig(&p_config))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 0, false);
        return false;
      }
      AdAuctionService::CreateAdRequestCallback callback =
          AdAuctionService_CreateAdRequest_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateAdRequest(
std::move(p_config), std::move(callback));
      return true;
    }
    case internal::kAdAuctionService_FinalizeAd_Name: {

      internal::AdAuctionService_FinalizeAd_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_FinalizeAd_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::String p_ads_guid{};
      ::blink::mojom::blink::AuctionAdConfigPtr p_config{};
      AdAuctionService_FinalizeAd_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAdsGuid(&p_ads_guid))
        success = false;
      if (success && !input_data_view.ReadConfig(&p_config))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 1, false);
        return false;
      }
      AdAuctionService::FinalizeAdCallback callback =
          AdAuctionService_FinalizeAd_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FinalizeAd(
std::move(p_ads_guid), 
std::move(p_config), std::move(callback));
      return true;
    }
    case internal::kAdAuctionService_RunAdAuction_Name: {

      internal::AdAuctionService_RunAdAuction_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_RunAdAuction_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::mojom::blink::AuctionAdConfigPtr p_config{};
      AdAuctionService_RunAdAuction_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadConfig(&p_config))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 2, false);
        return false;
      }
      AdAuctionService::RunAdAuctionCallback callback =
          AdAuctionService_RunAdAuction_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RunAdAuction(
std::move(p_config), std::move(callback));
      return true;
    }
    case internal::kAdAuctionService_JoinInterestGroup_Name: {

      internal::AdAuctionService_JoinInterestGroup_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_JoinInterestGroup_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::mojom::blink::InterestGroupPtr p_group{};
      AdAuctionService_JoinInterestGroup_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadGroup(&p_group))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 3, false);
        return false;
      }
      AdAuctionService::JoinInterestGroupCallback callback =
          AdAuctionService_JoinInterestGroup_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->JoinInterestGroup(
std::move(p_group), std::move(callback));
      return true;
    }
    case internal::kAdAuctionService_LeaveInterestGroup_Name: {

      internal::AdAuctionService_LeaveInterestGroup_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_LeaveInterestGroup_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_owner{};
      WTF::String p_name{};
      AdAuctionService_LeaveInterestGroup_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOwner(&p_owner))
        success = false;
      if (success && !input_data_view.ReadName(&p_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 4, false);
        return false;
      }
      AdAuctionService::LeaveInterestGroupCallback callback =
          AdAuctionService_LeaveInterestGroup_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LeaveInterestGroup(
std::move(p_owner), 
std::move(p_name), std::move(callback));
      return true;
    }
    case internal::kAdAuctionService_LeaveInterestGroupForDocument_Name: {
      break;
    }
    case internal::kAdAuctionService_UpdateAdInterestGroups_Name: {
      break;
    }
    case internal::kAdAuctionService_DeprecatedGetURLFromURN_Name: {

      internal::AdAuctionService_DeprecatedGetURLFromURN_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_DeprecatedGetURLFromURN_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_uuid_url{};
      AdAuctionService_DeprecatedGetURLFromURN_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUuidUrl(&p_uuid_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 7, false);
        return false;
      }
      AdAuctionService::DeprecatedGetURLFromURNCallback callback =
          AdAuctionService_DeprecatedGetURLFromURN_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DeprecatedGetURLFromURN(
std::move(p_uuid_url), std::move(callback));
      return true;
    }
    case internal::kAdAuctionService_DeprecatedReplaceInURN_Name: {

      internal::AdAuctionService_DeprecatedReplaceInURN_Params_Data* params =
          reinterpret_cast<
              internal::AdAuctionService_DeprecatedReplaceInURN_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::KURL p_uuid_url{};
      WTF::Vector<ReplacementPtr> p_replacements{};
      AdAuctionService_DeprecatedReplaceInURN_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUuidUrl(&p_uuid_url))
        success = false;
      if (success && !input_data_view.ReadReplacements(&p_replacements))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AdAuctionService::Name_, 8, false);
        return false;
      }
      AdAuctionService::DeprecatedReplaceInURNCallback callback =
          AdAuctionService_DeprecatedReplaceInURN_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DeprecatedReplaceInURN(
std::move(p_uuid_url), 
std::move(p_replacements), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAdAuctionServiceValidationInfo[] = {
    {&internal::AdAuctionService_CreateAdRequest_Params_Data::Validate,
     &internal::AdAuctionService_CreateAdRequest_ResponseParams_Data::Validate},
    {&internal::AdAuctionService_FinalizeAd_Params_Data::Validate,
     &internal::AdAuctionService_FinalizeAd_ResponseParams_Data::Validate},
    {&internal::AdAuctionService_RunAdAuction_Params_Data::Validate,
     &internal::AdAuctionService_RunAdAuction_ResponseParams_Data::Validate},
    {&internal::AdAuctionService_JoinInterestGroup_Params_Data::Validate,
     &internal::AdAuctionService_JoinInterestGroup_ResponseParams_Data::Validate},
    {&internal::AdAuctionService_LeaveInterestGroup_Params_Data::Validate,
     &internal::AdAuctionService_LeaveInterestGroup_ResponseParams_Data::Validate},
    {&internal::AdAuctionService_LeaveInterestGroupForDocument_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AdAuctionService_UpdateAdInterestGroups_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AdAuctionService_DeprecatedGetURLFromURN_Params_Data::Validate,
     &internal::AdAuctionService_DeprecatedGetURLFromURN_ResponseParams_Data::Validate},
    {&internal::AdAuctionService_DeprecatedReplaceInURN_Params_Data::Validate,
     &internal::AdAuctionService_DeprecatedReplaceInURN_ResponseParams_Data::Validate},
};

bool AdAuctionServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::AdAuctionService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAdAuctionServiceValidationInfo);
}

bool AdAuctionServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::AdAuctionService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAdAuctionServiceValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::Replacement::DataView, ::blink::mojom::blink::ReplacementPtr>::Read(
    ::blink::mojom::blink::Replacement::DataView input,
    ::blink::mojom::blink::ReplacementPtr* output) {
  bool success = true;
  ::blink::mojom::blink::ReplacementPtr result(::blink::mojom::blink::Replacement::New());
  
      if (success && !input.ReadMatch(&result->match))
        success = false;
      if (success && !input.ReadReplacement(&result->replacement))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void AdAuctionServiceInterceptorForTesting::CreateAdRequest(::blink::mojom::blink::AdRequestConfigPtr config, CreateAdRequestCallback callback) {
  GetForwardingInterface()->CreateAdRequest(std::move(config), std::move(callback));
}
void AdAuctionServiceInterceptorForTesting::FinalizeAd(const WTF::String& ads_guid, ::blink::mojom::blink::AuctionAdConfigPtr config, FinalizeAdCallback callback) {
  GetForwardingInterface()->FinalizeAd(std::move(ads_guid), std::move(config), std::move(callback));
}
void AdAuctionServiceInterceptorForTesting::RunAdAuction(::blink::mojom::blink::AuctionAdConfigPtr config, RunAdAuctionCallback callback) {
  GetForwardingInterface()->RunAdAuction(std::move(config), std::move(callback));
}
void AdAuctionServiceInterceptorForTesting::JoinInterestGroup(::blink::mojom::blink::InterestGroupPtr group, JoinInterestGroupCallback callback) {
  GetForwardingInterface()->JoinInterestGroup(std::move(group), std::move(callback));
}
void AdAuctionServiceInterceptorForTesting::LeaveInterestGroup(const ::scoped_refptr<const ::blink::SecurityOrigin>& owner, const WTF::String& name, LeaveInterestGroupCallback callback) {
  GetForwardingInterface()->LeaveInterestGroup(std::move(owner), std::move(name), std::move(callback));
}
void AdAuctionServiceInterceptorForTesting::LeaveInterestGroupForDocument() {
  GetForwardingInterface()->LeaveInterestGroupForDocument();
}
void AdAuctionServiceInterceptorForTesting::UpdateAdInterestGroups() {
  GetForwardingInterface()->UpdateAdInterestGroups();
}
void AdAuctionServiceInterceptorForTesting::DeprecatedGetURLFromURN(const ::blink::KURL& uuid_url, DeprecatedGetURLFromURNCallback callback) {
  GetForwardingInterface()->DeprecatedGetURLFromURN(std::move(uuid_url), std::move(callback));
}
void AdAuctionServiceInterceptorForTesting::DeprecatedReplaceInURN(const ::blink::KURL& uuid_url, WTF::Vector<ReplacementPtr> replacements, DeprecatedReplaceInURNCallback callback) {
  GetForwardingInterface()->DeprecatedReplaceInURN(std::move(uuid_url), std::move(replacements), std::move(callback));
}
AdAuctionServiceAsyncWaiter::AdAuctionServiceAsyncWaiter(
    AdAuctionService* proxy) : proxy_(proxy) {}

AdAuctionServiceAsyncWaiter::~AdAuctionServiceAsyncWaiter() = default;

void AdAuctionServiceAsyncWaiter::CreateAdRequest(
    ::blink::mojom::blink::AdRequestConfigPtr config, WTF::String* out_ads_guid) {
  base::RunLoop loop;
  proxy_->CreateAdRequest(std::move(config),
      base::BindOnce(
          [](base::RunLoop* loop,
             WTF::String* out_ads_guid
,
             const WTF::String& ads_guid) {*out_ads_guid = std::move(ads_guid);
            loop->Quit();
          },
          &loop,
          out_ads_guid));
  loop.Run();
}
void AdAuctionServiceAsyncWaiter::FinalizeAd(
    const WTF::String& ads_guid, ::blink::mojom::blink::AuctionAdConfigPtr config, absl::optional<::blink::KURL>* out_ad_display_url) {
  base::RunLoop loop;
  proxy_->FinalizeAd(std::move(ads_guid),std::move(config),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::blink::KURL>* out_ad_display_url
,
             const absl::optional<::blink::KURL>& ad_display_url) {*out_ad_display_url = std::move(ad_display_url);
            loop->Quit();
          },
          &loop,
          out_ad_display_url));
  loop.Run();
}
void AdAuctionServiceAsyncWaiter::RunAdAuction(
    ::blink::mojom::blink::AuctionAdConfigPtr config, absl::optional<::blink::KURL>* out_ad_display_url) {
  base::RunLoop loop;
  proxy_->RunAdAuction(std::move(config),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::blink::KURL>* out_ad_display_url
,
             const absl::optional<::blink::KURL>& ad_display_url) {*out_ad_display_url = std::move(ad_display_url);
            loop->Quit();
          },
          &loop,
          out_ad_display_url));
  loop.Run();
}
void AdAuctionServiceAsyncWaiter::JoinInterestGroup(
    ::blink::mojom::blink::InterestGroupPtr group, bool* out_failed_well_known_check) {
  base::RunLoop loop;
  proxy_->JoinInterestGroup(std::move(group),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_failed_well_known_check
,
             bool failed_well_known_check) {*out_failed_well_known_check = std::move(failed_well_known_check);
            loop->Quit();
          },
          &loop,
          out_failed_well_known_check));
  loop.Run();
}
void AdAuctionServiceAsyncWaiter::LeaveInterestGroup(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& owner, const WTF::String& name, bool* out_failed_well_known_check) {
  base::RunLoop loop;
  proxy_->LeaveInterestGroup(std::move(owner),std::move(name),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_failed_well_known_check
,
             bool failed_well_known_check) {*out_failed_well_known_check = std::move(failed_well_known_check);
            loop->Quit();
          },
          &loop,
          out_failed_well_known_check));
  loop.Run();
}
void AdAuctionServiceAsyncWaiter::DeprecatedGetURLFromURN(
    const ::blink::KURL& uuid_url, absl::optional<::blink::KURL>* out_decoded_url) {
  base::RunLoop loop;
  proxy_->DeprecatedGetURLFromURN(std::move(uuid_url),
      base::BindOnce(
          [](base::RunLoop* loop,
             absl::optional<::blink::KURL>* out_decoded_url
,
             const absl::optional<::blink::KURL>& decoded_url) {*out_decoded_url = std::move(decoded_url);
            loop->Quit();
          },
          &loop,
          out_decoded_url));
  loop.Run();
}
void AdAuctionServiceAsyncWaiter::DeprecatedReplaceInURN(
    const ::blink::KURL& uuid_url, WTF::Vector<ReplacementPtr> replacements) {
  base::RunLoop loop;
  proxy_->DeprecatedReplaceInURN(std::move(uuid_url),std::move(replacements),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif