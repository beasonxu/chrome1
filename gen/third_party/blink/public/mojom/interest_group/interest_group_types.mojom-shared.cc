// third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* InterestGroup_ExecutionModeToStringHelper(InterestGroup_ExecutionMode value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case InterestGroup_ExecutionMode::kCompatibilityMode:
      return "kCompatibilityMode";
    case InterestGroup_ExecutionMode::kGroupedByOriginMode:
      return "kGroupedByOriginMode";
    case InterestGroup_ExecutionMode::kFrozenContext:
      return "kFrozenContext";
    default:
      return nullptr;
  }
}

std::string InterestGroup_ExecutionModeToString(InterestGroup_ExecutionMode value) {
  const char *str = InterestGroup_ExecutionModeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown InterestGroup_ExecutionMode value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, InterestGroup_ExecutionMode value) {
  return os << InterestGroup_ExecutionModeToString(value);
}

namespace internal {


// static
bool InterestGroupAd_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const InterestGroupAd_Data* object =
      static_cast<const InterestGroupAd_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->render_url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->render_url, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams metadata_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->metadata, validation_context,
                                         &metadata_validate_params)) {
    return false;
  }

  return true;
}

InterestGroupAd_Data::InterestGroupAd_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool InterestGroup_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 112, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const InterestGroup_Data* object =
      static_cast<const InterestGroup_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->expiry, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->expiry, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->owner, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->owner, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }


  if (!::blink::mojom::internal::InterestGroup_ExecutionMode_Data
        ::Validate(object->execution_mode, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->bidding_url, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->bidding_wasm_helper_url, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->daily_update_url, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->trusted_bidding_signals_url, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams trusted_bidding_signals_keys_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->trusted_bidding_signals_keys, validation_context,
                                         &trusted_bidding_signals_keys_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams user_bidding_signals_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->user_bidding_signals, validation_context,
                                         &user_bidding_signals_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams ads_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->ads, validation_context,
                                         &ads_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams ad_components_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->ad_components, validation_context,
                                         &ad_components_validate_params)) {
    return false;
  }

  return true;
}

InterestGroup_Data::InterestGroup_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AuctionAdConfigNonSharedParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 88, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AuctionAdConfigNonSharedParams_Data* object =
      static_cast<const AuctionAdConfigNonSharedParams_Data*>(data);

  const mojo::internal::ContainerValidateParams interest_group_buyers_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->interest_group_buyers, validation_context,
                                         &interest_group_buyers_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams auction_signals_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->auction_signals, validation_context,
                                         &auction_signals_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams seller_signals_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->seller_signals, validation_context,
                                         &seller_signals_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->seller_timeout, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams per_buyer_signals_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)));
  if (!mojo::internal::ValidateContainer(object->per_buyer_signals, validation_context,
                                         &per_buyer_signals_validate_params)) {
    return false;
  }

  const mojo::internal::ContainerValidateParams per_buyer_timeouts_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->per_buyer_timeouts, validation_context,
                                         &per_buyer_timeouts_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->all_buyers_timeout, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->per_buyer_group_limits, 8, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams per_buyer_group_limits_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->per_buyer_group_limits, validation_context,
                                         &per_buyer_group_limits_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->component_auctions, 10, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams component_auctions_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->component_auctions, validation_context,
                                         &component_auctions_validate_params)) {
    return false;
  }

  return true;
}

AuctionAdConfigNonSharedParams_Data::AuctionAdConfigNonSharedParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AuctionAdConfig_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 56, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AuctionAdConfig_Data* object =
      static_cast<const AuctionAdConfig_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->seller, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->seller, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->decision_logic_url, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->decision_logic_url, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->trusted_scoring_signals_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->auction_ad_config_non_shared_params, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->auction_ad_config_non_shared_params, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->per_buyer_experiment_group_ids, 9, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams per_buyer_experiment_group_ids_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->per_buyer_experiment_group_ids, validation_context,
                                         &per_buyer_experiment_group_ids_validate_params)) {
    return false;
  }

  return true;
}

AuctionAdConfig_Data::AuctionAdConfig_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::InterestGroup_ExecutionMode>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::InterestGroup_ExecutionMode value) {
  return std::move(context).WriteString(::blink::mojom::InterestGroup_ExecutionModeToString(value));
}

} // namespace perfetto