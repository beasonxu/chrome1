// third_party/blink/public/mojom/context_menu/context_menu.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTEXT_MENU_CONTEXT_MENU_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTEXT_MENU_CONTEXT_MENU_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "services/network/public/mojom/referrer_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/conversions/conversions.mojom-shared-internal.h"
#include "ui/base/mojom/ui_base_types.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class FieldRendererId_Data;
class CustomContextMenuItem_Data;
class UntrustworthyContextMenuParams_Data;

struct ContextMenuDataMediaType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct ContextMenuDataInputFieldType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct CustomContextMenuItemType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FieldRendererId_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t id;

 private:
  friend class mojo::internal::MessageFragment<FieldRendererId_Data>;

  FieldRendererId_Data();
  ~FieldRendererId_Data() = delete;
};
static_assert(sizeof(FieldRendererId_Data) == 16,
              "Bad sizeof(FieldRendererId_Data)");
// Used by FieldRendererId::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FieldRendererId_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FieldRendererId_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FieldRendererId_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FieldRendererId_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FieldRendererId_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CustomContextMenuItem_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> label;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> icon;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> tool_tip;
  int32_t type;
  int32_t action;
  uint8_t rtl : 1;
  uint8_t has_directional_override : 1;
  uint8_t enabled : 1;
  uint8_t checked : 1;
  uint8_t pad8_[7];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CustomContextMenuItem_Data>>> submenu;

 private:
  friend class mojo::internal::MessageFragment<CustomContextMenuItem_Data>;

  CustomContextMenuItem_Data();
  ~CustomContextMenuItem_Data() = delete;
};
static_assert(sizeof(CustomContextMenuItem_Data) == 56,
              "Bad sizeof(CustomContextMenuItem_Data)");
// Used by CustomContextMenuItem::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CustomContextMenuItem_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CustomContextMenuItem_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CustomContextMenuItem_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CustomContextMenuItem_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CustomContextMenuItem_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) UntrustworthyContextMenuParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t media_type;
  int32_t x;
  int32_t y;
  uint8_t has_image_contents : 1;
  uint8_t spellcheck_enabled : 1;
  uint8_t is_editable : 1;
  uint8_t opened_from_highlight : 1;
  uint8_t pad6_[3];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> link_url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> link_text;
  mojo::internal::Pointer<::blink::mojom::internal::Impression_Data> impression;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> unfiltered_link_url;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> src_url;
  int32_t media_flags;
  int32_t writing_direction_default;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> selection_text;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> title_text;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> alt_text;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> suggested_filename;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> misspelled_word;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data>>> dictionary_suggestions;
  int32_t writing_direction_left_to_right;
  int32_t writing_direction_right_to_left;
  int32_t edit_flags;
  int32_t referrer_policy;
  mojo::internal::Pointer<mojo::internal::String_Data> frame_charset;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> link_followed;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CustomContextMenuItem_Data>>> custom_items;
  int32_t source_type;
  int32_t input_field_type;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> selection_rect;
  int32_t selection_start_offset;
  uint8_t pad30_[4];
  mojo::internal::Pointer<internal::FieldRendererId_Data> field_renderer_id;

 private:
  friend class mojo::internal::MessageFragment<UntrustworthyContextMenuParams_Data>;

  UntrustworthyContextMenuParams_Data();
  ~UntrustworthyContextMenuParams_Data() = delete;
};
static_assert(sizeof(UntrustworthyContextMenuParams_Data) == 192,
              "Bad sizeof(UntrustworthyContextMenuParams_Data)");
// Used by UntrustworthyContextMenuParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct UntrustworthyContextMenuParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  UntrustworthyContextMenuParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~UntrustworthyContextMenuParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<UntrustworthyContextMenuParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    UntrustworthyContextMenuParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTEXT_MENU_CONTEXT_MENU_MOJOM_SHARED_INTERNAL_H_