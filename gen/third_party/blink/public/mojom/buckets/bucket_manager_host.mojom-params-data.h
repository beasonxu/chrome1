// third_party/blink/public/mojom/buckets/bucket_manager_host.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BUCKETS_BUCKET_MANAGER_HOST_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BUCKETS_BUCKET_MANAGER_HOST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Persist_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Persist_Params_Data>;

  BucketHost_Persist_Params_Data();
  ~BucketHost_Persist_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_Persist_Params_Data) == 8,
              "Bad sizeof(BucketHost_Persist_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Persist_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t persisted : 1;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Persist_ResponseParams_Data>;

  BucketHost_Persist_ResponseParams_Data();
  ~BucketHost_Persist_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketHost_Persist_ResponseParams_Data) == 16,
              "Bad sizeof(BucketHost_Persist_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Persisted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Persisted_Params_Data>;

  BucketHost_Persisted_Params_Data();
  ~BucketHost_Persisted_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_Persisted_Params_Data) == 8,
              "Bad sizeof(BucketHost_Persisted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Persisted_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t persisted : 1;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Persisted_ResponseParams_Data>;

  BucketHost_Persisted_ResponseParams_Data();
  ~BucketHost_Persisted_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketHost_Persisted_ResponseParams_Data) == 16,
              "Bad sizeof(BucketHost_Persisted_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Estimate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Estimate_Params_Data>;

  BucketHost_Estimate_Params_Data();
  ~BucketHost_Estimate_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_Estimate_Params_Data) == 8,
              "Bad sizeof(BucketHost_Estimate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Estimate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t current_usage;
  int64_t current_quota;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Estimate_ResponseParams_Data>;

  BucketHost_Estimate_ResponseParams_Data();
  ~BucketHost_Estimate_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketHost_Estimate_ResponseParams_Data) == 32,
              "Bad sizeof(BucketHost_Estimate_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Durability_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Durability_Params_Data>;

  BucketHost_Durability_Params_Data();
  ~BucketHost_Durability_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_Durability_Params_Data) == 8,
              "Bad sizeof(BucketHost_Durability_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Durability_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t durability;
  uint8_t success : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Durability_ResponseParams_Data>;

  BucketHost_Durability_ResponseParams_Data();
  ~BucketHost_Durability_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketHost_Durability_ResponseParams_Data) == 16,
              "Bad sizeof(BucketHost_Durability_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_SetExpires_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expires;

 private:
  friend class mojo::internal::MessageFragment<BucketHost_SetExpires_Params_Data>;

  BucketHost_SetExpires_Params_Data();
  ~BucketHost_SetExpires_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_SetExpires_Params_Data) == 16,
              "Bad sizeof(BucketHost_SetExpires_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_SetExpires_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_SetExpires_ResponseParams_Data>;

  BucketHost_SetExpires_ResponseParams_Data();
  ~BucketHost_SetExpires_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketHost_SetExpires_ResponseParams_Data) == 16,
              "Bad sizeof(BucketHost_SetExpires_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Expires_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Expires_Params_Data>;

  BucketHost_Expires_Params_Data();
  ~BucketHost_Expires_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_Expires_Params_Data) == 8,
              "Bad sizeof(BucketHost_Expires_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_Expires_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> expires;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_Expires_ResponseParams_Data>;

  BucketHost_Expires_ResponseParams_Data();
  ~BucketHost_Expires_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketHost_Expires_ResponseParams_Data) == 24,
              "Bad sizeof(BucketHost_Expires_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_GetIdbFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data idb_factory;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_GetIdbFactory_Params_Data>;

  BucketHost_GetIdbFactory_Params_Data();
  ~BucketHost_GetIdbFactory_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_GetIdbFactory_Params_Data) == 16,
              "Bad sizeof(BucketHost_GetIdbFactory_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketHost_GetLockManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data lock_manager;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BucketHost_GetLockManager_Params_Data>;

  BucketHost_GetLockManager_Params_Data();
  ~BucketHost_GetLockManager_Params_Data() = delete;
};
static_assert(sizeof(BucketHost_GetLockManager_Params_Data) == 16,
              "Bad sizeof(BucketHost_GetLockManager_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketManagerHost_OpenBucket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<internal::BucketPolicies_Data> policy;

 private:
  friend class mojo::internal::MessageFragment<BucketManagerHost_OpenBucket_Params_Data>;

  BucketManagerHost_OpenBucket_Params_Data();
  ~BucketManagerHost_OpenBucket_Params_Data() = delete;
};
static_assert(sizeof(BucketManagerHost_OpenBucket_Params_Data) == 24,
              "Bad sizeof(BucketManagerHost_OpenBucket_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketManagerHost_OpenBucket_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data remote;

 private:
  friend class mojo::internal::MessageFragment<BucketManagerHost_OpenBucket_ResponseParams_Data>;

  BucketManagerHost_OpenBucket_ResponseParams_Data();
  ~BucketManagerHost_OpenBucket_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketManagerHost_OpenBucket_ResponseParams_Data) == 16,
              "Bad sizeof(BucketManagerHost_OpenBucket_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketManagerHost_Keys_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<BucketManagerHost_Keys_Params_Data>;

  BucketManagerHost_Keys_Params_Data();
  ~BucketManagerHost_Keys_Params_Data() = delete;
};
static_assert(sizeof(BucketManagerHost_Keys_Params_Data) == 8,
              "Bad sizeof(BucketManagerHost_Keys_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketManagerHost_Keys_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> buckets;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketManagerHost_Keys_ResponseParams_Data>;

  BucketManagerHost_Keys_ResponseParams_Data();
  ~BucketManagerHost_Keys_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketManagerHost_Keys_ResponseParams_Data) == 24,
              "Bad sizeof(BucketManagerHost_Keys_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketManagerHost_DeleteBucket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;

 private:
  friend class mojo::internal::MessageFragment<BucketManagerHost_DeleteBucket_Params_Data>;

  BucketManagerHost_DeleteBucket_Params_Data();
  ~BucketManagerHost_DeleteBucket_Params_Data() = delete;
};
static_assert(sizeof(BucketManagerHost_DeleteBucket_Params_Data) == 16,
              "Bad sizeof(BucketManagerHost_DeleteBucket_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) BucketManagerHost_DeleteBucket_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<BucketManagerHost_DeleteBucket_ResponseParams_Data>;

  BucketManagerHost_DeleteBucket_ResponseParams_Data();
  ~BucketManagerHost_DeleteBucket_ResponseParams_Data() = delete;
};
static_assert(sizeof(BucketManagerHost_DeleteBucket_ResponseParams_Data) == 16,
              "Bad sizeof(BucketManagerHost_DeleteBucket_ResponseParams_Data)");

}  // namespace internal


class BucketHost_Persist_ParamsDataView {
 public:
  BucketHost_Persist_ParamsDataView() = default;

  BucketHost_Persist_ParamsDataView(
      internal::BucketHost_Persist_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BucketHost_Persist_Params_Data* data_ = nullptr;
};



class BucketHost_Persist_ResponseParamsDataView {
 public:
  BucketHost_Persist_ResponseParamsDataView() = default;

  BucketHost_Persist_ResponseParamsDataView(
      internal::BucketHost_Persist_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool persisted() const {
    return data_->persisted;
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketHost_Persist_ResponseParams_Data* data_ = nullptr;
};



class BucketHost_Persisted_ParamsDataView {
 public:
  BucketHost_Persisted_ParamsDataView() = default;

  BucketHost_Persisted_ParamsDataView(
      internal::BucketHost_Persisted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BucketHost_Persisted_Params_Data* data_ = nullptr;
};



class BucketHost_Persisted_ResponseParamsDataView {
 public:
  BucketHost_Persisted_ResponseParamsDataView() = default;

  BucketHost_Persisted_ResponseParamsDataView(
      internal::BucketHost_Persisted_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool persisted() const {
    return data_->persisted;
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketHost_Persisted_ResponseParams_Data* data_ = nullptr;
};



class BucketHost_Estimate_ParamsDataView {
 public:
  BucketHost_Estimate_ParamsDataView() = default;

  BucketHost_Estimate_ParamsDataView(
      internal::BucketHost_Estimate_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BucketHost_Estimate_Params_Data* data_ = nullptr;
};



class BucketHost_Estimate_ResponseParamsDataView {
 public:
  BucketHost_Estimate_ResponseParamsDataView() = default;

  BucketHost_Estimate_ResponseParamsDataView(
      internal::BucketHost_Estimate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t current_usage() const {
    return data_->current_usage;
  }
  int64_t current_quota() const {
    return data_->current_quota;
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketHost_Estimate_ResponseParams_Data* data_ = nullptr;
};



class BucketHost_Durability_ParamsDataView {
 public:
  BucketHost_Durability_ParamsDataView() = default;

  BucketHost_Durability_ParamsDataView(
      internal::BucketHost_Durability_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BucketHost_Durability_Params_Data* data_ = nullptr;
};



class BucketHost_Durability_ResponseParamsDataView {
 public:
  BucketHost_Durability_ResponseParamsDataView() = default;

  BucketHost_Durability_ResponseParamsDataView(
      internal::BucketHost_Durability_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadDurability(UserType* output) const {
    auto data_value = data_->durability;
    return mojo::internal::Deserialize<::blink::mojom::BucketDurability>(
        data_value, output);
  }
  BucketDurability durability() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::BucketDurability>(data_->durability));
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketHost_Durability_ResponseParams_Data* data_ = nullptr;
};



class BucketHost_SetExpires_ParamsDataView {
 public:
  BucketHost_SetExpires_ParamsDataView() = default;

  BucketHost_SetExpires_ParamsDataView(
      internal::BucketHost_SetExpires_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetExpiresDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExpires(UserType* output) {
    
    auto* pointer = data_->expires.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::BucketHost_SetExpires_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketHost_SetExpires_ResponseParamsDataView {
 public:
  BucketHost_SetExpires_ResponseParamsDataView() = default;

  BucketHost_SetExpires_ResponseParamsDataView(
      internal::BucketHost_SetExpires_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketHost_SetExpires_ResponseParams_Data* data_ = nullptr;
};



class BucketHost_Expires_ParamsDataView {
 public:
  BucketHost_Expires_ParamsDataView() = default;

  BucketHost_Expires_ParamsDataView(
      internal::BucketHost_Expires_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BucketHost_Expires_Params_Data* data_ = nullptr;
};



class BucketHost_Expires_ResponseParamsDataView {
 public:
  BucketHost_Expires_ResponseParamsDataView() = default;

  BucketHost_Expires_ResponseParamsDataView(
      internal::BucketHost_Expires_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetExpiresDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadExpires(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeDataView, UserType>(),
    "Attempting to read the optional `expires` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadExpires` instead "
    "of `ReadExpires if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->expires.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketHost_Expires_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketHost_GetIdbFactory_ParamsDataView {
 public:
  BucketHost_GetIdbFactory_ParamsDataView() = default;

  BucketHost_GetIdbFactory_ParamsDataView(
      internal::BucketHost_GetIdbFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeIdbFactory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::IDBFactoryInterfaceBase>>(
            &data_->idb_factory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BucketHost_GetIdbFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketHost_GetLockManager_ParamsDataView {
 public:
  BucketHost_GetLockManager_ParamsDataView() = default;

  BucketHost_GetLockManager_ParamsDataView(
      internal::BucketHost_GetLockManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeLockManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::LockManagerInterfaceBase>>(
            &data_->lock_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BucketHost_GetLockManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketManagerHost_OpenBucket_ParamsDataView {
 public:
  BucketManagerHost_OpenBucket_ParamsDataView() = default;

  BucketManagerHost_OpenBucket_ParamsDataView(
      internal::BucketManagerHost_OpenBucket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPolicyDataView(
      BucketPoliciesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicy(UserType* output) {
    
    auto* pointer = data_->policy.Get();
    return mojo::internal::Deserialize<::blink::mojom::BucketPoliciesDataView>(
        pointer, output, message_);
  }
 private:
  internal::BucketManagerHost_OpenBucket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketManagerHost_OpenBucket_ResponseParamsDataView {
 public:
  BucketManagerHost_OpenBucket_ResponseParamsDataView() = default;

  BucketManagerHost_OpenBucket_ResponseParamsDataView(
      internal::BucketManagerHost_OpenBucket_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BucketHostInterfaceBase>>(
            &data_->remote, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BucketManagerHost_OpenBucket_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketManagerHost_Keys_ParamsDataView {
 public:
  BucketManagerHost_Keys_ParamsDataView() = default;

  BucketManagerHost_Keys_ParamsDataView(
      internal::BucketManagerHost_Keys_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::BucketManagerHost_Keys_Params_Data* data_ = nullptr;
};



class BucketManagerHost_Keys_ResponseParamsDataView {
 public:
  BucketManagerHost_Keys_ResponseParamsDataView() = default;

  BucketManagerHost_Keys_ResponseParamsDataView(
      internal::BucketManagerHost_Keys_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuckets(UserType* output) {
    
    auto* pointer = data_->buckets.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketManagerHost_Keys_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketManagerHost_DeleteBucket_ParamsDataView {
 public:
  BucketManagerHost_DeleteBucket_ParamsDataView() = default;

  BucketManagerHost_DeleteBucket_ParamsDataView(
      internal::BucketManagerHost_DeleteBucket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::BucketManagerHost_DeleteBucket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BucketManagerHost_DeleteBucket_ResponseParamsDataView {
 public:
  BucketManagerHost_DeleteBucket_ResponseParamsDataView() = default;

  BucketManagerHost_DeleteBucket_ResponseParamsDataView(
      internal::BucketManagerHost_DeleteBucket_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::BucketManagerHost_DeleteBucket_ResponseParams_Data* data_ = nullptr;
};


















inline void BucketHost_SetExpires_ParamsDataView::GetExpiresDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->expires.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}






inline void BucketHost_Expires_ResponseParamsDataView::GetExpiresDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->expires.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}






inline void BucketManagerHost_OpenBucket_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BucketManagerHost_OpenBucket_ParamsDataView::GetPolicyDataView(
    BucketPoliciesDataView* output) {
  auto pointer = data_->policy.Get();
  *output = BucketPoliciesDataView(pointer, message_);
}






inline void BucketManagerHost_Keys_ResponseParamsDataView::GetBucketsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->buckets.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void BucketManagerHost_DeleteBucket_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BUCKETS_BUCKET_MANAGER_HOST_MOJOM_PARAMS_DATA_H_