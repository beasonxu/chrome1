// third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/peerconnection/peer_connection_tracker.mojom-shared-internal.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class PeerConnectionInfoDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::PeerConnectionInfoDataView> {
  using Data = ::blink::mojom::internal::PeerConnectionInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class DeviceThermalState : int32_t {
  
  kUnknown = 0,
  
  kNominal = 1,
  
  kFair = 2,
  
  kSerious = 3,
  
  kCritical = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, DeviceThermalState value);
inline bool IsKnownEnumValue(DeviceThermalState value) {
  return internal::DeviceThermalState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PeerConnectionManagerInterfaceBase {};

using PeerConnectionManagerPtrDataView =
    mojo::InterfacePtrDataView<PeerConnectionManagerInterfaceBase>;
using PeerConnectionManagerRequestDataView =
    mojo::InterfaceRequestDataView<PeerConnectionManagerInterfaceBase>;
using PeerConnectionManagerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PeerConnectionManagerInterfaceBase>;
using PeerConnectionManagerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PeerConnectionManagerInterfaceBase>;
class PeerConnectionTrackerHostInterfaceBase {};

using PeerConnectionTrackerHostPtrDataView =
    mojo::InterfacePtrDataView<PeerConnectionTrackerHostInterfaceBase>;
using PeerConnectionTrackerHostRequestDataView =
    mojo::InterfaceRequestDataView<PeerConnectionTrackerHostInterfaceBase>;
using PeerConnectionTrackerHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PeerConnectionTrackerHostInterfaceBase>;
using PeerConnectionTrackerHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PeerConnectionTrackerHostInterfaceBase>;


class PeerConnectionInfoDataView {
 public:
  PeerConnectionInfoDataView() = default;

  PeerConnectionInfoDataView(
      internal::PeerConnectionInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t lid() const {
    return data_->lid;
  }
  inline void GetRtcConfigurationDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRtcConfiguration(UserType* output) {
    
    auto* pointer = data_->rtc_configuration.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetConstraintsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConstraints(UserType* output) {
    
    auto* pointer = data_->constraints.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUrl` instead "
    "of `ReadUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PeerConnectionInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::DeviceThermalState>
    : public mojo::internal::EnumHashImpl<::blink::mojom::DeviceThermalState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::DeviceThermalState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::DeviceThermalState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::DeviceThermalState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::PeerConnectionInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::PeerConnectionInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::PeerConnectionInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->lid = Traits::lid(input);
    decltype(Traits::rtc_configuration(input)) in_rtc_configuration = Traits::rtc_configuration(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->rtc_configuration)::BaseType> rtc_configuration_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_rtc_configuration, rtc_configuration_fragment);
    fragment->rtc_configuration.Set(
        rtc_configuration_fragment.is_null() ? nullptr : rtc_configuration_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->rtc_configuration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null rtc_configuration in PeerConnectionInfo struct");
    decltype(Traits::constraints(input)) in_constraints = Traits::constraints(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->constraints)::BaseType> constraints_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_constraints, constraints_fragment);
    fragment->constraints.Set(
        constraints_fragment.is_null() ? nullptr : constraints_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->constraints.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null constraints in PeerConnectionInfo struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
  }

  static bool Deserialize(::blink::mojom::internal::PeerConnectionInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::PeerConnectionInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void PeerConnectionInfoDataView::GetRtcConfigurationDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->rtc_configuration.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void PeerConnectionInfoDataView::GetConstraintsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->constraints.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void PeerConnectionInfoDataView::GetUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->url.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::DeviceThermalState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::DeviceThermalState value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PEERCONNECTION_PEER_CONNECTION_TRACKER_MOJOM_SHARED_H_