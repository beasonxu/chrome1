// third_party/blink/public/mojom/speech/speech_recognition_result.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.mojom');







/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionHypothesisSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.SpeechRecognitionResultSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionHypothesisSpec.$,
    'SpeechRecognitionHypothesis',
    [
      mojo.internal.StructField(
        'utterance', 0,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'confidence', 8,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.SpeechRecognitionHypothesis = class {
  constructor() {
    /** @export { !mojoBase.mojom.String16 } */
    this.utterance;
    /** @export { !number } */
    this.confidence;
  }
};




mojo.internal.Struct(
    blink.mojom.SpeechRecognitionResultSpec.$,
    'SpeechRecognitionResult',
    [
      mojo.internal.StructField(
        'hypotheses', 0,
        0,
        mojo.internal.Array(blink.mojom.SpeechRecognitionHypothesisSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'isProvisional', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.mojom.SpeechRecognitionResult = class {
  constructor() {
    /** @export { !Array<!blink.mojom.SpeechRecognitionHypothesis> } */
    this.hypotheses;
    /** @export { !boolean } */
    this.isProvisional;
  }
};


