// third_party/blink/public/mojom/quota/quota_manager_host.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_QUOTA_QUOTA_MANAGER_HOST_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_QUOTA_QUOTA_MANAGER_HOST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaChangeListener_OnQuotaChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<QuotaChangeListener_OnQuotaChange_Params_Data>;

  QuotaChangeListener_OnQuotaChange_Params_Data();
  ~QuotaChangeListener_OnQuotaChange_Params_Data() = delete;
};
static_assert(sizeof(QuotaChangeListener_OnQuotaChange_Params_Data) == 8,
              "Bad sizeof(QuotaChangeListener_OnQuotaChange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaManagerHost_AddChangeListener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data listener;

 private:
  friend class mojo::internal::MessageFragment<QuotaManagerHost_AddChangeListener_Params_Data>;

  QuotaManagerHost_AddChangeListener_Params_Data();
  ~QuotaManagerHost_AddChangeListener_Params_Data() = delete;
};
static_assert(sizeof(QuotaManagerHost_AddChangeListener_Params_Data) == 16,
              "Bad sizeof(QuotaManagerHost_AddChangeListener_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaManagerHost_AddChangeListener_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<QuotaManagerHost_AddChangeListener_ResponseParams_Data>;

  QuotaManagerHost_AddChangeListener_ResponseParams_Data();
  ~QuotaManagerHost_AddChangeListener_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuotaManagerHost_AddChangeListener_ResponseParams_Data) == 8,
              "Bad sizeof(QuotaManagerHost_AddChangeListener_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t storage_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data>;

  QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data();
  ~QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data() = delete;
};
static_assert(sizeof(QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data) == 16,
              "Bad sizeof(QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  int64_t current_usage;
  int64_t current_quota;
  mojo::internal::Pointer<::blink::mojom::internal::UsageBreakdown_Data> usage_breakdown;

 private:
  friend class mojo::internal::MessageFragment<QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data>;

  QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data();
  ~QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data) == 40,
              "Bad sizeof(QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaManagerHost_RequestStorageQuota_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t storage_type;
  uint8_t pad0_[4];
  uint64_t requested_size;

 private:
  friend class mojo::internal::MessageFragment<QuotaManagerHost_RequestStorageQuota_Params_Data>;

  QuotaManagerHost_RequestStorageQuota_Params_Data();
  ~QuotaManagerHost_RequestStorageQuota_Params_Data() = delete;
};
static_assert(sizeof(QuotaManagerHost_RequestStorageQuota_Params_Data) == 24,
              "Bad sizeof(QuotaManagerHost_RequestStorageQuota_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) QuotaManagerHost_RequestStorageQuota_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  int64_t current_usage;
  int64_t granted_quota;

 private:
  friend class mojo::internal::MessageFragment<QuotaManagerHost_RequestStorageQuota_ResponseParams_Data>;

  QuotaManagerHost_RequestStorageQuota_ResponseParams_Data();
  ~QuotaManagerHost_RequestStorageQuota_ResponseParams_Data() = delete;
};
static_assert(sizeof(QuotaManagerHost_RequestStorageQuota_ResponseParams_Data) == 32,
              "Bad sizeof(QuotaManagerHost_RequestStorageQuota_ResponseParams_Data)");

}  // namespace internal


class QuotaChangeListener_OnQuotaChange_ParamsDataView {
 public:
  QuotaChangeListener_OnQuotaChange_ParamsDataView() = default;

  QuotaChangeListener_OnQuotaChange_ParamsDataView(
      internal::QuotaChangeListener_OnQuotaChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::QuotaChangeListener_OnQuotaChange_Params_Data* data_ = nullptr;
};



class QuotaManagerHost_AddChangeListener_ParamsDataView {
 public:
  QuotaManagerHost_AddChangeListener_ParamsDataView() = default;

  QuotaManagerHost_AddChangeListener_ParamsDataView(
      internal::QuotaManagerHost_AddChangeListener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::QuotaChangeListenerInterfaceBase>>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::QuotaManagerHost_AddChangeListener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class QuotaManagerHost_AddChangeListener_ResponseParamsDataView {
 public:
  QuotaManagerHost_AddChangeListener_ResponseParamsDataView() = default;

  QuotaManagerHost_AddChangeListener_ResponseParamsDataView(
      internal::QuotaManagerHost_AddChangeListener_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::QuotaManagerHost_AddChangeListener_ResponseParams_Data* data_ = nullptr;
};



class QuotaManagerHost_QueryStorageUsageAndQuota_ParamsDataView {
 public:
  QuotaManagerHost_QueryStorageUsageAndQuota_ParamsDataView() = default;

  QuotaManagerHost_QueryStorageUsageAndQuota_ParamsDataView(
      internal::QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStorageType(UserType* output) const {
    auto data_value = data_->storage_type;
    return mojo::internal::Deserialize<::blink::mojom::StorageType>(
        data_value, output);
  }
  ::blink::mojom::StorageType storage_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::StorageType>(data_->storage_type));
  }
 private:
  internal::QuotaManagerHost_QueryStorageUsageAndQuota_Params_Data* data_ = nullptr;
};



class QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsDataView {
 public:
  QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsDataView() = default;

  QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsDataView(
      internal::QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::QuotaStatusCode>(
        data_value, output);
  }
  ::blink::mojom::QuotaStatusCode error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::QuotaStatusCode>(data_->error));
  }
  int64_t current_usage() const {
    return data_->current_usage;
  }
  int64_t current_quota() const {
    return data_->current_quota;
  }
  inline void GetUsageBreakdownDataView(
      ::blink::mojom::UsageBreakdownDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsageBreakdown(UserType* output) {
    
    auto* pointer = data_->usage_breakdown.Get();
    return mojo::internal::Deserialize<::blink::mojom::UsageBreakdownDataView>(
        pointer, output, message_);
  }
 private:
  internal::QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class QuotaManagerHost_RequestStorageQuota_ParamsDataView {
 public:
  QuotaManagerHost_RequestStorageQuota_ParamsDataView() = default;

  QuotaManagerHost_RequestStorageQuota_ParamsDataView(
      internal::QuotaManagerHost_RequestStorageQuota_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStorageType(UserType* output) const {
    auto data_value = data_->storage_type;
    return mojo::internal::Deserialize<::blink::mojom::StorageType>(
        data_value, output);
  }
  ::blink::mojom::StorageType storage_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::StorageType>(data_->storage_type));
  }
  uint64_t requested_size() const {
    return data_->requested_size;
  }
 private:
  internal::QuotaManagerHost_RequestStorageQuota_Params_Data* data_ = nullptr;
};



class QuotaManagerHost_RequestStorageQuota_ResponseParamsDataView {
 public:
  QuotaManagerHost_RequestStorageQuota_ResponseParamsDataView() = default;

  QuotaManagerHost_RequestStorageQuota_ResponseParamsDataView(
      internal::QuotaManagerHost_RequestStorageQuota_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::QuotaStatusCode>(
        data_value, output);
  }
  ::blink::mojom::QuotaStatusCode error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::QuotaStatusCode>(data_->error));
  }
  int64_t current_usage() const {
    return data_->current_usage;
  }
  int64_t granted_quota() const {
    return data_->granted_quota;
  }
 private:
  internal::QuotaManagerHost_RequestStorageQuota_ResponseParams_Data* data_ = nullptr;
};










inline void QuotaManagerHost_QueryStorageUsageAndQuota_ResponseParamsDataView::GetUsageBreakdownDataView(
    ::blink::mojom::UsageBreakdownDataView* output) {
  auto pointer = data_->usage_breakdown.Get();
  *output = ::blink::mojom::UsageBreakdownDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_QUOTA_QUOTA_MANAGER_HOST_MOJOM_PARAMS_DATA_H_