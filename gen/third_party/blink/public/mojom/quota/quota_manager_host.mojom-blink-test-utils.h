// third_party/blink/public/mojom/quota/quota_manager_host.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_QUOTA_QUOTA_MANAGER_HOST_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_QUOTA_QUOTA_MANAGER_HOST_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/quota/quota_manager_host.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT QuotaChangeListenerInterceptorForTesting : public QuotaChangeListener {
  virtual QuotaChangeListener* GetForwardingInterface() = 0;
  void OnQuotaChange() override;
};
class PLATFORM_EXPORT QuotaChangeListenerAsyncWaiter {
 public:
  explicit QuotaChangeListenerAsyncWaiter(QuotaChangeListener* proxy);

  QuotaChangeListenerAsyncWaiter(const QuotaChangeListenerAsyncWaiter&) = delete;
  QuotaChangeListenerAsyncWaiter& operator=(const QuotaChangeListenerAsyncWaiter&) = delete;

  ~QuotaChangeListenerAsyncWaiter();

 private:
  QuotaChangeListener* const proxy_;
};


class PLATFORM_EXPORT QuotaManagerHostInterceptorForTesting : public QuotaManagerHost {
  virtual QuotaManagerHost* GetForwardingInterface() = 0;
  void AddChangeListener(::mojo::PendingRemote<QuotaChangeListener> listener, AddChangeListenerCallback callback) override;
  void QueryStorageUsageAndQuota(::blink::mojom::blink::StorageType storage_type, QueryStorageUsageAndQuotaCallback callback) override;
  void RequestStorageQuota(::blink::mojom::blink::StorageType storage_type, uint64_t requested_size, RequestStorageQuotaCallback callback) override;
};
class PLATFORM_EXPORT QuotaManagerHostAsyncWaiter {
 public:
  explicit QuotaManagerHostAsyncWaiter(QuotaManagerHost* proxy);

  QuotaManagerHostAsyncWaiter(const QuotaManagerHostAsyncWaiter&) = delete;
  QuotaManagerHostAsyncWaiter& operator=(const QuotaManagerHostAsyncWaiter&) = delete;

  ~QuotaManagerHostAsyncWaiter();
  void AddChangeListener(
      ::mojo::PendingRemote<QuotaChangeListener> listener);
  void QueryStorageUsageAndQuota(
      ::blink::mojom::blink::StorageType storage_type, ::blink::mojom::blink::QuotaStatusCode* out_error, int64_t* out_current_usage, int64_t* out_current_quota, ::blink::mojom::blink::UsageBreakdownPtr* out_usage_breakdown);
  void RequestStorageQuota(
      ::blink::mojom::blink::StorageType storage_type, uint64_t requested_size, ::blink::mojom::blink::QuotaStatusCode* out_error, int64_t* out_current_usage, int64_t* out_granted_quota);

 private:
  QuotaManagerHost* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_QUOTA_QUOTA_MANAGER_HOST_MOJOM_BLINK_TEST_UTILS_H_