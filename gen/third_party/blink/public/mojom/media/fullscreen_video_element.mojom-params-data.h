// third_party/blink/public/mojom/media/fullscreen_video_element.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_FULLSCREEN_VIDEO_ELEMENT_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_FULLSCREEN_VIDEO_ELEMENT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data>;

  FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data();
  ~FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data() = delete;
};
static_assert(sizeof(FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data) == 8,
              "Bad sizeof(FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data)");

}  // namespace internal


class FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsDataView {
 public:
  FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsDataView() = default;

  FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsDataView(
      internal::FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIA_FULLSCREEN_VIDEO_ELEMENT_MOJOM_PARAMS_DATA_H_