// third_party/blink/public/mojom/media/fullscreen_video_element.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');







goog.provide('blink.mojom.FullscreenVideoElementHandler');
goog.provide('blink.mojom.FullscreenVideoElementHandlerReceiver');
goog.provide('blink.mojom.FullscreenVideoElementHandlerCallbackRouter');
goog.provide('blink.mojom.FullscreenVideoElementHandlerInterface');
goog.provide('blink.mojom.FullscreenVideoElementHandlerRemote');
goog.provide('blink.mojom.FullscreenVideoElementHandlerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.FullscreenVideoElementHandlerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.FullscreenVideoElementHandler.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.FullscreenVideoElementHandlerInterface = class {
  
  /**
   */

  requestFullscreenVideoElement() {}
};

/**
 * @export
 * @implements { blink.mojom.FullscreenVideoElementHandlerInterface }
 */
blink.mojom.FullscreenVideoElementHandlerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.FullscreenVideoElementHandlerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.FullscreenVideoElementHandlerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.FullscreenVideoElementHandlerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  requestFullscreenVideoElement() {
    this.proxy.sendMessage(
        0,
        blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the FullscreenVideoElementHandler
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.FullscreenVideoElementHandlerReceiver = class {
  /**
   * @param {!blink.mojom.FullscreenVideoElementHandlerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.FullscreenVideoElementHandlerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.FullscreenVideoElementHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FullscreenVideoElementHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsSpec.$,
        null,
        impl.requestFullscreenVideoElement.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.FullscreenVideoElementHandler = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FullscreenVideoElementHandler";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.FullscreenVideoElementHandlerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.FullscreenVideoElementHandlerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FullscreenVideoElementHandler
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.FullscreenVideoElementHandlerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.FullscreenVideoElementHandlerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.FullscreenVideoElementHandlerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestFullscreenVideoElement =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsSpec.$,
        null,
        this.requestFullscreenVideoElement.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_ParamsSpec.$,
    'FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params');

/** @record */
blink.mojom.FullscreenVideoElementHandler_RequestFullscreenVideoElement_Params = class {
  constructor() {
  }
};


