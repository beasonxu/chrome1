// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-shared.h"
#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-forward.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class CrosWindowManagementFactoryProxy;

template <typename ImplRefTraits>
class CrosWindowManagementFactoryStub;

class CrosWindowManagementFactoryRequestValidator;


class BLINK_COMMON_EXPORT CrosWindowManagementFactory
    : public CrosWindowManagementFactoryInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = CrosWindowManagementFactoryInterfaceBase;
  using Proxy_ = CrosWindowManagementFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = CrosWindowManagementFactoryStub<ImplRefTraits>;

  using RequestValidator_ = CrosWindowManagementFactoryRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kCreateMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Create_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~CrosWindowManagementFactory() = default;

  
  virtual void Create(::mojo::PendingAssociatedReceiver<CrosWindowManagement> receiver, ::mojo::PendingAssociatedRemote<CrosWindowManagementStartObserver> observer_remote) = 0;
};

class CrosWindowManagementProxy;

template <typename ImplRefTraits>
class CrosWindowManagementStub;

class CrosWindowManagementRequestValidator;
class CrosWindowManagementResponseValidator;


class BLINK_COMMON_EXPORT CrosWindowManagement
    : public CrosWindowManagementInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = CrosWindowManagementInterfaceBase;
  using Proxy_ = CrosWindowManagementProxy;

  template <typename ImplRefTraits>
  using Stub_ = CrosWindowManagementStub<ImplRefTraits>;

  using RequestValidator_ = CrosWindowManagementRequestValidator;
  using ResponseValidator_ = CrosWindowManagementResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetAllWindowsMinVersion = 0,
    kMoveToMinVersion = 0,
    kMoveByMinVersion = 0,
    kResizeToMinVersion = 0,
    kResizeByMinVersion = 0,
    kSetFullscreenMinVersion = 0,
    kMaximizeMinVersion = 0,
    kMinimizeMinVersion = 0,
    kFocusMinVersion = 0,
    kCloseMinVersion = 0,
    kGetAllScreensMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetAllWindows_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct MoveTo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct MoveBy_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ResizeTo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ResizeBy_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetFullscreen_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Maximize_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Minimize_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Focus_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Close_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetAllScreens_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~CrosWindowManagement() = default;


  using GetAllWindowsCallback = base::OnceCallback<void(std::vector<CrosWindowInfoPtr>)>;
  
  virtual void GetAllWindows(GetAllWindowsCallback callback) = 0;


  using MoveToCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void MoveTo(const ::base::UnguessableToken& id, int32_t x, int32_t y, MoveToCallback callback) = 0;


  using MoveByCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void MoveBy(const ::base::UnguessableToken& id, int32_t delta_x, int32_t delta_y, MoveByCallback callback) = 0;


  using ResizeToCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void ResizeTo(const ::base::UnguessableToken& id, int32_t width, int32_t height, ResizeToCallback callback) = 0;


  using ResizeByCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void ResizeBy(const ::base::UnguessableToken& id, int32_t delta_width, int32_t delta_height, ResizeByCallback callback) = 0;


  using SetFullscreenCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void SetFullscreen(const ::base::UnguessableToken& id, bool fullscreen, SetFullscreenCallback callback) = 0;


  using MaximizeCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void Maximize(const ::base::UnguessableToken& id, MaximizeCallback callback) = 0;


  using MinimizeCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void Minimize(const ::base::UnguessableToken& id, MinimizeCallback callback) = 0;


  using FocusCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void Focus(const ::base::UnguessableToken& id, FocusCallback callback) = 0;


  using CloseCallback = base::OnceCallback<void(CrosWindowManagementStatus)>;
  
  virtual void Close(const ::base::UnguessableToken& id, CloseCallback callback) = 0;


  using GetAllScreensCallback = base::OnceCallback<void(std::vector<CrosScreenInfoPtr>)>;
  
  virtual void GetAllScreens(GetAllScreensCallback callback) = 0;
};

class CrosWindowManagementStartObserverProxy;

template <typename ImplRefTraits>
class CrosWindowManagementStartObserverStub;

class CrosWindowManagementStartObserverRequestValidator;


class BLINK_COMMON_EXPORT CrosWindowManagementStartObserver
    : public CrosWindowManagementStartObserverInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = CrosWindowManagementStartObserverInterfaceBase;
  using Proxy_ = CrosWindowManagementStartObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = CrosWindowManagementStartObserverStub<ImplRefTraits>;

  using RequestValidator_ = CrosWindowManagementStartObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kDispatchStartEventMinVersion = 0,
    kDispatchAcceleratorEventMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct DispatchStartEvent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct DispatchAcceleratorEvent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~CrosWindowManagementStartObserver() = default;

  
  virtual void DispatchStartEvent() = 0;

  
  virtual void DispatchAcceleratorEvent(AcceleratorEventPtr event) = 0;
};



class BLINK_COMMON_EXPORT CrosWindowManagementFactoryProxy
    : public CrosWindowManagementFactory {
 public:
  using InterfaceType = CrosWindowManagementFactory;

  explicit CrosWindowManagementFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Create(::mojo::PendingAssociatedReceiver<CrosWindowManagement> receiver, ::mojo::PendingAssociatedRemote<CrosWindowManagementStartObserver> observer_remote) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_COMMON_EXPORT CrosWindowManagementProxy
    : public CrosWindowManagement {
 public:
  using InterfaceType = CrosWindowManagement;

  explicit CrosWindowManagementProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetAllWindows(GetAllWindowsCallback callback) final;
  
  void MoveTo(const ::base::UnguessableToken& id, int32_t x, int32_t y, MoveToCallback callback) final;
  
  void MoveBy(const ::base::UnguessableToken& id, int32_t delta_x, int32_t delta_y, MoveByCallback callback) final;
  
  void ResizeTo(const ::base::UnguessableToken& id, int32_t width, int32_t height, ResizeToCallback callback) final;
  
  void ResizeBy(const ::base::UnguessableToken& id, int32_t delta_width, int32_t delta_height, ResizeByCallback callback) final;
  
  void SetFullscreen(const ::base::UnguessableToken& id, bool fullscreen, SetFullscreenCallback callback) final;
  
  void Maximize(const ::base::UnguessableToken& id, MaximizeCallback callback) final;
  
  void Minimize(const ::base::UnguessableToken& id, MinimizeCallback callback) final;
  
  void Focus(const ::base::UnguessableToken& id, FocusCallback callback) final;
  
  void Close(const ::base::UnguessableToken& id, CloseCallback callback) final;
  
  void GetAllScreens(GetAllScreensCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_COMMON_EXPORT CrosWindowManagementStartObserverProxy
    : public CrosWindowManagementStartObserver {
 public:
  using InterfaceType = CrosWindowManagementStartObserver;

  explicit CrosWindowManagementStartObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void DispatchStartEvent() final;
  
  void DispatchAcceleratorEvent(AcceleratorEventPtr event) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT CrosWindowManagementFactoryStubDispatch {
 public:
  static bool Accept(CrosWindowManagementFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CrosWindowManagementFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CrosWindowManagementFactory>>
class CrosWindowManagementFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CrosWindowManagementFactoryStub() = default;
  ~CrosWindowManagementFactoryStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CrosWindowManagementFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CrosWindowManagementFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT CrosWindowManagementStubDispatch {
 public:
  static bool Accept(CrosWindowManagement* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CrosWindowManagement* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CrosWindowManagement>>
class CrosWindowManagementStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CrosWindowManagementStub() = default;
  ~CrosWindowManagementStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CrosWindowManagementStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CrosWindowManagementStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT CrosWindowManagementStartObserverStubDispatch {
 public:
  static bool Accept(CrosWindowManagementStartObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CrosWindowManagementStartObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CrosWindowManagementStartObserver>>
class CrosWindowManagementStartObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CrosWindowManagementStartObserverStub() = default;
  ~CrosWindowManagementStartObserverStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CrosWindowManagementStartObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CrosWindowManagementStartObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT CrosWindowManagementFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT CrosWindowManagementRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT CrosWindowManagementStartObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT CrosWindowManagementResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};







class BLINK_COMMON_EXPORT AcceleratorEvent {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AcceleratorEvent, T>::value>;
  using DataView = AcceleratorEventDataView;
  using Data_ = internal::AcceleratorEvent_Data;
  using Type = AcceleratorEvent_Type;

  template <typename... Args>
  static AcceleratorEventPtr New(Args&&... args) {
    return AcceleratorEventPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AcceleratorEventPtr From(const U& u) {
    return mojo::TypeConverter<AcceleratorEventPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AcceleratorEvent>::Convert(*this);
  }


  AcceleratorEvent();

  AcceleratorEvent(
      AcceleratorEvent::Type type,
      const std::string& accelerator_name,
      bool repeat);


  ~AcceleratorEvent();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AcceleratorEventPtr>
  AcceleratorEventPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AcceleratorEvent::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AcceleratorEvent::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AcceleratorEvent::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AcceleratorEvent::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AcceleratorEvent_UnserializedMessageContext<
            UserType, AcceleratorEvent::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AcceleratorEvent::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AcceleratorEvent::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AcceleratorEvent_UnserializedMessageContext<
            UserType, AcceleratorEvent::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AcceleratorEvent::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  AcceleratorEvent::Type type;
  
  std::string accelerator_name;
  
  bool repeat;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AcceleratorEvent::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AcceleratorEvent::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AcceleratorEvent::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AcceleratorEvent::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}







class BLINK_COMMON_EXPORT CrosWindowInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CrosWindowInfo, T>::value>;
  using DataView = CrosWindowInfoDataView;
  using Data_ = internal::CrosWindowInfo_Data;

  template <typename... Args>
  static CrosWindowInfoPtr New(Args&&... args) {
    return CrosWindowInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CrosWindowInfoPtr From(const U& u) {
    return mojo::TypeConverter<CrosWindowInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CrosWindowInfo>::Convert(*this);
  }


  CrosWindowInfo();

  CrosWindowInfo(
      const ::base::UnguessableToken& id,
      const std::string& app_id,
      const ::gfx::Rect& bounds,
      const std::string& title,
      WindowState window_state,
      bool is_focused,
      VisibilityState visibility_state);


  ~CrosWindowInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CrosWindowInfoPtr>
  CrosWindowInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CrosWindowInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CrosWindowInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CrosWindowInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CrosWindowInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CrosWindowInfo_UnserializedMessageContext<
            UserType, CrosWindowInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CrosWindowInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CrosWindowInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CrosWindowInfo_UnserializedMessageContext<
            UserType, CrosWindowInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CrosWindowInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::UnguessableToken id;
  
  std::string app_id;
  
  ::gfx::Rect bounds;
  
  std::string title;
  
  WindowState window_state;
  
  bool is_focused;
  
  VisibilityState visibility_state;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CrosWindowInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CrosWindowInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CrosWindowInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CrosWindowInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_COMMON_EXPORT CrosScreenInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CrosScreenInfo, T>::value>;
  using DataView = CrosScreenInfoDataView;
  using Data_ = internal::CrosScreenInfo_Data;

  template <typename... Args>
  static CrosScreenInfoPtr New(Args&&... args) {
    return CrosScreenInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CrosScreenInfoPtr From(const U& u) {
    return mojo::TypeConverter<CrosScreenInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CrosScreenInfo>::Convert(*this);
  }


  CrosScreenInfo();

  CrosScreenInfo(
      const ::gfx::Rect& work_area,
      const ::gfx::Rect& bounds,
      bool is_primary);


  ~CrosScreenInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CrosScreenInfoPtr>
  CrosScreenInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CrosScreenInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CrosScreenInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CrosScreenInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CrosScreenInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CrosScreenInfo_UnserializedMessageContext<
            UserType, CrosScreenInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CrosScreenInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CrosScreenInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CrosScreenInfo_UnserializedMessageContext<
            UserType, CrosScreenInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CrosScreenInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::gfx::Rect work_area;
  
  ::gfx::Rect bounds;
  
  bool is_primary;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CrosScreenInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CrosScreenInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CrosScreenInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CrosScreenInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}


template <typename StructPtrType>
CrosWindowInfoPtr CrosWindowInfo::Clone() const {
  return New(
      mojo::Clone(id),
      mojo::Clone(app_id),
      mojo::Clone(bounds),
      mojo::Clone(title),
      mojo::Clone(window_state),
      mojo::Clone(is_focused),
      mojo::Clone(visibility_state)
  );
}

template <typename T, CrosWindowInfo::EnableIfSame<T>*>
bool CrosWindowInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  if (!mojo::Equals(this->app_id, other_struct.app_id))
    return false;
  if (!mojo::Equals(this->bounds, other_struct.bounds))
    return false;
  if (!mojo::Equals(this->title, other_struct.title))
    return false;
  if (!mojo::Equals(this->window_state, other_struct.window_state))
    return false;
  if (!mojo::Equals(this->is_focused, other_struct.is_focused))
    return false;
  if (!mojo::Equals(this->visibility_state, other_struct.visibility_state))
    return false;
  return true;
}

template <typename T, CrosWindowInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  if (lhs.app_id < rhs.app_id)
    return true;
  if (rhs.app_id < lhs.app_id)
    return false;
  if (lhs.bounds < rhs.bounds)
    return true;
  if (rhs.bounds < lhs.bounds)
    return false;
  if (lhs.title < rhs.title)
    return true;
  if (rhs.title < lhs.title)
    return false;
  if (lhs.window_state < rhs.window_state)
    return true;
  if (rhs.window_state < lhs.window_state)
    return false;
  if (lhs.is_focused < rhs.is_focused)
    return true;
  if (rhs.is_focused < lhs.is_focused)
    return false;
  if (lhs.visibility_state < rhs.visibility_state)
    return true;
  if (rhs.visibility_state < lhs.visibility_state)
    return false;
  return false;
}
template <typename StructPtrType>
CrosScreenInfoPtr CrosScreenInfo::Clone() const {
  return New(
      mojo::Clone(work_area),
      mojo::Clone(bounds),
      mojo::Clone(is_primary)
  );
}

template <typename T, CrosScreenInfo::EnableIfSame<T>*>
bool CrosScreenInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->work_area, other_struct.work_area))
    return false;
  if (!mojo::Equals(this->bounds, other_struct.bounds))
    return false;
  if (!mojo::Equals(this->is_primary, other_struct.is_primary))
    return false;
  return true;
}

template <typename T, CrosScreenInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.work_area < rhs.work_area)
    return true;
  if (rhs.work_area < lhs.work_area)
    return false;
  if (lhs.bounds < rhs.bounds)
    return true;
  if (rhs.bounds < lhs.bounds)
    return false;
  if (lhs.is_primary < rhs.is_primary)
    return true;
  if (rhs.is_primary < lhs.is_primary)
    return false;
  return false;
}
template <typename StructPtrType>
AcceleratorEventPtr AcceleratorEvent::Clone() const {
  return New(
      mojo::Clone(type),
      mojo::Clone(accelerator_name),
      mojo::Clone(repeat)
  );
}

template <typename T, AcceleratorEvent::EnableIfSame<T>*>
bool AcceleratorEvent::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->accelerator_name, other_struct.accelerator_name))
    return false;
  if (!mojo::Equals(this->repeat, other_struct.repeat))
    return false;
  return true;
}

template <typename T, AcceleratorEvent::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.accelerator_name < rhs.accelerator_name)
    return true;
  if (rhs.accelerator_name < lhs.accelerator_name)
    return false;
  if (lhs.repeat < rhs.repeat)
    return true;
  if (rhs.repeat < lhs.repeat)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::CrosWindowInfo::DataView,
                                         ::blink::mojom::CrosWindowInfoPtr> {
  static bool IsNull(const ::blink::mojom::CrosWindowInfoPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::CrosWindowInfoPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::CrosWindowInfo::id)& id(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->id;
  }

  static const decltype(::blink::mojom::CrosWindowInfo::app_id)& app_id(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->app_id;
  }

  static const decltype(::blink::mojom::CrosWindowInfo::bounds)& bounds(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->bounds;
  }

  static const decltype(::blink::mojom::CrosWindowInfo::title)& title(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->title;
  }

  static decltype(::blink::mojom::CrosWindowInfo::window_state) window_state(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->window_state;
  }

  static decltype(::blink::mojom::CrosWindowInfo::is_focused) is_focused(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->is_focused;
  }

  static decltype(::blink::mojom::CrosWindowInfo::visibility_state) visibility_state(
      const ::blink::mojom::CrosWindowInfoPtr& input) {
    return input->visibility_state;
  }

  static bool Read(::blink::mojom::CrosWindowInfo::DataView input, ::blink::mojom::CrosWindowInfoPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::CrosScreenInfo::DataView,
                                         ::blink::mojom::CrosScreenInfoPtr> {
  static bool IsNull(const ::blink::mojom::CrosScreenInfoPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::CrosScreenInfoPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::CrosScreenInfo::work_area)& work_area(
      const ::blink::mojom::CrosScreenInfoPtr& input) {
    return input->work_area;
  }

  static const decltype(::blink::mojom::CrosScreenInfo::bounds)& bounds(
      const ::blink::mojom::CrosScreenInfoPtr& input) {
    return input->bounds;
  }

  static decltype(::blink::mojom::CrosScreenInfo::is_primary) is_primary(
      const ::blink::mojom::CrosScreenInfoPtr& input) {
    return input->is_primary;
  }

  static bool Read(::blink::mojom::CrosScreenInfo::DataView input, ::blink::mojom::CrosScreenInfoPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::AcceleratorEvent::DataView,
                                         ::blink::mojom::AcceleratorEventPtr> {
  static bool IsNull(const ::blink::mojom::AcceleratorEventPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::AcceleratorEventPtr* output) { output->reset(); }

  static decltype(::blink::mojom::AcceleratorEvent::type) type(
      const ::blink::mojom::AcceleratorEventPtr& input) {
    return input->type;
  }

  static const decltype(::blink::mojom::AcceleratorEvent::accelerator_name)& accelerator_name(
      const ::blink::mojom::AcceleratorEventPtr& input) {
    return input->accelerator_name;
  }

  static decltype(::blink::mojom::AcceleratorEvent::repeat) repeat(
      const ::blink::mojom::AcceleratorEventPtr& input) {
    return input->repeat;
  }

  static bool Read(::blink::mojom::AcceleratorEvent::DataView input, ::blink::mojom::AcceleratorEventPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_H_