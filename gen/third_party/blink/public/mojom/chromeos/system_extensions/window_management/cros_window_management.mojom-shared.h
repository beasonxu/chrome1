// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class CrosWindowInfoDataView;

class CrosScreenInfoDataView;

class AcceleratorEventDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::CrosWindowInfoDataView> {
  using Data = ::blink::mojom::internal::CrosWindowInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::CrosScreenInfoDataView> {
  using Data = ::blink::mojom::internal::CrosScreenInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AcceleratorEventDataView> {
  using Data = ::blink::mojom::internal::AcceleratorEvent_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class WindowState : int32_t {
  
  kNormal = 0,
  
  kFullscreen = 1,
  
  kMaximized = 2,
  
  kMinimized = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, WindowState value);
inline bool IsKnownEnumValue(WindowState value) {
  return internal::WindowState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class VisibilityState : int32_t {
  
  kHidden = 0,
  
  kShown = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, VisibilityState value);
inline bool IsKnownEnumValue(VisibilityState value) {
  return internal::VisibilityState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class CrosWindowManagementStatus : int32_t {
  
  kSuccess = 0,
  
  kWindowNotFound = 1,
  
  kWindowNoWindowState = 2,
  
  kWindowNoWidget = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, CrosWindowManagementStatus value);
inline bool IsKnownEnumValue(CrosWindowManagementStatus value) {
  return internal::CrosWindowManagementStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class AcceleratorEvent_Type : int32_t {
  
  kDown = 0,
  
  kUp = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, AcceleratorEvent_Type value);
inline bool IsKnownEnumValue(AcceleratorEvent_Type value) {
  return internal::AcceleratorEvent_Type_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class CrosWindowManagementFactoryInterfaceBase {};

using CrosWindowManagementFactoryPtrDataView =
    mojo::InterfacePtrDataView<CrosWindowManagementFactoryInterfaceBase>;
using CrosWindowManagementFactoryRequestDataView =
    mojo::InterfaceRequestDataView<CrosWindowManagementFactoryInterfaceBase>;
using CrosWindowManagementFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CrosWindowManagementFactoryInterfaceBase>;
using CrosWindowManagementFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CrosWindowManagementFactoryInterfaceBase>;
class CrosWindowManagementInterfaceBase {};

using CrosWindowManagementPtrDataView =
    mojo::InterfacePtrDataView<CrosWindowManagementInterfaceBase>;
using CrosWindowManagementRequestDataView =
    mojo::InterfaceRequestDataView<CrosWindowManagementInterfaceBase>;
using CrosWindowManagementAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CrosWindowManagementInterfaceBase>;
using CrosWindowManagementAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CrosWindowManagementInterfaceBase>;
class CrosWindowManagementStartObserverInterfaceBase {};

using CrosWindowManagementStartObserverPtrDataView =
    mojo::InterfacePtrDataView<CrosWindowManagementStartObserverInterfaceBase>;
using CrosWindowManagementStartObserverRequestDataView =
    mojo::InterfaceRequestDataView<CrosWindowManagementStartObserverInterfaceBase>;
using CrosWindowManagementStartObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CrosWindowManagementStartObserverInterfaceBase>;
using CrosWindowManagementStartObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CrosWindowManagementStartObserverInterfaceBase>;


class CrosWindowInfoDataView {
 public:
  CrosWindowInfoDataView() = default;

  CrosWindowInfoDataView(
      internal::CrosWindowInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetAppIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAppId(UserType* output) {
    
    auto* pointer = data_->app_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetTitleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTitle(UserType* output) {
    
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadWindowState(UserType* output) const {
    auto data_value = data_->window_state;
    return mojo::internal::Deserialize<::blink::mojom::WindowState>(
        data_value, output);
  }
  WindowState window_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::WindowState>(data_->window_state));
  }
  bool is_focused() const {
    return data_->is_focused;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadVisibilityState(UserType* output) const {
    auto data_value = data_->visibility_state;
    return mojo::internal::Deserialize<::blink::mojom::VisibilityState>(
        data_value, output);
  }
  VisibilityState visibility_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::VisibilityState>(data_->visibility_state));
  }
 private:
  internal::CrosWindowInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CrosScreenInfoDataView {
 public:
  CrosScreenInfoDataView() = default;

  CrosScreenInfoDataView(
      internal::CrosScreenInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetWorkAreaDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadWorkArea(UserType* output) {
    
    auto* pointer = data_->work_area.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  bool is_primary() const {
    return data_->is_primary;
  }
 private:
  internal::CrosScreenInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AcceleratorEventDataView {
 public:
  AcceleratorEventDataView() = default;

  AcceleratorEventDataView(
      internal::AcceleratorEvent_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::blink::mojom::AcceleratorEvent_Type>(
        data_value, output);
  }
  AcceleratorEvent_Type type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::AcceleratorEvent_Type>(data_->type));
  }
  inline void GetAcceleratorNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAcceleratorName(UserType* output) {
    
    auto* pointer = data_->accelerator_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool repeat() const {
    return data_->repeat;
  }
 private:
  internal::AcceleratorEvent_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::WindowState>
    : public mojo::internal::EnumHashImpl<::blink::mojom::WindowState> {};

template <>
struct hash<::blink::mojom::VisibilityState>
    : public mojo::internal::EnumHashImpl<::blink::mojom::VisibilityState> {};

template <>
struct hash<::blink::mojom::CrosWindowManagementStatus>
    : public mojo::internal::EnumHashImpl<::blink::mojom::CrosWindowManagementStatus> {};

template <>
struct hash<::blink::mojom::AcceleratorEvent_Type>
    : public mojo::internal::EnumHashImpl<::blink::mojom::AcceleratorEvent_Type> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::WindowState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::WindowState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::WindowState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::VisibilityState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::VisibilityState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::VisibilityState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::CrosWindowManagementStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::CrosWindowManagementStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::CrosWindowManagementStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AcceleratorEvent_Type, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::AcceleratorEvent_Type, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::AcceleratorEvent_Type>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::CrosWindowInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::CrosWindowInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::CrosWindowInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::id(input)) in_id = Traits::id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->id)::BaseType> id_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_id, id_fragment);
    fragment->id.Set(
        id_fragment.is_null() ? nullptr : id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id in CrosWindowInfo struct");
    decltype(Traits::app_id(input)) in_app_id = Traits::app_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->app_id)::BaseType> app_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_app_id, app_id_fragment);
    fragment->app_id.Set(
        app_id_fragment.is_null() ? nullptr : app_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->app_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null app_id in CrosWindowInfo struct");
    decltype(Traits::bounds(input)) in_bounds = Traits::bounds(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bounds)::BaseType> bounds_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_bounds, bounds_fragment);
    fragment->bounds.Set(
        bounds_fragment.is_null() ? nullptr : bounds_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bounds.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bounds in CrosWindowInfo struct");
    decltype(Traits::title(input)) in_title = Traits::title(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->title)::BaseType> title_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_title, title_fragment);
    fragment->title.Set(
        title_fragment.is_null() ? nullptr : title_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in CrosWindowInfo struct");
    mojo::internal::Serialize<::blink::mojom::WindowState>(
        Traits::window_state(input), &fragment->window_state);
    fragment->is_focused = Traits::is_focused(input);
    mojo::internal::Serialize<::blink::mojom::VisibilityState>(
        Traits::visibility_state(input), &fragment->visibility_state);
  }

  static bool Deserialize(::blink::mojom::internal::CrosWindowInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::CrosWindowInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::CrosScreenInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::CrosScreenInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::CrosScreenInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::work_area(input)) in_work_area = Traits::work_area(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->work_area)::BaseType> work_area_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_work_area, work_area_fragment);
    fragment->work_area.Set(
        work_area_fragment.is_null() ? nullptr : work_area_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->work_area.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null work_area in CrosScreenInfo struct");
    decltype(Traits::bounds(input)) in_bounds = Traits::bounds(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bounds)::BaseType> bounds_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_bounds, bounds_fragment);
    fragment->bounds.Set(
        bounds_fragment.is_null() ? nullptr : bounds_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bounds.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bounds in CrosScreenInfo struct");
    fragment->is_primary = Traits::is_primary(input);
  }

  static bool Deserialize(::blink::mojom::internal::CrosScreenInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::CrosScreenInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AcceleratorEventDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AcceleratorEventDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AcceleratorEvent_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::AcceleratorEvent_Type>(
        Traits::type(input), &fragment->type);
    decltype(Traits::accelerator_name(input)) in_accelerator_name = Traits::accelerator_name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->accelerator_name)::BaseType> accelerator_name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_accelerator_name, accelerator_name_fragment);
    fragment->accelerator_name.Set(
        accelerator_name_fragment.is_null() ? nullptr : accelerator_name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->accelerator_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null accelerator_name in AcceleratorEvent struct");
    fragment->repeat = Traits::repeat(input);
  }

  static bool Deserialize(::blink::mojom::internal::AcceleratorEvent_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AcceleratorEventDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void CrosWindowInfoDataView::GetIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void CrosWindowInfoDataView::GetAppIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->app_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CrosWindowInfoDataView::GetBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void CrosWindowInfoDataView::GetTitleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->title.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void CrosScreenInfoDataView::GetWorkAreaDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->work_area.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void CrosScreenInfoDataView::GetBoundsDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void AcceleratorEventDataView::GetAcceleratorNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->accelerator_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::WindowState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::WindowState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::VisibilityState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::VisibilityState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::CrosWindowManagementStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::CrosWindowManagementStatus value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::AcceleratorEvent_Type> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::AcceleratorEvent_Type value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_WINDOW_MANAGEMENT_CROS_WINDOW_MANAGEMENT_MOJOM_SHARED_H_