// third_party/blink/public/mojom/chromeos/system_extensions/window_management/cros_window_management.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../../../mojo/public/js/bindings.js';

import {
  UnguessableToken as mojoBase_mojom_UnguessableToken,
  UnguessableTokenSpec as mojoBase_mojom_UnguessableTokenSpec
} from '../../../../../../../mojo/public/mojom/base/unguessable_token.mojom.m.js';

import {
  Rect as gfx_mojom_Rect,
  RectSpec as gfx_mojom_RectSpec
} from '../../../../../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const WindowStateSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const WindowState = {
  
  kNormal: 0,
  kFullscreen: 1,
  kMaximized: 2,
  kMinimized: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const VisibilityStateSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const VisibilityState = {
  
  kHidden: 0,
  kShown: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const CrosWindowManagementStatusSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const CrosWindowManagementStatus = {
  
  kSuccess: 0,
  kWindowNotFound: 1,
  kWindowNoWindowState: 2,
  kWindowNoWidget: 3,
  MIN_VALUE: 0,
  MAX_VALUE: 3,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CrosWindowManagementFactoryPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.CrosWindowManagementFactory', scope);
  }
}

/** @interface */
export class CrosWindowManagementFactoryInterface {
  
  /**
   * @param { !Object } receiver
   * @param { !Object } observerRemote
   */

  create(receiver, observerRemote) {}
}

/**
 * @implements { CrosWindowManagementFactoryInterface }
 */
export class CrosWindowManagementFactoryRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CrosWindowManagementFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CrosWindowManagementFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CrosWindowManagementFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } receiver
   * @param { !Object } observerRemote
   */

  create(
      receiver,
      observerRemote) {
    this.proxy.sendMessage(
        0,
        CrosWindowManagementFactory_Create_ParamsSpec.$,
        null,
        [
          receiver,
          observerRemote
        ]);
  }
}

/**
 * An object which receives request messages for the CrosWindowManagementFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CrosWindowManagementFactoryReceiver {
  /**
   * @param {!CrosWindowManagementFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CrosWindowManagementFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CrosWindowManagementFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CrosWindowManagementFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CrosWindowManagementFactory_Create_ParamsSpec.$,
        null,
        impl.create.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CrosWindowManagementFactory {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosWindowManagementFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CrosWindowManagementFactoryRemote}
   */
  static getRemote() {
    let remote = new CrosWindowManagementFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CrosWindowManagementFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CrosWindowManagementFactoryCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CrosWindowManagementFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CrosWindowManagementFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.create =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CrosWindowManagementFactory_Create_ParamsSpec.$,
        null,
        this.create.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CrosWindowManagementPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.CrosWindowManagement', scope);
  }
}

/** @interface */
export class CrosWindowManagementInterface {
  
  /**
   * @return {!Promise<{
        result: !Array<!CrosWindowInfo>,
   *  }>}
   */

  getAllWindows() {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } x
   * @param { !number } y
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  moveTo(id, x, y) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } deltaX
   * @param { !number } deltaY
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  moveBy(id, deltaX, deltaY) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } width
   * @param { !number } height
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  resizeTo(id, width, height) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } deltaWidth
   * @param { !number } deltaHeight
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  resizeBy(id, deltaWidth, deltaHeight) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !boolean } fullscreen
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  setFullscreen(id, fullscreen) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  maximize(id) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  minimize(id) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  focus(id) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  close(id) {}
  
  /**
   * @return {!Promise<{
        screens: !Array<!CrosScreenInfo>,
   *  }>}
   */

  getAllScreens() {}
}

/**
 * @implements { CrosWindowManagementInterface }
 */
export class CrosWindowManagementRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CrosWindowManagementPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CrosWindowManagementPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CrosWindowManagementPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        result: !Array<!CrosWindowInfo>,
   *  }>}
   */

  getAllWindows() {
    return this.proxy.sendMessage(
        0,
        CrosWindowManagement_GetAllWindows_ParamsSpec.$,
        CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } x
   * @param { !number } y
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  moveTo(
      id,
      x,
      y) {
    return this.proxy.sendMessage(
        1,
        CrosWindowManagement_MoveTo_ParamsSpec.$,
        CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
        [
          id,
          x,
          y
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } deltaX
   * @param { !number } deltaY
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  moveBy(
      id,
      deltaX,
      deltaY) {
    return this.proxy.sendMessage(
        2,
        CrosWindowManagement_MoveBy_ParamsSpec.$,
        CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
        [
          id,
          deltaX,
          deltaY
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } width
   * @param { !number } height
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  resizeTo(
      id,
      width,
      height) {
    return this.proxy.sendMessage(
        3,
        CrosWindowManagement_ResizeTo_ParamsSpec.$,
        CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
        [
          id,
          width,
          height
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !number } deltaWidth
   * @param { !number } deltaHeight
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  resizeBy(
      id,
      deltaWidth,
      deltaHeight) {
    return this.proxy.sendMessage(
        4,
        CrosWindowManagement_ResizeBy_ParamsSpec.$,
        CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
        [
          id,
          deltaWidth,
          deltaHeight
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !boolean } fullscreen
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  setFullscreen(
      id,
      fullscreen) {
    return this.proxy.sendMessage(
        5,
        CrosWindowManagement_SetFullscreen_ParamsSpec.$,
        CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
        [
          id,
          fullscreen
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  maximize(
      id) {
    return this.proxy.sendMessage(
        6,
        CrosWindowManagement_Maximize_ParamsSpec.$,
        CrosWindowManagement_Maximize_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  minimize(
      id) {
    return this.proxy.sendMessage(
        7,
        CrosWindowManagement_Minimize_ParamsSpec.$,
        CrosWindowManagement_Minimize_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  focus(
      id) {
    return this.proxy.sendMessage(
        8,
        CrosWindowManagement_Focus_ParamsSpec.$,
        CrosWindowManagement_Focus_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @return {!Promise<{
        value: !CrosWindowManagementStatus,
   *  }>}
   */

  close(
      id) {
    return this.proxy.sendMessage(
        9,
        CrosWindowManagement_Close_ParamsSpec.$,
        CrosWindowManagement_Close_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @return {!Promise<{
        screens: !Array<!CrosScreenInfo>,
   *  }>}
   */

  getAllScreens() {
    return this.proxy.sendMessage(
        10,
        CrosWindowManagement_GetAllScreens_ParamsSpec.$,
        CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the CrosWindowManagement
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CrosWindowManagementReceiver {
  /**
   * @param {!CrosWindowManagementInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CrosWindowManagementRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CrosWindowManagementRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CrosWindowManagementRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CrosWindowManagement_GetAllWindows_ParamsSpec.$,
        CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
        impl.getAllWindows.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        CrosWindowManagement_MoveTo_ParamsSpec.$,
        CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
        impl.moveTo.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        CrosWindowManagement_MoveBy_ParamsSpec.$,
        CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
        impl.moveBy.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        CrosWindowManagement_ResizeTo_ParamsSpec.$,
        CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
        impl.resizeTo.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        CrosWindowManagement_ResizeBy_ParamsSpec.$,
        CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
        impl.resizeBy.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        CrosWindowManagement_SetFullscreen_ParamsSpec.$,
        CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
        impl.setFullscreen.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        CrosWindowManagement_Maximize_ParamsSpec.$,
        CrosWindowManagement_Maximize_ResponseParamsSpec.$,
        impl.maximize.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        CrosWindowManagement_Minimize_ParamsSpec.$,
        CrosWindowManagement_Minimize_ResponseParamsSpec.$,
        impl.minimize.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        CrosWindowManagement_Focus_ParamsSpec.$,
        CrosWindowManagement_Focus_ResponseParamsSpec.$,
        impl.focus.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        CrosWindowManagement_Close_ParamsSpec.$,
        CrosWindowManagement_Close_ResponseParamsSpec.$,
        impl.close.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        CrosWindowManagement_GetAllScreens_ParamsSpec.$,
        CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
        impl.getAllScreens.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CrosWindowManagement {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosWindowManagement";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CrosWindowManagementRemote}
   */
  static getRemote() {
    let remote = new CrosWindowManagementRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CrosWindowManagement
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CrosWindowManagementCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CrosWindowManagementRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CrosWindowManagementRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAllWindows =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CrosWindowManagement_GetAllWindows_ParamsSpec.$,
        CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
        this.getAllWindows.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.moveTo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        CrosWindowManagement_MoveTo_ParamsSpec.$,
        CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
        this.moveTo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.moveBy =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        CrosWindowManagement_MoveBy_ParamsSpec.$,
        CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
        this.moveBy.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resizeTo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        CrosWindowManagement_ResizeTo_ParamsSpec.$,
        CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
        this.resizeTo.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.resizeBy =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        CrosWindowManagement_ResizeBy_ParamsSpec.$,
        CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
        this.resizeBy.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setFullscreen =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        CrosWindowManagement_SetFullscreen_ParamsSpec.$,
        CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
        this.setFullscreen.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.maximize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        CrosWindowManagement_Maximize_ParamsSpec.$,
        CrosWindowManagement_Maximize_ResponseParamsSpec.$,
        this.maximize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.minimize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        CrosWindowManagement_Minimize_ParamsSpec.$,
        CrosWindowManagement_Minimize_ResponseParamsSpec.$,
        this.minimize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.focus =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        CrosWindowManagement_Focus_ParamsSpec.$,
        CrosWindowManagement_Focus_ResponseParamsSpec.$,
        this.focus.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.close =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        CrosWindowManagement_Close_ParamsSpec.$,
        CrosWindowManagement_Close_ResponseParamsSpec.$,
        this.close.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAllScreens =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        CrosWindowManagement_GetAllScreens_ParamsSpec.$,
        CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
        this.getAllScreens.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CrosWindowManagementStartObserverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.CrosWindowManagementStartObserver', scope);
  }
}

/** @interface */
export class CrosWindowManagementStartObserverInterface {
  
  /**
   */

  dispatchStartEvent() {}
  
  /**
   * @param { !AcceleratorEvent } event
   */

  dispatchAcceleratorEvent(event) {}
}

/**
 * @implements { CrosWindowManagementStartObserverInterface }
 */
export class CrosWindowManagementStartObserverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CrosWindowManagementStartObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CrosWindowManagementStartObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CrosWindowManagementStartObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  dispatchStartEvent() {
    this.proxy.sendMessage(
        0,
        CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !AcceleratorEvent } event
   */

  dispatchAcceleratorEvent(
      event) {
    this.proxy.sendMessage(
        1,
        CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
        null,
        [
          event
        ]);
  }
}

/**
 * An object which receives request messages for the CrosWindowManagementStartObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CrosWindowManagementStartObserverReceiver {
  /**
   * @param {!CrosWindowManagementStartObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CrosWindowManagementStartObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CrosWindowManagementStartObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CrosWindowManagementStartObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
        null,
        impl.dispatchStartEvent.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
        null,
        impl.dispatchAcceleratorEvent.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CrosWindowManagementStartObserver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.CrosWindowManagementStartObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CrosWindowManagementStartObserverRemote}
   */
  static getRemote() {
    let remote = new CrosWindowManagementStartObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CrosWindowManagementStartObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CrosWindowManagementStartObserverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CrosWindowManagementStartObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CrosWindowManagementStartObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchStartEvent =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
        null,
        this.dispatchStartEvent.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.dispatchAcceleratorEvent =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
        null,
        this.dispatchAcceleratorEvent.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosScreenInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const AcceleratorEventSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagementFactory_Create_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_GetAllWindows_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_GetAllWindows_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_MoveTo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_MoveTo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_MoveBy_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_MoveBy_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_ResizeTo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_ResizeTo_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_ResizeBy_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_ResizeBy_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_SetFullscreen_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_SetFullscreen_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Maximize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Maximize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Minimize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Minimize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Focus_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Focus_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Close_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_Close_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_GetAllScreens_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagement_GetAllScreens_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    CrosWindowInfoSpec.$,
    'CrosWindowInfo',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'appId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'bounds', 16,
        0,
        gfx_mojom_RectSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'title', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'windowState', 32,
        0,
        WindowStateSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isFocused', 36,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'visibilityState', 40,
        0,
        VisibilityStateSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 56],]);



/**
 * @record
 */
export class CrosWindowInfo {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !string } */
    this.appId;
    /** @type { !gfx_mojom_Rect } */
    this.bounds;
    /** @type { !string } */
    this.title;
    /** @type { !WindowState } */
    this.windowState;
    /** @type { !boolean } */
    this.isFocused;
    /** @type { !VisibilityState } */
    this.visibilityState;
  }
}



mojo.internal.Struct(
    CrosScreenInfoSpec.$,
    'CrosScreenInfo',
    [
      mojo.internal.StructField(
        'workArea', 0,
        0,
        gfx_mojom_RectSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'bounds', 8,
        0,
        gfx_mojom_RectSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isPrimary', 16,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class CrosScreenInfo {
  constructor() {
    /** @type { !gfx_mojom_Rect } */
    this.workArea;
    /** @type { !gfx_mojom_Rect } */
    this.bounds;
    /** @type { !boolean } */
    this.isPrimary;
  }
}


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const AcceleratorEvent_TypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const AcceleratorEvent_Type = {
  
  kDown: 0,
  kUp: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    AcceleratorEventSpec.$,
    'AcceleratorEvent',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        AcceleratorEvent_TypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'acceleratorName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'repeat', 4,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class AcceleratorEvent {
  constructor() {
    /** @type { !AcceleratorEvent_Type } */
    this.type;
    /** @type { !boolean } */
    this.repeat;
    /** @type { !string } */
    this.acceleratorName;
  }
}



mojo.internal.Struct(
    CrosWindowManagementFactory_Create_ParamsSpec.$,
    'CrosWindowManagementFactory_Create_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.AssociatedInterfaceRequest(CrosWindowManagementPendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'observerRemote', 4,
        0,
        mojo.internal.AssociatedInterfaceProxy(CrosWindowManagementStartObserverRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CrosWindowManagementFactory_Create_Params {
  constructor() {
    /** @type { !Object } */
    this.receiver;
    /** @type { !Object } */
    this.observerRemote;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_GetAllWindows_ParamsSpec.$,
    'CrosWindowManagement_GetAllWindows_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class CrosWindowManagement_GetAllWindows_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    CrosWindowManagement_GetAllWindows_ResponseParamsSpec.$,
    'CrosWindowManagement_GetAllWindows_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Array(CrosWindowInfoSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_GetAllWindows_ResponseParams {
  constructor() {
    /** @type { !Array<!CrosWindowInfo> } */
    this.result;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_MoveTo_ParamsSpec.$,
    'CrosWindowManagement_MoveTo_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'x', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'y', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CrosWindowManagement_MoveTo_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !number } */
    this.x;
    /** @type { !number } */
    this.y;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_MoveTo_ResponseParamsSpec.$,
    'CrosWindowManagement_MoveTo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_MoveTo_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_MoveBy_ParamsSpec.$,
    'CrosWindowManagement_MoveBy_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'deltaX', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'deltaY', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CrosWindowManagement_MoveBy_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !number } */
    this.deltaX;
    /** @type { !number } */
    this.deltaY;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_MoveBy_ResponseParamsSpec.$,
    'CrosWindowManagement_MoveBy_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_MoveBy_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_ResizeTo_ParamsSpec.$,
    'CrosWindowManagement_ResizeTo_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'width', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'height', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CrosWindowManagement_ResizeTo_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !number } */
    this.width;
    /** @type { !number } */
    this.height;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_ResizeTo_ResponseParamsSpec.$,
    'CrosWindowManagement_ResizeTo_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_ResizeTo_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_ResizeBy_ParamsSpec.$,
    'CrosWindowManagement_ResizeBy_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'deltaWidth', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'deltaHeight', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CrosWindowManagement_ResizeBy_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !number } */
    this.deltaWidth;
    /** @type { !number } */
    this.deltaHeight;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_ResizeBy_ResponseParamsSpec.$,
    'CrosWindowManagement_ResizeBy_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_ResizeBy_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_SetFullscreen_ParamsSpec.$,
    'CrosWindowManagement_SetFullscreen_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fullscreen', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class CrosWindowManagement_SetFullscreen_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !boolean } */
    this.fullscreen;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_SetFullscreen_ResponseParamsSpec.$,
    'CrosWindowManagement_SetFullscreen_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_SetFullscreen_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Maximize_ParamsSpec.$,
    'CrosWindowManagement_Maximize_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Maximize_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Maximize_ResponseParamsSpec.$,
    'CrosWindowManagement_Maximize_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Maximize_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Minimize_ParamsSpec.$,
    'CrosWindowManagement_Minimize_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Minimize_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Minimize_ResponseParamsSpec.$,
    'CrosWindowManagement_Minimize_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Minimize_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Focus_ParamsSpec.$,
    'CrosWindowManagement_Focus_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Focus_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Focus_ResponseParamsSpec.$,
    'CrosWindowManagement_Focus_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Focus_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Close_ParamsSpec.$,
    'CrosWindowManagement_Close_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Close_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_Close_ResponseParamsSpec.$,
    'CrosWindowManagement_Close_ResponseParams',
    [
      mojo.internal.StructField(
        'value', 0,
        0,
        CrosWindowManagementStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_Close_ResponseParams {
  constructor() {
    /** @type { !CrosWindowManagementStatus } */
    this.value;
  }
}



mojo.internal.Struct(
    CrosWindowManagement_GetAllScreens_ParamsSpec.$,
    'CrosWindowManagement_GetAllScreens_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class CrosWindowManagement_GetAllScreens_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    CrosWindowManagement_GetAllScreens_ResponseParamsSpec.$,
    'CrosWindowManagement_GetAllScreens_ResponseParams',
    [
      mojo.internal.StructField(
        'screens', 0,
        0,
        mojo.internal.Array(CrosScreenInfoSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagement_GetAllScreens_ResponseParams {
  constructor() {
    /** @type { !Array<!CrosScreenInfo> } */
    this.screens;
  }
}



mojo.internal.Struct(
    CrosWindowManagementStartObserver_DispatchStartEvent_ParamsSpec.$,
    'CrosWindowManagementStartObserver_DispatchStartEvent_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class CrosWindowManagementStartObserver_DispatchStartEvent_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    CrosWindowManagementStartObserver_DispatchAcceleratorEvent_ParamsSpec.$,
    'CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params',
    [
      mojo.internal.StructField(
        'event', 0,
        0,
        AcceleratorEventSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CrosWindowManagementStartObserver_DispatchAcceleratorEvent_Params {
  constructor() {
    /** @type { !AcceleratorEvent } */
    this.event;
  }
}

