// third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var hid$ =
      mojo.internal.exposeNamespace('device.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'services/device/public/mojom/hid.mojom', '../../../../../../../services/device/public/mojom/hid.mojom.js');
  }
  var hid1$ =
      mojo.internal.exposeNamespace('blink.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'third_party/blink/public/mojom/hid/hid.mojom', '../../../hid/hid.mojom.js');
  }



  function CrosHID_AccessDevices_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosHID_AccessDevices_Params.prototype.initDefaults_ = function() {
    this.filters = null;
  };
  CrosHID_AccessDevices_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosHID_AccessDevices_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosHID_AccessDevices_Params.filters
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(hid1$.HidDeviceFilter), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosHID_AccessDevices_Params.encodedSize = codec.kStructHeaderSize + 8;

  CrosHID_AccessDevices_Params.decode = function(decoder) {
    var packed;
    var val = new CrosHID_AccessDevices_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.filters =
        decoder.decodeArrayPointer(new codec.PointerTo(hid1$.HidDeviceFilter));
    return val;
  };

  CrosHID_AccessDevices_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosHID_AccessDevices_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(hid1$.HidDeviceFilter), val.filters);
  };
  function CrosHID_AccessDevices_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosHID_AccessDevices_ResponseParams.prototype.initDefaults_ = function() {
    this.devices = null;
  };
  CrosHID_AccessDevices_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosHID_AccessDevices_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosHID_AccessDevices_ResponseParams.devices
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(hid$.HidDeviceInfo), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosHID_AccessDevices_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosHID_AccessDevices_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosHID_AccessDevices_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.devices =
        decoder.decodeArrayPointer(new codec.PointerTo(hid$.HidDeviceInfo));
    return val;
  };

  CrosHID_AccessDevices_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosHID_AccessDevices_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(hid$.HidDeviceInfo), val.devices);
  };
  function CrosHID_Connect_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosHID_Connect_Params.prototype.initDefaults_ = function() {
    this.deviceGuid = null;
    this.client = new hid$.HidConnectionClientPtr();
  };
  CrosHID_Connect_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosHID_Connect_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosHID_Connect_Params.deviceGuid
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 0, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosHID_Connect_Params.client
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 8, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosHID_Connect_Params.encodedSize = codec.kStructHeaderSize + 16;

  CrosHID_Connect_Params.decode = function(decoder) {
    var packed;
    var val = new CrosHID_Connect_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.deviceGuid =
        decoder.decodeStruct(codec.String);
    val.client =
        decoder.decodeStruct(new codec.Interface(hid$.HidConnectionClientPtr));
    return val;
  };

  CrosHID_Connect_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosHID_Connect_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.String, val.deviceGuid);
    encoder.encodeStruct(new codec.Interface(hid$.HidConnectionClientPtr), val.client);
  };
  function CrosHID_Connect_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  CrosHID_Connect_ResponseParams.prototype.initDefaults_ = function() {
    this.connection = new hid$.HidConnectionPtr();
  };
  CrosHID_Connect_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  CrosHID_Connect_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate CrosHID_Connect_ResponseParams.connection
    err = messageValidator.validateInterface(offset + codec.kStructHeaderSize + 0, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  CrosHID_Connect_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  CrosHID_Connect_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new CrosHID_Connect_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.connection =
        decoder.decodeStruct(new codec.NullableInterface(hid$.HidConnectionPtr));
    return val;
  };

  CrosHID_Connect_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(CrosHID_Connect_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(new codec.NullableInterface(hid$.HidConnectionPtr), val.connection);
  };
  var kCrosHID_AccessDevices_Name = 0;
  var kCrosHID_Connect_Name = 1;

  function CrosHIDPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(CrosHID,
                                                   handleOrPtrInfo);
  }

  function CrosHIDAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        CrosHID, associatedInterfacePtrInfo);
  }

  CrosHIDAssociatedPtr.prototype =
      Object.create(CrosHIDPtr.prototype);
  CrosHIDAssociatedPtr.prototype.constructor =
      CrosHIDAssociatedPtr;

  function CrosHIDProxy(receiver) {
    this.receiver_ = receiver;
  }
  CrosHIDPtr.prototype.accessDevices = function() {
    return CrosHIDProxy.prototype.accessDevices
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosHIDProxy.prototype.accessDevices = function(filters) {
    var params_ = new CrosHID_AccessDevices_Params();
    params_.filters = filters;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosHID_AccessDevices_Name,
          codec.align(CrosHID_AccessDevices_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosHID_AccessDevices_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosHID_AccessDevices_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  CrosHIDPtr.prototype.connect = function() {
    return CrosHIDProxy.prototype.connect
        .apply(this.ptr.getProxy(), arguments);
  };

  CrosHIDProxy.prototype.connect = function(deviceGuid, client) {
    var params_ = new CrosHID_Connect_Params();
    params_.deviceGuid = deviceGuid;
    params_.client = client;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kCrosHID_Connect_Name,
          codec.align(CrosHID_Connect_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(CrosHID_Connect_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(CrosHID_Connect_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function CrosHIDStub(delegate) {
    this.delegate_ = delegate;
  }
  CrosHIDStub.prototype.accessDevices = function(filters) {
    return this.delegate_ && this.delegate_.accessDevices && this.delegate_.accessDevices(filters);
  }
  CrosHIDStub.prototype.connect = function(deviceGuid, client) {
    return this.delegate_ && this.delegate_.connect && this.delegate_.connect(deviceGuid, client);
  }

  CrosHIDStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  CrosHIDStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kCrosHID_AccessDevices_Name:
      var params = reader.decodeStruct(CrosHID_AccessDevices_Params);
      this.accessDevices(params.filters).then(function(response) {
        var responseParams =
            new CrosHID_AccessDevices_ResponseParams();
        responseParams.devices = response.devices;
        var builder = new codec.MessageV1Builder(
            kCrosHID_AccessDevices_Name,
            codec.align(CrosHID_AccessDevices_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosHID_AccessDevices_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kCrosHID_Connect_Name:
      var params = reader.decodeStruct(CrosHID_Connect_Params);
      this.connect(params.deviceGuid, params.client).then(function(response) {
        var responseParams =
            new CrosHID_Connect_ResponseParams();
        responseParams.connection = response.connection;
        var builder = new codec.MessageV1Builder(
            kCrosHID_Connect_Name,
            codec.align(CrosHID_Connect_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(CrosHID_Connect_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateCrosHIDRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kCrosHID_AccessDevices_Name:
        if (message.expectsResponse())
          paramsClass = CrosHID_AccessDevices_Params;
      break;
      case kCrosHID_Connect_Name:
        if (message.expectsResponse())
          paramsClass = CrosHID_Connect_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateCrosHIDResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kCrosHID_AccessDevices_Name:
        if (message.isResponse())
          paramsClass = CrosHID_AccessDevices_ResponseParams;
        break;
      case kCrosHID_Connect_Name:
        if (message.isResponse())
          paramsClass = CrosHID_Connect_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var CrosHID = {
    name: 'blink.mojom.CrosHID',
    kVersion: 0,
    ptrClass: CrosHIDPtr,
    proxyClass: CrosHIDProxy,
    stubClass: CrosHIDStub,
    validateRequest: validateCrosHIDRequest,
    validateResponse: validateCrosHIDResponse,
  };
  CrosHIDStub.prototype.validator = validateCrosHIDRequest;
  CrosHIDProxy.prototype.validator = validateCrosHIDResponse;
  exports.CrosHID = CrosHID;
  exports.CrosHIDPtr = CrosHIDPtr;
  exports.CrosHIDAssociatedPtr = CrosHIDAssociatedPtr;
})();