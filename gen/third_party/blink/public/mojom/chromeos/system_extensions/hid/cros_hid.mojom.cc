// third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom-params-data.h"
#include "third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom-import-headers.h"
#include "third_party/blink/public/mojom/chromeos/system_extensions/hid/cros_hid.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_HID_CROS_HID_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHROMEOS_SYSTEM_EXTENSIONS_HID_CROS_HID_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
const char CrosHID::Name_[] = "blink.mojom.CrosHID";

CrosHID::IPCStableHashFunction CrosHID::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCrosHID_AccessDevices_Name: {
      return &CrosHID::AccessDevices_Sym::IPCStableHash;
    }
    case internal::kCrosHID_Connect_Name: {
      return &CrosHID::Connect_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CrosHID::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCrosHID_AccessDevices_Name:
            return "Receive blink::mojom::CrosHID::AccessDevices";
      case internal::kCrosHID_Connect_Name:
            return "Receive blink::mojom::CrosHID::Connect";
    }
  } else {
    switch (message.name()) {
      case internal::kCrosHID_AccessDevices_Name:
            return "Receive reply blink::mojom::CrosHID::AccessDevices";
      case internal::kCrosHID_Connect_Name:
            return "Receive reply blink::mojom::CrosHID::Connect";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CrosHID::AccessDevices_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosHID::AccessDevices");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CrosHID::Connect_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CrosHID::Connect");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class CrosHID_AccessDevices_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosHID_AccessDevices_ForwardToCallback(
      CrosHID::AccessDevicesCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosHID_AccessDevices_ForwardToCallback(const CrosHID_AccessDevices_ForwardToCallback&) = delete;
  CrosHID_AccessDevices_ForwardToCallback& operator=(const CrosHID_AccessDevices_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosHID::AccessDevicesCallback callback_;
};

class CrosHID_Connect_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CrosHID_Connect_ForwardToCallback(
      CrosHID::ConnectCallback callback
      ) : callback_(std::move(callback)) {
  }

  CrosHID_Connect_ForwardToCallback(const CrosHID_Connect_ForwardToCallback&) = delete;
  CrosHID_Connect_ForwardToCallback& operator=(const CrosHID_Connect_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CrosHID::ConnectCallback callback_;
};

CrosHIDProxy::CrosHIDProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CrosHIDProxy::AccessDevices(
    std::vector<::blink::mojom::HidDeviceFilterPtr> in_filters, AccessDevicesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosHID::AccessDevices", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("filters"), in_filters,
                        "<value of type std::vector<::blink::mojom::HidDeviceFilterPtr>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosHID_AccessDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosHID_AccessDevices_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->filters)::BaseType>
      filters_fragment(params.message());
  const mojo::internal::ContainerValidateParams filters_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::HidDeviceFilterDataView>>(
      in_filters, filters_fragment, &filters_validate_params);
  params->filters.Set(
      filters_fragment.is_null() ? nullptr : filters_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->filters.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null filters in CrosHID.AccessDevices request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosHID::Name_);
  message.set_method_name("AccessDevices");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosHID_AccessDevices_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CrosHIDProxy::Connect(
    const std::string& in_device_guid, ::mojo::PendingRemote<::device::mojom::HidConnectionClient> in_client, ConnectCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CrosHID::Connect", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_guid"), in_device_guid,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingRemote<::device::mojom::HidConnectionClient>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosHID_Connect_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosHID_Connect_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_guid)::BaseType> device_guid_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_device_guid, device_guid_fragment);
  params->device_guid.Set(
      device_guid_fragment.is_null() ? nullptr : device_guid_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_guid.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_guid in CrosHID.Connect request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::HidConnectionClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in CrosHID.Connect request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosHID::Name_);
  message.set_method_name("Connect");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CrosHID_Connect_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class CrosHID_AccessDevices_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosHID::AccessDevicesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosHID_AccessDevices_ProxyToResponder> proxy(
        new CrosHID_AccessDevices_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosHID_AccessDevices_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosHID_AccessDevices_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosHID_AccessDevices_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosHID::AccessDevicesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<::device::mojom::HidDeviceInfoPtr> in_devices);
};

bool CrosHID_AccessDevices_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosHID_AccessDevices_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosHID_AccessDevices_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<::device::mojom::HidDeviceInfoPtr> p_devices{};
  CrosHID_AccessDevices_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDevices(&p_devices))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosHID::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_devices));
  return true;
}

void CrosHID_AccessDevices_ProxyToResponder::Run(
    std::vector<::device::mojom::HidDeviceInfoPtr> in_devices) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosHID::AccessDevices", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("devices"), in_devices,
                        "<value of type std::vector<::device::mojom::HidDeviceInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosHID_AccessDevices_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosHID_AccessDevices_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->devices)::BaseType>
      devices_fragment(params.message());
  const mojo::internal::ContainerValidateParams devices_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::device::mojom::HidDeviceInfoDataView>>(
      in_devices, devices_fragment, &devices_validate_params);
  params->devices.Set(
      devices_fragment.is_null() ? nullptr : devices_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->devices.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null devices in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosHID::Name_);
  message.set_method_name("AccessDevices");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class CrosHID_Connect_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CrosHID::ConnectCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CrosHID_Connect_ProxyToResponder> proxy(
        new CrosHID_Connect_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CrosHID_Connect_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CrosHID_Connect_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CrosHID_Connect_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CrosHID::ConnectCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingRemote<::device::mojom::HidConnection> in_connection);
};

bool CrosHID_Connect_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CrosHID_Connect_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CrosHID_Connect_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::PendingRemote<::device::mojom::HidConnection> p_connection{};
  CrosHID_Connect_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_connection =
        input_data_view.TakeConnection<decltype(p_connection)>();
  }
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CrosHID::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_connection));
  return true;
}

void CrosHID_Connect_ProxyToResponder::Run(
    ::mojo::PendingRemote<::device::mojom::HidConnection> in_connection) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CrosHID::Connect", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("connection"), in_connection,
                        "<value of type ::mojo::PendingRemote<::device::mojom::HidConnection>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCrosHID_Connect_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CrosHID_Connect_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::device::mojom::HidConnectionInterfaceBase>>(
      in_connection, &params->connection, &params.message());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CrosHID::Name_);
  message.set_method_name("Connect");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool CrosHIDStubDispatch::Accept(
    CrosHID* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCrosHID_AccessDevices_Name: {
      break;
    }
    case internal::kCrosHID_Connect_Name: {
      break;
    }
  }
  return false;
}

// static
bool CrosHIDStubDispatch::AcceptWithResponder(
    CrosHID* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCrosHID_AccessDevices_Name: {

      internal::CrosHID_AccessDevices_Params_Data* params =
          reinterpret_cast<
              internal::CrosHID_AccessDevices_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::vector<::blink::mojom::HidDeviceFilterPtr> p_filters{};
      CrosHID_AccessDevices_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadFilters(&p_filters))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosHID::Name_, 0, false);
        return false;
      }
      CrosHID::AccessDevicesCallback callback =
          CrosHID_AccessDevices_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AccessDevices(
std::move(p_filters), std::move(callback));
      return true;
    }
    case internal::kCrosHID_Connect_Name: {

      internal::CrosHID_Connect_Params_Data* params =
          reinterpret_cast<
              internal::CrosHID_Connect_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_device_guid{};
      ::mojo::PendingRemote<::device::mojom::HidConnectionClient> p_client{};
      CrosHID_Connect_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceGuid(&p_device_guid))
        success = false;
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CrosHID::Name_, 1, false);
        return false;
      }
      CrosHID::ConnectCallback callback =
          CrosHID_Connect_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Connect(
std::move(p_device_guid), 
std::move(p_client), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCrosHIDValidationInfo[] = {
    {&internal::CrosHID_AccessDevices_Params_Data::Validate,
     &internal::CrosHID_AccessDevices_ResponseParams_Data::Validate},
    {&internal::CrosHID_Connect_Params_Data::Validate,
     &internal::CrosHID_Connect_ResponseParams_Data::Validate},
};

bool CrosHIDRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::CrosHID::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCrosHIDValidationInfo);
}

bool CrosHIDResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::CrosHID::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kCrosHIDValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void CrosHIDInterceptorForTesting::AccessDevices(std::vector<::blink::mojom::HidDeviceFilterPtr> filters, AccessDevicesCallback callback) {
  GetForwardingInterface()->AccessDevices(std::move(filters), std::move(callback));
}
void CrosHIDInterceptorForTesting::Connect(const std::string& device_guid, ::mojo::PendingRemote<::device::mojom::HidConnectionClient> client, ConnectCallback callback) {
  GetForwardingInterface()->Connect(std::move(device_guid), std::move(client), std::move(callback));
}
CrosHIDAsyncWaiter::CrosHIDAsyncWaiter(
    CrosHID* proxy) : proxy_(proxy) {}

CrosHIDAsyncWaiter::~CrosHIDAsyncWaiter() = default;

void CrosHIDAsyncWaiter::AccessDevices(
    std::vector<::blink::mojom::HidDeviceFilterPtr> filters, std::vector<::device::mojom::HidDeviceInfoPtr>* out_devices) {
  base::RunLoop loop;
  proxy_->AccessDevices(std::move(filters),
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::device::mojom::HidDeviceInfoPtr>* out_devices
,
             std::vector<::device::mojom::HidDeviceInfoPtr> devices) {*out_devices = std::move(devices);
            loop->Quit();
          },
          &loop,
          out_devices));
  loop.Run();
}
void CrosHIDAsyncWaiter::Connect(
    const std::string& device_guid, ::mojo::PendingRemote<::device::mojom::HidConnectionClient> client, ::mojo::PendingRemote<::device::mojom::HidConnection>* out_connection) {
  base::RunLoop loop;
  proxy_->Connect(std::move(device_guid),std::move(client),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::PendingRemote<::device::mojom::HidConnection>* out_connection
,
             ::mojo::PendingRemote<::device::mojom::HidConnection> connection) {*out_connection = std::move(connection);
            loop->Quit();
          },
          &loop,
          out_connection));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif