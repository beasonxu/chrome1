// third_party/blink/public/mojom/webid/federated_auth_request.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/webid/federated_auth_request.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var url$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/url.mojom', '../../../../../url/mojom/url.mojom.js');
  }


  var RequestTokenStatus = {};
  RequestTokenStatus.kSuccess = 0;
  RequestTokenStatus.kApprovalDeclined = 1;
  RequestTokenStatus.kErrorTooManyRequests = 2;
  RequestTokenStatus.kErrorCanceled = 3;
  RequestTokenStatus.kError = 4;
  RequestTokenStatus.MIN_VALUE = 0;
  RequestTokenStatus.MAX_VALUE = 4;

  RequestTokenStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    }
    return false;
  };

  RequestTokenStatus.toKnownEnumValue = function(value) {
    return value;
  };

  RequestTokenStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };
  var LogoutRpsStatus = {};
  LogoutRpsStatus.kSuccess = 0;
  LogoutRpsStatus.kErrorTooManyRequests = 1;
  LogoutRpsStatus.kError = 2;
  LogoutRpsStatus.MIN_VALUE = 0;
  LogoutRpsStatus.MAX_VALUE = 2;

  LogoutRpsStatus.isKnownEnumValue = function(value) {
    switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    }
    return false;
  };

  LogoutRpsStatus.toKnownEnumValue = function(value) {
    return value;
  };

  LogoutRpsStatus.validate = function(enumValue) {
    const isExtensible = false;
    if (isExtensible || this.isKnownEnumValue(enumValue))
      return validator.validationError.NONE;

    return validator.validationError.UNKNOWN_ENUM_VALUE;
  };

  function LogoutRpsRequest(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  LogoutRpsRequest.prototype.initDefaults_ = function() {
    this.url = null;
    this.accountId = null;
  };
  LogoutRpsRequest.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  LogoutRpsRequest.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LogoutRpsRequest.url
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate LogoutRpsRequest.accountId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  LogoutRpsRequest.encodedSize = codec.kStructHeaderSize + 16;

  LogoutRpsRequest.decode = function(decoder) {
    var packed;
    var val = new LogoutRpsRequest();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.url =
        decoder.decodeStructPointer(url$.Url);
    val.accountId =
        decoder.decodeStruct(codec.String);
    return val;
  };

  LogoutRpsRequest.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(LogoutRpsRequest.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.url);
    encoder.encodeStruct(codec.String, val.accountId);
  };
  function IdentityProvider(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  IdentityProvider.prototype.initDefaults_ = function() {
    this.configUrl = null;
    this.clientId = null;
    this.nonce = null;
  };
  IdentityProvider.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  IdentityProvider.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 32}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdentityProvider.configUrl
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, url$.Url, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdentityProvider.clientId
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, false)
    if (err !== validator.validationError.NONE)
        return err;


    // validate IdentityProvider.nonce
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 16, false)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  IdentityProvider.encodedSize = codec.kStructHeaderSize + 24;

  IdentityProvider.decode = function(decoder) {
    var packed;
    var val = new IdentityProvider();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.configUrl =
        decoder.decodeStructPointer(url$.Url);
    val.clientId =
        decoder.decodeStruct(codec.String);
    val.nonce =
        decoder.decodeStruct(codec.String);
    return val;
  };

  IdentityProvider.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(IdentityProvider.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(url$.Url, val.configUrl);
    encoder.encodeStruct(codec.String, val.clientId);
    encoder.encodeStruct(codec.String, val.nonce);
  };
  function FederatedAuthRequest_RequestToken_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequest_RequestToken_Params.prototype.initDefaults_ = function() {
    this.identityProviderPtr = null;
    this.preferAutoSignIn = false;
  };
  FederatedAuthRequest_RequestToken_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequest_RequestToken_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequest_RequestToken_Params.identityProviderPtr
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, IdentityProvider, false);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  FederatedAuthRequest_RequestToken_Params.encodedSize = codec.kStructHeaderSize + 16;

  FederatedAuthRequest_RequestToken_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequest_RequestToken_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.identityProviderPtr =
        decoder.decodeStructPointer(IdentityProvider);
    packed = decoder.readUint8();
    val.preferAutoSignIn = (packed >> 0) & 1 ? true : false;
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FederatedAuthRequest_RequestToken_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequest_RequestToken_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(IdentityProvider, val.identityProviderPtr);
    packed = 0;
    packed |= (val.preferAutoSignIn & 1) << 0
    encoder.writeUint8(packed);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  function FederatedAuthRequest_RequestToken_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequest_RequestToken_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
    this.token = null;
  };
  FederatedAuthRequest_RequestToken_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequest_RequestToken_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 24}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequest_RequestToken_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, RequestTokenStatus);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequest_RequestToken_ResponseParams.token
    err = messageValidator.validateStringPointer(offset + codec.kStructHeaderSize + 8, true)
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequest_RequestToken_ResponseParams.encodedSize = codec.kStructHeaderSize + 16;

  FederatedAuthRequest_RequestToken_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequest_RequestToken_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(RequestTokenStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    val.token =
        decoder.decodeStruct(codec.NullableString);
    return val;
  };

  FederatedAuthRequest_RequestToken_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequest_RequestToken_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.encodeStruct(codec.NullableString, val.token);
  };
  function FederatedAuthRequest_CancelTokenRequest_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequest_CancelTokenRequest_Params.prototype.initDefaults_ = function() {
  };
  FederatedAuthRequest_CancelTokenRequest_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequest_CancelTokenRequest_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 8}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequest_CancelTokenRequest_Params.encodedSize = codec.kStructHeaderSize + 0;

  FederatedAuthRequest_CancelTokenRequest_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequest_CancelTokenRequest_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    return val;
  };

  FederatedAuthRequest_CancelTokenRequest_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequest_CancelTokenRequest_Params.encodedSize);
    encoder.writeUint32(0);
  };
  function FederatedAuthRequest_LogoutRps_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequest_LogoutRps_Params.prototype.initDefaults_ = function() {
    this.rpLogoutRequests = null;
  };
  FederatedAuthRequest_LogoutRps_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequest_LogoutRps_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequest_LogoutRps_Params.rpLogoutRequests
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 0, 8, new codec.PointerTo(LogoutRpsRequest), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequest_LogoutRps_Params.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequest_LogoutRps_Params.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequest_LogoutRps_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.rpLogoutRequests =
        decoder.decodeArrayPointer(new codec.PointerTo(LogoutRpsRequest));
    return val;
  };

  FederatedAuthRequest_LogoutRps_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequest_LogoutRps_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeArrayPointer(new codec.PointerTo(LogoutRpsRequest), val.rpLogoutRequests);
  };
  function FederatedAuthRequest_LogoutRps_ResponseParams(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  FederatedAuthRequest_LogoutRps_ResponseParams.prototype.initDefaults_ = function() {
    this.status = 0;
  };
  FederatedAuthRequest_LogoutRps_ResponseParams.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  FederatedAuthRequest_LogoutRps_ResponseParams.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate FederatedAuthRequest_LogoutRps_ResponseParams.status
    err = messageValidator.validateEnum(offset + codec.kStructHeaderSize + 0, LogoutRpsStatus);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  FederatedAuthRequest_LogoutRps_ResponseParams.encodedSize = codec.kStructHeaderSize + 8;

  FederatedAuthRequest_LogoutRps_ResponseParams.decode = function(decoder) {
    var packed;
    var val = new FederatedAuthRequest_LogoutRps_ResponseParams();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.status =
        decoder.decodeStruct(new codec.Enum(LogoutRpsStatus));
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    decoder.skip(1);
    return val;
  };

  FederatedAuthRequest_LogoutRps_ResponseParams.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(FederatedAuthRequest_LogoutRps_ResponseParams.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Int32, val.status);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
    encoder.skip(1);
  };
  var kFederatedAuthRequest_RequestToken_Name = 0;
  var kFederatedAuthRequest_CancelTokenRequest_Name = 1;
  var kFederatedAuthRequest_LogoutRps_Name = 2;

  function FederatedAuthRequestPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(FederatedAuthRequest,
                                                   handleOrPtrInfo);
  }

  function FederatedAuthRequestAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        FederatedAuthRequest, associatedInterfacePtrInfo);
  }

  FederatedAuthRequestAssociatedPtr.prototype =
      Object.create(FederatedAuthRequestPtr.prototype);
  FederatedAuthRequestAssociatedPtr.prototype.constructor =
      FederatedAuthRequestAssociatedPtr;

  function FederatedAuthRequestProxy(receiver) {
    this.receiver_ = receiver;
  }
  FederatedAuthRequestPtr.prototype.requestToken = function() {
    return FederatedAuthRequestProxy.prototype.requestToken
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestProxy.prototype.requestToken = function(identityProviderPtr, preferAutoSignIn) {
    var params_ = new FederatedAuthRequest_RequestToken_Params();
    params_.identityProviderPtr = identityProviderPtr;
    params_.preferAutoSignIn = preferAutoSignIn;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequest_RequestToken_Name,
          codec.align(FederatedAuthRequest_RequestToken_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequest_RequestToken_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequest_RequestToken_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };
  FederatedAuthRequestPtr.prototype.cancelTokenRequest = function() {
    return FederatedAuthRequestProxy.prototype.cancelTokenRequest
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestProxy.prototype.cancelTokenRequest = function() {
    var params_ = new FederatedAuthRequest_CancelTokenRequest_Params();
    var builder = new codec.MessageV0Builder(
        kFederatedAuthRequest_CancelTokenRequest_Name,
        codec.align(FederatedAuthRequest_CancelTokenRequest_Params.encodedSize));
    builder.encodeStruct(FederatedAuthRequest_CancelTokenRequest_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  FederatedAuthRequestPtr.prototype.logoutRps = function() {
    return FederatedAuthRequestProxy.prototype.logoutRps
        .apply(this.ptr.getProxy(), arguments);
  };

  FederatedAuthRequestProxy.prototype.logoutRps = function(rpLogoutRequests) {
    var params_ = new FederatedAuthRequest_LogoutRps_Params();
    params_.rpLogoutRequests = rpLogoutRequests;
    return new Promise(function(resolve, reject) {
      var builder = new codec.MessageV1Builder(
          kFederatedAuthRequest_LogoutRps_Name,
          codec.align(FederatedAuthRequest_LogoutRps_Params.encodedSize),
          codec.kMessageExpectsResponse, 0);
      builder.encodeStruct(FederatedAuthRequest_LogoutRps_Params, params_);
      var message = builder.finish();
      this.receiver_.acceptAndExpectResponse(message).then(function(message) {
        var reader = new codec.MessageReader(message);
        var responseParams =
            reader.decodeStruct(FederatedAuthRequest_LogoutRps_ResponseParams);
        resolve(responseParams);
      }).catch(function(result) {
        reject(Error("Connection error: " + result));
      });
    }.bind(this));
  };

  function FederatedAuthRequestStub(delegate) {
    this.delegate_ = delegate;
  }
  FederatedAuthRequestStub.prototype.requestToken = function(identityProviderPtr, preferAutoSignIn) {
    return this.delegate_ && this.delegate_.requestToken && this.delegate_.requestToken(identityProviderPtr, preferAutoSignIn);
  }
  FederatedAuthRequestStub.prototype.cancelTokenRequest = function() {
    return this.delegate_ && this.delegate_.cancelTokenRequest && this.delegate_.cancelTokenRequest();
  }
  FederatedAuthRequestStub.prototype.logoutRps = function(rpLogoutRequests) {
    return this.delegate_ && this.delegate_.logoutRps && this.delegate_.logoutRps(rpLogoutRequests);
  }

  FederatedAuthRequestStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFederatedAuthRequest_CancelTokenRequest_Name:
      var params = reader.decodeStruct(FederatedAuthRequest_CancelTokenRequest_Params);
      this.cancelTokenRequest();
      return true;
    default:
      return false;
    }
  };

  FederatedAuthRequestStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kFederatedAuthRequest_RequestToken_Name:
      var params = reader.decodeStruct(FederatedAuthRequest_RequestToken_Params);
      this.requestToken(params.identityProviderPtr, params.preferAutoSignIn).then(function(response) {
        var responseParams =
            new FederatedAuthRequest_RequestToken_ResponseParams();
        responseParams.status = response.status;
        responseParams.token = response.token;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequest_RequestToken_Name,
            codec.align(FederatedAuthRequest_RequestToken_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequest_RequestToken_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    case kFederatedAuthRequest_LogoutRps_Name:
      var params = reader.decodeStruct(FederatedAuthRequest_LogoutRps_Params);
      this.logoutRps(params.rpLogoutRequests).then(function(response) {
        var responseParams =
            new FederatedAuthRequest_LogoutRps_ResponseParams();
        responseParams.status = response.status;
        var builder = new codec.MessageV1Builder(
            kFederatedAuthRequest_LogoutRps_Name,
            codec.align(FederatedAuthRequest_LogoutRps_ResponseParams.encodedSize),
            codec.kMessageIsResponse, reader.requestID);
        builder.encodeStruct(FederatedAuthRequest_LogoutRps_ResponseParams,
                             responseParams);
        var message = builder.finish();
        responder.accept(message);
      });
      return true;
    default:
      return false;
    }
  };

  function validateFederatedAuthRequestRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kFederatedAuthRequest_RequestToken_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequest_RequestToken_Params;
      break;
      case kFederatedAuthRequest_CancelTokenRequest_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = FederatedAuthRequest_CancelTokenRequest_Params;
      break;
      case kFederatedAuthRequest_LogoutRps_Name:
        if (message.expectsResponse())
          paramsClass = FederatedAuthRequest_LogoutRps_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateFederatedAuthRequestResponse(messageValidator) {
   var message = messageValidator.message;
   var paramsClass = null;
   switch (message.getName()) {
      case kFederatedAuthRequest_RequestToken_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequest_RequestToken_ResponseParams;
        break;
      case kFederatedAuthRequest_LogoutRps_Name:
        if (message.isResponse())
          paramsClass = FederatedAuthRequest_LogoutRps_ResponseParams;
        break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  var FederatedAuthRequest = {
    name: 'blink.mojom.FederatedAuthRequest',
    kVersion: 0,
    ptrClass: FederatedAuthRequestPtr,
    proxyClass: FederatedAuthRequestProxy,
    stubClass: FederatedAuthRequestStub,
    validateRequest: validateFederatedAuthRequestRequest,
    validateResponse: validateFederatedAuthRequestResponse,
  };
  FederatedAuthRequestStub.prototype.validator = validateFederatedAuthRequestRequest;
  FederatedAuthRequestProxy.prototype.validator = validateFederatedAuthRequestResponse;
  exports.RequestTokenStatus = RequestTokenStatus;
  exports.LogoutRpsStatus = LogoutRpsStatus;
  exports.LogoutRpsRequest = LogoutRpsRequest;
  exports.IdentityProvider = IdentityProvider;
  exports.FederatedAuthRequest = FederatedAuthRequest;
  exports.FederatedAuthRequestPtr = FederatedAuthRequestPtr;
  exports.FederatedAuthRequestAssociatedPtr = FederatedAuthRequestAssociatedPtr;
})();