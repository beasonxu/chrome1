// third_party/blink/public/mojom/webid/federated_auth_request.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* RequestTokenStatusToStringHelper(RequestTokenStatus value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case RequestTokenStatus::kSuccess:
      return "kSuccess";
    case RequestTokenStatus::kApprovalDeclined:
      return "kApprovalDeclined";
    case RequestTokenStatus::kErrorTooManyRequests:
      return "kErrorTooManyRequests";
    case RequestTokenStatus::kErrorCanceled:
      return "kErrorCanceled";
    case RequestTokenStatus::kError:
      return "kError";
    default:
      return nullptr;
  }
}

std::string RequestTokenStatusToString(RequestTokenStatus value) {
  const char *str = RequestTokenStatusToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown RequestTokenStatus value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, RequestTokenStatus value) {
  return os << RequestTokenStatusToString(value);
}

static NOINLINE const char* LogoutRpsStatusToStringHelper(LogoutRpsStatus value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case LogoutRpsStatus::kSuccess:
      return "kSuccess";
    case LogoutRpsStatus::kErrorTooManyRequests:
      return "kErrorTooManyRequests";
    case LogoutRpsStatus::kError:
      return "kError";
    default:
      return nullptr;
  }
}

std::string LogoutRpsStatusToString(LogoutRpsStatus value) {
  const char *str = LogoutRpsStatusToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown LogoutRpsStatus value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, LogoutRpsStatus value) {
  return os << LogoutRpsStatusToString(value);
}

namespace internal {


// static
bool LogoutRpsRequest_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const LogoutRpsRequest_Data* object =
      static_cast<const LogoutRpsRequest_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->account_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams account_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->account_id, validation_context,
                                         &account_id_validate_params)) {
    return false;
  }

  return true;
}

LogoutRpsRequest_Data::LogoutRpsRequest_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool IdentityProvider_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const IdentityProvider_Data* object =
      static_cast<const IdentityProvider_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->config_url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->config_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->client_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams client_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->client_id, validation_context,
                                         &client_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->nonce, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams nonce_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->nonce, validation_context,
                                         &nonce_validate_params)) {
    return false;
  }

  return true;
}

IdentityProvider_Data::IdentityProvider_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FederatedAuthRequest_RequestToken_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FederatedAuthRequest_RequestToken_Params_Data* object =
      static_cast<const FederatedAuthRequest_RequestToken_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->identity_provider_ptr, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->identity_provider_ptr, validation_context))
    return false;

  return true;
}

FederatedAuthRequest_RequestToken_Params_Data::FederatedAuthRequest_RequestToken_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FederatedAuthRequest_RequestToken_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FederatedAuthRequest_RequestToken_ResponseParams_Data* object =
      static_cast<const FederatedAuthRequest_RequestToken_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::RequestTokenStatus_Data
        ::Validate(object->status, validation_context))
    return false;

  const mojo::internal::ContainerValidateParams token_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->token, validation_context,
                                         &token_validate_params)) {
    return false;
  }

  return true;
}

FederatedAuthRequest_RequestToken_ResponseParams_Data::FederatedAuthRequest_RequestToken_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FederatedAuthRequest_CancelTokenRequest_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FederatedAuthRequest_CancelTokenRequest_Params_Data* object =
      static_cast<const FederatedAuthRequest_CancelTokenRequest_Params_Data*>(data);

  return true;
}

FederatedAuthRequest_CancelTokenRequest_Params_Data::FederatedAuthRequest_CancelTokenRequest_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FederatedAuthRequest_LogoutRps_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FederatedAuthRequest_LogoutRps_Params_Data* object =
      static_cast<const FederatedAuthRequest_LogoutRps_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->rp_logout_requests, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams rp_logout_requests_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->rp_logout_requests, validation_context,
                                         &rp_logout_requests_validate_params)) {
    return false;
  }

  return true;
}

FederatedAuthRequest_LogoutRps_Params_Data::FederatedAuthRequest_LogoutRps_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool FederatedAuthRequest_LogoutRps_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const FederatedAuthRequest_LogoutRps_ResponseParams_Data* object =
      static_cast<const FederatedAuthRequest_LogoutRps_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::LogoutRpsStatus_Data
        ::Validate(object->status, validation_context))
    return false;

  return true;
}

FederatedAuthRequest_LogoutRps_ResponseParams_Data::FederatedAuthRequest_LogoutRps_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::RequestTokenStatus>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::RequestTokenStatus value) {
  return std::move(context).WriteString(::blink::mojom::RequestTokenStatusToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::LogoutRpsStatus>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::LogoutRpsStatus value) {
  return std::move(context).WriteString(::blink::mojom::LogoutRpsStatusToString(value));
}

} // namespace perfetto