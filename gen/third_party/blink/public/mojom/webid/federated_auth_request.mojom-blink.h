// third_party/blink/public/mojom/webid/federated_auth_request.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-shared.h"
#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-blink-forward.h"
#include "url/mojom/url.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace WTF {
struct blink_mojom_internal_RequestTokenStatus_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::RequestTokenStatus& value) {
    using utype = std::underlying_type<::blink::mojom::RequestTokenStatus>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::RequestTokenStatus& left, const ::blink::mojom::RequestTokenStatus& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::RequestTokenStatus>
    : public GenericHashTraits<::blink::mojom::RequestTokenStatus> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::RequestTokenStatus EmptyValue() { return static_cast<::blink::mojom::RequestTokenStatus>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::RequestTokenStatus& slot, bool) {
    slot = static_cast<::blink::mojom::RequestTokenStatus>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::RequestTokenStatus& value) {
    return value == static_cast<::blink::mojom::RequestTokenStatus>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct blink_mojom_internal_LogoutRpsStatus_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::LogoutRpsStatus& value) {
    using utype = std::underlying_type<::blink::mojom::LogoutRpsStatus>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::LogoutRpsStatus& left, const ::blink::mojom::LogoutRpsStatus& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::LogoutRpsStatus>
    : public GenericHashTraits<::blink::mojom::LogoutRpsStatus> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::LogoutRpsStatus EmptyValue() { return static_cast<::blink::mojom::LogoutRpsStatus>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::LogoutRpsStatus& slot, bool) {
    slot = static_cast<::blink::mojom::LogoutRpsStatus>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::LogoutRpsStatus& value) {
    return value == static_cast<::blink::mojom::LogoutRpsStatus>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class FederatedAuthRequestProxy;

template <typename ImplRefTraits>
class FederatedAuthRequestStub;

class FederatedAuthRequestRequestValidator;
class FederatedAuthRequestResponseValidator;


class PLATFORM_EXPORT FederatedAuthRequest
    : public FederatedAuthRequestInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = FederatedAuthRequestInterfaceBase;
  using Proxy_ = FederatedAuthRequestProxy;

  template <typename ImplRefTraits>
  using Stub_ = FederatedAuthRequestStub<ImplRefTraits>;

  using RequestValidator_ = FederatedAuthRequestRequestValidator;
  using ResponseValidator_ = FederatedAuthRequestResponseValidator;
  enum MethodMinVersions : uint32_t {
    kRequestTokenMinVersion = 0,
    kCancelTokenRequestMinVersion = 0,
    kLogoutRpsMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct RequestToken_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct CancelTokenRequest_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LogoutRps_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~FederatedAuthRequest() = default;


  using RequestTokenCallback = base::OnceCallback<void(RequestTokenStatus, const WTF::String&)>;
  
  virtual void RequestToken(IdentityProviderPtr identity_provider_ptr, bool prefer_auto_sign_in, RequestTokenCallback callback) = 0;

  
  virtual void CancelTokenRequest() = 0;


  using LogoutRpsCallback = base::OnceCallback<void(LogoutRpsStatus)>;
  
  virtual void LogoutRps(WTF::Vector<LogoutRpsRequestPtr> rp_logout_requests, LogoutRpsCallback callback) = 0;
};



class PLATFORM_EXPORT FederatedAuthRequestProxy
    : public FederatedAuthRequest {
 public:
  using InterfaceType = FederatedAuthRequest;

  explicit FederatedAuthRequestProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void RequestToken(IdentityProviderPtr identity_provider_ptr, bool prefer_auto_sign_in, RequestTokenCallback callback) final;
  
  void CancelTokenRequest() final;
  
  void LogoutRps(WTF::Vector<LogoutRpsRequestPtr> rp_logout_requests, LogoutRpsCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT FederatedAuthRequestStubDispatch {
 public:
  static bool Accept(FederatedAuthRequest* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      FederatedAuthRequest* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<FederatedAuthRequest>>
class FederatedAuthRequestStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  FederatedAuthRequestStub() = default;
  ~FederatedAuthRequestStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FederatedAuthRequestStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FederatedAuthRequestStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT FederatedAuthRequestRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT FederatedAuthRequestResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};









class PLATFORM_EXPORT LogoutRpsRequest {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<LogoutRpsRequest, T>::value>;
  using DataView = LogoutRpsRequestDataView;
  using Data_ = internal::LogoutRpsRequest_Data;

  template <typename... Args>
  static LogoutRpsRequestPtr New(Args&&... args) {
    return LogoutRpsRequestPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static LogoutRpsRequestPtr From(const U& u) {
    return mojo::TypeConverter<LogoutRpsRequestPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, LogoutRpsRequest>::Convert(*this);
  }


  LogoutRpsRequest();

  LogoutRpsRequest(
      const ::blink::KURL& url,
      const WTF::String& account_id);


  ~LogoutRpsRequest();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = LogoutRpsRequestPtr>
  LogoutRpsRequestPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, LogoutRpsRequest::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, LogoutRpsRequest::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        LogoutRpsRequest::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        LogoutRpsRequest::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::LogoutRpsRequest_UnserializedMessageContext<
            UserType, LogoutRpsRequest::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<LogoutRpsRequest::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return LogoutRpsRequest::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::LogoutRpsRequest_UnserializedMessageContext<
            UserType, LogoutRpsRequest::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<LogoutRpsRequest::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::KURL url;
  
  WTF::String account_id;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, LogoutRpsRequest::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, LogoutRpsRequest::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, LogoutRpsRequest::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, LogoutRpsRequest::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class PLATFORM_EXPORT IdentityProvider {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<IdentityProvider, T>::value>;
  using DataView = IdentityProviderDataView;
  using Data_ = internal::IdentityProvider_Data;

  template <typename... Args>
  static IdentityProviderPtr New(Args&&... args) {
    return IdentityProviderPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static IdentityProviderPtr From(const U& u) {
    return mojo::TypeConverter<IdentityProviderPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, IdentityProvider>::Convert(*this);
  }


  IdentityProvider();

  IdentityProvider(
      const ::blink::KURL& config_url,
      const WTF::String& client_id,
      const WTF::String& nonce);


  ~IdentityProvider();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = IdentityProviderPtr>
  IdentityProviderPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, IdentityProvider::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, IdentityProvider::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        IdentityProvider::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        IdentityProvider::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::IdentityProvider_UnserializedMessageContext<
            UserType, IdentityProvider::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<IdentityProvider::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return IdentityProvider::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::IdentityProvider_UnserializedMessageContext<
            UserType, IdentityProvider::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<IdentityProvider::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::KURL config_url;
  
  WTF::String client_id;
  
  WTF::String nonce;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, IdentityProvider::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, IdentityProvider::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, IdentityProvider::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, IdentityProvider::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
LogoutRpsRequestPtr LogoutRpsRequest::Clone() const {
  return New(
      mojo::Clone(url),
      mojo::Clone(account_id)
  );
}

template <typename T, LogoutRpsRequest::EnableIfSame<T>*>
bool LogoutRpsRequest::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->url, other_struct.url))
    return false;
  if (!mojo::Equals(this->account_id, other_struct.account_id))
    return false;
  return true;
}

template <typename T, LogoutRpsRequest::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.url < rhs.url)
    return true;
  if (rhs.url < lhs.url)
    return false;
  if (lhs.account_id < rhs.account_id)
    return true;
  if (rhs.account_id < lhs.account_id)
    return false;
  return false;
}
template <typename StructPtrType>
IdentityProviderPtr IdentityProvider::Clone() const {
  return New(
      mojo::Clone(config_url),
      mojo::Clone(client_id),
      mojo::Clone(nonce)
  );
}

template <typename T, IdentityProvider::EnableIfSame<T>*>
bool IdentityProvider::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->config_url, other_struct.config_url))
    return false;
  if (!mojo::Equals(this->client_id, other_struct.client_id))
    return false;
  if (!mojo::Equals(this->nonce, other_struct.nonce))
    return false;
  return true;
}

template <typename T, IdentityProvider::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.config_url < rhs.config_url)
    return true;
  if (rhs.config_url < lhs.config_url)
    return false;
  if (lhs.client_id < rhs.client_id)
    return true;
  if (rhs.client_id < lhs.client_id)
    return false;
  if (lhs.nonce < rhs.nonce)
    return true;
  if (rhs.nonce < lhs.nonce)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::LogoutRpsRequest::DataView,
                                         ::blink::mojom::blink::LogoutRpsRequestPtr> {
  static bool IsNull(const ::blink::mojom::blink::LogoutRpsRequestPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::LogoutRpsRequestPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::LogoutRpsRequest::url)& url(
      const ::blink::mojom::blink::LogoutRpsRequestPtr& input) {
    return input->url;
  }

  static const decltype(::blink::mojom::blink::LogoutRpsRequest::account_id)& account_id(
      const ::blink::mojom::blink::LogoutRpsRequestPtr& input) {
    return input->account_id;
  }

  static bool Read(::blink::mojom::blink::LogoutRpsRequest::DataView input, ::blink::mojom::blink::LogoutRpsRequestPtr* output);
};


template <>
struct PLATFORM_EXPORT StructTraits<::blink::mojom::blink::IdentityProvider::DataView,
                                         ::blink::mojom::blink::IdentityProviderPtr> {
  static bool IsNull(const ::blink::mojom::blink::IdentityProviderPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::blink::IdentityProviderPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::blink::IdentityProvider::config_url)& config_url(
      const ::blink::mojom::blink::IdentityProviderPtr& input) {
    return input->config_url;
  }

  static const decltype(::blink::mojom::blink::IdentityProvider::client_id)& client_id(
      const ::blink::mojom::blink::IdentityProviderPtr& input) {
    return input->client_id;
  }

  static const decltype(::blink::mojom::blink::IdentityProvider::nonce)& nonce(
      const ::blink::mojom::blink::IdentityProviderPtr& input) {
    return input->nonce;
  }

  static bool Read(::blink::mojom::blink::IdentityProvider::DataView input, ::blink::mojom::blink::IdentityProviderPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_BLINK_H_