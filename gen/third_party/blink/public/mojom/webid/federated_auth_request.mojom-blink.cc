// third_party/blink/public/mojom/webid/federated_auth_request.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-params-data.h"
#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/webid/federated_auth_request.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBID_FEDERATED_AUTH_REQUEST_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
LogoutRpsRequest::LogoutRpsRequest()
    : url(),
      account_id() {}

LogoutRpsRequest::LogoutRpsRequest(
    const ::blink::KURL& url_in,
    const WTF::String& account_id_in)
    : url(std::move(url_in)),
      account_id(std::move(account_id_in)) {}

LogoutRpsRequest::~LogoutRpsRequest() = default;

void LogoutRpsRequest::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "url"), this->url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::KURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "account_id"), this->account_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool LogoutRpsRequest::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
IdentityProvider::IdentityProvider()
    : config_url(),
      client_id(),
      nonce() {}

IdentityProvider::IdentityProvider(
    const ::blink::KURL& config_url_in,
    const WTF::String& client_id_in,
    const WTF::String& nonce_in)
    : config_url(std::move(config_url_in)),
      client_id(std::move(client_id_in)),
      nonce(std::move(nonce_in)) {}

IdentityProvider::~IdentityProvider() = default;

void IdentityProvider::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "config_url"), this->config_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::KURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "client_id"), this->client_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "nonce"), this->nonce,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool IdentityProvider::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char FederatedAuthRequest::Name_[] = "blink.mojom.FederatedAuthRequest";

FederatedAuthRequest::IPCStableHashFunction FederatedAuthRequest::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kFederatedAuthRequest_RequestToken_Name: {
      return &FederatedAuthRequest::RequestToken_Sym::IPCStableHash;
    }
    case internal::kFederatedAuthRequest_CancelTokenRequest_Name: {
      return &FederatedAuthRequest::CancelTokenRequest_Sym::IPCStableHash;
    }
    case internal::kFederatedAuthRequest_LogoutRps_Name: {
      return &FederatedAuthRequest::LogoutRps_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* FederatedAuthRequest::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kFederatedAuthRequest_RequestToken_Name:
            return "Receive blink::mojom::FederatedAuthRequest::RequestToken";
      case internal::kFederatedAuthRequest_CancelTokenRequest_Name:
            return "Receive blink::mojom::FederatedAuthRequest::CancelTokenRequest";
      case internal::kFederatedAuthRequest_LogoutRps_Name:
            return "Receive blink::mojom::FederatedAuthRequest::LogoutRps";
    }
  } else {
    switch (message.name()) {
      case internal::kFederatedAuthRequest_RequestToken_Name:
            return "Receive reply blink::mojom::FederatedAuthRequest::RequestToken";
      case internal::kFederatedAuthRequest_CancelTokenRequest_Name:
            return "Receive reply blink::mojom::FederatedAuthRequest::CancelTokenRequest";
      case internal::kFederatedAuthRequest_LogoutRps_Name:
            return "Receive reply blink::mojom::FederatedAuthRequest::LogoutRps";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t FederatedAuthRequest::RequestToken_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::FederatedAuthRequest::RequestToken");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t FederatedAuthRequest::CancelTokenRequest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::FederatedAuthRequest::CancelTokenRequest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t FederatedAuthRequest::LogoutRps_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::FederatedAuthRequest::LogoutRps");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class FederatedAuthRequest_RequestToken_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FederatedAuthRequest_RequestToken_ForwardToCallback(
      FederatedAuthRequest::RequestTokenCallback callback
      ) : callback_(std::move(callback)) {
  }

  FederatedAuthRequest_RequestToken_ForwardToCallback(const FederatedAuthRequest_RequestToken_ForwardToCallback&) = delete;
  FederatedAuthRequest_RequestToken_ForwardToCallback& operator=(const FederatedAuthRequest_RequestToken_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  FederatedAuthRequest::RequestTokenCallback callback_;
};

class FederatedAuthRequest_LogoutRps_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  FederatedAuthRequest_LogoutRps_ForwardToCallback(
      FederatedAuthRequest::LogoutRpsCallback callback
      ) : callback_(std::move(callback)) {
  }

  FederatedAuthRequest_LogoutRps_ForwardToCallback(const FederatedAuthRequest_LogoutRps_ForwardToCallback&) = delete;
  FederatedAuthRequest_LogoutRps_ForwardToCallback& operator=(const FederatedAuthRequest_LogoutRps_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  FederatedAuthRequest::LogoutRpsCallback callback_;
};

FederatedAuthRequestProxy::FederatedAuthRequestProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void FederatedAuthRequestProxy::RequestToken(
    IdentityProviderPtr in_identity_provider_ptr, bool in_prefer_auto_sign_in, RequestTokenCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::FederatedAuthRequest::RequestToken", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("identity_provider_ptr"), in_identity_provider_ptr,
                        "<value of type IdentityProviderPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("prefer_auto_sign_in"), in_prefer_auto_sign_in,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFederatedAuthRequest_RequestToken_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::FederatedAuthRequest_RequestToken_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->identity_provider_ptr)::BaseType> identity_provider_ptr_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::IdentityProviderDataView>(
      in_identity_provider_ptr, identity_provider_ptr_fragment);
  params->identity_provider_ptr.Set(
      identity_provider_ptr_fragment.is_null() ? nullptr : identity_provider_ptr_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->identity_provider_ptr.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null identity_provider_ptr in FederatedAuthRequest.RequestToken request");
  params->prefer_auto_sign_in = in_prefer_auto_sign_in;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FederatedAuthRequest::Name_);
  message.set_method_name("RequestToken");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FederatedAuthRequest_RequestToken_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void FederatedAuthRequestProxy::CancelTokenRequest(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::FederatedAuthRequest::CancelTokenRequest");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFederatedAuthRequest_CancelTokenRequest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::FederatedAuthRequest_CancelTokenRequest_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FederatedAuthRequest::Name_);
  message.set_method_name("CancelTokenRequest");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void FederatedAuthRequestProxy::LogoutRps(
    WTF::Vector<LogoutRpsRequestPtr> in_rp_logout_requests, LogoutRpsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::FederatedAuthRequest::LogoutRps", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("rp_logout_requests"), in_rp_logout_requests,
                        "<value of type WTF::Vector<LogoutRpsRequestPtr>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFederatedAuthRequest_LogoutRps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::FederatedAuthRequest_LogoutRps_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->rp_logout_requests)::BaseType>
      rp_logout_requests_fragment(params.message());
  const mojo::internal::ContainerValidateParams rp_logout_requests_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::LogoutRpsRequestDataView>>(
      in_rp_logout_requests, rp_logout_requests_fragment, &rp_logout_requests_validate_params);
  params->rp_logout_requests.Set(
      rp_logout_requests_fragment.is_null() ? nullptr : rp_logout_requests_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->rp_logout_requests.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null rp_logout_requests in FederatedAuthRequest.LogoutRps request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FederatedAuthRequest::Name_);
  message.set_method_name("LogoutRps");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new FederatedAuthRequest_LogoutRps_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class FederatedAuthRequest_RequestToken_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static FederatedAuthRequest::RequestTokenCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<FederatedAuthRequest_RequestToken_ProxyToResponder> proxy(
        new FederatedAuthRequest_RequestToken_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&FederatedAuthRequest_RequestToken_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~FederatedAuthRequest_RequestToken_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  FederatedAuthRequest_RequestToken_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "FederatedAuthRequest::RequestTokenCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      RequestTokenStatus in_status, const WTF::String& in_token);
};

bool FederatedAuthRequest_RequestToken_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::FederatedAuthRequest_RequestToken_ResponseParams_Data* params =
      reinterpret_cast<
          internal::FederatedAuthRequest_RequestToken_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  RequestTokenStatus p_status{};
  WTF::String p_token{};
  FederatedAuthRequest_RequestToken_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadToken(&p_token))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FederatedAuthRequest::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_token));
  return true;
}

void FederatedAuthRequest_RequestToken_ProxyToResponder::Run(
    RequestTokenStatus in_status, const WTF::String& in_token) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::FederatedAuthRequest::RequestToken", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("status"), in_status,
                        "<value of type RequestTokenStatus>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("token"), in_token,
                        "<value of type const WTF::String&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFederatedAuthRequest_RequestToken_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::FederatedAuthRequest_RequestToken_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::RequestTokenStatus>(
      in_status, &params->status);
  mojo::internal::MessageFragment<
      typename decltype(params->token)::BaseType> token_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_token, token_fragment);
  params->token.Set(
      token_fragment.is_null() ? nullptr : token_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FederatedAuthRequest::Name_);
  message.set_method_name("RequestToken");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class FederatedAuthRequest_LogoutRps_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static FederatedAuthRequest::LogoutRpsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<FederatedAuthRequest_LogoutRps_ProxyToResponder> proxy(
        new FederatedAuthRequest_LogoutRps_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&FederatedAuthRequest_LogoutRps_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~FederatedAuthRequest_LogoutRps_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  FederatedAuthRequest_LogoutRps_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "FederatedAuthRequest::LogoutRpsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      LogoutRpsStatus in_status);
};

bool FederatedAuthRequest_LogoutRps_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::FederatedAuthRequest_LogoutRps_ResponseParams_Data* params =
      reinterpret_cast<
          internal::FederatedAuthRequest_LogoutRps_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  LogoutRpsStatus p_status{};
  FederatedAuthRequest_LogoutRps_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        FederatedAuthRequest::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status));
  return true;
}

void FederatedAuthRequest_LogoutRps_ProxyToResponder::Run(
    LogoutRpsStatus in_status) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::FederatedAuthRequest::LogoutRps", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("status"), in_status,
                        "<value of type LogoutRpsStatus>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kFederatedAuthRequest_LogoutRps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::FederatedAuthRequest_LogoutRps_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::LogoutRpsStatus>(
      in_status, &params->status);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(FederatedAuthRequest::Name_);
  message.set_method_name("LogoutRps");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool FederatedAuthRequestStubDispatch::Accept(
    FederatedAuthRequest* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kFederatedAuthRequest_RequestToken_Name: {
      break;
    }
    case internal::kFederatedAuthRequest_CancelTokenRequest_Name: {

      DCHECK(message->is_serialized());
      internal::FederatedAuthRequest_CancelTokenRequest_Params_Data* params =
          reinterpret_cast<internal::FederatedAuthRequest_CancelTokenRequest_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      FederatedAuthRequest_CancelTokenRequest_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FederatedAuthRequest::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CancelTokenRequest();
      return true;
    }
    case internal::kFederatedAuthRequest_LogoutRps_Name: {
      break;
    }
  }
  return false;
}

// static
bool FederatedAuthRequestStubDispatch::AcceptWithResponder(
    FederatedAuthRequest* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kFederatedAuthRequest_RequestToken_Name: {

      internal::FederatedAuthRequest_RequestToken_Params_Data* params =
          reinterpret_cast<
              internal::FederatedAuthRequest_RequestToken_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      IdentityProviderPtr p_identity_provider_ptr{};
      bool p_prefer_auto_sign_in{};
      FederatedAuthRequest_RequestToken_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadIdentityProviderPtr(&p_identity_provider_ptr))
        success = false;
      if (success)
        p_prefer_auto_sign_in = input_data_view.prefer_auto_sign_in();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FederatedAuthRequest::Name_, 0, false);
        return false;
      }
      FederatedAuthRequest::RequestTokenCallback callback =
          FederatedAuthRequest_RequestToken_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestToken(
std::move(p_identity_provider_ptr), 
std::move(p_prefer_auto_sign_in), std::move(callback));
      return true;
    }
    case internal::kFederatedAuthRequest_CancelTokenRequest_Name: {
      break;
    }
    case internal::kFederatedAuthRequest_LogoutRps_Name: {

      internal::FederatedAuthRequest_LogoutRps_Params_Data* params =
          reinterpret_cast<
              internal::FederatedAuthRequest_LogoutRps_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WTF::Vector<LogoutRpsRequestPtr> p_rp_logout_requests{};
      FederatedAuthRequest_LogoutRps_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadRpLogoutRequests(&p_rp_logout_requests))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            FederatedAuthRequest::Name_, 2, false);
        return false;
      }
      FederatedAuthRequest::LogoutRpsCallback callback =
          FederatedAuthRequest_LogoutRps_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LogoutRps(
std::move(p_rp_logout_requests), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kFederatedAuthRequestValidationInfo[] = {
    {&internal::FederatedAuthRequest_RequestToken_Params_Data::Validate,
     &internal::FederatedAuthRequest_RequestToken_ResponseParams_Data::Validate},
    {&internal::FederatedAuthRequest_CancelTokenRequest_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::FederatedAuthRequest_LogoutRps_Params_Data::Validate,
     &internal::FederatedAuthRequest_LogoutRps_ResponseParams_Data::Validate},
};

bool FederatedAuthRequestRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::FederatedAuthRequest::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kFederatedAuthRequestValidationInfo);
}

bool FederatedAuthRequestResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::FederatedAuthRequest::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kFederatedAuthRequestValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::LogoutRpsRequest::DataView, ::blink::mojom::blink::LogoutRpsRequestPtr>::Read(
    ::blink::mojom::blink::LogoutRpsRequest::DataView input,
    ::blink::mojom::blink::LogoutRpsRequestPtr* output) {
  bool success = true;
  ::blink::mojom::blink::LogoutRpsRequestPtr result(::blink::mojom::blink::LogoutRpsRequest::New());
  
      if (success && !input.ReadUrl(&result->url))
        success = false;
      if (success && !input.ReadAccountId(&result->account_id))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::IdentityProvider::DataView, ::blink::mojom::blink::IdentityProviderPtr>::Read(
    ::blink::mojom::blink::IdentityProvider::DataView input,
    ::blink::mojom::blink::IdentityProviderPtr* output) {
  bool success = true;
  ::blink::mojom::blink::IdentityProviderPtr result(::blink::mojom::blink::IdentityProvider::New());
  
      if (success && !input.ReadConfigUrl(&result->config_url))
        success = false;
      if (success && !input.ReadClientId(&result->client_id))
        success = false;
      if (success && !input.ReadNonce(&result->nonce))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void FederatedAuthRequestInterceptorForTesting::RequestToken(IdentityProviderPtr identity_provider_ptr, bool prefer_auto_sign_in, RequestTokenCallback callback) {
  GetForwardingInterface()->RequestToken(std::move(identity_provider_ptr), std::move(prefer_auto_sign_in), std::move(callback));
}
void FederatedAuthRequestInterceptorForTesting::CancelTokenRequest() {
  GetForwardingInterface()->CancelTokenRequest();
}
void FederatedAuthRequestInterceptorForTesting::LogoutRps(WTF::Vector<LogoutRpsRequestPtr> rp_logout_requests, LogoutRpsCallback callback) {
  GetForwardingInterface()->LogoutRps(std::move(rp_logout_requests), std::move(callback));
}
FederatedAuthRequestAsyncWaiter::FederatedAuthRequestAsyncWaiter(
    FederatedAuthRequest* proxy) : proxy_(proxy) {}

FederatedAuthRequestAsyncWaiter::~FederatedAuthRequestAsyncWaiter() = default;

void FederatedAuthRequestAsyncWaiter::RequestToken(
    IdentityProviderPtr identity_provider_ptr, bool prefer_auto_sign_in, RequestTokenStatus* out_status, WTF::String* out_token) {
  base::RunLoop loop;
  proxy_->RequestToken(std::move(identity_provider_ptr),std::move(prefer_auto_sign_in),
      base::BindOnce(
          [](base::RunLoop* loop,
             RequestTokenStatus* out_status
,
             WTF::String* out_token
,
             RequestTokenStatus status,
             const WTF::String& token) {*out_status = std::move(status);*out_token = std::move(token);
            loop->Quit();
          },
          &loop,
          out_status,
          out_token));
  loop.Run();
}
void FederatedAuthRequestAsyncWaiter::LogoutRps(
    WTF::Vector<LogoutRpsRequestPtr> rp_logout_requests, LogoutRpsStatus* out_status) {
  base::RunLoop loop;
  proxy_->LogoutRps(std::move(rp_logout_requests),
      base::BindOnce(
          [](base::RunLoop* loop,
             LogoutRpsStatus* out_status
,
             LogoutRpsStatus status) {*out_status = std::move(status);
            loop->Quit();
          },
          &loop,
          out_status));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif