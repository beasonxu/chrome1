// third_party/blink/public/mojom/device/device.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/device/device.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT ManagedConfigurationObserverInterceptorForTesting : public ManagedConfigurationObserver {
  virtual ManagedConfigurationObserver* GetForwardingInterface() = 0;
  void OnConfigurationChanged() override;
};
class PLATFORM_EXPORT ManagedConfigurationObserverAsyncWaiter {
 public:
  explicit ManagedConfigurationObserverAsyncWaiter(ManagedConfigurationObserver* proxy);

  ManagedConfigurationObserverAsyncWaiter(const ManagedConfigurationObserverAsyncWaiter&) = delete;
  ManagedConfigurationObserverAsyncWaiter& operator=(const ManagedConfigurationObserverAsyncWaiter&) = delete;

  ~ManagedConfigurationObserverAsyncWaiter();

 private:
  ManagedConfigurationObserver* const proxy_;
};


class PLATFORM_EXPORT DeviceAPIServiceInterceptorForTesting : public DeviceAPIService {
  virtual DeviceAPIService* GetForwardingInterface() = 0;
  void GetDirectoryId(GetDirectoryIdCallback callback) override;
  void GetHostname(GetHostnameCallback callback) override;
  void GetSerialNumber(GetSerialNumberCallback callback) override;
  void GetAnnotatedAssetId(GetAnnotatedAssetIdCallback callback) override;
  void GetAnnotatedLocation(GetAnnotatedLocationCallback callback) override;
};
class PLATFORM_EXPORT DeviceAPIServiceAsyncWaiter {
 public:
  explicit DeviceAPIServiceAsyncWaiter(DeviceAPIService* proxy);

  DeviceAPIServiceAsyncWaiter(const DeviceAPIServiceAsyncWaiter&) = delete;
  DeviceAPIServiceAsyncWaiter& operator=(const DeviceAPIServiceAsyncWaiter&) = delete;

  ~DeviceAPIServiceAsyncWaiter();
  void GetDirectoryId(
      DeviceAttributeResultPtr* out_result);
  void GetHostname(
      DeviceAttributeResultPtr* out_result);
  void GetSerialNumber(
      DeviceAttributeResultPtr* out_result);
  void GetAnnotatedAssetId(
      DeviceAttributeResultPtr* out_result);
  void GetAnnotatedLocation(
      DeviceAttributeResultPtr* out_result);

 private:
  DeviceAPIService* const proxy_;
};


class PLATFORM_EXPORT ManagedConfigurationServiceInterceptorForTesting : public ManagedConfigurationService {
  virtual ManagedConfigurationService* GetForwardingInterface() = 0;
  void GetManagedConfiguration(const WTF::Vector<WTF::String>& keys, GetManagedConfigurationCallback callback) override;
  void SubscribeToManagedConfiguration(::mojo::PendingRemote<ManagedConfigurationObserver> observer) override;
};
class PLATFORM_EXPORT ManagedConfigurationServiceAsyncWaiter {
 public:
  explicit ManagedConfigurationServiceAsyncWaiter(ManagedConfigurationService* proxy);

  ManagedConfigurationServiceAsyncWaiter(const ManagedConfigurationServiceAsyncWaiter&) = delete;
  ManagedConfigurationServiceAsyncWaiter& operator=(const ManagedConfigurationServiceAsyncWaiter&) = delete;

  ~ManagedConfigurationServiceAsyncWaiter();
  void GetManagedConfiguration(
      const WTF::Vector<WTF::String>& keys, absl::optional<WTF::HashMap<WTF::String, WTF::String>>* out_configurations);

 private:
  ManagedConfigurationService* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVICE_DEVICE_MOJOM_BLINK_TEST_UTILS_H_