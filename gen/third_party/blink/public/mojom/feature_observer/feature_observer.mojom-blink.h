// third_party/blink/public/mojom/feature_observer/feature_observer.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FEATURE_OBSERVER_FEATURE_OBSERVER_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FEATURE_OBSERVER_FEATURE_OBSERVER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/feature_observer/feature_observer.mojom-shared.h"
#include "third_party/blink/public/mojom/feature_observer/feature_observer.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace WTF {
struct blink_mojom_internal_ObservedFeatureType_DataHashFn {
  static unsigned GetHash(const ::blink::mojom::ObservedFeatureType& value) {
    using utype = std::underlying_type<::blink::mojom::ObservedFeatureType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::blink::mojom::ObservedFeatureType& left, const ::blink::mojom::ObservedFeatureType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::blink::mojom::ObservedFeatureType>
    : public GenericHashTraits<::blink::mojom::ObservedFeatureType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::blink::mojom::ObservedFeatureType EmptyValue() { return static_cast<::blink::mojom::ObservedFeatureType>(-1000000); }
  static void ConstructDeletedValue(::blink::mojom::ObservedFeatureType& slot, bool) {
    slot = static_cast<::blink::mojom::ObservedFeatureType>(-1000001);
  }
  static bool IsDeletedValue(const ::blink::mojom::ObservedFeatureType& value) {
    return value == static_cast<::blink::mojom::ObservedFeatureType>(-1000001);
  }
};
}  // namespace WTF


namespace blink {
namespace mojom {
namespace blink {

class ObservedFeatureProxy;

template <typename ImplRefTraits>
class ObservedFeatureStub;

class ObservedFeatureRequestValidator;


class PLATFORM_EXPORT ObservedFeature
    : public ObservedFeatureInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ObservedFeatureInterfaceBase;
  using Proxy_ = ObservedFeatureProxy;

  template <typename ImplRefTraits>
  using Stub_ = ObservedFeatureStub<ImplRefTraits>;

  using RequestValidator_ = ObservedFeatureRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ObservedFeature() = default;
};

class FeatureObserverProxy;

template <typename ImplRefTraits>
class FeatureObserverStub;

class FeatureObserverRequestValidator;


class PLATFORM_EXPORT FeatureObserver
    : public FeatureObserverInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = FeatureObserverInterfaceBase;
  using Proxy_ = FeatureObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = FeatureObserverStub<ImplRefTraits>;

  using RequestValidator_ = FeatureObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kRegisterMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Register_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~FeatureObserver() = default;

  
  virtual void Register(::mojo::PendingReceiver<ObservedFeature> feature, ObservedFeatureType type) = 0;
};



class PLATFORM_EXPORT ObservedFeatureProxy
    : public ObservedFeature {
 public:
  using InterfaceType = ObservedFeature;

  explicit ObservedFeatureProxy(mojo::MessageReceiverWithResponder* receiver);

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class PLATFORM_EXPORT FeatureObserverProxy
    : public FeatureObserver {
 public:
  using InterfaceType = FeatureObserver;

  explicit FeatureObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Register(::mojo::PendingReceiver<ObservedFeature> feature, ObservedFeatureType type) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT ObservedFeatureStubDispatch {
 public:
  static bool Accept(ObservedFeature* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ObservedFeature* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ObservedFeature>>
class ObservedFeatureStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ObservedFeatureStub() = default;
  ~ObservedFeatureStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ObservedFeatureStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ObservedFeatureStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT FeatureObserverStubDispatch {
 public:
  static bool Accept(FeatureObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      FeatureObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<FeatureObserver>>
class FeatureObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  FeatureObserverStub() = default;
  ~FeatureObserverStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FeatureObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return FeatureObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT ObservedFeatureRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT FeatureObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FEATURE_OBSERVER_FEATURE_OBSERVER_MOJOM_BLINK_H_