// third_party/blink/public/mojom/webpreferences/web_preferences.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-params-data.h"
#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/webpreferences/web_preferences.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBPREFERENCES_WEB_PREFERENCES_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBPREFERENCES_WEB_PREFERENCES_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
WebPreferences::WebPreferences()
    : standard_font_family_map(),
      fixed_font_family_map(),
      serif_font_family_map(),
      sans_serif_font_family_map(),
      cursive_font_family_map(),
      fantasy_font_family_map(),
      math_font_family_map(),
      default_font_size(),
      default_fixed_font_size(),
      minimum_font_size(),
      minimum_logical_font_size(),
      default_encoding(),
      context_menu_on_mouse_up(),
      javascript_enabled(),
      web_security_enabled(),
      loads_images_automatically(),
      images_enabled(),
      plugins_enabled(),
      dom_paste_enabled(),
      shrinks_standalone_images_to_fit(),
      text_areas_are_resizable(),
      allow_scripts_to_close_windows(),
      remote_fonts_enabled(),
      javascript_can_access_clipboard(),
      xslt_enabled(),
      dns_prefetching_enabled(),
      data_saver_enabled(),
      local_storage_enabled(),
      databases_enabled(),
      tabs_to_links(),
      disable_ipc_flooding_protection(),
      hyperlink_auditing_enabled(),
      allow_universal_access_from_file_urls(),
      allow_file_access_from_file_urls(),
      webgl1_enabled(),
      webgl2_enabled(),
      pepper_3d_enabled(),
      privileged_webgl_extensions_enabled(),
      webgl_errors_to_console_enabled(),
      hide_scrollbars(),
      enable_webkit_scrollbar_styling(),
      accelerated_2d_canvas_enabled(),
      canvas_2d_layers_enabled(),
      antialiased_2d_canvas_disabled(),
      antialiased_clips_2d_canvas_enabled(),
      accelerated_filters_enabled(),
      deferred_filters_enabled(),
      container_culling_enabled(),
      allow_running_insecure_content(),
      disable_reading_from_canvas(),
      strict_mixed_content_checking(),
      strict_powerful_feature_restrictions(),
      allow_geolocation_on_insecure_origins(),
      strictly_block_blockable_mixed_content(),
      block_mixed_plugin_content(),
      password_echo_enabled(),
      should_clear_document_background(),
      enable_scroll_animator(),
      threaded_scrolling_enabled(),
      prefers_reduced_motion(),
      touch_event_feature_detection_enabled(),
      pointer_events_max_touch_points(),
      available_pointer_types(),
      primary_pointer_type(),
      available_hover_types(),
      primary_hover_type(),
      dont_send_key_events_to_javascript(),
      barrel_button_for_drag_enabled(),
      sync_xhr_in_documents_enabled(),
      target_blank_implies_no_opener_enabled_will_be_removed(),
      allow_non_empty_navigator_plugins(),
      number_of_cpu_cores(),
      editing_behavior(),
      supports_multiple_windows(),
      viewport_enabled(),
      viewport_meta_enabled(),
      auto_zoom_focused_editable_to_legible_scale(),
      shrinks_viewport_contents_to_fit(),
      viewport_style(),
      smooth_scroll_for_find_enabled(),
      main_frame_resizes_are_orientation_changes(),
      initialize_at_minimum_page_scale(),
      smart_insert_delete_enabled(),
      spatial_navigation_enabled(),
      navigate_on_drag_drop(),
      fake_no_alloc_direct_call_for_testing_enabled(),
      v8_cache_options(),
      record_whole_document(),
      stylus_handwriting_enabled(),
      cookie_enabled(),
      accelerated_video_decode_enabled(),
      animation_policy(),
      user_gesture_required_for_presentation(),
      text_tracks_enabled(),
      text_track_background_color(),
      text_track_text_color(),
      text_track_text_size(),
      text_track_text_shadow(),
      text_track_font_family(),
      text_track_font_style(),
      text_track_font_variant(),
      text_track_window_color(),
      text_track_window_radius(),
      text_track_margin_percentage(),
      immersive_mode_enabled(),
      double_tap_to_zoom_enabled(),
      fullscreen_supported(),
      text_autosizing_enabled(),
      web_app_scope(),
      font_scale_factor(),
      device_scale_adjustment(),
      force_enable_zoom(),
      default_video_poster_url(),
      support_deprecated_target_density_dpi(),
      use_legacy_background_size_shorthand_behavior(),
      wide_viewport_quirk(),
      use_wide_viewport(),
      force_zero_layout_height(),
      viewport_meta_merge_content_quirk(),
      viewport_meta_non_user_scalable_quirk(),
      viewport_meta_zero_values_quirk(),
      clobber_user_agent_initial_scale_quirk(),
      ignore_main_frame_overflow_hidden_quirk(),
      report_screen_size_in_physical_pixels_quirk(),
      reuse_global_for_unowned_main_frame(),
      spellcheck_enabled_by_default(),
      video_fullscreen_orientation_lock_enabled(),
      video_rotate_to_fullscreen_enabled(),
      embedded_media_experience_enabled(),
      css_hex_alpha_color_enabled(),
      scroll_top_left_interop_enabled(),
      disable_accelerated_small_canvases(),
      disable_webauthn(),
      force_dark_mode_enabled(),
      default_minimum_page_scale_factor(),
      default_maximum_page_scale_factor(),
      hide_download_ui(),
      presentation_receiver(),
      media_controls_enabled(),
      do_not_update_selection_on_mutating_selection_range(),
      autoplay_policy(),
      preferred_color_scheme(),
      preferred_contrast(),
      low_priority_iframes_threshold(),
      picture_in_picture_enabled(),
      translate_service_available(),
      network_quality_estimator_web_holdback(),
      lazy_load_enabled(),
      lazy_frame_loading_distance_thresholds_px(),
      lazy_image_loading_distance_thresholds_px(),
      allow_mixed_content_upgrades(),
      always_show_focus(),
      touch_drag_drop_enabled(),
      webxr_immersive_ar_allowed(),
      renderer_wide_named_frame_lookup() {}

WebPreferences::WebPreferences(
    const WTF::HashMap<WTF::String, ::WTF::String>& standard_font_family_map_in,
    const WTF::HashMap<WTF::String, ::WTF::String>& fixed_font_family_map_in,
    const WTF::HashMap<WTF::String, ::WTF::String>& serif_font_family_map_in,
    const WTF::HashMap<WTF::String, ::WTF::String>& sans_serif_font_family_map_in,
    const WTF::HashMap<WTF::String, ::WTF::String>& cursive_font_family_map_in,
    const WTF::HashMap<WTF::String, ::WTF::String>& fantasy_font_family_map_in,
    const WTF::HashMap<WTF::String, ::WTF::String>& math_font_family_map_in,
    int32_t default_font_size_in,
    int32_t default_fixed_font_size_in,
    int32_t minimum_font_size_in,
    int32_t minimum_logical_font_size_in,
    const WTF::String& default_encoding_in,
    bool context_menu_on_mouse_up_in,
    bool javascript_enabled_in,
    bool web_security_enabled_in,
    bool loads_images_automatically_in,
    bool images_enabled_in,
    bool plugins_enabled_in,
    bool dom_paste_enabled_in,
    bool shrinks_standalone_images_to_fit_in,
    bool text_areas_are_resizable_in,
    bool allow_scripts_to_close_windows_in,
    bool remote_fonts_enabled_in,
    bool javascript_can_access_clipboard_in,
    bool xslt_enabled_in,
    bool dns_prefetching_enabled_in,
    bool data_saver_enabled_in,
    bool local_storage_enabled_in,
    bool databases_enabled_in,
    bool tabs_to_links_in,
    bool disable_ipc_flooding_protection_in,
    bool hyperlink_auditing_enabled_in,
    bool allow_universal_access_from_file_urls_in,
    bool allow_file_access_from_file_urls_in,
    bool webgl1_enabled_in,
    bool webgl2_enabled_in,
    bool pepper_3d_enabled_in,
    bool privileged_webgl_extensions_enabled_in,
    bool webgl_errors_to_console_enabled_in,
    bool hide_scrollbars_in,
    bool enable_webkit_scrollbar_styling_in,
    bool accelerated_2d_canvas_enabled_in,
    bool canvas_2d_layers_enabled_in,
    bool antialiased_2d_canvas_disabled_in,
    bool antialiased_clips_2d_canvas_enabled_in,
    bool accelerated_filters_enabled_in,
    bool deferred_filters_enabled_in,
    bool container_culling_enabled_in,
    bool allow_running_insecure_content_in,
    bool disable_reading_from_canvas_in,
    bool strict_mixed_content_checking_in,
    bool strict_powerful_feature_restrictions_in,
    bool allow_geolocation_on_insecure_origins_in,
    bool strictly_block_blockable_mixed_content_in,
    bool block_mixed_plugin_content_in,
    bool password_echo_enabled_in,
    bool should_clear_document_background_in,
    bool enable_scroll_animator_in,
    bool threaded_scrolling_enabled_in,
    bool prefers_reduced_motion_in,
    bool touch_event_feature_detection_enabled_in,
    int32_t pointer_events_max_touch_points_in,
    int32_t available_pointer_types_in,
    PointerType primary_pointer_type_in,
    int32_t available_hover_types_in,
    HoverType primary_hover_type_in,
    bool dont_send_key_events_to_javascript_in,
    bool barrel_button_for_drag_enabled_in,
    bool sync_xhr_in_documents_enabled_in,
    bool target_blank_implies_no_opener_enabled_will_be_removed_in,
    bool allow_non_empty_navigator_plugins_in,
    int32_t number_of_cpu_cores_in,
    EditingBehavior editing_behavior_in,
    bool supports_multiple_windows_in,
    bool viewport_enabled_in,
    bool viewport_meta_enabled_in,
    bool auto_zoom_focused_editable_to_legible_scale_in,
    bool shrinks_viewport_contents_to_fit_in,
    ViewportStyle viewport_style_in,
    bool smooth_scroll_for_find_enabled_in,
    bool main_frame_resizes_are_orientation_changes_in,
    bool initialize_at_minimum_page_scale_in,
    bool smart_insert_delete_enabled_in,
    bool spatial_navigation_enabled_in,
    bool navigate_on_drag_drop_in,
    bool fake_no_alloc_direct_call_for_testing_enabled_in,
    ::blink::mojom::blink::V8CacheOptions v8_cache_options_in,
    bool record_whole_document_in,
    bool stylus_handwriting_enabled_in,
    bool cookie_enabled_in,
    bool accelerated_video_decode_enabled_in,
    ImageAnimationPolicy animation_policy_in,
    bool user_gesture_required_for_presentation_in,
    bool text_tracks_enabled_in,
    const WTF::String& text_track_background_color_in,
    const WTF::String& text_track_text_color_in,
    const WTF::String& text_track_text_size_in,
    const WTF::String& text_track_text_shadow_in,
    const WTF::String& text_track_font_family_in,
    const WTF::String& text_track_font_style_in,
    const WTF::String& text_track_font_variant_in,
    const WTF::String& text_track_window_color_in,
    const WTF::String& text_track_window_radius_in,
    float text_track_margin_percentage_in,
    bool immersive_mode_enabled_in,
    bool double_tap_to_zoom_enabled_in,
    bool fullscreen_supported_in,
    bool text_autosizing_enabled_in,
    const ::blink::KURL& web_app_scope_in,
    float font_scale_factor_in,
    float device_scale_adjustment_in,
    bool force_enable_zoom_in,
    const ::blink::KURL& default_video_poster_url_in,
    bool support_deprecated_target_density_dpi_in,
    bool use_legacy_background_size_shorthand_behavior_in,
    bool wide_viewport_quirk_in,
    bool use_wide_viewport_in,
    bool force_zero_layout_height_in,
    bool viewport_meta_merge_content_quirk_in,
    bool viewport_meta_non_user_scalable_quirk_in,
    bool viewport_meta_zero_values_quirk_in,
    bool clobber_user_agent_initial_scale_quirk_in,
    bool ignore_main_frame_overflow_hidden_quirk_in,
    bool report_screen_size_in_physical_pixels_quirk_in,
    bool reuse_global_for_unowned_main_frame_in,
    bool spellcheck_enabled_by_default_in,
    bool video_fullscreen_orientation_lock_enabled_in,
    bool video_rotate_to_fullscreen_enabled_in,
    bool embedded_media_experience_enabled_in,
    bool css_hex_alpha_color_enabled_in,
    bool scroll_top_left_interop_enabled_in,
    bool disable_accelerated_small_canvases_in,
    bool disable_webauthn_in,
    bool force_dark_mode_enabled_in,
    float default_minimum_page_scale_factor_in,
    float default_maximum_page_scale_factor_in,
    bool hide_download_ui_in,
    bool presentation_receiver_in,
    bool media_controls_enabled_in,
    bool do_not_update_selection_on_mutating_selection_range_in,
    AutoplayPolicy autoplay_policy_in,
    ::blink::mojom::blink::PreferredColorScheme preferred_color_scheme_in,
    ::blink::mojom::blink::PreferredContrast preferred_contrast_in,
    EffectiveConnectionType low_priority_iframes_threshold_in,
    bool picture_in_picture_enabled_in,
    bool translate_service_available_in,
    EffectiveConnectionType network_quality_estimator_web_holdback_in,
    bool lazy_load_enabled_in,
    const WTF::HashMap<EffectiveConnectionType, int32_t>& lazy_frame_loading_distance_thresholds_px_in,
    const WTF::HashMap<EffectiveConnectionType, int32_t>& lazy_image_loading_distance_thresholds_px_in,
    bool allow_mixed_content_upgrades_in,
    bool always_show_focus_in,
    bool touch_drag_drop_enabled_in,
    bool webxr_immersive_ar_allowed_in,
    bool renderer_wide_named_frame_lookup_in)
    : standard_font_family_map(std::move(standard_font_family_map_in)),
      fixed_font_family_map(std::move(fixed_font_family_map_in)),
      serif_font_family_map(std::move(serif_font_family_map_in)),
      sans_serif_font_family_map(std::move(sans_serif_font_family_map_in)),
      cursive_font_family_map(std::move(cursive_font_family_map_in)),
      fantasy_font_family_map(std::move(fantasy_font_family_map_in)),
      math_font_family_map(std::move(math_font_family_map_in)),
      default_font_size(std::move(default_font_size_in)),
      default_fixed_font_size(std::move(default_fixed_font_size_in)),
      minimum_font_size(std::move(minimum_font_size_in)),
      minimum_logical_font_size(std::move(minimum_logical_font_size_in)),
      default_encoding(std::move(default_encoding_in)),
      context_menu_on_mouse_up(std::move(context_menu_on_mouse_up_in)),
      javascript_enabled(std::move(javascript_enabled_in)),
      web_security_enabled(std::move(web_security_enabled_in)),
      loads_images_automatically(std::move(loads_images_automatically_in)),
      images_enabled(std::move(images_enabled_in)),
      plugins_enabled(std::move(plugins_enabled_in)),
      dom_paste_enabled(std::move(dom_paste_enabled_in)),
      shrinks_standalone_images_to_fit(std::move(shrinks_standalone_images_to_fit_in)),
      text_areas_are_resizable(std::move(text_areas_are_resizable_in)),
      allow_scripts_to_close_windows(std::move(allow_scripts_to_close_windows_in)),
      remote_fonts_enabled(std::move(remote_fonts_enabled_in)),
      javascript_can_access_clipboard(std::move(javascript_can_access_clipboard_in)),
      xslt_enabled(std::move(xslt_enabled_in)),
      dns_prefetching_enabled(std::move(dns_prefetching_enabled_in)),
      data_saver_enabled(std::move(data_saver_enabled_in)),
      local_storage_enabled(std::move(local_storage_enabled_in)),
      databases_enabled(std::move(databases_enabled_in)),
      tabs_to_links(std::move(tabs_to_links_in)),
      disable_ipc_flooding_protection(std::move(disable_ipc_flooding_protection_in)),
      hyperlink_auditing_enabled(std::move(hyperlink_auditing_enabled_in)),
      allow_universal_access_from_file_urls(std::move(allow_universal_access_from_file_urls_in)),
      allow_file_access_from_file_urls(std::move(allow_file_access_from_file_urls_in)),
      webgl1_enabled(std::move(webgl1_enabled_in)),
      webgl2_enabled(std::move(webgl2_enabled_in)),
      pepper_3d_enabled(std::move(pepper_3d_enabled_in)),
      privileged_webgl_extensions_enabled(std::move(privileged_webgl_extensions_enabled_in)),
      webgl_errors_to_console_enabled(std::move(webgl_errors_to_console_enabled_in)),
      hide_scrollbars(std::move(hide_scrollbars_in)),
      enable_webkit_scrollbar_styling(std::move(enable_webkit_scrollbar_styling_in)),
      accelerated_2d_canvas_enabled(std::move(accelerated_2d_canvas_enabled_in)),
      canvas_2d_layers_enabled(std::move(canvas_2d_layers_enabled_in)),
      antialiased_2d_canvas_disabled(std::move(antialiased_2d_canvas_disabled_in)),
      antialiased_clips_2d_canvas_enabled(std::move(antialiased_clips_2d_canvas_enabled_in)),
      accelerated_filters_enabled(std::move(accelerated_filters_enabled_in)),
      deferred_filters_enabled(std::move(deferred_filters_enabled_in)),
      container_culling_enabled(std::move(container_culling_enabled_in)),
      allow_running_insecure_content(std::move(allow_running_insecure_content_in)),
      disable_reading_from_canvas(std::move(disable_reading_from_canvas_in)),
      strict_mixed_content_checking(std::move(strict_mixed_content_checking_in)),
      strict_powerful_feature_restrictions(std::move(strict_powerful_feature_restrictions_in)),
      allow_geolocation_on_insecure_origins(std::move(allow_geolocation_on_insecure_origins_in)),
      strictly_block_blockable_mixed_content(std::move(strictly_block_blockable_mixed_content_in)),
      block_mixed_plugin_content(std::move(block_mixed_plugin_content_in)),
      password_echo_enabled(std::move(password_echo_enabled_in)),
      should_clear_document_background(std::move(should_clear_document_background_in)),
      enable_scroll_animator(std::move(enable_scroll_animator_in)),
      threaded_scrolling_enabled(std::move(threaded_scrolling_enabled_in)),
      prefers_reduced_motion(std::move(prefers_reduced_motion_in)),
      touch_event_feature_detection_enabled(std::move(touch_event_feature_detection_enabled_in)),
      pointer_events_max_touch_points(std::move(pointer_events_max_touch_points_in)),
      available_pointer_types(std::move(available_pointer_types_in)),
      primary_pointer_type(std::move(primary_pointer_type_in)),
      available_hover_types(std::move(available_hover_types_in)),
      primary_hover_type(std::move(primary_hover_type_in)),
      dont_send_key_events_to_javascript(std::move(dont_send_key_events_to_javascript_in)),
      barrel_button_for_drag_enabled(std::move(barrel_button_for_drag_enabled_in)),
      sync_xhr_in_documents_enabled(std::move(sync_xhr_in_documents_enabled_in)),
      target_blank_implies_no_opener_enabled_will_be_removed(std::move(target_blank_implies_no_opener_enabled_will_be_removed_in)),
      allow_non_empty_navigator_plugins(std::move(allow_non_empty_navigator_plugins_in)),
      number_of_cpu_cores(std::move(number_of_cpu_cores_in)),
      editing_behavior(std::move(editing_behavior_in)),
      supports_multiple_windows(std::move(supports_multiple_windows_in)),
      viewport_enabled(std::move(viewport_enabled_in)),
      viewport_meta_enabled(std::move(viewport_meta_enabled_in)),
      auto_zoom_focused_editable_to_legible_scale(std::move(auto_zoom_focused_editable_to_legible_scale_in)),
      shrinks_viewport_contents_to_fit(std::move(shrinks_viewport_contents_to_fit_in)),
      viewport_style(std::move(viewport_style_in)),
      smooth_scroll_for_find_enabled(std::move(smooth_scroll_for_find_enabled_in)),
      main_frame_resizes_are_orientation_changes(std::move(main_frame_resizes_are_orientation_changes_in)),
      initialize_at_minimum_page_scale(std::move(initialize_at_minimum_page_scale_in)),
      smart_insert_delete_enabled(std::move(smart_insert_delete_enabled_in)),
      spatial_navigation_enabled(std::move(spatial_navigation_enabled_in)),
      navigate_on_drag_drop(std::move(navigate_on_drag_drop_in)),
      fake_no_alloc_direct_call_for_testing_enabled(std::move(fake_no_alloc_direct_call_for_testing_enabled_in)),
      v8_cache_options(std::move(v8_cache_options_in)),
      record_whole_document(std::move(record_whole_document_in)),
      stylus_handwriting_enabled(std::move(stylus_handwriting_enabled_in)),
      cookie_enabled(std::move(cookie_enabled_in)),
      accelerated_video_decode_enabled(std::move(accelerated_video_decode_enabled_in)),
      animation_policy(std::move(animation_policy_in)),
      user_gesture_required_for_presentation(std::move(user_gesture_required_for_presentation_in)),
      text_tracks_enabled(std::move(text_tracks_enabled_in)),
      text_track_background_color(std::move(text_track_background_color_in)),
      text_track_text_color(std::move(text_track_text_color_in)),
      text_track_text_size(std::move(text_track_text_size_in)),
      text_track_text_shadow(std::move(text_track_text_shadow_in)),
      text_track_font_family(std::move(text_track_font_family_in)),
      text_track_font_style(std::move(text_track_font_style_in)),
      text_track_font_variant(std::move(text_track_font_variant_in)),
      text_track_window_color(std::move(text_track_window_color_in)),
      text_track_window_radius(std::move(text_track_window_radius_in)),
      text_track_margin_percentage(std::move(text_track_margin_percentage_in)),
      immersive_mode_enabled(std::move(immersive_mode_enabled_in)),
      double_tap_to_zoom_enabled(std::move(double_tap_to_zoom_enabled_in)),
      fullscreen_supported(std::move(fullscreen_supported_in)),
      text_autosizing_enabled(std::move(text_autosizing_enabled_in)),
      web_app_scope(std::move(web_app_scope_in)),
      font_scale_factor(std::move(font_scale_factor_in)),
      device_scale_adjustment(std::move(device_scale_adjustment_in)),
      force_enable_zoom(std::move(force_enable_zoom_in)),
      default_video_poster_url(std::move(default_video_poster_url_in)),
      support_deprecated_target_density_dpi(std::move(support_deprecated_target_density_dpi_in)),
      use_legacy_background_size_shorthand_behavior(std::move(use_legacy_background_size_shorthand_behavior_in)),
      wide_viewport_quirk(std::move(wide_viewport_quirk_in)),
      use_wide_viewport(std::move(use_wide_viewport_in)),
      force_zero_layout_height(std::move(force_zero_layout_height_in)),
      viewport_meta_merge_content_quirk(std::move(viewport_meta_merge_content_quirk_in)),
      viewport_meta_non_user_scalable_quirk(std::move(viewport_meta_non_user_scalable_quirk_in)),
      viewport_meta_zero_values_quirk(std::move(viewport_meta_zero_values_quirk_in)),
      clobber_user_agent_initial_scale_quirk(std::move(clobber_user_agent_initial_scale_quirk_in)),
      ignore_main_frame_overflow_hidden_quirk(std::move(ignore_main_frame_overflow_hidden_quirk_in)),
      report_screen_size_in_physical_pixels_quirk(std::move(report_screen_size_in_physical_pixels_quirk_in)),
      reuse_global_for_unowned_main_frame(std::move(reuse_global_for_unowned_main_frame_in)),
      spellcheck_enabled_by_default(std::move(spellcheck_enabled_by_default_in)),
      video_fullscreen_orientation_lock_enabled(std::move(video_fullscreen_orientation_lock_enabled_in)),
      video_rotate_to_fullscreen_enabled(std::move(video_rotate_to_fullscreen_enabled_in)),
      embedded_media_experience_enabled(std::move(embedded_media_experience_enabled_in)),
      css_hex_alpha_color_enabled(std::move(css_hex_alpha_color_enabled_in)),
      scroll_top_left_interop_enabled(std::move(scroll_top_left_interop_enabled_in)),
      disable_accelerated_small_canvases(std::move(disable_accelerated_small_canvases_in)),
      disable_webauthn(std::move(disable_webauthn_in)),
      force_dark_mode_enabled(std::move(force_dark_mode_enabled_in)),
      default_minimum_page_scale_factor(std::move(default_minimum_page_scale_factor_in)),
      default_maximum_page_scale_factor(std::move(default_maximum_page_scale_factor_in)),
      hide_download_ui(std::move(hide_download_ui_in)),
      presentation_receiver(std::move(presentation_receiver_in)),
      media_controls_enabled(std::move(media_controls_enabled_in)),
      do_not_update_selection_on_mutating_selection_range(std::move(do_not_update_selection_on_mutating_selection_range_in)),
      autoplay_policy(std::move(autoplay_policy_in)),
      preferred_color_scheme(std::move(preferred_color_scheme_in)),
      preferred_contrast(std::move(preferred_contrast_in)),
      low_priority_iframes_threshold(std::move(low_priority_iframes_threshold_in)),
      picture_in_picture_enabled(std::move(picture_in_picture_enabled_in)),
      translate_service_available(std::move(translate_service_available_in)),
      network_quality_estimator_web_holdback(std::move(network_quality_estimator_web_holdback_in)),
      lazy_load_enabled(std::move(lazy_load_enabled_in)),
      lazy_frame_loading_distance_thresholds_px(std::move(lazy_frame_loading_distance_thresholds_px_in)),
      lazy_image_loading_distance_thresholds_px(std::move(lazy_image_loading_distance_thresholds_px_in)),
      allow_mixed_content_upgrades(std::move(allow_mixed_content_upgrades_in)),
      always_show_focus(std::move(always_show_focus_in)),
      touch_drag_drop_enabled(std::move(touch_drag_drop_enabled_in)),
      webxr_immersive_ar_allowed(std::move(webxr_immersive_ar_allowed_in)),
      renderer_wide_named_frame_lookup(std::move(renderer_wide_named_frame_lookup_in)) {}

WebPreferences::~WebPreferences() = default;

void WebPreferences::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "standard_font_family_map"), this->standard_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fixed_font_family_map"), this->fixed_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "serif_font_family_map"), this->serif_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sans_serif_font_family_map"), this->sans_serif_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cursive_font_family_map"), this->cursive_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fantasy_font_family_map"), this->fantasy_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "math_font_family_map"), this->math_font_family_map,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<WTF::String, ::WTF::String>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_font_size"), this->default_font_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_fixed_font_size"), this->default_fixed_font_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "minimum_font_size"), this->minimum_font_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "minimum_logical_font_size"), this->minimum_logical_font_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_encoding"), this->default_encoding,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "context_menu_on_mouse_up"), this->context_menu_on_mouse_up,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "javascript_enabled"), this->javascript_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "web_security_enabled"), this->web_security_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "loads_images_automatically"), this->loads_images_automatically,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "images_enabled"), this->images_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "plugins_enabled"), this->plugins_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "dom_paste_enabled"), this->dom_paste_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "shrinks_standalone_images_to_fit"), this->shrinks_standalone_images_to_fit,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_areas_are_resizable"), this->text_areas_are_resizable,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_scripts_to_close_windows"), this->allow_scripts_to_close_windows,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "remote_fonts_enabled"), this->remote_fonts_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "javascript_can_access_clipboard"), this->javascript_can_access_clipboard,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "xslt_enabled"), this->xslt_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "dns_prefetching_enabled"), this->dns_prefetching_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data_saver_enabled"), this->data_saver_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "local_storage_enabled"), this->local_storage_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "databases_enabled"), this->databases_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "tabs_to_links"), this->tabs_to_links,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disable_ipc_flooding_protection"), this->disable_ipc_flooding_protection,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hyperlink_auditing_enabled"), this->hyperlink_auditing_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_universal_access_from_file_urls"), this->allow_universal_access_from_file_urls,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_file_access_from_file_urls"), this->allow_file_access_from_file_urls,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "webgl1_enabled"), this->webgl1_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "webgl2_enabled"), this->webgl2_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pepper_3d_enabled"), this->pepper_3d_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "privileged_webgl_extensions_enabled"), this->privileged_webgl_extensions_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "webgl_errors_to_console_enabled"), this->webgl_errors_to_console_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hide_scrollbars"), this->hide_scrollbars,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "enable_webkit_scrollbar_styling"), this->enable_webkit_scrollbar_styling,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "accelerated_2d_canvas_enabled"), this->accelerated_2d_canvas_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "canvas_2d_layers_enabled"), this->canvas_2d_layers_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "antialiased_2d_canvas_disabled"), this->antialiased_2d_canvas_disabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "antialiased_clips_2d_canvas_enabled"), this->antialiased_clips_2d_canvas_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "accelerated_filters_enabled"), this->accelerated_filters_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "deferred_filters_enabled"), this->deferred_filters_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "container_culling_enabled"), this->container_culling_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_running_insecure_content"), this->allow_running_insecure_content,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disable_reading_from_canvas"), this->disable_reading_from_canvas,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "strict_mixed_content_checking"), this->strict_mixed_content_checking,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "strict_powerful_feature_restrictions"), this->strict_powerful_feature_restrictions,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_geolocation_on_insecure_origins"), this->allow_geolocation_on_insecure_origins,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "strictly_block_blockable_mixed_content"), this->strictly_block_blockable_mixed_content,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "block_mixed_plugin_content"), this->block_mixed_plugin_content,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "password_echo_enabled"), this->password_echo_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "should_clear_document_background"), this->should_clear_document_background,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "enable_scroll_animator"), this->enable_scroll_animator,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "threaded_scrolling_enabled"), this->threaded_scrolling_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "prefers_reduced_motion"), this->prefers_reduced_motion,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "touch_event_feature_detection_enabled"), this->touch_event_feature_detection_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pointer_events_max_touch_points"), this->pointer_events_max_touch_points,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "available_pointer_types"), this->available_pointer_types,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "primary_pointer_type"), this->primary_pointer_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type PointerType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "available_hover_types"), this->available_hover_types,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "primary_hover_type"), this->primary_hover_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type HoverType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "dont_send_key_events_to_javascript"), this->dont_send_key_events_to_javascript,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "barrel_button_for_drag_enabled"), this->barrel_button_for_drag_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sync_xhr_in_documents_enabled"), this->sync_xhr_in_documents_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "target_blank_implies_no_opener_enabled_will_be_removed"), this->target_blank_implies_no_opener_enabled_will_be_removed,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_non_empty_navigator_plugins"), this->allow_non_empty_navigator_plugins,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "number_of_cpu_cores"), this->number_of_cpu_cores,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "editing_behavior"), this->editing_behavior,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EditingBehavior>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "supports_multiple_windows"), this->supports_multiple_windows,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_enabled"), this->viewport_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_meta_enabled"), this->viewport_meta_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "auto_zoom_focused_editable_to_legible_scale"), this->auto_zoom_focused_editable_to_legible_scale,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "shrinks_viewport_contents_to_fit"), this->shrinks_viewport_contents_to_fit,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_style"), this->viewport_style,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ViewportStyle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "smooth_scroll_for_find_enabled"), this->smooth_scroll_for_find_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "main_frame_resizes_are_orientation_changes"), this->main_frame_resizes_are_orientation_changes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "initialize_at_minimum_page_scale"), this->initialize_at_minimum_page_scale,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "smart_insert_delete_enabled"), this->smart_insert_delete_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "spatial_navigation_enabled"), this->spatial_navigation_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "navigate_on_drag_drop"), this->navigate_on_drag_drop,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fake_no_alloc_direct_call_for_testing_enabled"), this->fake_no_alloc_direct_call_for_testing_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "v8_cache_options"), this->v8_cache_options,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::blink::V8CacheOptions>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "record_whole_document"), this->record_whole_document,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stylus_handwriting_enabled"), this->stylus_handwriting_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cookie_enabled"), this->cookie_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "accelerated_video_decode_enabled"), this->accelerated_video_decode_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "animation_policy"), this->animation_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ImageAnimationPolicy>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "user_gesture_required_for_presentation"), this->user_gesture_required_for_presentation,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_tracks_enabled"), this->text_tracks_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_background_color"), this->text_track_background_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_text_color"), this->text_track_text_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_text_size"), this->text_track_text_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_text_shadow"), this->text_track_text_shadow,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_font_family"), this->text_track_font_family,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_font_style"), this->text_track_font_style,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_font_variant"), this->text_track_font_variant,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_window_color"), this->text_track_window_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_window_radius"), this->text_track_window_radius,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_track_margin_percentage"), this->text_track_margin_percentage,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "immersive_mode_enabled"), this->immersive_mode_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "double_tap_to_zoom_enabled"), this->double_tap_to_zoom_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fullscreen_supported"), this->fullscreen_supported,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "text_autosizing_enabled"), this->text_autosizing_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "web_app_scope"), this->web_app_scope,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::KURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "font_scale_factor"), this->font_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "device_scale_adjustment"), this->device_scale_adjustment,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "force_enable_zoom"), this->force_enable_zoom,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_video_poster_url"), this->default_video_poster_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::KURL&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "support_deprecated_target_density_dpi"), this->support_deprecated_target_density_dpi,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "use_legacy_background_size_shorthand_behavior"), this->use_legacy_background_size_shorthand_behavior,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "wide_viewport_quirk"), this->wide_viewport_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "use_wide_viewport"), this->use_wide_viewport,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "force_zero_layout_height"), this->force_zero_layout_height,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_meta_merge_content_quirk"), this->viewport_meta_merge_content_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_meta_non_user_scalable_quirk"), this->viewport_meta_non_user_scalable_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "viewport_meta_zero_values_quirk"), this->viewport_meta_zero_values_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "clobber_user_agent_initial_scale_quirk"), this->clobber_user_agent_initial_scale_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "ignore_main_frame_overflow_hidden_quirk"), this->ignore_main_frame_overflow_hidden_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "report_screen_size_in_physical_pixels_quirk"), this->report_screen_size_in_physical_pixels_quirk,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "reuse_global_for_unowned_main_frame"), this->reuse_global_for_unowned_main_frame,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "spellcheck_enabled_by_default"), this->spellcheck_enabled_by_default,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "video_fullscreen_orientation_lock_enabled"), this->video_fullscreen_orientation_lock_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "video_rotate_to_fullscreen_enabled"), this->video_rotate_to_fullscreen_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "embedded_media_experience_enabled"), this->embedded_media_experience_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "css_hex_alpha_color_enabled"), this->css_hex_alpha_color_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "scroll_top_left_interop_enabled"), this->scroll_top_left_interop_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disable_accelerated_small_canvases"), this->disable_accelerated_small_canvases,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "disable_webauthn"), this->disable_webauthn,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "force_dark_mode_enabled"), this->force_dark_mode_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_minimum_page_scale_factor"), this->default_minimum_page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "default_maximum_page_scale_factor"), this->default_maximum_page_scale_factor,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "hide_download_ui"), this->hide_download_ui,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "presentation_receiver"), this->presentation_receiver,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "media_controls_enabled"), this->media_controls_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "do_not_update_selection_on_mutating_selection_range"), this->do_not_update_selection_on_mutating_selection_range,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "autoplay_policy"), this->autoplay_policy,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type AutoplayPolicy>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "preferred_color_scheme"), this->preferred_color_scheme,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::blink::PreferredColorScheme>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "preferred_contrast"), this->preferred_contrast,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::blink::PreferredContrast>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "low_priority_iframes_threshold"), this->low_priority_iframes_threshold,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EffectiveConnectionType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "picture_in_picture_enabled"), this->picture_in_picture_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "translate_service_available"), this->translate_service_available,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "network_quality_estimator_web_holdback"), this->network_quality_estimator_web_holdback,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type EffectiveConnectionType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "lazy_load_enabled"), this->lazy_load_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "lazy_frame_loading_distance_thresholds_px"), this->lazy_frame_loading_distance_thresholds_px,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<EffectiveConnectionType, int32_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "lazy_image_loading_distance_thresholds_px"), this->lazy_image_loading_distance_thresholds_px,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::HashMap<EffectiveConnectionType, int32_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allow_mixed_content_upgrades"), this->allow_mixed_content_upgrades,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "always_show_focus"), this->always_show_focus,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "touch_drag_drop_enabled"), this->touch_drag_drop_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "webxr_immersive_ar_allowed"), this->webxr_immersive_ar_allowed,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "renderer_wide_named_frame_lookup"), this->renderer_wide_named_frame_lookup,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool WebPreferences::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::WebPreferences::DataView, ::blink::mojom::blink::WebPreferencesPtr>::Read(
    ::blink::mojom::blink::WebPreferences::DataView input,
    ::blink::mojom::blink::WebPreferencesPtr* output) {
  bool success = true;
  ::blink::mojom::blink::WebPreferencesPtr result(::blink::mojom::blink::WebPreferences::New());
  
      if (success && !input.ReadStandardFontFamilyMap(&result->standard_font_family_map))
        success = false;
      if (success && !input.ReadFixedFontFamilyMap(&result->fixed_font_family_map))
        success = false;
      if (success && !input.ReadSerifFontFamilyMap(&result->serif_font_family_map))
        success = false;
      if (success && !input.ReadSansSerifFontFamilyMap(&result->sans_serif_font_family_map))
        success = false;
      if (success && !input.ReadCursiveFontFamilyMap(&result->cursive_font_family_map))
        success = false;
      if (success && !input.ReadFantasyFontFamilyMap(&result->fantasy_font_family_map))
        success = false;
      if (success && !input.ReadMathFontFamilyMap(&result->math_font_family_map))
        success = false;
      if (success)
        result->default_font_size = input.default_font_size();
      if (success)
        result->default_fixed_font_size = input.default_fixed_font_size();
      if (success)
        result->minimum_font_size = input.minimum_font_size();
      if (success)
        result->minimum_logical_font_size = input.minimum_logical_font_size();
      if (success && !input.ReadDefaultEncoding(&result->default_encoding))
        success = false;
      if (success)
        result->context_menu_on_mouse_up = input.context_menu_on_mouse_up();
      if (success)
        result->javascript_enabled = input.javascript_enabled();
      if (success)
        result->web_security_enabled = input.web_security_enabled();
      if (success)
        result->loads_images_automatically = input.loads_images_automatically();
      if (success)
        result->images_enabled = input.images_enabled();
      if (success)
        result->plugins_enabled = input.plugins_enabled();
      if (success)
        result->dom_paste_enabled = input.dom_paste_enabled();
      if (success)
        result->shrinks_standalone_images_to_fit = input.shrinks_standalone_images_to_fit();
      if (success)
        result->text_areas_are_resizable = input.text_areas_are_resizable();
      if (success)
        result->allow_scripts_to_close_windows = input.allow_scripts_to_close_windows();
      if (success)
        result->remote_fonts_enabled = input.remote_fonts_enabled();
      if (success)
        result->javascript_can_access_clipboard = input.javascript_can_access_clipboard();
      if (success)
        result->xslt_enabled = input.xslt_enabled();
      if (success)
        result->dns_prefetching_enabled = input.dns_prefetching_enabled();
      if (success)
        result->data_saver_enabled = input.data_saver_enabled();
      if (success)
        result->local_storage_enabled = input.local_storage_enabled();
      if (success)
        result->databases_enabled = input.databases_enabled();
      if (success)
        result->tabs_to_links = input.tabs_to_links();
      if (success)
        result->disable_ipc_flooding_protection = input.disable_ipc_flooding_protection();
      if (success)
        result->hyperlink_auditing_enabled = input.hyperlink_auditing_enabled();
      if (success)
        result->allow_universal_access_from_file_urls = input.allow_universal_access_from_file_urls();
      if (success)
        result->allow_file_access_from_file_urls = input.allow_file_access_from_file_urls();
      if (success)
        result->webgl1_enabled = input.webgl1_enabled();
      if (success)
        result->webgl2_enabled = input.webgl2_enabled();
      if (success)
        result->pepper_3d_enabled = input.pepper_3d_enabled();
      if (success)
        result->privileged_webgl_extensions_enabled = input.privileged_webgl_extensions_enabled();
      if (success)
        result->webgl_errors_to_console_enabled = input.webgl_errors_to_console_enabled();
      if (success)
        result->hide_scrollbars = input.hide_scrollbars();
      if (success)
        result->enable_webkit_scrollbar_styling = input.enable_webkit_scrollbar_styling();
      if (success)
        result->accelerated_2d_canvas_enabled = input.accelerated_2d_canvas_enabled();
      if (success)
        result->canvas_2d_layers_enabled = input.canvas_2d_layers_enabled();
      if (success)
        result->antialiased_2d_canvas_disabled = input.antialiased_2d_canvas_disabled();
      if (success)
        result->antialiased_clips_2d_canvas_enabled = input.antialiased_clips_2d_canvas_enabled();
      if (success)
        result->accelerated_filters_enabled = input.accelerated_filters_enabled();
      if (success)
        result->deferred_filters_enabled = input.deferred_filters_enabled();
      if (success)
        result->container_culling_enabled = input.container_culling_enabled();
      if (success)
        result->allow_running_insecure_content = input.allow_running_insecure_content();
      if (success)
        result->disable_reading_from_canvas = input.disable_reading_from_canvas();
      if (success)
        result->strict_mixed_content_checking = input.strict_mixed_content_checking();
      if (success)
        result->strict_powerful_feature_restrictions = input.strict_powerful_feature_restrictions();
      if (success)
        result->allow_geolocation_on_insecure_origins = input.allow_geolocation_on_insecure_origins();
      if (success)
        result->strictly_block_blockable_mixed_content = input.strictly_block_blockable_mixed_content();
      if (success)
        result->block_mixed_plugin_content = input.block_mixed_plugin_content();
      if (success)
        result->password_echo_enabled = input.password_echo_enabled();
      if (success)
        result->should_clear_document_background = input.should_clear_document_background();
      if (success)
        result->enable_scroll_animator = input.enable_scroll_animator();
      if (success)
        result->threaded_scrolling_enabled = input.threaded_scrolling_enabled();
      if (success)
        result->prefers_reduced_motion = input.prefers_reduced_motion();
      if (success)
        result->touch_event_feature_detection_enabled = input.touch_event_feature_detection_enabled();
      if (success)
        result->pointer_events_max_touch_points = input.pointer_events_max_touch_points();
      if (success)
        result->available_pointer_types = input.available_pointer_types();
      if (success && !input.ReadPrimaryPointerType(&result->primary_pointer_type))
        success = false;
      if (success)
        result->available_hover_types = input.available_hover_types();
      if (success && !input.ReadPrimaryHoverType(&result->primary_hover_type))
        success = false;
      if (success)
        result->dont_send_key_events_to_javascript = input.dont_send_key_events_to_javascript();
      if (success)
        result->barrel_button_for_drag_enabled = input.barrel_button_for_drag_enabled();
      if (success)
        result->sync_xhr_in_documents_enabled = input.sync_xhr_in_documents_enabled();
      if (success)
        result->target_blank_implies_no_opener_enabled_will_be_removed = input.target_blank_implies_no_opener_enabled_will_be_removed();
      if (success)
        result->allow_non_empty_navigator_plugins = input.allow_non_empty_navigator_plugins();
      if (success)
        result->number_of_cpu_cores = input.number_of_cpu_cores();
      if (success && !input.ReadEditingBehavior(&result->editing_behavior))
        success = false;
      if (success)
        result->supports_multiple_windows = input.supports_multiple_windows();
      if (success)
        result->viewport_enabled = input.viewport_enabled();
      if (success)
        result->viewport_meta_enabled = input.viewport_meta_enabled();
      if (success)
        result->auto_zoom_focused_editable_to_legible_scale = input.auto_zoom_focused_editable_to_legible_scale();
      if (success)
        result->shrinks_viewport_contents_to_fit = input.shrinks_viewport_contents_to_fit();
      if (success && !input.ReadViewportStyle(&result->viewport_style))
        success = false;
      if (success)
        result->smooth_scroll_for_find_enabled = input.smooth_scroll_for_find_enabled();
      if (success)
        result->main_frame_resizes_are_orientation_changes = input.main_frame_resizes_are_orientation_changes();
      if (success)
        result->initialize_at_minimum_page_scale = input.initialize_at_minimum_page_scale();
      if (success)
        result->smart_insert_delete_enabled = input.smart_insert_delete_enabled();
      if (success)
        result->spatial_navigation_enabled = input.spatial_navigation_enabled();
      if (success)
        result->navigate_on_drag_drop = input.navigate_on_drag_drop();
      if (success)
        result->fake_no_alloc_direct_call_for_testing_enabled = input.fake_no_alloc_direct_call_for_testing_enabled();
      if (success && !input.ReadV8CacheOptions(&result->v8_cache_options))
        success = false;
      if (success)
        result->record_whole_document = input.record_whole_document();
      if (success)
        result->stylus_handwriting_enabled = input.stylus_handwriting_enabled();
      if (success)
        result->cookie_enabled = input.cookie_enabled();
      if (success)
        result->accelerated_video_decode_enabled = input.accelerated_video_decode_enabled();
      if (success && !input.ReadAnimationPolicy(&result->animation_policy))
        success = false;
      if (success)
        result->user_gesture_required_for_presentation = input.user_gesture_required_for_presentation();
      if (success)
        result->text_tracks_enabled = input.text_tracks_enabled();
      if (success && !input.ReadTextTrackBackgroundColor(&result->text_track_background_color))
        success = false;
      if (success && !input.ReadTextTrackTextColor(&result->text_track_text_color))
        success = false;
      if (success && !input.ReadTextTrackTextSize(&result->text_track_text_size))
        success = false;
      if (success && !input.ReadTextTrackTextShadow(&result->text_track_text_shadow))
        success = false;
      if (success && !input.ReadTextTrackFontFamily(&result->text_track_font_family))
        success = false;
      if (success && !input.ReadTextTrackFontStyle(&result->text_track_font_style))
        success = false;
      if (success && !input.ReadTextTrackFontVariant(&result->text_track_font_variant))
        success = false;
      if (success && !input.ReadTextTrackWindowColor(&result->text_track_window_color))
        success = false;
      if (success && !input.ReadTextTrackWindowRadius(&result->text_track_window_radius))
        success = false;
      if (success)
        result->text_track_margin_percentage = input.text_track_margin_percentage();
      if (success)
        result->immersive_mode_enabled = input.immersive_mode_enabled();
      if (success)
        result->double_tap_to_zoom_enabled = input.double_tap_to_zoom_enabled();
      if (success)
        result->fullscreen_supported = input.fullscreen_supported();
      if (success)
        result->text_autosizing_enabled = input.text_autosizing_enabled();
      if (success && !input.ReadWebAppScope(&result->web_app_scope))
        success = false;
      if (success)
        result->font_scale_factor = input.font_scale_factor();
      if (success)
        result->device_scale_adjustment = input.device_scale_adjustment();
      if (success)
        result->force_enable_zoom = input.force_enable_zoom();
      if (success && !input.ReadDefaultVideoPosterUrl(&result->default_video_poster_url))
        success = false;
      if (success)
        result->support_deprecated_target_density_dpi = input.support_deprecated_target_density_dpi();
      if (success)
        result->use_legacy_background_size_shorthand_behavior = input.use_legacy_background_size_shorthand_behavior();
      if (success)
        result->wide_viewport_quirk = input.wide_viewport_quirk();
      if (success)
        result->use_wide_viewport = input.use_wide_viewport();
      if (success)
        result->force_zero_layout_height = input.force_zero_layout_height();
      if (success)
        result->viewport_meta_merge_content_quirk = input.viewport_meta_merge_content_quirk();
      if (success)
        result->viewport_meta_non_user_scalable_quirk = input.viewport_meta_non_user_scalable_quirk();
      if (success)
        result->viewport_meta_zero_values_quirk = input.viewport_meta_zero_values_quirk();
      if (success)
        result->clobber_user_agent_initial_scale_quirk = input.clobber_user_agent_initial_scale_quirk();
      if (success)
        result->ignore_main_frame_overflow_hidden_quirk = input.ignore_main_frame_overflow_hidden_quirk();
      if (success)
        result->report_screen_size_in_physical_pixels_quirk = input.report_screen_size_in_physical_pixels_quirk();
      if (success)
        result->reuse_global_for_unowned_main_frame = input.reuse_global_for_unowned_main_frame();
      if (success)
        result->spellcheck_enabled_by_default = input.spellcheck_enabled_by_default();
      if (success)
        result->video_fullscreen_orientation_lock_enabled = input.video_fullscreen_orientation_lock_enabled();
      if (success)
        result->video_rotate_to_fullscreen_enabled = input.video_rotate_to_fullscreen_enabled();
      if (success)
        result->embedded_media_experience_enabled = input.embedded_media_experience_enabled();
      if (success)
        result->css_hex_alpha_color_enabled = input.css_hex_alpha_color_enabled();
      if (success)
        result->scroll_top_left_interop_enabled = input.scroll_top_left_interop_enabled();
      if (success)
        result->disable_accelerated_small_canvases = input.disable_accelerated_small_canvases();
      if (success)
        result->disable_webauthn = input.disable_webauthn();
      if (success)
        result->force_dark_mode_enabled = input.force_dark_mode_enabled();
      if (success)
        result->default_minimum_page_scale_factor = input.default_minimum_page_scale_factor();
      if (success)
        result->default_maximum_page_scale_factor = input.default_maximum_page_scale_factor();
      if (success)
        result->hide_download_ui = input.hide_download_ui();
      if (success)
        result->presentation_receiver = input.presentation_receiver();
      if (success)
        result->media_controls_enabled = input.media_controls_enabled();
      if (success)
        result->do_not_update_selection_on_mutating_selection_range = input.do_not_update_selection_on_mutating_selection_range();
      if (success && !input.ReadAutoplayPolicy(&result->autoplay_policy))
        success = false;
      if (success && !input.ReadPreferredColorScheme(&result->preferred_color_scheme))
        success = false;
      if (success && !input.ReadPreferredContrast(&result->preferred_contrast))
        success = false;
      if (success && !input.ReadLowPriorityIframesThreshold(&result->low_priority_iframes_threshold))
        success = false;
      if (success)
        result->picture_in_picture_enabled = input.picture_in_picture_enabled();
      if (success)
        result->translate_service_available = input.translate_service_available();
      if (success && !input.ReadNetworkQualityEstimatorWebHoldback(&result->network_quality_estimator_web_holdback))
        success = false;
      if (success)
        result->lazy_load_enabled = input.lazy_load_enabled();
      if (success && !input.ReadLazyFrameLoadingDistanceThresholdsPx(&result->lazy_frame_loading_distance_thresholds_px))
        success = false;
      if (success && !input.ReadLazyImageLoadingDistanceThresholdsPx(&result->lazy_image_loading_distance_thresholds_px))
        success = false;
      if (success)
        result->allow_mixed_content_upgrades = input.allow_mixed_content_upgrades();
      if (success)
        result->always_show_focus = input.always_show_focus();
      if (success)
        result->touch_drag_drop_enabled = input.touch_drag_drop_enabled();
      if (success)
        result->webxr_immersive_ar_allowed = input.webxr_immersive_ar_allowed();
      if (success)
        result->renderer_wide_named_frame_lookup = input.renderer_wide_named_frame_lookup();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif