// third_party/blink/public/mojom/render_accessibility.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_RENDER_ACCESSIBILITY_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_RENDER_ACCESSIBILITY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/render_accessibility.mojom-shared-internal.h"
#include "ui/accessibility/ax_enums.mojom-shared.h"
#include "ui/accessibility/mojom/ax_action_data.mojom-shared.h"
#include "ui/accessibility/mojom/ax_event.mojom-shared.h"
#include "ui/accessibility/mojom/ax_relative_bounds.mojom-shared.h"
#include "ui/accessibility/mojom/ax_tree_id.mojom-shared.h"
#include "ui/accessibility/mojom/ax_tree_update.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class LocationChangesDataView;

class HitTestResponseDataView;

class AXUpdatesAndEventsDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::LocationChangesDataView> {
  using Data = ::blink::mojom::internal::LocationChanges_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::HitTestResponseDataView> {
  using Data = ::blink::mojom::internal::HitTestResponse_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AXUpdatesAndEventsDataView> {
  using Data = ::blink::mojom::internal::AXUpdatesAndEvents_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class RenderAccessibilityHostInterfaceBase {};

using RenderAccessibilityHostPtrDataView =
    mojo::InterfacePtrDataView<RenderAccessibilityHostInterfaceBase>;
using RenderAccessibilityHostRequestDataView =
    mojo::InterfaceRequestDataView<RenderAccessibilityHostInterfaceBase>;
using RenderAccessibilityHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RenderAccessibilityHostInterfaceBase>;
using RenderAccessibilityHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RenderAccessibilityHostInterfaceBase>;
class RenderAccessibilityInterfaceBase {};

using RenderAccessibilityPtrDataView =
    mojo::InterfacePtrDataView<RenderAccessibilityInterfaceBase>;
using RenderAccessibilityRequestDataView =
    mojo::InterfaceRequestDataView<RenderAccessibilityInterfaceBase>;
using RenderAccessibilityAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RenderAccessibilityInterfaceBase>;
using RenderAccessibilityAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RenderAccessibilityInterfaceBase>;


class LocationChangesDataView {
 public:
  LocationChangesDataView() = default;

  LocationChangesDataView(
      internal::LocationChanges_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t id() const {
    return data_->id;
  }
  inline void GetNewLocationDataView(
      ::ax::mojom::AXRelativeBoundsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewLocation(UserType* output) {
    
    auto* pointer = data_->new_location.Get();
    return mojo::internal::Deserialize<::ax::mojom::AXRelativeBoundsDataView>(
        pointer, output, message_);
  }
 private:
  internal::LocationChanges_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HitTestResponseDataView {
 public:
  HitTestResponseDataView() = default;

  HitTestResponseDataView(
      internal::HitTestResponse_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHitFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHitFrameToken(UserType* output) {
    
    auto* pointer = !data_->hit_frame_token.is_null() ? &data_->hit_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetHitFrameTransformedPointDataView(
      ::gfx::mojom::PointDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHitFrameTransformedPoint(UserType* output) {
    
    auto* pointer = data_->hit_frame_transformed_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointDataView>(
        pointer, output, message_);
  }
  int32_t hit_node_id() const {
    return data_->hit_node_id;
  }
 private:
  internal::HitTestResponse_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AXUpdatesAndEventsDataView {
 public:
  AXUpdatesAndEventsDataView() = default;

  AXUpdatesAndEventsDataView(
      internal::AXUpdatesAndEvents_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUpdatesDataView(
      mojo::ArrayDataView<::ax::mojom::AXTreeUpdateDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUpdates(UserType* output) {
    
    auto* pointer = data_->updates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::ax::mojom::AXTreeUpdateDataView>>(
        pointer, output, message_);
  }
  inline void GetEventsDataView(
      mojo::ArrayDataView<::ax::mojom::AXEventDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEvents(UserType* output) {
    
    auto* pointer = data_->events.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::ax::mojom::AXEventDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AXUpdatesAndEvents_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::LocationChangesDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::LocationChangesDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::LocationChanges_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->id = Traits::id(input);
    decltype(Traits::new_location(input)) in_new_location = Traits::new_location(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->new_location)::BaseType> new_location_fragment(
            fragment.message());
    mojo::internal::Serialize<::ax::mojom::AXRelativeBoundsDataView>(
        in_new_location, new_location_fragment);
    fragment->new_location.Set(
        new_location_fragment.is_null() ? nullptr : new_location_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->new_location.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null new_location in LocationChanges struct");
  }

  static bool Deserialize(::blink::mojom::internal::LocationChanges_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::LocationChangesDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::HitTestResponseDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::HitTestResponseDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::HitTestResponse_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::hit_frame_token(input)) in_hit_frame_token = Traits::hit_frame_token(input);
    mojo::internal::MessageFragment<decltype(fragment->hit_frame_token)>
        hit_frame_token_fragment(fragment.message());
    hit_frame_token_fragment.Claim(&fragment->hit_frame_token);
    mojo::internal::Serialize<::blink::mojom::FrameTokenDataView>(
        in_hit_frame_token, hit_frame_token_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->hit_frame_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null hit_frame_token in HitTestResponse struct");
    decltype(Traits::hit_frame_transformed_point(input)) in_hit_frame_transformed_point = Traits::hit_frame_transformed_point(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->hit_frame_transformed_point)::BaseType> hit_frame_transformed_point_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointDataView>(
        in_hit_frame_transformed_point, hit_frame_transformed_point_fragment);
    fragment->hit_frame_transformed_point.Set(
        hit_frame_transformed_point_fragment.is_null() ? nullptr : hit_frame_transformed_point_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->hit_frame_transformed_point.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null hit_frame_transformed_point in HitTestResponse struct");
    fragment->hit_node_id = Traits::hit_node_id(input);
  }

  static bool Deserialize(::blink::mojom::internal::HitTestResponse_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::HitTestResponseDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AXUpdatesAndEventsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AXUpdatesAndEventsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AXUpdatesAndEvents_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::updates(input)) in_updates = Traits::updates(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->updates)::BaseType>
        updates_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams updates_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::ax::mojom::AXTreeUpdateDataView>>(
        in_updates, updates_fragment, &updates_validate_params);
    fragment->updates.Set(
        updates_fragment.is_null() ? nullptr : updates_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->updates.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null updates in AXUpdatesAndEvents struct");
    decltype(Traits::events(input)) in_events = Traits::events(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->events)::BaseType>
        events_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams events_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::ax::mojom::AXEventDataView>>(
        in_events, events_fragment, &events_validate_params);
    fragment->events.Set(
        events_fragment.is_null() ? nullptr : events_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->events.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null events in AXUpdatesAndEvents struct");
  }

  static bool Deserialize(::blink::mojom::internal::AXUpdatesAndEvents_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AXUpdatesAndEventsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void LocationChangesDataView::GetNewLocationDataView(
    ::ax::mojom::AXRelativeBoundsDataView* output) {
  auto pointer = data_->new_location.Get();
  *output = ::ax::mojom::AXRelativeBoundsDataView(pointer, message_);
}


inline void HitTestResponseDataView::GetHitFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->hit_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void HitTestResponseDataView::GetHitFrameTransformedPointDataView(
    ::gfx::mojom::PointDataView* output) {
  auto pointer = data_->hit_frame_transformed_point.Get();
  *output = ::gfx::mojom::PointDataView(pointer, message_);
}


inline void AXUpdatesAndEventsDataView::GetUpdatesDataView(
    mojo::ArrayDataView<::ax::mojom::AXTreeUpdateDataView>* output) {
  auto pointer = data_->updates.Get();
  *output = mojo::ArrayDataView<::ax::mojom::AXTreeUpdateDataView>(pointer, message_);
}
inline void AXUpdatesAndEventsDataView::GetEventsDataView(
    mojo::ArrayDataView<::ax::mojom::AXEventDataView>* output) {
  auto pointer = data_->events.Get();
  *output = mojo::ArrayDataView<::ax::mojom::AXEventDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_RENDER_ACCESSIBILITY_MOJOM_SHARED_H_