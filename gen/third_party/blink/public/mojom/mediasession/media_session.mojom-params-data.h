// third_party/blink/public/mojom/mediasession/media_session.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIASESSION_MEDIA_SESSION_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIASESSION_MEDIA_SESSION_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionClient_DidReceiveAction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t action;
  uint8_t pad0_[4];
  internal::MediaSessionActionDetails_Data details;

 private:
  friend class mojo::internal::MessageFragment<MediaSessionClient_DidReceiveAction_Params_Data>;

  MediaSessionClient_DidReceiveAction_Params_Data();
  ~MediaSessionClient_DidReceiveAction_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionClient_DidReceiveAction_Params_Data) == 32,
              "Bad sizeof(MediaSessionClient_DidReceiveAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_SetClient_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client;

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_SetClient_Params_Data>;

  MediaSessionService_SetClient_Params_Data();
  ~MediaSessionService_SetClient_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_SetClient_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_SetClient_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_SetPlaybackState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_SetPlaybackState_Params_Data>;

  MediaSessionService_SetPlaybackState_Params_Data();
  ~MediaSessionService_SetPlaybackState_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_SetPlaybackState_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_SetPlaybackState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_SetPositionState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media_session::mojom::internal::MediaPosition_Data> position;

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_SetPositionState_Params_Data>;

  MediaSessionService_SetPositionState_Params_Data();
  ~MediaSessionService_SetPositionState_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_SetPositionState_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_SetPositionState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_SetMetadata_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SpecMediaMetadata_Data> metadata;

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_SetMetadata_Params_Data>;

  MediaSessionService_SetMetadata_Params_Data();
  ~MediaSessionService_SetMetadata_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_SetMetadata_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_SetMetadata_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_SetMicrophoneState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t microphone_state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_SetMicrophoneState_Params_Data>;

  MediaSessionService_SetMicrophoneState_Params_Data();
  ~MediaSessionService_SetMicrophoneState_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_SetMicrophoneState_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_SetMicrophoneState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_SetCameraState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t camera_state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_SetCameraState_Params_Data>;

  MediaSessionService_SetCameraState_Params_Data();
  ~MediaSessionService_SetCameraState_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_SetCameraState_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_SetCameraState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_EnableAction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t action;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_EnableAction_Params_Data>;

  MediaSessionService_EnableAction_Params_Data();
  ~MediaSessionService_EnableAction_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_EnableAction_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_EnableAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) MediaSessionService_DisableAction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t action;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<MediaSessionService_DisableAction_Params_Data>;

  MediaSessionService_DisableAction_Params_Data();
  ~MediaSessionService_DisableAction_Params_Data() = delete;
};
static_assert(sizeof(MediaSessionService_DisableAction_Params_Data) == 16,
              "Bad sizeof(MediaSessionService_DisableAction_Params_Data)");

}  // namespace internal


class MediaSessionClient_DidReceiveAction_ParamsDataView {
 public:
  MediaSessionClient_DidReceiveAction_ParamsDataView() = default;

  MediaSessionClient_DidReceiveAction_ParamsDataView(
      internal::MediaSessionClient_DidReceiveAction_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::media_session::mojom::MediaSessionAction>(
        data_value, output);
  }
  ::media_session::mojom::MediaSessionAction action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media_session::mojom::MediaSessionAction>(data_->action));
  }
  inline void GetDetailsDataView(
      MediaSessionActionDetailsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDetails(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::MediaSessionActionDetailsDataView, UserType>(),
    "Attempting to read the optional `details` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDetails` instead "
    "of `ReadDetails if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->details.is_null() ? &data_->details : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::MediaSessionActionDetailsDataView>(
        pointer, output, message_);
  }
 private:
  internal::MediaSessionClient_DidReceiveAction_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class MediaSessionService_SetClient_ParamsDataView {
 public:
  MediaSessionService_SetClient_ParamsDataView() = default;

  MediaSessionService_SetClient_ParamsDataView(
      internal::MediaSessionService_SetClient_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::MediaSessionClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::MediaSessionService_SetClient_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class MediaSessionService_SetPlaybackState_ParamsDataView {
 public:
  MediaSessionService_SetPlaybackState_ParamsDataView() = default;

  MediaSessionService_SetPlaybackState_ParamsDataView(
      internal::MediaSessionService_SetPlaybackState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::blink::mojom::MediaSessionPlaybackState>(
        data_value, output);
  }
  MediaSessionPlaybackState state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::MediaSessionPlaybackState>(data_->state));
  }
 private:
  internal::MediaSessionService_SetPlaybackState_Params_Data* data_ = nullptr;
};



class MediaSessionService_SetPositionState_ParamsDataView {
 public:
  MediaSessionService_SetPositionState_ParamsDataView() = default;

  MediaSessionService_SetPositionState_ParamsDataView(
      internal::MediaSessionService_SetPositionState_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPositionDataView(
      ::media_session::mojom::MediaPositionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPosition(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::media_session::mojom::MediaPositionDataView, UserType>(),
    "Attempting to read the optional `position` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPosition` instead "
    "of `ReadPosition if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->position.Get();
    return mojo::internal::Deserialize<::media_session::mojom::MediaPositionDataView>(
        pointer, output, message_);
  }
 private:
  internal::MediaSessionService_SetPositionState_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class MediaSessionService_SetMetadata_ParamsDataView {
 public:
  MediaSessionService_SetMetadata_ParamsDataView() = default;

  MediaSessionService_SetMetadata_ParamsDataView(
      internal::MediaSessionService_SetMetadata_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMetadataDataView(
      SpecMediaMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMetadata(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::SpecMediaMetadataDataView, UserType>(),
    "Attempting to read the optional `metadata` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadMetadata` instead "
    "of `ReadMetadata if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<::blink::mojom::SpecMediaMetadataDataView>(
        pointer, output, message_);
  }
 private:
  internal::MediaSessionService_SetMetadata_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class MediaSessionService_SetMicrophoneState_ParamsDataView {
 public:
  MediaSessionService_SetMicrophoneState_ParamsDataView() = default;

  MediaSessionService_SetMicrophoneState_ParamsDataView(
      internal::MediaSessionService_SetMicrophoneState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMicrophoneState(UserType* output) const {
    auto data_value = data_->microphone_state;
    return mojo::internal::Deserialize<::media_session::mojom::MicrophoneState>(
        data_value, output);
  }
  ::media_session::mojom::MicrophoneState microphone_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media_session::mojom::MicrophoneState>(data_->microphone_state));
  }
 private:
  internal::MediaSessionService_SetMicrophoneState_Params_Data* data_ = nullptr;
};



class MediaSessionService_SetCameraState_ParamsDataView {
 public:
  MediaSessionService_SetCameraState_ParamsDataView() = default;

  MediaSessionService_SetCameraState_ParamsDataView(
      internal::MediaSessionService_SetCameraState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCameraState(UserType* output) const {
    auto data_value = data_->camera_state;
    return mojo::internal::Deserialize<::media_session::mojom::CameraState>(
        data_value, output);
  }
  ::media_session::mojom::CameraState camera_state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media_session::mojom::CameraState>(data_->camera_state));
  }
 private:
  internal::MediaSessionService_SetCameraState_Params_Data* data_ = nullptr;
};



class MediaSessionService_EnableAction_ParamsDataView {
 public:
  MediaSessionService_EnableAction_ParamsDataView() = default;

  MediaSessionService_EnableAction_ParamsDataView(
      internal::MediaSessionService_EnableAction_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::media_session::mojom::MediaSessionAction>(
        data_value, output);
  }
  ::media_session::mojom::MediaSessionAction action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media_session::mojom::MediaSessionAction>(data_->action));
  }
 private:
  internal::MediaSessionService_EnableAction_Params_Data* data_ = nullptr;
};



class MediaSessionService_DisableAction_ParamsDataView {
 public:
  MediaSessionService_DisableAction_ParamsDataView() = default;

  MediaSessionService_DisableAction_ParamsDataView(
      internal::MediaSessionService_DisableAction_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) const {
    auto data_value = data_->action;
    return mojo::internal::Deserialize<::media_session::mojom::MediaSessionAction>(
        data_value, output);
  }
  ::media_session::mojom::MediaSessionAction action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media_session::mojom::MediaSessionAction>(data_->action));
  }
 private:
  internal::MediaSessionService_DisableAction_Params_Data* data_ = nullptr;
};


inline void MediaSessionClient_DidReceiveAction_ParamsDataView::GetDetailsDataView(
    MediaSessionActionDetailsDataView* output) {
  auto pointer = &data_->details;
  *output = MediaSessionActionDetailsDataView(pointer, message_);
}






inline void MediaSessionService_SetPositionState_ParamsDataView::GetPositionDataView(
    ::media_session::mojom::MediaPositionDataView* output) {
  auto pointer = data_->position.Get();
  *output = ::media_session::mojom::MediaPositionDataView(pointer, message_);
}


inline void MediaSessionService_SetMetadata_ParamsDataView::GetMetadataDataView(
    SpecMediaMetadataDataView* output) {
  auto pointer = data_->metadata.Get();
  *output = SpecMediaMetadataDataView(pointer, message_);
}









}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_MEDIASESSION_MEDIA_SESSION_MOJOM_PARAMS_DATA_H_