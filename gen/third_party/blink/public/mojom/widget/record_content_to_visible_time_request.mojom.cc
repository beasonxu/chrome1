// third_party/blink/public/mojom/widget/record_content_to_visible_time_request.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/widget/record_content_to_visible_time_request.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/widget/record_content_to_visible_time_request.mojom-params-data.h"
#include "third_party/blink/public/mojom/widget/record_content_to_visible_time_request.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/widget/record_content_to_visible_time_request.mojom-import-headers.h"
#include "third_party/blink/public/mojom/widget/record_content_to_visible_time_request.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WIDGET_RECORD_CONTENT_TO_VISIBLE_TIME_REQUEST_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WIDGET_RECORD_CONTENT_TO_VISIBLE_TIME_REQUEST_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
RecordContentToVisibleTimeRequest::RecordContentToVisibleTimeRequest()
    : event_start_time(),
      destination_is_loaded(),
      show_reason_tab_switching(false),
      show_reason_bfcache_restore(false) {}

RecordContentToVisibleTimeRequest::RecordContentToVisibleTimeRequest(
    ::base::TimeTicks event_start_time_in,
    bool destination_is_loaded_in,
    bool show_reason_tab_switching_in,
    bool show_reason_bfcache_restore_in)
    : event_start_time(std::move(event_start_time_in)),
      destination_is_loaded(std::move(destination_is_loaded_in)),
      show_reason_tab_switching(std::move(show_reason_tab_switching_in)),
      show_reason_bfcache_restore(std::move(show_reason_bfcache_restore_in)) {}

RecordContentToVisibleTimeRequest::~RecordContentToVisibleTimeRequest() = default;

void RecordContentToVisibleTimeRequest::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "event_start_time"), this->event_start_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "destination_is_loaded"), this->destination_is_loaded,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "show_reason_tab_switching"), this->show_reason_tab_switching,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "show_reason_bfcache_restore"), this->show_reason_bfcache_restore,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool RecordContentToVisibleTimeRequest::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::RecordContentToVisibleTimeRequest::DataView, ::blink::mojom::RecordContentToVisibleTimeRequestPtr>::Read(
    ::blink::mojom::RecordContentToVisibleTimeRequest::DataView input,
    ::blink::mojom::RecordContentToVisibleTimeRequestPtr* output) {
  bool success = true;
  ::blink::mojom::RecordContentToVisibleTimeRequestPtr result(::blink::mojom::RecordContentToVisibleTimeRequest::New());
  
      if (success && !input.ReadEventStartTime(&result->event_start_time))
        success = false;
      if (success)
        result->destination_is_loaded = input.destination_is_loaded();
      if (success)
        result->show_reason_tab_switching = input.show_reason_tab_switching();
      if (success)
        result->show_reason_bfcache_restore = input.show_reason_bfcache_restore();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {




}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif