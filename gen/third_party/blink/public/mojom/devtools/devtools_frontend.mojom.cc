// third_party/blink/public/mojom/devtools/devtools_frontend.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/devtools/devtools_frontend.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/devtools/devtools_frontend.mojom-params-data.h"
#include "third_party/blink/public/mojom/devtools/devtools_frontend.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/devtools/devtools_frontend.mojom-import-headers.h"
#include "third_party/blink/public/mojom/devtools/devtools_frontend.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_FRONTEND_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DEVTOOLS_DEVTOOLS_FRONTEND_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
const char DevToolsFrontend::Name_[] = "blink.mojom.DevToolsFrontend";

DevToolsFrontend::IPCStableHashFunction DevToolsFrontend::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDevToolsFrontend_SetupDevToolsFrontend_Name: {
      return &DevToolsFrontend::SetupDevToolsFrontend_Sym::IPCStableHash;
    }
    case internal::kDevToolsFrontend_SetupDevToolsExtensionAPI_Name: {
      return &DevToolsFrontend::SetupDevToolsExtensionAPI_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DevToolsFrontend::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDevToolsFrontend_SetupDevToolsFrontend_Name:
            return "Receive blink::mojom::DevToolsFrontend::SetupDevToolsFrontend";
      case internal::kDevToolsFrontend_SetupDevToolsExtensionAPI_Name:
            return "Receive blink::mojom::DevToolsFrontend::SetupDevToolsExtensionAPI";
    }
  } else {
    switch (message.name()) {
      case internal::kDevToolsFrontend_SetupDevToolsFrontend_Name:
            return "Receive reply blink::mojom::DevToolsFrontend::SetupDevToolsFrontend";
      case internal::kDevToolsFrontend_SetupDevToolsExtensionAPI_Name:
            return "Receive reply blink::mojom::DevToolsFrontend::SetupDevToolsExtensionAPI";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DevToolsFrontend::SetupDevToolsFrontend_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DevToolsFrontend::SetupDevToolsFrontend");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DevToolsFrontend::SetupDevToolsExtensionAPI_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DevToolsFrontend::SetupDevToolsExtensionAPI");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

DevToolsFrontendProxy::DevToolsFrontendProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DevToolsFrontendProxy::SetupDevToolsFrontend(
    const std::string& in_api_script, ::mojo::PendingAssociatedRemote<DevToolsFrontendHost> in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DevToolsFrontend::SetupDevToolsFrontend", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("api_script"), in_api_script,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host"), in_host,
                        "<value of type ::mojo::PendingAssociatedRemote<DevToolsFrontendHost>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDevToolsFrontend_SetupDevToolsFrontend_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DevToolsFrontend_SetupDevToolsFrontend_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->api_script)::BaseType> api_script_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_api_script, api_script_fragment);
  params->api_script.Set(
      api_script_fragment.is_null() ? nullptr : api_script_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->api_script.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null api_script in DevToolsFrontend.SetupDevToolsFrontend request");
  mojo::internal::Serialize<::blink::mojom::DevToolsFrontendHostAssociatedPtrInfoDataView>(
      in_host, &params->host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid host in DevToolsFrontend.SetupDevToolsFrontend request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DevToolsFrontend::Name_);
  message.set_method_name("SetupDevToolsFrontend");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DevToolsFrontendProxy::SetupDevToolsExtensionAPI(
    const std::string& in_extension_api) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DevToolsFrontend::SetupDevToolsExtensionAPI", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("extension_api"), in_extension_api,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDevToolsFrontend_SetupDevToolsExtensionAPI_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->extension_api)::BaseType> extension_api_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_extension_api, extension_api_fragment);
  params->extension_api.Set(
      extension_api_fragment.is_null() ? nullptr : extension_api_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->extension_api.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null extension_api in DevToolsFrontend.SetupDevToolsExtensionAPI request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DevToolsFrontend::Name_);
  message.set_method_name("SetupDevToolsExtensionAPI");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool DevToolsFrontendStubDispatch::Accept(
    DevToolsFrontend* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDevToolsFrontend_SetupDevToolsFrontend_Name: {

      DCHECK(message->is_serialized());
      internal::DevToolsFrontend_SetupDevToolsFrontend_Params_Data* params =
          reinterpret_cast<internal::DevToolsFrontend_SetupDevToolsFrontend_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_api_script{};
      ::mojo::PendingAssociatedRemote<DevToolsFrontendHost> p_host{};
      DevToolsFrontend_SetupDevToolsFrontend_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadApiScript(&p_api_script))
        success = false;
      if (success) {
        p_host =
            input_data_view.TakeHost<decltype(p_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DevToolsFrontend::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetupDevToolsFrontend(
std::move(p_api_script), 
std::move(p_host));
      return true;
    }
    case internal::kDevToolsFrontend_SetupDevToolsExtensionAPI_Name: {

      DCHECK(message->is_serialized());
      internal::DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data* params =
          reinterpret_cast<internal::DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_extension_api{};
      DevToolsFrontend_SetupDevToolsExtensionAPI_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadExtensionApi(&p_extension_api))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DevToolsFrontend::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetupDevToolsExtensionAPI(
std::move(p_extension_api));
      return true;
    }
  }
  return false;
}

// static
bool DevToolsFrontendStubDispatch::AcceptWithResponder(
    DevToolsFrontend* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDevToolsFrontend_SetupDevToolsFrontend_Name: {
      break;
    }
    case internal::kDevToolsFrontend_SetupDevToolsExtensionAPI_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDevToolsFrontendValidationInfo[] = {
    {&internal::DevToolsFrontend_SetupDevToolsFrontend_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DevToolsFrontend_SetupDevToolsExtensionAPI_Params_Data::Validate,
     nullptr /* no response */},
};

bool DevToolsFrontendRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DevToolsFrontend::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDevToolsFrontendValidationInfo);
}

const char DevToolsFrontendHost::Name_[] = "blink.mojom.DevToolsFrontendHost";

DevToolsFrontendHost::IPCStableHashFunction DevToolsFrontendHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDevToolsFrontendHost_DispatchEmbedderMessage_Name: {
      return &DevToolsFrontendHost::DispatchEmbedderMessage_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DevToolsFrontendHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDevToolsFrontendHost_DispatchEmbedderMessage_Name:
            return "Receive blink::mojom::DevToolsFrontendHost::DispatchEmbedderMessage";
    }
  } else {
    switch (message.name()) {
      case internal::kDevToolsFrontendHost_DispatchEmbedderMessage_Name:
            return "Receive reply blink::mojom::DevToolsFrontendHost::DispatchEmbedderMessage";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DevToolsFrontendHost::DispatchEmbedderMessage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DevToolsFrontendHost::DispatchEmbedderMessage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

DevToolsFrontendHostProxy::DevToolsFrontendHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DevToolsFrontendHostProxy::DispatchEmbedderMessage(
    ::base::Value::Dict in_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DevToolsFrontendHost::DispatchEmbedderMessage", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("message"), in_message,
                        "<value of type ::base::Value::Dict>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDevToolsFrontendHost_DispatchEmbedderMessage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->message)::BaseType> message_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::DictionaryValueDataView>(
      in_message, message_fragment);
  params->message.Set(
      message_fragment.is_null() ? nullptr : message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in DevToolsFrontendHost.DispatchEmbedderMessage request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DevToolsFrontendHost::Name_);
  message.set_method_name("DispatchEmbedderMessage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool DevToolsFrontendHostStubDispatch::Accept(
    DevToolsFrontendHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDevToolsFrontendHost_DispatchEmbedderMessage_Name: {

      DCHECK(message->is_serialized());
      internal::DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data* params =
          reinterpret_cast<internal::DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::base::Value::Dict p_message{};
      DevToolsFrontendHost_DispatchEmbedderMessage_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DevToolsFrontendHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DispatchEmbedderMessage(
std::move(p_message));
      return true;
    }
  }
  return false;
}

// static
bool DevToolsFrontendHostStubDispatch::AcceptWithResponder(
    DevToolsFrontendHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDevToolsFrontendHost_DispatchEmbedderMessage_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDevToolsFrontendHostValidationInfo[] = {
    {&internal::DevToolsFrontendHost_DispatchEmbedderMessage_Params_Data::Validate,
     nullptr /* no response */},
};

bool DevToolsFrontendHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DevToolsFrontendHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDevToolsFrontendHostValidationInfo);
}



}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void DevToolsFrontendInterceptorForTesting::SetupDevToolsFrontend(const std::string& api_script, ::mojo::PendingAssociatedRemote<DevToolsFrontendHost> host) {
  GetForwardingInterface()->SetupDevToolsFrontend(std::move(api_script), std::move(host));
}
void DevToolsFrontendInterceptorForTesting::SetupDevToolsExtensionAPI(const std::string& extension_api) {
  GetForwardingInterface()->SetupDevToolsExtensionAPI(std::move(extension_api));
}
DevToolsFrontendAsyncWaiter::DevToolsFrontendAsyncWaiter(
    DevToolsFrontend* proxy) : proxy_(proxy) {}

DevToolsFrontendAsyncWaiter::~DevToolsFrontendAsyncWaiter() = default;




void DevToolsFrontendHostInterceptorForTesting::DispatchEmbedderMessage(::base::Value::Dict message) {
  GetForwardingInterface()->DispatchEmbedderMessage(std::move(message));
}
DevToolsFrontendHostAsyncWaiter::DevToolsFrontendHostAsyncWaiter(
    DevToolsFrontendHost* proxy) : proxy_(proxy) {}

DevToolsFrontendHostAsyncWaiter::~DevToolsFrontendHostAsyncWaiter() = default;






}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif