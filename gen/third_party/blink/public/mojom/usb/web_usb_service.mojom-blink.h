// third_party/blink/public/mojom/usb/web_usb_service.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_USB_WEB_USB_SERVICE_MOJOM_BLINK_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_USB_WEB_USB_SERVICE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/usb/web_usb_service.mojom-shared.h"
#include "third_party/blink/public/mojom/usb/web_usb_service.mojom-blink-forward.h"
#include "services/device/public/mojom/usb_device.mojom-blink-forward.h"
#include "services/device/public/mojom/usb_enumeration_options.mojom-blink-forward.h"
#include "services/device/public/mojom/usb_manager_client.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/renderer/platform/platform_export.h"




namespace blink {
namespace mojom {
namespace blink {

class WebUsbServiceProxy;

template <typename ImplRefTraits>
class WebUsbServiceStub;

class WebUsbServiceRequestValidator;
class WebUsbServiceResponseValidator;


class PLATFORM_EXPORT WebUsbService
    : public WebUsbServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = WebUsbServiceInterfaceBase;
  using Proxy_ = WebUsbServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = WebUsbServiceStub<ImplRefTraits>;

  using RequestValidator_ = WebUsbServiceRequestValidator;
  using ResponseValidator_ = WebUsbServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetDevicesMinVersion = 0,
    kGetDeviceMinVersion = 0,
    kGetPermissionMinVersion = 0,
    kForgetDeviceMinVersion = 0,
    kSetClientMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetDevices_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetDevice_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetPermission_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ForgetDevice_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetClient_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~WebUsbService() = default;


  using GetDevicesCallback = base::OnceCallback<void(WTF::Vector<::device::mojom::blink::UsbDeviceInfoPtr>)>;
  
  virtual void GetDevices(GetDevicesCallback callback) = 0;

  
  virtual void GetDevice(const WTF::String& guid, ::mojo::PendingReceiver<::device::mojom::blink::UsbDevice> device_receiver) = 0;


  using GetPermissionCallback = base::OnceCallback<void(::device::mojom::blink::UsbDeviceInfoPtr)>;
  
  virtual void GetPermission(WTF::Vector<::device::mojom::blink::UsbDeviceFilterPtr> device_filters, GetPermissionCallback callback) = 0;


  using ForgetDeviceCallback = base::OnceCallback<void()>;
  
  virtual void ForgetDevice(const WTF::String& guid, ForgetDeviceCallback callback) = 0;

  
  virtual void SetClient(::mojo::PendingAssociatedRemote<::device::mojom::blink::UsbDeviceManagerClient> client) = 0;
};



class PLATFORM_EXPORT WebUsbServiceProxy
    : public WebUsbService {
 public:
  using InterfaceType = WebUsbService;

  explicit WebUsbServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetDevices(GetDevicesCallback callback) final;
  
  void GetDevice(const WTF::String& guid, ::mojo::PendingReceiver<::device::mojom::blink::UsbDevice> device_receiver) final;
  
  void GetPermission(WTF::Vector<::device::mojom::blink::UsbDeviceFilterPtr> device_filters, GetPermissionCallback callback) final;
  
  void ForgetDevice(const WTF::String& guid, ForgetDeviceCallback callback) final;
  
  void SetClient(::mojo::PendingAssociatedRemote<::device::mojom::blink::UsbDeviceManagerClient> client) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class PLATFORM_EXPORT WebUsbServiceStubDispatch {
 public:
  static bool Accept(WebUsbService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      WebUsbService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<WebUsbService>>
class WebUsbServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  WebUsbServiceStub() = default;
  ~WebUsbServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebUsbServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return WebUsbServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class PLATFORM_EXPORT WebUsbServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class PLATFORM_EXPORT WebUsbServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_USB_WEB_USB_SERVICE_MOJOM_BLINK_H_