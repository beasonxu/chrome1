// third_party/blink/public/mojom/file_system_access/file_system_access_directory_handle.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_DIRECTORY_HANDLE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_DIRECTORY_HANDLE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::FileSystemAccessEntry_Data>>> entries;
  uint8_t has_more_entries : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data>;

  FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data();
  ~FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data) == 32,
              "Bad sizeof(FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t writable : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data>;

  FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data();
  ~FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_RequestPermission_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t writable : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_RequestPermission_Params_Data>;

  FileSystemAccessDirectoryHandle_RequestPermission_Params_Data();
  ~FileSystemAccessDirectoryHandle_RequestPermission_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_RequestPermission_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_RequestPermission_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> basename;
  uint8_t create : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetFile_Params_Data>;

  FileSystemAccessDirectoryHandle_GetFile_Params_Data();
  ~FileSystemAccessDirectoryHandle_GetFile_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetFile_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetFile_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Interface_Data file;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetDirectory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> basename;
  uint8_t create : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetDirectory_Params_Data>;

  FileSystemAccessDirectoryHandle_GetDirectory_Params_Data();
  ~FileSystemAccessDirectoryHandle_GetDirectory_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetDirectory_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetDirectory_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Interface_Data directory;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_GetEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data listener;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_GetEntries_Params_Data>;

  FileSystemAccessDirectoryHandle_GetEntries_Params_Data();
  ~FileSystemAccessDirectoryHandle_GetEntries_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_GetEntries_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_GetEntries_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Rename_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> new_entry_name;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Rename_Params_Data>;

  FileSystemAccessDirectoryHandle_Rename_Params_Data();
  ~FileSystemAccessDirectoryHandle_Rename_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Rename_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Rename_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Move_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data destination_directory;
  mojo::internal::Pointer<mojo::internal::String_Data> new_entry_name;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Move_Params_Data>;

  FileSystemAccessDirectoryHandle_Move_Params_Data();
  ~FileSystemAccessDirectoryHandle_Move_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Move_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Move_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Move_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Move_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_Move_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_Move_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Move_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Move_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Remove_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t recurse : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Remove_Params_Data>;

  FileSystemAccessDirectoryHandle_Remove_Params_Data();
  ~FileSystemAccessDirectoryHandle_Remove_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Remove_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Remove_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> basename;
  uint8_t recurse : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data>;

  FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data();
  ~FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Resolve_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data possible_child;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Resolve_Params_Data>;

  FileSystemAccessDirectoryHandle_Resolve_Params_Data();
  ~FileSystemAccessDirectoryHandle_Resolve_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Resolve_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Resolve_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FileSystemAccessError_Data> result;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> path;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data>;

  FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data();
  ~FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data) == 24,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessDirectoryHandle_Transfer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data token;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessDirectoryHandle_Transfer_Params_Data>;

  FileSystemAccessDirectoryHandle_Transfer_Params_Data();
  ~FileSystemAccessDirectoryHandle_Transfer_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessDirectoryHandle_Transfer_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessDirectoryHandle_Transfer_Params_Data)");

}  // namespace internal


class FileSystemAccessDirectoryEntriesListener_DidReadDirectory_ParamsDataView {
 public:
  FileSystemAccessDirectoryEntriesListener_DidReadDirectory_ParamsDataView() = default;

  FileSystemAccessDirectoryEntriesListener_DidReadDirectory_ParamsDataView(
      internal::FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  inline void GetEntriesDataView(
      mojo::ArrayDataView<FileSystemAccessEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::FileSystemAccessEntryDataView>>(
        pointer, output, message_);
  }
  bool has_more_entries() const {
    return data_->has_more_entries;
  }
 private:
  internal::FileSystemAccessDirectoryEntriesListener_DidReadDirectory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetPermissionStatus_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetPermissionStatus_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetPermissionStatus_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool writable() const {
    return data_->writable;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetPermissionStatus_Params_Data* data_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetPermissionStatus_ResponseParams_Data* data_ = nullptr;
};



class FileSystemAccessDirectoryHandle_RequestPermission_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_RequestPermission_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_RequestPermission_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_RequestPermission_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool writable() const {
    return data_->writable;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_RequestPermission_Params_Data* data_ = nullptr;
};



class FileSystemAccessDirectoryHandle_RequestPermission_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_RequestPermission_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_RequestPermission_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::FileSystemAccessDirectoryHandle_RequestPermission_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetFile_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetFile_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetFile_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBasenameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBasename(UserType* output) {
    
    auto* pointer = data_->basename.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool create() const {
    return data_->create;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetFile_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetFile_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetFile_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeFile() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessFileHandleInterfaceBase>>(
            &data_->file, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetFile_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetDirectory_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetDirectory_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetDirectory_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetDirectory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBasenameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBasename(UserType* output) {
    
    auto* pointer = data_->basename.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool create() const {
    return data_->create;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetDirectory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetDirectory_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetDirectory_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetDirectory_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeDirectory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessDirectoryHandleInterfaceBase>>(
            &data_->directory, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetDirectory_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_GetEntries_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_GetEntries_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_GetEntries_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_GetEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessDirectoryEntriesListenerInterfaceBase>>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_GetEntries_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Rename_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Rename_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Rename_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Rename_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNewEntryNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewEntryName(UserType* output) {
    
    auto* pointer = data_->new_entry_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Rename_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Rename_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Rename_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Rename_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Rename_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Move_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Move_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Move_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Move_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeDestinationDirectory() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->destination_directory, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetNewEntryNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewEntryName(UserType* output) {
    
    auto* pointer = data_->new_entry_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Move_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Move_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Move_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Move_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Move_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Move_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Remove_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Remove_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Remove_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Remove_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool recurse() const {
    return data_->recurse;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Remove_Params_Data* data_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Remove_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Remove_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Remove_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Remove_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_RemoveEntry_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_RemoveEntry_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_RemoveEntry_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBasenameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBasename(UserType* output) {
    
    auto* pointer = data_->basename.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool recurse() const {
    return data_->recurse;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_RemoveEntry_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Resolve_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Resolve_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Resolve_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Resolve_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePossibleChild() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->possible_child, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Resolve_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Resolve_ResponseParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Resolve_ResponseParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Resolve_ResponseParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      ::blink::mojom::FileSystemAccessErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessErrorDataView>(
        pointer, output, message_);
  }
  inline void GetPathDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `path` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadPath` instead "
    "of `ReadPath if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Resolve_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessDirectoryHandle_Transfer_ParamsDataView {
 public:
  FileSystemAccessDirectoryHandle_Transfer_ParamsDataView() = default;

  FileSystemAccessDirectoryHandle_Transfer_ParamsDataView(
      internal::FileSystemAccessDirectoryHandle_Transfer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessDirectoryHandle_Transfer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void FileSystemAccessDirectoryEntriesListener_DidReadDirectory_ParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}
inline void FileSystemAccessDirectoryEntriesListener_DidReadDirectory_ParamsDataView::GetEntriesDataView(
    mojo::ArrayDataView<FileSystemAccessEntryDataView>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::ArrayDataView<FileSystemAccessEntryDataView>(pointer, message_);
}








inline void FileSystemAccessDirectoryHandle_RequestPermission_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_GetFile_ParamsDataView::GetBasenameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->basename.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_GetFile_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_GetDirectory_ParamsDataView::GetBasenameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->basename.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_GetDirectory_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}




inline void FileSystemAccessDirectoryHandle_Rename_ParamsDataView::GetNewEntryNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_entry_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_Rename_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_Move_ParamsDataView::GetNewEntryNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_entry_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_Move_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}




inline void FileSystemAccessDirectoryHandle_Remove_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_RemoveEntry_ParamsDataView::GetBasenameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->basename.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FileSystemAccessDirectoryHandle_RemoveEntry_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}




inline void FileSystemAccessDirectoryHandle_Resolve_ResponseParamsDataView::GetResultDataView(
    ::blink::mojom::FileSystemAccessErrorDataView* output) {
  auto pointer = data_->result.Get();
  *output = ::blink::mojom::FileSystemAccessErrorDataView(pointer, message_);
}
inline void FileSystemAccessDirectoryHandle_Resolve_ResponseParamsDataView::GetPathDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->path.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_DIRECTORY_HANDLE_MOJOM_PARAMS_DATA_H_