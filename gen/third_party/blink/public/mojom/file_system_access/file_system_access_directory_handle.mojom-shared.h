// third_party/blink/public/mojom/file_system_access/file_system_access_directory_handle.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_DIRECTORY_HANDLE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_DIRECTORY_HANDLE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/file_system_access/file_system_access_directory_handle.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_error.mojom-shared.h"
#include "third_party/blink/public/mojom/file_system_access/file_system_access_transfer_token.mojom-shared.h"
#include "third_party/blink/public/mojom/permissions/permission_status.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class FileSystemAccessEntryDataView;

class FileSystemAccessHandleDataView;


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::FileSystemAccessEntryDataView> {
  using Data = ::blink::mojom::internal::FileSystemAccessEntry_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::FileSystemAccessHandleDataView> {
  using Data = ::blink::mojom::internal::FileSystemAccessHandle_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class FileSystemAccessDirectoryEntriesListenerInterfaceBase {};

using FileSystemAccessDirectoryEntriesListenerPtrDataView =
    mojo::InterfacePtrDataView<FileSystemAccessDirectoryEntriesListenerInterfaceBase>;
using FileSystemAccessDirectoryEntriesListenerRequestDataView =
    mojo::InterfaceRequestDataView<FileSystemAccessDirectoryEntriesListenerInterfaceBase>;
using FileSystemAccessDirectoryEntriesListenerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FileSystemAccessDirectoryEntriesListenerInterfaceBase>;
using FileSystemAccessDirectoryEntriesListenerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FileSystemAccessDirectoryEntriesListenerInterfaceBase>;
class FileSystemAccessDirectoryHandleInterfaceBase {};

using FileSystemAccessDirectoryHandlePtrDataView =
    mojo::InterfacePtrDataView<FileSystemAccessDirectoryHandleInterfaceBase>;
using FileSystemAccessDirectoryHandleRequestDataView =
    mojo::InterfaceRequestDataView<FileSystemAccessDirectoryHandleInterfaceBase>;
using FileSystemAccessDirectoryHandleAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<FileSystemAccessDirectoryHandleInterfaceBase>;
using FileSystemAccessDirectoryHandleAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<FileSystemAccessDirectoryHandleInterfaceBase>;


class FileSystemAccessEntryDataView {
 public:
  FileSystemAccessEntryDataView() = default;

  FileSystemAccessEntryDataView(
      internal::FileSystemAccessEntry_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntryHandleDataView(
      FileSystemAccessHandleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntryHandle(UserType* output) {
    
    auto* pointer = !data_->entry_handle.is_null() ? &data_->entry_handle : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FileSystemAccessHandleDataView>(
        pointer, output, message_);
  }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessEntry_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessHandleDataView {
 public:
  using Tag = internal::FileSystemAccessHandle_Data::FileSystemAccessHandle_Tag;

  FileSystemAccessHandleDataView() = default;

  FileSystemAccessHandleDataView(
      internal::FileSystemAccessHandle_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_file() const { return data_->tag == Tag::kFile; }
  template <typename UserType>
  UserType TakeFile() {
    CHECK(is_file());
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessFileHandleInterfaceBase>>(
            &data_->data.f_file, &result, message_);
    CHECK(ret);
    return result;
  }
  bool is_directory() const { return data_->tag == Tag::kDirectory; }
  template <typename UserType>
  UserType TakeDirectory() {
    CHECK(is_directory());
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessDirectoryHandleInterfaceBase>>(
            &data_->data.f_directory, &result, message_);
    CHECK(ret);
    return result;
  }

 private:
  internal::FileSystemAccessHandle_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FileSystemAccessEntryDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::FileSystemAccessEntryDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::FileSystemAccessEntry_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::entry_handle(input)) in_entry_handle = Traits::entry_handle(input);
    mojo::internal::MessageFragment<decltype(fragment->entry_handle)>
        entry_handle_fragment(fragment.message());
    entry_handle_fragment.Claim(&fragment->entry_handle);
    mojo::internal::Serialize<::blink::mojom::FileSystemAccessHandleDataView>(
        in_entry_handle, entry_handle_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->entry_handle.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null entry_handle in FileSystemAccessEntry struct");
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in FileSystemAccessEntry struct");
  }

  static bool Deserialize(::blink::mojom::internal::FileSystemAccessEntry_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FileSystemAccessEntryDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::FileSystemAccessHandleDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::FileSystemAccessHandleDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::FileSystemAccessHandle_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::FileSystemAccessHandleDataView::Tag::kFile: {
        decltype(Traits::file(input))
            in_file = Traits::file(input);
        mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessFileHandleInterfaceBase>>(
            in_file, &fragment->data.f_file, &fragment.message());
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            !mojo::internal::IsHandleOrInterfaceValid(fragment->data.f_file),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
            "invalid file in FileSystemAccessHandle union");
        break;
      }
      case ::blink::mojom::FileSystemAccessHandleDataView::Tag::kDirectory: {
        decltype(Traits::directory(input))
            in_directory = Traits::directory(input);
        mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessDirectoryHandleInterfaceBase>>(
            in_directory, &fragment->data.f_directory, &fragment.message());
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            !mojo::internal::IsHandleOrInterfaceValid(fragment->data.f_directory),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
            "invalid directory in FileSystemAccessHandle union");
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::FileSystemAccessHandle_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::FileSystemAccessHandleDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void FileSystemAccessEntryDataView::GetEntryHandleDataView(
    FileSystemAccessHandleDataView* output) {
  auto pointer = &data_->entry_handle;
  *output = FileSystemAccessHandleDataView(pointer, message_);
}
inline void FileSystemAccessEntryDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}




}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_DIRECTORY_HANDLE_MOJOM_SHARED_H_