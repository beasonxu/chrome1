// third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  File as mojoBase_mojom_File,
  FileSpec as mojoBase_mojom_FileSpec
} from '../../../../../mojo/public/mojom/base/file.mojom.m.js';

import {
  FileInfo as mojoBase_mojom_FileInfo,
  FileInfoSpec as mojoBase_mojom_FileInfoSpec
} from '../../../../../mojo/public/mojom/base/file_info.mojom.m.js';

import {
  SerializedBlob as blink_mojom_SerializedBlob,
  SerializedBlobSpec as blink_mojom_SerializedBlobSpec
} from '../blob/serialized_blob.mojom.m.js';

import {
  PermissionStatus as blink_mojom_PermissionStatus,
  PermissionStatusSpec as blink_mojom_PermissionStatusSpec
} from '../permissions/permission_status.mojom.m.js';

import {
  FileSystemAccessAccessHandleHostRemote as blink_mojom_FileSystemAccessAccessHandleHostRemote,
  FileSystemAccessAccessHandleHostPendingReceiver as blink_mojom_FileSystemAccessAccessHandleHostPendingReceiver
} from './file_system_access_access_handle_host.mojom.m.js';

import {
  FileSystemAccessCapacityAllocationHostRemote as blink_mojom_FileSystemAccessCapacityAllocationHostRemote,
  FileSystemAccessCapacityAllocationHostPendingReceiver as blink_mojom_FileSystemAccessCapacityAllocationHostPendingReceiver
} from './file_system_access_capacity_allocation_host.mojom.m.js';

import {
  FileSystemAccessError as blink_mojom_FileSystemAccessError,
  FileSystemAccessErrorSpec as blink_mojom_FileSystemAccessErrorSpec
} from './file_system_access_error.mojom.m.js';

import {
  FileSystemAccessFileDelegateHostRemote as blink_mojom_FileSystemAccessFileDelegateHostRemote,
  FileSystemAccessFileDelegateHostPendingReceiver as blink_mojom_FileSystemAccessFileDelegateHostPendingReceiver
} from './file_system_access_file_delegate_host.mojom.m.js';

import {
  FileSystemAccessFileWriterRemote as blink_mojom_FileSystemAccessFileWriterRemote,
  FileSystemAccessFileWriterPendingReceiver as blink_mojom_FileSystemAccessFileWriterPendingReceiver
} from './file_system_access_file_writer.mojom.m.js';

import {
  FileSystemAccessTransferTokenRemote as blink_mojom_FileSystemAccessTransferTokenRemote,
  FileSystemAccessTransferTokenPendingReceiver as blink_mojom_FileSystemAccessTransferTokenPendingReceiver
} from './file_system_access_transfer_token.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class FileSystemAccessFileHandlePendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.FileSystemAccessFileHandle', scope);
  }
}

/** @interface */
export class FileSystemAccessFileHandleInterface {
  
  /**
   * @param { !boolean } writable
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  getPermissionStatus(writable) {}
  
  /**
   * @param { !boolean } writable
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  requestPermission(writable) {}
  
  /**
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        info: !mojoBase_mojom_FileInfo,
        blob: ?blink_mojom_SerializedBlob,
   *  }>}
   */

  asBlob() {}
  
  /**
   * @param { !boolean } keepExistingData
   * @param { !boolean } autoClose
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        writer: ?blink_mojom_FileSystemAccessFileWriterRemote,
   *  }>}
   */

  createFileWriter(keepExistingData, autoClose) {}
  
  /**
   * @param { !string } newEntryName
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
   *  }>}
   */

  rename(newEntryName) {}
  
  /**
   * @param { !blink_mojom_FileSystemAccessTransferTokenRemote } destinationDirectory
   * @param { !string } newEntryName
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
   *  }>}
   */

  move(destinationDirectory, newEntryName) {}
  
  /**
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
   *  }>}
   */

  remove() {}
  
  /**
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        file: ?FileSystemAccessAccessHandleFile,
        accessHandleHost: ?blink_mojom_FileSystemAccessAccessHandleHostRemote,
   *  }>}
   */

  openAccessHandle() {}
  
  /**
   * @param { !blink_mojom_FileSystemAccessTransferTokenRemote } other
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        isSame: !boolean,
   *  }>}
   */

  isSameEntry(other) {}
  
  /**
   * @param { !blink_mojom_FileSystemAccessTransferTokenPendingReceiver } token
   */

  transfer(token) {}
}

/**
 * @implements { FileSystemAccessFileHandleInterface }
 */
export class FileSystemAccessFileHandleRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!FileSystemAccessFileHandlePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          FileSystemAccessFileHandlePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!FileSystemAccessFileHandlePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !boolean } writable
   * @return {!Promise<{
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  getPermissionStatus(
      writable) {
    return this.proxy.sendMessage(
        0,
        FileSystemAccessFileHandle_GetPermissionStatus_ParamsSpec.$,
        FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsSpec.$,
        [
          writable
        ]);
  }

  
  /**
   * @param { !boolean } writable
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        status: !blink_mojom_PermissionStatus,
   *  }>}
   */

  requestPermission(
      writable) {
    return this.proxy.sendMessage(
        1,
        FileSystemAccessFileHandle_RequestPermission_ParamsSpec.$,
        FileSystemAccessFileHandle_RequestPermission_ResponseParamsSpec.$,
        [
          writable
        ]);
  }

  
  /**
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        info: !mojoBase_mojom_FileInfo,
        blob: ?blink_mojom_SerializedBlob,
   *  }>}
   */

  asBlob() {
    return this.proxy.sendMessage(
        2,
        FileSystemAccessFileHandle_AsBlob_ParamsSpec.$,
        FileSystemAccessFileHandle_AsBlob_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !boolean } keepExistingData
   * @param { !boolean } autoClose
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        writer: ?blink_mojom_FileSystemAccessFileWriterRemote,
   *  }>}
   */

  createFileWriter(
      keepExistingData,
      autoClose) {
    return this.proxy.sendMessage(
        3,
        FileSystemAccessFileHandle_CreateFileWriter_ParamsSpec.$,
        FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsSpec.$,
        [
          keepExistingData,
          autoClose
        ]);
  }

  
  /**
   * @param { !string } newEntryName
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
   *  }>}
   */

  rename(
      newEntryName) {
    return this.proxy.sendMessage(
        4,
        FileSystemAccessFileHandle_Rename_ParamsSpec.$,
        FileSystemAccessFileHandle_Rename_ResponseParamsSpec.$,
        [
          newEntryName
        ]);
  }

  
  /**
   * @param { !blink_mojom_FileSystemAccessTransferTokenRemote } destinationDirectory
   * @param { !string } newEntryName
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
   *  }>}
   */

  move(
      destinationDirectory,
      newEntryName) {
    return this.proxy.sendMessage(
        5,
        FileSystemAccessFileHandle_Move_ParamsSpec.$,
        FileSystemAccessFileHandle_Move_ResponseParamsSpec.$,
        [
          destinationDirectory,
          newEntryName
        ]);
  }

  
  /**
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
   *  }>}
   */

  remove() {
    return this.proxy.sendMessage(
        6,
        FileSystemAccessFileHandle_Remove_ParamsSpec.$,
        FileSystemAccessFileHandle_Remove_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        file: ?FileSystemAccessAccessHandleFile,
        accessHandleHost: ?blink_mojom_FileSystemAccessAccessHandleHostRemote,
   *  }>}
   */

  openAccessHandle() {
    return this.proxy.sendMessage(
        7,
        FileSystemAccessFileHandle_OpenAccessHandle_ParamsSpec.$,
        FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !blink_mojom_FileSystemAccessTransferTokenRemote } other
   * @return {!Promise<{
        result: !blink_mojom_FileSystemAccessError,
        isSame: !boolean,
   *  }>}
   */

  isSameEntry(
      other) {
    return this.proxy.sendMessage(
        8,
        FileSystemAccessFileHandle_IsSameEntry_ParamsSpec.$,
        FileSystemAccessFileHandle_IsSameEntry_ResponseParamsSpec.$,
        [
          other
        ]);
  }

  
  /**
   * @param { !blink_mojom_FileSystemAccessTransferTokenPendingReceiver } token
   */

  transfer(
      token) {
    this.proxy.sendMessage(
        9,
        FileSystemAccessFileHandle_Transfer_ParamsSpec.$,
        null,
        [
          token
        ]);
  }
}

/**
 * An object which receives request messages for the FileSystemAccessFileHandle
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class FileSystemAccessFileHandleReceiver {
  /**
   * @param {!FileSystemAccessFileHandleInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!FileSystemAccessFileHandleRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        FileSystemAccessFileHandleRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!FileSystemAccessFileHandleRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        FileSystemAccessFileHandle_GetPermissionStatus_ParamsSpec.$,
        FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsSpec.$,
        impl.getPermissionStatus.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        FileSystemAccessFileHandle_RequestPermission_ParamsSpec.$,
        FileSystemAccessFileHandle_RequestPermission_ResponseParamsSpec.$,
        impl.requestPermission.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        FileSystemAccessFileHandle_AsBlob_ParamsSpec.$,
        FileSystemAccessFileHandle_AsBlob_ResponseParamsSpec.$,
        impl.asBlob.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        FileSystemAccessFileHandle_CreateFileWriter_ParamsSpec.$,
        FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsSpec.$,
        impl.createFileWriter.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        FileSystemAccessFileHandle_Rename_ParamsSpec.$,
        FileSystemAccessFileHandle_Rename_ResponseParamsSpec.$,
        impl.rename.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        FileSystemAccessFileHandle_Move_ParamsSpec.$,
        FileSystemAccessFileHandle_Move_ResponseParamsSpec.$,
        impl.move.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        FileSystemAccessFileHandle_Remove_ParamsSpec.$,
        FileSystemAccessFileHandle_Remove_ResponseParamsSpec.$,
        impl.remove.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        FileSystemAccessFileHandle_OpenAccessHandle_ParamsSpec.$,
        FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsSpec.$,
        impl.openAccessHandle.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        FileSystemAccessFileHandle_IsSameEntry_ParamsSpec.$,
        FileSystemAccessFileHandle_IsSameEntry_ResponseParamsSpec.$,
        impl.isSameEntry.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        FileSystemAccessFileHandle_Transfer_ParamsSpec.$,
        null,
        impl.transfer.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class FileSystemAccessFileHandle {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.FileSystemAccessFileHandle";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!FileSystemAccessFileHandleRemote}
   */
  static getRemote() {
    let remote = new FileSystemAccessFileHandleRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the FileSystemAccessFileHandle
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class FileSystemAccessFileHandleCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      FileSystemAccessFileHandleRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!FileSystemAccessFileHandleRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getPermissionStatus =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        FileSystemAccessFileHandle_GetPermissionStatus_ParamsSpec.$,
        FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsSpec.$,
        this.getPermissionStatus.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestPermission =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        FileSystemAccessFileHandle_RequestPermission_ParamsSpec.$,
        FileSystemAccessFileHandle_RequestPermission_ResponseParamsSpec.$,
        this.requestPermission.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.asBlob =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        FileSystemAccessFileHandle_AsBlob_ParamsSpec.$,
        FileSystemAccessFileHandle_AsBlob_ResponseParamsSpec.$,
        this.asBlob.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createFileWriter =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        FileSystemAccessFileHandle_CreateFileWriter_ParamsSpec.$,
        FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsSpec.$,
        this.createFileWriter.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.rename =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        FileSystemAccessFileHandle_Rename_ParamsSpec.$,
        FileSystemAccessFileHandle_Rename_ResponseParamsSpec.$,
        this.rename.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.move =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        FileSystemAccessFileHandle_Move_ParamsSpec.$,
        FileSystemAccessFileHandle_Move_ResponseParamsSpec.$,
        this.move.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.remove =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        FileSystemAccessFileHandle_Remove_ParamsSpec.$,
        FileSystemAccessFileHandle_Remove_ResponseParamsSpec.$,
        this.remove.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.openAccessHandle =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        FileSystemAccessFileHandle_OpenAccessHandle_ParamsSpec.$,
        FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsSpec.$,
        this.openAccessHandle.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.isSameEntry =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        FileSystemAccessFileHandle_IsSameEntry_ParamsSpec.$,
        FileSystemAccessFileHandle_IsSameEntry_ResponseParamsSpec.$,
        this.isSameEntry.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.transfer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        FileSystemAccessFileHandle_Transfer_ParamsSpec.$,
        null,
        this.transfer.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessRegularFileSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_GetPermissionStatus_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_RequestPermission_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_RequestPermission_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_AsBlob_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_AsBlob_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_CreateFileWriter_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Rename_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Rename_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Move_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Move_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Remove_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Remove_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_OpenAccessHandle_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_IsSameEntry_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_IsSameEntry_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const FileSystemAccessFileHandle_Transfer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const FileSystemAccessAccessHandleFileSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    FileSystemAccessRegularFileSpec.$,
    'FileSystemAccessRegularFile',
    [
      mojo.internal.StructField(
        'osFile', 0,
        0,
        mojoBase_mojom_FileSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fileSize', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'capacityAllocationHost', 16,
        0,
        mojo.internal.InterfaceProxy(blink_mojom_FileSystemAccessCapacityAllocationHostRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class FileSystemAccessRegularFile {
  constructor() {
    /** @type { !mojoBase_mojom_File } */
    this.osFile;
    /** @type { !bigint } */
    this.fileSize;
    /** @type { !blink_mojom_FileSystemAccessCapacityAllocationHostRemote } */
    this.capacityAllocationHost;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_GetPermissionStatus_ParamsSpec.$,
    'FileSystemAccessFileHandle_GetPermissionStatus_Params',
    [
      mojo.internal.StructField(
        'writable', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_GetPermissionStatus_Params {
  constructor() {
    /** @type { !boolean } */
    this.writable;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_GetPermissionStatus_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_GetPermissionStatus_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_PermissionStatus } */
    this.status;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_RequestPermission_ParamsSpec.$,
    'FileSystemAccessFileHandle_RequestPermission_Params',
    [
      mojo.internal.StructField(
        'writable', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_RequestPermission_Params {
  constructor() {
    /** @type { !boolean } */
    this.writable;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_RequestPermission_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_RequestPermission_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'status', 8,
        0,
        blink_mojom_PermissionStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_RequestPermission_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
    /** @type { !blink_mojom_PermissionStatus } */
    this.status;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_AsBlob_ParamsSpec.$,
    'FileSystemAccessFileHandle_AsBlob_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_AsBlob_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_AsBlob_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_AsBlob_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'info', 8,
        0,
        mojoBase_mojom_FileInfoSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'blob', 16,
        0,
        blink_mojom_SerializedBlobSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_AsBlob_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
    /** @type { !mojoBase_mojom_FileInfo } */
    this.info;
    /** @type { (blink_mojom_SerializedBlob|undefined) } */
    this.blob;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_CreateFileWriter_ParamsSpec.$,
    'FileSystemAccessFileHandle_CreateFileWriter_Params',
    [
      mojo.internal.StructField(
        'keepExistingData', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'autoClose', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_CreateFileWriter_Params {
  constructor() {
    /** @type { !boolean } */
    this.keepExistingData;
    /** @type { !boolean } */
    this.autoClose;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_CreateFileWriter_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_CreateFileWriter_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'writer', 8,
        0,
        mojo.internal.InterfaceProxy(blink_mojom_FileSystemAccessFileWriterRemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_CreateFileWriter_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
    /** @type { (blink_mojom_FileSystemAccessFileWriterRemote|undefined) } */
    this.writer;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Rename_ParamsSpec.$,
    'FileSystemAccessFileHandle_Rename_Params',
    [
      mojo.internal.StructField(
        'newEntryName', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Rename_Params {
  constructor() {
    /** @type { !string } */
    this.newEntryName;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Rename_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_Rename_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Rename_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Move_ParamsSpec.$,
    'FileSystemAccessFileHandle_Move_Params',
    [
      mojo.internal.StructField(
        'destinationDirectory', 0,
        0,
        mojo.internal.InterfaceProxy(blink_mojom_FileSystemAccessTransferTokenRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'newEntryName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Move_Params {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessTransferTokenRemote } */
    this.destinationDirectory;
    /** @type { !string } */
    this.newEntryName;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Move_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_Move_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Move_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Remove_ParamsSpec.$,
    'FileSystemAccessFileHandle_Remove_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Remove_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Remove_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_Remove_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Remove_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_OpenAccessHandle_ParamsSpec.$,
    'FileSystemAccessFileHandle_OpenAccessHandle_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_OpenAccessHandle_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_OpenAccessHandle_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'file', 8,
        0,
        FileSystemAccessAccessHandleFileSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'accessHandleHost', 24,
        0,
        mojo.internal.InterfaceProxy(blink_mojom_FileSystemAccessAccessHandleHostRemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_OpenAccessHandle_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
    /** @type { (FileSystemAccessAccessHandleFile|undefined) } */
    this.file;
    /** @type { (blink_mojom_FileSystemAccessAccessHandleHostRemote|undefined) } */
    this.accessHandleHost;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_IsSameEntry_ParamsSpec.$,
    'FileSystemAccessFileHandle_IsSameEntry_Params',
    [
      mojo.internal.StructField(
        'other', 0,
        0,
        mojo.internal.InterfaceProxy(blink_mojom_FileSystemAccessTransferTokenRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_IsSameEntry_Params {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessTransferTokenRemote } */
    this.other;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_IsSameEntry_ResponseParamsSpec.$,
    'FileSystemAccessFileHandle_IsSameEntry_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        blink_mojom_FileSystemAccessErrorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isSame', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_IsSameEntry_ResponseParams {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessError } */
    this.result;
    /** @type { !boolean } */
    this.isSame;
  }
}



mojo.internal.Struct(
    FileSystemAccessFileHandle_Transfer_ParamsSpec.$,
    'FileSystemAccessFileHandle_Transfer_Params',
    [
      mojo.internal.StructField(
        'token', 0,
        0,
        mojo.internal.InterfaceRequest(blink_mojom_FileSystemAccessTransferTokenPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class FileSystemAccessFileHandle_Transfer_Params {
  constructor() {
    /** @type { !blink_mojom_FileSystemAccessTransferTokenPendingReceiver } */
    this.token;
  }
}

mojo.internal.Union(
    FileSystemAccessAccessHandleFileSpec.$, 'FileSystemAccessAccessHandleFile',
    {
      'regularFile': {
        'ordinal': 0,
        'type': FileSystemAccessRegularFileSpec.$,
      },
      'incognitoFileDelegate': {
        'ordinal': 1,
        'type': mojo.internal.InterfaceProxy(blink_mojom_FileSystemAccessFileDelegateHostRemote),
      },
    });

/**
 * @typedef { {
 *   regularFile: (!FileSystemAccessRegularFile|undefined),
 *   incognitoFileDelegate: (!blink_mojom_FileSystemAccessFileDelegateHostRemote|undefined),
 * } }
 */
export const FileSystemAccessAccessHandleFile = {};
