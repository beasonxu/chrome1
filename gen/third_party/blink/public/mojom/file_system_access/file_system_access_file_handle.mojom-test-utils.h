// third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/file_system_access/file_system_access_file_handle.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT FileSystemAccessFileHandleInterceptorForTesting : public FileSystemAccessFileHandle {
  virtual FileSystemAccessFileHandle* GetForwardingInterface() = 0;
  void GetPermissionStatus(bool writable, GetPermissionStatusCallback callback) override;
  void RequestPermission(bool writable, RequestPermissionCallback callback) override;
  void AsBlob(AsBlobCallback callback) override;
  void CreateFileWriter(bool keep_existing_data, bool auto_close, CreateFileWriterCallback callback) override;
  void Rename(const std::string& new_entry_name, RenameCallback callback) override;
  void Move(::mojo::PendingRemote<::blink::mojom::FileSystemAccessTransferToken> destination_directory, const std::string& new_entry_name, MoveCallback callback) override;
  void Remove(RemoveCallback callback) override;
  void OpenAccessHandle(OpenAccessHandleCallback callback) override;
  void IsSameEntry(::mojo::PendingRemote<::blink::mojom::FileSystemAccessTransferToken> other, IsSameEntryCallback callback) override;
  void Transfer(::mojo::PendingReceiver<::blink::mojom::FileSystemAccessTransferToken> token) override;
};
class BLINK_COMMON_EXPORT FileSystemAccessFileHandleAsyncWaiter {
 public:
  explicit FileSystemAccessFileHandleAsyncWaiter(FileSystemAccessFileHandle* proxy);

  FileSystemAccessFileHandleAsyncWaiter(const FileSystemAccessFileHandleAsyncWaiter&) = delete;
  FileSystemAccessFileHandleAsyncWaiter& operator=(const FileSystemAccessFileHandleAsyncWaiter&) = delete;

  ~FileSystemAccessFileHandleAsyncWaiter();
  void GetPermissionStatus(
      bool writable, ::blink::mojom::PermissionStatus* out_status);
  void RequestPermission(
      bool writable, ::blink::mojom::FileSystemAccessErrorPtr* out_result, ::blink::mojom::PermissionStatus* out_status);
  void AsBlob(
      ::blink::mojom::FileSystemAccessErrorPtr* out_result, ::base::File::Info* out_info, ::blink::mojom::SerializedBlobPtr* out_blob);
  void CreateFileWriter(
      bool keep_existing_data, bool auto_close, ::blink::mojom::FileSystemAccessErrorPtr* out_result, ::mojo::PendingRemote<::blink::mojom::FileSystemAccessFileWriter>* out_writer);
  void Rename(
      const std::string& new_entry_name, ::blink::mojom::FileSystemAccessErrorPtr* out_result);
  void Move(
      ::mojo::PendingRemote<::blink::mojom::FileSystemAccessTransferToken> destination_directory, const std::string& new_entry_name, ::blink::mojom::FileSystemAccessErrorPtr* out_result);
  void Remove(
      ::blink::mojom::FileSystemAccessErrorPtr* out_result);
  void OpenAccessHandle(
      ::blink::mojom::FileSystemAccessErrorPtr* out_result, FileSystemAccessAccessHandleFilePtr* out_file, ::mojo::PendingRemote<::blink::mojom::FileSystemAccessAccessHandleHost>* out_access_handle_host);
  void IsSameEntry(
      ::mojo::PendingRemote<::blink::mojom::FileSystemAccessTransferToken> other, ::blink::mojom::FileSystemAccessErrorPtr* out_result, bool* out_is_same);

 private:
  FileSystemAccessFileHandle* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_FILE_HANDLE_MOJOM_TEST_UTILS_H_