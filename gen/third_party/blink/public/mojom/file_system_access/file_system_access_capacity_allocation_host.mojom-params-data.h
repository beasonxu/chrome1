// third_party/blink/public/mojom/file_system_access/file_system_access_capacity_allocation_host.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_CAPACITY_ALLOCATION_HOST_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_CAPACITY_ALLOCATION_HOST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t capacity_delta;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data>;

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data();
  ~FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t granted_capacity_delta;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data>;

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data();
  ~FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data)");

}  // namespace internal


class FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsDataView {
 public:
  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsDataView() = default;

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ParamsDataView(
      internal::FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t capacity_delta() const {
    return data_->capacity_delta;
  }
 private:
  internal::FileSystemAccessCapacityAllocationHost_RequestCapacityChange_Params_Data* data_ = nullptr;
};



class FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsDataView {
 public:
  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsDataView() = default;

  FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParamsDataView(
      internal::FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t granted_capacity_delta() const {
    return data_->granted_capacity_delta;
  }
 private:
  internal::FileSystemAccessCapacityAllocationHost_RequestCapacityChange_ResponseParams_Data* data_ = nullptr;
};





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_FILE_SYSTEM_ACCESS_CAPACITY_ALLOCATION_HOST_MOJOM_PARAMS_DATA_H_