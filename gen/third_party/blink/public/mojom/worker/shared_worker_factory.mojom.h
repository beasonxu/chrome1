// third_party/blink/public/mojom/worker/shared_worker_factory.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_FACTORY_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_FACTORY_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/worker/shared_worker_factory.mojom-shared.h"
#include "third_party/blink/public/mojom/worker/shared_worker_factory.mojom-forward.h"
#include "mojo/public/mojom/base/unguessable_token.mojom.h"
#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom.h"
#include "third_party/blink/public/mojom/browser_interface_broker.mojom-forward.h"
#include "third_party/blink/public/mojom/loader/url_loader_factory_bundle.mojom.h"
#include "third_party/blink/public/mojom/renderer_preference_watcher.mojom-forward.h"
#include "third_party/blink/public/mojom/frame/policy_container.mojom-forward.h"
#include "third_party/blink/public/mojom/renderer_preferences.mojom.h"
#include "third_party/blink/public/mojom/service_worker/controller_service_worker.mojom-forward.h"
#include "third_party/blink/public/mojom/service_worker/service_worker_container.mojom-forward.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom.h"
#include "third_party/blink/public/mojom/worker/shared_worker.mojom-forward.h"
#include "third_party/blink/public/mojom/worker/shared_worker_host.mojom-forward.h"
#include "third_party/blink/public/mojom/worker/shared_worker_info.mojom-forward.h"
#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom-forward.h"
#include "third_party/blink/public/mojom/worker/worker_main_script_load_params.mojom-forward.h"
#include "url/mojom/origin.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class SharedWorkerFactoryProxy;

template <typename ImplRefTraits>
class SharedWorkerFactoryStub;

class SharedWorkerFactoryRequestValidator;


class BLINK_COMMON_EXPORT SharedWorkerFactory
    : public SharedWorkerFactoryInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = SharedWorkerFactoryInterfaceBase;
  using Proxy_ = SharedWorkerFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = SharedWorkerFactoryStub<ImplRefTraits>;

  using RequestValidator_ = SharedWorkerFactoryRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kCreateSharedWorkerMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateSharedWorker_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~SharedWorkerFactory() = default;

  
  virtual void CreateSharedWorker(::blink::mojom::SharedWorkerInfoPtr info, const ::blink::SharedWorkerToken& token, const ::url::Origin& constructor_origin, bool is_constructor_secure_context, const std::string& user_agent, const std::string& full_user_agent, const std::string& reduced_user_agent, const ::blink::UserAgentMetadata& ua_metadata, bool pause_on_start, const ::base::UnguessableToken& devtools_worker_token, const ::blink::RendererPreferences& renderer_preferences, ::mojo::PendingReceiver<::blink::mojom::RendererPreferenceWatcher> preference_watcher_receiver, ::mojo::PendingRemote<::blink::mojom::WorkerContentSettingsProxy> content_settings, ::blink::mojom::ServiceWorkerContainerInfoForClientPtr service_worker_container_info, ::blink::mojom::WorkerMainScriptLoadParamsPtr main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_info, ::blink::mojom::PolicyContainerPtr policy_container, ::mojo::PendingRemote<::blink::mojom::SharedWorkerHost> host, ::mojo::PendingReceiver<::blink::mojom::SharedWorker> shared_worker, ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker, int64_t ukm_source_id) = 0;
};



class BLINK_COMMON_EXPORT SharedWorkerFactoryProxy
    : public SharedWorkerFactory {
 public:
  using InterfaceType = SharedWorkerFactory;

  explicit SharedWorkerFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void CreateSharedWorker(::blink::mojom::SharedWorkerInfoPtr info, const ::blink::SharedWorkerToken& token, const ::url::Origin& constructor_origin, bool is_constructor_secure_context, const std::string& user_agent, const std::string& full_user_agent, const std::string& reduced_user_agent, const ::blink::UserAgentMetadata& ua_metadata, bool pause_on_start, const ::base::UnguessableToken& devtools_worker_token, const ::blink::RendererPreferences& renderer_preferences, ::mojo::PendingReceiver<::blink::mojom::RendererPreferenceWatcher> preference_watcher_receiver, ::mojo::PendingRemote<::blink::mojom::WorkerContentSettingsProxy> content_settings, ::blink::mojom::ServiceWorkerContainerInfoForClientPtr service_worker_container_info, ::blink::mojom::WorkerMainScriptLoadParamsPtr main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_info, ::blink::mojom::PolicyContainerPtr policy_container, ::mojo::PendingRemote<::blink::mojom::SharedWorkerHost> host, ::mojo::PendingReceiver<::blink::mojom::SharedWorker> shared_worker, ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker, int64_t ukm_source_id) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT SharedWorkerFactoryStubDispatch {
 public:
  static bool Accept(SharedWorkerFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SharedWorkerFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SharedWorkerFactory>>
class SharedWorkerFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SharedWorkerFactoryStub() = default;
  ~SharedWorkerFactoryStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SharedWorkerFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SharedWorkerFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT SharedWorkerFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace blink

namespace mojo {

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_FACTORY_MOJOM_H_