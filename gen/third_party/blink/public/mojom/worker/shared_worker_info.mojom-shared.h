// third_party/blink/public/mojom/worker/shared_worker_info.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_INFO_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_INFO_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/worker/shared_worker_info.mojom-shared-internal.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared.h"
#include "third_party/blink/public/mojom/loader/fetch_client_settings_object.mojom-shared.h"
#include "third_party/blink/public/mojom/worker/worker_options.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"



#include "base/component_export.h"




namespace blink {
namespace mojom {
class SharedWorkerInfoDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::SharedWorkerInfoDataView> {
  using Data = ::blink::mojom::internal::SharedWorkerInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


class SharedWorkerInfoDataView {
 public:
  SharedWorkerInfoDataView() = default;

  SharedWorkerInfoDataView(
      internal::SharedWorkerInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetOptionsDataView(
      ::blink::mojom::WorkerOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::WorkerOptionsDataView>(
        pointer, output, message_);
  }
  inline void GetContentSecurityPoliciesDataView(
      mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentSecurityPolicies(UserType* output) {
    
    auto* pointer = data_->content_security_policies.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>>(
        pointer, output, message_);
  }
  inline void GetOutsideFetchClientSettingsObjectDataView(
      ::blink::mojom::FetchClientSettingsObjectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOutsideFetchClientSettingsObject(UserType* output) {
    
    auto* pointer = data_->outside_fetch_client_settings_object.Get();
    return mojo::internal::Deserialize<::blink::mojom::FetchClientSettingsObjectDataView>(
        pointer, output, message_);
  }
 private:
  internal::SharedWorkerInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SharedWorkerInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::SharedWorkerInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::SharedWorkerInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in SharedWorkerInfo struct");
    decltype(Traits::options(input)) in_options = Traits::options(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->options)::BaseType> options_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::WorkerOptionsDataView>(
        in_options, options_fragment);
    fragment->options.Set(
        options_fragment.is_null() ? nullptr : options_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->options.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null options in SharedWorkerInfo struct");
    decltype(Traits::content_security_policies(input)) in_content_security_policies = Traits::content_security_policies(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->content_security_policies)::BaseType>
        content_security_policies_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams content_security_policies_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>>(
        in_content_security_policies, content_security_policies_fragment, &content_security_policies_validate_params);
    fragment->content_security_policies.Set(
        content_security_policies_fragment.is_null() ? nullptr : content_security_policies_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->content_security_policies.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content_security_policies in SharedWorkerInfo struct");
    decltype(Traits::outside_fetch_client_settings_object(input)) in_outside_fetch_client_settings_object = Traits::outside_fetch_client_settings_object(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->outside_fetch_client_settings_object)::BaseType> outside_fetch_client_settings_object_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::FetchClientSettingsObjectDataView>(
        in_outside_fetch_client_settings_object, outside_fetch_client_settings_object_fragment);
    fragment->outside_fetch_client_settings_object.Set(
        outside_fetch_client_settings_object_fragment.is_null() ? nullptr : outside_fetch_client_settings_object_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->outside_fetch_client_settings_object.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null outside_fetch_client_settings_object in SharedWorkerInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::SharedWorkerInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::SharedWorkerInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void SharedWorkerInfoDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void SharedWorkerInfoDataView::GetOptionsDataView(
    ::blink::mojom::WorkerOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::WorkerOptionsDataView(pointer, message_);
}
inline void SharedWorkerInfoDataView::GetContentSecurityPoliciesDataView(
    mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output) {
  auto pointer = data_->content_security_policies.Get();
  *output = mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>(pointer, message_);
}
inline void SharedWorkerInfoDataView::GetOutsideFetchClientSettingsObjectDataView(
    ::blink::mojom::FetchClientSettingsObjectDataView* output) {
  auto pointer = data_->outside_fetch_client_settings_object.Get();
  *output = ::blink::mojom::FetchClientSettingsObjectDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_INFO_MOJOM_SHARED_H_