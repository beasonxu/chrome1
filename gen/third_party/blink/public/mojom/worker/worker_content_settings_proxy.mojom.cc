// third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom-params-data.h"
#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom-import-headers.h"
#include "third_party/blink/public/mojom/worker/worker_content_settings_proxy.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_WORKER_CONTENT_SETTINGS_PROXY_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_WORKER_CONTENT_SETTINGS_PROXY_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
const char WorkerContentSettingsProxy::Name_[] = "blink.mojom.WorkerContentSettingsProxy";

WorkerContentSettingsProxy::IPCStableHashFunction WorkerContentSettingsProxy::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name: {
      return &WorkerContentSettingsProxy::AllowIndexedDB_Sym::IPCStableHash;
    }
    case internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name: {
      return &WorkerContentSettingsProxy::AllowCacheStorage_Sym::IPCStableHash;
    }
    case internal::kWorkerContentSettingsProxy_AllowWebLocks_Name: {
      return &WorkerContentSettingsProxy::AllowWebLocks_Sym::IPCStableHash;
    }
    case internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name: {
      return &WorkerContentSettingsProxy::RequestFileSystemAccessSync_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WorkerContentSettingsProxy::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name:
            return "Receive blink::mojom::WorkerContentSettingsProxy::AllowIndexedDB";
      case internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name:
            return "Receive blink::mojom::WorkerContentSettingsProxy::AllowCacheStorage";
      case internal::kWorkerContentSettingsProxy_AllowWebLocks_Name:
            return "Receive blink::mojom::WorkerContentSettingsProxy::AllowWebLocks";
      case internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name:
            return "Receive blink::mojom::WorkerContentSettingsProxy::RequestFileSystemAccessSync";
    }
  } else {
    switch (message.name()) {
      case internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name:
            return "Receive reply blink::mojom::WorkerContentSettingsProxy::AllowIndexedDB";
      case internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name:
            return "Receive reply blink::mojom::WorkerContentSettingsProxy::AllowCacheStorage";
      case internal::kWorkerContentSettingsProxy_AllowWebLocks_Name:
            return "Receive reply blink::mojom::WorkerContentSettingsProxy::AllowWebLocks";
      case internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name:
            return "Receive reply blink::mojom::WorkerContentSettingsProxy::RequestFileSystemAccessSync";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WorkerContentSettingsProxy::AllowIndexedDB_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WorkerContentSettingsProxy::AllowIndexedDB");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WorkerContentSettingsProxy::AllowCacheStorage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WorkerContentSettingsProxy::AllowCacheStorage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WorkerContentSettingsProxy::AllowWebLocks_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WorkerContentSettingsProxy::AllowWebLocks");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WorkerContentSettingsProxy::RequestFileSystemAccessSync_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WorkerContentSettingsProxy::RequestFileSystemAccessSync");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)
bool WorkerContentSettingsProxy::AllowIndexedDB(bool* out_result) {
  NOTREACHED();
  return false;
}
bool WorkerContentSettingsProxy::AllowCacheStorage(bool* out_result) {
  NOTREACHED();
  return false;
}
bool WorkerContentSettingsProxy::AllowWebLocks(bool* out_result) {
  NOTREACHED();
  return false;
}
bool WorkerContentSettingsProxy::RequestFileSystemAccessSync(bool* out_result) {
  NOTREACHED();
  return false;
}
class WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse(
      bool* result, bool* out_result)
      : result_(result), out_result_(out_result) {
    DCHECK(!*result_);
  }

  WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse(const WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse&) = delete;
  WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse& operator=(const WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_result_;};

class WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback(
      WorkerContentSettingsProxy::AllowIndexedDBCallback callback
      ) : callback_(std::move(callback)) {
  }

  WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback(const WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback&) = delete;
  WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback& operator=(const WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WorkerContentSettingsProxy::AllowIndexedDBCallback callback_;
};
class WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse(
      bool* result, bool* out_result)
      : result_(result), out_result_(out_result) {
    DCHECK(!*result_);
  }

  WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse(const WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse&) = delete;
  WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse& operator=(const WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_result_;};

class WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback(
      WorkerContentSettingsProxy::AllowCacheStorageCallback callback
      ) : callback_(std::move(callback)) {
  }

  WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback(const WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback&) = delete;
  WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback& operator=(const WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WorkerContentSettingsProxy::AllowCacheStorageCallback callback_;
};
class WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse(
      bool* result, bool* out_result)
      : result_(result), out_result_(out_result) {
    DCHECK(!*result_);
  }

  WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse(const WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse&) = delete;
  WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse& operator=(const WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_result_;};

class WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback(
      WorkerContentSettingsProxy::AllowWebLocksCallback callback
      ) : callback_(std::move(callback)) {
  }

  WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback(const WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback&) = delete;
  WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback& operator=(const WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WorkerContentSettingsProxy::AllowWebLocksCallback callback_;
};
class WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse(
      bool* result, bool* out_result)
      : result_(result), out_result_(out_result) {
    DCHECK(!*result_);
  }

  WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse(const WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse&) = delete;
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse& operator=(const WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_result_;};

class WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback(
      WorkerContentSettingsProxy::RequestFileSystemAccessSyncCallback callback
      ) : callback_(std::move(callback)) {
  }

  WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback(const WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback&) = delete;
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback& operator=(const WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WorkerContentSettingsProxy::RequestFileSystemAccessSyncCallback callback_;
};

WorkerContentSettingsProxyProxy::WorkerContentSettingsProxyProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
bool WorkerContentSettingsProxyProxy::AllowIndexedDB(
    bool* out_param_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "Call blink::mojom::WorkerContentSettingsProxy::AllowIndexedDB (sync)");
#else
  TRACE_EVENT0("mojom", "WorkerContentSettingsProxy::AllowIndexedDB");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowIndexedDB_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowIndexedDB");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse(
          &result, out_param_result));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WorkerContentSettingsProxy::AllowIndexedDB", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), out_param_result,
                        "<value of type bool>");
   });
#endif
  return result;
}

void WorkerContentSettingsProxyProxy::AllowIndexedDB(
    AllowIndexedDBCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::WorkerContentSettingsProxy::AllowIndexedDB");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowIndexedDB_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowIndexedDB");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WorkerContentSettingsProxyProxy::AllowCacheStorage(
    bool* out_param_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "Call blink::mojom::WorkerContentSettingsProxy::AllowCacheStorage (sync)");
#else
  TRACE_EVENT0("mojom", "WorkerContentSettingsProxy::AllowCacheStorage");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowCacheStorage_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowCacheStorage");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse(
          &result, out_param_result));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WorkerContentSettingsProxy::AllowCacheStorage", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), out_param_result,
                        "<value of type bool>");
   });
#endif
  return result;
}

void WorkerContentSettingsProxyProxy::AllowCacheStorage(
    AllowCacheStorageCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::WorkerContentSettingsProxy::AllowCacheStorage");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowCacheStorage_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowCacheStorage");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WorkerContentSettingsProxyProxy::AllowWebLocks(
    bool* out_param_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "Call blink::mojom::WorkerContentSettingsProxy::AllowWebLocks (sync)");
#else
  TRACE_EVENT0("mojom", "WorkerContentSettingsProxy::AllowWebLocks");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowWebLocks_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowWebLocks_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowWebLocks");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse(
          &result, out_param_result));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WorkerContentSettingsProxy::AllowWebLocks", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), out_param_result,
                        "<value of type bool>");
   });
#endif
  return result;
}

void WorkerContentSettingsProxyProxy::AllowWebLocks(
    AllowWebLocksCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::WorkerContentSettingsProxy::AllowWebLocks");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowWebLocks_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowWebLocks_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowWebLocks");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WorkerContentSettingsProxyProxy::RequestFileSystemAccessSync(
    bool* out_param_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN0("mojom", "Call blink::mojom::WorkerContentSettingsProxy::RequestFileSystemAccessSync (sync)");
#else
  TRACE_EVENT0("mojom", "WorkerContentSettingsProxy::RequestFileSystemAccessSync");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("RequestFileSystemAccessSync");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse(
          &result, out_param_result));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WorkerContentSettingsProxy::RequestFileSystemAccessSync", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), out_param_result,
                        "<value of type bool>");
   });
#endif
  return result;
}

void WorkerContentSettingsProxyProxy::RequestFileSystemAccessSync(
    RequestFileSystemAccessSyncCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::WorkerContentSettingsProxy::RequestFileSystemAccessSync");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("RequestFileSystemAccessSync");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WorkerContentSettingsProxy::AllowIndexedDBCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder> proxy(
        new WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WorkerContentSettingsProxy::AllowIndexedDBCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_result);
};

bool WorkerContentSettingsProxy_AllowIndexedDB_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_AllowIndexedDB_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WorkerContentSettingsProxy_AllowIndexedDB_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_AllowIndexedDB_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder::Run(
    bool in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WorkerContentSettingsProxy::AllowIndexedDB", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowIndexedDB_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->result = in_result;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowIndexedDB");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WorkerContentSettingsProxy_AllowIndexedDB_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_AllowIndexedDB_ResponseParams_Data* params =
      reinterpret_cast<internal::WorkerContentSettingsProxy_AllowIndexedDB_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_AllowIndexedDB_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 0, true);
    return false;
  }
  *out_result_ = std::move(p_result);
  *result_ = true;
  return true;
}
class WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WorkerContentSettingsProxy::AllowCacheStorageCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder> proxy(
        new WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WorkerContentSettingsProxy::AllowCacheStorageCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_result);
};

bool WorkerContentSettingsProxy_AllowCacheStorage_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_AllowCacheStorage_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WorkerContentSettingsProxy_AllowCacheStorage_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_AllowCacheStorage_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder::Run(
    bool in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WorkerContentSettingsProxy::AllowCacheStorage", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowCacheStorage_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->result = in_result;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowCacheStorage");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WorkerContentSettingsProxy_AllowCacheStorage_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_AllowCacheStorage_ResponseParams_Data* params =
      reinterpret_cast<internal::WorkerContentSettingsProxy_AllowCacheStorage_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_AllowCacheStorage_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 1, true);
    return false;
  }
  *out_result_ = std::move(p_result);
  *result_ = true;
  return true;
}
class WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WorkerContentSettingsProxy::AllowWebLocksCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder> proxy(
        new WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WorkerContentSettingsProxy::AllowWebLocksCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_result);
};

bool WorkerContentSettingsProxy_AllowWebLocks_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_AllowWebLocks_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WorkerContentSettingsProxy_AllowWebLocks_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_AllowWebLocks_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder::Run(
    bool in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WorkerContentSettingsProxy::AllowWebLocks", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_AllowWebLocks_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_AllowWebLocks_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->result = in_result;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("AllowWebLocks");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WorkerContentSettingsProxy_AllowWebLocks_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_AllowWebLocks_ResponseParams_Data* params =
      reinterpret_cast<internal::WorkerContentSettingsProxy_AllowWebLocks_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_AllowWebLocks_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 2, true);
    return false;
  }
  *out_result_ = std::move(p_result);
  *result_ = true;
  return true;
}
class WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WorkerContentSettingsProxy::RequestFileSystemAccessSyncCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder> proxy(
        new WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WorkerContentSettingsProxy::RequestFileSystemAccessSyncCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_result);
};

bool WorkerContentSettingsProxy_RequestFileSystemAccessSync_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result));
  return true;
}

void WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder::Run(
    bool in_result) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WorkerContentSettingsProxy::RequestFileSystemAccessSync", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result"), in_result,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->result = in_result;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WorkerContentSettingsProxy::Name_);
  message.set_method_name("RequestFileSystemAccessSync");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WorkerContentSettingsProxy_RequestFileSystemAccessSync_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParams_Data* params =
      reinterpret_cast<internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_result{};
  WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_result = input_data_view.result();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WorkerContentSettingsProxy::Name_, 3, true);
    return false;
  }
  *out_result_ = std::move(p_result);
  *result_ = true;
  return true;
}

// static
bool WorkerContentSettingsProxyStubDispatch::Accept(
    WorkerContentSettingsProxy* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name: {
      break;
    }
    case internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name: {
      break;
    }
    case internal::kWorkerContentSettingsProxy_AllowWebLocks_Name: {
      break;
    }
    case internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name: {
      break;
    }
  }
  return false;
}

// static
bool WorkerContentSettingsProxyStubDispatch::AcceptWithResponder(
    WorkerContentSettingsProxy* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWorkerContentSettingsProxy_AllowIndexedDB_Name: {

      internal::WorkerContentSettingsProxy_AllowIndexedDB_Params_Data* params =
          reinterpret_cast<
              internal::WorkerContentSettingsProxy_AllowIndexedDB_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WorkerContentSettingsProxy_AllowIndexedDB_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WorkerContentSettingsProxy::Name_, 0, false);
        return false;
      }
      WorkerContentSettingsProxy::AllowIndexedDBCallback callback =
          WorkerContentSettingsProxy_AllowIndexedDB_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AllowIndexedDB(std::move(callback));
      return true;
    }
    case internal::kWorkerContentSettingsProxy_AllowCacheStorage_Name: {

      internal::WorkerContentSettingsProxy_AllowCacheStorage_Params_Data* params =
          reinterpret_cast<
              internal::WorkerContentSettingsProxy_AllowCacheStorage_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WorkerContentSettingsProxy_AllowCacheStorage_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WorkerContentSettingsProxy::Name_, 1, false);
        return false;
      }
      WorkerContentSettingsProxy::AllowCacheStorageCallback callback =
          WorkerContentSettingsProxy_AllowCacheStorage_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AllowCacheStorage(std::move(callback));
      return true;
    }
    case internal::kWorkerContentSettingsProxy_AllowWebLocks_Name: {

      internal::WorkerContentSettingsProxy_AllowWebLocks_Params_Data* params =
          reinterpret_cast<
              internal::WorkerContentSettingsProxy_AllowWebLocks_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WorkerContentSettingsProxy_AllowWebLocks_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WorkerContentSettingsProxy::Name_, 2, false);
        return false;
      }
      WorkerContentSettingsProxy::AllowWebLocksCallback callback =
          WorkerContentSettingsProxy_AllowWebLocks_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AllowWebLocks(std::move(callback));
      return true;
    }
    case internal::kWorkerContentSettingsProxy_RequestFileSystemAccessSync_Name: {

      internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_Params_Data* params =
          reinterpret_cast<
              internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      WorkerContentSettingsProxy_RequestFileSystemAccessSync_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WorkerContentSettingsProxy::Name_, 3, false);
        return false;
      }
      WorkerContentSettingsProxy::RequestFileSystemAccessSyncCallback callback =
          WorkerContentSettingsProxy_RequestFileSystemAccessSync_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestFileSystemAccessSync(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWorkerContentSettingsProxyValidationInfo[] = {
    {&internal::WorkerContentSettingsProxy_AllowIndexedDB_Params_Data::Validate,
     &internal::WorkerContentSettingsProxy_AllowIndexedDB_ResponseParams_Data::Validate},
    {&internal::WorkerContentSettingsProxy_AllowCacheStorage_Params_Data::Validate,
     &internal::WorkerContentSettingsProxy_AllowCacheStorage_ResponseParams_Data::Validate},
    {&internal::WorkerContentSettingsProxy_AllowWebLocks_Params_Data::Validate,
     &internal::WorkerContentSettingsProxy_AllowWebLocks_ResponseParams_Data::Validate},
    {&internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_Params_Data::Validate,
     &internal::WorkerContentSettingsProxy_RequestFileSystemAccessSync_ResponseParams_Data::Validate},
};

bool WorkerContentSettingsProxyRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::WorkerContentSettingsProxy::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWorkerContentSettingsProxyValidationInfo);
}

bool WorkerContentSettingsProxyResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::WorkerContentSettingsProxy::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kWorkerContentSettingsProxyValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void WorkerContentSettingsProxyInterceptorForTesting::AllowIndexedDB(AllowIndexedDBCallback callback) {
  GetForwardingInterface()->AllowIndexedDB(std::move(callback));
}
void WorkerContentSettingsProxyInterceptorForTesting::AllowCacheStorage(AllowCacheStorageCallback callback) {
  GetForwardingInterface()->AllowCacheStorage(std::move(callback));
}
void WorkerContentSettingsProxyInterceptorForTesting::AllowWebLocks(AllowWebLocksCallback callback) {
  GetForwardingInterface()->AllowWebLocks(std::move(callback));
}
void WorkerContentSettingsProxyInterceptorForTesting::RequestFileSystemAccessSync(RequestFileSystemAccessSyncCallback callback) {
  GetForwardingInterface()->RequestFileSystemAccessSync(std::move(callback));
}
WorkerContentSettingsProxyAsyncWaiter::WorkerContentSettingsProxyAsyncWaiter(
    WorkerContentSettingsProxy* proxy) : proxy_(proxy) {}

WorkerContentSettingsProxyAsyncWaiter::~WorkerContentSettingsProxyAsyncWaiter() = default;

void WorkerContentSettingsProxyAsyncWaiter::AllowIndexedDB(
    bool* out_result) {
  base::RunLoop loop;
  proxy_->AllowIndexedDB(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_result
,
             bool result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void WorkerContentSettingsProxyAsyncWaiter::AllowCacheStorage(
    bool* out_result) {
  base::RunLoop loop;
  proxy_->AllowCacheStorage(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_result
,
             bool result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void WorkerContentSettingsProxyAsyncWaiter::AllowWebLocks(
    bool* out_result) {
  base::RunLoop loop;
  proxy_->AllowWebLocks(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_result
,
             bool result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}
void WorkerContentSettingsProxyAsyncWaiter::RequestFileSystemAccessSync(
    bool* out_result) {
  base::RunLoop loop;
  proxy_->RequestFileSystemAccessSync(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_result
,
             bool result) {*out_result = std::move(result);
            loop->Quit();
          },
          &loop,
          out_result));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif