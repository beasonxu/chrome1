// third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-params-data.h"
#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-import-headers.h"
#include "third_party/blink/public/mojom/worker/dedicated_worker_host_factory.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_DEDICATED_WORKER_HOST_FACTORY_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
const char kNavigation_DedicatedWorkerSpec[] = "navigation:dedicated_worker";
const char DedicatedWorkerHostFactoryClient::Name_[] = "blink.mojom.DedicatedWorkerHostFactoryClient";

DedicatedWorkerHostFactoryClient::IPCStableHashFunction DedicatedWorkerHostFactoryClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name: {
      return &DedicatedWorkerHostFactoryClient::OnWorkerHostCreated_Sym::IPCStableHash;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name: {
      return &DedicatedWorkerHostFactoryClient::OnScriptLoadStarted_Sym::IPCStableHash;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name: {
      return &DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DedicatedWorkerHostFactoryClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name:
            return "Receive blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated";
      case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name:
            return "Receive blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted";
      case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name:
            return "Receive blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed";
    }
  } else {
    switch (message.name()) {
      case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name:
            return "Receive reply blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated";
      case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name:
            return "Receive reply blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted";
      case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name:
            return "Receive reply blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DedicatedWorkerHostFactoryClient::OnWorkerHostCreated_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DedicatedWorkerHostFactoryClient::OnScriptLoadStarted_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

DedicatedWorkerHostFactoryClientProxy::DedicatedWorkerHostFactoryClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DedicatedWorkerHostFactoryClientProxy::OnWorkerHostCreated(
    ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> in_browser_interface_broker, ::mojo::PendingRemote<::blink::mojom::DedicatedWorkerHost> in_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DedicatedWorkerHostFactoryClient::OnWorkerHostCreated", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("browser_interface_broker"), in_browser_interface_broker,
                        "<value of type ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host"), in_host,
                        "<value of type ::mojo::PendingRemote<::blink::mojom::DedicatedWorkerHost>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
      in_browser_interface_broker, &params->browser_interface_broker, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->browser_interface_broker),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid browser_interface_broker in DedicatedWorkerHostFactoryClient.OnWorkerHostCreated request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::DedicatedWorkerHostInterfaceBase>>(
      in_host, &params->host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid host in DedicatedWorkerHostFactoryClient.OnWorkerHostCreated request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactoryClient::Name_);
  message.set_method_name("OnWorkerHostCreated");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DedicatedWorkerHostFactoryClientProxy::OnScriptLoadStarted(
    ::blink::mojom::ServiceWorkerContainerInfoForClientPtr in_service_worker_container_info, ::blink::mojom::WorkerMainScriptLoadParamsPtr in_main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> in_subresource_loader_factories, ::mojo::PendingReceiver<::blink::mojom::SubresourceLoaderUpdater> in_subresource_loader_updater, ::blink::mojom::ControllerServiceWorkerInfoPtr in_controller_info, ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> in_back_forward_cache_controller_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStarted", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("service_worker_container_info"), in_service_worker_container_info,
                        "<value of type ::blink::mojom::ServiceWorkerContainerInfoForClientPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("main_script_load_params"), in_main_script_load_params,
                        "<value of type ::blink::mojom::WorkerMainScriptLoadParamsPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("subresource_loader_factories"), in_subresource_loader_factories,
                        "<value of type ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("subresource_loader_updater"), in_subresource_loader_updater,
                        "<value of type ::mojo::PendingReceiver<::blink::mojom::SubresourceLoaderUpdater>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("controller_info"), in_controller_info,
                        "<value of type ::blink::mojom::ControllerServiceWorkerInfoPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("back_forward_cache_controller_host"), in_back_forward_cache_controller_host,
                        "<value of type ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->service_worker_container_info)::BaseType> service_worker_container_info_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::ServiceWorkerContainerInfoForClientDataView>(
      in_service_worker_container_info, service_worker_container_info_fragment);
  params->service_worker_container_info.Set(
      service_worker_container_info_fragment.is_null() ? nullptr : service_worker_container_info_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->main_script_load_params)::BaseType> main_script_load_params_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::WorkerMainScriptLoadParamsDataView>(
      in_main_script_load_params, main_script_load_params_fragment);
  params->main_script_load_params.Set(
      main_script_load_params_fragment.is_null() ? nullptr : main_script_load_params_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->main_script_load_params.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null main_script_load_params in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");
  mojo::internal::MessageFragment<
      typename decltype(params->subresource_loader_factories)::BaseType> subresource_loader_factories_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
      in_subresource_loader_factories, subresource_loader_factories_fragment);
  params->subresource_loader_factories.Set(
      subresource_loader_factories_fragment.is_null() ? nullptr : subresource_loader_factories_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->subresource_loader_factories.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null subresource_loader_factories in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::SubresourceLoaderUpdaterInterfaceBase>>(
      in_subresource_loader_updater, &params->subresource_loader_updater, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->subresource_loader_updater),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid subresource_loader_updater in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");
  mojo::internal::MessageFragment<
      typename decltype(params->controller_info)::BaseType> controller_info_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::ControllerServiceWorkerInfoDataView>(
      in_controller_info, controller_info_fragment);
  params->controller_info.Set(
      controller_info_fragment.is_null() ? nullptr : controller_info_fragment.data());
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::BackForwardCacheControllerHostInterfaceBase>>(
      in_back_forward_cache_controller_host, &params->back_forward_cache_controller_host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->back_forward_cache_controller_host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid back_forward_cache_controller_host in DedicatedWorkerHostFactoryClient.OnScriptLoadStarted request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactoryClient::Name_);
  message.set_method_name("OnScriptLoadStarted");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DedicatedWorkerHostFactoryClientProxy::OnScriptLoadStartFailed(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::DedicatedWorkerHostFactoryClient::OnScriptLoadStartFailed");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactoryClient::Name_);
  message.set_method_name("OnScriptLoadStartFailed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool DedicatedWorkerHostFactoryClientStubDispatch::Accept(
    DedicatedWorkerHostFactoryClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name: {

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> p_browser_interface_broker{};
      ::mojo::PendingRemote<::blink::mojom::DedicatedWorkerHost> p_host{};
      DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_browser_interface_broker =
            input_data_view.TakeBrowserInterfaceBroker<decltype(p_browser_interface_broker)>();
      }
      if (success) {
        p_host =
            input_data_view.TakeHost<decltype(p_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactoryClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnWorkerHostCreated(
std::move(p_browser_interface_broker), 
std::move(p_host));
      return true;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name: {

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::mojom::ServiceWorkerContainerInfoForClientPtr p_service_worker_container_info{};
      ::blink::mojom::WorkerMainScriptLoadParamsPtr p_main_script_load_params{};
      ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> p_subresource_loader_factories{};
      ::mojo::PendingReceiver<::blink::mojom::SubresourceLoaderUpdater> p_subresource_loader_updater{};
      ::blink::mojom::ControllerServiceWorkerInfoPtr p_controller_info{};
      ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> p_back_forward_cache_controller_host{};
      DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadServiceWorkerContainerInfo(&p_service_worker_container_info))
        success = false;
      if (success && !input_data_view.ReadMainScriptLoadParams(&p_main_script_load_params))
        success = false;
      if (success && !input_data_view.ReadSubresourceLoaderFactories(&p_subresource_loader_factories))
        success = false;
      if (success) {
        p_subresource_loader_updater =
            input_data_view.TakeSubresourceLoaderUpdater<decltype(p_subresource_loader_updater)>();
      }
      if (success && !input_data_view.ReadControllerInfo(&p_controller_info))
        success = false;
      if (success) {
        p_back_forward_cache_controller_host =
            input_data_view.TakeBackForwardCacheControllerHost<decltype(p_back_forward_cache_controller_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactoryClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnScriptLoadStarted(
std::move(p_service_worker_container_info), 
std::move(p_main_script_load_params), 
std::move(p_subresource_loader_factories), 
std::move(p_subresource_loader_updater), 
std::move(p_controller_info), 
std::move(p_back_forward_cache_controller_host));
      return true;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name: {

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactoryClient::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnScriptLoadStartFailed();
      return true;
    }
  }
  return false;
}

// static
bool DedicatedWorkerHostFactoryClientStubDispatch::AcceptWithResponder(
    DedicatedWorkerHostFactoryClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Name: {
      break;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Name: {
      break;
    }
    case internal::kDedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDedicatedWorkerHostFactoryClientValidationInfo[] = {
    {&internal::DedicatedWorkerHostFactoryClient_OnWorkerHostCreated_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStarted_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DedicatedWorkerHostFactoryClient_OnScriptLoadStartFailed_Params_Data::Validate,
     nullptr /* no response */},
};

bool DedicatedWorkerHostFactoryClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DedicatedWorkerHostFactoryClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDedicatedWorkerHostFactoryClientValidationInfo);
}

const char DedicatedWorkerHostFactory::Name_[] = "blink.mojom.DedicatedWorkerHostFactory";

DedicatedWorkerHostFactory::IPCStableHashFunction DedicatedWorkerHostFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name: {
      return &DedicatedWorkerHostFactory::CreateWorkerHost_Sym::IPCStableHash;
    }
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name: {
      return &DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DedicatedWorkerHostFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name:
            return "Receive blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost";
      case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name:
            return "Receive blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad";
    }
  } else {
    switch (message.name()) {
      case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name:
            return "Receive reply blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost";
      case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name:
            return "Receive reply blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DedicatedWorkerHostFactory::CreateWorkerHost_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback(
      DedicatedWorkerHostFactory::CreateWorkerHostCallback callback
      ) : callback_(std::move(callback)) {
  }

  DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback(const DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback&) = delete;
  DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback& operator=(const DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DedicatedWorkerHostFactory::CreateWorkerHostCallback callback_;
};

DedicatedWorkerHostFactoryProxy::DedicatedWorkerHostFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DedicatedWorkerHostFactoryProxy::CreateWorkerHost(
    const ::blink::DedicatedWorkerToken& in_token, const ::GURL& in_script_url, ::mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> in_browser_interface_broker, ::mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> in_host, CreateWorkerHostCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("token"), in_token,
                        "<value of type const ::blink::DedicatedWorkerToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("script_url"), in_script_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("browser_interface_broker"), in_browser_interface_broker,
                        "<value of type ::mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("host"), in_host,
                        "<value of type ::mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->token)::BaseType> token_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::DedicatedWorkerTokenDataView>(
      in_token, token_fragment);
  params->token.Set(
      token_fragment.is_null() ? nullptr : token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null token in DedicatedWorkerHostFactory.CreateWorkerHost request");
  mojo::internal::MessageFragment<
      typename decltype(params->script_url)::BaseType> script_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_script_url, script_url_fragment);
  params->script_url.Set(
      script_url_fragment.is_null() ? nullptr : script_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->script_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null script_url in DedicatedWorkerHostFactory.CreateWorkerHost request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
      in_browser_interface_broker, &params->browser_interface_broker, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->browser_interface_broker),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid browser_interface_broker in DedicatedWorkerHostFactory.CreateWorkerHost request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::DedicatedWorkerHostInterfaceBase>>(
      in_host, &params->host, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->host),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid host in DedicatedWorkerHostFactory.CreateWorkerHost request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactory::Name_);
  message.set_method_name("CreateWorkerHost");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DedicatedWorkerHostFactoryProxy::CreateWorkerHostAndStartScriptLoad(
    const ::blink::DedicatedWorkerToken& in_token, const ::GURL& in_script_url, ::network::mojom::CredentialsMode in_credentials_mode, ::blink::mojom::FetchClientSettingsObjectPtr in_outside_fetch_client_settings_object, ::mojo::PendingRemote<::blink::mojom::BlobURLToken> in_blob_url_token, ::mojo::PendingRemote<DedicatedWorkerHostFactoryClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHostAndStartScriptLoad", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("token"), in_token,
                        "<value of type const ::blink::DedicatedWorkerToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("script_url"), in_script_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("credentials_mode"), in_credentials_mode,
                        "<value of type ::network::mojom::CredentialsMode>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("outside_fetch_client_settings_object"), in_outside_fetch_client_settings_object,
                        "<value of type ::blink::mojom::FetchClientSettingsObjectPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("blob_url_token"), in_blob_url_token,
                        "<value of type ::mojo::PendingRemote<::blink::mojom::BlobURLToken>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingRemote<DedicatedWorkerHostFactoryClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->token)::BaseType> token_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::DedicatedWorkerTokenDataView>(
      in_token, token_fragment);
  params->token.Set(
      token_fragment.is_null() ? nullptr : token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null token in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  mojo::internal::MessageFragment<
      typename decltype(params->script_url)::BaseType> script_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_script_url, script_url_fragment);
  params->script_url.Set(
      script_url_fragment.is_null() ? nullptr : script_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->script_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null script_url in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  mojo::internal::Serialize<::network::mojom::CredentialsMode>(
      in_credentials_mode, &params->credentials_mode);
  mojo::internal::MessageFragment<
      typename decltype(params->outside_fetch_client_settings_object)::BaseType> outside_fetch_client_settings_object_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::FetchClientSettingsObjectDataView>(
      in_outside_fetch_client_settings_object, outside_fetch_client_settings_object_fragment);
  params->outside_fetch_client_settings_object.Set(
      outside_fetch_client_settings_object_fragment.is_null() ? nullptr : outside_fetch_client_settings_object_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->outside_fetch_client_settings_object.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null outside_fetch_client_settings_object in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
      in_blob_url_token, &params->blob_url_token, &params.message());
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::DedicatedWorkerHostFactoryClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in DedicatedWorkerHostFactory.CreateWorkerHostAndStartScriptLoad request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactory::Name_);
  message.set_method_name("CreateWorkerHostAndStartScriptLoad");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DedicatedWorkerHostFactory::CreateWorkerHostCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder> proxy(
        new DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DedicatedWorkerHostFactory::CreateWorkerHostCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::network::CrossOriginEmbedderPolicy& in_parent_coep, ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> in_back_forward_cache_controller_host);
};

bool DedicatedWorkerHostFactory_CreateWorkerHost_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::network::CrossOriginEmbedderPolicy p_parent_coep{};
  ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> p_back_forward_cache_controller_host{};
  DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadParentCoep(&p_parent_coep))
    success = false;
  if (success) {
    p_back_forward_cache_controller_host =
        input_data_view.TakeBackForwardCacheControllerHost<decltype(p_back_forward_cache_controller_host)>();
  }
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DedicatedWorkerHostFactory::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_parent_coep), 
std::move(p_back_forward_cache_controller_host));
  return true;
}

void DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder::Run(
    const ::network::CrossOriginEmbedderPolicy& in_parent_coep, ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> in_back_forward_cache_controller_host) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::DedicatedWorkerHostFactory::CreateWorkerHost", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("parent_coep"), in_parent_coep,
                        "<value of type const ::network::CrossOriginEmbedderPolicy&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("back_forward_cache_controller_host"), in_back_forward_cache_controller_host,
                        "<value of type ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->parent_coep)::BaseType> parent_coep_fragment(
          params.message());
  mojo::internal::Serialize<::network::mojom::CrossOriginEmbedderPolicyDataView>(
      in_parent_coep, parent_coep_fragment);
  params->parent_coep.Set(
      parent_coep_fragment.is_null() ? nullptr : parent_coep_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->parent_coep.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null parent_coep in ");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::BackForwardCacheControllerHostInterfaceBase>>(
      in_back_forward_cache_controller_host, &params->back_forward_cache_controller_host, &params.message());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DedicatedWorkerHostFactory::Name_);
  message.set_method_name("CreateWorkerHost");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DedicatedWorkerHostFactoryStubDispatch::Accept(
    DedicatedWorkerHostFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name: {
      break;
    }
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name: {

      DCHECK(message->is_serialized());
      internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data* params =
          reinterpret_cast<internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::DedicatedWorkerToken p_token{};
      ::GURL p_script_url{};
      ::network::mojom::CredentialsMode p_credentials_mode{};
      ::blink::mojom::FetchClientSettingsObjectPtr p_outside_fetch_client_settings_object{};
      ::mojo::PendingRemote<::blink::mojom::BlobURLToken> p_blob_url_token{};
      ::mojo::PendingRemote<DedicatedWorkerHostFactoryClient> p_client{};
      DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadToken(&p_token))
        success = false;
      if (success && !input_data_view.ReadScriptUrl(&p_script_url))
        success = false;
      if (success && !input_data_view.ReadCredentialsMode(&p_credentials_mode))
        success = false;
      if (success && !input_data_view.ReadOutsideFetchClientSettingsObject(&p_outside_fetch_client_settings_object))
        success = false;
      if (success) {
        p_blob_url_token =
            input_data_view.TakeBlobUrlToken<decltype(p_blob_url_token)>();
      }
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactory::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateWorkerHostAndStartScriptLoad(
std::move(p_token), 
std::move(p_script_url), 
std::move(p_credentials_mode), 
std::move(p_outside_fetch_client_settings_object), 
std::move(p_blob_url_token), 
std::move(p_client));
      return true;
    }
  }
  return false;
}

// static
bool DedicatedWorkerHostFactoryStubDispatch::AcceptWithResponder(
    DedicatedWorkerHostFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHost_Name: {

      internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data* params =
          reinterpret_cast<
              internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::DedicatedWorkerToken p_token{};
      ::GURL p_script_url{};
      ::mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> p_browser_interface_broker{};
      ::mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> p_host{};
      DedicatedWorkerHostFactory_CreateWorkerHost_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadToken(&p_token))
        success = false;
      if (success && !input_data_view.ReadScriptUrl(&p_script_url))
        success = false;
      if (success) {
        p_browser_interface_broker =
            input_data_view.TakeBrowserInterfaceBroker<decltype(p_browser_interface_broker)>();
      }
      if (success) {
        p_host =
            input_data_view.TakeHost<decltype(p_host)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DedicatedWorkerHostFactory::Name_, 0, false);
        return false;
      }
      DedicatedWorkerHostFactory::CreateWorkerHostCallback callback =
          DedicatedWorkerHostFactory_CreateWorkerHost_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateWorkerHost(
std::move(p_token), 
std::move(p_script_url), 
std::move(p_browser_interface_broker), 
std::move(p_host), std::move(callback));
      return true;
    }
    case internal::kDedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDedicatedWorkerHostFactoryValidationInfo[] = {
    {&internal::DedicatedWorkerHostFactory_CreateWorkerHost_Params_Data::Validate,
     &internal::DedicatedWorkerHostFactory_CreateWorkerHost_ResponseParams_Data::Validate},
    {&internal::DedicatedWorkerHostFactory_CreateWorkerHostAndStartScriptLoad_Params_Data::Validate,
     nullptr /* no response */},
};

bool DedicatedWorkerHostFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DedicatedWorkerHostFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDedicatedWorkerHostFactoryValidationInfo);
}

bool DedicatedWorkerHostFactoryResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::DedicatedWorkerHostFactory::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kDedicatedWorkerHostFactoryValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void DedicatedWorkerHostFactoryClientInterceptorForTesting::OnWorkerHostCreated(::mojo::PendingRemote<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingRemote<::blink::mojom::DedicatedWorkerHost> host) {
  GetForwardingInterface()->OnWorkerHostCreated(std::move(browser_interface_broker), std::move(host));
}
void DedicatedWorkerHostFactoryClientInterceptorForTesting::OnScriptLoadStarted(::blink::mojom::ServiceWorkerContainerInfoForClientPtr service_worker_container_info, ::blink::mojom::WorkerMainScriptLoadParamsPtr main_script_load_params, ::std::unique_ptr<::blink::PendingURLLoaderFactoryBundle> subresource_loader_factories, ::mojo::PendingReceiver<::blink::mojom::SubresourceLoaderUpdater> subresource_loader_updater, ::blink::mojom::ControllerServiceWorkerInfoPtr controller_info, ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> back_forward_cache_controller_host) {
  GetForwardingInterface()->OnScriptLoadStarted(std::move(service_worker_container_info), std::move(main_script_load_params), std::move(subresource_loader_factories), std::move(subresource_loader_updater), std::move(controller_info), std::move(back_forward_cache_controller_host));
}
void DedicatedWorkerHostFactoryClientInterceptorForTesting::OnScriptLoadStartFailed() {
  GetForwardingInterface()->OnScriptLoadStartFailed();
}
DedicatedWorkerHostFactoryClientAsyncWaiter::DedicatedWorkerHostFactoryClientAsyncWaiter(
    DedicatedWorkerHostFactoryClient* proxy) : proxy_(proxy) {}

DedicatedWorkerHostFactoryClientAsyncWaiter::~DedicatedWorkerHostFactoryClientAsyncWaiter() = default;




void DedicatedWorkerHostFactoryInterceptorForTesting::CreateWorkerHost(const ::blink::DedicatedWorkerToken& token, const ::GURL& script_url, ::mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> host, CreateWorkerHostCallback callback) {
  GetForwardingInterface()->CreateWorkerHost(std::move(token), std::move(script_url), std::move(browser_interface_broker), std::move(host), std::move(callback));
}
void DedicatedWorkerHostFactoryInterceptorForTesting::CreateWorkerHostAndStartScriptLoad(const ::blink::DedicatedWorkerToken& token, const ::GURL& script_url, ::network::mojom::CredentialsMode credentials_mode, ::blink::mojom::FetchClientSettingsObjectPtr outside_fetch_client_settings_object, ::mojo::PendingRemote<::blink::mojom::BlobURLToken> blob_url_token, ::mojo::PendingRemote<DedicatedWorkerHostFactoryClient> client) {
  GetForwardingInterface()->CreateWorkerHostAndStartScriptLoad(std::move(token), std::move(script_url), std::move(credentials_mode), std::move(outside_fetch_client_settings_object), std::move(blob_url_token), std::move(client));
}
DedicatedWorkerHostFactoryAsyncWaiter::DedicatedWorkerHostFactoryAsyncWaiter(
    DedicatedWorkerHostFactory* proxy) : proxy_(proxy) {}

DedicatedWorkerHostFactoryAsyncWaiter::~DedicatedWorkerHostFactoryAsyncWaiter() = default;

void DedicatedWorkerHostFactoryAsyncWaiter::CreateWorkerHost(
    const ::blink::DedicatedWorkerToken& token, const ::GURL& script_url, ::mojo::PendingReceiver<::blink::mojom::BrowserInterfaceBroker> browser_interface_broker, ::mojo::PendingReceiver<::blink::mojom::DedicatedWorkerHost> host, ::network::CrossOriginEmbedderPolicy* out_parent_coep, ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost>* out_back_forward_cache_controller_host) {
  base::RunLoop loop;
  proxy_->CreateWorkerHost(std::move(token),std::move(script_url),std::move(browser_interface_broker),std::move(host),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::network::CrossOriginEmbedderPolicy* out_parent_coep
,
             ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost>* out_back_forward_cache_controller_host
,
             const ::network::CrossOriginEmbedderPolicy& parent_coep,
             ::mojo::PendingRemote<::blink::mojom::BackForwardCacheControllerHost> back_forward_cache_controller_host) {*out_parent_coep = std::move(parent_coep);*out_back_forward_cache_controller_host = std::move(back_forward_cache_controller_host);
            loop->Quit();
          },
          &loop,
          out_parent_coep,
          out_back_forward_cache_controller_host));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif