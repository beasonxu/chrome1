// third_party/blink/public/mojom/worker/shared_worker_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_FACTORY_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SharedWorkerFactory_CreateSharedWorker_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::SharedWorkerInfo_Data> info;
  mojo::internal::Pointer<::blink::mojom::internal::SharedWorkerToken_Data> token;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> constructor_origin;
  uint8_t is_constructor_secure_context : 1;
  uint8_t pause_on_start : 1;
  uint8_t pad4_[3];
  mojo::internal::Handle_Data preference_watcher_receiver;
  mojo::internal::Pointer<mojo::internal::String_Data> user_agent;
  mojo::internal::Pointer<mojo::internal::String_Data> full_user_agent;
  mojo::internal::Pointer<mojo::internal::String_Data> reduced_user_agent;
  mojo::internal::Pointer<::blink::mojom::internal::UserAgentMetadata_Data> ua_metadata;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_worker_token;
  mojo::internal::Pointer<::blink::mojom::internal::RendererPreferences_Data> renderer_preferences;
  mojo::internal::Interface_Data content_settings;
  mojo::internal::Pointer<::blink::mojom::internal::ServiceWorkerContainerInfoForClient_Data> service_worker_container_info;
  mojo::internal::Pointer<::blink::mojom::internal::WorkerMainScriptLoadParams_Data> main_script_load_params;
  mojo::internal::Pointer<::blink::mojom::internal::URLLoaderFactoryBundle_Data> subresource_loader_factories;
  mojo::internal::Pointer<::blink::mojom::internal::ControllerServiceWorkerInfo_Data> controller_info;
  mojo::internal::Pointer<::blink::mojom::internal::PolicyContainer_Data> policy_container;
  mojo::internal::Interface_Data host;
  mojo::internal::Handle_Data shared_worker;
  mojo::internal::Interface_Data browser_interface_broker;
  uint8_t pad20_[4];
  int64_t ukm_source_id;

 private:
  friend class mojo::internal::MessageFragment<SharedWorkerFactory_CreateSharedWorker_Params_Data>;

  SharedWorkerFactory_CreateSharedWorker_Params_Data();
  ~SharedWorkerFactory_CreateSharedWorker_Params_Data() = delete;
};
static_assert(sizeof(SharedWorkerFactory_CreateSharedWorker_Params_Data) == 168,
              "Bad sizeof(SharedWorkerFactory_CreateSharedWorker_Params_Data)");

}  // namespace internal


class SharedWorkerFactory_CreateSharedWorker_ParamsDataView {
 public:
  SharedWorkerFactory_CreateSharedWorker_ParamsDataView() = default;

  SharedWorkerFactory_CreateSharedWorker_ParamsDataView(
      internal::SharedWorkerFactory_CreateSharedWorker_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      ::blink::mojom::SharedWorkerInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::blink::mojom::SharedWorkerInfoDataView>(
        pointer, output, message_);
  }
  inline void GetTokenDataView(
      ::blink::mojom::SharedWorkerTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::blink::mojom::SharedWorkerTokenDataView>(
        pointer, output, message_);
  }
  inline void GetConstructorOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConstructorOrigin(UserType* output) {
    
    auto* pointer = data_->constructor_origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  bool is_constructor_secure_context() const {
    return data_->is_constructor_secure_context;
  }
  inline void GetUserAgentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUserAgent(UserType* output) {
    
    auto* pointer = data_->user_agent.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFullUserAgentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFullUserAgent(UserType* output) {
    
    auto* pointer = data_->full_user_agent.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetReducedUserAgentDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReducedUserAgent(UserType* output) {
    
    auto* pointer = data_->reduced_user_agent.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUaMetadataDataView(
      ::blink::mojom::UserAgentMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUaMetadata(UserType* output) {
    
    auto* pointer = data_->ua_metadata.Get();
    return mojo::internal::Deserialize<::blink::mojom::UserAgentMetadataDataView>(
        pointer, output, message_);
  }
  bool pause_on_start() const {
    return data_->pause_on_start;
  }
  inline void GetDevtoolsWorkerTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsWorkerToken(UserType* output) {
    
    auto* pointer = data_->devtools_worker_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetRendererPreferencesDataView(
      ::blink::mojom::RendererPreferencesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRendererPreferences(UserType* output) {
    
    auto* pointer = data_->renderer_preferences.Get();
    return mojo::internal::Deserialize<::blink::mojom::RendererPreferencesDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakePreferenceWatcherReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::RendererPreferenceWatcherInterfaceBase>>(
            &data_->preference_watcher_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeContentSettings() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::WorkerContentSettingsProxyInterfaceBase>>(
            &data_->content_settings, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetServiceWorkerContainerInfoDataView(
      ::blink::mojom::ServiceWorkerContainerInfoForClientDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServiceWorkerContainerInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ServiceWorkerContainerInfoForClientDataView, UserType>(),
    "Attempting to read the optional `service_worker_container_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadServiceWorkerContainerInfo` instead "
    "of `ReadServiceWorkerContainerInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->service_worker_container_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ServiceWorkerContainerInfoForClientDataView>(
        pointer, output, message_);
  }
  inline void GetMainScriptLoadParamsDataView(
      ::blink::mojom::WorkerMainScriptLoadParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMainScriptLoadParams(UserType* output) {
    
    auto* pointer = data_->main_script_load_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::WorkerMainScriptLoadParamsDataView>(
        pointer, output, message_);
  }
  inline void GetSubresourceLoaderFactoriesDataView(
      ::blink::mojom::URLLoaderFactoryBundleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubresourceLoaderFactories(UserType* output) {
    
    auto* pointer = data_->subresource_loader_factories.Get();
    return mojo::internal::Deserialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        pointer, output, message_);
  }
  inline void GetControllerInfoDataView(
      ::blink::mojom::ControllerServiceWorkerInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadControllerInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ControllerServiceWorkerInfoDataView, UserType>(),
    "Attempting to read the optional `controller_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadControllerInfo` instead "
    "of `ReadControllerInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->controller_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ControllerServiceWorkerInfoDataView>(
        pointer, output, message_);
  }
  inline void GetPolicyContainerDataView(
      ::blink::mojom::PolicyContainerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyContainer(UserType* output) {
    
    auto* pointer = data_->policy_container.Get();
    return mojo::internal::Deserialize<::blink::mojom::PolicyContainerDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::SharedWorkerHostInterfaceBase>>(
            &data_->host, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeSharedWorker() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SharedWorkerInterfaceBase>>(
            &data_->shared_worker, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeBrowserInterfaceBroker() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
            &data_->browser_interface_broker, &result, message_);
    DCHECK(ret);
    return result;
  }
  int64_t ukm_source_id() const {
    return data_->ukm_source_id;
  }
 private:
  internal::SharedWorkerFactory_CreateSharedWorker_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetInfoDataView(
    ::blink::mojom::SharedWorkerInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = ::blink::mojom::SharedWorkerInfoDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetTokenDataView(
    ::blink::mojom::SharedWorkerTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::blink::mojom::SharedWorkerTokenDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetConstructorOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->constructor_origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetUserAgentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->user_agent.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetFullUserAgentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->full_user_agent.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetReducedUserAgentDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->reduced_user_agent.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetUaMetadataDataView(
    ::blink::mojom::UserAgentMetadataDataView* output) {
  auto pointer = data_->ua_metadata.Get();
  *output = ::blink::mojom::UserAgentMetadataDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetDevtoolsWorkerTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_worker_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetRendererPreferencesDataView(
    ::blink::mojom::RendererPreferencesDataView* output) {
  auto pointer = data_->renderer_preferences.Get();
  *output = ::blink::mojom::RendererPreferencesDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetServiceWorkerContainerInfoDataView(
    ::blink::mojom::ServiceWorkerContainerInfoForClientDataView* output) {
  auto pointer = data_->service_worker_container_info.Get();
  *output = ::blink::mojom::ServiceWorkerContainerInfoForClientDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetMainScriptLoadParamsDataView(
    ::blink::mojom::WorkerMainScriptLoadParamsDataView* output) {
  auto pointer = data_->main_script_load_params.Get();
  *output = ::blink::mojom::WorkerMainScriptLoadParamsDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetSubresourceLoaderFactoriesDataView(
    ::blink::mojom::URLLoaderFactoryBundleDataView* output) {
  auto pointer = data_->subresource_loader_factories.Get();
  *output = ::blink::mojom::URLLoaderFactoryBundleDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetControllerInfoDataView(
    ::blink::mojom::ControllerServiceWorkerInfoDataView* output) {
  auto pointer = data_->controller_info.Get();
  *output = ::blink::mojom::ControllerServiceWorkerInfoDataView(pointer, message_);
}
inline void SharedWorkerFactory_CreateSharedWorker_ParamsDataView::GetPolicyContainerDataView(
    ::blink::mojom::PolicyContainerDataView* output) {
  auto pointer = data_->policy_container.Get();
  *output = ::blink::mojom::PolicyContainerDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_WORKER_SHARED_WORKER_FACTORY_MOJOM_PARAMS_DATA_H_