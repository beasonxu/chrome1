// third_party/blink/public/mojom/choosers/color_chooser.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/choosers/color_chooser.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/choosers/color_chooser.mojom-params-data.h"
#include "third_party/blink/public/mojom/choosers/color_chooser.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/choosers/color_chooser.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/choosers/color_chooser.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHOOSERS_COLOR_CHOOSER_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CHOOSERS_COLOR_CHOOSER_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
ColorSuggestion::ColorSuggestion()
    : color(),
      label() {}

ColorSuggestion::ColorSuggestion(
    uint32_t color_in,
    const WTF::String& label_in)
    : color(std::move(color_in)),
      label(std::move(label_in)) {}

ColorSuggestion::~ColorSuggestion() = default;
size_t ColorSuggestion::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->color);
  seed = mojo::internal::WTFHash(seed, this->label);
  return seed;
}

void ColorSuggestion::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "color"), this->color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "label"), this->label,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ColorSuggestion::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char ColorChooserFactory::Name_[] = "blink.mojom.ColorChooserFactory";

ColorChooserFactory::IPCStableHashFunction ColorChooserFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kColorChooserFactory_OpenColorChooser_Name: {
      return &ColorChooserFactory::OpenColorChooser_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ColorChooserFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kColorChooserFactory_OpenColorChooser_Name:
            return "Receive blink::mojom::ColorChooserFactory::OpenColorChooser";
    }
  } else {
    switch (message.name()) {
      case internal::kColorChooserFactory_OpenColorChooser_Name:
            return "Receive reply blink::mojom::ColorChooserFactory::OpenColorChooser";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ColorChooserFactory::OpenColorChooser_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ColorChooserFactory::OpenColorChooser");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

ColorChooserFactoryProxy::ColorChooserFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ColorChooserFactoryProxy::OpenColorChooser(
    ::mojo::PendingReceiver<ColorChooser> in_chooser, ::mojo::PendingRemote<ColorChooserClient> in_client, uint32_t in_color, WTF::Vector<ColorSuggestionPtr> in_suggestions) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::ColorChooserFactory::OpenColorChooser", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("chooser"), in_chooser,
                        "<value of type ::mojo::PendingReceiver<ColorChooser>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingRemote<ColorChooserClient>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("color"), in_color,
                        "<value of type uint32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("suggestions"), in_suggestions,
                        "<value of type WTF::Vector<ColorSuggestionPtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kColorChooserFactory_OpenColorChooser_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ColorChooserFactory_OpenColorChooser_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::ColorChooserInterfaceBase>>(
      in_chooser, &params->chooser, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->chooser),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid chooser in ColorChooserFactory.OpenColorChooser request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::blink::mojom::ColorChooserClientInterfaceBase>>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client in ColorChooserFactory.OpenColorChooser request");
  params->color = in_color;
  mojo::internal::MessageFragment<
      typename decltype(params->suggestions)::BaseType>
      suggestions_fragment(params.message());
  const mojo::internal::ContainerValidateParams suggestions_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::ColorSuggestionDataView>>(
      in_suggestions, suggestions_fragment, &suggestions_validate_params);
  params->suggestions.Set(
      suggestions_fragment.is_null() ? nullptr : suggestions_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->suggestions.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null suggestions in ColorChooserFactory.OpenColorChooser request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ColorChooserFactory::Name_);
  message.set_method_name("OpenColorChooser");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool ColorChooserFactoryStubDispatch::Accept(
    ColorChooserFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kColorChooserFactory_OpenColorChooser_Name: {

      DCHECK(message->is_serialized());
      internal::ColorChooserFactory_OpenColorChooser_Params_Data* params =
          reinterpret_cast<internal::ColorChooserFactory_OpenColorChooser_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<ColorChooser> p_chooser{};
      ::mojo::PendingRemote<ColorChooserClient> p_client{};
      uint32_t p_color{};
      WTF::Vector<ColorSuggestionPtr> p_suggestions{};
      ColorChooserFactory_OpenColorChooser_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_chooser =
            input_data_view.TakeChooser<decltype(p_chooser)>();
      }
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (success)
        p_color = input_data_view.color();
      if (success && !input_data_view.ReadSuggestions(&p_suggestions))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ColorChooserFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenColorChooser(
std::move(p_chooser), 
std::move(p_client), 
std::move(p_color), 
std::move(p_suggestions));
      return true;
    }
  }
  return false;
}

// static
bool ColorChooserFactoryStubDispatch::AcceptWithResponder(
    ColorChooserFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kColorChooserFactory_OpenColorChooser_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kColorChooserFactoryValidationInfo[] = {
    {&internal::ColorChooserFactory_OpenColorChooser_Params_Data::Validate,
     nullptr /* no response */},
};

bool ColorChooserFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::ColorChooserFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kColorChooserFactoryValidationInfo);
}

const char ColorChooser::Name_[] = "blink.mojom.ColorChooser";

ColorChooser::IPCStableHashFunction ColorChooser::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kColorChooser_SetSelectedColor_Name: {
      return &ColorChooser::SetSelectedColor_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ColorChooser::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kColorChooser_SetSelectedColor_Name:
            return "Receive blink::mojom::ColorChooser::SetSelectedColor";
    }
  } else {
    switch (message.name()) {
      case internal::kColorChooser_SetSelectedColor_Name:
            return "Receive reply blink::mojom::ColorChooser::SetSelectedColor";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ColorChooser::SetSelectedColor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ColorChooser::SetSelectedColor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

ColorChooserProxy::ColorChooserProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ColorChooserProxy::SetSelectedColor(
    uint32_t in_color) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::ColorChooser::SetSelectedColor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("color"), in_color,
                        "<value of type uint32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kColorChooser_SetSelectedColor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ColorChooser_SetSelectedColor_Params_Data> params(
          message);
  params.Allocate();
  params->color = in_color;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ColorChooser::Name_);
  message.set_method_name("SetSelectedColor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool ColorChooserStubDispatch::Accept(
    ColorChooser* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kColorChooser_SetSelectedColor_Name: {

      DCHECK(message->is_serialized());
      internal::ColorChooser_SetSelectedColor_Params_Data* params =
          reinterpret_cast<internal::ColorChooser_SetSelectedColor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint32_t p_color{};
      ColorChooser_SetSelectedColor_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_color = input_data_view.color();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ColorChooser::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetSelectedColor(
std::move(p_color));
      return true;
    }
  }
  return false;
}

// static
bool ColorChooserStubDispatch::AcceptWithResponder(
    ColorChooser* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kColorChooser_SetSelectedColor_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kColorChooserValidationInfo[] = {
    {&internal::ColorChooser_SetSelectedColor_Params_Data::Validate,
     nullptr /* no response */},
};

bool ColorChooserRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::ColorChooser::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kColorChooserValidationInfo);
}

const char ColorChooserClient::Name_[] = "blink.mojom.ColorChooserClient";

ColorChooserClient::IPCStableHashFunction ColorChooserClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kColorChooserClient_DidChooseColor_Name: {
      return &ColorChooserClient::DidChooseColor_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ColorChooserClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kColorChooserClient_DidChooseColor_Name:
            return "Receive blink::mojom::ColorChooserClient::DidChooseColor";
    }
  } else {
    switch (message.name()) {
      case internal::kColorChooserClient_DidChooseColor_Name:
            return "Receive reply blink::mojom::ColorChooserClient::DidChooseColor";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ColorChooserClient::DidChooseColor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ColorChooserClient::DidChooseColor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

ColorChooserClientProxy::ColorChooserClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ColorChooserClientProxy::DidChooseColor(
    uint32_t in_color) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::ColorChooserClient::DidChooseColor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("color"), in_color,
                        "<value of type uint32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kColorChooserClient_DidChooseColor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ColorChooserClient_DidChooseColor_Params_Data> params(
          message);
  params.Allocate();
  params->color = in_color;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ColorChooserClient::Name_);
  message.set_method_name("DidChooseColor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool ColorChooserClientStubDispatch::Accept(
    ColorChooserClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kColorChooserClient_DidChooseColor_Name: {

      DCHECK(message->is_serialized());
      internal::ColorChooserClient_DidChooseColor_Params_Data* params =
          reinterpret_cast<internal::ColorChooserClient_DidChooseColor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint32_t p_color{};
      ColorChooserClient_DidChooseColor_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_color = input_data_view.color();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ColorChooserClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidChooseColor(
std::move(p_color));
      return true;
    }
  }
  return false;
}

// static
bool ColorChooserClientStubDispatch::AcceptWithResponder(
    ColorChooserClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kColorChooserClient_DidChooseColor_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kColorChooserClientValidationInfo[] = {
    {&internal::ColorChooserClient_DidChooseColor_Params_Data::Validate,
     nullptr /* no response */},
};

bool ColorChooserClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::ColorChooserClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kColorChooserClientValidationInfo);
}

const char EyeDropperChooser::Name_[] = "blink.mojom.EyeDropperChooser";

EyeDropperChooser::IPCStableHashFunction EyeDropperChooser::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kEyeDropperChooser_Choose_Name: {
      return &EyeDropperChooser::Choose_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* EyeDropperChooser::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kEyeDropperChooser_Choose_Name:
            return "Receive blink::mojom::EyeDropperChooser::Choose";
    }
  } else {
    switch (message.name()) {
      case internal::kEyeDropperChooser_Choose_Name:
            return "Receive reply blink::mojom::EyeDropperChooser::Choose";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t EyeDropperChooser::Choose_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::EyeDropperChooser::Choose");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class EyeDropperChooser_Choose_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  EyeDropperChooser_Choose_ForwardToCallback(
      EyeDropperChooser::ChooseCallback callback
      ) : callback_(std::move(callback)) {
  }

  EyeDropperChooser_Choose_ForwardToCallback(const EyeDropperChooser_Choose_ForwardToCallback&) = delete;
  EyeDropperChooser_Choose_ForwardToCallback& operator=(const EyeDropperChooser_Choose_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  EyeDropperChooser::ChooseCallback callback_;
};

EyeDropperChooserProxy::EyeDropperChooserProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void EyeDropperChooserProxy::Choose(
    ChooseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::EyeDropperChooser::Choose");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kEyeDropperChooser_Choose_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::EyeDropperChooser_Choose_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(EyeDropperChooser::Name_);
  message.set_method_name("Choose");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new EyeDropperChooser_Choose_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class EyeDropperChooser_Choose_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static EyeDropperChooser::ChooseCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<EyeDropperChooser_Choose_ProxyToResponder> proxy(
        new EyeDropperChooser_Choose_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&EyeDropperChooser_Choose_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~EyeDropperChooser_Choose_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  EyeDropperChooser_Choose_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "EyeDropperChooser::ChooseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, uint32_t in_color);
};

bool EyeDropperChooser_Choose_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::EyeDropperChooser_Choose_ResponseParams_Data* params =
      reinterpret_cast<
          internal::EyeDropperChooser_Choose_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  uint32_t p_color{};
  EyeDropperChooser_Choose_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success)
    p_color = input_data_view.color();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        EyeDropperChooser::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_color));
  return true;
}

void EyeDropperChooser_Choose_ProxyToResponder::Run(
    bool in_success, uint32_t in_color) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::EyeDropperChooser::Choose", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("color"), in_color,
                        "<value of type uint32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kEyeDropperChooser_Choose_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::EyeDropperChooser_Choose_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  params->color = in_color;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(EyeDropperChooser::Name_);
  message.set_method_name("Choose");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool EyeDropperChooserStubDispatch::Accept(
    EyeDropperChooser* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kEyeDropperChooser_Choose_Name: {
      break;
    }
  }
  return false;
}

// static
bool EyeDropperChooserStubDispatch::AcceptWithResponder(
    EyeDropperChooser* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kEyeDropperChooser_Choose_Name: {

      internal::EyeDropperChooser_Choose_Params_Data* params =
          reinterpret_cast<
              internal::EyeDropperChooser_Choose_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      EyeDropperChooser_Choose_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            EyeDropperChooser::Name_, 0, false);
        return false;
      }
      EyeDropperChooser::ChooseCallback callback =
          EyeDropperChooser_Choose_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Choose(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kEyeDropperChooserValidationInfo[] = {
    {&internal::EyeDropperChooser_Choose_Params_Data::Validate,
     &internal::EyeDropperChooser_Choose_ResponseParams_Data::Validate},
};

bool EyeDropperChooserRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::EyeDropperChooser::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kEyeDropperChooserValidationInfo);
}

bool EyeDropperChooserResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::EyeDropperChooser::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kEyeDropperChooserValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::ColorSuggestion::DataView, ::blink::mojom::blink::ColorSuggestionPtr>::Read(
    ::blink::mojom::blink::ColorSuggestion::DataView input,
    ::blink::mojom::blink::ColorSuggestionPtr* output) {
  bool success = true;
  ::blink::mojom::blink::ColorSuggestionPtr result(::blink::mojom::blink::ColorSuggestion::New());
  
      if (success)
        result->color = input.color();
      if (success && !input.ReadLabel(&result->label))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void ColorChooserFactoryInterceptorForTesting::OpenColorChooser(::mojo::PendingReceiver<ColorChooser> chooser, ::mojo::PendingRemote<ColorChooserClient> client, uint32_t color, WTF::Vector<ColorSuggestionPtr> suggestions) {
  GetForwardingInterface()->OpenColorChooser(std::move(chooser), std::move(client), std::move(color), std::move(suggestions));
}
ColorChooserFactoryAsyncWaiter::ColorChooserFactoryAsyncWaiter(
    ColorChooserFactory* proxy) : proxy_(proxy) {}

ColorChooserFactoryAsyncWaiter::~ColorChooserFactoryAsyncWaiter() = default;




void ColorChooserInterceptorForTesting::SetSelectedColor(uint32_t color) {
  GetForwardingInterface()->SetSelectedColor(std::move(color));
}
ColorChooserAsyncWaiter::ColorChooserAsyncWaiter(
    ColorChooser* proxy) : proxy_(proxy) {}

ColorChooserAsyncWaiter::~ColorChooserAsyncWaiter() = default;




void ColorChooserClientInterceptorForTesting::DidChooseColor(uint32_t color) {
  GetForwardingInterface()->DidChooseColor(std::move(color));
}
ColorChooserClientAsyncWaiter::ColorChooserClientAsyncWaiter(
    ColorChooserClient* proxy) : proxy_(proxy) {}

ColorChooserClientAsyncWaiter::~ColorChooserClientAsyncWaiter() = default;




void EyeDropperChooserInterceptorForTesting::Choose(ChooseCallback callback) {
  GetForwardingInterface()->Choose(std::move(callback));
}
EyeDropperChooserAsyncWaiter::EyeDropperChooserAsyncWaiter(
    EyeDropperChooser* proxy) : proxy_(proxy) {}

EyeDropperChooserAsyncWaiter::~EyeDropperChooserAsyncWaiter() = default;

void EyeDropperChooserAsyncWaiter::Choose(
    bool* out_success, uint32_t* out_color) {
  base::RunLoop loop;
  proxy_->Choose(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             uint32_t* out_color
,
             bool success,
             uint32_t color) {*out_success = std::move(success);*out_color = std::move(color);
            loop->Quit();
          },
          &loop,
          out_success,
          out_color));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif