// third_party/blink/public/mojom/android_font_lookup/android_font_lookup.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANDROID_FONT_LOOKUP_ANDROID_FONT_LOOKUP_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANDROID_FONT_LOOKUP_ANDROID_FONT_LOOKUP_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AndroidFontLookup_GetUniqueNameLookupTable_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AndroidFontLookup_GetUniqueNameLookupTable_Params_Data>;

  AndroidFontLookup_GetUniqueNameLookupTable_Params_Data();
  ~AndroidFontLookup_GetUniqueNameLookupTable_Params_Data() = delete;
};
static_assert(sizeof(AndroidFontLookup_GetUniqueNameLookupTable_Params_Data) == 8,
              "Bad sizeof(AndroidFontLookup_GetUniqueNameLookupTable_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> unique_font_names;

 private:
  friend class mojo::internal::MessageFragment<AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data>;

  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data();
  ~AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data() = delete;
};
static_assert(sizeof(AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data) == 16,
              "Bad sizeof(AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> font_unique_name;

 private:
  friend class mojo::internal::MessageFragment<AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data>;

  AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data();
  ~AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data() = delete;
};
static_assert(sizeof(AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data) == 16,
              "Bad sizeof(AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data> font_file_handle;

 private:
  friend class mojo::internal::MessageFragment<AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data>;

  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data();
  ~AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data() = delete;
};
static_assert(sizeof(AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data) == 16,
              "Bad sizeof(AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AndroidFontLookup_FetchAllFontFiles_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AndroidFontLookup_FetchAllFontFiles_Params_Data>;

  AndroidFontLookup_FetchAllFontFiles_Params_Data();
  ~AndroidFontLookup_FetchAllFontFiles_Params_Data() = delete;
};
static_assert(sizeof(AndroidFontLookup_FetchAllFontFiles_Params_Data) == 8,
              "Bad sizeof(AndroidFontLookup_FetchAllFontFiles_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlyFile_Data>>> font_files;

 private:
  friend class mojo::internal::MessageFragment<AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data>;

  AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data();
  ~AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data() = delete;
};
static_assert(sizeof(AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data) == 16,
              "Bad sizeof(AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data)");

}  // namespace internal


class AndroidFontLookup_GetUniqueNameLookupTable_ParamsDataView {
 public:
  AndroidFontLookup_GetUniqueNameLookupTable_ParamsDataView() = default;

  AndroidFontLookup_GetUniqueNameLookupTable_ParamsDataView(
      internal::AndroidFontLookup_GetUniqueNameLookupTable_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AndroidFontLookup_GetUniqueNameLookupTable_Params_Data* data_ = nullptr;
};



class AndroidFontLookup_GetUniqueNameLookupTable_ResponseParamsDataView {
 public:
  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParamsDataView() = default;

  AndroidFontLookup_GetUniqueNameLookupTable_ResponseParamsDataView(
      internal::AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUniqueFontNamesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUniqueFontNames(UserType* output) {
    
    auto* pointer = data_->unique_font_names.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AndroidFontLookup_GetUniqueNameLookupTable_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AndroidFontLookup_MatchLocalFontByUniqueName_ParamsDataView {
 public:
  AndroidFontLookup_MatchLocalFontByUniqueName_ParamsDataView() = default;

  AndroidFontLookup_MatchLocalFontByUniqueName_ParamsDataView(
      internal::AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFontUniqueNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFontUniqueName(UserType* output) {
    
    auto* pointer = data_->font_unique_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::AndroidFontLookup_MatchLocalFontByUniqueName_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParamsDataView {
 public:
  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParamsDataView() = default;

  AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParamsDataView(
      internal::AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFontFileHandleDataView(
      ::mojo_base::mojom::ReadOnlyFileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFontFileHandle(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::ReadOnlyFileDataView, UserType>(),
    "Attempting to read the optional `font_file_handle` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFontFileHandle` instead "
    "of `ReadFontFileHandle if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->font_file_handle.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlyFileDataView>(
        pointer, output, message_);
  }
 private:
  internal::AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AndroidFontLookup_FetchAllFontFiles_ParamsDataView {
 public:
  AndroidFontLookup_FetchAllFontFiles_ParamsDataView() = default;

  AndroidFontLookup_FetchAllFontFiles_ParamsDataView(
      internal::AndroidFontLookup_FetchAllFontFiles_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AndroidFontLookup_FetchAllFontFiles_Params_Data* data_ = nullptr;
};



class AndroidFontLookup_FetchAllFontFiles_ResponseParamsDataView {
 public:
  AndroidFontLookup_FetchAllFontFiles_ResponseParamsDataView() = default;

  AndroidFontLookup_FetchAllFontFiles_ResponseParamsDataView(
      internal::AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFontFilesDataView(
      mojo::MapDataView<mojo::StringDataView, ::mojo_base::mojom::ReadOnlyFileDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFontFiles(UserType* output) {
    
    auto* pointer = data_->font_files.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, ::mojo_base::mojom::ReadOnlyFileDataView>>(
        pointer, output, message_);
  }
 private:
  internal::AndroidFontLookup_FetchAllFontFiles_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void AndroidFontLookup_GetUniqueNameLookupTable_ResponseParamsDataView::GetUniqueFontNamesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->unique_font_names.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void AndroidFontLookup_MatchLocalFontByUniqueName_ParamsDataView::GetFontUniqueNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->font_unique_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void AndroidFontLookup_MatchLocalFontByUniqueName_ResponseParamsDataView::GetFontFileHandleDataView(
    ::mojo_base::mojom::ReadOnlyFileDataView* output) {
  auto pointer = data_->font_file_handle.Get();
  *output = ::mojo_base::mojom::ReadOnlyFileDataView(pointer, message_);
}




inline void AndroidFontLookup_FetchAllFontFiles_ResponseParamsDataView::GetFontFilesDataView(
    mojo::MapDataView<mojo::StringDataView, ::mojo_base::mojom::ReadOnlyFileDataView>* output) {
  auto pointer = data_->font_files.Get();
  *output = mojo::MapDataView<mojo::StringDataView, ::mojo_base::mojom::ReadOnlyFileDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_ANDROID_FONT_LOOKUP_ANDROID_FONT_LOOKUP_MOJOM_PARAMS_DATA_H_