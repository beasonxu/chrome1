// third_party/blink/public/mojom/dom_storage/dom_storage.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DOM_STORAGE_DOM_STORAGE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DOM_STORAGE_DOM_STORAGE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DomStorageProvider_BindDomStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  mojo::internal::Interface_Data client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DomStorageProvider_BindDomStorage_Params_Data>;

  DomStorageProvider_BindDomStorage_Params_Data();
  ~DomStorageProvider_BindDomStorage_Params_Data() = delete;
};
static_assert(sizeof(DomStorageProvider_BindDomStorage_Params_Data) == 24,
              "Bad sizeof(DomStorageProvider_BindDomStorage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DomStorage_OpenLocalStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> local_frame_token;
  mojo::internal::Handle_Data area;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DomStorage_OpenLocalStorage_Params_Data>;

  DomStorage_OpenLocalStorage_Params_Data();
  ~DomStorage_OpenLocalStorage_Params_Data() = delete;
};
static_assert(sizeof(DomStorage_OpenLocalStorage_Params_Data) == 32,
              "Bad sizeof(DomStorage_OpenLocalStorage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DomStorage_BindSessionStorageNamespace_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DomStorage_BindSessionStorageNamespace_Params_Data>;

  DomStorage_BindSessionStorageNamespace_Params_Data();
  ~DomStorage_BindSessionStorageNamespace_Params_Data() = delete;
};
static_assert(sizeof(DomStorage_BindSessionStorageNamespace_Params_Data) == 24,
              "Bad sizeof(DomStorage_BindSessionStorageNamespace_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DomStorage_BindSessionStorageArea_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> local_frame_token;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;
  mojo::internal::Handle_Data session_namespace;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DomStorage_BindSessionStorageArea_Params_Data>;

  DomStorage_BindSessionStorageArea_Params_Data();
  ~DomStorage_BindSessionStorageArea_Params_Data() = delete;
};
static_assert(sizeof(DomStorage_BindSessionStorageArea_Params_Data) == 40,
              "Bad sizeof(DomStorage_BindSessionStorageArea_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data>;

  DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data();
  ~DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data() = delete;
};
static_assert(sizeof(DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data) == 8,
              "Bad sizeof(DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data)");

}  // namespace internal


class DomStorageProvider_BindDomStorage_ParamsDataView {
 public:
  DomStorageProvider_BindDomStorage_ParamsDataView() = default;

  DomStorageProvider_BindDomStorage_ParamsDataView(
      internal::DomStorageProvider_BindDomStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::DomStorageInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::DomStorageClientInterfaceBase>>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DomStorageProvider_BindDomStorage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DomStorage_OpenLocalStorage_ParamsDataView {
 public:
  DomStorage_OpenLocalStorage_ParamsDataView() = default;

  DomStorage_OpenLocalStorage_ParamsDataView(
      internal::DomStorage_OpenLocalStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetLocalFrameTokenDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalFrameToken(UserType* output) {
    
    auto* pointer = data_->local_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeArea() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->area, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DomStorage_OpenLocalStorage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DomStorage_BindSessionStorageNamespace_ParamsDataView {
 public:
  DomStorage_BindSessionStorageNamespace_ParamsDataView() = default;

  DomStorage_BindSessionStorageNamespace_ParamsDataView(
      internal::DomStorage_BindSessionStorageNamespace_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SessionStorageNamespaceInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DomStorage_BindSessionStorageNamespace_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DomStorage_BindSessionStorageArea_ParamsDataView {
 public:
  DomStorage_BindSessionStorageArea_ParamsDataView() = default;

  DomStorage_BindSessionStorageArea_ParamsDataView(
      internal::DomStorage_BindSessionStorageArea_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetLocalFrameTokenDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLocalFrameToken(UserType* output) {
    
    auto* pointer = data_->local_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeSessionNamespace() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->session_namespace, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DomStorage_BindSessionStorageArea_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DomStorageClient_ResetStorageAreaAndNamespaceConnections_ParamsDataView {
 public:
  DomStorageClient_ResetStorageAreaAndNamespaceConnections_ParamsDataView() = default;

  DomStorageClient_ResetStorageAreaAndNamespaceConnections_ParamsDataView(
      internal::DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DomStorageClient_ResetStorageAreaAndNamespaceConnections_Params_Data* data_ = nullptr;
};




inline void DomStorage_OpenLocalStorage_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void DomStorage_OpenLocalStorage_ParamsDataView::GetLocalFrameTokenDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->local_frame_token.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}


inline void DomStorage_BindSessionStorageNamespace_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void DomStorage_BindSessionStorageArea_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void DomStorage_BindSessionStorageArea_ParamsDataView::GetLocalFrameTokenDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->local_frame_token.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}
inline void DomStorage_BindSessionStorageArea_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DOM_STORAGE_DOM_STORAGE_MOJOM_PARAMS_DATA_H_