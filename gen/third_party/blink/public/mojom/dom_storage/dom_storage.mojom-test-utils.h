// third_party/blink/public/mojom/dom_storage/dom_storage.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_DOM_STORAGE_DOM_STORAGE_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_DOM_STORAGE_DOM_STORAGE_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/dom_storage/dom_storage.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT DomStorageProviderInterceptorForTesting : public DomStorageProvider {
  virtual DomStorageProvider* GetForwardingInterface() = 0;
  void BindDomStorage(::mojo::PendingReceiver<DomStorage> receiver, ::mojo::PendingRemote<DomStorageClient> client) override;
};
class BLINK_COMMON_EXPORT DomStorageProviderAsyncWaiter {
 public:
  explicit DomStorageProviderAsyncWaiter(DomStorageProvider* proxy);

  DomStorageProviderAsyncWaiter(const DomStorageProviderAsyncWaiter&) = delete;
  DomStorageProviderAsyncWaiter& operator=(const DomStorageProviderAsyncWaiter&) = delete;

  ~DomStorageProviderAsyncWaiter();

 private:
  DomStorageProvider* const proxy_;
};


class BLINK_COMMON_EXPORT DomStorageInterceptorForTesting : public DomStorage {
  virtual DomStorage* GetForwardingInterface() = 0;
  void OpenLocalStorage(const ::blink::StorageKey& storage_key, const ::blink::LocalFrameToken& local_frame_token, ::mojo::PendingReceiver<::blink::mojom::StorageArea> area) override;
  void BindSessionStorageNamespace(const std::string& namespace_id, ::mojo::PendingReceiver<::blink::mojom::SessionStorageNamespace> receiver) override;
  void BindSessionStorageArea(const ::blink::StorageKey& storage_key, const ::blink::LocalFrameToken& local_frame_token, const std::string& namespace_id, ::mojo::PendingReceiver<::blink::mojom::StorageArea> session_namespace) override;
};
class BLINK_COMMON_EXPORT DomStorageAsyncWaiter {
 public:
  explicit DomStorageAsyncWaiter(DomStorage* proxy);

  DomStorageAsyncWaiter(const DomStorageAsyncWaiter&) = delete;
  DomStorageAsyncWaiter& operator=(const DomStorageAsyncWaiter&) = delete;

  ~DomStorageAsyncWaiter();

 private:
  DomStorage* const proxy_;
};


class BLINK_COMMON_EXPORT DomStorageClientInterceptorForTesting : public DomStorageClient {
  virtual DomStorageClient* GetForwardingInterface() = 0;
  void ResetStorageAreaAndNamespaceConnections() override;
};
class BLINK_COMMON_EXPORT DomStorageClientAsyncWaiter {
 public:
  explicit DomStorageClientAsyncWaiter(DomStorageClient* proxy);

  DomStorageClientAsyncWaiter(const DomStorageClientAsyncWaiter&) = delete;
  DomStorageClientAsyncWaiter& operator=(const DomStorageClientAsyncWaiter&) = delete;

  ~DomStorageClientAsyncWaiter();

 private:
  DomStorageClient* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_DOM_STORAGE_DOM_STORAGE_MOJOM_TEST_UTILS_H_