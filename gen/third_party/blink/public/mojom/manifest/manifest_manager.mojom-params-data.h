// third_party/blink/public/mojom/manifest/manifest_manager.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MANIFEST_MANIFEST_MANAGER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MANIFEST_MANIFEST_MANAGER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ManifestManager_RequestManifest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ManifestManager_RequestManifest_Params_Data>;

  ManifestManager_RequestManifest_Params_Data();
  ~ManifestManager_RequestManifest_Params_Data() = delete;
};
static_assert(sizeof(ManifestManager_RequestManifest_Params_Data) == 8,
              "Bad sizeof(ManifestManager_RequestManifest_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ManifestManager_RequestManifest_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::blink::mojom::internal::Manifest_Data> manifest;

 private:
  friend class mojo::internal::MessageFragment<ManifestManager_RequestManifest_ResponseParams_Data>;

  ManifestManager_RequestManifest_ResponseParams_Data();
  ~ManifestManager_RequestManifest_ResponseParams_Data() = delete;
};
static_assert(sizeof(ManifestManager_RequestManifest_ResponseParams_Data) == 24,
              "Bad sizeof(ManifestManager_RequestManifest_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ManifestManager_RequestManifestDebugInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ManifestManager_RequestManifestDebugInfo_Params_Data>;

  ManifestManager_RequestManifestDebugInfo_Params_Data();
  ~ManifestManager_RequestManifestDebugInfo_Params_Data() = delete;
};
static_assert(sizeof(ManifestManager_RequestManifestDebugInfo_Params_Data) == 8,
              "Bad sizeof(ManifestManager_RequestManifestDebugInfo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ManifestManager_RequestManifestDebugInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::blink::mojom::internal::Manifest_Data> parsed_manifest;
  mojo::internal::Pointer<::blink::mojom::internal::ManifestDebugInfo_Data> debug_info;

 private:
  friend class mojo::internal::MessageFragment<ManifestManager_RequestManifestDebugInfo_ResponseParams_Data>;

  ManifestManager_RequestManifestDebugInfo_ResponseParams_Data();
  ~ManifestManager_RequestManifestDebugInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(ManifestManager_RequestManifestDebugInfo_ResponseParams_Data) == 32,
              "Bad sizeof(ManifestManager_RequestManifestDebugInfo_ResponseParams_Data)");

}  // namespace internal


class ManifestManager_RequestManifest_ParamsDataView {
 public:
  ManifestManager_RequestManifest_ParamsDataView() = default;

  ManifestManager_RequestManifest_ParamsDataView(
      internal::ManifestManager_RequestManifest_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ManifestManager_RequestManifest_Params_Data* data_ = nullptr;
};



class ManifestManager_RequestManifest_ResponseParamsDataView {
 public:
  ManifestManager_RequestManifest_ResponseParamsDataView() = default;

  ManifestManager_RequestManifest_ResponseParamsDataView(
      internal::ManifestManager_RequestManifest_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetManifestDataView(
      ::blink::mojom::ManifestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadManifest(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ManifestDataView, UserType>(),
    "Attempting to read the optional `manifest` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadManifest` instead "
    "of `ReadManifest if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->manifest.Get();
    return mojo::internal::Deserialize<::blink::mojom::ManifestDataView>(
        pointer, output, message_);
  }
 private:
  internal::ManifestManager_RequestManifest_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ManifestManager_RequestManifestDebugInfo_ParamsDataView {
 public:
  ManifestManager_RequestManifestDebugInfo_ParamsDataView() = default;

  ManifestManager_RequestManifestDebugInfo_ParamsDataView(
      internal::ManifestManager_RequestManifestDebugInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ManifestManager_RequestManifestDebugInfo_Params_Data* data_ = nullptr;
};



class ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView {
 public:
  ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView() = default;

  ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView(
      internal::ManifestManager_RequestManifestDebugInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetParsedManifestDataView(
      ::blink::mojom::ManifestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParsedManifest(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ManifestDataView, UserType>(),
    "Attempting to read the optional `parsed_manifest` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadParsedManifest` instead "
    "of `ReadParsedManifest if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->parsed_manifest.Get();
    return mojo::internal::Deserialize<::blink::mojom::ManifestDataView>(
        pointer, output, message_);
  }
  inline void GetDebugInfoDataView(
      ::blink::mojom::ManifestDebugInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDebugInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::ManifestDebugInfoDataView, UserType>(),
    "Attempting to read the optional `debug_info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDebugInfo` instead "
    "of `ReadDebugInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->debug_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ManifestDebugInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ManifestManager_RequestManifestDebugInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void ManifestManager_RequestManifest_ResponseParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ManifestManager_RequestManifest_ResponseParamsDataView::GetManifestDataView(
    ::blink::mojom::ManifestDataView* output) {
  auto pointer = data_->manifest.Get();
  *output = ::blink::mojom::ManifestDataView(pointer, message_);
}




inline void ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView::GetParsedManifestDataView(
    ::blink::mojom::ManifestDataView* output) {
  auto pointer = data_->parsed_manifest.Get();
  *output = ::blink::mojom::ManifestDataView(pointer, message_);
}
inline void ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView::GetDebugInfoDataView(
    ::blink::mojom::ManifestDebugInfoDataView* output) {
  auto pointer = data_->debug_info.Get();
  *output = ::blink::mojom::ManifestDebugInfoDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_MANIFEST_MANIFEST_MANAGER_MOJOM_PARAMS_DATA_H_