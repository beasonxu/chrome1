// third_party/blink/public/mojom/manifest/manifest_manager.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/manifest/manifest_manager.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/manifest/manifest_manager.mojom-params-data.h"
#include "third_party/blink/public/mojom/manifest/manifest_manager.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/manifest/manifest_manager.mojom-import-headers.h"
#include "third_party/blink/public/mojom/manifest/manifest_manager.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_MANIFEST_MANIFEST_MANAGER_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_MANIFEST_MANIFEST_MANAGER_MOJOM_JUMBO_H_
#include "third_party/blink/common/permissions_policy/permissions_policy_mojom_traits.h"
#include "third_party/blink/public/common/manifest/manifest_mojom_traits.h"
#endif



namespace blink {
namespace mojom {
const char ManifestManager::Name_[] = "blink.mojom.ManifestManager";

ManifestManager::IPCStableHashFunction ManifestManager::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kManifestManager_RequestManifest_Name: {
      return &ManifestManager::RequestManifest_Sym::IPCStableHash;
    }
    case internal::kManifestManager_RequestManifestDebugInfo_Name: {
      return &ManifestManager::RequestManifestDebugInfo_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* ManifestManager::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kManifestManager_RequestManifest_Name:
            return "Receive blink::mojom::ManifestManager::RequestManifest";
      case internal::kManifestManager_RequestManifestDebugInfo_Name:
            return "Receive blink::mojom::ManifestManager::RequestManifestDebugInfo";
    }
  } else {
    switch (message.name()) {
      case internal::kManifestManager_RequestManifest_Name:
            return "Receive reply blink::mojom::ManifestManager::RequestManifest";
      case internal::kManifestManager_RequestManifestDebugInfo_Name:
            return "Receive reply blink::mojom::ManifestManager::RequestManifestDebugInfo";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t ManifestManager::RequestManifest_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ManifestManager::RequestManifest");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t ManifestManager::RequestManifestDebugInfo_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::ManifestManager::RequestManifestDebugInfo");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class ManifestManager_RequestManifest_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ManifestManager_RequestManifest_ForwardToCallback(
      ManifestManager::RequestManifestCallback callback
      ) : callback_(std::move(callback)) {
  }

  ManifestManager_RequestManifest_ForwardToCallback(const ManifestManager_RequestManifest_ForwardToCallback&) = delete;
  ManifestManager_RequestManifest_ForwardToCallback& operator=(const ManifestManager_RequestManifest_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ManifestManager::RequestManifestCallback callback_;
};

class ManifestManager_RequestManifestDebugInfo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  ManifestManager_RequestManifestDebugInfo_ForwardToCallback(
      ManifestManager::RequestManifestDebugInfoCallback callback
      ) : callback_(std::move(callback)) {
  }

  ManifestManager_RequestManifestDebugInfo_ForwardToCallback(const ManifestManager_RequestManifestDebugInfo_ForwardToCallback&) = delete;
  ManifestManager_RequestManifestDebugInfo_ForwardToCallback& operator=(const ManifestManager_RequestManifestDebugInfo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  ManifestManager::RequestManifestDebugInfoCallback callback_;
};

ManifestManagerProxy::ManifestManagerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void ManifestManagerProxy::RequestManifest(
    RequestManifestCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::ManifestManager::RequestManifest");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManifestManager_RequestManifest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManifestManager_RequestManifest_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManifestManager::Name_);
  message.set_method_name("RequestManifest");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ManifestManager_RequestManifest_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void ManifestManagerProxy::RequestManifestDebugInfo(
    RequestManifestDebugInfoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send blink::mojom::ManifestManager::RequestManifestDebugInfo");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManifestManager_RequestManifestDebugInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManifestManager_RequestManifestDebugInfo_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManifestManager::Name_);
  message.set_method_name("RequestManifestDebugInfo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new ManifestManager_RequestManifestDebugInfo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class ManifestManager_RequestManifest_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ManifestManager::RequestManifestCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ManifestManager_RequestManifest_ProxyToResponder> proxy(
        new ManifestManager_RequestManifest_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ManifestManager_RequestManifest_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ManifestManager_RequestManifest_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ManifestManager_RequestManifest_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ManifestManager::RequestManifestCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::GURL& in_url, ::blink::mojom::ManifestPtr in_manifest);
};

bool ManifestManager_RequestManifest_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ManifestManager_RequestManifest_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ManifestManager_RequestManifest_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::GURL p_url{};
  ::blink::mojom::ManifestPtr p_manifest{};
  ManifestManager_RequestManifest_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadUrl(&p_url))
    success = false;
  if (success && !input_data_view.ReadManifest(&p_manifest))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ManifestManager::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_url), 
std::move(p_manifest));
  return true;
}

void ManifestManager_RequestManifest_ProxyToResponder::Run(
    const ::GURL& in_url, ::blink::mojom::ManifestPtr in_manifest) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::ManifestManager::RequestManifest", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("manifest"), in_manifest,
                        "<value of type ::blink::mojom::ManifestPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManifestManager_RequestManifest_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManifestManager_RequestManifest_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in ");
  mojo::internal::MessageFragment<
      typename decltype(params->manifest)::BaseType> manifest_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::ManifestDataView>(
      in_manifest, manifest_fragment);
  params->manifest.Set(
      manifest_fragment.is_null() ? nullptr : manifest_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManifestManager::Name_);
  message.set_method_name("RequestManifest");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class ManifestManager_RequestManifestDebugInfo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static ManifestManager::RequestManifestDebugInfoCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<ManifestManager_RequestManifestDebugInfo_ProxyToResponder> proxy(
        new ManifestManager_RequestManifestDebugInfo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&ManifestManager_RequestManifestDebugInfo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~ManifestManager_RequestManifestDebugInfo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  ManifestManager_RequestManifestDebugInfo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "ManifestManager::RequestManifestDebugInfoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::GURL& in_url, ::blink::mojom::ManifestPtr in_parsed_manifest, ::blink::mojom::ManifestDebugInfoPtr in_debug_info);
};

bool ManifestManager_RequestManifestDebugInfo_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::ManifestManager_RequestManifestDebugInfo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::ManifestManager_RequestManifestDebugInfo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::GURL p_url{};
  ::blink::mojom::ManifestPtr p_parsed_manifest{};
  ::blink::mojom::ManifestDebugInfoPtr p_debug_info{};
  ManifestManager_RequestManifestDebugInfo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadUrl(&p_url))
    success = false;
  if (success && !input_data_view.ReadParsedManifest(&p_parsed_manifest))
    success = false;
  if (success && !input_data_view.ReadDebugInfo(&p_debug_info))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        ManifestManager::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_url), 
std::move(p_parsed_manifest), 
std::move(p_debug_info));
  return true;
}

void ManifestManager_RequestManifestDebugInfo_ProxyToResponder::Run(
    const ::GURL& in_url, ::blink::mojom::ManifestPtr in_parsed_manifest, ::blink::mojom::ManifestDebugInfoPtr in_debug_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::ManifestManager::RequestManifestDebugInfo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("parsed_manifest"), in_parsed_manifest,
                        "<value of type ::blink::mojom::ManifestPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("debug_info"), in_debug_info,
                        "<value of type ::blink::mojom::ManifestDebugInfoPtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kManifestManager_RequestManifestDebugInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::ManifestManager_RequestManifestDebugInfo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in ");
  mojo::internal::MessageFragment<
      typename decltype(params->parsed_manifest)::BaseType> parsed_manifest_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::ManifestDataView>(
      in_parsed_manifest, parsed_manifest_fragment);
  params->parsed_manifest.Set(
      parsed_manifest_fragment.is_null() ? nullptr : parsed_manifest_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->debug_info)::BaseType> debug_info_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::ManifestDebugInfoDataView>(
      in_debug_info, debug_info_fragment);
  params->debug_info.Set(
      debug_info_fragment.is_null() ? nullptr : debug_info_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(ManifestManager::Name_);
  message.set_method_name("RequestManifestDebugInfo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool ManifestManagerStubDispatch::Accept(
    ManifestManager* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kManifestManager_RequestManifest_Name: {
      break;
    }
    case internal::kManifestManager_RequestManifestDebugInfo_Name: {
      break;
    }
  }
  return false;
}

// static
bool ManifestManagerStubDispatch::AcceptWithResponder(
    ManifestManager* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kManifestManager_RequestManifest_Name: {

      internal::ManifestManager_RequestManifest_Params_Data* params =
          reinterpret_cast<
              internal::ManifestManager_RequestManifest_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ManifestManager_RequestManifest_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ManifestManager::Name_, 0, false);
        return false;
      }
      ManifestManager::RequestManifestCallback callback =
          ManifestManager_RequestManifest_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestManifest(std::move(callback));
      return true;
    }
    case internal::kManifestManager_RequestManifestDebugInfo_Name: {

      internal::ManifestManager_RequestManifestDebugInfo_Params_Data* params =
          reinterpret_cast<
              internal::ManifestManager_RequestManifestDebugInfo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ManifestManager_RequestManifestDebugInfo_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            ManifestManager::Name_, 1, false);
        return false;
      }
      ManifestManager::RequestManifestDebugInfoCallback callback =
          ManifestManager_RequestManifestDebugInfo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RequestManifestDebugInfo(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kManifestManagerValidationInfo[] = {
    {&internal::ManifestManager_RequestManifest_Params_Data::Validate,
     &internal::ManifestManager_RequestManifest_ResponseParams_Data::Validate},
    {&internal::ManifestManager_RequestManifestDebugInfo_Params_Data::Validate,
     &internal::ManifestManager_RequestManifestDebugInfo_ResponseParams_Data::Validate},
};

bool ManifestManagerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::ManifestManager::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kManifestManagerValidationInfo);
}

bool ManifestManagerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::ManifestManager::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kManifestManagerValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void ManifestManagerInterceptorForTesting::RequestManifest(RequestManifestCallback callback) {
  GetForwardingInterface()->RequestManifest(std::move(callback));
}
void ManifestManagerInterceptorForTesting::RequestManifestDebugInfo(RequestManifestDebugInfoCallback callback) {
  GetForwardingInterface()->RequestManifestDebugInfo(std::move(callback));
}
ManifestManagerAsyncWaiter::ManifestManagerAsyncWaiter(
    ManifestManager* proxy) : proxy_(proxy) {}

ManifestManagerAsyncWaiter::~ManifestManagerAsyncWaiter() = default;

void ManifestManagerAsyncWaiter::RequestManifest(
    ::GURL* out_url, ::blink::mojom::ManifestPtr* out_manifest) {
  base::RunLoop loop;
  proxy_->RequestManifest(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::GURL* out_url
,
             ::blink::mojom::ManifestPtr* out_manifest
,
             const ::GURL& url,
             ::blink::mojom::ManifestPtr manifest) {*out_url = std::move(url);*out_manifest = std::move(manifest);
            loop->Quit();
          },
          &loop,
          out_url,
          out_manifest));
  loop.Run();
}
void ManifestManagerAsyncWaiter::RequestManifestDebugInfo(
    ::GURL* out_url, ::blink::mojom::ManifestPtr* out_parsed_manifest, ::blink::mojom::ManifestDebugInfoPtr* out_debug_info) {
  base::RunLoop loop;
  proxy_->RequestManifestDebugInfo(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::GURL* out_url
,
             ::blink::mojom::ManifestPtr* out_parsed_manifest
,
             ::blink::mojom::ManifestDebugInfoPtr* out_debug_info
,
             const ::GURL& url,
             ::blink::mojom::ManifestPtr parsed_manifest,
             ::blink::mojom::ManifestDebugInfoPtr debug_info) {*out_url = std::move(url);*out_parsed_manifest = std::move(parsed_manifest);*out_debug_info = std::move(debug_info);
            loop->Quit();
          },
          &loop,
          out_url,
          out_parsed_manifest,
          out_debug_info));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif