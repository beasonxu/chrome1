// third_party/blink/public/mojom/loader/navigation_predictor.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/loader/navigation_predictor.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/loader/navigation_predictor.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool AnchorElementMetrics_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 72, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AnchorElementMetrics_Data* object =
      static_cast<const AnchorElementMetrics_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->source_url, 15, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->source_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->target_url, 16, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->target_url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->viewport_size, 17, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->viewport_size, validation_context))
    return false;

  return true;
}

AnchorElementMetrics_Data::AnchorElementMetrics_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AnchorElementClick_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AnchorElementClick_Data* object =
      static_cast<const AnchorElementClick_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->target_url, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->target_url, validation_context))
    return false;

  return true;
}

AnchorElementClick_Data::AnchorElementClick_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AnchorElementEnteredViewport_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AnchorElementEnteredViewport_Data* object =
      static_cast<const AnchorElementEnteredViewport_Data*>(data);

  return true;
}

AnchorElementEnteredViewport_Data::AnchorElementEnteredViewport_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AnchorElementMetricsHost_ReportAnchorElementClick_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AnchorElementMetricsHost_ReportAnchorElementClick_Params_Data* object =
      static_cast<const AnchorElementMetricsHost_ReportAnchorElementClick_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->clicked, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->clicked, validation_context))
    return false;

  return true;
}

AnchorElementMetricsHost_ReportAnchorElementClick_Params_Data::AnchorElementMetricsHost_ReportAnchorElementClick_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AnchorElementMetricsHost_ReportNewAnchorElements_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AnchorElementMetricsHost_ReportNewAnchorElements_Params_Data* object =
      static_cast<const AnchorElementMetricsHost_ReportNewAnchorElements_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->metrics, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams metrics_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->metrics, validation_context,
                                         &metrics_validate_params)) {
    return false;
  }

  return true;
}

AnchorElementMetricsHost_ReportNewAnchorElements_Params_Data::AnchorElementMetricsHost_ReportNewAnchorElements_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AnchorElementMetricsHost_ReportAnchorElementsEnteredViewport_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AnchorElementMetricsHost_ReportAnchorElementsEnteredViewport_Params_Data* object =
      static_cast<const AnchorElementMetricsHost_ReportAnchorElementsEnteredViewport_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->elements, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams elements_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->elements, validation_context,
                                         &elements_validate_params)) {
    return false;
  }

  return true;
}

AnchorElementMetricsHost_ReportAnchorElementsEnteredViewport_Params_Data::AnchorElementMetricsHost_ReportAnchorElementsEnteredViewport_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink