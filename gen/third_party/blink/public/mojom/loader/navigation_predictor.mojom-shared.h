// third_party/blink/public/mojom/loader/navigation_predictor.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_NAVIGATION_PREDICTOR_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_NAVIGATION_PREDICTOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/loader/navigation_predictor.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class AnchorElementMetricsDataView;

class AnchorElementClickDataView;

class AnchorElementEnteredViewportDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::AnchorElementMetricsDataView> {
  using Data = ::blink::mojom::internal::AnchorElementMetrics_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AnchorElementClickDataView> {
  using Data = ::blink::mojom::internal::AnchorElementClick_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::AnchorElementEnteredViewportDataView> {
  using Data = ::blink::mojom::internal::AnchorElementEnteredViewport_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class AnchorElementMetricsHostInterfaceBase {};

using AnchorElementMetricsHostPtrDataView =
    mojo::InterfacePtrDataView<AnchorElementMetricsHostInterfaceBase>;
using AnchorElementMetricsHostRequestDataView =
    mojo::InterfaceRequestDataView<AnchorElementMetricsHostInterfaceBase>;
using AnchorElementMetricsHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AnchorElementMetricsHostInterfaceBase>;
using AnchorElementMetricsHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AnchorElementMetricsHostInterfaceBase>;


class AnchorElementMetricsDataView {
 public:
  AnchorElementMetricsDataView() = default;

  AnchorElementMetricsDataView(
      internal::AnchorElementMetrics_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t anchor_id() const {
    return data_->anchor_id;
  }
  float ratio_area() const {
    return data_->ratio_area;
  }
  float ratio_visible_area() const {
    return data_->ratio_visible_area;
  }
  float ratio_distance_top_to_visible_top() const {
    return data_->ratio_distance_top_to_visible_top;
  }
  float ratio_distance_center_to_visible_top() const {
    return data_->ratio_distance_center_to_visible_top;
  }
  float ratio_distance_root_top() const {
    return data_->ratio_distance_root_top;
  }
  float ratio_distance_root_bottom() const {
    return data_->ratio_distance_root_bottom;
  }
  bool is_in_iframe() const {
    return data_->is_in_iframe;
  }
  bool contains_image() const {
    return data_->contains_image;
  }
  bool is_same_host() const {
    return data_->is_same_host;
  }
  bool is_url_incremented_by_one() const {
    return data_->is_url_incremented_by_one;
  }
  bool has_text_sibling() const {
    return data_->has_text_sibling;
  }
  uint32_t font_size_px() const {
    return data_->font_size_px;
  }
  uint32_t font_weight() const {
    return data_->font_weight;
  }
  inline void GetSourceUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceUrl(UserType* output) {
    
    auto* pointer = data_->source_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTargetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetUrl(UserType* output) {
    
    auto* pointer = data_->target_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetViewportSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadViewportSize(UserType* output) {
    
    auto* pointer = data_->viewport_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
 private:
  internal::AnchorElementMetrics_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AnchorElementClickDataView {
 public:
  AnchorElementClickDataView() = default;

  AnchorElementClickDataView(
      internal::AnchorElementClick_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t anchor_id() const {
    return data_->anchor_id;
  }
  inline void GetTargetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetUrl(UserType* output) {
    
    auto* pointer = data_->target_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::AnchorElementClick_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AnchorElementEnteredViewportDataView {
 public:
  AnchorElementEnteredViewportDataView() = default;

  AnchorElementEnteredViewportDataView(
      internal::AnchorElementEnteredViewport_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t anchor_id() const {
    return data_->anchor_id;
  }
  uint64_t navigation_start_to_entered_viewport_ms() const {
    return data_->navigation_start_to_entered_viewport_ms;
  }
 private:
  internal::AnchorElementEnteredViewport_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AnchorElementMetricsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AnchorElementMetricsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AnchorElementMetrics_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->anchor_id = Traits::anchor_id(input);
    fragment->ratio_area = Traits::ratio_area(input);
    fragment->ratio_visible_area = Traits::ratio_visible_area(input);
    fragment->ratio_distance_top_to_visible_top = Traits::ratio_distance_top_to_visible_top(input);
    fragment->ratio_distance_center_to_visible_top = Traits::ratio_distance_center_to_visible_top(input);
    fragment->ratio_distance_root_top = Traits::ratio_distance_root_top(input);
    fragment->ratio_distance_root_bottom = Traits::ratio_distance_root_bottom(input);
    fragment->is_in_iframe = Traits::is_in_iframe(input);
    fragment->contains_image = Traits::contains_image(input);
    fragment->is_same_host = Traits::is_same_host(input);
    fragment->is_url_incremented_by_one = Traits::is_url_incremented_by_one(input);
    fragment->has_text_sibling = Traits::has_text_sibling(input);
    fragment->font_size_px = Traits::font_size_px(input);
    fragment->font_weight = Traits::font_weight(input);
    decltype(Traits::source_url(input)) in_source_url = Traits::source_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->source_url)::BaseType> source_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_source_url, source_url_fragment);
    fragment->source_url.Set(
        source_url_fragment.is_null() ? nullptr : source_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->source_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null source_url in AnchorElementMetrics struct");
    decltype(Traits::target_url(input)) in_target_url = Traits::target_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->target_url)::BaseType> target_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_target_url, target_url_fragment);
    fragment->target_url.Set(
        target_url_fragment.is_null() ? nullptr : target_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->target_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null target_url in AnchorElementMetrics struct");
    decltype(Traits::viewport_size(input)) in_viewport_size = Traits::viewport_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->viewport_size)::BaseType> viewport_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_viewport_size, viewport_size_fragment);
    fragment->viewport_size.Set(
        viewport_size_fragment.is_null() ? nullptr : viewport_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->viewport_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null viewport_size in AnchorElementMetrics struct");
  }

  static bool Deserialize(::blink::mojom::internal::AnchorElementMetrics_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AnchorElementMetricsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AnchorElementClickDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AnchorElementClickDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AnchorElementClick_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->anchor_id = Traits::anchor_id(input);
    decltype(Traits::target_url(input)) in_target_url = Traits::target_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->target_url)::BaseType> target_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_target_url, target_url_fragment);
    fragment->target_url.Set(
        target_url_fragment.is_null() ? nullptr : target_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->target_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null target_url in AnchorElementClick struct");
  }

  static bool Deserialize(::blink::mojom::internal::AnchorElementClick_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AnchorElementClickDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::AnchorElementEnteredViewportDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::AnchorElementEnteredViewportDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::AnchorElementEnteredViewport_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->anchor_id = Traits::anchor_id(input);
    fragment->navigation_start_to_entered_viewport_ms = Traits::navigation_start_to_entered_viewport_ms(input);
  }

  static bool Deserialize(::blink::mojom::internal::AnchorElementEnteredViewport_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::AnchorElementEnteredViewportDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void AnchorElementMetricsDataView::GetSourceUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->source_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AnchorElementMetricsDataView::GetTargetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->target_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void AnchorElementMetricsDataView::GetViewportSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->viewport_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}


inline void AnchorElementClickDataView::GetTargetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->target_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_NAVIGATION_PREDICTOR_MOJOM_SHARED_H_