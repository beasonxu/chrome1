// third_party/blink/public/mojom/loader/code_cache.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/loader/code_cache.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/loader/code_cache.mojom-params-data.h"
#include "third_party/blink/public/mojom/loader/code_cache.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/loader/code_cache.mojom-import-headers.h"
#include "third_party/blink/public/mojom/loader/code_cache.mojom-test-utils.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_CODE_CACHE_MOJOM_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_LOADER_CODE_CACHE_MOJOM_JUMBO_H_
#endif



namespace blink {
namespace mojom {
const char CodeCacheHost::Name_[] = "blink.mojom.CodeCacheHost";

CodeCacheHost::IPCStableHashFunction CodeCacheHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCodeCacheHost_DidGenerateCacheableMetadata_Name: {
      return &CodeCacheHost::DidGenerateCacheableMetadata_Sym::IPCStableHash;
    }
    case internal::kCodeCacheHost_FetchCachedCode_Name: {
      return &CodeCacheHost::FetchCachedCode_Sym::IPCStableHash;
    }
    case internal::kCodeCacheHost_ClearCodeCacheEntry_Name: {
      return &CodeCacheHost::ClearCodeCacheEntry_Sym::IPCStableHash;
    }
    case internal::kCodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Name: {
      return &CodeCacheHost::DidGenerateCacheableMetadataInCacheStorage_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CodeCacheHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCodeCacheHost_DidGenerateCacheableMetadata_Name:
            return "Receive blink::mojom::CodeCacheHost::DidGenerateCacheableMetadata";
      case internal::kCodeCacheHost_FetchCachedCode_Name:
            return "Receive blink::mojom::CodeCacheHost::FetchCachedCode";
      case internal::kCodeCacheHost_ClearCodeCacheEntry_Name:
            return "Receive blink::mojom::CodeCacheHost::ClearCodeCacheEntry";
      case internal::kCodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Name:
            return "Receive blink::mojom::CodeCacheHost::DidGenerateCacheableMetadataInCacheStorage";
    }
  } else {
    switch (message.name()) {
      case internal::kCodeCacheHost_DidGenerateCacheableMetadata_Name:
            return "Receive reply blink::mojom::CodeCacheHost::DidGenerateCacheableMetadata";
      case internal::kCodeCacheHost_FetchCachedCode_Name:
            return "Receive reply blink::mojom::CodeCacheHost::FetchCachedCode";
      case internal::kCodeCacheHost_ClearCodeCacheEntry_Name:
            return "Receive reply blink::mojom::CodeCacheHost::ClearCodeCacheEntry";
      case internal::kCodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Name:
            return "Receive reply blink::mojom::CodeCacheHost::DidGenerateCacheableMetadataInCacheStorage";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CodeCacheHost::DidGenerateCacheableMetadata_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CodeCacheHost::DidGenerateCacheableMetadata");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CodeCacheHost::FetchCachedCode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CodeCacheHost::FetchCachedCode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CodeCacheHost::ClearCodeCacheEntry_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CodeCacheHost::ClearCodeCacheEntry");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t CodeCacheHost::DidGenerateCacheableMetadataInCacheStorage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::CodeCacheHost::DidGenerateCacheableMetadataInCacheStorage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class CodeCacheHost_FetchCachedCode_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  CodeCacheHost_FetchCachedCode_ForwardToCallback(
      CodeCacheHost::FetchCachedCodeCallback callback
      ) : callback_(std::move(callback)) {
  }

  CodeCacheHost_FetchCachedCode_ForwardToCallback(const CodeCacheHost_FetchCachedCode_ForwardToCallback&) = delete;
  CodeCacheHost_FetchCachedCode_ForwardToCallback& operator=(const CodeCacheHost_FetchCachedCode_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  CodeCacheHost::FetchCachedCodeCallback callback_;
};

CodeCacheHostProxy::CodeCacheHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CodeCacheHostProxy::DidGenerateCacheableMetadata(
    CodeCacheType in_cache_type, const ::GURL& in_url, ::base::Time in_expected_response_time, ::mojo_base::BigBuffer in_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CodeCacheHost::DidGenerateCacheableMetadata", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_type"), in_cache_type,
                        "<value of type CodeCacheType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("expected_response_time"), in_expected_response_time,
                        "<value of type ::base::Time>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data,
                        "<value of type ::mojo_base::BigBuffer>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCodeCacheHost_DidGenerateCacheableMetadata_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CodeCacheHost_DidGenerateCacheableMetadata_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CodeCacheType>(
      in_cache_type, &params->cache_type);
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in CodeCacheHost.DidGenerateCacheableMetadata request");
  mojo::internal::MessageFragment<
      typename decltype(params->expected_response_time)::BaseType> expected_response_time_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
      in_expected_response_time, expected_response_time_fragment);
  params->expected_response_time.Set(
      expected_response_time_fragment.is_null() ? nullptr : expected_response_time_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->expected_response_time.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null expected_response_time in CodeCacheHost.DidGenerateCacheableMetadata request");
  mojo::internal::MessageFragment<decltype(params->data)>
      data_fragment(params.message());
  data_fragment.Claim(&params->data);
  mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
      in_data, data_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in CodeCacheHost.DidGenerateCacheableMetadata request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CodeCacheHost::Name_);
  message.set_method_name("DidGenerateCacheableMetadata");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CodeCacheHostProxy::FetchCachedCode(
    CodeCacheType in_cache_type, const ::GURL& in_url, FetchCachedCodeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CodeCacheHost::FetchCachedCode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_type"), in_cache_type,
                        "<value of type CodeCacheType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCodeCacheHost_FetchCachedCode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CodeCacheHost_FetchCachedCode_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CodeCacheType>(
      in_cache_type, &params->cache_type);
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in CodeCacheHost.FetchCachedCode request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CodeCacheHost::Name_);
  message.set_method_name("FetchCachedCode");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new CodeCacheHost_FetchCachedCode_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void CodeCacheHostProxy::ClearCodeCacheEntry(
    CodeCacheType in_cache_type, const ::GURL& in_url) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CodeCacheHost::ClearCodeCacheEntry", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_type"), in_cache_type,
                        "<value of type CodeCacheType>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCodeCacheHost_ClearCodeCacheEntry_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CodeCacheHost_ClearCodeCacheEntry_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::blink::mojom::CodeCacheType>(
      in_cache_type, &params->cache_type);
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in CodeCacheHost.ClearCodeCacheEntry request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CodeCacheHost::Name_);
  message.set_method_name("ClearCodeCacheEntry");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void CodeCacheHostProxy::DidGenerateCacheableMetadataInCacheStorage(
    const ::GURL& in_url, ::base::Time in_expected_response_time, ::mojo_base::BigBuffer in_data, const ::url::Origin& in_cache_storage_origin, const std::string& in_cache_storage_cache_name) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::CodeCacheHost::DidGenerateCacheableMetadataInCacheStorage", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url"), in_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("expected_response_time"), in_expected_response_time,
                        "<value of type ::base::Time>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data,
                        "<value of type ::mojo_base::BigBuffer>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_storage_origin"), in_cache_storage_origin,
                        "<value of type const ::url::Origin&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_storage_cache_name"), in_cache_storage_cache_name,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->url)::BaseType> url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_url, url_fragment);
  params->url.Set(
      url_fragment.is_null() ? nullptr : url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null url in CodeCacheHost.DidGenerateCacheableMetadataInCacheStorage request");
  mojo::internal::MessageFragment<
      typename decltype(params->expected_response_time)::BaseType> expected_response_time_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
      in_expected_response_time, expected_response_time_fragment);
  params->expected_response_time.Set(
      expected_response_time_fragment.is_null() ? nullptr : expected_response_time_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->expected_response_time.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null expected_response_time in CodeCacheHost.DidGenerateCacheableMetadataInCacheStorage request");
  mojo::internal::MessageFragment<decltype(params->data)>
      data_fragment(params.message());
  data_fragment.Claim(&params->data);
  mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
      in_data, data_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in CodeCacheHost.DidGenerateCacheableMetadataInCacheStorage request");
  mojo::internal::MessageFragment<
      typename decltype(params->cache_storage_origin)::BaseType> cache_storage_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_cache_storage_origin, cache_storage_origin_fragment);
  params->cache_storage_origin.Set(
      cache_storage_origin_fragment.is_null() ? nullptr : cache_storage_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cache_storage_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cache_storage_origin in CodeCacheHost.DidGenerateCacheableMetadataInCacheStorage request");
  mojo::internal::MessageFragment<
      typename decltype(params->cache_storage_cache_name)::BaseType> cache_storage_cache_name_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_cache_storage_cache_name, cache_storage_cache_name_fragment);
  params->cache_storage_cache_name.Set(
      cache_storage_cache_name_fragment.is_null() ? nullptr : cache_storage_cache_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cache_storage_cache_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cache_storage_cache_name in CodeCacheHost.DidGenerateCacheableMetadataInCacheStorage request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CodeCacheHost::Name_);
  message.set_method_name("DidGenerateCacheableMetadataInCacheStorage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class CodeCacheHost_FetchCachedCode_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static CodeCacheHost::FetchCachedCodeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<CodeCacheHost_FetchCachedCode_ProxyToResponder> proxy(
        new CodeCacheHost_FetchCachedCode_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&CodeCacheHost_FetchCachedCode_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~CodeCacheHost_FetchCachedCode_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  CodeCacheHost_FetchCachedCode_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "CodeCacheHost::FetchCachedCodeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::base::Time in_response_time, ::mojo_base::BigBuffer in_data);
};

bool CodeCacheHost_FetchCachedCode_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::CodeCacheHost_FetchCachedCode_ResponseParams_Data* params =
      reinterpret_cast<
          internal::CodeCacheHost_FetchCachedCode_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::base::Time p_response_time{};
  ::mojo_base::BigBuffer p_data{};
  CodeCacheHost_FetchCachedCode_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResponseTime(&p_response_time))
    success = false;
  if (success && !input_data_view.ReadData(&p_data))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        CodeCacheHost::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_response_time), 
std::move(p_data));
  return true;
}

void CodeCacheHost_FetchCachedCode_ProxyToResponder::Run(
    ::base::Time in_response_time, ::mojo_base::BigBuffer in_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::CodeCacheHost::FetchCachedCode", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("response_time"), in_response_time,
                        "<value of type ::base::Time>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data,
                        "<value of type ::mojo_base::BigBuffer>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCodeCacheHost_FetchCachedCode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::CodeCacheHost_FetchCachedCode_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->response_time)::BaseType> response_time_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
      in_response_time, response_time_fragment);
  params->response_time.Set(
      response_time_fragment.is_null() ? nullptr : response_time_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->response_time.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null response_time in ");
  mojo::internal::MessageFragment<decltype(params->data)>
      data_fragment(params.message());
  data_fragment.Claim(&params->data);
  mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
      in_data, data_fragment, true);
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CodeCacheHost::Name_);
  message.set_method_name("FetchCachedCode");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool CodeCacheHostStubDispatch::Accept(
    CodeCacheHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCodeCacheHost_DidGenerateCacheableMetadata_Name: {

      DCHECK(message->is_serialized());
      internal::CodeCacheHost_DidGenerateCacheableMetadata_Params_Data* params =
          reinterpret_cast<internal::CodeCacheHost_DidGenerateCacheableMetadata_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      CodeCacheType p_cache_type{};
      ::GURL p_url{};
      ::base::Time p_expected_response_time{};
      ::mojo_base::BigBuffer p_data{};
      CodeCacheHost_DidGenerateCacheableMetadata_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCacheType(&p_cache_type))
        success = false;
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadExpectedResponseTime(&p_expected_response_time))
        success = false;
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CodeCacheHost::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidGenerateCacheableMetadata(
std::move(p_cache_type), 
std::move(p_url), 
std::move(p_expected_response_time), 
std::move(p_data));
      return true;
    }
    case internal::kCodeCacheHost_FetchCachedCode_Name: {
      break;
    }
    case internal::kCodeCacheHost_ClearCodeCacheEntry_Name: {

      DCHECK(message->is_serialized());
      internal::CodeCacheHost_ClearCodeCacheEntry_Params_Data* params =
          reinterpret_cast<internal::CodeCacheHost_ClearCodeCacheEntry_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      CodeCacheType p_cache_type{};
      ::GURL p_url{};
      CodeCacheHost_ClearCodeCacheEntry_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCacheType(&p_cache_type))
        success = false;
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CodeCacheHost::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ClearCodeCacheEntry(
std::move(p_cache_type), 
std::move(p_url));
      return true;
    }
    case internal::kCodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Name: {

      DCHECK(message->is_serialized());
      internal::CodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Params_Data* params =
          reinterpret_cast<internal::CodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::GURL p_url{};
      ::base::Time p_expected_response_time{};
      ::mojo_base::BigBuffer p_data{};
      ::url::Origin p_cache_storage_origin{};
      std::string p_cache_storage_cache_name{};
      CodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (success && !input_data_view.ReadExpectedResponseTime(&p_expected_response_time))
        success = false;
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (success && !input_data_view.ReadCacheStorageOrigin(&p_cache_storage_origin))
        success = false;
      if (success && !input_data_view.ReadCacheStorageCacheName(&p_cache_storage_cache_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CodeCacheHost::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidGenerateCacheableMetadataInCacheStorage(
std::move(p_url), 
std::move(p_expected_response_time), 
std::move(p_data), 
std::move(p_cache_storage_origin), 
std::move(p_cache_storage_cache_name));
      return true;
    }
  }
  return false;
}

// static
bool CodeCacheHostStubDispatch::AcceptWithResponder(
    CodeCacheHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCodeCacheHost_DidGenerateCacheableMetadata_Name: {
      break;
    }
    case internal::kCodeCacheHost_FetchCachedCode_Name: {

      internal::CodeCacheHost_FetchCachedCode_Params_Data* params =
          reinterpret_cast<
              internal::CodeCacheHost_FetchCachedCode_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      CodeCacheType p_cache_type{};
      ::GURL p_url{};
      CodeCacheHost_FetchCachedCode_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCacheType(&p_cache_type))
        success = false;
      if (success && !input_data_view.ReadUrl(&p_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CodeCacheHost::Name_, 1, false);
        return false;
      }
      CodeCacheHost::FetchCachedCodeCallback callback =
          CodeCacheHost_FetchCachedCode_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->FetchCachedCode(
std::move(p_cache_type), 
std::move(p_url), std::move(callback));
      return true;
    }
    case internal::kCodeCacheHost_ClearCodeCacheEntry_Name: {
      break;
    }
    case internal::kCodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCodeCacheHostValidationInfo[] = {
    {&internal::CodeCacheHost_DidGenerateCacheableMetadata_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CodeCacheHost_FetchCachedCode_Params_Data::Validate,
     &internal::CodeCacheHost_FetchCachedCode_ResponseParams_Data::Validate},
    {&internal::CodeCacheHost_ClearCodeCacheEntry_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::CodeCacheHost_DidGenerateCacheableMetadataInCacheStorage_Params_Data::Validate,
     nullptr /* no response */},
};

bool CodeCacheHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::CodeCacheHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCodeCacheHostValidationInfo);
}

bool CodeCacheHostResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::CodeCacheHost::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kCodeCacheHostValidationInfo);
}


}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {


void CodeCacheHostInterceptorForTesting::DidGenerateCacheableMetadata(CodeCacheType cache_type, const ::GURL& url, ::base::Time expected_response_time, ::mojo_base::BigBuffer data) {
  GetForwardingInterface()->DidGenerateCacheableMetadata(std::move(cache_type), std::move(url), std::move(expected_response_time), std::move(data));
}
void CodeCacheHostInterceptorForTesting::FetchCachedCode(CodeCacheType cache_type, const ::GURL& url, FetchCachedCodeCallback callback) {
  GetForwardingInterface()->FetchCachedCode(std::move(cache_type), std::move(url), std::move(callback));
}
void CodeCacheHostInterceptorForTesting::ClearCodeCacheEntry(CodeCacheType cache_type, const ::GURL& url) {
  GetForwardingInterface()->ClearCodeCacheEntry(std::move(cache_type), std::move(url));
}
void CodeCacheHostInterceptorForTesting::DidGenerateCacheableMetadataInCacheStorage(const ::GURL& url, ::base::Time expected_response_time, ::mojo_base::BigBuffer data, const ::url::Origin& cache_storage_origin, const std::string& cache_storage_cache_name) {
  GetForwardingInterface()->DidGenerateCacheableMetadataInCacheStorage(std::move(url), std::move(expected_response_time), std::move(data), std::move(cache_storage_origin), std::move(cache_storage_cache_name));
}
CodeCacheHostAsyncWaiter::CodeCacheHostAsyncWaiter(
    CodeCacheHost* proxy) : proxy_(proxy) {}

CodeCacheHostAsyncWaiter::~CodeCacheHostAsyncWaiter() = default;

void CodeCacheHostAsyncWaiter::FetchCachedCode(
    CodeCacheType cache_type, const ::GURL& url, ::base::Time* out_response_time, ::mojo_base::BigBuffer* out_data) {
  base::RunLoop loop;
  proxy_->FetchCachedCode(std::move(cache_type),std::move(url),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::Time* out_response_time
,
             ::mojo_base::BigBuffer* out_data
,
             ::base::Time response_time,
             ::mojo_base::BigBuffer data) {*out_response_time = std::move(response_time);*out_data = std::move(data);
            loop->Quit();
          },
          &loop,
          out_response_time,
          out_data));
  loop.Run();
}





}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif