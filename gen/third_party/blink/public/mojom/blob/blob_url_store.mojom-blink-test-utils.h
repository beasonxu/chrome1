// third_party/blink/public/mojom/blob/blob_url_store.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_URL_STORE_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_URL_STORE_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-blink.h"
#include "third_party/blink/renderer/platform/platform_export.h"


namespace blink {
namespace mojom {
namespace blink {


class PLATFORM_EXPORT BlobURLStoreInterceptorForTesting : public BlobURLStore {
  virtual BlobURLStore* GetForwardingInterface() = 0;
  void Register(::mojo::PendingRemote<::blink::mojom::blink::Blob> blob, const ::blink::KURL& url, const ::base::UnguessableToken& unsafe_agent_cluster_id, const absl::optional<::blink::BlinkSchemefulSite>& unsafe_top_level_site, RegisterCallback callback) override;
  void Revoke(const ::blink::KURL& url) override;
  void Resolve(const ::blink::KURL& url, ResolveCallback callback) override;
  void ResolveAsURLLoaderFactory(const ::blink::KURL& url, ::mojo::PendingReceiver<::network::mojom::blink::URLLoaderFactory> factory, ResolveAsURLLoaderFactoryCallback callback) override;
  void ResolveForNavigation(const ::blink::KURL& url, ::mojo::PendingReceiver<BlobURLToken> token, ResolveForNavigationCallback callback) override;
};
class PLATFORM_EXPORT BlobURLStoreAsyncWaiter {
 public:
  explicit BlobURLStoreAsyncWaiter(BlobURLStore* proxy);

  BlobURLStoreAsyncWaiter(const BlobURLStoreAsyncWaiter&) = delete;
  BlobURLStoreAsyncWaiter& operator=(const BlobURLStoreAsyncWaiter&) = delete;

  ~BlobURLStoreAsyncWaiter();
  void Register(
      ::mojo::PendingRemote<::blink::mojom::blink::Blob> blob, const ::blink::KURL& url, const ::base::UnguessableToken& unsafe_agent_cluster_id, const absl::optional<::blink::BlinkSchemefulSite>& unsafe_top_level_site);
  void Resolve(
      const ::blink::KURL& url, ::mojo::PendingRemote<::blink::mojom::blink::Blob>* out_blob, absl::optional<::base::UnguessableToken>* out_unsafe_agent_cluster_id);
  void ResolveAsURLLoaderFactory(
      const ::blink::KURL& url, ::mojo::PendingReceiver<::network::mojom::blink::URLLoaderFactory> factory, absl::optional<::base::UnguessableToken>* out_unsafe_agent_cluster_id, absl::optional<::blink::BlinkSchemefulSite>* out_unsafe_top_level_site);
  void ResolveForNavigation(
      const ::blink::KURL& url, ::mojo::PendingReceiver<BlobURLToken> token, absl::optional<::base::UnguessableToken>* out_unsafe_agent_cluster_id);

 private:
  BlobURLStore* const proxy_;
};


class PLATFORM_EXPORT BlobURLTokenInterceptorForTesting : public BlobURLToken {
  virtual BlobURLToken* GetForwardingInterface() = 0;
  void Clone(::mojo::PendingReceiver<BlobURLToken> token) override;
  void GetToken(GetTokenCallback callback) override;
};
class PLATFORM_EXPORT BlobURLTokenAsyncWaiter {
 public:
  explicit BlobURLTokenAsyncWaiter(BlobURLToken* proxy);

  BlobURLTokenAsyncWaiter(const BlobURLTokenAsyncWaiter&) = delete;
  BlobURLTokenAsyncWaiter& operator=(const BlobURLTokenAsyncWaiter&) = delete;

  ~BlobURLTokenAsyncWaiter();
  void GetToken(
      ::base::UnguessableToken* out_token);

 private:
  BlobURLToken* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BLOB_BLOB_URL_STORE_MOJOM_BLINK_TEST_UTILS_H_