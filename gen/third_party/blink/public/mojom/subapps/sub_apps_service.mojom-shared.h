// third_party/blink/public/mojom/subapps/sub_apps_service.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class SubAppsServiceAddInfoDataView;

class SubAppsServiceAddResultDataView;

class SubAppsServiceListResultDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::SubAppsServiceAddInfoDataView> {
  using Data = ::blink::mojom::internal::SubAppsServiceAddInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::SubAppsServiceAddResultDataView> {
  using Data = ::blink::mojom::internal::SubAppsServiceAddResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::SubAppsServiceListResultDataView> {
  using Data = ::blink::mojom::internal::SubAppsServiceListResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class SubAppsServiceResult : int32_t {
  
  kSuccess = 0,
  
  kFailure = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, SubAppsServiceResult value);
inline bool IsKnownEnumValue(SubAppsServiceResult value) {
  return internal::SubAppsServiceResult_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class SubAppsServiceAddResultCode : int32_t {
  
  kSuccessNewInstall = 0,
  
  kSuccessAlreadyInstalled = 1,
  
  kUserInstallDeclined = 2,
  
  kExpectedAppIdCheckFailed = 3,
  
  kParentAppUninstalled = 4,
  
  kFailure = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, SubAppsServiceAddResultCode value);
inline bool IsKnownEnumValue(SubAppsServiceAddResultCode value) {
  return internal::SubAppsServiceAddResultCode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class SubAppsServiceInterfaceBase {};

using SubAppsServicePtrDataView =
    mojo::InterfacePtrDataView<SubAppsServiceInterfaceBase>;
using SubAppsServiceRequestDataView =
    mojo::InterfaceRequestDataView<SubAppsServiceInterfaceBase>;
using SubAppsServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SubAppsServiceInterfaceBase>;
using SubAppsServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SubAppsServiceInterfaceBase>;


class SubAppsServiceAddInfoDataView {
 public:
  SubAppsServiceAddInfoDataView() = default;

  SubAppsServiceAddInfoDataView(
      internal::SubAppsServiceAddInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUnhashedAppIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnhashedAppId(UserType* output) {
    
    auto* pointer = data_->unhashed_app_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetInstallUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInstallUrl(UserType* output) {
    
    auto* pointer = data_->install_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::SubAppsServiceAddInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SubAppsServiceAddResultDataView {
 public:
  SubAppsServiceAddResultDataView() = default;

  SubAppsServiceAddResultDataView(
      internal::SubAppsServiceAddResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUnhashedAppIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUnhashedAppId(UserType* output) {
    
    auto* pointer = data_->unhashed_app_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadResultCode(UserType* output) const {
    auto data_value = data_->result_code;
    return mojo::internal::Deserialize<::blink::mojom::SubAppsServiceAddResultCode>(
        data_value, output);
  }
  SubAppsServiceAddResultCode result_code() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::SubAppsServiceAddResultCode>(data_->result_code));
  }
 private:
  internal::SubAppsServiceAddResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SubAppsServiceListResultDataView {
 public:
  SubAppsServiceListResultDataView() = default;

  SubAppsServiceListResultDataView(
      internal::SubAppsServiceListResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCode(UserType* output) const {
    auto data_value = data_->code;
    return mojo::internal::Deserialize<::blink::mojom::SubAppsServiceResult>(
        data_value, output);
  }
  SubAppsServiceResult code() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::SubAppsServiceResult>(data_->code));
  }
  inline void GetSubAppIdsDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubAppIds(UserType* output) {
    
    auto* pointer = data_->sub_app_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::SubAppsServiceListResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::SubAppsServiceResult>
    : public mojo::internal::EnumHashImpl<::blink::mojom::SubAppsServiceResult> {};

template <>
struct hash<::blink::mojom::SubAppsServiceAddResultCode>
    : public mojo::internal::EnumHashImpl<::blink::mojom::SubAppsServiceAddResultCode> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SubAppsServiceResult, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::SubAppsServiceResult, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::SubAppsServiceResult>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SubAppsServiceAddResultCode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::SubAppsServiceAddResultCode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::SubAppsServiceAddResultCode>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SubAppsServiceAddInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::SubAppsServiceAddInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::SubAppsServiceAddInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::unhashed_app_id(input)) in_unhashed_app_id = Traits::unhashed_app_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->unhashed_app_id)::BaseType> unhashed_app_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_unhashed_app_id, unhashed_app_id_fragment);
    fragment->unhashed_app_id.Set(
        unhashed_app_id_fragment.is_null() ? nullptr : unhashed_app_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->unhashed_app_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null unhashed_app_id in SubAppsServiceAddInfo struct");
    decltype(Traits::install_url(input)) in_install_url = Traits::install_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->install_url)::BaseType> install_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_install_url, install_url_fragment);
    fragment->install_url.Set(
        install_url_fragment.is_null() ? nullptr : install_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->install_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null install_url in SubAppsServiceAddInfo struct");
  }

  static bool Deserialize(::blink::mojom::internal::SubAppsServiceAddInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::SubAppsServiceAddInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SubAppsServiceAddResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::SubAppsServiceAddResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::SubAppsServiceAddResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::unhashed_app_id(input)) in_unhashed_app_id = Traits::unhashed_app_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->unhashed_app_id)::BaseType> unhashed_app_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_unhashed_app_id, unhashed_app_id_fragment);
    fragment->unhashed_app_id.Set(
        unhashed_app_id_fragment.is_null() ? nullptr : unhashed_app_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->unhashed_app_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null unhashed_app_id in SubAppsServiceAddResult struct");
    mojo::internal::Serialize<::blink::mojom::SubAppsServiceAddResultCode>(
        Traits::result_code(input), &fragment->result_code);
  }

  static bool Deserialize(::blink::mojom::internal::SubAppsServiceAddResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::SubAppsServiceAddResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SubAppsServiceListResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::SubAppsServiceListResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::SubAppsServiceListResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::SubAppsServiceResult>(
        Traits::code(input), &fragment->code);
    decltype(Traits::sub_app_ids(input)) in_sub_app_ids = Traits::sub_app_ids(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->sub_app_ids)::BaseType>
        sub_app_ids_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams sub_app_ids_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_sub_app_ids, sub_app_ids_fragment, &sub_app_ids_validate_params);
    fragment->sub_app_ids.Set(
        sub_app_ids_fragment.is_null() ? nullptr : sub_app_ids_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->sub_app_ids.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null sub_app_ids in SubAppsServiceListResult struct");
  }

  static bool Deserialize(::blink::mojom::internal::SubAppsServiceListResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::SubAppsServiceListResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void SubAppsServiceAddInfoDataView::GetUnhashedAppIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->unhashed_app_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SubAppsServiceAddInfoDataView::GetInstallUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->install_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void SubAppsServiceAddResultDataView::GetUnhashedAppIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->unhashed_app_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void SubAppsServiceListResultDataView::GetSubAppIdsDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->sub_app_ids.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::SubAppsServiceResult> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::SubAppsServiceResult value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::SubAppsServiceAddResultCode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::SubAppsServiceAddResultCode value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_SHARED_H_