// third_party/blink/public/mojom/subapps/sub_apps_service.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* SubAppsServiceResultToStringHelper(SubAppsServiceResult value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case SubAppsServiceResult::kSuccess:
      return "kSuccess";
    case SubAppsServiceResult::kFailure:
      return "kFailure";
    default:
      return nullptr;
  }
}

std::string SubAppsServiceResultToString(SubAppsServiceResult value) {
  const char *str = SubAppsServiceResultToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown SubAppsServiceResult value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, SubAppsServiceResult value) {
  return os << SubAppsServiceResultToString(value);
}

static NOINLINE const char* SubAppsServiceAddResultCodeToStringHelper(SubAppsServiceAddResultCode value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case SubAppsServiceAddResultCode::kSuccessNewInstall:
      return "kSuccessNewInstall";
    case SubAppsServiceAddResultCode::kSuccessAlreadyInstalled:
      return "kSuccessAlreadyInstalled";
    case SubAppsServiceAddResultCode::kUserInstallDeclined:
      return "kUserInstallDeclined";
    case SubAppsServiceAddResultCode::kExpectedAppIdCheckFailed:
      return "kExpectedAppIdCheckFailed";
    case SubAppsServiceAddResultCode::kParentAppUninstalled:
      return "kParentAppUninstalled";
    case SubAppsServiceAddResultCode::kFailure:
      return "kFailure";
    default:
      return nullptr;
  }
}

std::string SubAppsServiceAddResultCodeToString(SubAppsServiceAddResultCode value) {
  const char *str = SubAppsServiceAddResultCodeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown SubAppsServiceAddResultCode value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, SubAppsServiceAddResultCode value) {
  return os << SubAppsServiceAddResultCodeToString(value);
}

namespace internal {


// static
bool SubAppsServiceAddInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsServiceAddInfo_Data* object =
      static_cast<const SubAppsServiceAddInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->unhashed_app_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams unhashed_app_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->unhashed_app_id, validation_context,
                                         &unhashed_app_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->install_url, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->install_url, validation_context))
    return false;

  return true;
}

SubAppsServiceAddInfo_Data::SubAppsServiceAddInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsServiceAddResult_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsServiceAddResult_Data* object =
      static_cast<const SubAppsServiceAddResult_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->unhashed_app_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams unhashed_app_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->unhashed_app_id, validation_context,
                                         &unhashed_app_id_validate_params)) {
    return false;
  }


  if (!::blink::mojom::internal::SubAppsServiceAddResultCode_Data
        ::Validate(object->result_code, validation_context))
    return false;

  return true;
}

SubAppsServiceAddResult_Data::SubAppsServiceAddResult_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsServiceListResult_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsServiceListResult_Data* object =
      static_cast<const SubAppsServiceListResult_Data*>(data);


  if (!::blink::mojom::internal::SubAppsServiceResult_Data
        ::Validate(object->code, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->sub_app_ids, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams sub_app_ids_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->sub_app_ids, validation_context,
                                         &sub_app_ids_validate_params)) {
    return false;
  }

  return true;
}

SubAppsServiceListResult_Data::SubAppsServiceListResult_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsService_Add_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsService_Add_Params_Data* object =
      static_cast<const SubAppsService_Add_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->sub_apps, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams sub_apps_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->sub_apps, validation_context,
                                         &sub_apps_validate_params)) {
    return false;
  }

  return true;
}

SubAppsService_Add_Params_Data::SubAppsService_Add_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsService_Add_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsService_Add_ResponseParams_Data* object =
      static_cast<const SubAppsService_Add_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->result, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams result_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->result, validation_context,
                                         &result_validate_params)) {
    return false;
  }

  return true;
}

SubAppsService_Add_ResponseParams_Data::SubAppsService_Add_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsService_List_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsService_List_Params_Data* object =
      static_cast<const SubAppsService_List_Params_Data*>(data);

  return true;
}

SubAppsService_List_Params_Data::SubAppsService_List_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsService_List_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsService_List_ResponseParams_Data* object =
      static_cast<const SubAppsService_List_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->result, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->result, validation_context))
    return false;

  return true;
}

SubAppsService_List_ResponseParams_Data::SubAppsService_List_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsService_Remove_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsService_Remove_Params_Data* object =
      static_cast<const SubAppsService_Remove_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->unhashed_app_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams unhashed_app_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->unhashed_app_id, validation_context,
                                         &unhashed_app_id_validate_params)) {
    return false;
  }

  return true;
}

SubAppsService_Remove_Params_Data::SubAppsService_Remove_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SubAppsService_Remove_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SubAppsService_Remove_ResponseParams_Data* object =
      static_cast<const SubAppsService_Remove_ResponseParams_Data*>(data);


  if (!::blink::mojom::internal::SubAppsServiceResult_Data
        ::Validate(object->result, validation_context))
    return false;

  return true;
}

SubAppsService_Remove_ResponseParams_Data::SubAppsService_Remove_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::SubAppsServiceResult>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::SubAppsServiceResult value) {
  return std::move(context).WriteString(::blink::mojom::SubAppsServiceResultToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::SubAppsServiceAddResultCode>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::SubAppsServiceAddResultCode value) {
  return std::move(context).WriteString(::blink::mojom::SubAppsServiceAddResultCodeToString(value));
}

} // namespace perfetto