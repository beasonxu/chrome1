// third_party/blink/public/mojom/subapps/sub_apps_service.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-shared.h"
#include "third_party/blink/public/mojom/subapps/sub_apps_service.mojom-forward.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class SubAppsServiceProxy;

template <typename ImplRefTraits>
class SubAppsServiceStub;

class SubAppsServiceRequestValidator;
class SubAppsServiceResponseValidator;


class BLINK_COMMON_EXPORT SubAppsService
    : public SubAppsServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = SubAppsServiceInterfaceBase;
  using Proxy_ = SubAppsServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = SubAppsServiceStub<ImplRefTraits>;

  using RequestValidator_ = SubAppsServiceRequestValidator;
  using ResponseValidator_ = SubAppsServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kAddMinVersion = 0,
    kListMinVersion = 0,
    kRemoveMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Add_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct List_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Remove_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~SubAppsService() = default;


  using AddCallback = base::OnceCallback<void(std::vector<SubAppsServiceAddResultPtr>)>;
  
  virtual void Add(std::vector<SubAppsServiceAddInfoPtr> sub_apps, AddCallback callback) = 0;


  using ListCallback = base::OnceCallback<void(SubAppsServiceListResultPtr)>;
  
  virtual void List(ListCallback callback) = 0;


  using RemoveCallback = base::OnceCallback<void(SubAppsServiceResult)>;
  
  virtual void Remove(const std::string& unhashed_app_id, RemoveCallback callback) = 0;
};



class BLINK_COMMON_EXPORT SubAppsServiceProxy
    : public SubAppsService {
 public:
  using InterfaceType = SubAppsService;

  explicit SubAppsServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Add(std::vector<SubAppsServiceAddInfoPtr> sub_apps, AddCallback callback) final;
  
  void List(ListCallback callback) final;
  
  void Remove(const std::string& unhashed_app_id, RemoveCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT SubAppsServiceStubDispatch {
 public:
  static bool Accept(SubAppsService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      SubAppsService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<SubAppsService>>
class SubAppsServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SubAppsServiceStub() = default;
  ~SubAppsServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SubAppsServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SubAppsServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT SubAppsServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT SubAppsServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};






class BLINK_COMMON_EXPORT SubAppsServiceAddResult {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SubAppsServiceAddResult, T>::value>;
  using DataView = SubAppsServiceAddResultDataView;
  using Data_ = internal::SubAppsServiceAddResult_Data;

  template <typename... Args>
  static SubAppsServiceAddResultPtr New(Args&&... args) {
    return SubAppsServiceAddResultPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SubAppsServiceAddResultPtr From(const U& u) {
    return mojo::TypeConverter<SubAppsServiceAddResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SubAppsServiceAddResult>::Convert(*this);
  }


  SubAppsServiceAddResult();

  SubAppsServiceAddResult(
      const std::string& unhashed_app_id,
      SubAppsServiceAddResultCode result_code);


  ~SubAppsServiceAddResult();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SubAppsServiceAddResultPtr>
  SubAppsServiceAddResultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SubAppsServiceAddResult::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SubAppsServiceAddResult::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SubAppsServiceAddResult::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SubAppsServiceAddResult::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SubAppsServiceAddResult_UnserializedMessageContext<
            UserType, SubAppsServiceAddResult::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SubAppsServiceAddResult::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SubAppsServiceAddResult::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SubAppsServiceAddResult_UnserializedMessageContext<
            UserType, SubAppsServiceAddResult::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SubAppsServiceAddResult::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string unhashed_app_id;
  
  SubAppsServiceAddResultCode result_code;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SubAppsServiceAddResult::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SubAppsServiceAddResult::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SubAppsServiceAddResult::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SubAppsServiceAddResult::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}








class BLINK_COMMON_EXPORT SubAppsServiceAddInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SubAppsServiceAddInfo, T>::value>;
  using DataView = SubAppsServiceAddInfoDataView;
  using Data_ = internal::SubAppsServiceAddInfo_Data;

  template <typename... Args>
  static SubAppsServiceAddInfoPtr New(Args&&... args) {
    return SubAppsServiceAddInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SubAppsServiceAddInfoPtr From(const U& u) {
    return mojo::TypeConverter<SubAppsServiceAddInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SubAppsServiceAddInfo>::Convert(*this);
  }


  SubAppsServiceAddInfo();

  SubAppsServiceAddInfo(
      const std::string& unhashed_app_id,
      const ::GURL& install_url);


  ~SubAppsServiceAddInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SubAppsServiceAddInfoPtr>
  SubAppsServiceAddInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SubAppsServiceAddInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SubAppsServiceAddInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SubAppsServiceAddInfo_UnserializedMessageContext<
            UserType, SubAppsServiceAddInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SubAppsServiceAddInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SubAppsServiceAddInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SubAppsServiceAddInfo_UnserializedMessageContext<
            UserType, SubAppsServiceAddInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SubAppsServiceAddInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string unhashed_app_id;
  
  ::GURL install_url;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class BLINK_COMMON_EXPORT SubAppsServiceListResult {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SubAppsServiceListResult, T>::value>;
  using DataView = SubAppsServiceListResultDataView;
  using Data_ = internal::SubAppsServiceListResult_Data;

  template <typename... Args>
  static SubAppsServiceListResultPtr New(Args&&... args) {
    return SubAppsServiceListResultPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SubAppsServiceListResultPtr From(const U& u) {
    return mojo::TypeConverter<SubAppsServiceListResultPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SubAppsServiceListResult>::Convert(*this);
  }


  SubAppsServiceListResult();

  SubAppsServiceListResult(
      SubAppsServiceResult code,
      std::vector<std::string> sub_app_ids);


  ~SubAppsServiceListResult();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SubAppsServiceListResultPtr>
  SubAppsServiceListResultPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SubAppsServiceListResult::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SubAppsServiceListResult::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        SubAppsServiceListResult::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SubAppsServiceListResult::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SubAppsServiceListResult_UnserializedMessageContext<
            UserType, SubAppsServiceListResult::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SubAppsServiceListResult::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return SubAppsServiceListResult::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SubAppsServiceListResult_UnserializedMessageContext<
            UserType, SubAppsServiceListResult::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SubAppsServiceListResult::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  SubAppsServiceResult code;
  
  std::vector<std::string> sub_app_ids;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SubAppsServiceListResult::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SubAppsServiceListResult::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SubAppsServiceListResult::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SubAppsServiceListResult::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
SubAppsServiceAddInfoPtr SubAppsServiceAddInfo::Clone() const {
  return New(
      mojo::Clone(unhashed_app_id),
      mojo::Clone(install_url)
  );
}

template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>*>
bool SubAppsServiceAddInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->unhashed_app_id, other_struct.unhashed_app_id))
    return false;
  if (!mojo::Equals(this->install_url, other_struct.install_url))
    return false;
  return true;
}

template <typename T, SubAppsServiceAddInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.unhashed_app_id < rhs.unhashed_app_id)
    return true;
  if (rhs.unhashed_app_id < lhs.unhashed_app_id)
    return false;
  if (lhs.install_url < rhs.install_url)
    return true;
  if (rhs.install_url < lhs.install_url)
    return false;
  return false;
}
template <typename StructPtrType>
SubAppsServiceAddResultPtr SubAppsServiceAddResult::Clone() const {
  return New(
      mojo::Clone(unhashed_app_id),
      mojo::Clone(result_code)
  );
}

template <typename T, SubAppsServiceAddResult::EnableIfSame<T>*>
bool SubAppsServiceAddResult::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->unhashed_app_id, other_struct.unhashed_app_id))
    return false;
  if (!mojo::Equals(this->result_code, other_struct.result_code))
    return false;
  return true;
}

template <typename T, SubAppsServiceAddResult::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.unhashed_app_id < rhs.unhashed_app_id)
    return true;
  if (rhs.unhashed_app_id < lhs.unhashed_app_id)
    return false;
  if (lhs.result_code < rhs.result_code)
    return true;
  if (rhs.result_code < lhs.result_code)
    return false;
  return false;
}
template <typename StructPtrType>
SubAppsServiceListResultPtr SubAppsServiceListResult::Clone() const {
  return New(
      mojo::Clone(code),
      mojo::Clone(sub_app_ids)
  );
}

template <typename T, SubAppsServiceListResult::EnableIfSame<T>*>
bool SubAppsServiceListResult::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->code, other_struct.code))
    return false;
  if (!mojo::Equals(this->sub_app_ids, other_struct.sub_app_ids))
    return false;
  return true;
}

template <typename T, SubAppsServiceListResult::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.code < rhs.code)
    return true;
  if (rhs.code < lhs.code)
    return false;
  if (lhs.sub_app_ids < rhs.sub_app_ids)
    return true;
  if (rhs.sub_app_ids < lhs.sub_app_ids)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::SubAppsServiceAddInfo::DataView,
                                         ::blink::mojom::SubAppsServiceAddInfoPtr> {
  static bool IsNull(const ::blink::mojom::SubAppsServiceAddInfoPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::SubAppsServiceAddInfoPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::SubAppsServiceAddInfo::unhashed_app_id)& unhashed_app_id(
      const ::blink::mojom::SubAppsServiceAddInfoPtr& input) {
    return input->unhashed_app_id;
  }

  static const decltype(::blink::mojom::SubAppsServiceAddInfo::install_url)& install_url(
      const ::blink::mojom::SubAppsServiceAddInfoPtr& input) {
    return input->install_url;
  }

  static bool Read(::blink::mojom::SubAppsServiceAddInfo::DataView input, ::blink::mojom::SubAppsServiceAddInfoPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::SubAppsServiceAddResult::DataView,
                                         ::blink::mojom::SubAppsServiceAddResultPtr> {
  static bool IsNull(const ::blink::mojom::SubAppsServiceAddResultPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::SubAppsServiceAddResultPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::SubAppsServiceAddResult::unhashed_app_id)& unhashed_app_id(
      const ::blink::mojom::SubAppsServiceAddResultPtr& input) {
    return input->unhashed_app_id;
  }

  static decltype(::blink::mojom::SubAppsServiceAddResult::result_code) result_code(
      const ::blink::mojom::SubAppsServiceAddResultPtr& input) {
    return input->result_code;
  }

  static bool Read(::blink::mojom::SubAppsServiceAddResult::DataView input, ::blink::mojom::SubAppsServiceAddResultPtr* output);
};


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::SubAppsServiceListResult::DataView,
                                         ::blink::mojom::SubAppsServiceListResultPtr> {
  static bool IsNull(const ::blink::mojom::SubAppsServiceListResultPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::SubAppsServiceListResultPtr* output) { output->reset(); }

  static decltype(::blink::mojom::SubAppsServiceListResult::code) code(
      const ::blink::mojom::SubAppsServiceListResultPtr& input) {
    return input->code;
  }

  static const decltype(::blink::mojom::SubAppsServiceListResult::sub_app_ids)& sub_app_ids(
      const ::blink::mojom::SubAppsServiceListResultPtr& input) {
    return input->sub_app_ids;
  }

  static bool Read(::blink::mojom::SubAppsServiceListResult::DataView input, ::blink::mojom::SubAppsServiceListResultPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_SUBAPPS_SUB_APPS_SERVICE_MOJOM_H_