// third_party/blink/public/mojom/native_io/native_io.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  File as mojoBase_mojom_File,
  FileSpec as mojoBase_mojom_FileSpec
} from '../../../../../mojo/public/mojom/base/file.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const NativeIOErrorTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const NativeIOErrorType = {
  
  kSuccess: 0,
  kUnknown: 1,
  kInvalidState: 2,
  kNotFound: 3,
  kNoModificationAllowed: 4,
  kNoSpace: 5,
  MIN_VALUE: 0,
  MAX_VALUE: 5,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class NativeIOFileHostPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.NativeIOFileHost', scope);
  }
}

/** @interface */
export class NativeIOFileHostInterface {
  
  /**
   * @return {!Promise}
   */

  close() {}
}

/**
 * @implements { NativeIOFileHostInterface }
 */
export class NativeIOFileHostRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!NativeIOFileHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          NativeIOFileHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!NativeIOFileHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  close() {
    return this.proxy.sendMessage(
        0,
        NativeIOFileHost_Close_ParamsSpec.$,
        NativeIOFileHost_Close_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the NativeIOFileHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class NativeIOFileHostReceiver {
  /**
   * @param {!NativeIOFileHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!NativeIOFileHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        NativeIOFileHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!NativeIOFileHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        NativeIOFileHost_Close_ParamsSpec.$,
        NativeIOFileHost_Close_ResponseParamsSpec.$,
        impl.close.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class NativeIOFileHost {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.NativeIOFileHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!NativeIOFileHostRemote}
   */
  static getRemote() {
    let remote = new NativeIOFileHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the NativeIOFileHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class NativeIOFileHostCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      NativeIOFileHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!NativeIOFileHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.close =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        NativeIOFileHost_Close_ParamsSpec.$,
        NativeIOFileHost_Close_ResponseParamsSpec.$,
        this.close.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class NativeIOHostPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.NativeIOHost', scope);
  }
}

/** @interface */
export class NativeIOHostInterface {
  
  /**
   * @param { !bigint } capacityDelta
   * @return {!Promise<{
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  requestCapacityChange(capacityDelta) {}
  
  /**
   * @param { !string } name
   * @param { !NativeIOFileHostPendingReceiver } fileHostReceiver
   * @return {!Promise<{
        backingFile: ?mojoBase_mojom_File,
        backingFileSize: !bigint,
        openError: !NativeIOError,
   *  }>}
   */

  openFile(name, fileHostReceiver) {}
  
  /**
   * @param { !string } name
   * @return {!Promise<{
        deleteError: !NativeIOError,
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  deleteFile(name) {}
  
  /**
   * @return {!Promise<{
        success: !boolean,
        names: !Array<!string>,
   *  }>}
   */

  getAllFileNames() {}
  
  /**
   * @param { !string } oldName
   * @param { !string } newName
   * @return {!Promise<{
        renameError: !NativeIOError,
   *  }>}
   */

  renameFile(oldName, newName) {}
}

/**
 * @implements { NativeIOHostInterface }
 */
export class NativeIOHostRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!NativeIOHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          NativeIOHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!NativeIOHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !bigint } capacityDelta
   * @return {!Promise<{
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  requestCapacityChange(
      capacityDelta) {
    return this.proxy.sendMessage(
        0,
        NativeIOHost_RequestCapacityChange_ParamsSpec.$,
        NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
        [
          capacityDelta
        ]);
  }

  
  /**
   * @param { !string } name
   * @param { !NativeIOFileHostPendingReceiver } fileHostReceiver
   * @return {!Promise<{
        backingFile: ?mojoBase_mojom_File,
        backingFileSize: !bigint,
        openError: !NativeIOError,
   *  }>}
   */

  openFile(
      name,
      fileHostReceiver) {
    return this.proxy.sendMessage(
        1,
        NativeIOHost_OpenFile_ParamsSpec.$,
        NativeIOHost_OpenFile_ResponseParamsSpec.$,
        [
          name,
          fileHostReceiver
        ]);
  }

  
  /**
   * @param { !string } name
   * @return {!Promise<{
        deleteError: !NativeIOError,
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  deleteFile(
      name) {
    return this.proxy.sendMessage(
        2,
        NativeIOHost_DeleteFile_ParamsSpec.$,
        NativeIOHost_DeleteFile_ResponseParamsSpec.$,
        [
          name
        ]);
  }

  
  /**
   * @return {!Promise<{
        success: !boolean,
        names: !Array<!string>,
   *  }>}
   */

  getAllFileNames() {
    return this.proxy.sendMessage(
        3,
        NativeIOHost_GetAllFileNames_ParamsSpec.$,
        NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !string } oldName
   * @param { !string } newName
   * @return {!Promise<{
        renameError: !NativeIOError,
   *  }>}
   */

  renameFile(
      oldName,
      newName) {
    return this.proxy.sendMessage(
        4,
        NativeIOHost_RenameFile_ParamsSpec.$,
        NativeIOHost_RenameFile_ResponseParamsSpec.$,
        [
          oldName,
          newName
        ]);
  }
}

/**
 * An object which receives request messages for the NativeIOHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class NativeIOHostReceiver {
  /**
   * @param {!NativeIOHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!NativeIOHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        NativeIOHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!NativeIOHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        NativeIOHost_RequestCapacityChange_ParamsSpec.$,
        NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
        impl.requestCapacityChange.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        NativeIOHost_OpenFile_ParamsSpec.$,
        NativeIOHost_OpenFile_ResponseParamsSpec.$,
        impl.openFile.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        NativeIOHost_DeleteFile_ParamsSpec.$,
        NativeIOHost_DeleteFile_ResponseParamsSpec.$,
        impl.deleteFile.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        NativeIOHost_GetAllFileNames_ParamsSpec.$,
        NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
        impl.getAllFileNames.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        NativeIOHost_RenameFile_ParamsSpec.$,
        NativeIOHost_RenameFile_ResponseParamsSpec.$,
        impl.renameFile.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class NativeIOHost {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.NativeIOHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!NativeIOHostRemote}
   */
  static getRemote() {
    let remote = new NativeIOHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the NativeIOHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class NativeIOHostCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      NativeIOHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!NativeIOHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestCapacityChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        NativeIOHost_RequestCapacityChange_ParamsSpec.$,
        NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
        this.requestCapacityChange.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.openFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        NativeIOHost_OpenFile_ParamsSpec.$,
        NativeIOHost_OpenFile_ResponseParamsSpec.$,
        this.openFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.deleteFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        NativeIOHost_DeleteFile_ParamsSpec.$,
        NativeIOHost_DeleteFile_ResponseParamsSpec.$,
        this.deleteFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAllFileNames =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        NativeIOHost_GetAllFileNames_ParamsSpec.$,
        NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
        this.getAllFileNames.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.renameFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        NativeIOHost_RenameFile_ParamsSpec.$,
        NativeIOHost_RenameFile_ResponseParamsSpec.$,
        this.renameFile.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOErrorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOFileHost_Close_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOFileHost_Close_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_RequestCapacityChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_RequestCapacityChange_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_OpenFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_OpenFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_DeleteFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_DeleteFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_GetAllFileNames_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_GetAllFileNames_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_RenameFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const NativeIOHost_RenameFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    NativeIOErrorSpec.$,
    'NativeIOError',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        NativeIOErrorTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class NativeIOError {
  constructor() {
    /** @type { !NativeIOErrorType } */
    this.type;
    /** @type { !string } */
    this.message;
  }
}



mojo.internal.Struct(
    NativeIOFileHost_Close_ParamsSpec.$,
    'NativeIOFileHost_Close_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class NativeIOFileHost_Close_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    NativeIOFileHost_Close_ResponseParamsSpec.$,
    'NativeIOFileHost_Close_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class NativeIOFileHost_Close_ResponseParams {
  constructor() {
  }
}



mojo.internal.Struct(
    NativeIOHost_RequestCapacityChange_ParamsSpec.$,
    'NativeIOHost_RequestCapacityChange_Params',
    [
      mojo.internal.StructField(
        'capacityDelta', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class NativeIOHost_RequestCapacityChange_Params {
  constructor() {
    /** @type { !bigint } */
    this.capacityDelta;
  }
}



mojo.internal.Struct(
    NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
    'NativeIOHost_RequestCapacityChange_ResponseParams',
    [
      mojo.internal.StructField(
        'grantedCapacityDelta', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class NativeIOHost_RequestCapacityChange_ResponseParams {
  constructor() {
    /** @type { !bigint } */
    this.grantedCapacityDelta;
  }
}



mojo.internal.Struct(
    NativeIOHost_OpenFile_ParamsSpec.$,
    'NativeIOHost_OpenFile_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'fileHostReceiver', 8,
        0,
        mojo.internal.InterfaceRequest(NativeIOFileHostPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class NativeIOHost_OpenFile_Params {
  constructor() {
    /** @type { !string } */
    this.name;
    /** @type { !NativeIOFileHostPendingReceiver } */
    this.fileHostReceiver;
  }
}



mojo.internal.Struct(
    NativeIOHost_OpenFile_ResponseParamsSpec.$,
    'NativeIOHost_OpenFile_ResponseParams',
    [
      mojo.internal.StructField(
        'backingFile', 0,
        0,
        mojoBase_mojom_FileSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'backingFileSize', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'openError', 16,
        0,
        NativeIOErrorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class NativeIOHost_OpenFile_ResponseParams {
  constructor() {
    /** @type { (mojoBase_mojom_File|undefined) } */
    this.backingFile;
    /** @type { !bigint } */
    this.backingFileSize;
    /** @type { !NativeIOError } */
    this.openError;
  }
}



mojo.internal.Struct(
    NativeIOHost_DeleteFile_ParamsSpec.$,
    'NativeIOHost_DeleteFile_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class NativeIOHost_DeleteFile_Params {
  constructor() {
    /** @type { !string } */
    this.name;
  }
}



mojo.internal.Struct(
    NativeIOHost_DeleteFile_ResponseParamsSpec.$,
    'NativeIOHost_DeleteFile_ResponseParams',
    [
      mojo.internal.StructField(
        'deleteError', 0,
        0,
        NativeIOErrorSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'grantedCapacityDelta', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class NativeIOHost_DeleteFile_ResponseParams {
  constructor() {
    /** @type { !NativeIOError } */
    this.deleteError;
    /** @type { !bigint } */
    this.grantedCapacityDelta;
  }
}



mojo.internal.Struct(
    NativeIOHost_GetAllFileNames_ParamsSpec.$,
    'NativeIOHost_GetAllFileNames_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class NativeIOHost_GetAllFileNames_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
    'NativeIOHost_GetAllFileNames_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'names', 8,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class NativeIOHost_GetAllFileNames_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
    /** @type { !Array<!string> } */
    this.names;
  }
}



mojo.internal.Struct(
    NativeIOHost_RenameFile_ParamsSpec.$,
    'NativeIOHost_RenameFile_Params',
    [
      mojo.internal.StructField(
        'oldName', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'newName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class NativeIOHost_RenameFile_Params {
  constructor() {
    /** @type { !string } */
    this.oldName;
    /** @type { !string } */
    this.newName;
  }
}



mojo.internal.Struct(
    NativeIOHost_RenameFile_ResponseParamsSpec.$,
    'NativeIOHost_RenameFile_ResponseParams',
    [
      mojo.internal.StructField(
        'renameError', 0,
        0,
        NativeIOErrorSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class NativeIOHost_RenameFile_ResponseParams {
  constructor() {
    /** @type { !NativeIOError } */
    this.renameError;
  }
}

