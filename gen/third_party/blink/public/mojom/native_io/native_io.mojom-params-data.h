// third_party/blink/public/mojom/native_io/native_io.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOFileHost_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NativeIOFileHost_Close_Params_Data>;

  NativeIOFileHost_Close_Params_Data();
  ~NativeIOFileHost_Close_Params_Data() = delete;
};
static_assert(sizeof(NativeIOFileHost_Close_Params_Data) == 8,
              "Bad sizeof(NativeIOFileHost_Close_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOFileHost_Close_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NativeIOFileHost_Close_ResponseParams_Data>;

  NativeIOFileHost_Close_ResponseParams_Data();
  ~NativeIOFileHost_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(NativeIOFileHost_Close_ResponseParams_Data) == 8,
              "Bad sizeof(NativeIOFileHost_Close_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_RequestCapacityChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t capacity_delta;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_RequestCapacityChange_Params_Data>;

  NativeIOHost_RequestCapacityChange_Params_Data();
  ~NativeIOHost_RequestCapacityChange_Params_Data() = delete;
};
static_assert(sizeof(NativeIOHost_RequestCapacityChange_Params_Data) == 16,
              "Bad sizeof(NativeIOHost_RequestCapacityChange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_RequestCapacityChange_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t granted_capacity_delta;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_RequestCapacityChange_ResponseParams_Data>;

  NativeIOHost_RequestCapacityChange_ResponseParams_Data();
  ~NativeIOHost_RequestCapacityChange_ResponseParams_Data() = delete;
};
static_assert(sizeof(NativeIOHost_RequestCapacityChange_ResponseParams_Data) == 16,
              "Bad sizeof(NativeIOHost_RequestCapacityChange_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_OpenFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Handle_Data file_host_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_OpenFile_Params_Data>;

  NativeIOHost_OpenFile_Params_Data();
  ~NativeIOHost_OpenFile_Params_Data() = delete;
};
static_assert(sizeof(NativeIOHost_OpenFile_Params_Data) == 24,
              "Bad sizeof(NativeIOHost_OpenFile_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_OpenFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> backing_file;
  uint64_t backing_file_size;
  mojo::internal::Pointer<internal::NativeIOError_Data> open_error;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_OpenFile_ResponseParams_Data>;

  NativeIOHost_OpenFile_ResponseParams_Data();
  ~NativeIOHost_OpenFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(NativeIOHost_OpenFile_ResponseParams_Data) == 32,
              "Bad sizeof(NativeIOHost_OpenFile_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_DeleteFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_DeleteFile_Params_Data>;

  NativeIOHost_DeleteFile_Params_Data();
  ~NativeIOHost_DeleteFile_Params_Data() = delete;
};
static_assert(sizeof(NativeIOHost_DeleteFile_Params_Data) == 16,
              "Bad sizeof(NativeIOHost_DeleteFile_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_DeleteFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NativeIOError_Data> delete_error;
  uint64_t granted_capacity_delta;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_DeleteFile_ResponseParams_Data>;

  NativeIOHost_DeleteFile_ResponseParams_Data();
  ~NativeIOHost_DeleteFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(NativeIOHost_DeleteFile_ResponseParams_Data) == 24,
              "Bad sizeof(NativeIOHost_DeleteFile_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_GetAllFileNames_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_GetAllFileNames_Params_Data>;

  NativeIOHost_GetAllFileNames_Params_Data();
  ~NativeIOHost_GetAllFileNames_Params_Data() = delete;
};
static_assert(sizeof(NativeIOHost_GetAllFileNames_Params_Data) == 8,
              "Bad sizeof(NativeIOHost_GetAllFileNames_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_GetAllFileNames_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> names;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_GetAllFileNames_ResponseParams_Data>;

  NativeIOHost_GetAllFileNames_ResponseParams_Data();
  ~NativeIOHost_GetAllFileNames_ResponseParams_Data() = delete;
};
static_assert(sizeof(NativeIOHost_GetAllFileNames_ResponseParams_Data) == 24,
              "Bad sizeof(NativeIOHost_GetAllFileNames_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_RenameFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> old_name;
  mojo::internal::Pointer<mojo::internal::String_Data> new_name;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_RenameFile_Params_Data>;

  NativeIOHost_RenameFile_Params_Data();
  ~NativeIOHost_RenameFile_Params_Data() = delete;
};
static_assert(sizeof(NativeIOHost_RenameFile_Params_Data) == 24,
              "Bad sizeof(NativeIOHost_RenameFile_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) NativeIOHost_RenameFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::NativeIOError_Data> rename_error;

 private:
  friend class mojo::internal::MessageFragment<NativeIOHost_RenameFile_ResponseParams_Data>;

  NativeIOHost_RenameFile_ResponseParams_Data();
  ~NativeIOHost_RenameFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(NativeIOHost_RenameFile_ResponseParams_Data) == 16,
              "Bad sizeof(NativeIOHost_RenameFile_ResponseParams_Data)");

}  // namespace internal


class NativeIOFileHost_Close_ParamsDataView {
 public:
  NativeIOFileHost_Close_ParamsDataView() = default;

  NativeIOFileHost_Close_ParamsDataView(
      internal::NativeIOFileHost_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NativeIOFileHost_Close_Params_Data* data_ = nullptr;
};



class NativeIOFileHost_Close_ResponseParamsDataView {
 public:
  NativeIOFileHost_Close_ResponseParamsDataView() = default;

  NativeIOFileHost_Close_ResponseParamsDataView(
      internal::NativeIOFileHost_Close_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NativeIOFileHost_Close_ResponseParams_Data* data_ = nullptr;
};



class NativeIOHost_RequestCapacityChange_ParamsDataView {
 public:
  NativeIOHost_RequestCapacityChange_ParamsDataView() = default;

  NativeIOHost_RequestCapacityChange_ParamsDataView(
      internal::NativeIOHost_RequestCapacityChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t capacity_delta() const {
    return data_->capacity_delta;
  }
 private:
  internal::NativeIOHost_RequestCapacityChange_Params_Data* data_ = nullptr;
};



class NativeIOHost_RequestCapacityChange_ResponseParamsDataView {
 public:
  NativeIOHost_RequestCapacityChange_ResponseParamsDataView() = default;

  NativeIOHost_RequestCapacityChange_ResponseParamsDataView(
      internal::NativeIOHost_RequestCapacityChange_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t granted_capacity_delta() const {
    return data_->granted_capacity_delta;
  }
 private:
  internal::NativeIOHost_RequestCapacityChange_ResponseParams_Data* data_ = nullptr;
};



class NativeIOHost_OpenFile_ParamsDataView {
 public:
  NativeIOHost_OpenFile_ParamsDataView() = default;

  NativeIOHost_OpenFile_ParamsDataView(
      internal::NativeIOHost_OpenFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeFileHostReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::NativeIOFileHostInterfaceBase>>(
            &data_->file_host_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::NativeIOHost_OpenFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NativeIOHost_OpenFile_ResponseParamsDataView {
 public:
  NativeIOHost_OpenFile_ResponseParamsDataView() = default;

  NativeIOHost_OpenFile_ResponseParamsDataView(
      internal::NativeIOHost_OpenFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBackingFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBackingFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::FileDataView, UserType>(),
    "Attempting to read the optional `backing_file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBackingFile` instead "
    "of `ReadBackingFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->backing_file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
  uint64_t backing_file_size() const {
    return data_->backing_file_size;
  }
  inline void GetOpenErrorDataView(
      NativeIOErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenError(UserType* output) {
    
    auto* pointer = data_->open_error.Get();
    return mojo::internal::Deserialize<::blink::mojom::NativeIOErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::NativeIOHost_OpenFile_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NativeIOHost_DeleteFile_ParamsDataView {
 public:
  NativeIOHost_DeleteFile_ParamsDataView() = default;

  NativeIOHost_DeleteFile_ParamsDataView(
      internal::NativeIOHost_DeleteFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NativeIOHost_DeleteFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NativeIOHost_DeleteFile_ResponseParamsDataView {
 public:
  NativeIOHost_DeleteFile_ResponseParamsDataView() = default;

  NativeIOHost_DeleteFile_ResponseParamsDataView(
      internal::NativeIOHost_DeleteFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeleteErrorDataView(
      NativeIOErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeleteError(UserType* output) {
    
    auto* pointer = data_->delete_error.Get();
    return mojo::internal::Deserialize<::blink::mojom::NativeIOErrorDataView>(
        pointer, output, message_);
  }
  uint64_t granted_capacity_delta() const {
    return data_->granted_capacity_delta;
  }
 private:
  internal::NativeIOHost_DeleteFile_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NativeIOHost_GetAllFileNames_ParamsDataView {
 public:
  NativeIOHost_GetAllFileNames_ParamsDataView() = default;

  NativeIOHost_GetAllFileNames_ParamsDataView(
      internal::NativeIOHost_GetAllFileNames_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NativeIOHost_GetAllFileNames_Params_Data* data_ = nullptr;
};



class NativeIOHost_GetAllFileNames_ResponseParamsDataView {
 public:
  NativeIOHost_GetAllFileNames_ResponseParamsDataView() = default;

  NativeIOHost_GetAllFileNames_ResponseParamsDataView(
      internal::NativeIOHost_GetAllFileNames_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetNamesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNames(UserType* output) {
    
    auto* pointer = data_->names.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::NativeIOHost_GetAllFileNames_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NativeIOHost_RenameFile_ParamsDataView {
 public:
  NativeIOHost_RenameFile_ParamsDataView() = default;

  NativeIOHost_RenameFile_ParamsDataView(
      internal::NativeIOHost_RenameFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOldNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOldName(UserType* output) {
    
    auto* pointer = data_->old_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetNewNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewName(UserType* output) {
    
    auto* pointer = data_->new_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::NativeIOHost_RenameFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NativeIOHost_RenameFile_ResponseParamsDataView {
 public:
  NativeIOHost_RenameFile_ResponseParamsDataView() = default;

  NativeIOHost_RenameFile_ResponseParamsDataView(
      internal::NativeIOHost_RenameFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRenameErrorDataView(
      NativeIOErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRenameError(UserType* output) {
    
    auto* pointer = data_->rename_error.Get();
    return mojo::internal::Deserialize<::blink::mojom::NativeIOErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::NativeIOHost_RenameFile_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};










inline void NativeIOHost_OpenFile_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NativeIOHost_OpenFile_ResponseParamsDataView::GetBackingFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->backing_file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}
inline void NativeIOHost_OpenFile_ResponseParamsDataView::GetOpenErrorDataView(
    NativeIOErrorDataView* output) {
  auto pointer = data_->open_error.Get();
  *output = NativeIOErrorDataView(pointer, message_);
}


inline void NativeIOHost_DeleteFile_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NativeIOHost_DeleteFile_ResponseParamsDataView::GetDeleteErrorDataView(
    NativeIOErrorDataView* output) {
  auto pointer = data_->delete_error.Get();
  *output = NativeIOErrorDataView(pointer, message_);
}




inline void NativeIOHost_GetAllFileNames_ResponseParamsDataView::GetNamesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->names.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}


inline void NativeIOHost_RenameFile_ParamsDataView::GetOldNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->old_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void NativeIOHost_RenameFile_ParamsDataView::GetNewNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->new_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void NativeIOHost_RenameFile_ResponseParamsDataView::GetRenameErrorDataView(
    NativeIOErrorDataView* output) {
  auto pointer = data_->rename_error.Get();
  *output = NativeIOErrorDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_PARAMS_DATA_H_