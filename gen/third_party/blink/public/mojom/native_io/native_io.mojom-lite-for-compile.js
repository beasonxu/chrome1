// third_party/blink/public/mojom/native_io/native_io.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('mojoBase.mojom.File');




goog.provide('blink.mojom.NativeIOErrorType');
goog.provide('blink.mojom.NativeIOErrorTypeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.mojom.NativeIOErrorTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.mojom.NativeIOErrorType = {
  
  kSuccess: 0,
  kUnknown: 1,
  kInvalidState: 2,
  kNotFound: 3,
  kNoModificationAllowed: 4,
  kNoSpace: 5,
  MIN_VALUE: 0,
  MAX_VALUE: 5,
};



goog.provide('blink.mojom.NativeIOFileHost');
goog.provide('blink.mojom.NativeIOFileHostReceiver');
goog.provide('blink.mojom.NativeIOFileHostCallbackRouter');
goog.provide('blink.mojom.NativeIOFileHostInterface');
goog.provide('blink.mojom.NativeIOFileHostRemote');
goog.provide('blink.mojom.NativeIOFileHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.NativeIOFileHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.NativeIOFileHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.NativeIOFileHostInterface = class {
  
  /**
   * @return {!Promise}
   */

  close() {}
};

/**
 * @export
 * @implements { blink.mojom.NativeIOFileHostInterface }
 */
blink.mojom.NativeIOFileHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.NativeIOFileHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.NativeIOFileHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.NativeIOFileHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise}
   */

  close() {
    return this.proxy.sendMessage(
        0,
        blink.mojom.NativeIOFileHost_Close_ParamsSpec.$,
        blink.mojom.NativeIOFileHost_Close_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the NativeIOFileHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.NativeIOFileHostReceiver = class {
  /**
   * @param {!blink.mojom.NativeIOFileHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.NativeIOFileHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.NativeIOFileHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.NativeIOFileHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.NativeIOFileHost_Close_ParamsSpec.$,
        blink.mojom.NativeIOFileHost_Close_ResponseParamsSpec.$,
        impl.close.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.NativeIOFileHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.NativeIOFileHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.NativeIOFileHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.NativeIOFileHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the NativeIOFileHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.NativeIOFileHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.NativeIOFileHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.NativeIOFileHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.close =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.NativeIOFileHost_Close_ParamsSpec.$,
        blink.mojom.NativeIOFileHost_Close_ResponseParamsSpec.$,
        this.close.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.NativeIOHost');
goog.provide('blink.mojom.NativeIOHostReceiver');
goog.provide('blink.mojom.NativeIOHostCallbackRouter');
goog.provide('blink.mojom.NativeIOHostInterface');
goog.provide('blink.mojom.NativeIOHostRemote');
goog.provide('blink.mojom.NativeIOHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.NativeIOHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.NativeIOHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.NativeIOHostInterface = class {
  
  /**
   * @param { !bigint } capacityDelta
   * @return {!Promise<{
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  requestCapacityChange(capacityDelta) {}
  
  /**
   * @param { !string } name
   * @param { !blink.mojom.NativeIOFileHostPendingReceiver } fileHostReceiver
   * @return {!Promise<{
        backingFile: ?mojoBase.mojom.File,
        backingFileSize: !bigint,
        openError: !blink.mojom.NativeIOError,
   *  }>}
   */

  openFile(name, fileHostReceiver) {}
  
  /**
   * @param { !string } name
   * @return {!Promise<{
        deleteError: !blink.mojom.NativeIOError,
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  deleteFile(name) {}
  
  /**
   * @return {!Promise<{
        success: !boolean,
        names: !Array<!string>,
   *  }>}
   */

  getAllFileNames() {}
  
  /**
   * @param { !string } oldName
   * @param { !string } newName
   * @return {!Promise<{
        renameError: !blink.mojom.NativeIOError,
   *  }>}
   */

  renameFile(oldName, newName) {}
};

/**
 * @export
 * @implements { blink.mojom.NativeIOHostInterface }
 */
blink.mojom.NativeIOHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.NativeIOHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.NativeIOHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.NativeIOHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !bigint } capacityDelta
   * @return {!Promise<{
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  requestCapacityChange(
      capacityDelta) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.NativeIOHost_RequestCapacityChange_ParamsSpec.$,
        blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
        [
          capacityDelta
        ]);
  }

  
  /**
   * @param { !string } name
   * @param { !blink.mojom.NativeIOFileHostPendingReceiver } fileHostReceiver
   * @return {!Promise<{
        backingFile: ?mojoBase.mojom.File,
        backingFileSize: !bigint,
        openError: !blink.mojom.NativeIOError,
   *  }>}
   */

  openFile(
      name,
      fileHostReceiver) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.NativeIOHost_OpenFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_OpenFile_ResponseParamsSpec.$,
        [
          name,
          fileHostReceiver
        ]);
  }

  
  /**
   * @param { !string } name
   * @return {!Promise<{
        deleteError: !blink.mojom.NativeIOError,
        grantedCapacityDelta: !bigint,
   *  }>}
   */

  deleteFile(
      name) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.NativeIOHost_DeleteFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_DeleteFile_ResponseParamsSpec.$,
        [
          name
        ]);
  }

  
  /**
   * @return {!Promise<{
        success: !boolean,
        names: !Array<!string>,
   *  }>}
   */

  getAllFileNames() {
    return this.proxy.sendMessage(
        3,
        blink.mojom.NativeIOHost_GetAllFileNames_ParamsSpec.$,
        blink.mojom.NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !string } oldName
   * @param { !string } newName
   * @return {!Promise<{
        renameError: !blink.mojom.NativeIOError,
   *  }>}
   */

  renameFile(
      oldName,
      newName) {
    return this.proxy.sendMessage(
        4,
        blink.mojom.NativeIOHost_RenameFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_RenameFile_ResponseParamsSpec.$,
        [
          oldName,
          newName
        ]);
  }
};

/**
 * An object which receives request messages for the NativeIOHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.NativeIOHostReceiver = class {
  /**
   * @param {!blink.mojom.NativeIOHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.NativeIOHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.NativeIOHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.NativeIOHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.NativeIOHost_RequestCapacityChange_ParamsSpec.$,
        blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
        impl.requestCapacityChange.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.NativeIOHost_OpenFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_OpenFile_ResponseParamsSpec.$,
        impl.openFile.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.NativeIOHost_DeleteFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_DeleteFile_ResponseParamsSpec.$,
        impl.deleteFile.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.NativeIOHost_GetAllFileNames_ParamsSpec.$,
        blink.mojom.NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
        impl.getAllFileNames.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.mojom.NativeIOHost_RenameFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_RenameFile_ResponseParamsSpec.$,
        impl.renameFile.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.NativeIOHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.NativeIOHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.NativeIOHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.NativeIOHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the NativeIOHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.NativeIOHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.NativeIOHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.NativeIOHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestCapacityChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.NativeIOHost_RequestCapacityChange_ParamsSpec.$,
        blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
        this.requestCapacityChange.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.openFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.NativeIOHost_OpenFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_OpenFile_ResponseParamsSpec.$,
        this.openFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.deleteFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.NativeIOHost_DeleteFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_DeleteFile_ResponseParamsSpec.$,
        this.deleteFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAllFileNames =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.NativeIOHost_GetAllFileNames_ParamsSpec.$,
        blink.mojom.NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
        this.getAllFileNames.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.renameFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.mojom.NativeIOHost_RenameFile_ParamsSpec.$,
        blink.mojom.NativeIOHost_RenameFile_ResponseParamsSpec.$,
        this.renameFile.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.NativeIOErrorSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOErrorSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOFileHost_Close_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOFileHost_Close_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOFileHost_Close_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOFileHost_Close_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_RequestCapacityChange_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_RequestCapacityChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_OpenFile_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_OpenFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_OpenFile_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_OpenFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_DeleteFile_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_DeleteFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_DeleteFile_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_DeleteFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_GetAllFileNames_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_GetAllFileNames_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_GetAllFileNames_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_GetAllFileNames_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_RenameFile_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_RenameFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.NativeIOHost_RenameFile_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.NativeIOHost_RenameFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.NativeIOErrorSpec.$,
    'NativeIOError',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        blink.mojom.NativeIOErrorTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.NativeIOError');

/** @record */
blink.mojom.NativeIOError = class {
  constructor() {
    /** @export { !blink.mojom.NativeIOErrorType } */
    this.type;
    /** @export { !string } */
    this.message;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOFileHost_Close_ParamsSpec.$,
    'NativeIOFileHost_Close_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.NativeIOFileHost_Close_Params');

/** @record */
blink.mojom.NativeIOFileHost_Close_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOFileHost_Close_ResponseParamsSpec.$,
    'NativeIOFileHost_Close_ResponseParams',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.NativeIOFileHost_Close_ResponseParams');

/** @record */
blink.mojom.NativeIOFileHost_Close_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_RequestCapacityChange_ParamsSpec.$,
    'NativeIOHost_RequestCapacityChange_Params',
    [
      mojo.internal.StructField(
        'capacityDelta', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.NativeIOHost_RequestCapacityChange_Params');

/** @record */
blink.mojom.NativeIOHost_RequestCapacityChange_Params = class {
  constructor() {
    /** @export { !bigint } */
    this.capacityDelta;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParamsSpec.$,
    'NativeIOHost_RequestCapacityChange_ResponseParams',
    [
      mojo.internal.StructField(
        'grantedCapacityDelta', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParams');

/** @record */
blink.mojom.NativeIOHost_RequestCapacityChange_ResponseParams = class {
  constructor() {
    /** @export { !bigint } */
    this.grantedCapacityDelta;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_OpenFile_ParamsSpec.$,
    'NativeIOHost_OpenFile_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fileHostReceiver', 8,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.NativeIOFileHostPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.NativeIOHost_OpenFile_Params');

/** @record */
blink.mojom.NativeIOHost_OpenFile_Params = class {
  constructor() {
    /** @export { !string } */
    this.name;
    /** @export { !blink.mojom.NativeIOFileHostPendingReceiver } */
    this.fileHostReceiver;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_OpenFile_ResponseParamsSpec.$,
    'NativeIOHost_OpenFile_ResponseParams',
    [
      mojo.internal.StructField(
        'backingFile', 0,
        0,
        mojoBase.mojom.FileSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'backingFileSize', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */),
      mojo.internal.StructField(
        'openError', 16,
        0,
        blink.mojom.NativeIOErrorSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('blink.mojom.NativeIOHost_OpenFile_ResponseParams');

/** @record */
blink.mojom.NativeIOHost_OpenFile_ResponseParams = class {
  constructor() {
    /** @export { (mojoBase.mojom.File|undefined) } */
    this.backingFile;
    /** @export { !bigint } */
    this.backingFileSize;
    /** @export { !blink.mojom.NativeIOError } */
    this.openError;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_DeleteFile_ParamsSpec.$,
    'NativeIOHost_DeleteFile_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.NativeIOHost_DeleteFile_Params');

/** @record */
blink.mojom.NativeIOHost_DeleteFile_Params = class {
  constructor() {
    /** @export { !string } */
    this.name;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_DeleteFile_ResponseParamsSpec.$,
    'NativeIOHost_DeleteFile_ResponseParams',
    [
      mojo.internal.StructField(
        'deleteError', 0,
        0,
        blink.mojom.NativeIOErrorSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'grantedCapacityDelta', 8,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.NativeIOHost_DeleteFile_ResponseParams');

/** @record */
blink.mojom.NativeIOHost_DeleteFile_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.NativeIOError } */
    this.deleteError;
    /** @export { !bigint } */
    this.grantedCapacityDelta;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_GetAllFileNames_ParamsSpec.$,
    'NativeIOHost_GetAllFileNames_Params',
    [
    ],
    [[0, 8],]);



goog.provide('blink.mojom.NativeIOHost_GetAllFileNames_Params');

/** @record */
blink.mojom.NativeIOHost_GetAllFileNames_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_GetAllFileNames_ResponseParamsSpec.$,
    'NativeIOHost_GetAllFileNames_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'names', 8,
        0,
        mojo.internal.Array(mojo.internal.String, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.NativeIOHost_GetAllFileNames_ResponseParams');

/** @record */
blink.mojom.NativeIOHost_GetAllFileNames_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.success;
    /** @export { !Array<!string> } */
    this.names;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_RenameFile_ParamsSpec.$,
    'NativeIOHost_RenameFile_Params',
    [
      mojo.internal.StructField(
        'oldName', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'newName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.NativeIOHost_RenameFile_Params');

/** @record */
blink.mojom.NativeIOHost_RenameFile_Params = class {
  constructor() {
    /** @export { !string } */
    this.oldName;
    /** @export { !string } */
    this.newName;
  }
};




mojo.internal.Struct(
    blink.mojom.NativeIOHost_RenameFile_ResponseParamsSpec.$,
    'NativeIOHost_RenameFile_ResponseParams',
    [
      mojo.internal.StructField(
        'renameError', 0,
        0,
        blink.mojom.NativeIOErrorSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.NativeIOHost_RenameFile_ResponseParams');

/** @record */
blink.mojom.NativeIOHost_RenameFile_ResponseParams = class {
  constructor() {
    /** @export { !blink.mojom.NativeIOError } */
    this.renameError;
  }
};


