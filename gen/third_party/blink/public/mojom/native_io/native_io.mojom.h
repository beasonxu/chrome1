// third_party/blink/public/mojom/native_io/native_io.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/native_io/native_io.mojom-shared.h"
#include "third_party/blink/public/mojom/native_io/native_io.mojom-forward.h"
#include "mojo/public/mojom/base/file.mojom.h"
#include "mojo/public/mojom/base/file_error.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class NativeIOFileHostProxy;

template <typename ImplRefTraits>
class NativeIOFileHostStub;

class NativeIOFileHostRequestValidator;
class NativeIOFileHostResponseValidator;


class BLINK_COMMON_EXPORT NativeIOFileHost
    : public NativeIOFileHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = NativeIOFileHostInterfaceBase;
  using Proxy_ = NativeIOFileHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = NativeIOFileHostStub<ImplRefTraits>;

  using RequestValidator_ = NativeIOFileHostRequestValidator;
  using ResponseValidator_ = NativeIOFileHostResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCloseMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Close_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~NativeIOFileHost() = default;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool Close();

  using CloseCallback = base::OnceCallback<void()>;
  
  virtual void Close(CloseCallback callback) = 0;
};

class NativeIOHostProxy;

template <typename ImplRefTraits>
class NativeIOHostStub;

class NativeIOHostRequestValidator;
class NativeIOHostResponseValidator;


class BLINK_COMMON_EXPORT NativeIOHost
    : public NativeIOHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = true;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = NativeIOHostInterfaceBase;
  using Proxy_ = NativeIOHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = NativeIOHostStub<ImplRefTraits>;

  using RequestValidator_ = NativeIOHostRequestValidator;
  using ResponseValidator_ = NativeIOHostResponseValidator;
  enum MethodMinVersions : uint32_t {
    kRequestCapacityChangeMinVersion = 0,
    kOpenFileMinVersion = 0,
    kDeleteFileMinVersion = 0,
    kGetAllFileNamesMinVersion = 0,
    kRenameFileMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct RequestCapacityChange_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OpenFile_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct DeleteFile_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetAllFileNames_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RenameFile_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~NativeIOHost() = default;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool RequestCapacityChange(int64_t capacity_delta, int64_t* out_granted_capacity_delta);

  using RequestCapacityChangeCallback = base::OnceCallback<void(int64_t)>;
  
  virtual void RequestCapacityChange(int64_t capacity_delta, RequestCapacityChangeCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool OpenFile(const std::string& name, ::mojo::PendingReceiver<NativeIOFileHost> file_host_receiver, ::base::File* out_backing_file, uint64_t* out_backing_file_size, NativeIOErrorPtr* out_open_error);

  using OpenFileCallback = base::OnceCallback<void(::base::File, uint64_t, NativeIOErrorPtr)>;
  
  virtual void OpenFile(const std::string& name, ::mojo::PendingReceiver<NativeIOFileHost> file_host_receiver, OpenFileCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool DeleteFile(const std::string& name, NativeIOErrorPtr* out_delete_error, uint64_t* out_granted_capacity_delta);

  using DeleteFileCallback = base::OnceCallback<void(NativeIOErrorPtr, uint64_t)>;
  
  virtual void DeleteFile(const std::string& name, DeleteFileCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool GetAllFileNames(bool* out_success, std::vector<std::string>* out_names);

  using GetAllFileNamesCallback = base::OnceCallback<void(bool, const std::vector<std::string>&)>;
  
  virtual void GetAllFileNames(GetAllFileNamesCallback callback) = 0;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool RenameFile(const std::string& old_name, const std::string& new_name, NativeIOErrorPtr* out_rename_error);

  using RenameFileCallback = base::OnceCallback<void(NativeIOErrorPtr)>;
  
  virtual void RenameFile(const std::string& old_name, const std::string& new_name, RenameFileCallback callback) = 0;
};



class BLINK_COMMON_EXPORT NativeIOFileHostProxy
    : public NativeIOFileHost {
 public:
  using InterfaceType = NativeIOFileHost;

  explicit NativeIOFileHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  bool Close() final;
  
  void Close(CloseCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_COMMON_EXPORT NativeIOHostProxy
    : public NativeIOHost {
 public:
  using InterfaceType = NativeIOHost;

  explicit NativeIOHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  bool RequestCapacityChange(int64_t capacity_delta, int64_t* out_granted_capacity_delta) final;
  
  void RequestCapacityChange(int64_t capacity_delta, RequestCapacityChangeCallback callback) final;
  
  bool OpenFile(const std::string& name, ::mojo::PendingReceiver<NativeIOFileHost> file_host_receiver, ::base::File* out_backing_file, uint64_t* out_backing_file_size, NativeIOErrorPtr* out_open_error) final;
  
  void OpenFile(const std::string& name, ::mojo::PendingReceiver<NativeIOFileHost> file_host_receiver, OpenFileCallback callback) final;
  
  bool DeleteFile(const std::string& name, NativeIOErrorPtr* out_delete_error, uint64_t* out_granted_capacity_delta) final;
  
  void DeleteFile(const std::string& name, DeleteFileCallback callback) final;
  
  bool GetAllFileNames(bool* out_success, std::vector<std::string>* out_names) final;
  
  void GetAllFileNames(GetAllFileNamesCallback callback) final;
  
  bool RenameFile(const std::string& old_name, const std::string& new_name, NativeIOErrorPtr* out_rename_error) final;
  
  void RenameFile(const std::string& old_name, const std::string& new_name, RenameFileCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT NativeIOFileHostStubDispatch {
 public:
  static bool Accept(NativeIOFileHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      NativeIOFileHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<NativeIOFileHost>>
class NativeIOFileHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  NativeIOFileHostStub() = default;
  ~NativeIOFileHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return NativeIOFileHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return NativeIOFileHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT NativeIOHostStubDispatch {
 public:
  static bool Accept(NativeIOHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      NativeIOHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<NativeIOHost>>
class NativeIOHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  NativeIOHostStub() = default;
  ~NativeIOHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return NativeIOHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return NativeIOHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT NativeIOFileHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT NativeIOHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT NativeIOFileHostResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_COMMON_EXPORT NativeIOHostResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class BLINK_COMMON_EXPORT NativeIOError {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<NativeIOError, T>::value>;
  using DataView = NativeIOErrorDataView;
  using Data_ = internal::NativeIOError_Data;

  template <typename... Args>
  static NativeIOErrorPtr New(Args&&... args) {
    return NativeIOErrorPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static NativeIOErrorPtr From(const U& u) {
    return mojo::TypeConverter<NativeIOErrorPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, NativeIOError>::Convert(*this);
  }


  NativeIOError();

  NativeIOError(
      NativeIOErrorType type,
      const std::string& message);


  ~NativeIOError();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = NativeIOErrorPtr>
  NativeIOErrorPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, NativeIOError::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, NativeIOError::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        NativeIOError::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        NativeIOError::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::NativeIOError_UnserializedMessageContext<
            UserType, NativeIOError::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<NativeIOError::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return NativeIOError::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::NativeIOError_UnserializedMessageContext<
            UserType, NativeIOError::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<NativeIOError::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  NativeIOErrorType type;
  
  std::string message;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, NativeIOError::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, NativeIOError::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, NativeIOError::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, NativeIOError::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}




template <typename StructPtrType>
NativeIOErrorPtr NativeIOError::Clone() const {
  return New(
      mojo::Clone(type),
      mojo::Clone(message)
  );
}

template <typename T, NativeIOError::EnableIfSame<T>*>
bool NativeIOError::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->message, other_struct.message))
    return false;
  return true;
}

template <typename T, NativeIOError::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.message < rhs.message)
    return true;
  if (rhs.message < lhs.message)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::NativeIOError::DataView,
                                         ::blink::mojom::NativeIOErrorPtr> {
  static bool IsNull(const ::blink::mojom::NativeIOErrorPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::NativeIOErrorPtr* output) { output->reset(); }

  static decltype(::blink::mojom::NativeIOError::type) type(
      const ::blink::mojom::NativeIOErrorPtr& input) {
    return input->type;
  }

  static const decltype(::blink::mojom::NativeIOError::message)& message(
      const ::blink::mojom::NativeIOErrorPtr& input) {
    return input->message;
  }

  static bool Read(::blink::mojom::NativeIOError::DataView input, ::blink::mojom::NativeIOErrorPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_NATIVE_IO_NATIVE_IO_MOJOM_H_