// third_party/blink/public/mojom/indexeddb/indexeddb.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_INDEXEDDB_INDEXEDDB_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_INDEXEDDB_INDEXEDDB_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_Error_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t code;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> message;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_Error_Params_Data>;

  IDBCallbacks_Error_Params_Data();
  ~IDBCallbacks_Error_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_Error_Params_Data) == 24,
              "Bad sizeof(IDBCallbacks_Error_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_SuccessNamesAndVersionsList_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IDBNameAndVersion_Data>>> value;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_SuccessNamesAndVersionsList_Params_Data>;

  IDBCallbacks_SuccessNamesAndVersionsList_Params_Data();
  ~IDBCallbacks_SuccessNamesAndVersionsList_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_SuccessNamesAndVersionsList_Params_Data) == 16,
              "Bad sizeof(IDBCallbacks_SuccessNamesAndVersionsList_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_Blocked_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t existing_version;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_Blocked_Params_Data>;

  IDBCallbacks_Blocked_Params_Data();
  ~IDBCallbacks_Blocked_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_Blocked_Params_Data) == 16,
              "Bad sizeof(IDBCallbacks_Blocked_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_UpgradeNeeded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data pending_database;
  int64_t old_version;
  int32_t data_loss;
  uint8_t pad2_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> data_loss_message;
  mojo::internal::Pointer<internal::IDBDatabaseMetadata_Data> db_metadata;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_UpgradeNeeded_Params_Data>;

  IDBCallbacks_UpgradeNeeded_Params_Data();
  ~IDBCallbacks_UpgradeNeeded_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_UpgradeNeeded_Params_Data) == 48,
              "Bad sizeof(IDBCallbacks_UpgradeNeeded_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_SuccessDatabase_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data pending_database;
  mojo::internal::Pointer<internal::IDBDatabaseMetadata_Data> metadata;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_SuccessDatabase_Params_Data>;

  IDBCallbacks_SuccessDatabase_Params_Data();
  ~IDBCallbacks_SuccessDatabase_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_SuccessDatabase_Params_Data) == 24,
              "Bad sizeof(IDBCallbacks_SuccessDatabase_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_SuccessInteger_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t value;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_SuccessInteger_Params_Data>;

  IDBCallbacks_SuccessInteger_Params_Data();
  ~IDBCallbacks_SuccessInteger_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_SuccessInteger_Params_Data) == 16,
              "Bad sizeof(IDBCallbacks_SuccessInteger_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCallbacks_Success_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IDBCallbacks_Success_Params_Data>;

  IDBCallbacks_Success_Params_Data();
  ~IDBCallbacks_Success_Params_Data() = delete;
};
static_assert(sizeof(IDBCallbacks_Success_Params_Data) == 8,
              "Bad sizeof(IDBCallbacks_Success_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseCallbacks_ForcedClose_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseCallbacks_ForcedClose_Params_Data>;

  IDBDatabaseCallbacks_ForcedClose_Params_Data();
  ~IDBDatabaseCallbacks_ForcedClose_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseCallbacks_ForcedClose_Params_Data) == 8,
              "Bad sizeof(IDBDatabaseCallbacks_ForcedClose_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseCallbacks_VersionChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t old_version;
  int64_t new_version;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseCallbacks_VersionChange_Params_Data>;

  IDBDatabaseCallbacks_VersionChange_Params_Data();
  ~IDBDatabaseCallbacks_VersionChange_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseCallbacks_VersionChange_Params_Data) == 24,
              "Bad sizeof(IDBDatabaseCallbacks_VersionChange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseCallbacks_Abort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int32_t code;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> message;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseCallbacks_Abort_Params_Data>;

  IDBDatabaseCallbacks_Abort_Params_Data();
  ~IDBDatabaseCallbacks_Abort_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseCallbacks_Abort_Params_Data) == 32,
              "Bad sizeof(IDBDatabaseCallbacks_Abort_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseCallbacks_Complete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseCallbacks_Complete_Params_Data>;

  IDBDatabaseCallbacks_Complete_Params_Data();
  ~IDBDatabaseCallbacks_Complete_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseCallbacks_Complete_Params_Data) == 16,
              "Bad sizeof(IDBDatabaseCallbacks_Complete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_Advance_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_Advance_Params_Data>;

  IDBCursor_Advance_Params_Data();
  ~IDBCursor_Advance_Params_Data() = delete;
};
static_assert(sizeof(IDBCursor_Advance_Params_Data) == 16,
              "Bad sizeof(IDBCursor_Advance_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_Advance_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBCursorResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_Advance_ResponseParams_Data>;

  IDBCursor_Advance_ResponseParams_Data();
  ~IDBCursor_Advance_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBCursor_Advance_ResponseParams_Data) == 24,
              "Bad sizeof(IDBCursor_Advance_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_CursorContinue_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBKey_Data key;
  internal::IDBKey_Data primary_key;

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_CursorContinue_Params_Data>;

  IDBCursor_CursorContinue_Params_Data();
  ~IDBCursor_CursorContinue_Params_Data() = delete;
};
static_assert(sizeof(IDBCursor_CursorContinue_Params_Data) == 40,
              "Bad sizeof(IDBCursor_CursorContinue_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_CursorContinue_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBCursorResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_CursorContinue_ResponseParams_Data>;

  IDBCursor_CursorContinue_ResponseParams_Data();
  ~IDBCursor_CursorContinue_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBCursor_CursorContinue_ResponseParams_Data) == 24,
              "Bad sizeof(IDBCursor_CursorContinue_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_Prefetch_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_Prefetch_Params_Data>;

  IDBCursor_Prefetch_Params_Data();
  ~IDBCursor_Prefetch_Params_Data() = delete;
};
static_assert(sizeof(IDBCursor_Prefetch_Params_Data) == 16,
              "Bad sizeof(IDBCursor_Prefetch_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_Prefetch_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBCursorResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_Prefetch_ResponseParams_Data>;

  IDBCursor_Prefetch_ResponseParams_Data();
  ~IDBCursor_Prefetch_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBCursor_Prefetch_ResponseParams_Data) == 24,
              "Bad sizeof(IDBCursor_Prefetch_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBCursor_PrefetchReset_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t used_prefetches;
  int32_t unused_prefetches;

 private:
  friend class mojo::internal::MessageFragment<IDBCursor_PrefetchReset_Params_Data>;

  IDBCursor_PrefetchReset_Params_Data();
  ~IDBCursor_PrefetchReset_Params_Data() = delete;
};
static_assert(sizeof(IDBCursor_PrefetchReset_Params_Data) == 16,
              "Bad sizeof(IDBCursor_PrefetchReset_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBTransaction_CreateObjectStore_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t object_store_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> name;
  mojo::internal::Pointer<internal::IDBKeyPath_Data> key_path;
  uint8_t auto_increment : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<IDBTransaction_CreateObjectStore_Params_Data>;

  IDBTransaction_CreateObjectStore_Params_Data();
  ~IDBTransaction_CreateObjectStore_Params_Data() = delete;
};
static_assert(sizeof(IDBTransaction_CreateObjectStore_Params_Data) == 40,
              "Bad sizeof(IDBTransaction_CreateObjectStore_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBTransaction_DeleteObjectStore_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t object_store_id;

 private:
  friend class mojo::internal::MessageFragment<IDBTransaction_DeleteObjectStore_Params_Data>;

  IDBTransaction_DeleteObjectStore_Params_Data();
  ~IDBTransaction_DeleteObjectStore_Params_Data() = delete;
};
static_assert(sizeof(IDBTransaction_DeleteObjectStore_Params_Data) == 16,
              "Bad sizeof(IDBTransaction_DeleteObjectStore_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBTransaction_Put_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t object_store_id;
  mojo::internal::Pointer<internal::IDBValue_Data> value;
  internal::IDBKey_Data key;
  int32_t mode;
  uint8_t pad3_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IDBIndexKeys_Data>>> index_keys;

 private:
  friend class mojo::internal::MessageFragment<IDBTransaction_Put_Params_Data>;

  IDBTransaction_Put_Params_Data();
  ~IDBTransaction_Put_Params_Data() = delete;
};
static_assert(sizeof(IDBTransaction_Put_Params_Data) == 56,
              "Bad sizeof(IDBTransaction_Put_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBTransaction_Put_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBTransactionPutResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBTransaction_Put_ResponseParams_Data>;

  IDBTransaction_Put_ResponseParams_Data();
  ~IDBTransaction_Put_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBTransaction_Put_ResponseParams_Data) == 24,
              "Bad sizeof(IDBTransaction_Put_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBTransaction_Commit_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t num_errors_handled;

 private:
  friend class mojo::internal::MessageFragment<IDBTransaction_Commit_Params_Data>;

  IDBTransaction_Commit_Params_Data();
  ~IDBTransaction_Commit_Params_Data() = delete;
};
static_assert(sizeof(IDBTransaction_Commit_Params_Data) == 16,
              "Bad sizeof(IDBTransaction_Commit_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IDBReturnValue_Data>>> values;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data>;

  IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data();
  ~IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data) == 16,
              "Bad sizeof(IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<internal::IDBKey_Data>> keys;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data>;

  IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data();
  ~IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data) == 16,
              "Bad sizeof(IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabaseGetAllResultSink_OnError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::IDBError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabaseGetAllResultSink_OnError_Params_Data>;

  IDBDatabaseGetAllResultSink_OnError_Params_Data();
  ~IDBDatabaseGetAllResultSink_OnError_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabaseGetAllResultSink_OnError_Params_Data) == 16,
              "Bad sizeof(IDBDatabaseGetAllResultSink_OnError_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_RenameObjectStore_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> new_name;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_RenameObjectStore_Params_Data>;

  IDBDatabase_RenameObjectStore_Params_Data();
  ~IDBDatabase_RenameObjectStore_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_RenameObjectStore_Params_Data) == 32,
              "Bad sizeof(IDBDatabase_RenameObjectStore_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_CreateTransaction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data transaction_receiver;
  int32_t mode;
  int64_t transaction_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> object_store_ids;
  int32_t durability;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_CreateTransaction_Params_Data>;

  IDBDatabase_CreateTransaction_Params_Data();
  ~IDBDatabase_CreateTransaction_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_CreateTransaction_Params_Data) == 40,
              "Bad sizeof(IDBDatabase_CreateTransaction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_Close_Params_Data>;

  IDBDatabase_Close_Params_Data();
  ~IDBDatabase_Close_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_Close_Params_Data) == 8,
              "Bad sizeof(IDBDatabase_Close_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_VersionChangeIgnored_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_VersionChangeIgnored_Params_Data>;

  IDBDatabase_VersionChangeIgnored_Params_Data();
  ~IDBDatabase_VersionChangeIgnored_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_VersionChangeIgnored_Params_Data) == 8,
              "Bad sizeof(IDBDatabase_VersionChangeIgnored_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_BatchGetAll_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IDBKeyRange_Data>>> key_ranges;
  uint32_t max_count;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_BatchGetAll_Params_Data>;

  IDBDatabase_BatchGetAll_Params_Data();
  ~IDBDatabase_BatchGetAll_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_BatchGetAll_Params_Data) == 48,
              "Bad sizeof(IDBDatabase_BatchGetAll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_BatchGetAll_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBDatabaseBatchGetAllResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_BatchGetAll_ResponseParams_Data>;

  IDBDatabase_BatchGetAll_ResponseParams_Data();
  ~IDBDatabase_BatchGetAll_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBDatabase_BatchGetAll_ResponseParams_Data) == 24,
              "Bad sizeof(IDBDatabase_BatchGetAll_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_Get_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<internal::IDBKeyRange_Data> key_range;
  uint8_t key_only : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_Get_Params_Data>;

  IDBDatabase_Get_Params_Data();
  ~IDBDatabase_Get_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_Get_Params_Data) == 48,
              "Bad sizeof(IDBDatabase_Get_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_Get_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBDatabaseGetResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_Get_ResponseParams_Data>;

  IDBDatabase_Get_ResponseParams_Data();
  ~IDBDatabase_Get_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBDatabase_Get_ResponseParams_Data) == 24,
              "Bad sizeof(IDBDatabase_Get_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_GetAll_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<internal::IDBKeyRange_Data> key_range;
  uint8_t key_only : 1;
  uint8_t pad4_[7];
  int64_t max_count;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_GetAll_Params_Data>;

  IDBDatabase_GetAll_Params_Data();
  ~IDBDatabase_GetAll_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_GetAll_Params_Data) == 56,
              "Bad sizeof(IDBDatabase_GetAll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_GetAll_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_GetAll_ResponseParams_Data>;

  IDBDatabase_GetAll_ResponseParams_Data();
  ~IDBDatabase_GetAll_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBDatabase_GetAll_ResponseParams_Data) == 16,
              "Bad sizeof(IDBDatabase_GetAll_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_SetIndexKeys_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  internal::IDBKey_Data primary_key;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::IDBIndexKeys_Data>>> index_keys;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_SetIndexKeys_Params_Data>;

  IDBDatabase_SetIndexKeys_Params_Data();
  ~IDBDatabase_SetIndexKeys_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_SetIndexKeys_Params_Data) == 48,
              "Bad sizeof(IDBDatabase_SetIndexKeys_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_SetIndexesReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<int64_t>> index_ids;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_SetIndexesReady_Params_Data>;

  IDBDatabase_SetIndexesReady_Params_Data();
  ~IDBDatabase_SetIndexesReady_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_SetIndexesReady_Params_Data) == 32,
              "Bad sizeof(IDBDatabase_SetIndexesReady_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_OpenCursor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<internal::IDBKeyRange_Data> key_range;
  int32_t direction;
  uint8_t key_only : 1;
  uint8_t pad5_[3];
  int32_t task_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_OpenCursor_Params_Data>;

  IDBDatabase_OpenCursor_Params_Data();
  ~IDBDatabase_OpenCursor_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_OpenCursor_Params_Data) == 56,
              "Bad sizeof(IDBDatabase_OpenCursor_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_OpenCursor_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::IDBDatabaseOpenCursorResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_OpenCursor_ResponseParams_Data>;

  IDBDatabase_OpenCursor_ResponseParams_Data();
  ~IDBDatabase_OpenCursor_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBDatabase_OpenCursor_ResponseParams_Data) == 24,
              "Bad sizeof(IDBDatabase_OpenCursor_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_Count_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<internal::IDBKeyRange_Data> key_range;
  mojo::internal::AssociatedInterface_Data pending_callbacks;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_Count_Params_Data>;

  IDBDatabase_Count_Params_Data();
  ~IDBDatabase_Count_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_Count_Params_Data) == 48,
              "Bad sizeof(IDBDatabase_Count_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_DeleteRange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  mojo::internal::Pointer<internal::IDBKeyRange_Data> key_range;
  mojo::internal::AssociatedInterface_Data pending_callbacks;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_DeleteRange_Params_Data>;

  IDBDatabase_DeleteRange_Params_Data();
  ~IDBDatabase_DeleteRange_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_DeleteRange_Params_Data) == 40,
              "Bad sizeof(IDBDatabase_DeleteRange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  mojo::internal::AssociatedInterface_Data pending_callbacks;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data>;

  IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data();
  ~IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data) == 32,
              "Bad sizeof(IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_Clear_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  mojo::internal::AssociatedInterface_Data pending_callbacks;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_Clear_Params_Data>;

  IDBDatabase_Clear_Params_Data();
  ~IDBDatabase_Clear_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_Clear_Params_Data) == 32,
              "Bad sizeof(IDBDatabase_Clear_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_CreateIndex_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> name;
  mojo::internal::Pointer<internal::IDBKeyPath_Data> key_path;
  uint8_t unique : 1;
  uint8_t multi_entry : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_CreateIndex_Params_Data>;

  IDBDatabase_CreateIndex_Params_Data();
  ~IDBDatabase_CreateIndex_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_CreateIndex_Params_Data) == 56,
              "Bad sizeof(IDBDatabase_CreateIndex_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_DeleteIndex_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_DeleteIndex_Params_Data>;

  IDBDatabase_DeleteIndex_Params_Data();
  ~IDBDatabase_DeleteIndex_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_DeleteIndex_Params_Data) == 32,
              "Bad sizeof(IDBDatabase_DeleteIndex_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_RenameIndex_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;
  int64_t object_store_id;
  int64_t index_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> new_name;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_RenameIndex_Params_Data>;

  IDBDatabase_RenameIndex_Params_Data();
  ~IDBDatabase_RenameIndex_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_RenameIndex_Params_Data) == 40,
              "Bad sizeof(IDBDatabase_RenameIndex_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBDatabase_Abort_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t transaction_id;

 private:
  friend class mojo::internal::MessageFragment<IDBDatabase_Abort_Params_Data>;

  IDBDatabase_Abort_Params_Data();
  ~IDBDatabase_Abort_Params_Data() = delete;
};
static_assert(sizeof(IDBDatabase_Abort_Params_Data) == 16,
              "Bad sizeof(IDBDatabase_Abort_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_GetDatabaseInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data pending_callbacks;

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_GetDatabaseInfo_Params_Data>;

  IDBFactory_GetDatabaseInfo_Params_Data();
  ~IDBFactory_GetDatabaseInfo_Params_Data() = delete;
};
static_assert(sizeof(IDBFactory_GetDatabaseInfo_Params_Data) == 16,
              "Bad sizeof(IDBFactory_GetDatabaseInfo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_Open_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data pending_callbacks;
  mojo::internal::AssociatedInterface_Data database_callbacks;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> name;
  int64_t version;
  mojo::internal::AssociatedEndpointHandle_Data version_change_transaction_receiver;
  uint8_t pad4_[4];
  int64_t transaction_id;

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_Open_Params_Data>;

  IDBFactory_Open_Params_Data();
  ~IDBFactory_Open_Params_Data() = delete;
};
static_assert(sizeof(IDBFactory_Open_Params_Data) == 56,
              "Bad sizeof(IDBFactory_Open_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_DeleteDatabase_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedInterface_Data pending_callbacks;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> name;
  uint8_t force_close : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_DeleteDatabase_Params_Data>;

  IDBFactory_DeleteDatabase_Params_Data();
  ~IDBFactory_DeleteDatabase_Params_Data() = delete;
};
static_assert(sizeof(IDBFactory_DeleteDatabase_Params_Data) == 32,
              "Bad sizeof(IDBFactory_DeleteDatabase_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data>;

  IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data();
  ~IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data() = delete;
};
static_assert(sizeof(IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data) == 8,
              "Bad sizeof(IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data>;

  IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data();
  ~IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data) == 16,
              "Bad sizeof(IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_AbortTransactionsForDatabase_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_AbortTransactionsForDatabase_Params_Data>;

  IDBFactory_AbortTransactionsForDatabase_Params_Data();
  ~IDBFactory_AbortTransactionsForDatabase_Params_Data() = delete;
};
static_assert(sizeof(IDBFactory_AbortTransactionsForDatabase_Params_Data) == 8,
              "Bad sizeof(IDBFactory_AbortTransactionsForDatabase_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data>;

  IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data();
  ~IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data() = delete;
};
static_assert(sizeof(IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data) == 16,
              "Bad sizeof(IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data)");

}  // namespace internal


class IDBCallbacks_Error_ParamsDataView {
 public:
  IDBCallbacks_Error_ParamsDataView() = default;

  IDBCallbacks_Error_ParamsDataView(
      internal::IDBCallbacks_Error_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCode(UserType* output) const {
    auto data_value = data_->code;
    return mojo::internal::Deserialize<::blink::mojom::IDBException>(
        data_value, output);
  }
  IDBException code() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBException>(data_->code));
  }
  inline void GetMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCallbacks_Error_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCallbacks_SuccessNamesAndVersionsList_ParamsDataView {
 public:
  IDBCallbacks_SuccessNamesAndVersionsList_ParamsDataView() = default;

  IDBCallbacks_SuccessNamesAndVersionsList_ParamsDataView(
      internal::IDBCallbacks_SuccessNamesAndVersionsList_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      mojo::ArrayDataView<IDBNameAndVersionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::IDBNameAndVersionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IDBCallbacks_SuccessNamesAndVersionsList_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCallbacks_Blocked_ParamsDataView {
 public:
  IDBCallbacks_Blocked_ParamsDataView() = default;

  IDBCallbacks_Blocked_ParamsDataView(
      internal::IDBCallbacks_Blocked_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t existing_version() const {
    return data_->existing_version;
  }
 private:
  internal::IDBCallbacks_Blocked_Params_Data* data_ = nullptr;
};



class IDBCallbacks_UpgradeNeeded_ParamsDataView {
 public:
  IDBCallbacks_UpgradeNeeded_ParamsDataView() = default;

  IDBCallbacks_UpgradeNeeded_ParamsDataView(
      internal::IDBCallbacks_UpgradeNeeded_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePendingDatabase() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBDatabaseAssociatedPtrInfoDataView>(
            &data_->pending_database, &result, message_);
    DCHECK(ret);
    return result;
  }
  int64_t old_version() const {
    return data_->old_version;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDataLoss(UserType* output) const {
    auto data_value = data_->data_loss;
    return mojo::internal::Deserialize<::blink::mojom::IDBDataLoss>(
        data_value, output);
  }
  IDBDataLoss data_loss() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBDataLoss>(data_->data_loss));
  }
  inline void GetDataLossMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDataLossMessage(UserType* output) {
    
    auto* pointer = data_->data_loss_message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDbMetadataDataView(
      IDBDatabaseMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDbMetadata(UserType* output) {
    
    auto* pointer = data_->db_metadata.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBDatabaseMetadataDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCallbacks_UpgradeNeeded_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCallbacks_SuccessDatabase_ParamsDataView {
 public:
  IDBCallbacks_SuccessDatabase_ParamsDataView() = default;

  IDBCallbacks_SuccessDatabase_ParamsDataView(
      internal::IDBCallbacks_SuccessDatabase_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePendingDatabase() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBDatabaseAssociatedPtrInfoDataView>(
            &data_->pending_database, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetMetadataDataView(
      IDBDatabaseMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMetadata(UserType* output) {
    
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBDatabaseMetadataDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCallbacks_SuccessDatabase_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCallbacks_SuccessInteger_ParamsDataView {
 public:
  IDBCallbacks_SuccessInteger_ParamsDataView() = default;

  IDBCallbacks_SuccessInteger_ParamsDataView(
      internal::IDBCallbacks_SuccessInteger_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t value() const {
    return data_->value;
  }
 private:
  internal::IDBCallbacks_SuccessInteger_Params_Data* data_ = nullptr;
};



class IDBCallbacks_Success_ParamsDataView {
 public:
  IDBCallbacks_Success_ParamsDataView() = default;

  IDBCallbacks_Success_ParamsDataView(
      internal::IDBCallbacks_Success_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IDBCallbacks_Success_Params_Data* data_ = nullptr;
};



class IDBDatabaseCallbacks_ForcedClose_ParamsDataView {
 public:
  IDBDatabaseCallbacks_ForcedClose_ParamsDataView() = default;

  IDBDatabaseCallbacks_ForcedClose_ParamsDataView(
      internal::IDBDatabaseCallbacks_ForcedClose_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IDBDatabaseCallbacks_ForcedClose_Params_Data* data_ = nullptr;
};



class IDBDatabaseCallbacks_VersionChange_ParamsDataView {
 public:
  IDBDatabaseCallbacks_VersionChange_ParamsDataView() = default;

  IDBDatabaseCallbacks_VersionChange_ParamsDataView(
      internal::IDBDatabaseCallbacks_VersionChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t old_version() const {
    return data_->old_version;
  }
  int64_t new_version() const {
    return data_->new_version;
  }
 private:
  internal::IDBDatabaseCallbacks_VersionChange_Params_Data* data_ = nullptr;
};



class IDBDatabaseCallbacks_Abort_ParamsDataView {
 public:
  IDBDatabaseCallbacks_Abort_ParamsDataView() = default;

  IDBDatabaseCallbacks_Abort_ParamsDataView(
      internal::IDBDatabaseCallbacks_Abort_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCode(UserType* output) const {
    auto data_value = data_->code;
    return mojo::internal::Deserialize<::blink::mojom::IDBException>(
        data_value, output);
  }
  IDBException code() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBException>(data_->code));
  }
  inline void GetMessageDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabaseCallbacks_Abort_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabaseCallbacks_Complete_ParamsDataView {
 public:
  IDBDatabaseCallbacks_Complete_ParamsDataView() = default;

  IDBDatabaseCallbacks_Complete_ParamsDataView(
      internal::IDBDatabaseCallbacks_Complete_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
 private:
  internal::IDBDatabaseCallbacks_Complete_Params_Data* data_ = nullptr;
};



class IDBCursor_Advance_ParamsDataView {
 public:
  IDBCursor_Advance_ParamsDataView() = default;

  IDBCursor_Advance_ParamsDataView(
      internal::IDBCursor_Advance_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t count() const {
    return data_->count;
  }
 private:
  internal::IDBCursor_Advance_Params_Data* data_ = nullptr;
};



class IDBCursor_Advance_ResponseParamsDataView {
 public:
  IDBCursor_Advance_ResponseParamsDataView() = default;

  IDBCursor_Advance_ResponseParamsDataView(
      internal::IDBCursor_Advance_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBCursorResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBCursorResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCursor_Advance_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCursor_CursorContinue_ParamsDataView {
 public:
  IDBCursor_CursorContinue_ParamsDataView() = default;

  IDBCursor_CursorContinue_ParamsDataView(
      internal::IDBCursor_CursorContinue_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyDataView(
      IDBKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = !data_->key.is_null() ? &data_->key : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyDataView>(
        pointer, output, message_);
  }
  inline void GetPrimaryKeyDataView(
      IDBKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrimaryKey(UserType* output) {
    
    auto* pointer = !data_->primary_key.is_null() ? &data_->primary_key : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCursor_CursorContinue_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCursor_CursorContinue_ResponseParamsDataView {
 public:
  IDBCursor_CursorContinue_ResponseParamsDataView() = default;

  IDBCursor_CursorContinue_ResponseParamsDataView(
      internal::IDBCursor_CursorContinue_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBCursorResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBCursorResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCursor_CursorContinue_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCursor_Prefetch_ParamsDataView {
 public:
  IDBCursor_Prefetch_ParamsDataView() = default;

  IDBCursor_Prefetch_ParamsDataView(
      internal::IDBCursor_Prefetch_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t count() const {
    return data_->count;
  }
 private:
  internal::IDBCursor_Prefetch_Params_Data* data_ = nullptr;
};



class IDBCursor_Prefetch_ResponseParamsDataView {
 public:
  IDBCursor_Prefetch_ResponseParamsDataView() = default;

  IDBCursor_Prefetch_ResponseParamsDataView(
      internal::IDBCursor_Prefetch_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBCursorResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBCursorResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBCursor_Prefetch_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBCursor_PrefetchReset_ParamsDataView {
 public:
  IDBCursor_PrefetchReset_ParamsDataView() = default;

  IDBCursor_PrefetchReset_ParamsDataView(
      internal::IDBCursor_PrefetchReset_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t used_prefetches() const {
    return data_->used_prefetches;
  }
  int32_t unused_prefetches() const {
    return data_->unused_prefetches;
  }
 private:
  internal::IDBCursor_PrefetchReset_Params_Data* data_ = nullptr;
};



class IDBTransaction_CreateObjectStore_ParamsDataView {
 public:
  IDBTransaction_CreateObjectStore_ParamsDataView() = default;

  IDBTransaction_CreateObjectStore_ParamsDataView(
      internal::IDBTransaction_CreateObjectStore_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetKeyPathDataView(
      IDBKeyPathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyPath(UserType* output) {
    
    auto* pointer = data_->key_path.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyPathDataView>(
        pointer, output, message_);
  }
  bool auto_increment() const {
    return data_->auto_increment;
  }
 private:
  internal::IDBTransaction_CreateObjectStore_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBTransaction_DeleteObjectStore_ParamsDataView {
 public:
  IDBTransaction_DeleteObjectStore_ParamsDataView() = default;

  IDBTransaction_DeleteObjectStore_ParamsDataView(
      internal::IDBTransaction_DeleteObjectStore_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
 private:
  internal::IDBTransaction_DeleteObjectStore_Params_Data* data_ = nullptr;
};



class IDBTransaction_Put_ParamsDataView {
 public:
  IDBTransaction_Put_ParamsDataView() = default;

  IDBTransaction_Put_ParamsDataView(
      internal::IDBTransaction_Put_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  inline void GetValueDataView(
      IDBValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBValueDataView>(
        pointer, output, message_);
  }
  inline void GetKeyDataView(
      IDBKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = !data_->key.is_null() ? &data_->key : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::blink::mojom::IDBPutMode>(
        data_value, output);
  }
  IDBPutMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBPutMode>(data_->mode));
  }
  inline void GetIndexKeysDataView(
      mojo::ArrayDataView<IDBIndexKeysDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIndexKeys(UserType* output) {
    
    auto* pointer = data_->index_keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::IDBIndexKeysDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IDBTransaction_Put_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBTransaction_Put_ResponseParamsDataView {
 public:
  IDBTransaction_Put_ResponseParamsDataView() = default;

  IDBTransaction_Put_ResponseParamsDataView(
      internal::IDBTransaction_Put_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBTransactionPutResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBTransactionPutResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBTransaction_Put_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBTransaction_Commit_ParamsDataView {
 public:
  IDBTransaction_Commit_ParamsDataView() = default;

  IDBTransaction_Commit_ParamsDataView(
      internal::IDBTransaction_Commit_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t num_errors_handled() const {
    return data_->num_errors_handled;
  }
 private:
  internal::IDBTransaction_Commit_Params_Data* data_ = nullptr;
};



class IDBDatabaseGetAllResultSink_ReceiveValues_ParamsDataView {
 public:
  IDBDatabaseGetAllResultSink_ReceiveValues_ParamsDataView() = default;

  IDBDatabaseGetAllResultSink_ReceiveValues_ParamsDataView(
      internal::IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValuesDataView(
      mojo::ArrayDataView<IDBReturnValueDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValues(UserType* output) {
    
    auto* pointer = data_->values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::IDBReturnValueDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabaseGetAllResultSink_ReceiveValues_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabaseGetAllResultSink_ReceiveKeys_ParamsDataView {
 public:
  IDBDatabaseGetAllResultSink_ReceiveKeys_ParamsDataView() = default;

  IDBDatabaseGetAllResultSink_ReceiveKeys_ParamsDataView(
      internal::IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeysDataView(
      mojo::ArrayDataView<IDBKeyDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeys(UserType* output) {
    
    auto* pointer = data_->keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::IDBKeyDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabaseGetAllResultSink_ReceiveKeys_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabaseGetAllResultSink_OnError_ParamsDataView {
 public:
  IDBDatabaseGetAllResultSink_OnError_ParamsDataView() = default;

  IDBDatabaseGetAllResultSink_OnError_ParamsDataView(
      internal::IDBDatabaseGetAllResultSink_OnError_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetErrorDataView(
      IDBErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabaseGetAllResultSink_OnError_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_RenameObjectStore_ParamsDataView {
 public:
  IDBDatabase_RenameObjectStore_ParamsDataView() = default;

  IDBDatabase_RenameObjectStore_ParamsDataView(
      internal::IDBDatabase_RenameObjectStore_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  inline void GetNewNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewName(UserType* output) {
    
    auto* pointer = data_->new_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_RenameObjectStore_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_CreateTransaction_ParamsDataView {
 public:
  IDBDatabase_CreateTransaction_ParamsDataView() = default;

  IDBDatabase_CreateTransaction_ParamsDataView(
      internal::IDBDatabase_CreateTransaction_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeTransactionReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBTransactionAssociatedRequestDataView>(
            &data_->transaction_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  inline void GetObjectStoreIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadObjectStoreIds(UserType* output) {
    
    auto* pointer = data_->object_store_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::blink::mojom::IDBTransactionMode>(
        data_value, output);
  }
  IDBTransactionMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBTransactionMode>(data_->mode));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDurability(UserType* output) const {
    auto data_value = data_->durability;
    return mojo::internal::Deserialize<::blink::mojom::IDBTransactionDurability>(
        data_value, output);
  }
  IDBTransactionDurability durability() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBTransactionDurability>(data_->durability));
  }
 private:
  internal::IDBDatabase_CreateTransaction_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_Close_ParamsDataView {
 public:
  IDBDatabase_Close_ParamsDataView() = default;

  IDBDatabase_Close_ParamsDataView(
      internal::IDBDatabase_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IDBDatabase_Close_Params_Data* data_ = nullptr;
};



class IDBDatabase_VersionChangeIgnored_ParamsDataView {
 public:
  IDBDatabase_VersionChangeIgnored_ParamsDataView() = default;

  IDBDatabase_VersionChangeIgnored_ParamsDataView(
      internal::IDBDatabase_VersionChangeIgnored_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IDBDatabase_VersionChangeIgnored_Params_Data* data_ = nullptr;
};



class IDBDatabase_BatchGetAll_ParamsDataView {
 public:
  IDBDatabase_BatchGetAll_ParamsDataView() = default;

  IDBDatabase_BatchGetAll_ParamsDataView(
      internal::IDBDatabase_BatchGetAll_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetKeyRangesDataView(
      mojo::ArrayDataView<IDBKeyRangeDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyRanges(UserType* output) {
    
    auto* pointer = data_->key_ranges.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::IDBKeyRangeDataView>>(
        pointer, output, message_);
  }
  uint32_t max_count() const {
    return data_->max_count;
  }
 private:
  internal::IDBDatabase_BatchGetAll_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_BatchGetAll_ResponseParamsDataView {
 public:
  IDBDatabase_BatchGetAll_ResponseParamsDataView() = default;

  IDBDatabase_BatchGetAll_ResponseParamsDataView(
      internal::IDBDatabase_BatchGetAll_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBDatabaseBatchGetAllResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBDatabaseBatchGetAllResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_BatchGetAll_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_Get_ParamsDataView {
 public:
  IDBDatabase_Get_ParamsDataView() = default;

  IDBDatabase_Get_ParamsDataView(
      internal::IDBDatabase_Get_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetKeyRangeDataView(
      IDBKeyRangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyRange(UserType* output) {
    
    auto* pointer = data_->key_range.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyRangeDataView>(
        pointer, output, message_);
  }
  bool key_only() const {
    return data_->key_only;
  }
 private:
  internal::IDBDatabase_Get_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_Get_ResponseParamsDataView {
 public:
  IDBDatabase_Get_ResponseParamsDataView() = default;

  IDBDatabase_Get_ResponseParamsDataView(
      internal::IDBDatabase_Get_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBDatabaseGetResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBDatabaseGetResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_Get_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_GetAll_ParamsDataView {
 public:
  IDBDatabase_GetAll_ParamsDataView() = default;

  IDBDatabase_GetAll_ParamsDataView(
      internal::IDBDatabase_GetAll_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetKeyRangeDataView(
      IDBKeyRangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyRange(UserType* output) {
    
    auto* pointer = data_->key_range.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyRangeDataView>(
        pointer, output, message_);
  }
  bool key_only() const {
    return data_->key_only;
  }
  int64_t max_count() const {
    return data_->max_count;
  }
 private:
  internal::IDBDatabase_GetAll_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_GetAll_ResponseParamsDataView {
 public:
  IDBDatabase_GetAll_ResponseParamsDataView() = default;

  IDBDatabase_GetAll_ResponseParamsDataView(
      internal::IDBDatabase_GetAll_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::IDBDatabaseGetAllResultSinkInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IDBDatabase_GetAll_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_SetIndexKeys_ParamsDataView {
 public:
  IDBDatabase_SetIndexKeys_ParamsDataView() = default;

  IDBDatabase_SetIndexKeys_ParamsDataView(
      internal::IDBDatabase_SetIndexKeys_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  inline void GetPrimaryKeyDataView(
      IDBKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrimaryKey(UserType* output) {
    
    auto* pointer = !data_->primary_key.is_null() ? &data_->primary_key : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyDataView>(
        pointer, output, message_);
  }
  inline void GetIndexKeysDataView(
      mojo::ArrayDataView<IDBIndexKeysDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIndexKeys(UserType* output) {
    
    auto* pointer = data_->index_keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::IDBIndexKeysDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_SetIndexKeys_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_SetIndexesReady_ParamsDataView {
 public:
  IDBDatabase_SetIndexesReady_ParamsDataView() = default;

  IDBDatabase_SetIndexesReady_ParamsDataView(
      internal::IDBDatabase_SetIndexesReady_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  inline void GetIndexIdsDataView(
      mojo::ArrayDataView<int64_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIndexIds(UserType* output) {
    
    auto* pointer = data_->index_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int64_t>>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_SetIndexesReady_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_OpenCursor_ParamsDataView {
 public:
  IDBDatabase_OpenCursor_ParamsDataView() = default;

  IDBDatabase_OpenCursor_ParamsDataView(
      internal::IDBDatabase_OpenCursor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetKeyRangeDataView(
      IDBKeyRangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyRange(UserType* output) {
    
    auto* pointer = data_->key_range.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyRangeDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadDirection(UserType* output) const {
    auto data_value = data_->direction;
    return mojo::internal::Deserialize<::blink::mojom::IDBCursorDirection>(
        data_value, output);
  }
  IDBCursorDirection direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBCursorDirection>(data_->direction));
  }
  bool key_only() const {
    return data_->key_only;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTaskType(UserType* output) const {
    auto data_value = data_->task_type;
    return mojo::internal::Deserialize<::blink::mojom::IDBTaskType>(
        data_value, output);
  }
  IDBTaskType task_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBTaskType>(data_->task_type));
  }
 private:
  internal::IDBDatabase_OpenCursor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_OpenCursor_ResponseParamsDataView {
 public:
  IDBDatabase_OpenCursor_ResponseParamsDataView() = default;

  IDBDatabase_OpenCursor_ResponseParamsDataView(
      internal::IDBDatabase_OpenCursor_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      IDBDatabaseOpenCursorResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::IDBDatabaseOpenCursorResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_OpenCursor_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_Count_ParamsDataView {
 public:
  IDBDatabase_Count_ParamsDataView() = default;

  IDBDatabase_Count_ParamsDataView(
      internal::IDBDatabase_Count_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetKeyRangeDataView(
      IDBKeyRangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyRange(UserType* output) {
    
    auto* pointer = data_->key_range.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyRangeDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IDBDatabase_Count_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_DeleteRange_ParamsDataView {
 public:
  IDBDatabase_DeleteRange_ParamsDataView() = default;

  IDBDatabase_DeleteRange_ParamsDataView(
      internal::IDBDatabase_DeleteRange_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  inline void GetKeyRangeDataView(
      IDBKeyRangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyRange(UserType* output) {
    
    auto* pointer = data_->key_range.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyRangeDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IDBDatabase_DeleteRange_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_GetKeyGeneratorCurrentNumber_ParamsDataView {
 public:
  IDBDatabase_GetKeyGeneratorCurrentNumber_ParamsDataView() = default;

  IDBDatabase_GetKeyGeneratorCurrentNumber_ParamsDataView(
      internal::IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IDBDatabase_GetKeyGeneratorCurrentNumber_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_Clear_ParamsDataView {
 public:
  IDBDatabase_Clear_ParamsDataView() = default;

  IDBDatabase_Clear_ParamsDataView(
      internal::IDBDatabase_Clear_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IDBDatabase_Clear_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_CreateIndex_ParamsDataView {
 public:
  IDBDatabase_CreateIndex_ParamsDataView() = default;

  IDBDatabase_CreateIndex_ParamsDataView(
      internal::IDBDatabase_CreateIndex_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetKeyPathDataView(
      IDBKeyPathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyPath(UserType* output) {
    
    auto* pointer = data_->key_path.Get();
    return mojo::internal::Deserialize<::blink::mojom::IDBKeyPathDataView>(
        pointer, output, message_);
  }
  bool unique() const {
    return data_->unique;
  }
  bool multi_entry() const {
    return data_->multi_entry;
  }
 private:
  internal::IDBDatabase_CreateIndex_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_DeleteIndex_ParamsDataView {
 public:
  IDBDatabase_DeleteIndex_ParamsDataView() = default;

  IDBDatabase_DeleteIndex_ParamsDataView(
      internal::IDBDatabase_DeleteIndex_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
 private:
  internal::IDBDatabase_DeleteIndex_Params_Data* data_ = nullptr;
};



class IDBDatabase_RenameIndex_ParamsDataView {
 public:
  IDBDatabase_RenameIndex_ParamsDataView() = default;

  IDBDatabase_RenameIndex_ParamsDataView(
      internal::IDBDatabase_RenameIndex_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
  int64_t object_store_id() const {
    return data_->object_store_id;
  }
  int64_t index_id() const {
    return data_->index_id;
  }
  inline void GetNewNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewName(UserType* output) {
    
    auto* pointer = data_->new_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::IDBDatabase_RenameIndex_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBDatabase_Abort_ParamsDataView {
 public:
  IDBDatabase_Abort_ParamsDataView() = default;

  IDBDatabase_Abort_ParamsDataView(
      internal::IDBDatabase_Abort_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
 private:
  internal::IDBDatabase_Abort_Params_Data* data_ = nullptr;
};



class IDBFactory_GetDatabaseInfo_ParamsDataView {
 public:
  IDBFactory_GetDatabaseInfo_ParamsDataView() = default;

  IDBFactory_GetDatabaseInfo_ParamsDataView(
      internal::IDBFactory_GetDatabaseInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IDBFactory_GetDatabaseInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBFactory_Open_ParamsDataView {
 public:
  IDBFactory_Open_ParamsDataView() = default;

  IDBFactory_Open_ParamsDataView(
      internal::IDBFactory_Open_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDatabaseCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBDatabaseCallbacksAssociatedPtrInfoDataView>(
            &data_->database_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  int64_t version() const {
    return data_->version;
  }
  template <typename UserType>
  UserType TakeVersionChangeTransactionReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBTransactionAssociatedRequestDataView>(
            &data_->version_change_transaction_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  int64_t transaction_id() const {
    return data_->transaction_id;
  }
 private:
  internal::IDBFactory_Open_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBFactory_DeleteDatabase_ParamsDataView {
 public:
  IDBFactory_DeleteDatabase_ParamsDataView() = default;

  IDBFactory_DeleteDatabase_ParamsDataView(
      internal::IDBFactory_DeleteDatabase_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakePendingCallbacks() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::IDBCallbacksAssociatedPtrInfoDataView>(
            &data_->pending_callbacks, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  bool force_close() const {
    return data_->force_close;
  }
 private:
  internal::IDBFactory_DeleteDatabase_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IDBFactory_AbortTransactionsAndCompactDatabase_ParamsDataView {
 public:
  IDBFactory_AbortTransactionsAndCompactDatabase_ParamsDataView() = default;

  IDBFactory_AbortTransactionsAndCompactDatabase_ParamsDataView(
      internal::IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IDBFactory_AbortTransactionsAndCompactDatabase_Params_Data* data_ = nullptr;
};



class IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParamsDataView {
 public:
  IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParamsDataView() = default;

  IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParamsDataView(
      internal::IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::IDBStatus>(
        data_value, output);
  }
  IDBStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBStatus>(data_->status));
  }
 private:
  internal::IDBFactory_AbortTransactionsAndCompactDatabase_ResponseParams_Data* data_ = nullptr;
};



class IDBFactory_AbortTransactionsForDatabase_ParamsDataView {
 public:
  IDBFactory_AbortTransactionsForDatabase_ParamsDataView() = default;

  IDBFactory_AbortTransactionsForDatabase_ParamsDataView(
      internal::IDBFactory_AbortTransactionsForDatabase_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IDBFactory_AbortTransactionsForDatabase_Params_Data* data_ = nullptr;
};



class IDBFactory_AbortTransactionsForDatabase_ResponseParamsDataView {
 public:
  IDBFactory_AbortTransactionsForDatabase_ResponseParamsDataView() = default;

  IDBFactory_AbortTransactionsForDatabase_ResponseParamsDataView(
      internal::IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::IDBStatus>(
        data_value, output);
  }
  IDBStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::IDBStatus>(data_->status));
  }
 private:
  internal::IDBFactory_AbortTransactionsForDatabase_ResponseParams_Data* data_ = nullptr;
};


inline void IDBCallbacks_Error_ParamsDataView::GetMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void IDBCallbacks_SuccessNamesAndVersionsList_ParamsDataView::GetValueDataView(
    mojo::ArrayDataView<IDBNameAndVersionDataView>* output) {
  auto pointer = data_->value.Get();
  *output = mojo::ArrayDataView<IDBNameAndVersionDataView>(pointer, message_);
}




inline void IDBCallbacks_UpgradeNeeded_ParamsDataView::GetDataLossMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data_loss_message.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void IDBCallbacks_UpgradeNeeded_ParamsDataView::GetDbMetadataDataView(
    IDBDatabaseMetadataDataView* output) {
  auto pointer = data_->db_metadata.Get();
  *output = IDBDatabaseMetadataDataView(pointer, message_);
}


inline void IDBCallbacks_SuccessDatabase_ParamsDataView::GetMetadataDataView(
    IDBDatabaseMetadataDataView* output) {
  auto pointer = data_->metadata.Get();
  *output = IDBDatabaseMetadataDataView(pointer, message_);
}










inline void IDBDatabaseCallbacks_Abort_ParamsDataView::GetMessageDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->message.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}






inline void IDBCursor_Advance_ResponseParamsDataView::GetResultDataView(
    IDBCursorResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBCursorResultDataView(pointer, message_);
}


inline void IDBCursor_CursorContinue_ParamsDataView::GetKeyDataView(
    IDBKeyDataView* output) {
  auto pointer = &data_->key;
  *output = IDBKeyDataView(pointer, message_);
}
inline void IDBCursor_CursorContinue_ParamsDataView::GetPrimaryKeyDataView(
    IDBKeyDataView* output) {
  auto pointer = &data_->primary_key;
  *output = IDBKeyDataView(pointer, message_);
}


inline void IDBCursor_CursorContinue_ResponseParamsDataView::GetResultDataView(
    IDBCursorResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBCursorResultDataView(pointer, message_);
}




inline void IDBCursor_Prefetch_ResponseParamsDataView::GetResultDataView(
    IDBCursorResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBCursorResultDataView(pointer, message_);
}




inline void IDBTransaction_CreateObjectStore_ParamsDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void IDBTransaction_CreateObjectStore_ParamsDataView::GetKeyPathDataView(
    IDBKeyPathDataView* output) {
  auto pointer = data_->key_path.Get();
  *output = IDBKeyPathDataView(pointer, message_);
}




inline void IDBTransaction_Put_ParamsDataView::GetValueDataView(
    IDBValueDataView* output) {
  auto pointer = data_->value.Get();
  *output = IDBValueDataView(pointer, message_);
}
inline void IDBTransaction_Put_ParamsDataView::GetKeyDataView(
    IDBKeyDataView* output) {
  auto pointer = &data_->key;
  *output = IDBKeyDataView(pointer, message_);
}
inline void IDBTransaction_Put_ParamsDataView::GetIndexKeysDataView(
    mojo::ArrayDataView<IDBIndexKeysDataView>* output) {
  auto pointer = data_->index_keys.Get();
  *output = mojo::ArrayDataView<IDBIndexKeysDataView>(pointer, message_);
}


inline void IDBTransaction_Put_ResponseParamsDataView::GetResultDataView(
    IDBTransactionPutResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBTransactionPutResultDataView(pointer, message_);
}




inline void IDBDatabaseGetAllResultSink_ReceiveValues_ParamsDataView::GetValuesDataView(
    mojo::ArrayDataView<IDBReturnValueDataView>* output) {
  auto pointer = data_->values.Get();
  *output = mojo::ArrayDataView<IDBReturnValueDataView>(pointer, message_);
}


inline void IDBDatabaseGetAllResultSink_ReceiveKeys_ParamsDataView::GetKeysDataView(
    mojo::ArrayDataView<IDBKeyDataView>* output) {
  auto pointer = data_->keys.Get();
  *output = mojo::ArrayDataView<IDBKeyDataView>(pointer, message_);
}


inline void IDBDatabaseGetAllResultSink_OnError_ParamsDataView::GetErrorDataView(
    IDBErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = IDBErrorDataView(pointer, message_);
}


inline void IDBDatabase_RenameObjectStore_ParamsDataView::GetNewNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->new_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void IDBDatabase_CreateTransaction_ParamsDataView::GetObjectStoreIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->object_store_ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, message_);
}






inline void IDBDatabase_BatchGetAll_ParamsDataView::GetKeyRangesDataView(
    mojo::ArrayDataView<IDBKeyRangeDataView>* output) {
  auto pointer = data_->key_ranges.Get();
  *output = mojo::ArrayDataView<IDBKeyRangeDataView>(pointer, message_);
}


inline void IDBDatabase_BatchGetAll_ResponseParamsDataView::GetResultDataView(
    IDBDatabaseBatchGetAllResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBDatabaseBatchGetAllResultDataView(pointer, message_);
}


inline void IDBDatabase_Get_ParamsDataView::GetKeyRangeDataView(
    IDBKeyRangeDataView* output) {
  auto pointer = data_->key_range.Get();
  *output = IDBKeyRangeDataView(pointer, message_);
}


inline void IDBDatabase_Get_ResponseParamsDataView::GetResultDataView(
    IDBDatabaseGetResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBDatabaseGetResultDataView(pointer, message_);
}


inline void IDBDatabase_GetAll_ParamsDataView::GetKeyRangeDataView(
    IDBKeyRangeDataView* output) {
  auto pointer = data_->key_range.Get();
  *output = IDBKeyRangeDataView(pointer, message_);
}




inline void IDBDatabase_SetIndexKeys_ParamsDataView::GetPrimaryKeyDataView(
    IDBKeyDataView* output) {
  auto pointer = &data_->primary_key;
  *output = IDBKeyDataView(pointer, message_);
}
inline void IDBDatabase_SetIndexKeys_ParamsDataView::GetIndexKeysDataView(
    mojo::ArrayDataView<IDBIndexKeysDataView>* output) {
  auto pointer = data_->index_keys.Get();
  *output = mojo::ArrayDataView<IDBIndexKeysDataView>(pointer, message_);
}


inline void IDBDatabase_SetIndexesReady_ParamsDataView::GetIndexIdsDataView(
    mojo::ArrayDataView<int64_t>* output) {
  auto pointer = data_->index_ids.Get();
  *output = mojo::ArrayDataView<int64_t>(pointer, message_);
}


inline void IDBDatabase_OpenCursor_ParamsDataView::GetKeyRangeDataView(
    IDBKeyRangeDataView* output) {
  auto pointer = data_->key_range.Get();
  *output = IDBKeyRangeDataView(pointer, message_);
}


inline void IDBDatabase_OpenCursor_ResponseParamsDataView::GetResultDataView(
    IDBDatabaseOpenCursorResultDataView* output) {
  auto pointer = &data_->result;
  *output = IDBDatabaseOpenCursorResultDataView(pointer, message_);
}


inline void IDBDatabase_Count_ParamsDataView::GetKeyRangeDataView(
    IDBKeyRangeDataView* output) {
  auto pointer = data_->key_range.Get();
  *output = IDBKeyRangeDataView(pointer, message_);
}


inline void IDBDatabase_DeleteRange_ParamsDataView::GetKeyRangeDataView(
    IDBKeyRangeDataView* output) {
  auto pointer = data_->key_range.Get();
  *output = IDBKeyRangeDataView(pointer, message_);
}






inline void IDBDatabase_CreateIndex_ParamsDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void IDBDatabase_CreateIndex_ParamsDataView::GetKeyPathDataView(
    IDBKeyPathDataView* output) {
  auto pointer = data_->key_path.Get();
  *output = IDBKeyPathDataView(pointer, message_);
}




inline void IDBDatabase_RenameIndex_ParamsDataView::GetNewNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->new_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}






inline void IDBFactory_Open_ParamsDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void IDBFactory_DeleteDatabase_ParamsDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}









}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_INDEXEDDB_INDEXEDDB_MOJOM_PARAMS_DATA_H_