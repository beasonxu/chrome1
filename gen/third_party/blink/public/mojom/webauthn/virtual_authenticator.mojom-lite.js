// third_party/blink/public/mojom/webauthn/virtual_authenticator.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('blink.test.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.test.mojom.ClientToAuthenticatorProtocolSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.test.mojom.ClientToAuthenticatorProtocol = {
  
  U2F: 0,
  CTAP2: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
blink.test.mojom.Ctap2VersionSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
blink.test.mojom.Ctap2Version = {
  
  CTAP2_0: 0,
  CTAP2_1: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.test.mojom.VirtualAuthenticator.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.test.mojom.VirtualAuthenticatorInterface }
 */
blink.test.mojom.VirtualAuthenticatorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.test.mojom.VirtualAuthenticatorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.test.mojom.VirtualAuthenticatorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.test.mojom.VirtualAuthenticatorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        id: !string,
   *  }>}
   */

  getUniqueId() {
    return this.proxy.sendMessage(
        0,
        blink.test.mojom.VirtualAuthenticator_GetUniqueId_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetUniqueId_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !blink.test.mojom.RegisteredKey } key
   * @return {!Promise<{
        added: !boolean,
   *  }>}
   */

  addRegistration(
      key) {
    return this.proxy.sendMessage(
        1,
        blink.test.mojom.VirtualAuthenticator_AddRegistration_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_AddRegistration_ResponseParamsSpec.$,
        [
          key
        ]);
  }

  
  /**
   * @return {!Promise<{
        keys: !Array<!blink.test.mojom.RegisteredKey>,
   *  }>}
   */

  getRegistrations() {
    return this.proxy.sendMessage(
        2,
        blink.test.mojom.VirtualAuthenticator_GetRegistrations_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetRegistrations_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !Array<!number> } keyHandle
   * @return {!Promise<{
        removed: !boolean,
   *  }>}
   */

  removeRegistration(
      keyHandle) {
    return this.proxy.sendMessage(
        3,
        blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ResponseParamsSpec.$,
        [
          keyHandle
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  clearRegistrations() {
    return this.proxy.sendMessage(
        4,
        blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !Array<!number> } keyHandle
   * @return {!Promise<{
        blob: ?Array<!number>,
   *  }>}
   */

  getLargeBlob(
      keyHandle) {
    return this.proxy.sendMessage(
        5,
        blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ResponseParamsSpec.$,
        [
          keyHandle
        ]);
  }

  
  /**
   * @param { !Array<!number> } keyHandle
   * @param { !Array<!number> } blob
   * @return {!Promise<{
        set: !boolean,
   *  }>}
   */

  setLargeBlob(
      keyHandle,
      blob) {
    return this.proxy.sendMessage(
        6,
        blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ResponseParamsSpec.$,
        [
          keyHandle,
          blob
        ]);
  }

  
  /**
   * @param { !boolean } verified
   * @return {!Promise}
   */

  setUserVerified(
      verified) {
    return this.proxy.sendMessage(
        7,
        blink.test.mojom.VirtualAuthenticator_SetUserVerified_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_SetUserVerified_ResponseParamsSpec.$,
        [
          verified
        ]);
  }
};

/**
 * An object which receives request messages for the VirtualAuthenticator
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.test.mojom.VirtualAuthenticatorReceiver = class {
  /**
   * @param {!blink.test.mojom.VirtualAuthenticatorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.test.mojom.VirtualAuthenticatorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.test.mojom.VirtualAuthenticatorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.test.mojom.VirtualAuthenticatorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.test.mojom.VirtualAuthenticator_GetUniqueId_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetUniqueId_ResponseParamsSpec.$,
        impl.getUniqueId.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.test.mojom.VirtualAuthenticator_AddRegistration_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_AddRegistration_ResponseParamsSpec.$,
        impl.addRegistration.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.test.mojom.VirtualAuthenticator_GetRegistrations_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetRegistrations_ResponseParamsSpec.$,
        impl.getRegistrations.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ResponseParamsSpec.$,
        impl.removeRegistration.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ResponseParamsSpec.$,
        impl.clearRegistrations.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ResponseParamsSpec.$,
        impl.getLargeBlob.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ResponseParamsSpec.$,
        impl.setLargeBlob.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        blink.test.mojom.VirtualAuthenticator_SetUserVerified_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_SetUserVerified_ResponseParamsSpec.$,
        impl.setUserVerified.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.test.mojom.VirtualAuthenticator = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.test.mojom.VirtualAuthenticator";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.test.mojom.VirtualAuthenticatorRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.test.mojom.VirtualAuthenticatorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the VirtualAuthenticator
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.test.mojom.VirtualAuthenticatorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.test.mojom.VirtualAuthenticatorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.test.mojom.VirtualAuthenticatorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getUniqueId =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.test.mojom.VirtualAuthenticator_GetUniqueId_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetUniqueId_ResponseParamsSpec.$,
        this.getUniqueId.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addRegistration =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.test.mojom.VirtualAuthenticator_AddRegistration_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_AddRegistration_ResponseParamsSpec.$,
        this.addRegistration.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getRegistrations =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.test.mojom.VirtualAuthenticator_GetRegistrations_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetRegistrations_ResponseParamsSpec.$,
        this.getRegistrations.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.removeRegistration =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ResponseParamsSpec.$,
        this.removeRegistration.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.clearRegistrations =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ResponseParamsSpec.$,
        this.clearRegistrations.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getLargeBlob =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ResponseParamsSpec.$,
        this.getLargeBlob.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setLargeBlob =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ResponseParamsSpec.$,
        this.setLargeBlob.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setUserVerified =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        blink.test.mojom.VirtualAuthenticator_SetUserVerified_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticator_SetUserVerified_ResponseParamsSpec.$,
        this.setUserVerified.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManagerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.test.mojom.VirtualAuthenticatorManager.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { blink.test.mojom.VirtualAuthenticatorManagerInterface }
 */
blink.test.mojom.VirtualAuthenticatorManagerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.test.mojom.VirtualAuthenticatorManagerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.test.mojom.VirtualAuthenticatorManagerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.test.mojom.VirtualAuthenticatorManagerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !blink.test.mojom.VirtualAuthenticatorOptions } options
   * @return {!Promise<{
        authenticator: !blink.test.mojom.VirtualAuthenticatorRemote,
   *  }>}
   */

  createAuthenticator(
      options) {
    return this.proxy.sendMessage(
        0,
        blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ResponseParamsSpec.$,
        [
          options
        ]);
  }

  
  /**
   * @return {!Promise<{
        authenticators: !Array<!blink.test.mojom.VirtualAuthenticatorRemote>,
   *  }>}
   */

  getAuthenticators() {
    return this.proxy.sendMessage(
        1,
        blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !string } id
   * @return {!Promise<{
        removed: !boolean,
   *  }>}
   */

  removeAuthenticator(
      id) {
    return this.proxy.sendMessage(
        2,
        blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParamsSpec.$,
        [
          id
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  clearAuthenticators() {
    return this.proxy.sendMessage(
        3,
        blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the VirtualAuthenticatorManager
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManagerReceiver = class {
  /**
   * @param {!blink.test.mojom.VirtualAuthenticatorManagerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.test.mojom.VirtualAuthenticatorManagerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.test.mojom.VirtualAuthenticatorManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.test.mojom.VirtualAuthenticatorManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ResponseParamsSpec.$,
        impl.createAuthenticator.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ResponseParamsSpec.$,
        impl.getAuthenticators.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParamsSpec.$,
        impl.removeAuthenticator.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ResponseParamsSpec.$,
        impl.clearAuthenticators.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.test.mojom.VirtualAuthenticatorManager = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.test.mojom.VirtualAuthenticatorManager";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.test.mojom.VirtualAuthenticatorManagerRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.test.mojom.VirtualAuthenticatorManagerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the VirtualAuthenticatorManager
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManagerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.test.mojom.VirtualAuthenticatorManagerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.test.mojom.VirtualAuthenticatorManagerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createAuthenticator =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ResponseParamsSpec.$,
        this.createAuthenticator.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getAuthenticators =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ResponseParamsSpec.$,
        this.getAuthenticators.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.removeAuthenticator =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParamsSpec.$,
        this.removeAuthenticator.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.clearAuthenticators =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ParamsSpec.$,
        blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ResponseParamsSpec.$,
        this.clearAuthenticators.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.RegisteredKeySpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_GetUniqueId_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_GetUniqueId_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_AddRegistration_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_AddRegistration_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_GetRegistrations_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_GetRegistrations_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_SetUserVerified_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticator_SetUserVerified_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorOptionsSpec.$,
    'VirtualAuthenticatorOptions',
    [
      mojo.internal.StructField(
        'protocol', 0,
        0,
        blink.test.mojom.ClientToAuthenticatorProtocolSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'ctap2Version', 4,
        0,
        blink.test.mojom.Ctap2VersionSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'transport', 8,
        0,
        blink.mojom.AuthenticatorTransportSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'attachment', 12,
        0,
        blink.mojom.AuthenticatorAttachmentSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'hasResidentKey', 16,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'hasUserVerification', 16,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isUserPresent', 16,
        2,
        mojo.internal.Bool,
        true,
        false /* nullable */),
      mojo.internal.StructField(
        'hasLargeBlob', 16,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'hasCredBlob', 16,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'hasMinPinLength', 16,
        5,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorOptions = class {
  constructor() {
    /** @export { !blink.test.mojom.ClientToAuthenticatorProtocol } */
    this.protocol;
    /** @export { !blink.test.mojom.Ctap2Version } */
    this.ctap2Version;
    /** @export { !blink.mojom.AuthenticatorTransport } */
    this.transport;
    /** @export { !blink.mojom.AuthenticatorAttachment } */
    this.attachment;
    /** @export { !boolean } */
    this.hasResidentKey;
    /** @export { !boolean } */
    this.hasUserVerification;
    /** @export { !boolean } */
    this.isUserPresent;
    /** @export { !boolean } */
    this.hasLargeBlob;
    /** @export { !boolean } */
    this.hasCredBlob;
    /** @export { !boolean } */
    this.hasMinPinLength;
  }
};




mojo.internal.Struct(
    blink.test.mojom.RegisteredKeySpec.$,
    'RegisteredKey',
    [
      mojo.internal.StructField(
        'keyHandle', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'rpId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'privateKey', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'counter', 24,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 40],]);





/** @record */
blink.test.mojom.RegisteredKey = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.keyHandle;
    /** @export { !string } */
    this.rpId;
    /** @export { !Array<!number> } */
    this.privateKey;
    /** @export { !number } */
    this.counter;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_GetUniqueId_ParamsSpec.$,
    'VirtualAuthenticator_GetUniqueId_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_GetUniqueId_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_GetUniqueId_ResponseParamsSpec.$,
    'VirtualAuthenticator_GetUniqueId_ResponseParams',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_GetUniqueId_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.id;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_AddRegistration_ParamsSpec.$,
    'VirtualAuthenticator_AddRegistration_Params',
    [
      mojo.internal.StructField(
        'key', 0,
        0,
        blink.test.mojom.RegisteredKeySpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_AddRegistration_Params = class {
  constructor() {
    /** @export { !blink.test.mojom.RegisteredKey } */
    this.key;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_AddRegistration_ResponseParamsSpec.$,
    'VirtualAuthenticator_AddRegistration_ResponseParams',
    [
      mojo.internal.StructField(
        'added', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_AddRegistration_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.added;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_GetRegistrations_ParamsSpec.$,
    'VirtualAuthenticator_GetRegistrations_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_GetRegistrations_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_GetRegistrations_ResponseParamsSpec.$,
    'VirtualAuthenticator_GetRegistrations_ResponseParams',
    [
      mojo.internal.StructField(
        'keys', 0,
        0,
        mojo.internal.Array(blink.test.mojom.RegisteredKeySpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_GetRegistrations_ResponseParams = class {
  constructor() {
    /** @export { !Array<!blink.test.mojom.RegisteredKey> } */
    this.keys;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ParamsSpec.$,
    'VirtualAuthenticator_RemoveRegistration_Params',
    [
      mojo.internal.StructField(
        'keyHandle', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_RemoveRegistration_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.keyHandle;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ResponseParamsSpec.$,
    'VirtualAuthenticator_RemoveRegistration_ResponseParams',
    [
      mojo.internal.StructField(
        'removed', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_RemoveRegistration_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.removed;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ParamsSpec.$,
    'VirtualAuthenticator_ClearRegistrations_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_ClearRegistrations_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ResponseParamsSpec.$,
    'VirtualAuthenticator_ClearRegistrations_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_ClearRegistrations_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ParamsSpec.$,
    'VirtualAuthenticator_GetLargeBlob_Params',
    [
      mojo.internal.StructField(
        'keyHandle', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_GetLargeBlob_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.keyHandle;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ResponseParamsSpec.$,
    'VirtualAuthenticator_GetLargeBlob_ResponseParams',
    [
      mojo.internal.StructField(
        'blob', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        true /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_GetLargeBlob_ResponseParams = class {
  constructor() {
    /** @export { (Array<!number>|undefined) } */
    this.blob;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ParamsSpec.$,
    'VirtualAuthenticator_SetLargeBlob_Params',
    [
      mojo.internal.StructField(
        'keyHandle', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'blob', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_SetLargeBlob_Params = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.keyHandle;
    /** @export { !Array<!number> } */
    this.blob;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ResponseParamsSpec.$,
    'VirtualAuthenticator_SetLargeBlob_ResponseParams',
    [
      mojo.internal.StructField(
        'set', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_SetLargeBlob_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.set;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_SetUserVerified_ParamsSpec.$,
    'VirtualAuthenticator_SetUserVerified_Params',
    [
      mojo.internal.StructField(
        'verified', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_SetUserVerified_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.verified;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticator_SetUserVerified_ResponseParamsSpec.$,
    'VirtualAuthenticator_SetUserVerified_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticator_SetUserVerified_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ParamsSpec.$,
    'VirtualAuthenticatorManager_CreateAuthenticator_Params',
    [
      mojo.internal.StructField(
        'options', 0,
        0,
        blink.test.mojom.VirtualAuthenticatorOptionsSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_Params = class {
  constructor() {
    /** @export { !blink.test.mojom.VirtualAuthenticatorOptions } */
    this.options;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ResponseParamsSpec.$,
    'VirtualAuthenticatorManager_CreateAuthenticator_ResponseParams',
    [
      mojo.internal.StructField(
        'authenticator', 0,
        0,
        mojo.internal.InterfaceProxy(blink.test.mojom.VirtualAuthenticatorRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_CreateAuthenticator_ResponseParams = class {
  constructor() {
    /** @export { !blink.test.mojom.VirtualAuthenticatorRemote } */
    this.authenticator;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ParamsSpec.$,
    'VirtualAuthenticatorManager_GetAuthenticators_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ResponseParamsSpec.$,
    'VirtualAuthenticatorManager_GetAuthenticators_ResponseParams',
    [
      mojo.internal.StructField(
        'authenticators', 0,
        0,
        mojo.internal.Array(mojo.internal.InterfaceProxy(blink.test.mojom.VirtualAuthenticatorRemote), false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_GetAuthenticators_ResponseParams = class {
  constructor() {
    /** @export { !Array<!blink.test.mojom.VirtualAuthenticatorRemote> } */
    this.authenticators;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ParamsSpec.$,
    'VirtualAuthenticatorManager_RemoveAuthenticator_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_Params = class {
  constructor() {
    /** @export { !string } */
    this.id;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParamsSpec.$,
    'VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParams',
    [
      mojo.internal.StructField(
        'removed', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_RemoveAuthenticator_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.removed;
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ParamsSpec.$,
    'VirtualAuthenticatorManager_ClearAuthenticators_Params',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ResponseParamsSpec.$,
    'VirtualAuthenticatorManager_ClearAuthenticators_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
blink.test.mojom.VirtualAuthenticatorManager_ClearAuthenticators_ResponseParams = class {
  constructor() {
  }
};


