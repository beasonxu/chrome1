// third_party/blink/public/mojom/permissions/permission.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_PERMISSION_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_PERMISSION_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionObserver_OnPermissionStatusChange_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PermissionObserver_OnPermissionStatusChange_Params_Data>;

  PermissionObserver_OnPermissionStatusChange_Params_Data();
  ~PermissionObserver_OnPermissionStatusChange_Params_Data() = delete;
};
static_assert(sizeof(PermissionObserver_OnPermissionStatusChange_Params_Data) == 16,
              "Bad sizeof(PermissionObserver_OnPermissionStatusChange_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_HasPermission_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PermissionDescriptor_Data> permission;

 private:
  friend class mojo::internal::MessageFragment<PermissionService_HasPermission_Params_Data>;

  PermissionService_HasPermission_Params_Data();
  ~PermissionService_HasPermission_Params_Data() = delete;
};
static_assert(sizeof(PermissionService_HasPermission_Params_Data) == 16,
              "Bad sizeof(PermissionService_HasPermission_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_HasPermission_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PermissionService_HasPermission_ResponseParams_Data>;

  PermissionService_HasPermission_ResponseParams_Data();
  ~PermissionService_HasPermission_ResponseParams_Data() = delete;
};
static_assert(sizeof(PermissionService_HasPermission_ResponseParams_Data) == 16,
              "Bad sizeof(PermissionService_HasPermission_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_RequestPermission_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PermissionDescriptor_Data> permission;
  uint8_t user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PermissionService_RequestPermission_Params_Data>;

  PermissionService_RequestPermission_Params_Data();
  ~PermissionService_RequestPermission_Params_Data() = delete;
};
static_assert(sizeof(PermissionService_RequestPermission_Params_Data) == 24,
              "Bad sizeof(PermissionService_RequestPermission_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_RequestPermission_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PermissionService_RequestPermission_ResponseParams_Data>;

  PermissionService_RequestPermission_ResponseParams_Data();
  ~PermissionService_RequestPermission_ResponseParams_Data() = delete;
};
static_assert(sizeof(PermissionService_RequestPermission_ResponseParams_Data) == 16,
              "Bad sizeof(PermissionService_RequestPermission_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_RequestPermissions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PermissionDescriptor_Data>>> permission;
  uint8_t user_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PermissionService_RequestPermissions_Params_Data>;

  PermissionService_RequestPermissions_Params_Data();
  ~PermissionService_RequestPermissions_Params_Data() = delete;
};
static_assert(sizeof(PermissionService_RequestPermissions_Params_Data) == 24,
              "Bad sizeof(PermissionService_RequestPermissions_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_RequestPermissions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> statuses;

 private:
  friend class mojo::internal::MessageFragment<PermissionService_RequestPermissions_ResponseParams_Data>;

  PermissionService_RequestPermissions_ResponseParams_Data();
  ~PermissionService_RequestPermissions_ResponseParams_Data() = delete;
};
static_assert(sizeof(PermissionService_RequestPermissions_ResponseParams_Data) == 16,
              "Bad sizeof(PermissionService_RequestPermissions_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_RevokePermission_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PermissionDescriptor_Data> permission;

 private:
  friend class mojo::internal::MessageFragment<PermissionService_RevokePermission_Params_Data>;

  PermissionService_RevokePermission_Params_Data();
  ~PermissionService_RevokePermission_Params_Data() = delete;
};
static_assert(sizeof(PermissionService_RevokePermission_Params_Data) == 16,
              "Bad sizeof(PermissionService_RevokePermission_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_RevokePermission_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PermissionService_RevokePermission_ResponseParams_Data>;

  PermissionService_RevokePermission_ResponseParams_Data();
  ~PermissionService_RevokePermission_ResponseParams_Data() = delete;
};
static_assert(sizeof(PermissionService_RevokePermission_ResponseParams_Data) == 16,
              "Bad sizeof(PermissionService_RevokePermission_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PermissionService_AddPermissionObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PermissionDescriptor_Data> permission;
  int32_t last_known_status;
  mojo::internal::Interface_Data observer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PermissionService_AddPermissionObserver_Params_Data>;

  PermissionService_AddPermissionObserver_Params_Data();
  ~PermissionService_AddPermissionObserver_Params_Data() = delete;
};
static_assert(sizeof(PermissionService_AddPermissionObserver_Params_Data) == 32,
              "Bad sizeof(PermissionService_AddPermissionObserver_Params_Data)");

}  // namespace internal


class PermissionObserver_OnPermissionStatusChange_ParamsDataView {
 public:
  PermissionObserver_OnPermissionStatusChange_ParamsDataView() = default;

  PermissionObserver_OnPermissionStatusChange_ParamsDataView(
      internal::PermissionObserver_OnPermissionStatusChange_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::PermissionObserver_OnPermissionStatusChange_Params_Data* data_ = nullptr;
};



class PermissionService_HasPermission_ParamsDataView {
 public:
  PermissionService_HasPermission_ParamsDataView() = default;

  PermissionService_HasPermission_ParamsDataView(
      internal::PermissionService_HasPermission_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPermissionDataView(
      PermissionDescriptorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPermission(UserType* output) {
    
    auto* pointer = data_->permission.Get();
    return mojo::internal::Deserialize<::blink::mojom::PermissionDescriptorDataView>(
        pointer, output, message_);
  }
 private:
  internal::PermissionService_HasPermission_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PermissionService_HasPermission_ResponseParamsDataView {
 public:
  PermissionService_HasPermission_ResponseParamsDataView() = default;

  PermissionService_HasPermission_ResponseParamsDataView(
      internal::PermissionService_HasPermission_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::PermissionService_HasPermission_ResponseParams_Data* data_ = nullptr;
};



class PermissionService_RequestPermission_ParamsDataView {
 public:
  PermissionService_RequestPermission_ParamsDataView() = default;

  PermissionService_RequestPermission_ParamsDataView(
      internal::PermissionService_RequestPermission_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPermissionDataView(
      PermissionDescriptorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPermission(UserType* output) {
    
    auto* pointer = data_->permission.Get();
    return mojo::internal::Deserialize<::blink::mojom::PermissionDescriptorDataView>(
        pointer, output, message_);
  }
  bool user_gesture() const {
    return data_->user_gesture;
  }
 private:
  internal::PermissionService_RequestPermission_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PermissionService_RequestPermission_ResponseParamsDataView {
 public:
  PermissionService_RequestPermission_ResponseParamsDataView() = default;

  PermissionService_RequestPermission_ResponseParamsDataView(
      internal::PermissionService_RequestPermission_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::PermissionService_RequestPermission_ResponseParams_Data* data_ = nullptr;
};



class PermissionService_RequestPermissions_ParamsDataView {
 public:
  PermissionService_RequestPermissions_ParamsDataView() = default;

  PermissionService_RequestPermissions_ParamsDataView(
      internal::PermissionService_RequestPermissions_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPermissionDataView(
      mojo::ArrayDataView<PermissionDescriptorDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPermission(UserType* output) {
    
    auto* pointer = data_->permission.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::PermissionDescriptorDataView>>(
        pointer, output, message_);
  }
  bool user_gesture() const {
    return data_->user_gesture;
  }
 private:
  internal::PermissionService_RequestPermissions_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PermissionService_RequestPermissions_ResponseParamsDataView {
 public:
  PermissionService_RequestPermissions_ResponseParamsDataView() = default;

  PermissionService_RequestPermissions_ResponseParamsDataView(
      internal::PermissionService_RequestPermissions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatusesDataView(
      mojo::ArrayDataView<::blink::mojom::PermissionStatus>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStatuses(UserType* output) {
    
    auto* pointer = data_->statuses.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::PermissionStatus>>(
        pointer, output, message_);
  }
 private:
  internal::PermissionService_RequestPermissions_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PermissionService_RevokePermission_ParamsDataView {
 public:
  PermissionService_RevokePermission_ParamsDataView() = default;

  PermissionService_RevokePermission_ParamsDataView(
      internal::PermissionService_RevokePermission_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPermissionDataView(
      PermissionDescriptorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPermission(UserType* output) {
    
    auto* pointer = data_->permission.Get();
    return mojo::internal::Deserialize<::blink::mojom::PermissionDescriptorDataView>(
        pointer, output, message_);
  }
 private:
  internal::PermissionService_RevokePermission_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PermissionService_RevokePermission_ResponseParamsDataView {
 public:
  PermissionService_RevokePermission_ResponseParamsDataView() = default;

  PermissionService_RevokePermission_ResponseParamsDataView(
      internal::PermissionService_RevokePermission_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->status));
  }
 private:
  internal::PermissionService_RevokePermission_ResponseParams_Data* data_ = nullptr;
};



class PermissionService_AddPermissionObserver_ParamsDataView {
 public:
  PermissionService_AddPermissionObserver_ParamsDataView() = default;

  PermissionService_AddPermissionObserver_ParamsDataView(
      internal::PermissionService_AddPermissionObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPermissionDataView(
      PermissionDescriptorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPermission(UserType* output) {
    
    auto* pointer = data_->permission.Get();
    return mojo::internal::Deserialize<::blink::mojom::PermissionDescriptorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadLastKnownStatus(UserType* output) const {
    auto data_value = data_->last_known_status;
    return mojo::internal::Deserialize<::blink::mojom::PermissionStatus>(
        data_value, output);
  }
  ::blink::mojom::PermissionStatus last_known_status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PermissionStatus>(data_->last_known_status));
  }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PermissionObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PermissionService_AddPermissionObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void PermissionService_HasPermission_ParamsDataView::GetPermissionDataView(
    PermissionDescriptorDataView* output) {
  auto pointer = data_->permission.Get();
  *output = PermissionDescriptorDataView(pointer, message_);
}




inline void PermissionService_RequestPermission_ParamsDataView::GetPermissionDataView(
    PermissionDescriptorDataView* output) {
  auto pointer = data_->permission.Get();
  *output = PermissionDescriptorDataView(pointer, message_);
}




inline void PermissionService_RequestPermissions_ParamsDataView::GetPermissionDataView(
    mojo::ArrayDataView<PermissionDescriptorDataView>* output) {
  auto pointer = data_->permission.Get();
  *output = mojo::ArrayDataView<PermissionDescriptorDataView>(pointer, message_);
}


inline void PermissionService_RequestPermissions_ResponseParamsDataView::GetStatusesDataView(
    mojo::ArrayDataView<::blink::mojom::PermissionStatus>* output) {
  auto pointer = data_->statuses.Get();
  *output = mojo::ArrayDataView<::blink::mojom::PermissionStatus>(pointer, message_);
}


inline void PermissionService_RevokePermission_ParamsDataView::GetPermissionDataView(
    PermissionDescriptorDataView* output) {
  auto pointer = data_->permission.Get();
  *output = PermissionDescriptorDataView(pointer, message_);
}




inline void PermissionService_AddPermissionObserver_ParamsDataView::GetPermissionDataView(
    PermissionDescriptorDataView* output) {
  auto pointer = data_->permission.Get();
  *output = PermissionDescriptorDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_PERMISSION_MOJOM_PARAMS_DATA_H_