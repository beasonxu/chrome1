// third_party/blink/public/mojom/permissions_policy/policy_value.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-params-data.h"
#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/permissions_policy/policy_value.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_POLICY_VALUE_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PERMISSIONS_POLICY_POLICY_VALUE_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
PolicyValue::PolicyValue() : tag_(Tag::kNullValue) {
  data_.null_value = bool();
}

PolicyValue::~PolicyValue() {
  DestroyActive();
}


void PolicyValue::set_null_value(
    bool null_value) {
  if (tag_ != Tag::kNullValue) {
    DestroyActive();
    tag_ = Tag::kNullValue;
  }
  data_.null_value = null_value;
}
void PolicyValue::set_bool_value(
    bool bool_value) {
  if (tag_ != Tag::kBoolValue) {
    DestroyActive();
    tag_ = Tag::kBoolValue;
  }
  data_.bool_value = bool_value;
}
void PolicyValue::set_dec_double_value(
    double dec_double_value) {
  if (tag_ != Tag::kDecDoubleValue) {
    DestroyActive();
    tag_ = Tag::kDecDoubleValue;
  }
  data_.dec_double_value = dec_double_value;
}
void PolicyValue::set_enum_value(
    int32_t enum_value) {
  if (tag_ != Tag::kEnumValue) {
    DestroyActive();
    tag_ = Tag::kEnumValue;
  }
  data_.enum_value = enum_value;
}

void PolicyValue::DestroyActive() {
  switch (tag_) {

    case Tag::kNullValue:

      break;
    case Tag::kBoolValue:

      break;
    case Tag::kDecDoubleValue:

      break;
    case Tag::kEnumValue:

      break;
  }
}
size_t PolicyValue::Hash(size_t seed) const {
  seed = mojo::internal::HashCombine(seed, static_cast<uint32_t>(tag_));
  switch (tag_) {

    case Tag::kNullValue:
      return mojo::internal::WTFHash(seed, data_.null_value);
    case Tag::kBoolValue:
      return mojo::internal::WTFHash(seed, data_.bool_value);
    case Tag::kDecDoubleValue:
      return mojo::internal::WTFHash(seed, data_.dec_double_value);
    case Tag::kEnumValue:
      return mojo::internal::WTFHash(seed, data_.enum_value);
    default:
      NOTREACHED();
      return seed;
  }
}

bool PolicyValue::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {

// static
bool UnionTraits<::blink::mojom::blink::PolicyValue::DataView, ::blink::mojom::blink::PolicyValuePtr>::Read(
    ::blink::mojom::blink::PolicyValue::DataView input,
    ::blink::mojom::blink::PolicyValuePtr* output) {
  using UnionType = ::blink::mojom::blink::PolicyValue;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kNullValue: {
      *output = UnionType::NewNullValue(input.null_value());
      break;
    }
    case Tag::kBoolValue: {
      *output = UnionType::NewBoolValue(input.bool_value());
      break;
    }
    case Tag::kDecDoubleValue: {
      *output = UnionType::NewDecDoubleValue(input.dec_double_value());
      break;
    }
    case Tag::kEnumValue: {
      *output = UnionType::NewEnumValue(input.enum_value());
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif