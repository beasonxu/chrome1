// third_party/blink/public/mojom/reporting/reporting.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_REPORTING_REPORTING_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_REPORTING_REPORTING_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ReportingServiceProxy_QueueInterventionReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> source_file;
  int32_t line_number;
  int32_t column_number;

 private:
  friend class mojo::internal::MessageFragment<ReportingServiceProxy_QueueInterventionReport_Params_Data>;

  ReportingServiceProxy_QueueInterventionReport_Params_Data();
  ~ReportingServiceProxy_QueueInterventionReport_Params_Data() = delete;
};
static_assert(sizeof(ReportingServiceProxy_QueueInterventionReport_Params_Data) == 48,
              "Bad sizeof(ReportingServiceProxy_QueueInterventionReport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ReportingServiceProxy_QueueDeprecationReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> anticipatedRemoval;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> source_file;
  int32_t line_number;
  int32_t column_number;

 private:
  friend class mojo::internal::MessageFragment<ReportingServiceProxy_QueueDeprecationReport_Params_Data>;

  ReportingServiceProxy_QueueDeprecationReport_Params_Data();
  ~ReportingServiceProxy_QueueDeprecationReport_Params_Data() = delete;
};
static_assert(sizeof(ReportingServiceProxy_QueueDeprecationReport_Params_Data) == 56,
              "Bad sizeof(ReportingServiceProxy_QueueDeprecationReport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ReportingServiceProxy_QueueCspViolationReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> group;
  mojo::internal::Pointer<mojo::internal::String_Data> document_url;
  mojo::internal::Pointer<mojo::internal::String_Data> referrer;
  mojo::internal::Pointer<mojo::internal::String_Data> blocked_url;
  mojo::internal::Pointer<mojo::internal::String_Data> effective_directive;
  mojo::internal::Pointer<mojo::internal::String_Data> original_policy;
  mojo::internal::Pointer<mojo::internal::String_Data> source_file;
  mojo::internal::Pointer<mojo::internal::String_Data> script_sample;
  mojo::internal::Pointer<mojo::internal::String_Data> disposition;
  uint16_t status_code;
  uint8_t pad10_[2];
  int32_t line_number;
  int32_t column_number;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ReportingServiceProxy_QueueCspViolationReport_Params_Data>;

  ReportingServiceProxy_QueueCspViolationReport_Params_Data();
  ~ReportingServiceProxy_QueueCspViolationReport_Params_Data() = delete;
};
static_assert(sizeof(ReportingServiceProxy_QueueCspViolationReport_Params_Data) == 104,
              "Bad sizeof(ReportingServiceProxy_QueueCspViolationReport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> policy_id;
  mojo::internal::Pointer<mojo::internal::String_Data> disposition;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> source_file;
  int32_t line_number;
  int32_t column_number;

 private:
  friend class mojo::internal::MessageFragment<ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data>;

  ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data();
  ~ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data() = delete;
};
static_assert(sizeof(ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data) == 56,
              "Bad sizeof(ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> group;
  mojo::internal::Pointer<mojo::internal::String_Data> policy_id;
  mojo::internal::Pointer<mojo::internal::String_Data> disposition;
  mojo::internal::Pointer<mojo::internal::String_Data> message;
  mojo::internal::Pointer<mojo::internal::String_Data> source_file;
  int32_t line_number;
  int32_t column_number;

 private:
  friend class mojo::internal::MessageFragment<ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data>;

  ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data();
  ~ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data() = delete;
};
static_assert(sizeof(ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data) == 64,
              "Bad sizeof(ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data)");

}  // namespace internal


class ReportingServiceProxy_QueueInterventionReport_ParamsDataView {
 public:
  ReportingServiceProxy_QueueInterventionReport_ParamsDataView() = default;

  ReportingServiceProxy_QueueInterventionReport_ParamsDataView(
      internal::ReportingServiceProxy_QueueInterventionReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSourceFileDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `source_file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFile` instead "
    "of `ReadSourceFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_file.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t line_number() const {
    return data_->line_number;
  }
  int32_t column_number() const {
    return data_->column_number;
  }
 private:
  internal::ReportingServiceProxy_QueueInterventionReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ReportingServiceProxy_QueueDeprecationReport_ParamsDataView {
 public:
  ReportingServiceProxy_QueueDeprecationReport_ParamsDataView() = default;

  ReportingServiceProxy_QueueDeprecationReport_ParamsDataView(
      internal::ReportingServiceProxy_QueueDeprecationReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetAnticipatedRemovalDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAnticipatedRemoval(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::TimeDataView, UserType>(),
    "Attempting to read the optional `anticipatedRemoval` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAnticipatedRemoval` instead "
    "of `ReadAnticipatedRemoval if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->anticipatedRemoval.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSourceFileDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `source_file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFile` instead "
    "of `ReadSourceFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_file.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t line_number() const {
    return data_->line_number;
  }
  int32_t column_number() const {
    return data_->column_number;
  }
 private:
  internal::ReportingServiceProxy_QueueDeprecationReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ReportingServiceProxy_QueueCspViolationReport_ParamsDataView {
 public:
  ReportingServiceProxy_QueueCspViolationReport_ParamsDataView() = default;

  ReportingServiceProxy_QueueCspViolationReport_ParamsDataView(
      internal::ReportingServiceProxy_QueueCspViolationReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetGroupDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGroup(UserType* output) {
    
    auto* pointer = data_->group.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDocumentUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDocumentUrl(UserType* output) {
    
    auto* pointer = data_->document_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetReferrerDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReferrer(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `referrer` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReferrer` instead "
    "of `ReadReferrer if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->referrer.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetBlockedUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBlockedUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `blocked_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBlockedUrl` instead "
    "of `ReadBlockedUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->blocked_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetEffectiveDirectiveDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEffectiveDirective(UserType* output) {
    
    auto* pointer = data_->effective_directive.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetOriginalPolicyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOriginalPolicy(UserType* output) {
    
    auto* pointer = data_->original_policy.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSourceFileDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `source_file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFile` instead "
    "of `ReadSourceFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_file.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetScriptSampleDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScriptSample(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `script_sample` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadScriptSample` instead "
    "of `ReadScriptSample if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->script_sample.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDispositionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDisposition(UserType* output) {
    
    auto* pointer = data_->disposition.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  uint16_t status_code() const {
    return data_->status_code;
  }
  int32_t line_number() const {
    return data_->line_number;
  }
  int32_t column_number() const {
    return data_->column_number;
  }
 private:
  internal::ReportingServiceProxy_QueueCspViolationReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView {
 public:
  ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView() = default;

  ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView(
      internal::ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetPolicyIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyId(UserType* output) {
    
    auto* pointer = data_->policy_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDispositionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDisposition(UserType* output) {
    
    auto* pointer = data_->disposition.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `message` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadMessage` instead "
    "of `ReadMessage if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSourceFileDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `source_file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFile` instead "
    "of `ReadSourceFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_file.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t line_number() const {
    return data_->line_number;
  }
  int32_t column_number() const {
    return data_->column_number;
  }
 private:
  internal::ReportingServiceProxy_QueuePermissionsPolicyViolationReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView {
 public:
  ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView() = default;

  ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView(
      internal::ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetGroupDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGroup(UserType* output) {
    
    auto* pointer = data_->group.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPolicyIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyId(UserType* output) {
    
    auto* pointer = data_->policy_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDispositionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDisposition(UserType* output) {
    
    auto* pointer = data_->disposition.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `message` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadMessage` instead "
    "of `ReadMessage if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSourceFileDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `source_file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFile` instead "
    "of `ReadSourceFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_file.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  int32_t line_number() const {
    return data_->line_number;
  }
  int32_t column_number() const {
    return data_->column_number;
  }
 private:
  internal::ReportingServiceProxy_QueueDocumentPolicyViolationReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void ReportingServiceProxy_QueueInterventionReport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueInterventionReport_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueInterventionReport_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueInterventionReport_ParamsDataView::GetSourceFileDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_file.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ReportingServiceProxy_QueueDeprecationReport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDeprecationReport_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDeprecationReport_ParamsDataView::GetAnticipatedRemovalDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->anticipatedRemoval.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDeprecationReport_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDeprecationReport_ParamsDataView::GetSourceFileDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_file.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetGroupDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->group.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetDocumentUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->document_url.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetReferrerDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->referrer.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetBlockedUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->blocked_url.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetEffectiveDirectiveDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->effective_directive.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetOriginalPolicyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->original_policy.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetSourceFileDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_file.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetScriptSampleDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->script_sample.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueCspViolationReport_ParamsDataView::GetDispositionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->disposition.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView::GetPolicyIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->policy_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView::GetDispositionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->disposition.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueuePermissionsPolicyViolationReport_ParamsDataView::GetSourceFileDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_file.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView::GetGroupDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->group.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView::GetPolicyIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->policy_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView::GetDispositionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->disposition.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ReportingServiceProxy_QueueDocumentPolicyViolationReport_ParamsDataView::GetSourceFileDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->source_file.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_REPORTING_REPORTING_MOJOM_PARAMS_DATA_H_