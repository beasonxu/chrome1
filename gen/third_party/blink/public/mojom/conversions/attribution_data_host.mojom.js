// third_party/blink/public/mojom/conversions/attribution_data_host.mojom.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

'use strict';

(function() {
  var mojomId = 'third_party/blink/public/mojom/conversions/attribution_data_host.mojom';
  if (mojo.internal.isMojomLoaded(mojomId)) {
    console.warn('The following mojom is loaded multiple times: ' + mojomId);
    return;
  }
  mojo.internal.markMojomLoaded(mojomId);
  var bindings = mojo;
  var associatedBindings = mojo;
  var codec = mojo.internal;
  var validator = mojo.internal;

  var exports = mojo.internal.exposeNamespace('blink.mojom');
  var int128$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/int128.mojom', '../../../../../mojo/public/mojom/base/int128.mojom.js');
  }
  var time$ =
      mojo.internal.exposeNamespace('mojoBase.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'mojo/public/mojom/base/time.mojom', '../../../../../mojo/public/mojom/base/time.mojom.js');
  }
  var origin$ =
      mojo.internal.exposeNamespace('url.mojom');
  if (mojo.config.autoLoadMojomDeps) {
    mojo.internal.loadMojomIfNecessary(
        'url/mojom/origin.mojom', '../../../../../url/mojom/origin.mojom.js');
  }



  function AttributionDebugKey(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionDebugKey.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  AttributionDebugKey.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionDebugKey.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AttributionDebugKey.encodedSize = codec.kStructHeaderSize + 8;

  AttributionDebugKey.decode = function(decoder) {
    var packed;
    var val = new AttributionDebugKey();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  AttributionDebugKey.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionDebugKey.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function AttributionFilterData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionFilterData.prototype.initDefaults_ = function() {
    this.filterValues = null;
  };
  AttributionFilterData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionFilterData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionFilterData.filterValues
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 0, false, codec.String, new codec.ArrayOf(codec.String), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionFilterData.encodedSize = codec.kStructHeaderSize + 8;

  AttributionFilterData.decode = function(decoder) {
    var packed;
    var val = new AttributionFilterData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.filterValues =
        decoder.decodeMapPointer(codec.String, new codec.ArrayOf(codec.String));
    return val;
  };

  AttributionFilterData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionFilterData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeMapPointer(codec.String, new codec.ArrayOf(codec.String), val.filterValues);
  };
  function AttributionAggregatableTriggerData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionAggregatableTriggerData.prototype.initDefaults_ = function() {
    this.keyPiece = null;
    this.sourceKeys = null;
    this.filters = null;
    this.notFilters = null;
  };
  AttributionAggregatableTriggerData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionAggregatableTriggerData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 40}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionAggregatableTriggerData.keyPiece
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, int128$.Uint128, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionAggregatableTriggerData.sourceKeys
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, codec.String, false, [0, 0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionAggregatableTriggerData.filters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionAggregatableTriggerData.notFilters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionAggregatableTriggerData.encodedSize = codec.kStructHeaderSize + 32;

  AttributionAggregatableTriggerData.decode = function(decoder) {
    var packed;
    var val = new AttributionAggregatableTriggerData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.keyPiece =
        decoder.decodeStructPointer(int128$.Uint128);
    val.sourceKeys =
        decoder.decodeArrayPointer(codec.String);
    val.filters =
        decoder.decodeStructPointer(AttributionFilterData);
    val.notFilters =
        decoder.decodeStructPointer(AttributionFilterData);
    return val;
  };

  AttributionAggregatableTriggerData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionAggregatableTriggerData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(int128$.Uint128, val.keyPiece);
    encoder.encodeArrayPointer(codec.String, val.sourceKeys);
    encoder.encodeStructPointer(AttributionFilterData, val.filters);
    encoder.encodeStructPointer(AttributionFilterData, val.notFilters);
  };
  function AttributionSourceData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionSourceData.prototype.initDefaults_ = function() {
    this.destination = null;
    this.reportingOrigin = null;
    this.sourceEventId = 0;
    this.expiry = null;
    this.priority = 0;
    this.debugKey = null;
    this.filterData = null;
    this.aggregationKeys = null;
  };
  AttributionSourceData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionSourceData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 72}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionSourceData.destination
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionSourceData.reportingOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 8, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AttributionSourceData.expiry
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, time$.TimeDelta, true);
    if (err !== validator.validationError.NONE)
        return err;



    // validate AttributionSourceData.debugKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 40, AttributionDebugKey, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionSourceData.filterData
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionSourceData.aggregationKeys
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 56, false, codec.String, new codec.PointerTo(int128$.Uint128), false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionSourceData.encodedSize = codec.kStructHeaderSize + 64;

  AttributionSourceData.decode = function(decoder) {
    var packed;
    var val = new AttributionSourceData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.destination =
        decoder.decodeStructPointer(origin$.Origin);
    val.reportingOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.sourceEventId =
        decoder.decodeStruct(codec.Uint64);
    val.expiry =
        decoder.decodeStructPointer(time$.TimeDelta);
    val.priority =
        decoder.decodeStruct(codec.Int64);
    val.debugKey =
        decoder.decodeStructPointer(AttributionDebugKey);
    val.filterData =
        decoder.decodeStructPointer(AttributionFilterData);
    val.aggregationKeys =
        decoder.decodeMapPointer(codec.String, new codec.PointerTo(int128$.Uint128));
    return val;
  };

  AttributionSourceData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionSourceData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.destination);
    encoder.encodeStructPointer(origin$.Origin, val.reportingOrigin);
    encoder.encodeStruct(codec.Uint64, val.sourceEventId);
    encoder.encodeStructPointer(time$.TimeDelta, val.expiry);
    encoder.encodeStruct(codec.Int64, val.priority);
    encoder.encodeStructPointer(AttributionDebugKey, val.debugKey);
    encoder.encodeStructPointer(AttributionFilterData, val.filterData);
    encoder.encodeMapPointer(codec.String, new codec.PointerTo(int128$.Uint128), val.aggregationKeys);
  };
  function AttributionTriggerDedupKey(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionTriggerDedupKey.prototype.initDefaults_ = function() {
    this.value = 0;
  };
  AttributionTriggerDedupKey.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionTriggerDedupKey.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    return validator.validationError.NONE;
  };

  AttributionTriggerDedupKey.encodedSize = codec.kStructHeaderSize + 8;

  AttributionTriggerDedupKey.decode = function(decoder) {
    var packed;
    var val = new AttributionTriggerDedupKey();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.value =
        decoder.decodeStruct(codec.Uint64);
    return val;
  };

  AttributionTriggerDedupKey.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionTriggerDedupKey.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.value);
  };
  function EventTriggerData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  EventTriggerData.prototype.initDefaults_ = function() {
    this.data = 0;
    this.priority = 0;
    this.dedupKey = null;
    this.filters = null;
    this.notFilters = null;
  };
  EventTriggerData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  EventTriggerData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 48}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;




    // validate EventTriggerData.dedupKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, AttributionTriggerDedupKey, true);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EventTriggerData.filters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate EventTriggerData.notFilters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 32, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  EventTriggerData.encodedSize = codec.kStructHeaderSize + 40;

  EventTriggerData.decode = function(decoder) {
    var packed;
    var val = new EventTriggerData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStruct(codec.Uint64);
    val.priority =
        decoder.decodeStruct(codec.Int64);
    val.dedupKey =
        decoder.decodeStructPointer(AttributionTriggerDedupKey);
    val.filters =
        decoder.decodeStructPointer(AttributionFilterData);
    val.notFilters =
        decoder.decodeStructPointer(AttributionFilterData);
    return val;
  };

  EventTriggerData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(EventTriggerData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStruct(codec.Uint64, val.data);
    encoder.encodeStruct(codec.Int64, val.priority);
    encoder.encodeStructPointer(AttributionTriggerDedupKey, val.dedupKey);
    encoder.encodeStructPointer(AttributionFilterData, val.filters);
    encoder.encodeStructPointer(AttributionFilterData, val.notFilters);
  };
  function AttributionTriggerData(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionTriggerData.prototype.initDefaults_ = function() {
    this.reportingOrigin = null;
    this.eventTriggers = null;
    this.filters = null;
    this.notFilters = null;
    this.aggregatableTriggerData = null;
    this.aggregatableValues = null;
    this.debugKey = null;
  };
  AttributionTriggerData.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionTriggerData.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 64}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.reportingOrigin
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, origin$.Origin, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.eventTriggers
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 8, 8, new codec.PointerTo(EventTriggerData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.filters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 16, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.notFilters
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 24, AttributionFilterData, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.aggregatableTriggerData
    err = messageValidator.validateArrayPointer(offset + codec.kStructHeaderSize + 32, 8, new codec.PointerTo(AttributionAggregatableTriggerData), false, [0], 0);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.aggregatableValues
    err = messageValidator.validateMapPointer(offset + codec.kStructHeaderSize + 40, false, codec.String, codec.Uint32, false);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionTriggerData.debugKey
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 48, AttributionDebugKey, true);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionTriggerData.encodedSize = codec.kStructHeaderSize + 56;

  AttributionTriggerData.decode = function(decoder) {
    var packed;
    var val = new AttributionTriggerData();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.reportingOrigin =
        decoder.decodeStructPointer(origin$.Origin);
    val.eventTriggers =
        decoder.decodeArrayPointer(new codec.PointerTo(EventTriggerData));
    val.filters =
        decoder.decodeStructPointer(AttributionFilterData);
    val.notFilters =
        decoder.decodeStructPointer(AttributionFilterData);
    val.aggregatableTriggerData =
        decoder.decodeArrayPointer(new codec.PointerTo(AttributionAggregatableTriggerData));
    val.aggregatableValues =
        decoder.decodeMapPointer(codec.String, codec.Uint32);
    val.debugKey =
        decoder.decodeStructPointer(AttributionDebugKey);
    return val;
  };

  AttributionTriggerData.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionTriggerData.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(origin$.Origin, val.reportingOrigin);
    encoder.encodeArrayPointer(new codec.PointerTo(EventTriggerData), val.eventTriggers);
    encoder.encodeStructPointer(AttributionFilterData, val.filters);
    encoder.encodeStructPointer(AttributionFilterData, val.notFilters);
    encoder.encodeArrayPointer(new codec.PointerTo(AttributionAggregatableTriggerData), val.aggregatableTriggerData);
    encoder.encodeMapPointer(codec.String, codec.Uint32, val.aggregatableValues);
    encoder.encodeStructPointer(AttributionDebugKey, val.debugKey);
  };
  function AttributionDataHost_SourceDataAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionDataHost_SourceDataAvailable_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  AttributionDataHost_SourceDataAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionDataHost_SourceDataAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_SourceDataAvailable_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AttributionSourceData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionDataHost_SourceDataAvailable_Params.encodedSize = codec.kStructHeaderSize + 8;

  AttributionDataHost_SourceDataAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new AttributionDataHost_SourceDataAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(AttributionSourceData);
    return val;
  };

  AttributionDataHost_SourceDataAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionDataHost_SourceDataAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AttributionSourceData, val.data);
  };
  function AttributionDataHost_TriggerDataAvailable_Params(values) {
    this.initDefaults_();
    this.initFields_(values);
  }


  AttributionDataHost_TriggerDataAvailable_Params.prototype.initDefaults_ = function() {
    this.data = null;
  };
  AttributionDataHost_TriggerDataAvailable_Params.prototype.initFields_ = function(fields) {
    for(var field in fields) {
        if (this.hasOwnProperty(field))
          this[field] = fields[field];
    }
  };

  AttributionDataHost_TriggerDataAvailable_Params.validate = function(messageValidator, offset) {
    var err;
    err = messageValidator.validateStructHeader(offset, codec.kStructHeaderSize);
    if (err !== validator.validationError.NONE)
        return err;

    var kVersionSizes = [
      {version: 0, numBytes: 16}
    ];
    err = messageValidator.validateStructVersion(offset, kVersionSizes);
    if (err !== validator.validationError.NONE)
        return err;


    // validate AttributionDataHost_TriggerDataAvailable_Params.data
    err = messageValidator.validateStructPointer(offset + codec.kStructHeaderSize + 0, AttributionTriggerData, false);
    if (err !== validator.validationError.NONE)
        return err;

    return validator.validationError.NONE;
  };

  AttributionDataHost_TriggerDataAvailable_Params.encodedSize = codec.kStructHeaderSize + 8;

  AttributionDataHost_TriggerDataAvailable_Params.decode = function(decoder) {
    var packed;
    var val = new AttributionDataHost_TriggerDataAvailable_Params();
    var numberOfBytes = decoder.readUint32();
    var version = decoder.readUint32();
    val.data =
        decoder.decodeStructPointer(AttributionTriggerData);
    return val;
  };

  AttributionDataHost_TriggerDataAvailable_Params.encode = function(encoder, val) {
    var packed;
    encoder.writeUint32(AttributionDataHost_TriggerDataAvailable_Params.encodedSize);
    encoder.writeUint32(0);
    encoder.encodeStructPointer(AttributionTriggerData, val.data);
  };
  var kAttributionDataHost_SourceDataAvailable_Name = 0;
  var kAttributionDataHost_TriggerDataAvailable_Name = 1;

  function AttributionDataHostPtr(handleOrPtrInfo) {
    this.ptr = new bindings.InterfacePtrController(AttributionDataHost,
                                                   handleOrPtrInfo);
  }

  function AttributionDataHostAssociatedPtr(associatedInterfacePtrInfo) {
    this.ptr = new associatedBindings.AssociatedInterfacePtrController(
        AttributionDataHost, associatedInterfacePtrInfo);
  }

  AttributionDataHostAssociatedPtr.prototype =
      Object.create(AttributionDataHostPtr.prototype);
  AttributionDataHostAssociatedPtr.prototype.constructor =
      AttributionDataHostAssociatedPtr;

  function AttributionDataHostProxy(receiver) {
    this.receiver_ = receiver;
  }
  AttributionDataHostPtr.prototype.sourceDataAvailable = function() {
    return AttributionDataHostProxy.prototype.sourceDataAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  AttributionDataHostProxy.prototype.sourceDataAvailable = function(data) {
    var params_ = new AttributionDataHost_SourceDataAvailable_Params();
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kAttributionDataHost_SourceDataAvailable_Name,
        codec.align(AttributionDataHost_SourceDataAvailable_Params.encodedSize));
    builder.encodeStruct(AttributionDataHost_SourceDataAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };
  AttributionDataHostPtr.prototype.triggerDataAvailable = function() {
    return AttributionDataHostProxy.prototype.triggerDataAvailable
        .apply(this.ptr.getProxy(), arguments);
  };

  AttributionDataHostProxy.prototype.triggerDataAvailable = function(data) {
    var params_ = new AttributionDataHost_TriggerDataAvailable_Params();
    params_.data = data;
    var builder = new codec.MessageV0Builder(
        kAttributionDataHost_TriggerDataAvailable_Name,
        codec.align(AttributionDataHost_TriggerDataAvailable_Params.encodedSize));
    builder.encodeStruct(AttributionDataHost_TriggerDataAvailable_Params, params_);
    var message = builder.finish();
    this.receiver_.accept(message);
  };

  function AttributionDataHostStub(delegate) {
    this.delegate_ = delegate;
  }
  AttributionDataHostStub.prototype.sourceDataAvailable = function(data) {
    return this.delegate_ && this.delegate_.sourceDataAvailable && this.delegate_.sourceDataAvailable(data);
  }
  AttributionDataHostStub.prototype.triggerDataAvailable = function(data) {
    return this.delegate_ && this.delegate_.triggerDataAvailable && this.delegate_.triggerDataAvailable(data);
  }

  AttributionDataHostStub.prototype.accept = function(message) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    case kAttributionDataHost_SourceDataAvailable_Name:
      var params = reader.decodeStruct(AttributionDataHost_SourceDataAvailable_Params);
      this.sourceDataAvailable(params.data);
      return true;
    case kAttributionDataHost_TriggerDataAvailable_Name:
      var params = reader.decodeStruct(AttributionDataHost_TriggerDataAvailable_Params);
      this.triggerDataAvailable(params.data);
      return true;
    default:
      return false;
    }
  };

  AttributionDataHostStub.prototype.acceptWithResponder =
      function(message, responder) {
    var reader = new codec.MessageReader(message);
    switch (reader.messageName) {
    default:
      return false;
    }
  };

  function validateAttributionDataHostRequest(messageValidator) {
    var message = messageValidator.message;
    var paramsClass = null;
    switch (message.getName()) {
      case kAttributionDataHost_SourceDataAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AttributionDataHost_SourceDataAvailable_Params;
      break;
      case kAttributionDataHost_TriggerDataAvailable_Name:
        if (!message.expectsResponse() && !message.isResponse())
          paramsClass = AttributionDataHost_TriggerDataAvailable_Params;
      break;
    }
    if (paramsClass === null)
      return validator.validationError.NONE;
    return paramsClass.validate(messageValidator, messageValidator.message.getHeaderNumBytes());
  }

  function validateAttributionDataHostResponse(messageValidator) {
    return validator.validationError.NONE;
  }

  var AttributionDataHost = {
    name: 'blink.mojom.AttributionDataHost',
    kVersion: 0,
    ptrClass: AttributionDataHostPtr,
    proxyClass: AttributionDataHostProxy,
    stubClass: AttributionDataHostStub,
    validateRequest: validateAttributionDataHostRequest,
    validateResponse: null,
  };
  AttributionDataHostStub.prototype.validator = validateAttributionDataHostRequest;
  AttributionDataHostProxy.prototype.validator = null;
  exports.AttributionDebugKey = AttributionDebugKey;
  exports.AttributionFilterData = AttributionFilterData;
  exports.AttributionAggregatableTriggerData = AttributionAggregatableTriggerData;
  exports.AttributionSourceData = AttributionSourceData;
  exports.AttributionTriggerDedupKey = AttributionTriggerDedupKey;
  exports.EventTriggerData = EventTriggerData;
  exports.AttributionTriggerData = AttributionTriggerData;
  exports.AttributionDataHost = AttributionDataHost;
  exports.AttributionDataHostPtr = AttributionDataHostPtr;
  exports.AttributionDataHostAssociatedPtr = AttributionDataHostAssociatedPtr;
})();