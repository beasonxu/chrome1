// third_party/blink/public/mojom/conversions/conversions.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_CONVERSIONS_MOJOM_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_CONVERSIONS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/conversions/conversions.mojom-shared.h"
#include "third_party/blink/public/mojom/conversions/conversions.mojom-forward.h"
#include "third_party/blink/public/mojom/conversions/attribution_data_host.mojom-forward.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/common/navigation/impression_mojom_traits.h"
#include "third_party/blink/public/common/common_export.h"




namespace blink {
namespace mojom {

class ConversionHostProxy;

template <typename ImplRefTraits>
class ConversionHostStub;

class ConversionHostRequestValidator;


class BLINK_COMMON_EXPORT ConversionHost
    : public ConversionHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = ConversionHostInterfaceBase;
  using Proxy_ = ConversionHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = ConversionHostStub<ImplRefTraits>;

  using RequestValidator_ = ConversionHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kRegisterDataHostMinVersion = 0,
    kRegisterNavigationDataHostMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct RegisterDataHost_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RegisterNavigationDataHost_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~ConversionHost() = default;

  
  virtual void RegisterDataHost(::mojo::PendingReceiver<::blink::mojom::AttributionDataHost> data_host) = 0;

  
  virtual void RegisterNavigationDataHost(::mojo::PendingReceiver<::blink::mojom::AttributionDataHost> data_host, const ::blink::AttributionSrcToken& attribution_src_token) = 0;
};



class BLINK_COMMON_EXPORT ConversionHostProxy
    : public ConversionHost {
 public:
  using InterfaceType = ConversionHost;

  explicit ConversionHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void RegisterDataHost(::mojo::PendingReceiver<::blink::mojom::AttributionDataHost> data_host) final;
  
  void RegisterNavigationDataHost(::mojo::PendingReceiver<::blink::mojom::AttributionDataHost> data_host, const ::blink::AttributionSrcToken& attribution_src_token) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_COMMON_EXPORT ConversionHostStubDispatch {
 public:
  static bool Accept(ConversionHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      ConversionHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<ConversionHost>>
class ConversionHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  ConversionHostStub() = default;
  ~ConversionHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ConversionHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return ConversionHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_COMMON_EXPORT ConversionHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class BLINK_COMMON_EXPORT Impression {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<Impression, T>::value>;
  using DataView = ImpressionDataView;
  using Data_ = internal::Impression_Data;

  template <typename... Args>
  static ImpressionPtr New(Args&&... args) {
    return ImpressionPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ImpressionPtr From(const U& u) {
    return mojo::TypeConverter<ImpressionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, Impression>::Convert(*this);
  }


  Impression();

  explicit Impression(
      const ::blink::AttributionSrcToken& attribution_src_token);


  ~Impression();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ImpressionPtr>
  ImpressionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, Impression::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, Impression::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        Impression::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        Impression::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::Impression_UnserializedMessageContext<
            UserType, Impression::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<Impression::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return Impression::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::Impression_UnserializedMessageContext<
            UserType, Impression::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<Impression::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::AttributionSrcToken attribution_src_token;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, Impression::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, Impression::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, Impression::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, Impression::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ImpressionPtr Impression::Clone() const {
  return New(
      mojo::Clone(attribution_src_token)
  );
}

template <typename T, Impression::EnableIfSame<T>*>
bool Impression::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->attribution_src_token, other_struct.attribution_src_token))
    return false;
  return true;
}

template <typename T, Impression::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.attribution_src_token < rhs.attribution_src_token)
    return true;
  if (rhs.attribution_src_token < lhs.attribution_src_token)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace blink

namespace mojo {


template <>
struct BLINK_COMMON_EXPORT StructTraits<::blink::mojom::Impression::DataView,
                                         ::blink::mojom::ImpressionPtr> {
  static bool IsNull(const ::blink::mojom::ImpressionPtr& input) { return !input; }
  static void SetToNull(::blink::mojom::ImpressionPtr* output) { output->reset(); }

  static const decltype(::blink::mojom::Impression::attribution_src_token)& attribution_src_token(
      const ::blink::mojom::ImpressionPtr& input) {
    return input->attribution_src_token;
  }

  static bool Read(::blink::mojom::Impression::DataView input, ::blink::mojom::ImpressionPtr* output);
};

}  // namespace mojo

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_CONVERSIONS_MOJOM_H_