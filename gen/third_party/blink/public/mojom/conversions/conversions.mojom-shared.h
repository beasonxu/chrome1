// third_party/blink/public/mojom/conversions/conversions.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_CONVERSIONS_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_CONVERSIONS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/conversions/conversions.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/conversions/attribution_data_host.mojom-shared.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class ImpressionDataView;



}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::ImpressionDataView> {
  using Data = ::blink::mojom::internal::Impression_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class ConversionHostInterfaceBase {};

using ConversionHostPtrDataView =
    mojo::InterfacePtrDataView<ConversionHostInterfaceBase>;
using ConversionHostRequestDataView =
    mojo::InterfaceRequestDataView<ConversionHostInterfaceBase>;
using ConversionHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ConversionHostInterfaceBase>;
using ConversionHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ConversionHostInterfaceBase>;


class ImpressionDataView {
 public:
  ImpressionDataView() = default;

  ImpressionDataView(
      internal::Impression_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAttributionSrcTokenDataView(
      ::blink::mojom::AttributionSrcTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAttributionSrcToken(UserType* output) {
    
    auto* pointer = data_->attribution_src_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::AttributionSrcTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::Impression_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::ImpressionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::ImpressionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::Impression_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::attribution_src_token(input)) in_attribution_src_token = Traits::attribution_src_token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->attribution_src_token)::BaseType> attribution_src_token_fragment(
            fragment.message());
    mojo::internal::Serialize<::blink::mojom::AttributionSrcTokenDataView>(
        in_attribution_src_token, attribution_src_token_fragment);
    fragment->attribution_src_token.Set(
        attribution_src_token_fragment.is_null() ? nullptr : attribution_src_token_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->attribution_src_token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null attribution_src_token in Impression struct");
  }

  static bool Deserialize(::blink::mojom::internal::Impression_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::ImpressionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void ImpressionDataView::GetAttributionSrcTokenDataView(
    ::blink::mojom::AttributionSrcTokenDataView* output) {
  auto pointer = data_->attribution_src_token.Get();
  *output = ::blink::mojom::AttributionSrcTokenDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONVERSIONS_CONVERSIONS_MOJOM_SHARED_H_