// third_party/blink/public/mojom/browsing_topics/browsing_topics.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BROWSING_TOPICS_BROWSING_TOPICS_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BROWSING_TOPICS_BROWSING_TOPICS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/browsing_topics/browsing_topics.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class EpochTopicDataView;

class GetBrowsingTopicsResultDataView;


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::EpochTopicDataView> {
  using Data = ::blink::mojom::internal::EpochTopic_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::GetBrowsingTopicsResultDataView> {
  using Data = ::blink::mojom::internal::GetBrowsingTopicsResult_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {
// Interface base classes. They are used for type safety check.
class BrowsingTopicsDocumentServiceInterfaceBase {};

using BrowsingTopicsDocumentServicePtrDataView =
    mojo::InterfacePtrDataView<BrowsingTopicsDocumentServiceInterfaceBase>;
using BrowsingTopicsDocumentServiceRequestDataView =
    mojo::InterfaceRequestDataView<BrowsingTopicsDocumentServiceInterfaceBase>;
using BrowsingTopicsDocumentServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<BrowsingTopicsDocumentServiceInterfaceBase>;
using BrowsingTopicsDocumentServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<BrowsingTopicsDocumentServiceInterfaceBase>;


class EpochTopicDataView {
 public:
  EpochTopicDataView() = default;

  EpochTopicDataView(
      internal::EpochTopic_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t topic() const {
    return data_->topic;
  }
  inline void GetVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVersion(UserType* output) {
    
    auto* pointer = data_->version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetConfigVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfigVersion(UserType* output) {
    
    auto* pointer = data_->config_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetModelVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadModelVersion(UserType* output) {
    
    auto* pointer = data_->model_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetTaxonomyVersionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTaxonomyVersion(UserType* output) {
    
    auto* pointer = data_->taxonomy_version.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::EpochTopic_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GetBrowsingTopicsResultDataView {
 public:
  using Tag = internal::GetBrowsingTopicsResult_Data::GetBrowsingTopicsResult_Tag;

  GetBrowsingTopicsResultDataView() = default;

  GetBrowsingTopicsResultDataView(
      internal::GetBrowsingTopicsResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_error_message() const { return data_->tag == Tag::kErrorMessage; }
  inline void GetErrorMessageDataView(
      mojo::StringDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMessage(UserType* output) const {
    
    CHECK(is_error_message());
    return mojo::internal::Deserialize<mojo::StringDataView>(
        data_->data.f_error_message.Get(), output, message_);
  }
  bool is_browsing_topics() const { return data_->tag == Tag::kBrowsingTopics; }
  inline void GetBrowsingTopicsDataView(
      mojo::ArrayDataView<EpochTopicDataView>* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadBrowsingTopics(UserType* output) const {
    
    CHECK(is_browsing_topics());
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::EpochTopicDataView>>(
        data_->data.f_browsing_topics.Get(), output, message_);
  }

 private:
  internal::GetBrowsingTopicsResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::EpochTopicDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::EpochTopicDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::EpochTopic_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->topic = Traits::topic(input);
    decltype(Traits::version(input)) in_version = Traits::version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->version)::BaseType> version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_version, version_fragment);
    fragment->version.Set(
        version_fragment.is_null() ? nullptr : version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null version in EpochTopic struct");
    decltype(Traits::config_version(input)) in_config_version = Traits::config_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->config_version)::BaseType> config_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_config_version, config_version_fragment);
    fragment->config_version.Set(
        config_version_fragment.is_null() ? nullptr : config_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->config_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null config_version in EpochTopic struct");
    decltype(Traits::model_version(input)) in_model_version = Traits::model_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->model_version)::BaseType> model_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_model_version, model_version_fragment);
    fragment->model_version.Set(
        model_version_fragment.is_null() ? nullptr : model_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->model_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null model_version in EpochTopic struct");
    decltype(Traits::taxonomy_version(input)) in_taxonomy_version = Traits::taxonomy_version(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->taxonomy_version)::BaseType> taxonomy_version_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_taxonomy_version, taxonomy_version_fragment);
    fragment->taxonomy_version.Set(
        taxonomy_version_fragment.is_null() ? nullptr : taxonomy_version_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->taxonomy_version.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null taxonomy_version in EpochTopic struct");
  }

  static bool Deserialize(::blink::mojom::internal::EpochTopic_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::EpochTopicDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::GetBrowsingTopicsResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::GetBrowsingTopicsResultDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::GetBrowsingTopicsResult_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::GetBrowsingTopicsResultDataView::Tag::kErrorMessage: {
        decltype(Traits::error_message(input))
            in_error_message = Traits::error_message(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_error_message)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<mojo::StringDataView>(
            in_error_message, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null error_message in GetBrowsingTopicsResult union");
        fragment->data.f_error_message.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::GetBrowsingTopicsResultDataView::Tag::kBrowsingTopics: {
        decltype(Traits::browsing_topics(input))
            in_browsing_topics = Traits::browsing_topics(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_browsing_topics)::BaseType>
            value_fragment(fragment.message());
        const ContainerValidateParams browsing_topics_validate_params(
            0, false, nullptr);
        mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::EpochTopicDataView>>(
            in_browsing_topics, value_fragment, &browsing_topics_validate_params);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null browsing_topics in GetBrowsingTopicsResult union");
        fragment->data.f_browsing_topics.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::GetBrowsingTopicsResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::GetBrowsingTopicsResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void EpochTopicDataView::GetVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void EpochTopicDataView::GetConfigVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->config_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void EpochTopicDataView::GetModelVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->model_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void EpochTopicDataView::GetTaxonomyVersionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->taxonomy_version.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void GetBrowsingTopicsResultDataView::GetErrorMessageDataView(
    mojo::StringDataView* output) const {
  CHECK(is_error_message());
  *output = mojo::StringDataView(data_->data.f_error_message.Get(), message_);
}
inline void GetBrowsingTopicsResultDataView::GetBrowsingTopicsDataView(
    mojo::ArrayDataView<EpochTopicDataView>* output) const {
  CHECK(is_browsing_topics());
  *output = mojo::ArrayDataView<EpochTopicDataView>(data_->data.f_browsing_topics.Get(), message_);
}


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BROWSING_TOPICS_BROWSING_TOPICS_MOJOM_SHARED_H_