// third_party/blink/public/mojom/broadcastchannel/broadcast_channel.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_BROADCASTCHANNEL_BROADCAST_CHANNEL_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_BROADCASTCHANNEL_BROADCAST_CHANNEL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BroadcastChannelClient_OnMessage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::CloneableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<BroadcastChannelClient_OnMessage_Params_Data>;

  BroadcastChannelClient_OnMessage_Params_Data();
  ~BroadcastChannelClient_OnMessage_Params_Data() = delete;
};
static_assert(sizeof(BroadcastChannelClient_OnMessage_Params_Data) == 16,
              "Bad sizeof(BroadcastChannelClient_OnMessage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) BroadcastChannelProvider_ConnectToChannel_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::AssociatedInterface_Data client;
  mojo::internal::AssociatedEndpointHandle_Data connection;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BroadcastChannelProvider_ConnectToChannel_Params_Data>;

  BroadcastChannelProvider_ConnectToChannel_Params_Data();
  ~BroadcastChannelProvider_ConnectToChannel_Params_Data() = delete;
};
static_assert(sizeof(BroadcastChannelProvider_ConnectToChannel_Params_Data) == 32,
              "Bad sizeof(BroadcastChannelProvider_ConnectToChannel_Params_Data)");

}  // namespace internal


class BroadcastChannelClient_OnMessage_ParamsDataView {
 public:
  BroadcastChannelClient_OnMessage_ParamsDataView() = default;

  BroadcastChannelClient_OnMessage_ParamsDataView(
      internal::BroadcastChannelClient_OnMessage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      ::blink::mojom::CloneableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::CloneableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::BroadcastChannelClient_OnMessage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BroadcastChannelProvider_ConnectToChannel_ParamsDataView {
 public:
  BroadcastChannelProvider_ConnectToChannel_ParamsDataView() = default;

  BroadcastChannelProvider_ConnectToChannel_ParamsDataView(
      internal::BroadcastChannelProvider_ConnectToChannel_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::BroadcastChannelClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeConnection() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::BroadcastChannelClientAssociatedRequestDataView>(
            &data_->connection, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::BroadcastChannelProvider_ConnectToChannel_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void BroadcastChannelClient_OnMessage_ParamsDataView::GetMessageDataView(
    ::blink::mojom::CloneableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::CloneableMessageDataView(pointer, message_);
}


inline void BroadcastChannelProvider_ConnectToChannel_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_BROADCASTCHANNEL_BROADCAST_CHANNEL_MOJOM_PARAMS_DATA_H_