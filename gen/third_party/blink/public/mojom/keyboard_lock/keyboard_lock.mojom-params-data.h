// third_party/blink/public/mojom/keyboard_lock/keyboard_lock.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_KEYBOARD_LOCK_KEYBOARD_LOCK_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_KEYBOARD_LOCK_KEYBOARD_LOCK_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) KeyboardLockService_RequestKeyboardLock_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::String_Data>>> key_codes;

 private:
  friend class mojo::internal::MessageFragment<KeyboardLockService_RequestKeyboardLock_Params_Data>;

  KeyboardLockService_RequestKeyboardLock_Params_Data();
  ~KeyboardLockService_RequestKeyboardLock_Params_Data() = delete;
};
static_assert(sizeof(KeyboardLockService_RequestKeyboardLock_Params_Data) == 16,
              "Bad sizeof(KeyboardLockService_RequestKeyboardLock_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) KeyboardLockService_RequestKeyboardLock_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<KeyboardLockService_RequestKeyboardLock_ResponseParams_Data>;

  KeyboardLockService_RequestKeyboardLock_ResponseParams_Data();
  ~KeyboardLockService_RequestKeyboardLock_ResponseParams_Data() = delete;
};
static_assert(sizeof(KeyboardLockService_RequestKeyboardLock_ResponseParams_Data) == 16,
              "Bad sizeof(KeyboardLockService_RequestKeyboardLock_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) KeyboardLockService_CancelKeyboardLock_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<KeyboardLockService_CancelKeyboardLock_Params_Data>;

  KeyboardLockService_CancelKeyboardLock_Params_Data();
  ~KeyboardLockService_CancelKeyboardLock_Params_Data() = delete;
};
static_assert(sizeof(KeyboardLockService_CancelKeyboardLock_Params_Data) == 8,
              "Bad sizeof(KeyboardLockService_CancelKeyboardLock_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) KeyboardLockService_GetKeyboardLayoutMap_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<KeyboardLockService_GetKeyboardLayoutMap_Params_Data>;

  KeyboardLockService_GetKeyboardLayoutMap_Params_Data();
  ~KeyboardLockService_GetKeyboardLayoutMap_Params_Data() = delete;
};
static_assert(sizeof(KeyboardLockService_GetKeyboardLayoutMap_Params_Data) == 8,
              "Bad sizeof(KeyboardLockService_GetKeyboardLayoutMap_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::GetKeyboardLayoutMapResult_Data> result;

 private:
  friend class mojo::internal::MessageFragment<KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data>;

  KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data();
  ~KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data() = delete;
};
static_assert(sizeof(KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data) == 16,
              "Bad sizeof(KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data)");

}  // namespace internal


class KeyboardLockService_RequestKeyboardLock_ParamsDataView {
 public:
  KeyboardLockService_RequestKeyboardLock_ParamsDataView() = default;

  KeyboardLockService_RequestKeyboardLock_ParamsDataView(
      internal::KeyboardLockService_RequestKeyboardLock_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetKeyCodesDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKeyCodes(UserType* output) {
    
    auto* pointer = data_->key_codes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::KeyboardLockService_RequestKeyboardLock_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class KeyboardLockService_RequestKeyboardLock_ResponseParamsDataView {
 public:
  KeyboardLockService_RequestKeyboardLock_ResponseParamsDataView() = default;

  KeyboardLockService_RequestKeyboardLock_ResponseParamsDataView(
      internal::KeyboardLockService_RequestKeyboardLock_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) const {
    auto data_value = data_->result;
    return mojo::internal::Deserialize<::blink::mojom::KeyboardLockRequestResult>(
        data_value, output);
  }
  KeyboardLockRequestResult result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::KeyboardLockRequestResult>(data_->result));
  }
 private:
  internal::KeyboardLockService_RequestKeyboardLock_ResponseParams_Data* data_ = nullptr;
};



class KeyboardLockService_CancelKeyboardLock_ParamsDataView {
 public:
  KeyboardLockService_CancelKeyboardLock_ParamsDataView() = default;

  KeyboardLockService_CancelKeyboardLock_ParamsDataView(
      internal::KeyboardLockService_CancelKeyboardLock_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::KeyboardLockService_CancelKeyboardLock_Params_Data* data_ = nullptr;
};



class KeyboardLockService_GetKeyboardLayoutMap_ParamsDataView {
 public:
  KeyboardLockService_GetKeyboardLayoutMap_ParamsDataView() = default;

  KeyboardLockService_GetKeyboardLayoutMap_ParamsDataView(
      internal::KeyboardLockService_GetKeyboardLayoutMap_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::KeyboardLockService_GetKeyboardLayoutMap_Params_Data* data_ = nullptr;
};



class KeyboardLockService_GetKeyboardLayoutMap_ResponseParamsDataView {
 public:
  KeyboardLockService_GetKeyboardLayoutMap_ResponseParamsDataView() = default;

  KeyboardLockService_GetKeyboardLayoutMap_ResponseParamsDataView(
      internal::KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      GetKeyboardLayoutMapResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::GetKeyboardLayoutMapResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::KeyboardLockService_GetKeyboardLayoutMap_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void KeyboardLockService_RequestKeyboardLock_ParamsDataView::GetKeyCodesDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->key_codes.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}








inline void KeyboardLockService_GetKeyboardLayoutMap_ResponseParamsDataView::GetResultDataView(
    GetKeyboardLayoutMapResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = GetKeyboardLayoutMapResultDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_KEYBOARD_LOCK_KEYBOARD_LOCK_MOJOM_PARAMS_DATA_H_