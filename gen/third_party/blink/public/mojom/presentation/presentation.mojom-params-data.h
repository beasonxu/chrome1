// third_party/blink/public/mojom/presentation/presentation.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PRESENTATION_PRESENTATION_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PRESENTATION_PRESENTATION_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationConnection_OnMessage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::PresentationConnectionMessage_Data message;

 private:
  friend class mojo::internal::MessageFragment<PresentationConnection_OnMessage_Params_Data>;

  PresentationConnection_OnMessage_Params_Data();
  ~PresentationConnection_OnMessage_Params_Data() = delete;
};
static_assert(sizeof(PresentationConnection_OnMessage_Params_Data) == 24,
              "Bad sizeof(PresentationConnection_OnMessage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationConnection_DidChangeState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PresentationConnection_DidChangeState_Params_Data>;

  PresentationConnection_DidChangeState_Params_Data();
  ~PresentationConnection_DidChangeState_Params_Data() = delete;
};
static_assert(sizeof(PresentationConnection_DidChangeState_Params_Data) == 16,
              "Bad sizeof(PresentationConnection_DidChangeState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationConnection_DidClose_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PresentationConnection_DidClose_Params_Data>;

  PresentationConnection_DidClose_Params_Data();
  ~PresentationConnection_DidClose_Params_Data() = delete;
};
static_assert(sizeof(PresentationConnection_DidClose_Params_Data) == 16,
              "Bad sizeof(PresentationConnection_DidClose_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_SetController_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data controller;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_SetController_Params_Data>;

  PresentationService_SetController_Params_Data();
  ~PresentationService_SetController_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_SetController_Params_Data) == 16,
              "Bad sizeof(PresentationService_SetController_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_SetReceiver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data receiver;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_SetReceiver_Params_Data>;

  PresentationService_SetReceiver_Params_Data();
  ~PresentationService_SetReceiver_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_SetReceiver_Params_Data) == 16,
              "Bad sizeof(PresentationService_SetReceiver_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_SetDefaultPresentationUrls_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> presentation_urls;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_SetDefaultPresentationUrls_Params_Data>;

  PresentationService_SetDefaultPresentationUrls_Params_Data();
  ~PresentationService_SetDefaultPresentationUrls_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_SetDefaultPresentationUrls_Params_Data) == 16,
              "Bad sizeof(PresentationService_SetDefaultPresentationUrls_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_ListenForScreenAvailability_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> availability_url;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_ListenForScreenAvailability_Params_Data>;

  PresentationService_ListenForScreenAvailability_Params_Data();
  ~PresentationService_ListenForScreenAvailability_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_ListenForScreenAvailability_Params_Data) == 16,
              "Bad sizeof(PresentationService_ListenForScreenAvailability_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_StopListeningForScreenAvailability_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> availability_url;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_StopListeningForScreenAvailability_Params_Data>;

  PresentationService_StopListeningForScreenAvailability_Params_Data();
  ~PresentationService_StopListeningForScreenAvailability_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_StopListeningForScreenAvailability_Params_Data) == 16,
              "Bad sizeof(PresentationService_StopListeningForScreenAvailability_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_StartPresentation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> presentation_urls;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_StartPresentation_Params_Data>;

  PresentationService_StartPresentation_Params_Data();
  ~PresentationService_StartPresentation_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_StartPresentation_Params_Data) == 16,
              "Bad sizeof(PresentationService_StartPresentation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_StartPresentation_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PresentationConnectionResult_Data> result;
  mojo::internal::Pointer<internal::PresentationError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_StartPresentation_ResponseParams_Data>;

  PresentationService_StartPresentation_ResponseParams_Data();
  ~PresentationService_StartPresentation_ResponseParams_Data() = delete;
};
static_assert(sizeof(PresentationService_StartPresentation_ResponseParams_Data) == 24,
              "Bad sizeof(PresentationService_StartPresentation_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_ReconnectPresentation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> presentation_urls;
  mojo::internal::Pointer<mojo::internal::String_Data> presentation_id;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_ReconnectPresentation_Params_Data>;

  PresentationService_ReconnectPresentation_Params_Data();
  ~PresentationService_ReconnectPresentation_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_ReconnectPresentation_Params_Data) == 24,
              "Bad sizeof(PresentationService_ReconnectPresentation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_ReconnectPresentation_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PresentationConnectionResult_Data> result;
  mojo::internal::Pointer<internal::PresentationError_Data> error;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_ReconnectPresentation_ResponseParams_Data>;

  PresentationService_ReconnectPresentation_ResponseParams_Data();
  ~PresentationService_ReconnectPresentation_ResponseParams_Data() = delete;
};
static_assert(sizeof(PresentationService_ReconnectPresentation_ResponseParams_Data) == 24,
              "Bad sizeof(PresentationService_ReconnectPresentation_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_CloseConnection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> presentation_url;
  mojo::internal::Pointer<mojo::internal::String_Data> presentation_id;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_CloseConnection_Params_Data>;

  PresentationService_CloseConnection_Params_Data();
  ~PresentationService_CloseConnection_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_CloseConnection_Params_Data) == 24,
              "Bad sizeof(PresentationService_CloseConnection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationService_Terminate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> presentation_url;
  mojo::internal::Pointer<mojo::internal::String_Data> presentation_id;

 private:
  friend class mojo::internal::MessageFragment<PresentationService_Terminate_Params_Data>;

  PresentationService_Terminate_Params_Data();
  ~PresentationService_Terminate_Params_Data() = delete;
};
static_assert(sizeof(PresentationService_Terminate_Params_Data) == 24,
              "Bad sizeof(PresentationService_Terminate_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationController_OnScreenAvailabilityUpdated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int32_t availability;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PresentationController_OnScreenAvailabilityUpdated_Params_Data>;

  PresentationController_OnScreenAvailabilityUpdated_Params_Data();
  ~PresentationController_OnScreenAvailabilityUpdated_Params_Data() = delete;
};
static_assert(sizeof(PresentationController_OnScreenAvailabilityUpdated_Params_Data) == 24,
              "Bad sizeof(PresentationController_OnScreenAvailabilityUpdated_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationController_OnDefaultPresentationStarted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PresentationConnectionResult_Data> result;

 private:
  friend class mojo::internal::MessageFragment<PresentationController_OnDefaultPresentationStarted_Params_Data>;

  PresentationController_OnDefaultPresentationStarted_Params_Data();
  ~PresentationController_OnDefaultPresentationStarted_Params_Data() = delete;
};
static_assert(sizeof(PresentationController_OnDefaultPresentationStarted_Params_Data) == 16,
              "Bad sizeof(PresentationController_OnDefaultPresentationStarted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationController_OnConnectionStateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PresentationInfo_Data> presentation_info;
  int32_t newState;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PresentationController_OnConnectionStateChanged_Params_Data>;

  PresentationController_OnConnectionStateChanged_Params_Data();
  ~PresentationController_OnConnectionStateChanged_Params_Data() = delete;
};
static_assert(sizeof(PresentationController_OnConnectionStateChanged_Params_Data) == 24,
              "Bad sizeof(PresentationController_OnConnectionStateChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationController_OnConnectionClosed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PresentationInfo_Data> presentation_info;
  int32_t reason;
  uint8_t pad1_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<PresentationController_OnConnectionClosed_Params_Data>;

  PresentationController_OnConnectionClosed_Params_Data();
  ~PresentationController_OnConnectionClosed_Params_Data() = delete;
};
static_assert(sizeof(PresentationController_OnConnectionClosed_Params_Data) == 32,
              "Bad sizeof(PresentationController_OnConnectionClosed_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PresentationReceiver_OnReceiverConnectionAvailable_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PresentationInfo_Data> info;
  mojo::internal::Interface_Data controller_connection;
  mojo::internal::Handle_Data receiver_connection_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PresentationReceiver_OnReceiverConnectionAvailable_Params_Data>;

  PresentationReceiver_OnReceiverConnectionAvailable_Params_Data();
  ~PresentationReceiver_OnReceiverConnectionAvailable_Params_Data() = delete;
};
static_assert(sizeof(PresentationReceiver_OnReceiverConnectionAvailable_Params_Data) == 32,
              "Bad sizeof(PresentationReceiver_OnReceiverConnectionAvailable_Params_Data)");

}  // namespace internal


class PresentationConnection_OnMessage_ParamsDataView {
 public:
  PresentationConnection_OnMessage_ParamsDataView() = default;

  PresentationConnection_OnMessage_ParamsDataView(
      internal::PresentationConnection_OnMessage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      PresentationConnectionMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = !data_->message.is_null() ? &data_->message : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationConnection_OnMessage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationConnection_DidChangeState_ParamsDataView {
 public:
  PresentationConnection_DidChangeState_ParamsDataView() = default;

  PresentationConnection_DidChangeState_ParamsDataView(
      internal::PresentationConnection_DidChangeState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) const {
    auto data_value = data_->state;
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionState>(
        data_value, output);
  }
  PresentationConnectionState state() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PresentationConnectionState>(data_->state));
  }
 private:
  internal::PresentationConnection_DidChangeState_Params_Data* data_ = nullptr;
};



class PresentationConnection_DidClose_ParamsDataView {
 public:
  PresentationConnection_DidClose_ParamsDataView() = default;

  PresentationConnection_DidClose_ParamsDataView(
      internal::PresentationConnection_DidClose_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionCloseReason>(
        data_value, output);
  }
  PresentationConnectionCloseReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PresentationConnectionCloseReason>(data_->reason));
  }
 private:
  internal::PresentationConnection_DidClose_Params_Data* data_ = nullptr;
};



class PresentationService_SetController_ParamsDataView {
 public:
  PresentationService_SetController_ParamsDataView() = default;

  PresentationService_SetController_ParamsDataView(
      internal::PresentationService_SetController_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeController() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PresentationControllerInterfaceBase>>(
            &data_->controller, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PresentationService_SetController_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_SetReceiver_ParamsDataView {
 public:
  PresentationService_SetReceiver_ParamsDataView() = default;

  PresentationService_SetReceiver_ParamsDataView(
      internal::PresentationService_SetReceiver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PresentationReceiverInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PresentationService_SetReceiver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_SetDefaultPresentationUrls_ParamsDataView {
 public:
  PresentationService_SetDefaultPresentationUrls_ParamsDataView() = default;

  PresentationService_SetDefaultPresentationUrls_ParamsDataView(
      internal::PresentationService_SetDefaultPresentationUrls_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationUrlsDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationUrls(UserType* output) {
    
    auto* pointer = data_->presentation_urls.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_SetDefaultPresentationUrls_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_ListenForScreenAvailability_ParamsDataView {
 public:
  PresentationService_ListenForScreenAvailability_ParamsDataView() = default;

  PresentationService_ListenForScreenAvailability_ParamsDataView(
      internal::PresentationService_ListenForScreenAvailability_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAvailabilityUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAvailabilityUrl(UserType* output) {
    
    auto* pointer = data_->availability_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_ListenForScreenAvailability_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_StopListeningForScreenAvailability_ParamsDataView {
 public:
  PresentationService_StopListeningForScreenAvailability_ParamsDataView() = default;

  PresentationService_StopListeningForScreenAvailability_ParamsDataView(
      internal::PresentationService_StopListeningForScreenAvailability_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAvailabilityUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAvailabilityUrl(UserType* output) {
    
    auto* pointer = data_->availability_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_StopListeningForScreenAvailability_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_StartPresentation_ParamsDataView {
 public:
  PresentationService_StartPresentation_ParamsDataView() = default;

  PresentationService_StartPresentation_ParamsDataView(
      internal::PresentationService_StartPresentation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationUrlsDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationUrls(UserType* output) {
    
    auto* pointer = data_->presentation_urls.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_StartPresentation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_StartPresentation_ResponseParamsDataView {
 public:
  PresentationService_StartPresentation_ResponseParamsDataView() = default;

  PresentationService_StartPresentation_ResponseParamsDataView(
      internal::PresentationService_StartPresentation_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      PresentationConnectionResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PresentationConnectionResultDataView, UserType>(),
    "Attempting to read the optional `result` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadResult` instead "
    "of `ReadResult if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionResultDataView>(
        pointer, output, message_);
  }
  inline void GetErrorDataView(
      PresentationErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PresentationErrorDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_StartPresentation_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_ReconnectPresentation_ParamsDataView {
 public:
  PresentationService_ReconnectPresentation_ParamsDataView() = default;

  PresentationService_ReconnectPresentation_ParamsDataView(
      internal::PresentationService_ReconnectPresentation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationUrlsDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationUrls(UserType* output) {
    
    auto* pointer = data_->presentation_urls.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
  inline void GetPresentationIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationId(UserType* output) {
    
    auto* pointer = data_->presentation_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_ReconnectPresentation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_ReconnectPresentation_ResponseParamsDataView {
 public:
  PresentationService_ReconnectPresentation_ResponseParamsDataView() = default;

  PresentationService_ReconnectPresentation_ResponseParamsDataView(
      internal::PresentationService_ReconnectPresentation_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      PresentationConnectionResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PresentationConnectionResultDataView, UserType>(),
    "Attempting to read the optional `result` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadResult` instead "
    "of `ReadResult if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionResultDataView>(
        pointer, output, message_);
  }
  inline void GetErrorDataView(
      PresentationErrorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::PresentationErrorDataView, UserType>(),
    "Attempting to read the optional `error` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadError` instead "
    "of `ReadError if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->error.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationErrorDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_ReconnectPresentation_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_CloseConnection_ParamsDataView {
 public:
  PresentationService_CloseConnection_ParamsDataView() = default;

  PresentationService_CloseConnection_ParamsDataView(
      internal::PresentationService_CloseConnection_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationUrl(UserType* output) {
    
    auto* pointer = data_->presentation_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetPresentationIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationId(UserType* output) {
    
    auto* pointer = data_->presentation_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_CloseConnection_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationService_Terminate_ParamsDataView {
 public:
  PresentationService_Terminate_ParamsDataView() = default;

  PresentationService_Terminate_ParamsDataView(
      internal::PresentationService_Terminate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationUrl(UserType* output) {
    
    auto* pointer = data_->presentation_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetPresentationIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationId(UserType* output) {
    
    auto* pointer = data_->presentation_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationService_Terminate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationController_OnScreenAvailabilityUpdated_ParamsDataView {
 public:
  PresentationController_OnScreenAvailabilityUpdated_ParamsDataView() = default;

  PresentationController_OnScreenAvailabilityUpdated_ParamsDataView(
      internal::PresentationController_OnScreenAvailabilityUpdated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadAvailability(UserType* output) const {
    auto data_value = data_->availability;
    return mojo::internal::Deserialize<::blink::mojom::ScreenAvailability>(
        data_value, output);
  }
  ScreenAvailability availability() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ScreenAvailability>(data_->availability));
  }
 private:
  internal::PresentationController_OnScreenAvailabilityUpdated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationController_OnDefaultPresentationStarted_ParamsDataView {
 public:
  PresentationController_OnDefaultPresentationStarted_ParamsDataView() = default;

  PresentationController_OnDefaultPresentationStarted_ParamsDataView(
      internal::PresentationController_OnDefaultPresentationStarted_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      PresentationConnectionResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = data_->result.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationController_OnDefaultPresentationStarted_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationController_OnConnectionStateChanged_ParamsDataView {
 public:
  PresentationController_OnConnectionStateChanged_ParamsDataView() = default;

  PresentationController_OnConnectionStateChanged_ParamsDataView(
      internal::PresentationController_OnConnectionStateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationInfoDataView(
      PresentationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationInfo(UserType* output) {
    
    auto* pointer = data_->presentation_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadNewState(UserType* output) const {
    auto data_value = data_->newState;
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionState>(
        data_value, output);
  }
  PresentationConnectionState newState() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PresentationConnectionState>(data_->newState));
  }
 private:
  internal::PresentationController_OnConnectionStateChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationController_OnConnectionClosed_ParamsDataView {
 public:
  PresentationController_OnConnectionClosed_ParamsDataView() = default;

  PresentationController_OnConnectionClosed_ParamsDataView(
      internal::PresentationController_OnConnectionClosed_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationInfoDataView(
      PresentationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationInfo(UserType* output) {
    
    auto* pointer = data_->presentation_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::blink::mojom::PresentationConnectionCloseReason>(
        data_value, output);
  }
  PresentationConnectionCloseReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::PresentationConnectionCloseReason>(data_->reason));
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PresentationController_OnConnectionClosed_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PresentationReceiver_OnReceiverConnectionAvailable_ParamsDataView {
 public:
  PresentationReceiver_OnReceiverConnectionAvailable_ParamsDataView() = default;

  PresentationReceiver_OnReceiverConnectionAvailable_ParamsDataView(
      internal::PresentationReceiver_OnReceiverConnectionAvailable_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      PresentationInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::blink::mojom::PresentationInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeControllerConnection() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PresentationConnectionInterfaceBase>>(
            &data_->controller_connection, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeReceiverConnectionReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::PresentationConnectionInterfaceBase>>(
            &data_->receiver_connection_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PresentationReceiver_OnReceiverConnectionAvailable_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void PresentationConnection_OnMessage_ParamsDataView::GetMessageDataView(
    PresentationConnectionMessageDataView* output) {
  auto pointer = &data_->message;
  *output = PresentationConnectionMessageDataView(pointer, message_);
}










inline void PresentationService_SetDefaultPresentationUrls_ParamsDataView::GetPresentationUrlsDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->presentation_urls.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}


inline void PresentationService_ListenForScreenAvailability_ParamsDataView::GetAvailabilityUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->availability_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void PresentationService_StopListeningForScreenAvailability_ParamsDataView::GetAvailabilityUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->availability_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void PresentationService_StartPresentation_ParamsDataView::GetPresentationUrlsDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->presentation_urls.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}


inline void PresentationService_StartPresentation_ResponseParamsDataView::GetResultDataView(
    PresentationConnectionResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = PresentationConnectionResultDataView(pointer, message_);
}
inline void PresentationService_StartPresentation_ResponseParamsDataView::GetErrorDataView(
    PresentationErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = PresentationErrorDataView(pointer, message_);
}


inline void PresentationService_ReconnectPresentation_ParamsDataView::GetPresentationUrlsDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->presentation_urls.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}
inline void PresentationService_ReconnectPresentation_ParamsDataView::GetPresentationIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->presentation_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PresentationService_ReconnectPresentation_ResponseParamsDataView::GetResultDataView(
    PresentationConnectionResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = PresentationConnectionResultDataView(pointer, message_);
}
inline void PresentationService_ReconnectPresentation_ResponseParamsDataView::GetErrorDataView(
    PresentationErrorDataView* output) {
  auto pointer = data_->error.Get();
  *output = PresentationErrorDataView(pointer, message_);
}


inline void PresentationService_CloseConnection_ParamsDataView::GetPresentationUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->presentation_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PresentationService_CloseConnection_ParamsDataView::GetPresentationIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->presentation_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PresentationService_Terminate_ParamsDataView::GetPresentationUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->presentation_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PresentationService_Terminate_ParamsDataView::GetPresentationIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->presentation_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PresentationController_OnScreenAvailabilityUpdated_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void PresentationController_OnDefaultPresentationStarted_ParamsDataView::GetResultDataView(
    PresentationConnectionResultDataView* output) {
  auto pointer = data_->result.Get();
  *output = PresentationConnectionResultDataView(pointer, message_);
}


inline void PresentationController_OnConnectionStateChanged_ParamsDataView::GetPresentationInfoDataView(
    PresentationInfoDataView* output) {
  auto pointer = data_->presentation_info.Get();
  *output = PresentationInfoDataView(pointer, message_);
}


inline void PresentationController_OnConnectionClosed_ParamsDataView::GetPresentationInfoDataView(
    PresentationInfoDataView* output) {
  auto pointer = data_->presentation_info.Get();
  *output = PresentationInfoDataView(pointer, message_);
}
inline void PresentationController_OnConnectionClosed_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PresentationReceiver_OnReceiverConnectionAvailable_ParamsDataView::GetInfoDataView(
    PresentationInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = PresentationInfoDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PRESENTATION_PRESENTATION_MOJOM_PARAMS_DATA_H_