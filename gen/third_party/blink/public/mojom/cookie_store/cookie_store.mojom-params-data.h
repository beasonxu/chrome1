// third_party/blink/public/mojom/cookie_store/cookie_store.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_COOKIE_STORE_COOKIE_STORE_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_COOKIE_STORE_COOKIE_STORE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CookieStore_AddSubscriptions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CookieChangeSubscription_Data>>> subscription;

 private:
  friend class mojo::internal::MessageFragment<CookieStore_AddSubscriptions_Params_Data>;

  CookieStore_AddSubscriptions_Params_Data();
  ~CookieStore_AddSubscriptions_Params_Data() = delete;
};
static_assert(sizeof(CookieStore_AddSubscriptions_Params_Data) == 24,
              "Bad sizeof(CookieStore_AddSubscriptions_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CookieStore_AddSubscriptions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CookieStore_AddSubscriptions_ResponseParams_Data>;

  CookieStore_AddSubscriptions_ResponseParams_Data();
  ~CookieStore_AddSubscriptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(CookieStore_AddSubscriptions_ResponseParams_Data) == 16,
              "Bad sizeof(CookieStore_AddSubscriptions_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CookieStore_RemoveSubscriptions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CookieChangeSubscription_Data>>> subscription;

 private:
  friend class mojo::internal::MessageFragment<CookieStore_RemoveSubscriptions_Params_Data>;

  CookieStore_RemoveSubscriptions_Params_Data();
  ~CookieStore_RemoveSubscriptions_Params_Data() = delete;
};
static_assert(sizeof(CookieStore_RemoveSubscriptions_Params_Data) == 24,
              "Bad sizeof(CookieStore_RemoveSubscriptions_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CookieStore_RemoveSubscriptions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CookieStore_RemoveSubscriptions_ResponseParams_Data>;

  CookieStore_RemoveSubscriptions_ResponseParams_Data();
  ~CookieStore_RemoveSubscriptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(CookieStore_RemoveSubscriptions_ResponseParams_Data) == 16,
              "Bad sizeof(CookieStore_RemoveSubscriptions_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CookieStore_GetSubscriptions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;

 private:
  friend class mojo::internal::MessageFragment<CookieStore_GetSubscriptions_Params_Data>;

  CookieStore_GetSubscriptions_Params_Data();
  ~CookieStore_GetSubscriptions_Params_Data() = delete;
};
static_assert(sizeof(CookieStore_GetSubscriptions_Params_Data) == 16,
              "Bad sizeof(CookieStore_GetSubscriptions_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) CookieStore_GetSubscriptions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::CookieChangeSubscription_Data>>> subscriptions;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<CookieStore_GetSubscriptions_ResponseParams_Data>;

  CookieStore_GetSubscriptions_ResponseParams_Data();
  ~CookieStore_GetSubscriptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(CookieStore_GetSubscriptions_ResponseParams_Data) == 24,
              "Bad sizeof(CookieStore_GetSubscriptions_ResponseParams_Data)");

}  // namespace internal


class CookieStore_AddSubscriptions_ParamsDataView {
 public:
  CookieStore_AddSubscriptions_ParamsDataView() = default;

  CookieStore_AddSubscriptions_ParamsDataView(
      internal::CookieStore_AddSubscriptions_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
  inline void GetSubscriptionDataView(
      mojo::ArrayDataView<CookieChangeSubscriptionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubscription(UserType* output) {
    
    auto* pointer = data_->subscription.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::CookieChangeSubscriptionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CookieStore_AddSubscriptions_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CookieStore_AddSubscriptions_ResponseParamsDataView {
 public:
  CookieStore_AddSubscriptions_ResponseParamsDataView() = default;

  CookieStore_AddSubscriptions_ResponseParamsDataView(
      internal::CookieStore_AddSubscriptions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::CookieStore_AddSubscriptions_ResponseParams_Data* data_ = nullptr;
};



class CookieStore_RemoveSubscriptions_ParamsDataView {
 public:
  CookieStore_RemoveSubscriptions_ParamsDataView() = default;

  CookieStore_RemoveSubscriptions_ParamsDataView(
      internal::CookieStore_RemoveSubscriptions_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
  inline void GetSubscriptionDataView(
      mojo::ArrayDataView<CookieChangeSubscriptionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubscription(UserType* output) {
    
    auto* pointer = data_->subscription.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::CookieChangeSubscriptionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::CookieStore_RemoveSubscriptions_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CookieStore_RemoveSubscriptions_ResponseParamsDataView {
 public:
  CookieStore_RemoveSubscriptions_ResponseParamsDataView() = default;

  CookieStore_RemoveSubscriptions_ResponseParamsDataView(
      internal::CookieStore_RemoveSubscriptions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::CookieStore_RemoveSubscriptions_ResponseParams_Data* data_ = nullptr;
};



class CookieStore_GetSubscriptions_ParamsDataView {
 public:
  CookieStore_GetSubscriptions_ParamsDataView() = default;

  CookieStore_GetSubscriptions_ParamsDataView(
      internal::CookieStore_GetSubscriptions_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
 private:
  internal::CookieStore_GetSubscriptions_Params_Data* data_ = nullptr;
};



class CookieStore_GetSubscriptions_ResponseParamsDataView {
 public:
  CookieStore_GetSubscriptions_ResponseParamsDataView() = default;

  CookieStore_GetSubscriptions_ResponseParamsDataView(
      internal::CookieStore_GetSubscriptions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSubscriptionsDataView(
      mojo::ArrayDataView<CookieChangeSubscriptionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubscriptions(UserType* output) {
    
    auto* pointer = data_->subscriptions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::CookieChangeSubscriptionDataView>>(
        pointer, output, message_);
  }
  bool success() const {
    return data_->success;
  }
 private:
  internal::CookieStore_GetSubscriptions_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CookieStore_AddSubscriptions_ParamsDataView::GetSubscriptionDataView(
    mojo::ArrayDataView<CookieChangeSubscriptionDataView>* output) {
  auto pointer = data_->subscription.Get();
  *output = mojo::ArrayDataView<CookieChangeSubscriptionDataView>(pointer, message_);
}




inline void CookieStore_RemoveSubscriptions_ParamsDataView::GetSubscriptionDataView(
    mojo::ArrayDataView<CookieChangeSubscriptionDataView>* output) {
  auto pointer = data_->subscription.Get();
  *output = mojo::ArrayDataView<CookieChangeSubscriptionDataView>(pointer, message_);
}






inline void CookieStore_GetSubscriptions_ResponseParamsDataView::GetSubscriptionsDataView(
    mojo::ArrayDataView<CookieChangeSubscriptionDataView>* output) {
  auto pointer = data_->subscriptions.Get();
  *output = mojo::ArrayDataView<CookieChangeSubscriptionDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_COOKIE_STORE_COOKIE_STORE_MOJOM_PARAMS_DATA_H_