// third_party/blink/public/mojom/frame/remote_frame.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_REMOTE_FRAME_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_REMOTE_FRAME_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t touch_action;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data>;

  RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data();
  ~RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_throttled : 1;
  uint8_t subtree_throttled : 1;
  uint8_t display_locked : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data>;

  RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data();
  ~RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_VisibilityChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t visibility;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_VisibilityChanged_Params_Data>;

  RemoteFrameHost_VisibilityChanged_Params_Data();
  ~RemoteFrameHost_VisibilityChanged_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_VisibilityChanged_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_VisibilityChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_DidFocusFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_DidFocusFrame_Params_Data>;

  RemoteFrameHost_DidFocusFrame_Params_Data();
  ~RemoteFrameHost_DidFocusFrame_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_DidFocusFrame_Params_Data) == 8,
              "Bad sizeof(RemoteFrameHost_DidFocusFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_CheckCompleted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_CheckCompleted_Params_Data>;

  RemoteFrameHost_CheckCompleted_Params_Data();
  ~RemoteFrameHost_CheckCompleted_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_CheckCompleted_Params_Data) == 8,
              "Bad sizeof(RemoteFrameHost_CheckCompleted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> guid;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data>;

  RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data();
  ~RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data) == 24,
              "Bad sizeof(RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_SetIsInert_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t inert : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_SetIsInert_Params_Data>;

  RemoteFrameHost_SetIsInert_Params_Data();
  ~RemoteFrameHost_SetIsInert_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_SetIsInert_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_SetIsInert_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_DidChangeOpener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> opener_frame;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_DidChangeOpener_Params_Data>;

  RemoteFrameHost_DidChangeOpener_Params_Data();
  ~RemoteFrameHost_DidChangeOpener_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_DidChangeOpener_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_DidChangeOpener_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_AdvanceFocus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t focus_type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> source_frame_token;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_AdvanceFocus_Params_Data>;

  RemoteFrameHost_AdvanceFocus_Params_Data();
  ~RemoteFrameHost_AdvanceFocus_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_AdvanceFocus_Params_Data) == 24,
              "Bad sizeof(RemoteFrameHost_AdvanceFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_RouteMessageEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::LocalFrameToken_Data> source_frame_token;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> source_origin;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> target_origin;
  mojo::internal::Pointer<::blink::mojom::internal::TransferableMessage_Data> message;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_RouteMessageEvent_Params_Data>;

  RemoteFrameHost_RouteMessageEvent_Params_Data();
  ~RemoteFrameHost_RouteMessageEvent_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_RouteMessageEvent_Params_Data) == 40,
              "Bad sizeof(RemoteFrameHost_RouteMessageEvent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_PrintCrossProcessSubframe_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> frame_content_rect;
  int32_t document_cookie;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_PrintCrossProcessSubframe_Params_Data>;

  RemoteFrameHost_PrintCrossProcessSubframe_Params_Data();
  ~RemoteFrameHost_PrintCrossProcessSubframe_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_PrintCrossProcessSubframe_Params_Data) == 24,
              "Bad sizeof(RemoteFrameHost_PrintCrossProcessSubframe_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_Detach_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_Detach_Params_Data>;

  RemoteFrameHost_Detach_Params_Data();
  ~RemoteFrameHost_Detach_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_Detach_Params_Data) == 8,
              "Bad sizeof(RemoteFrameHost_Detach_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_UpdateViewportIntersection_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ViewportIntersectionState_Data> intersection_state;
  mojo::internal::Pointer<::blink::mojom::internal::FrameVisualProperties_Data> visual_properties;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_UpdateViewportIntersection_Params_Data>;

  RemoteFrameHost_UpdateViewportIntersection_Params_Data();
  ~RemoteFrameHost_UpdateViewportIntersection_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_UpdateViewportIntersection_Params_Data) == 24,
              "Bad sizeof(RemoteFrameHost_UpdateViewportIntersection_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_SynchronizeVisualProperties_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FrameVisualProperties_Data> properties;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_SynchronizeVisualProperties_Params_Data>;

  RemoteFrameHost_SynchronizeVisualProperties_Params_Data();
  ~RemoteFrameHost_SynchronizeVisualProperties_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_SynchronizeVisualProperties_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_SynchronizeVisualProperties_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrameHost_OpenURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::OpenURLParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrameHost_OpenURL_Params_Data>;

  RemoteFrameHost_OpenURL_Params_Data();
  ~RemoteFrameHost_OpenURL_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrameHost_OpenURL_Params_Data) == 16,
              "Bad sizeof(RemoteFrameHost_OpenURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_WillEnterFullscreen_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FullscreenOptions_Data> options;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_WillEnterFullscreen_Params_Data>;

  RemoteFrame_WillEnterFullscreen_Params_Data();
  ~RemoteFrame_WillEnterFullscreen_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_WillEnterFullscreen_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_WillEnterFullscreen_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_EnforceInsecureNavigationsSet_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> set;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_EnforceInsecureNavigationsSet_Params_Data>;

  RemoteFrame_EnforceInsecureNavigationsSet_Params_Data();
  ~RemoteFrame_EnforceInsecureNavigationsSet_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_EnforceInsecureNavigationsSet_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_EnforceInsecureNavigationsSet_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetFrameOwnerProperties_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FrameOwnerProperties_Data> properties;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetFrameOwnerProperties_Params_Data>;

  RemoteFrame_SetFrameOwnerProperties_Params_Data();
  ~RemoteFrame_SetFrameOwnerProperties_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetFrameOwnerProperties_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetFrameOwnerProperties_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_EnforceInsecureRequestPolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t policy;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_EnforceInsecureRequestPolicy_Params_Data>;

  RemoteFrame_EnforceInsecureRequestPolicy_Params_Data();
  ~RemoteFrame_EnforceInsecureRequestPolicy_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_EnforceInsecureRequestPolicy_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_EnforceInsecureRequestPolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetReplicatedOrigin_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  uint8_t is_potentially_trustworthy_unique_origin : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetReplicatedOrigin_Params_Data>;

  RemoteFrame_SetReplicatedOrigin_Params_Data();
  ~RemoteFrame_SetReplicatedOrigin_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetReplicatedOrigin_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_SetReplicatedOrigin_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetReplicatedIsAdFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_ad_frame : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetReplicatedIsAdFrame_Params_Data>;

  RemoteFrame_SetReplicatedIsAdFrame_Params_Data();
  ~RemoteFrame_SetReplicatedIsAdFrame_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetReplicatedIsAdFrame_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetReplicatedIsAdFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetReplicatedName_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> unique_name;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetReplicatedName_Params_Data>;

  RemoteFrame_SetReplicatedName_Params_Data();
  ~RemoteFrame_SetReplicatedName_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetReplicatedName_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_SetReplicatedName_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data>;

  RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data();
  ~RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetNeedsOcclusionTracking_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t needs_tracking : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetNeedsOcclusionTracking_Params_Data>;

  RemoteFrame_SetNeedsOcclusionTracking_Params_Data();
  ~RemoteFrame_SetNeedsOcclusionTracking_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetNeedsOcclusionTracking_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetNeedsOcclusionTracking_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_Collapse_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t collapsed : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_Collapse_Params_Data>;

  RemoteFrame_Collapse_Params_Data();
  ~RemoteFrame_Collapse_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_Collapse_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_Collapse_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_Focus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_Focus_Params_Data>;

  RemoteFrame_Focus_Params_Data();
  ~RemoteFrame_Focus_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_Focus_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_Focus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t has_gesture : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data>;

  RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data();
  ~RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_BubbleLogicalScroll_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t direction;
  int32_t granularity;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_BubbleLogicalScroll_Params_Data>;

  RemoteFrame_BubbleLogicalScroll_Params_Data();
  ~RemoteFrame_BubbleLogicalScroll_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_BubbleLogicalScroll_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_BubbleLogicalScroll_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_UpdateUserActivationState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t state_update_type;
  int32_t notification_type;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_UpdateUserActivationState_Params_Data>;

  RemoteFrame_UpdateUserActivationState_Params_Data();
  ~RemoteFrame_UpdateUserActivationState_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_UpdateUserActivationState_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_UpdateUserActivationState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetEmbeddingToken_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> embedding_token;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetEmbeddingToken_Params_Data>;

  RemoteFrame_SetEmbeddingToken_Params_Data();
  ~RemoteFrame_SetEmbeddingToken_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetEmbeddingToken_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetEmbeddingToken_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetPageFocus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_focused : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetPageFocus_Params_Data>;

  RemoteFrame_SetPageFocus_Params_Data();
  ~RemoteFrame_SetPageFocus_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetPageFocus_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetPageFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_RenderFallbackContent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_RenderFallbackContent_Params_Data>;

  RemoteFrame_RenderFallbackContent_Params_Data();
  ~RemoteFrame_RenderFallbackContent_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_RenderFallbackContent_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_RenderFallbackContent_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceTimingInfo_Data> timing;
  mojo::internal::Pointer<mojo::internal::String_Data> server_timing_value;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data>;

  RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data();
  ~RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_AddResourceTimingFromChild_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceTimingInfo_Data> timing;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_AddResourceTimingFromChild_Params_Data>;

  RemoteFrame_AddResourceTimingFromChild_Params_Data();
  ~RemoteFrame_AddResourceTimingFromChild_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_AddResourceTimingFromChild_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_AddResourceTimingFromChild_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_ScrollRectToVisible_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::RectF_Data> rect;
  mojo::internal::Pointer<::blink::mojom::internal::ScrollIntoViewParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_ScrollRectToVisible_Params_Data>;

  RemoteFrame_ScrollRectToVisible_Params_Data();
  ~RemoteFrame_ScrollRectToVisible_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_ScrollRectToVisible_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_ScrollRectToVisible_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidStartLoading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DidStartLoading_Params_Data>;

  RemoteFrame_DidStartLoading_Params_Data();
  ~RemoteFrame_DidStartLoading_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidStartLoading_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DidStartLoading_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidStopLoading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DidStopLoading_Params_Data>;

  RemoteFrame_DidStopLoading_Params_Data();
  ~RemoteFrame_DidStopLoading_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidStopLoading_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DidStopLoading_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::IntrinsicSizingInfo_Data> sizing_info;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data>;

  RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data();
  ~RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidSetFramePolicyHeaders_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t sandbox_flags;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::blink::mojom::internal::ParsedPermissionsPolicyDeclaration_Data>>> parsed_permissions_policy;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DidSetFramePolicyHeaders_Params_Data>;

  RemoteFrame_DidSetFramePolicyHeaders_Params_Data();
  ~RemoteFrame_DidSetFramePolicyHeaders_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidSetFramePolicyHeaders_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_DidSetFramePolicyHeaders_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidUpdateFramePolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::FramePolicy_Data> frame_policy;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DidUpdateFramePolicy_Params_Data>;

  RemoteFrame_DidUpdateFramePolicy_Params_Data();
  ~RemoteFrame_DidUpdateFramePolicy_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidUpdateFramePolicy_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_DidUpdateFramePolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_UpdateOpener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::blink::mojom::internal::FrameToken_Data opener_frame_token;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_UpdateOpener_Params_Data>;

  RemoteFrame_UpdateOpener_Params_Data();
  ~RemoteFrame_UpdateOpener_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_UpdateOpener_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_UpdateOpener_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DetachAndDispose_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DetachAndDispose_Params_Data>;

  RemoteFrame_DetachAndDispose_Params_Data();
  ~RemoteFrame_DetachAndDispose_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DetachAndDispose_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DetachAndDispose_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_EnableAutoResize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> min_size;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> max_size;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_EnableAutoResize_Params_Data>;

  RemoteFrame_EnableAutoResize_Params_Data();
  ~RemoteFrame_EnableAutoResize_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_EnableAutoResize_Params_Data) == 24,
              "Bad sizeof(RemoteFrame_EnableAutoResize_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DisableAutoResize_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DisableAutoResize_Params_Data>;

  RemoteFrame_DisableAutoResize_Params_Data();
  ~RemoteFrame_DisableAutoResize_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DisableAutoResize_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_DisableAutoResize_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_DidUpdateVisualProperties_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::cc::mojom::internal::RenderFrameMetadata_Data> metadata;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_DidUpdateVisualProperties_Params_Data>;

  RemoteFrame_DidUpdateVisualProperties_Params_Data();
  ~RemoteFrame_DidUpdateVisualProperties_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_DidUpdateVisualProperties_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_DidUpdateVisualProperties_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_SetFrameSinkId_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::viz::mojom::internal::FrameSinkId_Data> frame_sink_id;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_SetFrameSinkId_Params_Data>;

  RemoteFrame_SetFrameSinkId_Params_Data();
  ~RemoteFrame_SetFrameSinkId_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_SetFrameSinkId_Params_Data) == 16,
              "Bad sizeof(RemoteFrame_SetFrameSinkId_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_ChildProcessGone_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_ChildProcessGone_Params_Data>;

  RemoteFrame_ChildProcessGone_Params_Data();
  ~RemoteFrame_ChildProcessGone_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_ChildProcessGone_Params_Data) == 8,
              "Bad sizeof(RemoteFrame_ChildProcessGone_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteFrame_CreateRemoteChild_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> token;
  ::blink::mojom::internal::FrameToken_Data opener_frame_token;
  int32_t tree_scope_type;
  uint8_t pad2_[4];
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> replication_state;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> devtools_frame_token;
  mojo::internal::Pointer<internal::RemoteFrameInterfacesFromBrowser_Data> remote_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<RemoteFrame_CreateRemoteChild_Params_Data>;

  RemoteFrame_CreateRemoteChild_Params_Data();
  ~RemoteFrame_CreateRemoteChild_Params_Data() = delete;
};
static_assert(sizeof(RemoteFrame_CreateRemoteChild_Params_Data) == 64,
              "Bad sizeof(RemoteFrame_CreateRemoteChild_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::TextAutosizerPageInfo_Data> page_info;

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data>;

  RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data();
  ~RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data() = delete;
};
static_assert(sizeof(RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data) == 16,
              "Bad sizeof(RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrameHost_FocusPage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrameHost_FocusPage_Params_Data>;

  RemoteMainFrameHost_FocusPage_Params_Data();
  ~RemoteMainFrameHost_FocusPage_Params_Data() = delete;
};
static_assert(sizeof(RemoteMainFrameHost_FocusPage_Params_Data) == 8,
              "Bad sizeof(RemoteMainFrameHost_FocusPage_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrameHost_TakeFocus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t reverse : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrameHost_TakeFocus_Params_Data>;

  RemoteMainFrameHost_TakeFocus_Params_Data();
  ~RemoteMainFrameHost_TakeFocus_Params_Data() = delete;
};
static_assert(sizeof(RemoteMainFrameHost_TakeFocus_Params_Data) == 16,
              "Bad sizeof(RemoteMainFrameHost_TakeFocus_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrameHost_UpdateTargetURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrameHost_UpdateTargetURL_Params_Data>;

  RemoteMainFrameHost_UpdateTargetURL_Params_Data();
  ~RemoteMainFrameHost_UpdateTargetURL_Params_Data() = delete;
};
static_assert(sizeof(RemoteMainFrameHost_UpdateTargetURL_Params_Data) == 16,
              "Bad sizeof(RemoteMainFrameHost_UpdateTargetURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data>;

  RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data();
  ~RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data() = delete;
};
static_assert(sizeof(RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data) == 8,
              "Bad sizeof(RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) RemoteMainFrameHost_RouteCloseEvent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RemoteMainFrameHost_RouteCloseEvent_Params_Data>;

  RemoteMainFrameHost_RouteCloseEvent_Params_Data();
  ~RemoteMainFrameHost_RouteCloseEvent_Params_Data() = delete;
};
static_assert(sizeof(RemoteMainFrameHost_RouteCloseEvent_Params_Data) == 8,
              "Bad sizeof(RemoteMainFrameHost_RouteCloseEvent_Params_Data)");

}  // namespace internal


class RemoteFrameHost_SetInheritedEffectiveTouchAction_ParamsDataView {
 public:
  RemoteFrameHost_SetInheritedEffectiveTouchAction_ParamsDataView() = default;

  RemoteFrameHost_SetInheritedEffectiveTouchAction_ParamsDataView(
      internal::RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadTouchAction(UserType* output) const {
    auto data_value = data_->touch_action;
    return mojo::internal::Deserialize<::cc::mojom::TouchAction>(
        data_value, output);
  }
  ::cc::mojom::TouchAction touch_action() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::cc::mojom::TouchAction>(data_->touch_action));
  }
 private:
  internal::RemoteFrameHost_SetInheritedEffectiveTouchAction_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_UpdateRenderThrottlingStatus_ParamsDataView {
 public:
  RemoteFrameHost_UpdateRenderThrottlingStatus_ParamsDataView() = default;

  RemoteFrameHost_UpdateRenderThrottlingStatus_ParamsDataView(
      internal::RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_throttled() const {
    return data_->is_throttled;
  }
  bool subtree_throttled() const {
    return data_->subtree_throttled;
  }
  bool display_locked() const {
    return data_->display_locked;
  }
 private:
  internal::RemoteFrameHost_UpdateRenderThrottlingStatus_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_VisibilityChanged_ParamsDataView {
 public:
  RemoteFrameHost_VisibilityChanged_ParamsDataView() = default;

  RemoteFrameHost_VisibilityChanged_ParamsDataView(
      internal::RemoteFrameHost_VisibilityChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadVisibility(UserType* output) const {
    auto data_value = data_->visibility;
    return mojo::internal::Deserialize<::blink::mojom::FrameVisibility>(
        data_value, output);
  }
  ::blink::mojom::FrameVisibility visibility() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FrameVisibility>(data_->visibility));
  }
 private:
  internal::RemoteFrameHost_VisibilityChanged_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_DidFocusFrame_ParamsDataView {
 public:
  RemoteFrameHost_DidFocusFrame_ParamsDataView() = default;

  RemoteFrameHost_DidFocusFrame_ParamsDataView(
      internal::RemoteFrameHost_DidFocusFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrameHost_DidFocusFrame_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_CheckCompleted_ParamsDataView {
 public:
  RemoteFrameHost_CheckCompleted_ParamsDataView() = default;

  RemoteFrameHost_CheckCompleted_ParamsDataView(
      internal::RemoteFrameHost_CheckCompleted_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrameHost_CheckCompleted_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_ParamsDataView {
 public:
  RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_ParamsDataView() = default;

  RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_ParamsDataView(
      internal::RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClipRect(UserType* output) {
    
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGuid(UserType* output) {
    
    auto* pointer = data_->guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_SetIsInert_ParamsDataView {
 public:
  RemoteFrameHost_SetIsInert_ParamsDataView() = default;

  RemoteFrameHost_SetIsInert_ParamsDataView(
      internal::RemoteFrameHost_SetIsInert_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool inert() const {
    return data_->inert;
  }
 private:
  internal::RemoteFrameHost_SetIsInert_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_DidChangeOpener_ParamsDataView {
 public:
  RemoteFrameHost_DidChangeOpener_ParamsDataView() = default;

  RemoteFrameHost_DidChangeOpener_ParamsDataView(
      internal::RemoteFrameHost_DidChangeOpener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOpenerFrameDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrame(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::LocalFrameTokenDataView, UserType>(),
    "Attempting to read the optional `opener_frame` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOpenerFrame` instead "
    "of `ReadOpenerFrame if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->opener_frame.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_DidChangeOpener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_AdvanceFocus_ParamsDataView {
 public:
  RemoteFrameHost_AdvanceFocus_ParamsDataView() = default;

  RemoteFrameHost_AdvanceFocus_ParamsDataView(
      internal::RemoteFrameHost_AdvanceFocus_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFocusType(UserType* output) const {
    auto data_value = data_->focus_type;
    return mojo::internal::Deserialize<::blink::mojom::FocusType>(
        data_value, output);
  }
  ::blink::mojom::FocusType focus_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::FocusType>(data_->focus_type));
  }
  inline void GetSourceFrameTokenDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFrameToken(UserType* output) {
    
    auto* pointer = data_->source_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_AdvanceFocus_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_RouteMessageEvent_ParamsDataView {
 public:
  RemoteFrameHost_RouteMessageEvent_ParamsDataView() = default;

  RemoteFrameHost_RouteMessageEvent_ParamsDataView(
      internal::RemoteFrameHost_RouteMessageEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSourceFrameTokenDataView(
      ::blink::mojom::LocalFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::LocalFrameTokenDataView, UserType>(),
    "Attempting to read the optional `source_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSourceFrameToken` instead "
    "of `ReadSourceFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->source_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::LocalFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSourceOriginDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceOrigin(UserType* output) {
    
    auto* pointer = data_->source_origin.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetTargetOriginDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTargetOrigin(UserType* output) {
    
    auto* pointer = data_->target_origin.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      ::blink::mojom::TransferableMessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::blink::mojom::TransferableMessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_RouteMessageEvent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_PrintCrossProcessSubframe_ParamsDataView {
 public:
  RemoteFrameHost_PrintCrossProcessSubframe_ParamsDataView() = default;

  RemoteFrameHost_PrintCrossProcessSubframe_ParamsDataView(
      internal::RemoteFrameHost_PrintCrossProcessSubframe_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameContentRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameContentRect(UserType* output) {
    
    auto* pointer = data_->frame_content_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  int32_t document_cookie() const {
    return data_->document_cookie;
  }
 private:
  internal::RemoteFrameHost_PrintCrossProcessSubframe_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_Detach_ParamsDataView {
 public:
  RemoteFrameHost_Detach_ParamsDataView() = default;

  RemoteFrameHost_Detach_ParamsDataView(
      internal::RemoteFrameHost_Detach_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrameHost_Detach_Params_Data* data_ = nullptr;
};



class RemoteFrameHost_UpdateViewportIntersection_ParamsDataView {
 public:
  RemoteFrameHost_UpdateViewportIntersection_ParamsDataView() = default;

  RemoteFrameHost_UpdateViewportIntersection_ParamsDataView(
      internal::RemoteFrameHost_UpdateViewportIntersection_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIntersectionStateDataView(
      ::blink::mojom::ViewportIntersectionStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIntersectionState(UserType* output) {
    
    auto* pointer = data_->intersection_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::ViewportIntersectionStateDataView>(
        pointer, output, message_);
  }
  inline void GetVisualPropertiesDataView(
      ::blink::mojom::FrameVisualPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVisualProperties(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FrameVisualPropertiesDataView, UserType>(),
    "Attempting to read the optional `visual_properties` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadVisualProperties` instead "
    "of `ReadVisualProperties if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->visual_properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameVisualPropertiesDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_UpdateViewportIntersection_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_SynchronizeVisualProperties_ParamsDataView {
 public:
  RemoteFrameHost_SynchronizeVisualProperties_ParamsDataView() = default;

  RemoteFrameHost_SynchronizeVisualProperties_ParamsDataView(
      internal::RemoteFrameHost_SynchronizeVisualProperties_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      ::blink::mojom::FrameVisualPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProperties(UserType* output) {
    
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameVisualPropertiesDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_SynchronizeVisualProperties_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrameHost_OpenURL_ParamsDataView {
 public:
  RemoteFrameHost_OpenURL_ParamsDataView() = default;

  RemoteFrameHost_OpenURL_ParamsDataView(
      internal::RemoteFrameHost_OpenURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      OpenURLParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::OpenURLParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrameHost_OpenURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_WillEnterFullscreen_ParamsDataView {
 public:
  RemoteFrame_WillEnterFullscreen_ParamsDataView() = default;

  RemoteFrame_WillEnterFullscreen_ParamsDataView(
      internal::RemoteFrame_WillEnterFullscreen_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOptionsDataView(
      ::blink::mojom::FullscreenOptionsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<::blink::mojom::FullscreenOptionsDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_WillEnterFullscreen_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView {
 public:
  RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView() = default;

  RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView(
      internal::RemoteFrame_EnforceInsecureNavigationsSet_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSetDataView(
      mojo::ArrayDataView<uint32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSet(UserType* output) {
    
    auto* pointer = data_->set.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint32_t>>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_EnforceInsecureNavigationsSet_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_SetFrameOwnerProperties_ParamsDataView {
 public:
  RemoteFrame_SetFrameOwnerProperties_ParamsDataView() = default;

  RemoteFrame_SetFrameOwnerProperties_ParamsDataView(
      internal::RemoteFrame_SetFrameOwnerProperties_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      ::blink::mojom::FrameOwnerPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProperties(UserType* output) {
    
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameOwnerPropertiesDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_SetFrameOwnerProperties_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_EnforceInsecureRequestPolicy_ParamsDataView {
 public:
  RemoteFrame_EnforceInsecureRequestPolicy_ParamsDataView() = default;

  RemoteFrame_EnforceInsecureRequestPolicy_ParamsDataView(
      internal::RemoteFrame_EnforceInsecureRequestPolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadPolicy(UserType* output) const {
    auto data_value = data_->policy;
    return mojo::internal::Deserialize<::blink::mojom::InsecureRequestPolicy>(
        data_value, output);
  }
  ::blink::mojom::InsecureRequestPolicy policy() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::InsecureRequestPolicy>(data_->policy));
  }
 private:
  internal::RemoteFrame_EnforceInsecureRequestPolicy_Params_Data* data_ = nullptr;
};



class RemoteFrame_SetReplicatedOrigin_ParamsDataView {
 public:
  RemoteFrame_SetReplicatedOrigin_ParamsDataView() = default;

  RemoteFrame_SetReplicatedOrigin_ParamsDataView(
      internal::RemoteFrame_SetReplicatedOrigin_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  bool is_potentially_trustworthy_unique_origin() const {
    return data_->is_potentially_trustworthy_unique_origin;
  }
 private:
  internal::RemoteFrame_SetReplicatedOrigin_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_SetReplicatedIsAdFrame_ParamsDataView {
 public:
  RemoteFrame_SetReplicatedIsAdFrame_ParamsDataView() = default;

  RemoteFrame_SetReplicatedIsAdFrame_ParamsDataView(
      internal::RemoteFrame_SetReplicatedIsAdFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_ad_frame() const {
    return data_->is_ad_frame;
  }
 private:
  internal::RemoteFrame_SetReplicatedIsAdFrame_Params_Data* data_ = nullptr;
};



class RemoteFrame_SetReplicatedName_ParamsDataView {
 public:
  RemoteFrame_SetReplicatedName_ParamsDataView() = default;

  RemoteFrame_SetReplicatedName_ParamsDataView(
      internal::RemoteFrame_SetReplicatedName_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUniqueNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUniqueName(UserType* output) {
    
    auto* pointer = data_->unique_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_SetReplicatedName_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_DispatchLoadEventForFrameOwner_ParamsDataView {
 public:
  RemoteFrame_DispatchLoadEventForFrameOwner_ParamsDataView() = default;

  RemoteFrame_DispatchLoadEventForFrameOwner_ParamsDataView(
      internal::RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DispatchLoadEventForFrameOwner_Params_Data* data_ = nullptr;
};



class RemoteFrame_SetNeedsOcclusionTracking_ParamsDataView {
 public:
  RemoteFrame_SetNeedsOcclusionTracking_ParamsDataView() = default;

  RemoteFrame_SetNeedsOcclusionTracking_ParamsDataView(
      internal::RemoteFrame_SetNeedsOcclusionTracking_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool needs_tracking() const {
    return data_->needs_tracking;
  }
 private:
  internal::RemoteFrame_SetNeedsOcclusionTracking_Params_Data* data_ = nullptr;
};



class RemoteFrame_Collapse_ParamsDataView {
 public:
  RemoteFrame_Collapse_ParamsDataView() = default;

  RemoteFrame_Collapse_ParamsDataView(
      internal::RemoteFrame_Collapse_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool collapsed() const {
    return data_->collapsed;
  }
 private:
  internal::RemoteFrame_Collapse_Params_Data* data_ = nullptr;
};



class RemoteFrame_Focus_ParamsDataView {
 public:
  RemoteFrame_Focus_ParamsDataView() = default;

  RemoteFrame_Focus_ParamsDataView(
      internal::RemoteFrame_Focus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_Focus_Params_Data* data_ = nullptr;
};



class RemoteFrame_SetHadStickyUserActivationBeforeNavigation_ParamsDataView {
 public:
  RemoteFrame_SetHadStickyUserActivationBeforeNavigation_ParamsDataView() = default;

  RemoteFrame_SetHadStickyUserActivationBeforeNavigation_ParamsDataView(
      internal::RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_gesture() const {
    return data_->has_gesture;
  }
 private:
  internal::RemoteFrame_SetHadStickyUserActivationBeforeNavigation_Params_Data* data_ = nullptr;
};



class RemoteFrame_BubbleLogicalScroll_ParamsDataView {
 public:
  RemoteFrame_BubbleLogicalScroll_ParamsDataView() = default;

  RemoteFrame_BubbleLogicalScroll_ParamsDataView(
      internal::RemoteFrame_BubbleLogicalScroll_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadDirection(UserType* output) const {
    auto data_value = data_->direction;
    return mojo::internal::Deserialize<::blink::mojom::ScrollDirection>(
        data_value, output);
  }
  ::blink::mojom::ScrollDirection direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ScrollDirection>(data_->direction));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadGranularity(UserType* output) const {
    auto data_value = data_->granularity;
    return mojo::internal::Deserialize<::ui::mojom::ScrollGranularity>(
        data_value, output);
  }
  ::ui::mojom::ScrollGranularity granularity() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::ScrollGranularity>(data_->granularity));
  }
 private:
  internal::RemoteFrame_BubbleLogicalScroll_Params_Data* data_ = nullptr;
};



class RemoteFrame_UpdateUserActivationState_ParamsDataView {
 public:
  RemoteFrame_UpdateUserActivationState_ParamsDataView() = default;

  RemoteFrame_UpdateUserActivationState_ParamsDataView(
      internal::RemoteFrame_UpdateUserActivationState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStateUpdateType(UserType* output) const {
    auto data_value = data_->state_update_type;
    return mojo::internal::Deserialize<::blink::mojom::UserActivationUpdateType>(
        data_value, output);
  }
  ::blink::mojom::UserActivationUpdateType state_update_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::UserActivationUpdateType>(data_->state_update_type));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadNotificationType(UserType* output) const {
    auto data_value = data_->notification_type;
    return mojo::internal::Deserialize<::blink::mojom::UserActivationNotificationType>(
        data_value, output);
  }
  ::blink::mojom::UserActivationNotificationType notification_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::UserActivationNotificationType>(data_->notification_type));
  }
 private:
  internal::RemoteFrame_UpdateUserActivationState_Params_Data* data_ = nullptr;
};



class RemoteFrame_SetEmbeddingToken_ParamsDataView {
 public:
  RemoteFrame_SetEmbeddingToken_ParamsDataView() = default;

  RemoteFrame_SetEmbeddingToken_ParamsDataView(
      internal::RemoteFrame_SetEmbeddingToken_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEmbeddingTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEmbeddingToken(UserType* output) {
    
    auto* pointer = data_->embedding_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_SetEmbeddingToken_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_SetPageFocus_ParamsDataView {
 public:
  RemoteFrame_SetPageFocus_ParamsDataView() = default;

  RemoteFrame_SetPageFocus_ParamsDataView(
      internal::RemoteFrame_SetPageFocus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_focused() const {
    return data_->is_focused;
  }
 private:
  internal::RemoteFrame_SetPageFocus_Params_Data* data_ = nullptr;
};



class RemoteFrame_RenderFallbackContent_ParamsDataView {
 public:
  RemoteFrame_RenderFallbackContent_ParamsDataView() = default;

  RemoteFrame_RenderFallbackContent_ParamsDataView(
      internal::RemoteFrame_RenderFallbackContent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_RenderFallbackContent_Params_Data* data_ = nullptr;
};



class RemoteFrame_RenderFallbackContentWithResourceTiming_ParamsDataView {
 public:
  RemoteFrame_RenderFallbackContentWithResourceTiming_ParamsDataView() = default;

  RemoteFrame_RenderFallbackContentWithResourceTiming_ParamsDataView(
      internal::RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimingDataView(
      ::blink::mojom::ResourceTimingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceTimingInfoDataView>(
        pointer, output, message_);
  }
  inline void GetServerTimingValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServerTimingValue(UserType* output) {
    
    auto* pointer = data_->server_timing_value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_RenderFallbackContentWithResourceTiming_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_AddResourceTimingFromChild_ParamsDataView {
 public:
  RemoteFrame_AddResourceTimingFromChild_ParamsDataView() = default;

  RemoteFrame_AddResourceTimingFromChild_ParamsDataView(
      internal::RemoteFrame_AddResourceTimingFromChild_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimingDataView(
      ::blink::mojom::ResourceTimingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTiming(UserType* output) {
    
    auto* pointer = data_->timing.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceTimingInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_AddResourceTimingFromChild_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_ScrollRectToVisible_ParamsDataView {
 public:
  RemoteFrame_ScrollRectToVisible_ParamsDataView() = default;

  RemoteFrame_ScrollRectToVisible_ParamsDataView(
      internal::RemoteFrame_ScrollRectToVisible_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRect(UserType* output) {
    
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetParamsDataView(
      ::blink::mojom::ScrollIntoViewParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::ScrollIntoViewParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_ScrollRectToVisible_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_DidStartLoading_ParamsDataView {
 public:
  RemoteFrame_DidStartLoading_ParamsDataView() = default;

  RemoteFrame_DidStartLoading_ParamsDataView(
      internal::RemoteFrame_DidStartLoading_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DidStartLoading_Params_Data* data_ = nullptr;
};



class RemoteFrame_DidStopLoading_ParamsDataView {
 public:
  RemoteFrame_DidStopLoading_ParamsDataView() = default;

  RemoteFrame_DidStopLoading_ParamsDataView(
      internal::RemoteFrame_DidStopLoading_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DidStopLoading_Params_Data* data_ = nullptr;
};



class RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView {
 public:
  RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView() = default;

  RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView(
      internal::RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSizingInfoDataView(
      ::blink::mojom::IntrinsicSizingInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSizingInfo(UserType* output) {
    
    auto* pointer = data_->sizing_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::IntrinsicSizingInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_IntrinsicSizingInfoOfChildChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_DidSetFramePolicyHeaders_ParamsDataView {
 public:
  RemoteFrame_DidSetFramePolicyHeaders_ParamsDataView() = default;

  RemoteFrame_DidSetFramePolicyHeaders_ParamsDataView(
      internal::RemoteFrame_DidSetFramePolicyHeaders_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadSandboxFlags(UserType* output) const {
    auto data_value = data_->sandbox_flags;
    return mojo::internal::Deserialize<::network::mojom::WebSandboxFlags>(
        data_value, output);
  }
  ::network::mojom::WebSandboxFlags sandbox_flags() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::WebSandboxFlags>(data_->sandbox_flags));
  }
  inline void GetParsedPermissionsPolicyDataView(
      mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParsedPermissionsPolicy(UserType* output) {
    
    auto* pointer = data_->parsed_permissions_policy.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_DidSetFramePolicyHeaders_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_DidUpdateFramePolicy_ParamsDataView {
 public:
  RemoteFrame_DidUpdateFramePolicy_ParamsDataView() = default;

  RemoteFrame_DidUpdateFramePolicy_ParamsDataView(
      internal::RemoteFrame_DidUpdateFramePolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFramePolicyDataView(
      ::blink::mojom::FramePolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFramePolicy(UserType* output) {
    
    auto* pointer = data_->frame_policy.Get();
    return mojo::internal::Deserialize<::blink::mojom::FramePolicyDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_DidUpdateFramePolicy_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_UpdateOpener_ParamsDataView {
 public:
  RemoteFrame_UpdateOpener_ParamsDataView() = default;

  RemoteFrame_UpdateOpener_ParamsDataView(
      internal::RemoteFrame_UpdateOpener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOpenerFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FrameTokenDataView, UserType>(),
    "Attempting to read the optional `opener_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOpenerFrameToken` instead "
    "of `ReadOpenerFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->opener_frame_token.is_null() ? &data_->opener_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_UpdateOpener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_DetachAndDispose_ParamsDataView {
 public:
  RemoteFrame_DetachAndDispose_ParamsDataView() = default;

  RemoteFrame_DetachAndDispose_ParamsDataView(
      internal::RemoteFrame_DetachAndDispose_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DetachAndDispose_Params_Data* data_ = nullptr;
};



class RemoteFrame_EnableAutoResize_ParamsDataView {
 public:
  RemoteFrame_EnableAutoResize_ParamsDataView() = default;

  RemoteFrame_EnableAutoResize_ParamsDataView(
      internal::RemoteFrame_EnableAutoResize_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMinSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMinSize(UserType* output) {
    
    auto* pointer = data_->min_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetMaxSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMaxSize(UserType* output) {
    
    auto* pointer = data_->max_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_EnableAutoResize_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_DisableAutoResize_ParamsDataView {
 public:
  RemoteFrame_DisableAutoResize_ParamsDataView() = default;

  RemoteFrame_DisableAutoResize_ParamsDataView(
      internal::RemoteFrame_DisableAutoResize_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_DisableAutoResize_Params_Data* data_ = nullptr;
};



class RemoteFrame_DidUpdateVisualProperties_ParamsDataView {
 public:
  RemoteFrame_DidUpdateVisualProperties_ParamsDataView() = default;

  RemoteFrame_DidUpdateVisualProperties_ParamsDataView(
      internal::RemoteFrame_DidUpdateVisualProperties_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMetadataDataView(
      ::cc::mojom::RenderFrameMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMetadata(UserType* output) {
    
    auto* pointer = data_->metadata.Get();
    return mojo::internal::Deserialize<::cc::mojom::RenderFrameMetadataDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_DidUpdateVisualProperties_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_SetFrameSinkId_ParamsDataView {
 public:
  RemoteFrame_SetFrameSinkId_ParamsDataView() = default;

  RemoteFrame_SetFrameSinkId_ParamsDataView(
      internal::RemoteFrame_SetFrameSinkId_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameSinkIdDataView(
      ::viz::mojom::FrameSinkIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameSinkId(UserType* output) {
    
    auto* pointer = data_->frame_sink_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_SetFrameSinkId_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteFrame_ChildProcessGone_ParamsDataView {
 public:
  RemoteFrame_ChildProcessGone_ParamsDataView() = default;

  RemoteFrame_ChildProcessGone_ParamsDataView(
      internal::RemoteFrame_ChildProcessGone_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteFrame_ChildProcessGone_Params_Data* data_ = nullptr;
};



class RemoteFrame_CreateRemoteChild_ParamsDataView {
 public:
  RemoteFrame_CreateRemoteChild_ParamsDataView() = default;

  RemoteFrame_CreateRemoteChild_ParamsDataView(
      internal::RemoteFrame_CreateRemoteChild_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetOpenerFrameTokenDataView(
      ::blink::mojom::FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOpenerFrameToken(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::FrameTokenDataView, UserType>(),
    "Attempting to read the optional `opener_frame_token` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadOpenerFrameToken` instead "
    "of `ReadOpenerFrameToken if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->opener_frame_token.is_null() ? &data_->opener_frame_token : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTreeScopeType(UserType* output) const {
    auto data_value = data_->tree_scope_type;
    return mojo::internal::Deserialize<::blink::mojom::TreeScopeType>(
        data_value, output);
  }
  ::blink::mojom::TreeScopeType tree_scope_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::TreeScopeType>(data_->tree_scope_type));
  }
  inline void GetReplicationStateDataView(
      ::blink::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReplicationState(UserType* output) {
    
    auto* pointer = data_->replication_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameReplicationStateDataView>(
        pointer, output, message_);
  }
  inline void GetDevtoolsFrameTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDevtoolsFrameToken(UserType* output) {
    
    auto* pointer = data_->devtools_frame_token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetRemoteFrameInterfacesDataView(
      RemoteFrameInterfacesFromBrowserDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromBrowserDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteFrame_CreateRemoteChild_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteMainFrame_UpdateTextAutosizerPageInfo_ParamsDataView {
 public:
  RemoteMainFrame_UpdateTextAutosizerPageInfo_ParamsDataView() = default;

  RemoteMainFrame_UpdateTextAutosizerPageInfo_ParamsDataView(
      internal::RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPageInfoDataView(
      ::blink::mojom::TextAutosizerPageInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPageInfo(UserType* output) {
    
    auto* pointer = data_->page_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::TextAutosizerPageInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteMainFrame_UpdateTextAutosizerPageInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteMainFrameHost_FocusPage_ParamsDataView {
 public:
  RemoteMainFrameHost_FocusPage_ParamsDataView() = default;

  RemoteMainFrameHost_FocusPage_ParamsDataView(
      internal::RemoteMainFrameHost_FocusPage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteMainFrameHost_FocusPage_Params_Data* data_ = nullptr;
};



class RemoteMainFrameHost_TakeFocus_ParamsDataView {
 public:
  RemoteMainFrameHost_TakeFocus_ParamsDataView() = default;

  RemoteMainFrameHost_TakeFocus_ParamsDataView(
      internal::RemoteMainFrameHost_TakeFocus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool reverse() const {
    return data_->reverse;
  }
 private:
  internal::RemoteMainFrameHost_TakeFocus_Params_Data* data_ = nullptr;
};



class RemoteMainFrameHost_UpdateTargetURL_ParamsDataView {
 public:
  RemoteMainFrameHost_UpdateTargetURL_ParamsDataView() = default;

  RemoteMainFrameHost_UpdateTargetURL_ParamsDataView(
      internal::RemoteMainFrameHost_UpdateTargetURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteMainFrameHost_UpdateTargetURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteMainFrameHost_UpdateTargetURL_ResponseParamsDataView {
 public:
  RemoteMainFrameHost_UpdateTargetURL_ResponseParamsDataView() = default;

  RemoteMainFrameHost_UpdateTargetURL_ResponseParamsDataView(
      internal::RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteMainFrameHost_UpdateTargetURL_ResponseParams_Data* data_ = nullptr;
};



class RemoteMainFrameHost_RouteCloseEvent_ParamsDataView {
 public:
  RemoteMainFrameHost_RouteCloseEvent_ParamsDataView() = default;

  RemoteMainFrameHost_RouteCloseEvent_ParamsDataView(
      internal::RemoteMainFrameHost_RouteCloseEvent_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RemoteMainFrameHost_RouteCloseEvent_Params_Data* data_ = nullptr;
};












inline void RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_ParamsDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void RemoteFrameHost_CapturePaintPreviewOfCrossProcessSubframe_ParamsDataView::GetGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}




inline void RemoteFrameHost_DidChangeOpener_ParamsDataView::GetOpenerFrameDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->opener_frame.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}


inline void RemoteFrameHost_AdvanceFocus_ParamsDataView::GetSourceFrameTokenDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->source_frame_token.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}


inline void RemoteFrameHost_RouteMessageEvent_ParamsDataView::GetSourceFrameTokenDataView(
    ::blink::mojom::LocalFrameTokenDataView* output) {
  auto pointer = data_->source_frame_token.Get();
  *output = ::blink::mojom::LocalFrameTokenDataView(pointer, message_);
}
inline void RemoteFrameHost_RouteMessageEvent_ParamsDataView::GetSourceOriginDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->source_origin.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void RemoteFrameHost_RouteMessageEvent_ParamsDataView::GetTargetOriginDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->target_origin.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void RemoteFrameHost_RouteMessageEvent_ParamsDataView::GetMessageDataView(
    ::blink::mojom::TransferableMessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = ::blink::mojom::TransferableMessageDataView(pointer, message_);
}


inline void RemoteFrameHost_PrintCrossProcessSubframe_ParamsDataView::GetFrameContentRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->frame_content_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}




inline void RemoteFrameHost_UpdateViewportIntersection_ParamsDataView::GetIntersectionStateDataView(
    ::blink::mojom::ViewportIntersectionStateDataView* output) {
  auto pointer = data_->intersection_state.Get();
  *output = ::blink::mojom::ViewportIntersectionStateDataView(pointer, message_);
}
inline void RemoteFrameHost_UpdateViewportIntersection_ParamsDataView::GetVisualPropertiesDataView(
    ::blink::mojom::FrameVisualPropertiesDataView* output) {
  auto pointer = data_->visual_properties.Get();
  *output = ::blink::mojom::FrameVisualPropertiesDataView(pointer, message_);
}


inline void RemoteFrameHost_SynchronizeVisualProperties_ParamsDataView::GetPropertiesDataView(
    ::blink::mojom::FrameVisualPropertiesDataView* output) {
  auto pointer = data_->properties.Get();
  *output = ::blink::mojom::FrameVisualPropertiesDataView(pointer, message_);
}


inline void RemoteFrameHost_OpenURL_ParamsDataView::GetParamsDataView(
    OpenURLParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = OpenURLParamsDataView(pointer, message_);
}


inline void RemoteFrame_WillEnterFullscreen_ParamsDataView::GetOptionsDataView(
    ::blink::mojom::FullscreenOptionsDataView* output) {
  auto pointer = data_->options.Get();
  *output = ::blink::mojom::FullscreenOptionsDataView(pointer, message_);
}


inline void RemoteFrame_EnforceInsecureNavigationsSet_ParamsDataView::GetSetDataView(
    mojo::ArrayDataView<uint32_t>* output) {
  auto pointer = data_->set.Get();
  *output = mojo::ArrayDataView<uint32_t>(pointer, message_);
}


inline void RemoteFrame_SetFrameOwnerProperties_ParamsDataView::GetPropertiesDataView(
    ::blink::mojom::FrameOwnerPropertiesDataView* output) {
  auto pointer = data_->properties.Get();
  *output = ::blink::mojom::FrameOwnerPropertiesDataView(pointer, message_);
}




inline void RemoteFrame_SetReplicatedOrigin_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}




inline void RemoteFrame_SetReplicatedName_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void RemoteFrame_SetReplicatedName_ParamsDataView::GetUniqueNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->unique_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
















inline void RemoteFrame_SetEmbeddingToken_ParamsDataView::GetEmbeddingTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->embedding_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}






inline void RemoteFrame_RenderFallbackContentWithResourceTiming_ParamsDataView::GetTimingDataView(
    ::blink::mojom::ResourceTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::blink::mojom::ResourceTimingInfoDataView(pointer, message_);
}
inline void RemoteFrame_RenderFallbackContentWithResourceTiming_ParamsDataView::GetServerTimingValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->server_timing_value.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void RemoteFrame_AddResourceTimingFromChild_ParamsDataView::GetTimingDataView(
    ::blink::mojom::ResourceTimingInfoDataView* output) {
  auto pointer = data_->timing.Get();
  *output = ::blink::mojom::ResourceTimingInfoDataView(pointer, message_);
}


inline void RemoteFrame_ScrollRectToVisible_ParamsDataView::GetRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void RemoteFrame_ScrollRectToVisible_ParamsDataView::GetParamsDataView(
    ::blink::mojom::ScrollIntoViewParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::ScrollIntoViewParamsDataView(pointer, message_);
}






inline void RemoteFrame_IntrinsicSizingInfoOfChildChanged_ParamsDataView::GetSizingInfoDataView(
    ::blink::mojom::IntrinsicSizingInfoDataView* output) {
  auto pointer = data_->sizing_info.Get();
  *output = ::blink::mojom::IntrinsicSizingInfoDataView(pointer, message_);
}


inline void RemoteFrame_DidSetFramePolicyHeaders_ParamsDataView::GetParsedPermissionsPolicyDataView(
    mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>* output) {
  auto pointer = data_->parsed_permissions_policy.Get();
  *output = mojo::ArrayDataView<::blink::mojom::ParsedPermissionsPolicyDeclarationDataView>(pointer, message_);
}


inline void RemoteFrame_DidUpdateFramePolicy_ParamsDataView::GetFramePolicyDataView(
    ::blink::mojom::FramePolicyDataView* output) {
  auto pointer = data_->frame_policy.Get();
  *output = ::blink::mojom::FramePolicyDataView(pointer, message_);
}


inline void RemoteFrame_UpdateOpener_ParamsDataView::GetOpenerFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->opener_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}




inline void RemoteFrame_EnableAutoResize_ParamsDataView::GetMinSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->min_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void RemoteFrame_EnableAutoResize_ParamsDataView::GetMaxSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->max_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}




inline void RemoteFrame_DidUpdateVisualProperties_ParamsDataView::GetMetadataDataView(
    ::cc::mojom::RenderFrameMetadataDataView* output) {
  auto pointer = data_->metadata.Get();
  *output = ::cc::mojom::RenderFrameMetadataDataView(pointer, message_);
}


inline void RemoteFrame_SetFrameSinkId_ParamsDataView::GetFrameSinkIdDataView(
    ::viz::mojom::FrameSinkIdDataView* output) {
  auto pointer = data_->frame_sink_id.Get();
  *output = ::viz::mojom::FrameSinkIdDataView(pointer, message_);
}




inline void RemoteFrame_CreateRemoteChild_ParamsDataView::GetTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void RemoteFrame_CreateRemoteChild_ParamsDataView::GetOpenerFrameTokenDataView(
    ::blink::mojom::FrameTokenDataView* output) {
  auto pointer = &data_->opener_frame_token;
  *output = ::blink::mojom::FrameTokenDataView(pointer, message_);
}
inline void RemoteFrame_CreateRemoteChild_ParamsDataView::GetReplicationStateDataView(
    ::blink::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->replication_state.Get();
  *output = ::blink::mojom::FrameReplicationStateDataView(pointer, message_);
}
inline void RemoteFrame_CreateRemoteChild_ParamsDataView::GetDevtoolsFrameTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->devtools_frame_token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void RemoteFrame_CreateRemoteChild_ParamsDataView::GetRemoteFrameInterfacesDataView(
    RemoteFrameInterfacesFromBrowserDataView* output) {
  auto pointer = data_->remote_frame_interfaces.Get();
  *output = RemoteFrameInterfacesFromBrowserDataView(pointer, message_);
}


inline void RemoteMainFrame_UpdateTextAutosizerPageInfo_ParamsDataView::GetPageInfoDataView(
    ::blink::mojom::TextAutosizerPageInfoDataView* output) {
  auto pointer = data_->page_info.Get();
  *output = ::blink::mojom::TextAutosizerPageInfoDataView(pointer, message_);
}






inline void RemoteMainFrameHost_UpdateTargetURL_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_REMOTE_FRAME_MOJOM_PARAMS_DATA_H_