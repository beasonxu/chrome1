// third_party/blink/public/mojom/frame/policy_container.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_POLICY_CONTAINER_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_POLICY_CONTAINER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PolicyContainerHost_SetReferrerPolicy_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t referrer_policy;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PolicyContainerHost_SetReferrerPolicy_Params_Data>;

  PolicyContainerHost_SetReferrerPolicy_Params_Data();
  ~PolicyContainerHost_SetReferrerPolicy_Params_Data() = delete;
};
static_assert(sizeof(PolicyContainerHost_SetReferrerPolicy_Params_Data) == 16,
              "Bad sizeof(PolicyContainerHost_SetReferrerPolicy_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PolicyContainerHost_AddContentSecurityPolicies_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::network::mojom::internal::ContentSecurityPolicy_Data>>> content_security_policies;

 private:
  friend class mojo::internal::MessageFragment<PolicyContainerHost_AddContentSecurityPolicies_Params_Data>;

  PolicyContainerHost_AddContentSecurityPolicies_Params_Data();
  ~PolicyContainerHost_AddContentSecurityPolicies_Params_Data() = delete;
};
static_assert(sizeof(PolicyContainerHost_AddContentSecurityPolicies_Params_Data) == 16,
              "Bad sizeof(PolicyContainerHost_AddContentSecurityPolicies_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PolicyContainerHost_IssueKeepAliveHandle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PolicyContainerHost_IssueKeepAliveHandle_Params_Data>;

  PolicyContainerHost_IssueKeepAliveHandle_Params_Data();
  ~PolicyContainerHost_IssueKeepAliveHandle_Params_Data() = delete;
};
static_assert(sizeof(PolicyContainerHost_IssueKeepAliveHandle_Params_Data) == 16,
              "Bad sizeof(PolicyContainerHost_IssueKeepAliveHandle_Params_Data)");

}  // namespace internal


class PolicyContainerHost_SetReferrerPolicy_ParamsDataView {
 public:
  PolicyContainerHost_SetReferrerPolicy_ParamsDataView() = default;

  PolicyContainerHost_SetReferrerPolicy_ParamsDataView(
      internal::PolicyContainerHost_SetReferrerPolicy_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReferrerPolicy(UserType* output) const {
    auto data_value = data_->referrer_policy;
    return mojo::internal::Deserialize<::network::mojom::ReferrerPolicy>(
        data_value, output);
  }
  ::network::mojom::ReferrerPolicy referrer_policy() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::ReferrerPolicy>(data_->referrer_policy));
  }
 private:
  internal::PolicyContainerHost_SetReferrerPolicy_Params_Data* data_ = nullptr;
};



class PolicyContainerHost_AddContentSecurityPolicies_ParamsDataView {
 public:
  PolicyContainerHost_AddContentSecurityPolicies_ParamsDataView() = default;

  PolicyContainerHost_AddContentSecurityPolicies_ParamsDataView(
      internal::PolicyContainerHost_AddContentSecurityPolicies_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetContentSecurityPoliciesDataView(
      mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentSecurityPolicies(UserType* output) {
    
    auto* pointer = data_->content_security_policies.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PolicyContainerHost_AddContentSecurityPolicies_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PolicyContainerHost_IssueKeepAliveHandle_ParamsDataView {
 public:
  PolicyContainerHost_IssueKeepAliveHandle_ParamsDataView() = default;

  PolicyContainerHost_IssueKeepAliveHandle_ParamsDataView(
      internal::PolicyContainerHost_IssueKeepAliveHandle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::PolicyContainerHostKeepAliveHandleInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PolicyContainerHost_IssueKeepAliveHandle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void PolicyContainerHost_AddContentSecurityPolicies_ParamsDataView::GetContentSecurityPoliciesDataView(
    mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>* output) {
  auto pointer = data_->content_security_policies.Get();
  *output = mojo::ArrayDataView<::network::mojom::ContentSecurityPolicyDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_POLICY_CONTAINER_MOJOM_PARAMS_DATA_H_