// third_party/blink/public/mojom/frame/pending_beacon.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/frame/pending_beacon.mojom-blink.h"
#include "third_party/blink/renderer/core/core_export.h"


namespace blink {
namespace mojom {
namespace blink {


class CORE_EXPORT PendingBeaconHostInterceptorForTesting : public PendingBeaconHost {
  virtual PendingBeaconHost* GetForwardingInterface() = 0;
  void CreateBeacon(::mojo::PendingReceiver<PendingBeacon> receiver, const ::blink::KURL& url, BeaconMethod method, ::base::TimeDelta timeout) override;
};
class CORE_EXPORT PendingBeaconHostAsyncWaiter {
 public:
  explicit PendingBeaconHostAsyncWaiter(PendingBeaconHost* proxy);

  PendingBeaconHostAsyncWaiter(const PendingBeaconHostAsyncWaiter&) = delete;
  PendingBeaconHostAsyncWaiter& operator=(const PendingBeaconHostAsyncWaiter&) = delete;

  ~PendingBeaconHostAsyncWaiter();

 private:
  PendingBeaconHost* const proxy_;
};


class CORE_EXPORT PendingBeaconInterceptorForTesting : public PendingBeacon {
  virtual PendingBeacon* GetForwardingInterface() = 0;
  void Deactivate() override;
  void SetRequestData(::scoped_refptr<::network::ResourceRequestBody> request_body, const WTF::String& content_type) override;
  void SetRequestURL(const ::blink::KURL& url) override;
  void SendNow() override;
};
class CORE_EXPORT PendingBeaconAsyncWaiter {
 public:
  explicit PendingBeaconAsyncWaiter(PendingBeacon* proxy);

  PendingBeaconAsyncWaiter(const PendingBeaconAsyncWaiter&) = delete;
  PendingBeaconAsyncWaiter& operator=(const PendingBeaconAsyncWaiter&) = delete;

  ~PendingBeaconAsyncWaiter();

 private:
  PendingBeacon* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_PENDING_BEACON_MOJOM_BLINK_TEST_UTILS_H_