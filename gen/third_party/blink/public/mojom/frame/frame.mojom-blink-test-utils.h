// third_party/blink/public/mojom/frame/frame.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_TEST_UTILS_H_

#include "third_party/blink/public/mojom/frame/frame.mojom-blink.h"
#include "third_party/blink/renderer/core/core_export.h"


namespace blink {
namespace mojom {
namespace blink {


class CORE_EXPORT KeepAliveHandleInterceptorForTesting : public KeepAliveHandle {
  virtual KeepAliveHandle* GetForwardingInterface() = 0;
};
class CORE_EXPORT KeepAliveHandleAsyncWaiter {
 public:
  explicit KeepAliveHandleAsyncWaiter(KeepAliveHandle* proxy);

  KeepAliveHandleAsyncWaiter(const KeepAliveHandleAsyncWaiter&) = delete;
  KeepAliveHandleAsyncWaiter& operator=(const KeepAliveHandleAsyncWaiter&) = delete;

  ~KeepAliveHandleAsyncWaiter();

 private:
  KeepAliveHandle* const proxy_;
};


class CORE_EXPORT KeepAliveHandleFactoryInterceptorForTesting : public KeepAliveHandleFactory {
  virtual KeepAliveHandleFactory* GetForwardingInterface() = 0;
  void IssueKeepAliveHandle(::mojo::PendingReceiver<KeepAliveHandle> keep_alive_handle) override;
};
class CORE_EXPORT KeepAliveHandleFactoryAsyncWaiter {
 public:
  explicit KeepAliveHandleFactoryAsyncWaiter(KeepAliveHandleFactory* proxy);

  KeepAliveHandleFactoryAsyncWaiter(const KeepAliveHandleFactoryAsyncWaiter&) = delete;
  KeepAliveHandleFactoryAsyncWaiter& operator=(const KeepAliveHandleFactoryAsyncWaiter&) = delete;

  ~KeepAliveHandleFactoryAsyncWaiter();

 private:
  KeepAliveHandleFactory* const proxy_;
};


class CORE_EXPORT LocalFrameHostInterceptorForTesting : public LocalFrameHost {
  virtual LocalFrameHost* GetForwardingInterface() = 0;
  void EnterFullscreen(::blink::mojom::blink::FullscreenOptionsPtr options, EnterFullscreenCallback callback) override;
  void ExitFullscreen() override;
  void FullscreenStateChanged(bool is_fullscreen, ::blink::mojom::blink::FullscreenOptionsPtr options) override;
  void RegisterProtocolHandler(const WTF::String& scheme, const ::blink::KURL& url, bool user_gesture) override;
  void UnregisterProtocolHandler(const WTF::String& scheme, const ::blink::KURL& url, bool user_gesture) override;
  void DidDisplayInsecureContent() override;
  void DidContainInsecureFormAction() override;
  void MainDocumentElementAvailable(bool uses_temporary_zoom_level) override;
  void SetNeedsOcclusionTracking(bool needs_tracking) override;
  void SetVirtualKeyboardOverlayPolicy(bool vk_overlays_content) override;
  void VisibilityChanged(::blink::mojom::blink::FrameVisibility visibility) override;
  void DidChangeThemeColor(absl::optional<::SkColor> theme_color) override;
  void DidChangeBackgroundColor(::SkColor background_color, bool color_adjust) override;
  void DidFailLoadWithError(const ::blink::KURL& url, int32_t error_code) override;
  void DidFocusFrame() override;
  void DidCallFocus() override;
  void EnforceInsecureRequestPolicy(::blink::mojom::blink::InsecureRequestPolicy policy_bitmap) override;
  void EnforceInsecureNavigationsSet(const WTF::Vector<uint32_t>& set) override;
  void SuddenTerminationDisablerChanged(bool present, ::blink::mojom::blink::SuddenTerminationDisablerType disabler_type) override;
  void HadStickyUserActivationBeforeNavigationChanged(bool has_gesture) override;
  void ScrollRectToVisibleInParentFrame(const ::gfx::RectF& rect_to_scroll, ::blink::mojom::blink::ScrollIntoViewParamsPtr params) override;
  void BubbleLogicalScrollInParentFrame(::blink::mojom::blink::ScrollDirection direction, ::ui::ScrollGranularity granularity) override;
  void DidBlockNavigation(const ::blink::KURL& blocked_url, const ::blink::KURL& initiator_url, ::blink::mojom::blink::NavigationBlockedReason reason) override;
  void DidChangeLoadProgress(double load_progress) override;
  void DidFinishLoad(const ::blink::KURL& validated_url) override;
  void DispatchLoad() override;
  void GoToEntryAtOffset(int32_t offset, bool has_user_gesture) override;
  void NavigateToNavigationApiKey(const WTF::String& key, bool has_user_gesture) override;
  void UpdateTitle(const ::WTF::String& title, ::base::i18n::TextDirection title_direction) override;
  void UpdateUserActivationState(::blink::mojom::blink::UserActivationUpdateType update_type, ::blink::mojom::blink::UserActivationNotificationType notification_type) override;
  void HandleAccessibilityFindInPageResult(FindInPageResultAXParamsPtr params) override;
  void HandleAccessibilityFindInPageTermination() override;
  void DocumentOnLoadCompleted() override;
  void ForwardResourceTimingToParent(::blink::mojom::blink::ResourceTimingInfoPtr timing) override;
  void DidDispatchDOMContentLoadedEvent() override;
  void RunModalAlertDialog(const ::WTF::String& alert_message, bool disable_third_party_subframe_suppresion, RunModalAlertDialogCallback callback) override;
  void RunModalConfirmDialog(const ::WTF::String& alert_message, bool disable_third_party_subframe_suppresion, RunModalConfirmDialogCallback callback) override;
  void RunModalPromptDialog(const ::WTF::String& alert_message, const ::WTF::String& default_value, bool disable_third_party_subframe_suppresion, RunModalPromptDialogCallback callback) override;
  void RunBeforeUnloadConfirm(bool is_reload, RunBeforeUnloadConfirmCallback callback) override;
  void UpdateFaviconURL(WTF::Vector<::blink::mojom::blink::FaviconURLPtr> favicon_urls) override;
  void DownloadURL(DownloadURLParamsPtr params) override;
  void FocusedElementChanged(bool is_editable_element, const ::gfx::Rect& bounds_in_frame_widget, ::blink::mojom::blink::FocusType focus_type) override;
  void TextSelectionChanged(const ::WTF::String& text, uint32_t offset, const ::gfx::Range& range) override;
  void ShowPopupMenu(::mojo::PendingRemote<::blink::mojom::blink::PopupMenuClient> popup_client, const ::gfx::Rect& bounds, int32_t item_height, double font_size, int32_t selected_item, WTF::Vector<::blink::mojom::blink::MenuItemPtr> menu_items, bool right_aligned, bool allow_multiple_selection) override;
  void CreateNewPopupWidget(::mojo::PendingAssociatedReceiver<::blink::mojom::blink::PopupWidgetHost> popup_host, ::mojo::PendingAssociatedReceiver<::blink::mojom::blink::WidgetHost> blink_widget_host, ::mojo::PendingAssociatedRemote<::blink::mojom::blink::Widget> blink_widget) override;
  void ShowContextMenu(::mojo::PendingAssociatedRemote<::blink::mojom::blink::ContextMenuClient> client, const ::blink::UntrustworthyContextMenuParams& params) override;
  void DidLoadResourceFromMemoryCache(const ::blink::KURL& url, const WTF::String& http_method, const WTF::String& mime_type, ::network::mojom::blink::RequestDestination request_destination, bool include_credentials) override;
  void DidChangeFrameOwnerProperties(const ::blink::FrameToken& child_frame_token, ::blink::mojom::blink::FrameOwnerPropertiesPtr frame_owner_properties) override;
  void DidChangeOpener(const absl::optional<::blink::LocalFrameToken>& opener_frame) override;
  void DidChangeFramePolicy(const ::blink::FrameToken& child_frame_token, const ::blink::FramePolicy& frame_policy) override;
  void DidChangeIframeAttributes(const ::blink::FrameToken& child_frame_token, IframeAttributesPtr attributes) override;
  void CapturePaintPreviewOfSubframe(const ::gfx::Rect& clip_rect, const ::base::UnguessableToken& guid) override;
  void SetCloseListener(::mojo::PendingRemote<::blink::mojom::blink::CloseListener> listener) override;
  void Detach() override;
  void GetKeepAliveHandleFactory(::mojo::PendingReceiver<KeepAliveHandleFactory> factory) override;
  void DidAddMessageToConsole(::blink::mojom::blink::ConsoleMessageLevel log_level, const ::WTF::String& msg, uint32_t line_number, const ::WTF::String& source_id, const ::WTF::String& untrusted_stack_trace) override;
  void FrameSizeChanged(const ::gfx::Size& size) override;
  void DidInferColorScheme(::blink::mojom::blink::PreferredColorScheme color_scheme) override;
  void DidChangeSrcDoc(const ::blink::FrameToken& child_frame_token, const WTF::String& srcdoc_value) override;
  void ReceivedDelegatedCapability(::blink::mojom::blink::DelegatedCapability delegated_capability) override;
  void CreatePortal(::mojo::PendingAssociatedReceiver<::blink::mojom::blink::Portal> portal, ::mojo::PendingAssociatedRemote<::blink::mojom::blink::PortalClient> client, ::blink::mojom::blink::RemoteFrameInterfacesFromRendererPtr remote_frame_interfaces, CreatePortalCallback callback) override;
  void AdoptPortal(const ::blink::PortalToken& portal_token, ::blink::mojom::blink::RemoteFrameInterfacesFromRendererPtr remote_frame_interfaces, AdoptPortalCallback callback) override;
  void CreateFencedFrame(::mojo::PendingAssociatedReceiver<::blink::mojom::blink::FencedFrameOwnerHost> fenced_frame, ::blink::mojom::blink::FencedFrameMode mode, ::blink::mojom::blink::RemoteFrameInterfacesFromRendererPtr remote_frame_interfaces, const ::blink::RemoteFrameToken& frame_token, const ::base::UnguessableToken& devtools_frame_token) override;
};
class CORE_EXPORT LocalFrameHostAsyncWaiter {
 public:
  explicit LocalFrameHostAsyncWaiter(LocalFrameHost* proxy);

  LocalFrameHostAsyncWaiter(const LocalFrameHostAsyncWaiter&) = delete;
  LocalFrameHostAsyncWaiter& operator=(const LocalFrameHostAsyncWaiter&) = delete;

  ~LocalFrameHostAsyncWaiter();
  void EnterFullscreen(
      ::blink::mojom::blink::FullscreenOptionsPtr options, bool* out_granted);
  void RunModalAlertDialog(
      const ::WTF::String& alert_message, bool disable_third_party_subframe_suppresion);
  void RunModalConfirmDialog(
      const ::WTF::String& alert_message, bool disable_third_party_subframe_suppresion, bool* out_success);
  void RunModalPromptDialog(
      const ::WTF::String& alert_message, const ::WTF::String& default_value, bool disable_third_party_subframe_suppresion, bool* out_success, ::WTF::String* out_result);
  void RunBeforeUnloadConfirm(
      bool is_reload, bool* out_success);
  void CreatePortal(
      ::mojo::PendingAssociatedReceiver<::blink::mojom::blink::Portal> portal, ::mojo::PendingAssociatedRemote<::blink::mojom::blink::PortalClient> client, ::blink::mojom::blink::RemoteFrameInterfacesFromRendererPtr remote_frame_interfaces, ::blink::mojom::blink::FrameReplicationStatePtr* out_initial_replicated_state, ::blink::PortalToken* out_portal_token, ::blink::RemoteFrameToken* out_frame_token, ::base::UnguessableToken* out_devtools_frame_token);
  void AdoptPortal(
      const ::blink::PortalToken& portal_token, ::blink::mojom::blink::RemoteFrameInterfacesFromRendererPtr remote_frame_interfaces, ::blink::mojom::blink::FrameReplicationStatePtr* out_replicated_state, ::blink::RemoteFrameToken* out_frame_token, ::base::UnguessableToken* out_devtools_frame_token);

 private:
  LocalFrameHost* const proxy_;
};


class CORE_EXPORT LocalFrameInterceptorForTesting : public LocalFrame {
  virtual LocalFrame* GetForwardingInterface() = 0;
  void GetTextSurroundingSelection(uint32_t max_length, GetTextSurroundingSelectionCallback callback) override;
  void SendInterventionReport(const WTF::String& id, const WTF::String& message) override;
  void SetFrameOwnerProperties(::blink::mojom::blink::FrameOwnerPropertiesPtr properties) override;
  void NotifyUserActivation(::blink::mojom::blink::UserActivationNotificationType notification_type) override;
  void NotifyVirtualKeyboardOverlayRect(const ::gfx::Rect& keyboard_rect) override;
  void AddMessageToConsole(::blink::mojom::blink::ConsoleMessageLevel level, const WTF::String& message, bool discard_duplicates) override;
  void AddInspectorIssue(::blink::mojom::blink::InspectorIssueInfoPtr info) override;
  void SwapInImmediately() override;
  void CheckCompleted() override;
  void StopLoading() override;
  void Collapse(bool collapsed) override;
  void EnableViewSourceMode() override;
  void Focus() override;
  void ClearFocusedElement() override;
  void GetResourceSnapshotForWebBundle(::mojo::PendingReceiver<::data_decoder::mojom::blink::ResourceSnapshotForWebBundle> receiver) override;
  void CopyImageAt(const ::gfx::Point& window_point) override;
  void SaveImageAt(const ::gfx::Point& window_point) override;
  void ReportBlinkFeatureUsage(const WTF::Vector<::blink::mojom::blink::WebFeature>& features) override;
  void RenderFallbackContent() override;
  void RenderFallbackContentWithResourceTiming(::blink::mojom::blink::ResourceTimingInfoPtr timing, const WTF::String& server_timing_value) override;
  void BeforeUnload(bool is_reload, BeforeUnloadCallback callback) override;
  void MediaPlayerActionAt(const ::gfx::Point& location, ::blink::mojom::blink::MediaPlayerActionPtr action) override;
  void PluginActionAt(const ::gfx::Point& location, PluginActionType action) override;
  void AdvanceFocusInFrame(::blink::mojom::blink::FocusType focus_type, const absl::optional<::blink::RemoteFrameToken>& source_frame_token) override;
  void AdvanceFocusForIME(::blink::mojom::blink::FocusType focus_type) override;
  void ReportContentSecurityPolicyViolation(::network::mojom::blink::CSPViolationPtr violation) override;
  void DidUpdateFramePolicy(const ::blink::FramePolicy& frame_policy) override;
  void PostMessageEvent(const absl::optional<::blink::RemoteFrameToken>& source_frame_token, const ::WTF::String& source_origin, const ::WTF::String& target_origin, ::blink::BlinkTransferableMessage message) override;
  void JavaScriptMethodExecuteRequest(const ::WTF::String& object_name, const ::WTF::String& method_name, ::base::Value::List arguments, bool wants_result, JavaScriptMethodExecuteRequestCallback callback) override;
  void JavaScriptExecuteRequest(const ::WTF::String& javascript, bool wants_result, JavaScriptExecuteRequestCallback callback) override;
  void JavaScriptExecuteRequestForTests(const ::WTF::String& javascript, bool has_user_gesture, bool resolve_promises, int32_t world_id, JavaScriptExecuteRequestForTestsCallback callback) override;
  void JavaScriptExecuteRequestInIsolatedWorld(const ::WTF::String& javascript, bool wants_result, int32_t world_id, JavaScriptExecuteRequestInIsolatedWorldCallback callback) override;
  void BindReportingObserver(::mojo::PendingReceiver<::blink::mojom::blink::ReportingObserver> receiver) override;
  void UpdateOpener(const absl::optional<::blink::FrameToken>& opener_frame_token) override;
  void GetSavableResourceLinks(GetSavableResourceLinksCallback callback) override;
  void MixedContentFound(const ::blink::KURL& main_resource_url, const ::blink::KURL& mixed_content_url, ::blink::mojom::blink::RequestContextType request_context, bool was_allowed, const ::blink::KURL& url_before_redirects, bool had_redirect, ::network::mojom::blink::SourceLocationPtr source_location) override;
  void BindDevToolsAgent(::mojo::PendingAssociatedRemote<::blink::mojom::blink::DevToolsAgentHost> agent_host, ::mojo::PendingAssociatedReceiver<::blink::mojom::blink::DevToolsAgent> agent) override;
  void ExtractSmartClipData(const ::gfx::Rect& rect, ExtractSmartClipDataCallback callback) override;
  void HandleRendererDebugURL(const ::blink::KURL& url) override;
  void GetCanonicalUrlForSharing(GetCanonicalUrlForSharingCallback callback) override;
  void GetOpenGraphMetadata(GetOpenGraphMetadataCallback callback) override;
  void SetNavigationApiHistoryEntriesForRestore(::blink::mojom::blink::NavigationApiHistoryEntryArraysPtr entry_arrays) override;
};
class CORE_EXPORT LocalFrameAsyncWaiter {
 public:
  explicit LocalFrameAsyncWaiter(LocalFrame* proxy);

  LocalFrameAsyncWaiter(const LocalFrameAsyncWaiter&) = delete;
  LocalFrameAsyncWaiter& operator=(const LocalFrameAsyncWaiter&) = delete;

  ~LocalFrameAsyncWaiter();
  void GetTextSurroundingSelection(
      uint32_t max_length, ::WTF::String* out_content, uint32_t* out_start_offset, uint32_t* out_end_offset);
  void BeforeUnload(
      bool is_reload, bool* out_proceed, ::base::TimeTicks* out_before_unload_start_time, ::base::TimeTicks* out_before_unload_end_time);
  void JavaScriptMethodExecuteRequest(
      const ::WTF::String& object_name, const ::WTF::String& method_name, ::base::Value::List arguments, bool wants_result, ::base::Value* out_result);
  void JavaScriptExecuteRequest(
      const ::WTF::String& javascript, bool wants_result, ::base::Value* out_result);
  void JavaScriptExecuteRequestForTests(
      const ::WTF::String& javascript, bool has_user_gesture, bool resolve_promises, int32_t world_id, JavaScriptExecutionResultType* out_result_type, ::base::Value* out_result);
  void JavaScriptExecuteRequestInIsolatedWorld(
      const ::WTF::String& javascript, bool wants_result, int32_t world_id, ::base::Value* out_result);
  void GetSavableResourceLinks(
      GetSavableResourceLinksReplyPtr* out_reply);
  void ExtractSmartClipData(
      const ::gfx::Rect& rect, ::WTF::String* out_text, ::WTF::String* out_html, ::gfx::Rect* out_clip_rect);
  void GetCanonicalUrlForSharing(
      absl::optional<::blink::KURL>* out_canonical_url);
  void GetOpenGraphMetadata(
      ::blink::mojom::blink::OpenGraphMetadataPtr* out_metadata);

 private:
  LocalFrame* const proxy_;
};


class CORE_EXPORT HighPriorityLocalFrameInterceptorForTesting : public HighPriorityLocalFrame {
  virtual HighPriorityLocalFrame* GetForwardingInterface() = 0;
  void DispatchBeforeUnload(bool is_reload, DispatchBeforeUnloadCallback callback) override;
};
class CORE_EXPORT HighPriorityLocalFrameAsyncWaiter {
 public:
  explicit HighPriorityLocalFrameAsyncWaiter(HighPriorityLocalFrame* proxy);

  HighPriorityLocalFrameAsyncWaiter(const HighPriorityLocalFrameAsyncWaiter&) = delete;
  HighPriorityLocalFrameAsyncWaiter& operator=(const HighPriorityLocalFrameAsyncWaiter&) = delete;

  ~HighPriorityLocalFrameAsyncWaiter();
  void DispatchBeforeUnload(
      bool is_reload, bool* out_proceed, ::base::TimeTicks* out_before_unload_start_time, ::base::TimeTicks* out_before_unload_end_time);

 private:
  HighPriorityLocalFrame* const proxy_;
};


class CORE_EXPORT LocalMainFrameInterceptorForTesting : public LocalMainFrame {
  virtual LocalMainFrame* GetForwardingInterface() = 0;
  void AnimateDoubleTapZoom(const ::gfx::Point& point, const ::gfx::Rect& rect) override;
  void SetScaleFactor(float scale) override;
  void ClosePage(ClosePageCallback callback) override;
  void SetInitialFocus(bool reverse) override;
  void EnablePreferredSizeChangedMode() override;
  void ZoomToFindInPageRect(const ::gfx::Rect& rect_in_root_frame) override;
  void InstallCoopAccessMonitor(const ::blink::FrameToken& accessed_window, ::network::mojom::blink::CrossOriginOpenerPolicyReporterParamsPtr coop_reporter_info) override;
  void OnPortalActivated(const ::blink::PortalToken& portal_token, ::mojo::PendingAssociatedRemote<::blink::mojom::blink::Portal> portal, ::mojo::PendingAssociatedReceiver<::blink::mojom::blink::PortalClient> portal_client, ::blink::BlinkTransferableMessage data, uint64_t trace_id, OnPortalActivatedCallback callback) override;
  void ForwardMessageFromHost(::blink::BlinkTransferableMessage message, const ::scoped_refptr<const ::blink::SecurityOrigin>& source_origin) override;
  void UpdateBrowserControlsState(::cc::BrowserControlsState constraints, ::cc::BrowserControlsState current, bool animate) override;
};
class CORE_EXPORT LocalMainFrameAsyncWaiter {
 public:
  explicit LocalMainFrameAsyncWaiter(LocalMainFrame* proxy);

  LocalMainFrameAsyncWaiter(const LocalMainFrameAsyncWaiter&) = delete;
  LocalMainFrameAsyncWaiter& operator=(const LocalMainFrameAsyncWaiter&) = delete;

  ~LocalMainFrameAsyncWaiter();
  void ClosePage(
      );
  void OnPortalActivated(
      const ::blink::PortalToken& portal_token, ::mojo::PendingAssociatedRemote<::blink::mojom::blink::Portal> portal, ::mojo::PendingAssociatedReceiver<::blink::mojom::blink::PortalClient> portal_client, ::blink::BlinkTransferableMessage data, uint64_t trace_id, ::blink::mojom::blink::PortalActivateResult* out_result);

 private:
  LocalMainFrame* const proxy_;
};


class CORE_EXPORT LocalMainFrameHostInterceptorForTesting : public LocalMainFrameHost {
  virtual LocalMainFrameHost* GetForwardingInterface() = 0;
  void ScaleFactorChanged(float scale) override;
  void ContentsPreferredSizeChanged(const ::gfx::Size& pref_size) override;
  void TextAutosizerPageInfoChanged(::blink::mojom::blink::TextAutosizerPageInfoPtr page_info) override;
  void FocusPage() override;
  void TakeFocus(bool reverse) override;
  void UpdateTargetURL(const ::blink::KURL& url, UpdateTargetURLCallback callback) override;
  void RequestClose() override;
  void ShowCreatedWindow(const ::blink::LocalFrameToken& opener_frame_token, ::ui::mojom::blink::WindowOpenDisposition disposition, const ::gfx::Rect& rect, bool opened_by_user_gesture, ShowCreatedWindowCallback callback) override;
  void SetWindowRect(const ::gfx::Rect& bounds, SetWindowRectCallback callback) override;
  void DidFirstVisuallyNonEmptyPaint() override;
  void DidAccessInitialMainDocument() override;
};
class CORE_EXPORT LocalMainFrameHostAsyncWaiter {
 public:
  explicit LocalMainFrameHostAsyncWaiter(LocalMainFrameHost* proxy);

  LocalMainFrameHostAsyncWaiter(const LocalMainFrameHostAsyncWaiter&) = delete;
  LocalMainFrameHostAsyncWaiter& operator=(const LocalMainFrameHostAsyncWaiter&) = delete;

  ~LocalMainFrameHostAsyncWaiter();
  void UpdateTargetURL(
      const ::blink::KURL& url);
  void ShowCreatedWindow(
      const ::blink::LocalFrameToken& opener_frame_token, ::ui::mojom::blink::WindowOpenDisposition disposition, const ::gfx::Rect& rect, bool opened_by_user_gesture);
  void SetWindowRect(
      const ::gfx::Rect& bounds);

 private:
  LocalMainFrameHost* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_BLINK_TEST_UTILS_H_