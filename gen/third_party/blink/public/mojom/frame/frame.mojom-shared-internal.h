// third_party/blink/public/mojom/frame/frame.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "cc/mojom/browser_controls_state.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared-internal.h"
#include "mojo/public/mojom/base/text_direction.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "mojo/public/mojom/base/values.mojom-shared-internal.h"
#include "services/data_decoder/public/mojom/resource_snapshot_for_web_bundle.mojom-shared-internal.h"
#include "services/network/public/mojom/content_security_policy.mojom-shared-internal.h"
#include "services/network/public/mojom/cross_origin_opener_policy.mojom-shared-internal.h"
#include "services/network/public/mojom/fetch_api.mojom-shared-internal.h"
#include "services/network/public/mojom/source_location.mojom-shared-internal.h"
#include "skia/public/mojom/skcolor.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/blob/blob.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/blob/blob_url_store.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/choosers/popup_menu.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/close_watcher/close_listener.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/context_menu/context_menu.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/css/preferred_color_scheme.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/devtools/console_message.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/devtools/inspector_issue.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/favicon/favicon_url.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/fenced_frame/fenced_frame.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/fetch/fetch_api_request.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/blocked_navigation_types.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_owner_properties.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/frame_replication_state.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/fullscreen.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/lifecycle.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/media_player_action.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/remote_frame.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/reporting_observer.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/sudden_termination_disabler_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/text_autosizer_page_info.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/user_activation_notification_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/frame/user_activation_update_types.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/input/focus_type.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/input/scroll_direction.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/loader/referrer.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/messaging/delegated_capability.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/messaging/transferable_message.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/navigation/navigation_api_history_entry_arrays.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/opengraph/metadata.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/page/widget.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/portal/portal.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/scroll/scroll_into_view_params.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/security_context/insecure_request_policy.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/timing/resource_timing.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/tokens/tokens.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/use_counter/metrics/web_feature.mojom-shared-internal.h"
#include "third_party/blink/public/mojom/widget/platform_widget.mojom-shared-internal.h"
#include "ui/base/mojom/window_open_disposition.mojom-shared-internal.h"
#include "ui/events/mojom/scroll_granularity.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "ui/gfx/range/mojom/range.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class SavableSubframe_Data;
class GetSavableResourceLinksReply_Data;
class FindInPageResultAXParams_Data;
class DownloadURLParams_Data;
class IframeAttributes_Data;

struct PluginActionType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct JavaScriptExecutionResultType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) SavableSubframe_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> original_url;
  ::blink::mojom::internal::FrameToken_Data subframe_token;

 private:
  friend class mojo::internal::MessageFragment<SavableSubframe_Data>;

  SavableSubframe_Data();
  ~SavableSubframe_Data() = delete;
};
static_assert(sizeof(SavableSubframe_Data) == 32,
              "Bad sizeof(SavableSubframe_Data)");
// Used by SavableSubframe::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SavableSubframe_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SavableSubframe_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SavableSubframe_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SavableSubframe_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SavableSubframe_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) GetSavableResourceLinksReply_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>>> resources_list;
  mojo::internal::Pointer<::blink::mojom::internal::Referrer_Data> referrer;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SavableSubframe_Data>>> subframes;

 private:
  friend class mojo::internal::MessageFragment<GetSavableResourceLinksReply_Data>;

  GetSavableResourceLinksReply_Data();
  ~GetSavableResourceLinksReply_Data() = delete;
};
static_assert(sizeof(GetSavableResourceLinksReply_Data) == 32,
              "Bad sizeof(GetSavableResourceLinksReply_Data)");
// Used by GetSavableResourceLinksReply::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct GetSavableResourceLinksReply_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  GetSavableResourceLinksReply_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~GetSavableResourceLinksReply_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<GetSavableResourceLinksReply_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    GetSavableResourceLinksReply_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) FindInPageResultAXParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t request_id;
  int32_t match_index;
  int32_t start_id;
  int32_t start_offset;
  int32_t end_id;
  int32_t end_offset;

 private:
  friend class mojo::internal::MessageFragment<FindInPageResultAXParams_Data>;

  FindInPageResultAXParams_Data();
  ~FindInPageResultAXParams_Data() = delete;
};
static_assert(sizeof(FindInPageResultAXParams_Data) == 32,
              "Bad sizeof(FindInPageResultAXParams_Data)");
// Used by FindInPageResultAXParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct FindInPageResultAXParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  FindInPageResultAXParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~FindInPageResultAXParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<FindInPageResultAXParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    FindInPageResultAXParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) DownloadURLParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::blink::mojom::internal::Referrer_Data> referrer;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> initiator_origin;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> suggested_name;
  int32_t cross_origin_redirects;
  mojo::internal::Interface_Data blob_url_token;
  mojo::internal::Interface_Data data_url_blob;
  uint8_t is_context_menu_save : 1;
  uint8_t has_user_gesture : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<DownloadURLParams_Data>;

  DownloadURLParams_Data();
  ~DownloadURLParams_Data() = delete;
};
static_assert(sizeof(DownloadURLParams_Data) == 64,
              "Bad sizeof(DownloadURLParams_Data)");
// Used by DownloadURLParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct DownloadURLParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  DownloadURLParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~DownloadURLParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<DownloadURLParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    DownloadURLParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) IframeAttributes_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::network::mojom::internal::ContentSecurityPolicy_Data> parsed_csp_attribute;
  uint8_t anonymous : 1;
  uint8_t pad1_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> id;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> src;

 private:
  friend class mojo::internal::MessageFragment<IframeAttributes_Data>;

  IframeAttributes_Data();
  ~IframeAttributes_Data() = delete;
};
static_assert(sizeof(IframeAttributes_Data) == 48,
              "Bad sizeof(IframeAttributes_Data)");
// Used by IframeAttributes::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct IframeAttributes_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  IframeAttributes_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~IframeAttributes_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<IframeAttributes_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    IframeAttributes_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_FRAME_FRAME_MOJOM_SHARED_INTERNAL_H_