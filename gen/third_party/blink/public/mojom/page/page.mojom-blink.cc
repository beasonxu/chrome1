// third_party/blink/public/mojom/page/page.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/page/page.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/page/page.mojom-params-data.h"
#include "third_party/blink/public/mojom/page/page.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/page/page.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/page/page.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_PAGE_MOJOM_BLINK_JUMBO_H_
#include "third_party/blink/common/permissions_policy/permissions_policy_mojom_traits.h"
#endif



namespace blink {
namespace mojom {
namespace blink {
PageLifecycleState::PageLifecycleState()
    : is_frozen(),
      visibility(),
      is_in_back_forward_cache(),
      pagehide_dispatch(),
      eviction_enabled(),
      should_dispatch_pageshow_for_debugging() {}

PageLifecycleState::PageLifecycleState(
    bool is_frozen_in,
    ::blink::mojom::blink::PageVisibilityState visibility_in,
    bool is_in_back_forward_cache_in,
    PagehideDispatch pagehide_dispatch_in,
    bool eviction_enabled_in,
    bool should_dispatch_pageshow_for_debugging_in)
    : is_frozen(std::move(is_frozen_in)),
      visibility(std::move(visibility_in)),
      is_in_back_forward_cache(std::move(is_in_back_forward_cache_in)),
      pagehide_dispatch(std::move(pagehide_dispatch_in)),
      eviction_enabled(std::move(eviction_enabled_in)),
      should_dispatch_pageshow_for_debugging(std::move(should_dispatch_pageshow_for_debugging_in)) {}

PageLifecycleState::~PageLifecycleState() = default;
size_t PageLifecycleState::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->is_frozen);
  seed = mojo::internal::WTFHash(seed, this->visibility);
  seed = mojo::internal::WTFHash(seed, this->is_in_back_forward_cache);
  seed = mojo::internal::WTFHash(seed, this->pagehide_dispatch);
  seed = mojo::internal::WTFHash(seed, this->eviction_enabled);
  seed = mojo::internal::WTFHash(seed, this->should_dispatch_pageshow_for_debugging);
  return seed;
}

void PageLifecycleState::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_frozen"), this->is_frozen,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "visibility"), this->visibility,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::blink::PageVisibilityState>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_in_back_forward_cache"), this->is_in_back_forward_cache,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pagehide_dispatch"), this->pagehide_dispatch,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type PagehideDispatch>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "eviction_enabled"), this->eviction_enabled,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "should_dispatch_pageshow_for_debugging"), this->should_dispatch_pageshow_for_debugging,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PageLifecycleState::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PageRestoreParams::PageRestoreParams()
    : navigation_start(),
      pending_history_list_offset(),
      current_history_list_length() {}

PageRestoreParams::PageRestoreParams(
    ::base::TimeTicks navigation_start_in,
    int32_t pending_history_list_offset_in,
    int32_t current_history_list_length_in)
    : navigation_start(std::move(navigation_start_in)),
      pending_history_list_offset(std::move(pending_history_list_offset_in)),
      current_history_list_length(std::move(current_history_list_length_in)) {}

PageRestoreParams::~PageRestoreParams() = default;

void PageRestoreParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "navigation_start"), this->navigation_start,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pending_history_list_offset"), this->pending_history_list_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "current_history_list_length"), this->current_history_list_length,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PageRestoreParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PrerenderPageActivationParams::PrerenderPageActivationParams()
    : was_user_activated(),
      activation_start() {}

PrerenderPageActivationParams::PrerenderPageActivationParams(
    ::blink::mojom::blink::WasActivatedOption was_user_activated_in,
    ::base::TimeTicks activation_start_in)
    : was_user_activated(std::move(was_user_activated_in)),
      activation_start(std::move(activation_start_in)) {}

PrerenderPageActivationParams::~PrerenderPageActivationParams() = default;

void PrerenderPageActivationParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "was_user_activated"), this->was_user_activated,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::blink::mojom::blink::WasActivatedOption>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "activation_start"), this->activation_start,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PrerenderPageActivationParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char PageBroadcast::Name_[] = "blink.mojom.PageBroadcast";

PageBroadcast::IPCStableHashFunction PageBroadcast::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kPageBroadcast_SetPageLifecycleState_Name: {
      return &PageBroadcast::SetPageLifecycleState_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_AudioStateChanged_Name: {
      return &PageBroadcast::AudioStateChanged_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_ActivatePrerenderedPage_Name: {
      return &PageBroadcast::ActivatePrerenderedPage_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_SetInsidePortal_Name: {
      return &PageBroadcast::SetInsidePortal_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_UpdateWebPreferences_Name: {
      return &PageBroadcast::UpdateWebPreferences_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_UpdateRendererPreferences_Name: {
      return &PageBroadcast::UpdateRendererPreferences_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_SetHistoryOffsetAndLength_Name: {
      return &PageBroadcast::SetHistoryOffsetAndLength_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_SetPageBaseBackgroundColor_Name: {
      return &PageBroadcast::SetPageBaseBackgroundColor_Sym::IPCStableHash;
    }
    case internal::kPageBroadcast_CreateRemoteMainFrame_Name: {
      return &PageBroadcast::CreateRemoteMainFrame_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* PageBroadcast::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kPageBroadcast_SetPageLifecycleState_Name:
            return "Receive blink::mojom::PageBroadcast::SetPageLifecycleState";
      case internal::kPageBroadcast_AudioStateChanged_Name:
            return "Receive blink::mojom::PageBroadcast::AudioStateChanged";
      case internal::kPageBroadcast_ActivatePrerenderedPage_Name:
            return "Receive blink::mojom::PageBroadcast::ActivatePrerenderedPage";
      case internal::kPageBroadcast_SetInsidePortal_Name:
            return "Receive blink::mojom::PageBroadcast::SetInsidePortal";
      case internal::kPageBroadcast_UpdateWebPreferences_Name:
            return "Receive blink::mojom::PageBroadcast::UpdateWebPreferences";
      case internal::kPageBroadcast_UpdateRendererPreferences_Name:
            return "Receive blink::mojom::PageBroadcast::UpdateRendererPreferences";
      case internal::kPageBroadcast_SetHistoryOffsetAndLength_Name:
            return "Receive blink::mojom::PageBroadcast::SetHistoryOffsetAndLength";
      case internal::kPageBroadcast_SetPageBaseBackgroundColor_Name:
            return "Receive blink::mojom::PageBroadcast::SetPageBaseBackgroundColor";
      case internal::kPageBroadcast_CreateRemoteMainFrame_Name:
            return "Receive blink::mojom::PageBroadcast::CreateRemoteMainFrame";
    }
  } else {
    switch (message.name()) {
      case internal::kPageBroadcast_SetPageLifecycleState_Name:
            return "Receive reply blink::mojom::PageBroadcast::SetPageLifecycleState";
      case internal::kPageBroadcast_AudioStateChanged_Name:
            return "Receive reply blink::mojom::PageBroadcast::AudioStateChanged";
      case internal::kPageBroadcast_ActivatePrerenderedPage_Name:
            return "Receive reply blink::mojom::PageBroadcast::ActivatePrerenderedPage";
      case internal::kPageBroadcast_SetInsidePortal_Name:
            return "Receive reply blink::mojom::PageBroadcast::SetInsidePortal";
      case internal::kPageBroadcast_UpdateWebPreferences_Name:
            return "Receive reply blink::mojom::PageBroadcast::UpdateWebPreferences";
      case internal::kPageBroadcast_UpdateRendererPreferences_Name:
            return "Receive reply blink::mojom::PageBroadcast::UpdateRendererPreferences";
      case internal::kPageBroadcast_SetHistoryOffsetAndLength_Name:
            return "Receive reply blink::mojom::PageBroadcast::SetHistoryOffsetAndLength";
      case internal::kPageBroadcast_SetPageBaseBackgroundColor_Name:
            return "Receive reply blink::mojom::PageBroadcast::SetPageBaseBackgroundColor";
      case internal::kPageBroadcast_CreateRemoteMainFrame_Name:
            return "Receive reply blink::mojom::PageBroadcast::CreateRemoteMainFrame";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t PageBroadcast::SetPageLifecycleState_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::SetPageLifecycleState");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::AudioStateChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::AudioStateChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::ActivatePrerenderedPage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::ActivatePrerenderedPage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::SetInsidePortal_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::SetInsidePortal");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::UpdateWebPreferences_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::UpdateWebPreferences");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::UpdateRendererPreferences_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::UpdateRendererPreferences");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::SetHistoryOffsetAndLength_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::SetHistoryOffsetAndLength");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::SetPageBaseBackgroundColor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::SetPageBaseBackgroundColor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t PageBroadcast::CreateRemoteMainFrame_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::PageBroadcast::CreateRemoteMainFrame");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class PageBroadcast_SetPageLifecycleState_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageBroadcast_SetPageLifecycleState_ForwardToCallback(
      PageBroadcast::SetPageLifecycleStateCallback callback
      ) : callback_(std::move(callback)) {
  }

  PageBroadcast_SetPageLifecycleState_ForwardToCallback(const PageBroadcast_SetPageLifecycleState_ForwardToCallback&) = delete;
  PageBroadcast_SetPageLifecycleState_ForwardToCallback& operator=(const PageBroadcast_SetPageLifecycleState_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PageBroadcast::SetPageLifecycleStateCallback callback_;
};

class PageBroadcast_ActivatePrerenderedPage_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  PageBroadcast_ActivatePrerenderedPage_ForwardToCallback(
      PageBroadcast::ActivatePrerenderedPageCallback callback
      ) : callback_(std::move(callback)) {
  }

  PageBroadcast_ActivatePrerenderedPage_ForwardToCallback(const PageBroadcast_ActivatePrerenderedPage_ForwardToCallback&) = delete;
  PageBroadcast_ActivatePrerenderedPage_ForwardToCallback& operator=(const PageBroadcast_ActivatePrerenderedPage_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  PageBroadcast::ActivatePrerenderedPageCallback callback_;
};

PageBroadcastProxy::PageBroadcastProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void PageBroadcastProxy::SetPageLifecycleState(
    PageLifecycleStatePtr in_state, PageRestoreParamsPtr in_page_restore_params, SetPageLifecycleStateCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::SetPageLifecycleState", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("state"), in_state,
                        "<value of type PageLifecycleStatePtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("page_restore_params"), in_page_restore_params,
                        "<value of type PageRestoreParamsPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_SetPageLifecycleState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_SetPageLifecycleState_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->state)::BaseType> state_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::PageLifecycleStateDataView>(
      in_state, state_fragment);
  params->state.Set(
      state_fragment.is_null() ? nullptr : state_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->state.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null state in PageBroadcast.SetPageLifecycleState request");
  mojo::internal::MessageFragment<
      typename decltype(params->page_restore_params)::BaseType> page_restore_params_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::PageRestoreParamsDataView>(
      in_page_restore_params, page_restore_params_fragment);
  params->page_restore_params.Set(
      page_restore_params_fragment.is_null() ? nullptr : page_restore_params_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("SetPageLifecycleState");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageBroadcast_SetPageLifecycleState_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PageBroadcastProxy::AudioStateChanged(
    bool in_is_audio_playing) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::AudioStateChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_audio_playing"), in_is_audio_playing,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_AudioStateChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_AudioStateChanged_Params_Data> params(
          message);
  params.Allocate();
  params->is_audio_playing = in_is_audio_playing;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("AudioStateChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageBroadcastProxy::ActivatePrerenderedPage(
    PrerenderPageActivationParamsPtr in_prerender_page_activation_params, ActivatePrerenderedPageCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::ActivatePrerenderedPage", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("prerender_page_activation_params"), in_prerender_page_activation_params,
                        "<value of type PrerenderPageActivationParamsPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_ActivatePrerenderedPage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_ActivatePrerenderedPage_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->prerender_page_activation_params)::BaseType> prerender_page_activation_params_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::PrerenderPageActivationParamsDataView>(
      in_prerender_page_activation_params, prerender_page_activation_params_fragment);
  params->prerender_page_activation_params.Set(
      prerender_page_activation_params_fragment.is_null() ? nullptr : prerender_page_activation_params_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->prerender_page_activation_params.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null prerender_page_activation_params in PageBroadcast.ActivatePrerenderedPage request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("ActivatePrerenderedPage");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new PageBroadcast_ActivatePrerenderedPage_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void PageBroadcastProxy::SetInsidePortal(
    bool in_is_inside_portal) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::SetInsidePortal", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_inside_portal"), in_is_inside_portal,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_SetInsidePortal_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_SetInsidePortal_Params_Data> params(
          message);
  params.Allocate();
  params->is_inside_portal = in_is_inside_portal;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("SetInsidePortal");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageBroadcastProxy::UpdateWebPreferences(
    const ::blink::web_pref::WebPreferences& in_preferences) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::UpdateWebPreferences", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("preferences"), in_preferences,
                        "<value of type const ::blink::web_pref::WebPreferences&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_UpdateWebPreferences_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_UpdateWebPreferences_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->preferences)::BaseType> preferences_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::WebPreferencesDataView>(
      in_preferences, preferences_fragment);
  params->preferences.Set(
      preferences_fragment.is_null() ? nullptr : preferences_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->preferences.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null preferences in PageBroadcast.UpdateWebPreferences request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("UpdateWebPreferences");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageBroadcastProxy::UpdateRendererPreferences(
    const ::blink::RendererPreferences& in_preferences) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::UpdateRendererPreferences", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("preferences"), in_preferences,
                        "<value of type const ::blink::RendererPreferences&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_UpdateRendererPreferences_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_UpdateRendererPreferences_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->preferences)::BaseType> preferences_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::RendererPreferencesDataView>(
      in_preferences, preferences_fragment);
  params->preferences.Set(
      preferences_fragment.is_null() ? nullptr : preferences_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->preferences.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null preferences in PageBroadcast.UpdateRendererPreferences request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("UpdateRendererPreferences");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageBroadcastProxy::SetHistoryOffsetAndLength(
    int32_t in_offset, int32_t in_length) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::SetHistoryOffsetAndLength", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("offset"), in_offset,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("length"), in_length,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_SetHistoryOffsetAndLength_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_SetHistoryOffsetAndLength_Params_Data> params(
          message);
  params.Allocate();
  params->offset = in_offset;
  params->length = in_length;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("SetHistoryOffsetAndLength");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageBroadcastProxy::SetPageBaseBackgroundColor(
    absl::optional<::SkColor> in_color) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::SetPageBaseBackgroundColor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("color"), in_color,
                        "<value of type absl::optional<::SkColor>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_SetPageBaseBackgroundColor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_SetPageBaseBackgroundColor_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->color)::BaseType> color_fragment(
          params.message());
  mojo::internal::Serialize<::skia::mojom::SkColorDataView>(
      in_color, color_fragment);
  params->color.Set(
      color_fragment.is_null() ? nullptr : color_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("SetPageBaseBackgroundColor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void PageBroadcastProxy::CreateRemoteMainFrame(
    const ::blink::RemoteFrameToken& in_token, const absl::optional<::blink::FrameToken>& in_opener_frame_token, ::blink::mojom::blink::FrameReplicationStatePtr in_replication_state, const ::base::UnguessableToken& in_devtools_frame_token, ::blink::mojom::blink::RemoteFrameInterfacesFromBrowserPtr in_remote_frame_interfaces, ::blink::mojom::blink::RemoteMainFrameInterfacesPtr in_remote_main_frame_interfaces) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::PageBroadcast::CreateRemoteMainFrame", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("token"), in_token,
                        "<value of type const ::blink::RemoteFrameToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("opener_frame_token"), in_opener_frame_token,
                        "<value of type const absl::optional<::blink::FrameToken>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("replication_state"), in_replication_state,
                        "<value of type ::blink::mojom::blink::FrameReplicationStatePtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("devtools_frame_token"), in_devtools_frame_token,
                        "<value of type const ::base::UnguessableToken&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote_frame_interfaces"), in_remote_frame_interfaces,
                        "<value of type ::blink::mojom::blink::RemoteFrameInterfacesFromBrowserPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("remote_main_frame_interfaces"), in_remote_main_frame_interfaces,
                        "<value of type ::blink::mojom::blink::RemoteMainFrameInterfacesPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_CreateRemoteMainFrame_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_CreateRemoteMainFrame_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->token)::BaseType> token_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::RemoteFrameTokenDataView>(
      in_token, token_fragment);
  params->token.Set(
      token_fragment.is_null() ? nullptr : token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null token in PageBroadcast.CreateRemoteMainFrame request");
  mojo::internal::MessageFragment<decltype(params->opener_frame_token)>
      opener_frame_token_fragment(params.message());
  opener_frame_token_fragment.Claim(&params->opener_frame_token);
  mojo::internal::Serialize<::blink::mojom::FrameTokenDataView>(
      in_opener_frame_token, opener_frame_token_fragment, true);
  mojo::internal::MessageFragment<
      typename decltype(params->replication_state)::BaseType> replication_state_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::FrameReplicationStateDataView>(
      in_replication_state, replication_state_fragment);
  params->replication_state.Set(
      replication_state_fragment.is_null() ? nullptr : replication_state_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->replication_state.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null replication_state in PageBroadcast.CreateRemoteMainFrame request");
  mojo::internal::MessageFragment<
      typename decltype(params->devtools_frame_token)::BaseType> devtools_frame_token_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
      in_devtools_frame_token, devtools_frame_token_fragment);
  params->devtools_frame_token.Set(
      devtools_frame_token_fragment.is_null() ? nullptr : devtools_frame_token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->devtools_frame_token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null devtools_frame_token in PageBroadcast.CreateRemoteMainFrame request");
  mojo::internal::MessageFragment<
      typename decltype(params->remote_frame_interfaces)::BaseType> remote_frame_interfaces_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::RemoteFrameInterfacesFromBrowserDataView>(
      in_remote_frame_interfaces, remote_frame_interfaces_fragment);
  params->remote_frame_interfaces.Set(
      remote_frame_interfaces_fragment.is_null() ? nullptr : remote_frame_interfaces_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->remote_frame_interfaces.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null remote_frame_interfaces in PageBroadcast.CreateRemoteMainFrame request");
  mojo::internal::MessageFragment<
      typename decltype(params->remote_main_frame_interfaces)::BaseType> remote_main_frame_interfaces_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::RemoteMainFrameInterfacesDataView>(
      in_remote_main_frame_interfaces, remote_main_frame_interfaces_fragment);
  params->remote_main_frame_interfaces.Set(
      remote_main_frame_interfaces_fragment.is_null() ? nullptr : remote_main_frame_interfaces_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->remote_main_frame_interfaces.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null remote_main_frame_interfaces in PageBroadcast.CreateRemoteMainFrame request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("CreateRemoteMainFrame");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class PageBroadcast_SetPageLifecycleState_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PageBroadcast::SetPageLifecycleStateCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PageBroadcast_SetPageLifecycleState_ProxyToResponder> proxy(
        new PageBroadcast_SetPageLifecycleState_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PageBroadcast_SetPageLifecycleState_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageBroadcast_SetPageLifecycleState_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PageBroadcast_SetPageLifecycleState_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageBroadcast::SetPageLifecycleStateCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool PageBroadcast_SetPageLifecycleState_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PageBroadcast_SetPageLifecycleState_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageBroadcast_SetPageLifecycleState_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PageBroadcast_SetPageLifecycleState_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageBroadcast::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void PageBroadcast_SetPageLifecycleState_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply blink::mojom::PageBroadcast::SetPageLifecycleState");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_SetPageLifecycleState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_SetPageLifecycleState_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("SetPageLifecycleState");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class PageBroadcast_ActivatePrerenderedPage_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static PageBroadcast::ActivatePrerenderedPageCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<PageBroadcast_ActivatePrerenderedPage_ProxyToResponder> proxy(
        new PageBroadcast_ActivatePrerenderedPage_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&PageBroadcast_ActivatePrerenderedPage_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~PageBroadcast_ActivatePrerenderedPage_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  PageBroadcast_ActivatePrerenderedPage_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "PageBroadcast::ActivatePrerenderedPageCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool PageBroadcast_ActivatePrerenderedPage_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data* params =
      reinterpret_cast<
          internal::PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  PageBroadcast_ActivatePrerenderedPage_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        PageBroadcast::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void PageBroadcast_ActivatePrerenderedPage_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply blink::mojom::PageBroadcast::ActivatePrerenderedPage");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kPageBroadcast_ActivatePrerenderedPage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(PageBroadcast::Name_);
  message.set_method_name("ActivatePrerenderedPage");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool PageBroadcastStubDispatch::Accept(
    PageBroadcast* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kPageBroadcast_SetPageLifecycleState_Name: {
      break;
    }
    case internal::kPageBroadcast_AudioStateChanged_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_AudioStateChanged_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_AudioStateChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_audio_playing{};
      PageBroadcast_AudioStateChanged_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_audio_playing = input_data_view.is_audio_playing();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AudioStateChanged(
std::move(p_is_audio_playing));
      return true;
    }
    case internal::kPageBroadcast_ActivatePrerenderedPage_Name: {
      break;
    }
    case internal::kPageBroadcast_SetInsidePortal_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_SetInsidePortal_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_SetInsidePortal_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_inside_portal{};
      PageBroadcast_SetInsidePortal_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_inside_portal = input_data_view.is_inside_portal();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetInsidePortal(
std::move(p_is_inside_portal));
      return true;
    }
    case internal::kPageBroadcast_UpdateWebPreferences_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_UpdateWebPreferences_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_UpdateWebPreferences_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::web_pref::WebPreferences p_preferences{};
      PageBroadcast_UpdateWebPreferences_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPreferences(&p_preferences))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UpdateWebPreferences(
std::move(p_preferences));
      return true;
    }
    case internal::kPageBroadcast_UpdateRendererPreferences_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_UpdateRendererPreferences_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_UpdateRendererPreferences_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::RendererPreferences p_preferences{};
      PageBroadcast_UpdateRendererPreferences_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPreferences(&p_preferences))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UpdateRendererPreferences(
std::move(p_preferences));
      return true;
    }
    case internal::kPageBroadcast_SetHistoryOffsetAndLength_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_SetHistoryOffsetAndLength_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_SetHistoryOffsetAndLength_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_offset{};
      int32_t p_length{};
      PageBroadcast_SetHistoryOffsetAndLength_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_offset = input_data_view.offset();
      if (success)
        p_length = input_data_view.length();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetHistoryOffsetAndLength(
std::move(p_offset), 
std::move(p_length));
      return true;
    }
    case internal::kPageBroadcast_SetPageBaseBackgroundColor_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_SetPageBaseBackgroundColor_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_SetPageBaseBackgroundColor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      absl::optional<::SkColor> p_color{};
      PageBroadcast_SetPageBaseBackgroundColor_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadColor(&p_color))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPageBaseBackgroundColor(
std::move(p_color));
      return true;
    }
    case internal::kPageBroadcast_CreateRemoteMainFrame_Name: {

      DCHECK(message->is_serialized());
      internal::PageBroadcast_CreateRemoteMainFrame_Params_Data* params =
          reinterpret_cast<internal::PageBroadcast_CreateRemoteMainFrame_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::RemoteFrameToken p_token{};
      absl::optional<::blink::FrameToken> p_opener_frame_token{};
      ::blink::mojom::blink::FrameReplicationStatePtr p_replication_state{};
      ::base::UnguessableToken p_devtools_frame_token{};
      ::blink::mojom::blink::RemoteFrameInterfacesFromBrowserPtr p_remote_frame_interfaces{};
      ::blink::mojom::blink::RemoteMainFrameInterfacesPtr p_remote_main_frame_interfaces{};
      PageBroadcast_CreateRemoteMainFrame_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadToken(&p_token))
        success = false;
      if (success && !input_data_view.ReadOpenerFrameToken(&p_opener_frame_token))
        success = false;
      if (success && !input_data_view.ReadReplicationState(&p_replication_state))
        success = false;
      if (success && !input_data_view.ReadDevtoolsFrameToken(&p_devtools_frame_token))
        success = false;
      if (success && !input_data_view.ReadRemoteFrameInterfaces(&p_remote_frame_interfaces))
        success = false;
      if (success && !input_data_view.ReadRemoteMainFrameInterfaces(&p_remote_main_frame_interfaces))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateRemoteMainFrame(
std::move(p_token), 
std::move(p_opener_frame_token), 
std::move(p_replication_state), 
std::move(p_devtools_frame_token), 
std::move(p_remote_frame_interfaces), 
std::move(p_remote_main_frame_interfaces));
      return true;
    }
  }
  return false;
}

// static
bool PageBroadcastStubDispatch::AcceptWithResponder(
    PageBroadcast* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kPageBroadcast_SetPageLifecycleState_Name: {

      internal::PageBroadcast_SetPageLifecycleState_Params_Data* params =
          reinterpret_cast<
              internal::PageBroadcast_SetPageLifecycleState_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PageLifecycleStatePtr p_state{};
      PageRestoreParamsPtr p_page_restore_params{};
      PageBroadcast_SetPageLifecycleState_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadState(&p_state))
        success = false;
      if (success && !input_data_view.ReadPageRestoreParams(&p_page_restore_params))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 0, false);
        return false;
      }
      PageBroadcast::SetPageLifecycleStateCallback callback =
          PageBroadcast_SetPageLifecycleState_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetPageLifecycleState(
std::move(p_state), 
std::move(p_page_restore_params), std::move(callback));
      return true;
    }
    case internal::kPageBroadcast_AudioStateChanged_Name: {
      break;
    }
    case internal::kPageBroadcast_ActivatePrerenderedPage_Name: {

      internal::PageBroadcast_ActivatePrerenderedPage_Params_Data* params =
          reinterpret_cast<
              internal::PageBroadcast_ActivatePrerenderedPage_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      PrerenderPageActivationParamsPtr p_prerender_page_activation_params{};
      PageBroadcast_ActivatePrerenderedPage_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPrerenderPageActivationParams(&p_prerender_page_activation_params))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            PageBroadcast::Name_, 2, false);
        return false;
      }
      PageBroadcast::ActivatePrerenderedPageCallback callback =
          PageBroadcast_ActivatePrerenderedPage_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ActivatePrerenderedPage(
std::move(p_prerender_page_activation_params), std::move(callback));
      return true;
    }
    case internal::kPageBroadcast_SetInsidePortal_Name: {
      break;
    }
    case internal::kPageBroadcast_UpdateWebPreferences_Name: {
      break;
    }
    case internal::kPageBroadcast_UpdateRendererPreferences_Name: {
      break;
    }
    case internal::kPageBroadcast_SetHistoryOffsetAndLength_Name: {
      break;
    }
    case internal::kPageBroadcast_SetPageBaseBackgroundColor_Name: {
      break;
    }
    case internal::kPageBroadcast_CreateRemoteMainFrame_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kPageBroadcastValidationInfo[] = {
    {&internal::PageBroadcast_SetPageLifecycleState_Params_Data::Validate,
     &internal::PageBroadcast_SetPageLifecycleState_ResponseParams_Data::Validate},
    {&internal::PageBroadcast_AudioStateChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageBroadcast_ActivatePrerenderedPage_Params_Data::Validate,
     &internal::PageBroadcast_ActivatePrerenderedPage_ResponseParams_Data::Validate},
    {&internal::PageBroadcast_SetInsidePortal_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageBroadcast_UpdateWebPreferences_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageBroadcast_UpdateRendererPreferences_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageBroadcast_SetHistoryOffsetAndLength_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageBroadcast_SetPageBaseBackgroundColor_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::PageBroadcast_CreateRemoteMainFrame_Params_Data::Validate,
     nullptr /* no response */},
};

bool PageBroadcastRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PageBroadcast::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kPageBroadcastValidationInfo);
}

bool PageBroadcastResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::PageBroadcast::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kPageBroadcastValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {


// static
bool StructTraits<::blink::mojom::blink::PageLifecycleState::DataView, ::blink::mojom::blink::PageLifecycleStatePtr>::Read(
    ::blink::mojom::blink::PageLifecycleState::DataView input,
    ::blink::mojom::blink::PageLifecycleStatePtr* output) {
  bool success = true;
  ::blink::mojom::blink::PageLifecycleStatePtr result(::blink::mojom::blink::PageLifecycleState::New());
  
      if (success)
        result->is_frozen = input.is_frozen();
      if (success && !input.ReadVisibility(&result->visibility))
        success = false;
      if (success)
        result->is_in_back_forward_cache = input.is_in_back_forward_cache();
      if (success && !input.ReadPagehideDispatch(&result->pagehide_dispatch))
        success = false;
      if (success)
        result->eviction_enabled = input.eviction_enabled();
      if (success)
        result->should_dispatch_pageshow_for_debugging = input.should_dispatch_pageshow_for_debugging();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::PageRestoreParams::DataView, ::blink::mojom::blink::PageRestoreParamsPtr>::Read(
    ::blink::mojom::blink::PageRestoreParams::DataView input,
    ::blink::mojom::blink::PageRestoreParamsPtr* output) {
  bool success = true;
  ::blink::mojom::blink::PageRestoreParamsPtr result(::blink::mojom::blink::PageRestoreParams::New());
  
      if (success && !input.ReadNavigationStart(&result->navigation_start))
        success = false;
      if (success)
        result->pending_history_list_offset = input.pending_history_list_offset();
      if (success)
        result->current_history_list_length = input.current_history_list_length();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::blink::mojom::blink::PrerenderPageActivationParams::DataView, ::blink::mojom::blink::PrerenderPageActivationParamsPtr>::Read(
    ::blink::mojom::blink::PrerenderPageActivationParams::DataView input,
    ::blink::mojom::blink::PrerenderPageActivationParamsPtr* output) {
  bool success = true;
  ::blink::mojom::blink::PrerenderPageActivationParamsPtr result(::blink::mojom::blink::PrerenderPageActivationParams::New());
  
      if (success && !input.ReadWasUserActivated(&result->was_user_activated))
        success = false;
      if (success && !input.ReadActivationStart(&result->activation_start))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void PageBroadcastInterceptorForTesting::SetPageLifecycleState(PageLifecycleStatePtr state, PageRestoreParamsPtr page_restore_params, SetPageLifecycleStateCallback callback) {
  GetForwardingInterface()->SetPageLifecycleState(std::move(state), std::move(page_restore_params), std::move(callback));
}
void PageBroadcastInterceptorForTesting::AudioStateChanged(bool is_audio_playing) {
  GetForwardingInterface()->AudioStateChanged(std::move(is_audio_playing));
}
void PageBroadcastInterceptorForTesting::ActivatePrerenderedPage(PrerenderPageActivationParamsPtr prerender_page_activation_params, ActivatePrerenderedPageCallback callback) {
  GetForwardingInterface()->ActivatePrerenderedPage(std::move(prerender_page_activation_params), std::move(callback));
}
void PageBroadcastInterceptorForTesting::SetInsidePortal(bool is_inside_portal) {
  GetForwardingInterface()->SetInsidePortal(std::move(is_inside_portal));
}
void PageBroadcastInterceptorForTesting::UpdateWebPreferences(const ::blink::web_pref::WebPreferences& preferences) {
  GetForwardingInterface()->UpdateWebPreferences(std::move(preferences));
}
void PageBroadcastInterceptorForTesting::UpdateRendererPreferences(const ::blink::RendererPreferences& preferences) {
  GetForwardingInterface()->UpdateRendererPreferences(std::move(preferences));
}
void PageBroadcastInterceptorForTesting::SetHistoryOffsetAndLength(int32_t offset, int32_t length) {
  GetForwardingInterface()->SetHistoryOffsetAndLength(std::move(offset), std::move(length));
}
void PageBroadcastInterceptorForTesting::SetPageBaseBackgroundColor(absl::optional<::SkColor> color) {
  GetForwardingInterface()->SetPageBaseBackgroundColor(std::move(color));
}
void PageBroadcastInterceptorForTesting::CreateRemoteMainFrame(const ::blink::RemoteFrameToken& token, const absl::optional<::blink::FrameToken>& opener_frame_token, ::blink::mojom::blink::FrameReplicationStatePtr replication_state, const ::base::UnguessableToken& devtools_frame_token, ::blink::mojom::blink::RemoteFrameInterfacesFromBrowserPtr remote_frame_interfaces, ::blink::mojom::blink::RemoteMainFrameInterfacesPtr remote_main_frame_interfaces) {
  GetForwardingInterface()->CreateRemoteMainFrame(std::move(token), std::move(opener_frame_token), std::move(replication_state), std::move(devtools_frame_token), std::move(remote_frame_interfaces), std::move(remote_main_frame_interfaces));
}
PageBroadcastAsyncWaiter::PageBroadcastAsyncWaiter(
    PageBroadcast* proxy) : proxy_(proxy) {}

PageBroadcastAsyncWaiter::~PageBroadcastAsyncWaiter() = default;

void PageBroadcastAsyncWaiter::SetPageLifecycleState(
    PageLifecycleStatePtr state, PageRestoreParamsPtr page_restore_params) {
  base::RunLoop loop;
  proxy_->SetPageLifecycleState(std::move(state),std::move(page_restore_params),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void PageBroadcastAsyncWaiter::ActivatePrerenderedPage(
    PrerenderPageActivationParamsPtr prerender_page_activation_params) {
  base::RunLoop loop;
  proxy_->ActivatePrerenderedPage(std::move(prerender_page_activation_params),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif