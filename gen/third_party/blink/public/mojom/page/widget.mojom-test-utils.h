// third_party/blink/public/mojom/page/widget.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_WIDGET_MOJOM_TEST_UTILS_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_WIDGET_MOJOM_TEST_UTILS_H_

#include "third_party/blink/public/mojom/page/widget.mojom.h"
#include "third_party/blink/public/common/common_export.h"


namespace blink {
namespace mojom {


class BLINK_COMMON_EXPORT FrameWidgetInterceptorForTesting : public FrameWidget {
  virtual FrameWidget* GetForwardingInterface() = 0;
  void DragTargetDragEnter(::blink::mojom::DragDataPtr drag_data, const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, ::blink::DragOperationsMask operations_allowed, uint32_t key_modifiers, DragTargetDragEnterCallback callback) override;
  void DragTargetDragOver(const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, ::blink::DragOperationsMask operations_allowed, uint32_t key_modifiers, DragTargetDragOverCallback callback) override;
  void DragTargetDragLeave(const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point) override;
  void DragTargetDrop(::blink::mojom::DragDataPtr drag_data, const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, uint32_t key_modifiers, DragTargetDropCallback callback) override;
  void DragSourceEndedAt(const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, ::ui::mojom::DragOperation drag_operation, DragSourceEndedAtCallback callback) override;
  void DragSourceSystemDragEnded() override;
  void OnStartStylusWriting(OnStartStylusWritingCallback callback) override;
  void SetBackgroundOpaque(bool opaque) override;
  void SetTextDirection(::base::i18n::TextDirection direction) override;
  void SetActive(bool active) override;
  void SetInheritedEffectiveTouchActionForSubFrame(::cc::TouchAction touch_action) override;
  void UpdateRenderThrottlingStatusForSubFrame(bool is_throttled, bool subtree_throttled, bool display_locked) override;
  void SetIsInertForSubFrame(bool inert) override;
  void ShowContextMenu(::ui::MenuSourceType source_type, const ::gfx::Point& location) override;
  void EnableDeviceEmulation(const ::blink::DeviceEmulationParams& parameters) override;
  void DisableDeviceEmulation() override;
  void BindWidgetCompositor(::mojo::PendingReceiver<::blink::mojom::WidgetCompositor> host) override;
  void BindInputTargetClient(::mojo::PendingReceiver<::viz::mojom::InputTargetClient> host) override;
  void SetViewportIntersection(::blink::mojom::ViewportIntersectionStatePtr intersection_state, const absl::optional<::blink::VisualProperties>& visual_properties) override;
};
class BLINK_COMMON_EXPORT FrameWidgetAsyncWaiter {
 public:
  explicit FrameWidgetAsyncWaiter(FrameWidget* proxy);

  FrameWidgetAsyncWaiter(const FrameWidgetAsyncWaiter&) = delete;
  FrameWidgetAsyncWaiter& operator=(const FrameWidgetAsyncWaiter&) = delete;

  ~FrameWidgetAsyncWaiter();
  void DragTargetDragEnter(
      ::blink::mojom::DragDataPtr drag_data, const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, ::blink::DragOperationsMask operations_allowed, uint32_t key_modifiers, ::ui::mojom::DragOperation* out_operation);
  void DragTargetDragOver(
      const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, ::blink::DragOperationsMask operations_allowed, uint32_t key_modifiers, ::ui::mojom::DragOperation* out_operation);
  void DragTargetDrop(
      ::blink::mojom::DragDataPtr drag_data, const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, uint32_t key_modifiers);
  void DragSourceEndedAt(
      const ::gfx::PointF& point_in_viewport, const ::gfx::PointF& screen_point, ::ui::mojom::DragOperation drag_operation);
  void OnStartStylusWriting(
      absl::optional<::gfx::Rect>* out_focused_edit_bounds, absl::optional<::gfx::Rect>* out_caret_bounds);

 private:
  FrameWidget* const proxy_;
};


class BLINK_COMMON_EXPORT FrameWidgetHostInterceptorForTesting : public FrameWidgetHost {
  virtual FrameWidgetHost* GetForwardingInterface() = 0;
  void AnimateDoubleTapZoomInMainFrame(const ::gfx::Point& tap_point, const ::gfx::Rect& rect_to_zoom) override;
  void ZoomToFindInPageRectInMainFrame(const ::gfx::Rect& rect_to_zoom) override;
  void SetHasTouchEventConsumers(::blink::mojom::TouchEventConsumersPtr touch_event_consumers) override;
  void IntrinsicSizingInfoChanged(::blink::mojom::IntrinsicSizingInfoPtr sizing_info) override;
  void AutoscrollStart(const ::gfx::PointF& position) override;
  void AutoscrollFling(const ::gfx::Vector2dF& velocity) override;
  void AutoscrollEnd() override;
  void StartDragging(::blink::mojom::DragDataPtr drag_data, ::blink::DragOperationsMask operations_allowed, const ::SkBitmap& image, const ::gfx::Vector2d& bitmap_offset_in_dip, ::blink::mojom::DragEventSourceInfoPtr event_info) override;
};
class BLINK_COMMON_EXPORT FrameWidgetHostAsyncWaiter {
 public:
  explicit FrameWidgetHostAsyncWaiter(FrameWidgetHost* proxy);

  FrameWidgetHostAsyncWaiter(const FrameWidgetHostAsyncWaiter&) = delete;
  FrameWidgetHostAsyncWaiter& operator=(const FrameWidgetHostAsyncWaiter&) = delete;

  ~FrameWidgetHostAsyncWaiter();

 private:
  FrameWidgetHost* const proxy_;
};


class BLINK_COMMON_EXPORT PopupWidgetHostInterceptorForTesting : public PopupWidgetHost {
  virtual PopupWidgetHost* GetForwardingInterface() = 0;
  void RequestClosePopup() override;
  void ShowPopup(const ::gfx::Rect& initial_rect, const ::gfx::Rect& anchor_rect, ShowPopupCallback callback) override;
  void SetPopupBounds(const ::gfx::Rect& bounds, SetPopupBoundsCallback callback) override;
};
class BLINK_COMMON_EXPORT PopupWidgetHostAsyncWaiter {
 public:
  explicit PopupWidgetHostAsyncWaiter(PopupWidgetHost* proxy);

  PopupWidgetHostAsyncWaiter(const PopupWidgetHostAsyncWaiter&) = delete;
  PopupWidgetHostAsyncWaiter& operator=(const PopupWidgetHostAsyncWaiter&) = delete;

  ~PopupWidgetHostAsyncWaiter();
  void ShowPopup(
      const ::gfx::Rect& initial_rect, const ::gfx::Rect& anchor_rect);
  void SetPopupBounds(
      const ::gfx::Rect& bounds);

 private:
  PopupWidgetHost* const proxy_;
};




}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAGE_WIDGET_MOJOM_TEST_UTILS_H_