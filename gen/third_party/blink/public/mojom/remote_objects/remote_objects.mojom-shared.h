// third_party/blink/public/mojom/remote_objects/remote_objects.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_REMOTE_OBJECTS_REMOTE_OBJECTS_MOJOM_SHARED_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_REMOTE_OBJECTS_REMOTE_OBJECTS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "third_party/blink/public/mojom/remote_objects/remote_objects.mojom-shared-internal.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace blink {
namespace mojom {
class RemoteTypedArrayDataView;

class RemoteInvocationResultDataView;

class RemoteInvocationArgumentDataView;
class RemoteInvocationResultValueDataView;


}  // namespace mojom
}  // namespace blink

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::blink::mojom::RemoteTypedArrayDataView> {
  using Data = ::blink::mojom::internal::RemoteTypedArray_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::RemoteInvocationResultDataView> {
  using Data = ::blink::mojom::internal::RemoteInvocationResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::blink::mojom::RemoteInvocationArgumentDataView> {
  using Data = ::blink::mojom::internal::RemoteInvocationArgument_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

template <>
struct MojomTypeTraits<::blink::mojom::RemoteInvocationResultValueDataView> {
  using Data = ::blink::mojom::internal::RemoteInvocationResultValue_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace blink {
namespace mojom {


enum class SingletonJavaScriptValue : int32_t {
  
  kNull = 0,
  
  kUndefined = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, SingletonJavaScriptValue value);
inline bool IsKnownEnumValue(SingletonJavaScriptValue value) {
  return internal::SingletonJavaScriptValue_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RemoteArrayType : int32_t {
  
  kInt8Array = 1,
  
  kUint8Array = 2,
  
  kInt16Array = 3,
  
  kUint16Array = 4,
  
  kInt32Array = 5,
  
  kUint32Array = 6,
  
  kFloat32Array = 7,
  
  kFloat64Array = 8,
  kMinValue = 1,
  kMaxValue = 8,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, RemoteArrayType value);
inline bool IsKnownEnumValue(RemoteArrayType value) {
  return internal::RemoteArrayType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RemoteInvocationError : int32_t {
  
  OK = 0,
  
  METHOD_NOT_FOUND = 1,
  
  OBJECT_GET_CLASS_BLOCKED = 2,
  
  EXCEPTION_THROWN = 3,
  
  NON_ASSIGNABLE_TYPES = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) std::ostream& operator<<(std::ostream& os, RemoteInvocationError value);
inline bool IsKnownEnumValue(RemoteInvocationError value) {
  return internal::RemoteInvocationError_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class RemoteObjectHostInterfaceBase {};

using RemoteObjectHostPtrDataView =
    mojo::InterfacePtrDataView<RemoteObjectHostInterfaceBase>;
using RemoteObjectHostRequestDataView =
    mojo::InterfaceRequestDataView<RemoteObjectHostInterfaceBase>;
using RemoteObjectHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RemoteObjectHostInterfaceBase>;
using RemoteObjectHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RemoteObjectHostInterfaceBase>;
class RemoteObjectInterfaceBase {};

using RemoteObjectPtrDataView =
    mojo::InterfacePtrDataView<RemoteObjectInterfaceBase>;
using RemoteObjectRequestDataView =
    mojo::InterfaceRequestDataView<RemoteObjectInterfaceBase>;
using RemoteObjectAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RemoteObjectInterfaceBase>;
using RemoteObjectAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RemoteObjectInterfaceBase>;
class RemoteObjectGatewayFactoryInterfaceBase {};

using RemoteObjectGatewayFactoryPtrDataView =
    mojo::InterfacePtrDataView<RemoteObjectGatewayFactoryInterfaceBase>;
using RemoteObjectGatewayFactoryRequestDataView =
    mojo::InterfaceRequestDataView<RemoteObjectGatewayFactoryInterfaceBase>;
using RemoteObjectGatewayFactoryAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RemoteObjectGatewayFactoryInterfaceBase>;
using RemoteObjectGatewayFactoryAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RemoteObjectGatewayFactoryInterfaceBase>;
class RemoteObjectGatewayInterfaceBase {};

using RemoteObjectGatewayPtrDataView =
    mojo::InterfacePtrDataView<RemoteObjectGatewayInterfaceBase>;
using RemoteObjectGatewayRequestDataView =
    mojo::InterfaceRequestDataView<RemoteObjectGatewayInterfaceBase>;
using RemoteObjectGatewayAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RemoteObjectGatewayInterfaceBase>;
using RemoteObjectGatewayAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RemoteObjectGatewayInterfaceBase>;


class RemoteTypedArrayDataView {
 public:
  RemoteTypedArrayDataView() = default;

  RemoteTypedArrayDataView(
      internal::RemoteTypedArray_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::blink::mojom::RemoteArrayType>(
        data_value, output);
  }
  RemoteArrayType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RemoteArrayType>(data_->type));
  }
  inline void GetBufferDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuffer(UserType* output) {
    
    auto* pointer = !data_->buffer.is_null() ? &data_->buffer : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteTypedArray_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteInvocationResultDataView {
 public:
  RemoteInvocationResultDataView() = default;

  RemoteInvocationResultDataView(
      internal::RemoteInvocationResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::RemoteInvocationError>(
        data_value, output);
  }
  RemoteInvocationError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::RemoteInvocationError>(data_->error));
  }
  inline void GetValueDataView(
      RemoteInvocationResultValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::blink::mojom::RemoteInvocationResultValueDataView, UserType>(),
    "Attempting to read the optional `value` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadValue` instead "
    "of `ReadValue if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->value.is_null() ? &data_->value : nullptr;
    return mojo::internal::Deserialize<::blink::mojom::RemoteInvocationResultValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::RemoteInvocationResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteInvocationArgumentDataView {
 public:
  using Tag = internal::RemoteInvocationArgument_Data::RemoteInvocationArgument_Tag;

  RemoteInvocationArgumentDataView() = default;

  RemoteInvocationArgumentDataView(
      internal::RemoteInvocationArgument_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_number_value() const { return data_->tag == Tag::kNumberValue; }
  double number_value() const {
    CHECK(is_number_value());
    return data_->data.f_number_value;
  }
  bool is_boolean_value() const { return data_->tag == Tag::kBooleanValue; }
  bool boolean_value() const {
    CHECK(is_boolean_value());
    return data_->data.f_boolean_value;
  }
  bool is_string_value() const { return data_->tag == Tag::kStringValue; }
  inline void GetStringValueDataView(
      ::mojo_base::mojom::String16DataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadStringValue(UserType* output) const {
    
    CHECK(is_string_value());
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        data_->data.f_string_value.Get(), output, message_);
  }
  bool is_singleton_value() const { return data_->tag == Tag::kSingletonValue; }
  template <typename UserType>
  [[nodiscard]] bool ReadSingletonValue(UserType* output) const {
    CHECK(is_singleton_value());
    return mojo::internal::Deserialize<::blink::mojom::SingletonJavaScriptValue>(
        data_->data.f_singleton_value, output);
  }
  SingletonJavaScriptValue singleton_value() const {
    CHECK(is_singleton_value());
    // TODO(dcheng): This seems incorrect, as it bypasses enum traits.
    return ::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::SingletonJavaScriptValue>(data_->data.f_singleton_value));
  }
  bool is_array_value() const { return data_->tag == Tag::kArrayValue; }
  inline void GetArrayValueDataView(
      mojo::ArrayDataView<RemoteInvocationArgumentDataView>* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadArrayValue(UserType* output) const {
    
    CHECK(is_array_value());
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::RemoteInvocationArgumentDataView>>(
        data_->data.f_array_value.Get(), output, message_);
  }
  bool is_typed_array_value() const { return data_->tag == Tag::kTypedArrayValue; }
  inline void GetTypedArrayValueDataView(
      RemoteTypedArrayDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadTypedArrayValue(UserType* output) const {
    
    CHECK(is_typed_array_value());
    return mojo::internal::Deserialize<::blink::mojom::RemoteTypedArrayDataView>(
        data_->data.f_typed_array_value.Get(), output, message_);
  }
  bool is_object_id_value() const { return data_->tag == Tag::kObjectIdValue; }
  int32_t object_id_value() const {
    CHECK(is_object_id_value());
    return data_->data.f_object_id_value;
  }

 private:
  internal::RemoteInvocationArgument_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RemoteInvocationResultValueDataView {
 public:
  using Tag = internal::RemoteInvocationResultValue_Data::RemoteInvocationResultValue_Tag;

  RemoteInvocationResultValueDataView() = default;

  RemoteInvocationResultValueDataView(
      internal::RemoteInvocationResultValue_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_number_value() const { return data_->tag == Tag::kNumberValue; }
  double number_value() const {
    CHECK(is_number_value());
    return data_->data.f_number_value;
  }
  bool is_boolean_value() const { return data_->tag == Tag::kBooleanValue; }
  bool boolean_value() const {
    CHECK(is_boolean_value());
    return data_->data.f_boolean_value;
  }
  bool is_string_value() const { return data_->tag == Tag::kStringValue; }
  inline void GetStringValueDataView(
      ::mojo_base::mojom::String16DataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadStringValue(UserType* output) const {
    
    CHECK(is_string_value());
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        data_->data.f_string_value.Get(), output, message_);
  }
  bool is_singleton_value() const { return data_->tag == Tag::kSingletonValue; }
  template <typename UserType>
  [[nodiscard]] bool ReadSingletonValue(UserType* output) const {
    CHECK(is_singleton_value());
    return mojo::internal::Deserialize<::blink::mojom::SingletonJavaScriptValue>(
        data_->data.f_singleton_value, output);
  }
  SingletonJavaScriptValue singleton_value() const {
    CHECK(is_singleton_value());
    // TODO(dcheng): This seems incorrect, as it bypasses enum traits.
    return ::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::SingletonJavaScriptValue>(data_->data.f_singleton_value));
  }
  bool is_object_id() const { return data_->tag == Tag::kObjectId; }
  int32_t object_id() const {
    CHECK(is_object_id());
    return data_->data.f_object_id;
  }

 private:
  internal::RemoteInvocationResultValue_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace blink

namespace std {

template <>
struct hash<::blink::mojom::SingletonJavaScriptValue>
    : public mojo::internal::EnumHashImpl<::blink::mojom::SingletonJavaScriptValue> {};

template <>
struct hash<::blink::mojom::RemoteArrayType>
    : public mojo::internal::EnumHashImpl<::blink::mojom::RemoteArrayType> {};

template <>
struct hash<::blink::mojom::RemoteInvocationError>
    : public mojo::internal::EnumHashImpl<::blink::mojom::RemoteInvocationError> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::SingletonJavaScriptValue, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::SingletonJavaScriptValue, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::SingletonJavaScriptValue>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RemoteArrayType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::RemoteArrayType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::RemoteArrayType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RemoteInvocationError, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::blink::mojom::RemoteInvocationError, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::blink::mojom::RemoteInvocationError>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RemoteTypedArrayDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::RemoteTypedArrayDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::RemoteTypedArray_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::RemoteArrayType>(
        Traits::type(input), &fragment->type);
    decltype(Traits::buffer(input)) in_buffer = Traits::buffer(input);
    mojo::internal::MessageFragment<decltype(fragment->buffer)>
        buffer_fragment(fragment.message());
    buffer_fragment.Claim(&fragment->buffer);
    mojo::internal::Serialize<::mojo_base::mojom::BigBufferDataView>(
        in_buffer, buffer_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->buffer.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null buffer in RemoteTypedArray struct");
  }

  static bool Deserialize(::blink::mojom::internal::RemoteTypedArray_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::RemoteTypedArrayDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RemoteInvocationResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::blink::mojom::RemoteInvocationResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::blink::mojom::internal::RemoteInvocationResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::blink::mojom::RemoteInvocationError>(
        Traits::error(input), &fragment->error);
    decltype(Traits::value(input)) in_value = Traits::value(input);
    mojo::internal::MessageFragment<decltype(fragment->value)>
        value_fragment(fragment.message());
    value_fragment.Claim(&fragment->value);
    mojo::internal::Serialize<::blink::mojom::RemoteInvocationResultValueDataView>(
        in_value, value_fragment, true);
  }

  static bool Deserialize(::blink::mojom::internal::RemoteInvocationResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::RemoteInvocationResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RemoteInvocationArgumentDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::RemoteInvocationArgumentDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::RemoteInvocationArgument_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kNumberValue: {
        decltype(Traits::number_value(input))
            in_number_value = Traits::number_value(input);
        fragment->data.f_number_value = in_number_value;
        break;
      }
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kBooleanValue: {
        decltype(Traits::boolean_value(input))
            in_boolean_value = Traits::boolean_value(input);
        fragment->data.f_boolean_value = in_boolean_value;
        break;
      }
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kStringValue: {
        decltype(Traits::string_value(input))
            in_string_value = Traits::string_value(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_string_value)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
            in_string_value, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null string_value in RemoteInvocationArgument union");
        fragment->data.f_string_value.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kSingletonValue: {
        decltype(Traits::singleton_value(input))
            in_singleton_value = Traits::singleton_value(input);
        mojo::internal::Serialize<::blink::mojom::SingletonJavaScriptValue>(
            in_singleton_value, &fragment->data.f_singleton_value);
        break;
      }
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kArrayValue: {
        decltype(Traits::array_value(input))
            in_array_value = Traits::array_value(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_array_value)::BaseType>
            value_fragment(fragment.message());
        const ContainerValidateParams array_value_validate_params(
            0, false, nullptr);
        mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::RemoteInvocationArgumentDataView>>(
            in_array_value, value_fragment, &array_value_validate_params);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null array_value in RemoteInvocationArgument union");
        fragment->data.f_array_value.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kTypedArrayValue: {
        decltype(Traits::typed_array_value(input))
            in_typed_array_value = Traits::typed_array_value(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_typed_array_value)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::blink::mojom::RemoteTypedArrayDataView>(
            in_typed_array_value, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null typed_array_value in RemoteInvocationArgument union");
        fragment->data.f_typed_array_value.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::RemoteInvocationArgumentDataView::Tag::kObjectIdValue: {
        decltype(Traits::object_id_value(input))
            in_object_id_value = Traits::object_id_value(input);
        fragment->data.f_object_id_value = in_object_id_value;
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::RemoteInvocationArgument_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::RemoteInvocationArgumentDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::blink::mojom::RemoteInvocationResultValueDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::blink::mojom::RemoteInvocationResultValueDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::blink::mojom::internal::RemoteInvocationResultValue_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::blink::mojom::RemoteInvocationResultValueDataView::Tag::kNumberValue: {
        decltype(Traits::number_value(input))
            in_number_value = Traits::number_value(input);
        fragment->data.f_number_value = in_number_value;
        break;
      }
      case ::blink::mojom::RemoteInvocationResultValueDataView::Tag::kBooleanValue: {
        decltype(Traits::boolean_value(input))
            in_boolean_value = Traits::boolean_value(input);
        fragment->data.f_boolean_value = in_boolean_value;
        break;
      }
      case ::blink::mojom::RemoteInvocationResultValueDataView::Tag::kStringValue: {
        decltype(Traits::string_value(input))
            in_string_value = Traits::string_value(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_string_value)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
            in_string_value, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null string_value in RemoteInvocationResultValue union");
        fragment->data.f_string_value.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::blink::mojom::RemoteInvocationResultValueDataView::Tag::kSingletonValue: {
        decltype(Traits::singleton_value(input))
            in_singleton_value = Traits::singleton_value(input);
        mojo::internal::Serialize<::blink::mojom::SingletonJavaScriptValue>(
            in_singleton_value, &fragment->data.f_singleton_value);
        break;
      }
      case ::blink::mojom::RemoteInvocationResultValueDataView::Tag::kObjectId: {
        decltype(Traits::object_id(input))
            in_object_id = Traits::object_id(input);
        fragment->data.f_object_id = in_object_id;
        break;
      }
    }
  }

  static bool Deserialize(::blink::mojom::internal::RemoteInvocationResultValue_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::blink::mojom::RemoteInvocationResultValueDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace blink {
namespace mojom {

inline void RemoteTypedArrayDataView::GetBufferDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->buffer;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void RemoteInvocationResultDataView::GetValueDataView(
    RemoteInvocationResultValueDataView* output) {
  auto pointer = &data_->value;
  *output = RemoteInvocationResultValueDataView(pointer, message_);
}


inline void RemoteInvocationArgumentDataView::GetStringValueDataView(
    ::mojo_base::mojom::String16DataView* output) const {
  CHECK(is_string_value());
  *output = ::mojo_base::mojom::String16DataView(data_->data.f_string_value.Get(), message_);
}
inline void RemoteInvocationArgumentDataView::GetArrayValueDataView(
    mojo::ArrayDataView<RemoteInvocationArgumentDataView>* output) const {
  CHECK(is_array_value());
  *output = mojo::ArrayDataView<RemoteInvocationArgumentDataView>(data_->data.f_array_value.Get(), message_);
}
inline void RemoteInvocationArgumentDataView::GetTypedArrayValueDataView(
    RemoteTypedArrayDataView* output) const {
  CHECK(is_typed_array_value());
  *output = RemoteTypedArrayDataView(data_->data.f_typed_array_value.Get(), message_);
}

inline void RemoteInvocationResultValueDataView::GetStringValueDataView(
    ::mojo_base::mojom::String16DataView* output) const {
  CHECK(is_string_value());
  *output = ::mojo_base::mojom::String16DataView(data_->data.f_string_value.Get(), message_);
}


}  // namespace mojom
}  // namespace blink

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::SingletonJavaScriptValue> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::SingletonJavaScriptValue value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::RemoteArrayType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::RemoteArrayType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) TraceFormatTraits<::blink::mojom::RemoteInvocationError> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::blink::mojom::RemoteInvocationError value);
};

} // namespace perfetto

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_REMOTE_OBJECTS_REMOTE_OBJECTS_MOJOM_SHARED_H_