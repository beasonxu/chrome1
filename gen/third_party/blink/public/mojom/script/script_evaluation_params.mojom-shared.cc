// third_party/blink/public/mojom/script/script_evaluation_params.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/script/script_evaluation_params.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/script/script_evaluation_params.mojom-params-data.h"
namespace blink {
namespace mojom {

static NOINLINE const char* UserActivationOptionToStringHelper(UserActivationOption value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case UserActivationOption::kDoNotActivate:
      return "kDoNotActivate";
    case UserActivationOption::kActivate:
      return "kActivate";
    default:
      return nullptr;
  }
}

std::string UserActivationOptionToString(UserActivationOption value) {
  const char *str = UserActivationOptionToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown UserActivationOption value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, UserActivationOption value) {
  return os << UserActivationOptionToString(value);
}

static NOINLINE const char* WantResultOptionToStringHelper(WantResultOption value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case WantResultOption::kNoResult:
      return "kNoResult";
    case WantResultOption::kWantResult:
      return "kWantResult";
    default:
      return nullptr;
  }
}

std::string WantResultOptionToString(WantResultOption value) {
  const char *str = WantResultOptionToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown WantResultOption value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, WantResultOption value) {
  return os << WantResultOptionToString(value);
}

static NOINLINE const char* PromiseResultOptionToStringHelper(PromiseResultOption value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case PromiseResultOption::kAwait:
      return "kAwait";
    case PromiseResultOption::kDoNotWait:
      return "kDoNotWait";
    default:
      return nullptr;
  }
}

std::string PromiseResultOptionToString(PromiseResultOption value) {
  const char *str = PromiseResultOptionToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown PromiseResultOption value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, PromiseResultOption value) {
  return os << PromiseResultOptionToString(value);
}

static NOINLINE const char* EvaluationTimingToStringHelper(EvaluationTiming value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case EvaluationTiming::kAsynchronous:
      return "kAsynchronous";
    case EvaluationTiming::kSynchronous:
      return "kSynchronous";
    default:
      return nullptr;
  }
}

std::string EvaluationTimingToString(EvaluationTiming value) {
  const char *str = EvaluationTimingToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown EvaluationTiming value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, EvaluationTiming value) {
  return os << EvaluationTimingToString(value);
}

static NOINLINE const char* LoadEventBlockingOptionToStringHelper(LoadEventBlockingOption value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case LoadEventBlockingOption::kDoNotBlock:
      return "kDoNotBlock";
    case LoadEventBlockingOption::kBlock:
      return "kBlock";
    default:
      return nullptr;
  }
}

std::string LoadEventBlockingOptionToString(LoadEventBlockingOption value) {
  const char *str = LoadEventBlockingOptionToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown LoadEventBlockingOption value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, LoadEventBlockingOption value) {
  return os << LoadEventBlockingOptionToString(value);
}

namespace internal {

}  // namespace internal
}  // namespace mojom
}  // namespace blink

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::UserActivationOption>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::UserActivationOption value) {
  return std::move(context).WriteString(::blink::mojom::UserActivationOptionToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::WantResultOption>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::WantResultOption value) {
  return std::move(context).WriteString(::blink::mojom::WantResultOptionToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::PromiseResultOption>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::PromiseResultOption value) {
  return std::move(context).WriteString(::blink::mojom::PromiseResultOptionToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::EvaluationTiming>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::EvaluationTiming value) {
  return std::move(context).WriteString(::blink::mojom::EvaluationTimingToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::blink::mojom::LoadEventBlockingOption>::WriteIntoTrace(
   perfetto::TracedValue context, ::blink::mojom::LoadEventBlockingOption value) {
  return std::move(context).WriteString(::blink::mojom::LoadEventBlockingOptionToString(value));
}

} // namespace perfetto