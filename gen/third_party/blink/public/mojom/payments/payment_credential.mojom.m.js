// third_party/blink/public/mojom/payments/payment_credential.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const PaymentCredentialStorageStatusSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const PaymentCredentialStorageStatus = {
  
  SUCCESS: 0,
  FAILED_TO_STORE_CREDENTIAL: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class PaymentCredentialPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'payments.mojom.PaymentCredential', scope);
  }
}

/** @interface */
export class PaymentCredentialInterface {
  
  /**
   * @param { !Array<!number> } credentialId
   * @param { !string } rpId
   * @param { !Array<!number> } userId
   * @return {!Promise<{
        status: !PaymentCredentialStorageStatus,
   *  }>}
   */

  storePaymentCredential(credentialId, rpId, userId) {}
}

/**
 * @implements { PaymentCredentialInterface }
 */
export class PaymentCredentialRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!PaymentCredentialPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          PaymentCredentialPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!PaymentCredentialPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!number> } credentialId
   * @param { !string } rpId
   * @param { !Array<!number> } userId
   * @return {!Promise<{
        status: !PaymentCredentialStorageStatus,
   *  }>}
   */

  storePaymentCredential(
      credentialId,
      rpId,
      userId) {
    return this.proxy.sendMessage(
        0,
        PaymentCredential_StorePaymentCredential_ParamsSpec.$,
        PaymentCredential_StorePaymentCredential_ResponseParamsSpec.$,
        [
          credentialId,
          rpId,
          userId
        ]);
  }
}

/**
 * An object which receives request messages for the PaymentCredential
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class PaymentCredentialReceiver {
  /**
   * @param {!PaymentCredentialInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!PaymentCredentialRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        PaymentCredentialRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PaymentCredentialRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        PaymentCredential_StorePaymentCredential_ParamsSpec.$,
        PaymentCredential_StorePaymentCredential_ResponseParamsSpec.$,
        impl.storePaymentCredential.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class PaymentCredential {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "payments.mojom.PaymentCredential";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!PaymentCredentialRemote}
   */
  static getRemote() {
    let remote = new PaymentCredentialRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the PaymentCredential
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class PaymentCredentialCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      PaymentCredentialRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!PaymentCredentialRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.storePaymentCredential =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        PaymentCredential_StorePaymentCredential_ParamsSpec.$,
        PaymentCredential_StorePaymentCredential_ResponseParamsSpec.$,
        this.storePaymentCredential.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PaymentCredential_StorePaymentCredential_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PaymentCredential_StorePaymentCredential_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    PaymentCredential_StorePaymentCredential_ParamsSpec.$,
    'PaymentCredential_StorePaymentCredential_Params',
    [
      mojo.internal.StructField(
        'credentialId', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'rpId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'userId', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class PaymentCredential_StorePaymentCredential_Params {
  constructor() {
    /** @type { !Array<!number> } */
    this.credentialId;
    /** @type { !string } */
    this.rpId;
    /** @type { !Array<!number> } */
    this.userId;
  }
}



mojo.internal.Struct(
    PaymentCredential_StorePaymentCredential_ResponseParamsSpec.$,
    'PaymentCredential_StorePaymentCredential_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        PaymentCredentialStorageStatusSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class PaymentCredential_StorePaymentCredential_ResponseParams {
  constructor() {
    /** @type { !PaymentCredentialStorageStatus } */
    this.status;
  }
}

