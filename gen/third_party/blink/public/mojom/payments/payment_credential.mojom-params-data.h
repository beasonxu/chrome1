// third_party/blink/public/mojom/payments/payment_credential.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAYMENTS_PAYMENT_CREDENTIAL_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAYMENTS_PAYMENT_CREDENTIAL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace payments {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PaymentCredential_StorePaymentCredential_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> credential_id;
  mojo::internal::Pointer<mojo::internal::String_Data> rp_id;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> user_id;

 private:
  friend class mojo::internal::MessageFragment<PaymentCredential_StorePaymentCredential_Params_Data>;

  PaymentCredential_StorePaymentCredential_Params_Data();
  ~PaymentCredential_StorePaymentCredential_Params_Data() = delete;
};
static_assert(sizeof(PaymentCredential_StorePaymentCredential_Params_Data) == 32,
              "Bad sizeof(PaymentCredential_StorePaymentCredential_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) PaymentCredential_StorePaymentCredential_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PaymentCredential_StorePaymentCredential_ResponseParams_Data>;

  PaymentCredential_StorePaymentCredential_ResponseParams_Data();
  ~PaymentCredential_StorePaymentCredential_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaymentCredential_StorePaymentCredential_ResponseParams_Data) == 16,
              "Bad sizeof(PaymentCredential_StorePaymentCredential_ResponseParams_Data)");

}  // namespace internal


class PaymentCredential_StorePaymentCredential_ParamsDataView {
 public:
  PaymentCredential_StorePaymentCredential_ParamsDataView() = default;

  PaymentCredential_StorePaymentCredential_ParamsDataView(
      internal::PaymentCredential_StorePaymentCredential_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCredentialIdDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCredentialId(UserType* output) {
    
    auto* pointer = data_->credential_id.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  inline void GetRpIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRpId(UserType* output) {
    
    auto* pointer = data_->rp_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUserIdDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUserId(UserType* output) {
    
    auto* pointer = data_->user_id.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::PaymentCredential_StorePaymentCredential_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaymentCredential_StorePaymentCredential_ResponseParamsDataView {
 public:
  PaymentCredential_StorePaymentCredential_ResponseParamsDataView() = default;

  PaymentCredential_StorePaymentCredential_ResponseParamsDataView(
      internal::PaymentCredential_StorePaymentCredential_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::payments::mojom::PaymentCredentialStorageStatus>(
        data_value, output);
  }
  PaymentCredentialStorageStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::payments::mojom::PaymentCredentialStorageStatus>(data_->status));
  }
 private:
  internal::PaymentCredential_StorePaymentCredential_ResponseParams_Data* data_ = nullptr;
};


inline void PaymentCredential_StorePaymentCredential_ParamsDataView::GetCredentialIdDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->credential_id.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}
inline void PaymentCredential_StorePaymentCredential_ParamsDataView::GetRpIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->rp_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void PaymentCredential_StorePaymentCredential_ParamsDataView::GetUserIdDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->user_id.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}



}  // namespace mojom
}  // namespace payments

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_PAYMENTS_PAYMENT_CREDENTIAL_MOJOM_PARAMS_DATA_H_