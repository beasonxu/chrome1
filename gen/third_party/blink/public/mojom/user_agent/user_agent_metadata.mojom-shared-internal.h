// third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_USER_AGENT_USER_AGENT_METADATA_MOJOM_SHARED_INTERNAL_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_USER_AGENT_USER_AGENT_METADATA_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace blink {
namespace mojom {
namespace internal {
class UserAgentBrandVersion_Data;
class UserAgentMetadata_Data;
class UserAgentOverride_Data;

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) UserAgentBrandVersion_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> brand;
  mojo::internal::Pointer<mojo::internal::String_Data> version;

 private:
  friend class mojo::internal::MessageFragment<UserAgentBrandVersion_Data>;

  UserAgentBrandVersion_Data();
  ~UserAgentBrandVersion_Data() = delete;
};
static_assert(sizeof(UserAgentBrandVersion_Data) == 24,
              "Bad sizeof(UserAgentBrandVersion_Data)");
// Used by UserAgentBrandVersion::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct UserAgentBrandVersion_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  UserAgentBrandVersion_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~UserAgentBrandVersion_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<UserAgentBrandVersion_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    UserAgentBrandVersion_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) UserAgentMetadata_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::UserAgentBrandVersion_Data>>> brand_version_list;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::UserAgentBrandVersion_Data>>> brand_full_version_list;
  mojo::internal::Pointer<mojo::internal::String_Data> full_version;
  mojo::internal::Pointer<mojo::internal::String_Data> platform;
  mojo::internal::Pointer<mojo::internal::String_Data> platform_version;
  mojo::internal::Pointer<mojo::internal::String_Data> architecture;
  mojo::internal::Pointer<mojo::internal::String_Data> model;
  uint8_t mobile : 1;
  uint8_t wow64 : 1;
  uint8_t pad8_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> bitness;

 private:
  friend class mojo::internal::MessageFragment<UserAgentMetadata_Data>;

  UserAgentMetadata_Data();
  ~UserAgentMetadata_Data() = delete;
};
static_assert(sizeof(UserAgentMetadata_Data) == 80,
              "Bad sizeof(UserAgentMetadata_Data)");
// Used by UserAgentMetadata::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct UserAgentMetadata_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  UserAgentMetadata_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~UserAgentMetadata_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<UserAgentMetadata_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    UserAgentMetadata_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) UserAgentOverride_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> ua_string_override;
  mojo::internal::Pointer<internal::UserAgentMetadata_Data> ua_metadata_override;

 private:
  friend class mojo::internal::MessageFragment<UserAgentOverride_Data>;

  UserAgentOverride_Data();
  ~UserAgentOverride_Data() = delete;
};
static_assert(sizeof(UserAgentOverride_Data) == 24,
              "Bad sizeof(UserAgentOverride_Data)");
// Used by UserAgentOverride::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct UserAgentOverride_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  UserAgentOverride_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~UserAgentOverride_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<UserAgentOverride_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    UserAgentOverride_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace blink

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_USER_AGENT_USER_AGENT_METADATA_MOJOM_SHARED_INTERNAL_H_