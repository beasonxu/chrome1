// third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-params-data.h"
namespace blink {
namespace mojom {

namespace internal {


// static
bool UserAgentBrandVersion_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const UserAgentBrandVersion_Data* object =
      static_cast<const UserAgentBrandVersion_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->brand, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams brand_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->brand, validation_context,
                                         &brand_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->version, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams version_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->version, validation_context,
                                         &version_validate_params)) {
    return false;
  }

  return true;
}

UserAgentBrandVersion_Data::UserAgentBrandVersion_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool UserAgentMetadata_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 80, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const UserAgentMetadata_Data* object =
      static_cast<const UserAgentMetadata_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->brand_version_list, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams brand_version_list_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->brand_version_list, validation_context,
                                         &brand_version_list_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->brand_full_version_list, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams brand_full_version_list_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->brand_full_version_list, validation_context,
                                         &brand_full_version_list_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->full_version, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams full_version_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->full_version, validation_context,
                                         &full_version_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->platform, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams platform_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->platform, validation_context,
                                         &platform_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->platform_version, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams platform_version_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->platform_version, validation_context,
                                         &platform_version_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->architecture, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams architecture_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->architecture, validation_context,
                                         &architecture_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->model, 7, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams model_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->model, validation_context,
                                         &model_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->bitness, 9, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams bitness_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->bitness, validation_context,
                                         &bitness_validate_params)) {
    return false;
  }

  return true;
}

UserAgentMetadata_Data::UserAgentMetadata_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool UserAgentOverride_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const UserAgentOverride_Data* object =
      static_cast<const UserAgentOverride_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->ua_string_override, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams ua_string_override_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->ua_string_override, validation_context,
                                         &ua_string_override_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateStruct(object->ua_metadata_override, validation_context))
    return false;

  return true;
}

UserAgentOverride_Data::UserAgentOverride_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace blink