// third_party/blink/public/mojom/content_index/content_index.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTENT_INDEX_CONTENT_INDEX_MOJOM_PARAMS_DATA_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTENT_INDEX_CONTENT_INDEX_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace blink {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_GetIconSizes_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t category;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_GetIconSizes_Params_Data>;

  ContentIndexService_GetIconSizes_Params_Data();
  ~ContentIndexService_GetIconSizes_Params_Data() = delete;
};
static_assert(sizeof(ContentIndexService_GetIconSizes_Params_Data) == 16,
              "Bad sizeof(ContentIndexService_GetIconSizes_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_GetIconSizes_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Size_Data>>> icon_sizes;

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_GetIconSizes_ResponseParams_Data>;

  ContentIndexService_GetIconSizes_ResponseParams_Data();
  ~ContentIndexService_GetIconSizes_ResponseParams_Data() = delete;
};
static_assert(sizeof(ContentIndexService_GetIconSizes_ResponseParams_Data) == 16,
              "Bad sizeof(ContentIndexService_GetIconSizes_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_CheckOfflineCapability_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> launch_url;

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_CheckOfflineCapability_Params_Data>;

  ContentIndexService_CheckOfflineCapability_Params_Data();
  ~ContentIndexService_CheckOfflineCapability_Params_Data() = delete;
};
static_assert(sizeof(ContentIndexService_CheckOfflineCapability_Params_Data) == 24,
              "Bad sizeof(ContentIndexService_CheckOfflineCapability_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_CheckOfflineCapability_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_offline_capable : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_CheckOfflineCapability_ResponseParams_Data>;

  ContentIndexService_CheckOfflineCapability_ResponseParams_Data();
  ~ContentIndexService_CheckOfflineCapability_ResponseParams_Data() = delete;
};
static_assert(sizeof(ContentIndexService_CheckOfflineCapability_ResponseParams_Data) == 16,
              "Bad sizeof(ContentIndexService_CheckOfflineCapability_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_Add_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;
  mojo::internal::Pointer<internal::ContentDescription_Data> description;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::skia::mojom::internal::BitmapN32_Data>>> icon;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> launchUrl;

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_Add_Params_Data>;

  ContentIndexService_Add_Params_Data();
  ~ContentIndexService_Add_Params_Data() = delete;
};
static_assert(sizeof(ContentIndexService_Add_Params_Data) == 40,
              "Bad sizeof(ContentIndexService_Add_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_Add_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_Add_ResponseParams_Data>;

  ContentIndexService_Add_ResponseParams_Data();
  ~ContentIndexService_Add_ResponseParams_Data() = delete;
};
static_assert(sizeof(ContentIndexService_Add_ResponseParams_Data) == 16,
              "Bad sizeof(ContentIndexService_Add_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_Delete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_Delete_Params_Data>;

  ContentIndexService_Delete_Params_Data();
  ~ContentIndexService_Delete_Params_Data() = delete;
};
static_assert(sizeof(ContentIndexService_Delete_Params_Data) == 24,
              "Bad sizeof(ContentIndexService_Delete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_Delete_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_Delete_ResponseParams_Data>;

  ContentIndexService_Delete_ResponseParams_Data();
  ~ContentIndexService_Delete_ResponseParams_Data() = delete;
};
static_assert(sizeof(ContentIndexService_Delete_ResponseParams_Data) == 16,
              "Bad sizeof(ContentIndexService_Delete_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_GetDescriptions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t service_worker_registration_id;

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_GetDescriptions_Params_Data>;

  ContentIndexService_GetDescriptions_Params_Data();
  ~ContentIndexService_GetDescriptions_Params_Data() = delete;
};
static_assert(sizeof(ContentIndexService_GetDescriptions_Params_Data) == 16,
              "Bad sizeof(ContentIndexService_GetDescriptions_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_BLINK_COMMON_EXPORT) ContentIndexService_GetDescriptions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ContentDescription_Data>>> descriptions;

 private:
  friend class mojo::internal::MessageFragment<ContentIndexService_GetDescriptions_ResponseParams_Data>;

  ContentIndexService_GetDescriptions_ResponseParams_Data();
  ~ContentIndexService_GetDescriptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(ContentIndexService_GetDescriptions_ResponseParams_Data) == 24,
              "Bad sizeof(ContentIndexService_GetDescriptions_ResponseParams_Data)");

}  // namespace internal


class ContentIndexService_GetIconSizes_ParamsDataView {
 public:
  ContentIndexService_GetIconSizes_ParamsDataView() = default;

  ContentIndexService_GetIconSizes_ParamsDataView(
      internal::ContentIndexService_GetIconSizes_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCategory(UserType* output) const {
    auto data_value = data_->category;
    return mojo::internal::Deserialize<::blink::mojom::ContentCategory>(
        data_value, output);
  }
  ContentCategory category() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ContentCategory>(data_->category));
  }
 private:
  internal::ContentIndexService_GetIconSizes_Params_Data* data_ = nullptr;
};



class ContentIndexService_GetIconSizes_ResponseParamsDataView {
 public:
  ContentIndexService_GetIconSizes_ResponseParamsDataView() = default;

  ContentIndexService_GetIconSizes_ResponseParamsDataView(
      internal::ContentIndexService_GetIconSizes_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIconSizesDataView(
      mojo::ArrayDataView<::gfx::mojom::SizeDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIconSizes(UserType* output) {
    
    auto* pointer = data_->icon_sizes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::gfx::mojom::SizeDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ContentIndexService_GetIconSizes_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ContentIndexService_CheckOfflineCapability_ParamsDataView {
 public:
  ContentIndexService_CheckOfflineCapability_ParamsDataView() = default;

  ContentIndexService_CheckOfflineCapability_ParamsDataView(
      internal::ContentIndexService_CheckOfflineCapability_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
  inline void GetLaunchUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLaunchUrl(UserType* output) {
    
    auto* pointer = data_->launch_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ContentIndexService_CheckOfflineCapability_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ContentIndexService_CheckOfflineCapability_ResponseParamsDataView {
 public:
  ContentIndexService_CheckOfflineCapability_ResponseParamsDataView() = default;

  ContentIndexService_CheckOfflineCapability_ResponseParamsDataView(
      internal::ContentIndexService_CheckOfflineCapability_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool is_offline_capable() const {
    return data_->is_offline_capable;
  }
 private:
  internal::ContentIndexService_CheckOfflineCapability_ResponseParams_Data* data_ = nullptr;
};



class ContentIndexService_Add_ParamsDataView {
 public:
  ContentIndexService_Add_ParamsDataView() = default;

  ContentIndexService_Add_ParamsDataView(
      internal::ContentIndexService_Add_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
  inline void GetDescriptionDataView(
      ContentDescriptionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDescription(UserType* output) {
    
    auto* pointer = data_->description.Get();
    return mojo::internal::Deserialize<::blink::mojom::ContentDescriptionDataView>(
        pointer, output, message_);
  }
  inline void GetIconDataView(
      mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIcon(UserType* output) {
    
    auto* pointer = data_->icon.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>>(
        pointer, output, message_);
  }
  inline void GetLaunchUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLaunchUrl(UserType* output) {
    
    auto* pointer = data_->launchUrl.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::ContentIndexService_Add_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ContentIndexService_Add_ResponseParamsDataView {
 public:
  ContentIndexService_Add_ResponseParamsDataView() = default;

  ContentIndexService_Add_ResponseParamsDataView(
      internal::ContentIndexService_Add_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ContentIndexError>(
        data_value, output);
  }
  ContentIndexError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ContentIndexError>(data_->error));
  }
 private:
  internal::ContentIndexService_Add_ResponseParams_Data* data_ = nullptr;
};



class ContentIndexService_Delete_ParamsDataView {
 public:
  ContentIndexService_Delete_ParamsDataView() = default;

  ContentIndexService_Delete_ParamsDataView(
      internal::ContentIndexService_Delete_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
  inline void GetIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::ContentIndexService_Delete_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ContentIndexService_Delete_ResponseParamsDataView {
 public:
  ContentIndexService_Delete_ResponseParamsDataView() = default;

  ContentIndexService_Delete_ResponseParamsDataView(
      internal::ContentIndexService_Delete_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ContentIndexError>(
        data_value, output);
  }
  ContentIndexError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ContentIndexError>(data_->error));
  }
 private:
  internal::ContentIndexService_Delete_ResponseParams_Data* data_ = nullptr;
};



class ContentIndexService_GetDescriptions_ParamsDataView {
 public:
  ContentIndexService_GetDescriptions_ParamsDataView() = default;

  ContentIndexService_GetDescriptions_ParamsDataView(
      internal::ContentIndexService_GetDescriptions_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t service_worker_registration_id() const {
    return data_->service_worker_registration_id;
  }
 private:
  internal::ContentIndexService_GetDescriptions_Params_Data* data_ = nullptr;
};



class ContentIndexService_GetDescriptions_ResponseParamsDataView {
 public:
  ContentIndexService_GetDescriptions_ResponseParamsDataView() = default;

  ContentIndexService_GetDescriptions_ResponseParamsDataView(
      internal::ContentIndexService_GetDescriptions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::blink::mojom::ContentIndexError>(
        data_value, output);
  }
  ContentIndexError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::ContentIndexError>(data_->error));
  }
  inline void GetDescriptionsDataView(
      mojo::ArrayDataView<ContentDescriptionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDescriptions(UserType* output) {
    
    auto* pointer = data_->descriptions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::ContentDescriptionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::ContentIndexService_GetDescriptions_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void ContentIndexService_GetIconSizes_ResponseParamsDataView::GetIconSizesDataView(
    mojo::ArrayDataView<::gfx::mojom::SizeDataView>* output) {
  auto pointer = data_->icon_sizes.Get();
  *output = mojo::ArrayDataView<::gfx::mojom::SizeDataView>(pointer, message_);
}


inline void ContentIndexService_CheckOfflineCapability_ParamsDataView::GetLaunchUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->launch_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void ContentIndexService_Add_ParamsDataView::GetDescriptionDataView(
    ContentDescriptionDataView* output) {
  auto pointer = data_->description.Get();
  *output = ContentDescriptionDataView(pointer, message_);
}
inline void ContentIndexService_Add_ParamsDataView::GetIconDataView(
    mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>* output) {
  auto pointer = data_->icon.Get();
  *output = mojo::ArrayDataView<::skia::mojom::BitmapN32DataView>(pointer, message_);
}
inline void ContentIndexService_Add_ParamsDataView::GetLaunchUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->launchUrl.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}




inline void ContentIndexService_Delete_ParamsDataView::GetIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->id.Get();
  *output = mojo::StringDataView(pointer, message_);
}






inline void ContentIndexService_GetDescriptions_ResponseParamsDataView::GetDescriptionsDataView(
    mojo::ArrayDataView<ContentDescriptionDataView>* output) {
  auto pointer = data_->descriptions.Get();
  *output = mojo::ArrayDataView<ContentDescriptionDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace blink

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // THIRD_PARTY_BLINK_PUBLIC_MOJOM_CONTENT_INDEX_CONTENT_INDEX_MOJOM_PARAMS_DATA_H_