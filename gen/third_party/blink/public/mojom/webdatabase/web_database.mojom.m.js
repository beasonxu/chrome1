// third_party/blink/public/mojom/webdatabase/web_database.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  File as mojoBase_mojom_File,
  FileSpec as mojoBase_mojom_FileSpec
} from '../../../../../mojo/public/mojom/base/file.mojom.m.js';

import {
  String16 as mojoBase_mojom_String16,
  String16Spec as mojoBase_mojom_String16Spec
} from '../../../../../mojo/public/mojom/base/string16.mojom.m.js';

import {
  Origin as url_mojom_Origin,
  OriginSpec as url_mojom_OriginSpec
} from '../../../../../url/mojom/origin.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class WebDatabasePendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.WebDatabase', scope);
  }
}

/** @interface */
export class WebDatabaseInterface {
  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } name
   * @param { !bigint } size
   */

  updateSize(origin, name, size) {}
  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } name
   */

  closeImmediately(origin, name) {}
}

/**
 * @implements { WebDatabaseInterface }
 */
export class WebDatabaseRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!WebDatabasePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          WebDatabasePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!WebDatabasePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } name
   * @param { !bigint } size
   */

  updateSize(
      origin,
      name,
      size) {
    this.proxy.sendMessage(
        0,
        WebDatabase_UpdateSize_ParamsSpec.$,
        null,
        [
          origin,
          name,
          size
        ]);
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } name
   */

  closeImmediately(
      origin,
      name) {
    this.proxy.sendMessage(
        1,
        WebDatabase_CloseImmediately_ParamsSpec.$,
        null,
        [
          origin,
          name
        ]);
  }
}

/**
 * An object which receives request messages for the WebDatabase
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class WebDatabaseReceiver {
  /**
   * @param {!WebDatabaseInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!WebDatabaseRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        WebDatabaseRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!WebDatabaseRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        WebDatabase_UpdateSize_ParamsSpec.$,
        null,
        impl.updateSize.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        WebDatabase_CloseImmediately_ParamsSpec.$,
        null,
        impl.closeImmediately.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class WebDatabase {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.WebDatabase";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!WebDatabaseRemote}
   */
  static getRemote() {
    let remote = new WebDatabaseRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the WebDatabase
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class WebDatabaseCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      WebDatabaseRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!WebDatabaseRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.updateSize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        WebDatabase_UpdateSize_ParamsSpec.$,
        null,
        this.updateSize.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.closeImmediately =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        WebDatabase_CloseImmediately_ParamsSpec.$,
        null,
        this.closeImmediately.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class WebDatabaseHostPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'blink.mojom.WebDatabaseHost', scope);
  }
}

/** @interface */
export class WebDatabaseHostInterface {
  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @param { !number } desiredFlags
   * @return {!Promise<{
        file: ?mojoBase_mojom_File,
   *  }>}
   */

  openFile(vfsFileName, desiredFlags) {}
  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @param { !boolean } syncDir
   * @return {!Promise<{
        sqliteErrorCode: !number,
   *  }>}
   */

  deleteFile(vfsFileName, syncDir) {}
  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @return {!Promise<{
        attributes: !number,
   *  }>}
   */

  getFileAttributes(vfsFileName) {}
  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @param { !bigint } expectedSize
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  setFileSize(vfsFileName, expectedSize) {}
  
  /**
   * @param { !url_mojom_Origin } origin
   * @return {!Promise<{
        spaceAvailable: !bigint,
   *  }>}
   */

  getSpaceAvailable(origin) {}
  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   * @param { !mojoBase_mojom_String16 } databaseDescription
   */

  opened(origin, databaseName, databaseDescription) {}
  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   */

  modified(origin, databaseName) {}
  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   */

  closed(origin, databaseName) {}
  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   * @param { !number } error
   */

  handleSqliteError(origin, databaseName, error) {}
}

/**
 * @implements { WebDatabaseHostInterface }
 */
export class WebDatabaseHostRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!WebDatabaseHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          WebDatabaseHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!WebDatabaseHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @param { !number } desiredFlags
   * @return {!Promise<{
        file: ?mojoBase_mojom_File,
   *  }>}
   */

  openFile(
      vfsFileName,
      desiredFlags) {
    return this.proxy.sendMessage(
        0,
        WebDatabaseHost_OpenFile_ParamsSpec.$,
        WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
        [
          vfsFileName,
          desiredFlags
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @param { !boolean } syncDir
   * @return {!Promise<{
        sqliteErrorCode: !number,
   *  }>}
   */

  deleteFile(
      vfsFileName,
      syncDir) {
    return this.proxy.sendMessage(
        1,
        WebDatabaseHost_DeleteFile_ParamsSpec.$,
        WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
        [
          vfsFileName,
          syncDir
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @return {!Promise<{
        attributes: !number,
   *  }>}
   */

  getFileAttributes(
      vfsFileName) {
    return this.proxy.sendMessage(
        2,
        WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
        WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
        [
          vfsFileName
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_String16 } vfsFileName
   * @param { !bigint } expectedSize
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  setFileSize(
      vfsFileName,
      expectedSize) {
    return this.proxy.sendMessage(
        3,
        WebDatabaseHost_SetFileSize_ParamsSpec.$,
        WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
        [
          vfsFileName,
          expectedSize
        ]);
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @return {!Promise<{
        spaceAvailable: !bigint,
   *  }>}
   */

  getSpaceAvailable(
      origin) {
    return this.proxy.sendMessage(
        4,
        WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
        WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
        [
          origin
        ]);
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   * @param { !mojoBase_mojom_String16 } databaseDescription
   */

  opened(
      origin,
      databaseName,
      databaseDescription) {
    this.proxy.sendMessage(
        5,
        WebDatabaseHost_Opened_ParamsSpec.$,
        null,
        [
          origin,
          databaseName,
          databaseDescription
        ]);
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   */

  modified(
      origin,
      databaseName) {
    this.proxy.sendMessage(
        6,
        WebDatabaseHost_Modified_ParamsSpec.$,
        null,
        [
          origin,
          databaseName
        ]);
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   */

  closed(
      origin,
      databaseName) {
    this.proxy.sendMessage(
        7,
        WebDatabaseHost_Closed_ParamsSpec.$,
        null,
        [
          origin,
          databaseName
        ]);
  }

  
  /**
   * @param { !url_mojom_Origin } origin
   * @param { !mojoBase_mojom_String16 } databaseName
   * @param { !number } error
   */

  handleSqliteError(
      origin,
      databaseName,
      error) {
    this.proxy.sendMessage(
        8,
        WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
        null,
        [
          origin,
          databaseName,
          error
        ]);
  }
}

/**
 * An object which receives request messages for the WebDatabaseHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class WebDatabaseHostReceiver {
  /**
   * @param {!WebDatabaseHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!WebDatabaseHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        WebDatabaseHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!WebDatabaseHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        WebDatabaseHost_OpenFile_ParamsSpec.$,
        WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
        impl.openFile.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        WebDatabaseHost_DeleteFile_ParamsSpec.$,
        WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
        impl.deleteFile.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
        WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
        impl.getFileAttributes.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        WebDatabaseHost_SetFileSize_ParamsSpec.$,
        WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
        impl.setFileSize.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
        WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
        impl.getSpaceAvailable.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        WebDatabaseHost_Opened_ParamsSpec.$,
        null,
        impl.opened.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        WebDatabaseHost_Modified_ParamsSpec.$,
        null,
        impl.modified.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        WebDatabaseHost_Closed_ParamsSpec.$,
        null,
        impl.closed.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
        null,
        impl.handleSqliteError.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class WebDatabaseHost {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.WebDatabaseHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!WebDatabaseHostRemote}
   */
  static getRemote() {
    let remote = new WebDatabaseHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the WebDatabaseHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class WebDatabaseHostCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      WebDatabaseHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!WebDatabaseHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.openFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        WebDatabaseHost_OpenFile_ParamsSpec.$,
        WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
        this.openFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.deleteFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        WebDatabaseHost_DeleteFile_ParamsSpec.$,
        WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
        this.deleteFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getFileAttributes =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
        WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
        this.getFileAttributes.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setFileSize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        WebDatabaseHost_SetFileSize_ParamsSpec.$,
        WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
        this.setFileSize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSpaceAvailable =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
        WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
        this.getSpaceAvailable.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.opened =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        WebDatabaseHost_Opened_ParamsSpec.$,
        null,
        this.opened.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.modified =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        WebDatabaseHost_Modified_ParamsSpec.$,
        null,
        this.modified.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.closed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        WebDatabaseHost_Closed_ParamsSpec.$,
        null,
        this.closed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.handleSqliteError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
        null,
        this.handleSqliteError.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabase_UpdateSize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabase_CloseImmediately_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_OpenFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_OpenFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_DeleteFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_DeleteFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_GetFileAttributes_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_GetFileAttributes_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_SetFileSize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_SetFileSize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_GetSpaceAvailable_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_Opened_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_Modified_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_Closed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const WebDatabaseHost_HandleSqliteError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    WebDatabase_UpdateSize_ParamsSpec.$,
    'WebDatabase_UpdateSize_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'size', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class WebDatabase_UpdateSize_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !mojoBase_mojom_String16 } */
    this.name;
    /** @type { !bigint } */
    this.size;
  }
}



mojo.internal.Struct(
    WebDatabase_CloseImmediately_ParamsSpec.$,
    'WebDatabase_CloseImmediately_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class WebDatabase_CloseImmediately_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !mojoBase_mojom_String16 } */
    this.name;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_OpenFile_ParamsSpec.$,
    'WebDatabaseHost_OpenFile_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'desiredFlags', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class WebDatabaseHost_OpenFile_Params {
  constructor() {
    /** @type { !mojoBase_mojom_String16 } */
    this.vfsFileName;
    /** @type { !number } */
    this.desiredFlags;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
    'WebDatabaseHost_OpenFile_ResponseParams',
    [
      mojo.internal.StructField(
        'file', 0,
        0,
        mojoBase_mojom_FileSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_OpenFile_ResponseParams {
  constructor() {
    /** @type { (mojoBase_mojom_File|undefined) } */
    this.file;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_DeleteFile_ParamsSpec.$,
    'WebDatabaseHost_DeleteFile_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'syncDir', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class WebDatabaseHost_DeleteFile_Params {
  constructor() {
    /** @type { !mojoBase_mojom_String16 } */
    this.vfsFileName;
    /** @type { !boolean } */
    this.syncDir;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
    'WebDatabaseHost_DeleteFile_ResponseParams',
    [
      mojo.internal.StructField(
        'sqliteErrorCode', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_DeleteFile_ResponseParams {
  constructor() {
    /** @type { !number } */
    this.sqliteErrorCode;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
    'WebDatabaseHost_GetFileAttributes_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_GetFileAttributes_Params {
  constructor() {
    /** @type { !mojoBase_mojom_String16 } */
    this.vfsFileName;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
    'WebDatabaseHost_GetFileAttributes_ResponseParams',
    [
      mojo.internal.StructField(
        'attributes', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_GetFileAttributes_ResponseParams {
  constructor() {
    /** @type { !number } */
    this.attributes;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_SetFileSize_ParamsSpec.$,
    'WebDatabaseHost_SetFileSize_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'expectedSize', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class WebDatabaseHost_SetFileSize_Params {
  constructor() {
    /** @type { !mojoBase_mojom_String16 } */
    this.vfsFileName;
    /** @type { !bigint } */
    this.expectedSize;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
    'WebDatabaseHost_SetFileSize_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_SetFileSize_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
    'WebDatabaseHost_GetSpaceAvailable_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_GetSpaceAvailable_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
    'WebDatabaseHost_GetSpaceAvailable_ResponseParams',
    [
      mojo.internal.StructField(
        'spaceAvailable', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class WebDatabaseHost_GetSpaceAvailable_ResponseParams {
  constructor() {
    /** @type { !bigint } */
    this.spaceAvailable;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_Opened_ParamsSpec.$,
    'WebDatabaseHost_Opened_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'databaseDescription', 16,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class WebDatabaseHost_Opened_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !mojoBase_mojom_String16 } */
    this.databaseName;
    /** @type { !mojoBase_mojom_String16 } */
    this.databaseDescription;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_Modified_ParamsSpec.$,
    'WebDatabaseHost_Modified_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class WebDatabaseHost_Modified_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !mojoBase_mojom_String16 } */
    this.databaseName;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_Closed_ParamsSpec.$,
    'WebDatabaseHost_Closed_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class WebDatabaseHost_Closed_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !mojoBase_mojom_String16 } */
    this.databaseName;
  }
}



mojo.internal.Struct(
    WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
    'WebDatabaseHost_HandleSqliteError_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase_mojom_String16Spec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'error', 16,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class WebDatabaseHost_HandleSqliteError_Params {
  constructor() {
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !mojoBase_mojom_String16 } */
    this.databaseName;
    /** @type { !number } */
    this.error;
  }
}

