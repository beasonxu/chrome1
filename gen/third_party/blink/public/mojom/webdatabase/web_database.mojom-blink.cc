// third_party/blink/public/mojom/webdatabase/web_database.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "third_party/blink/public/mojom/webdatabase/web_database.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "third_party/blink/public/mojom/webdatabase/web_database.mojom-params-data.h"
#include "third_party/blink/public/mojom/webdatabase/web_database.mojom-shared-message-ids.h"

#include "third_party/blink/public/mojom/webdatabase/web_database.mojom-blink-import-headers.h"
#include "third_party/blink/public/mojom/webdatabase/web_database.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBDATABASE_WEB_DATABASE_MOJOM_BLINK_JUMBO_H_
#define THIRD_PARTY_BLINK_PUBLIC_MOJOM_WEBDATABASE_WEB_DATABASE_MOJOM_BLINK_JUMBO_H_
#endif



namespace blink {
namespace mojom {
namespace blink {
const char WebDatabase::Name_[] = "blink.mojom.WebDatabase";

WebDatabase::IPCStableHashFunction WebDatabase::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebDatabase_UpdateSize_Name: {
      return &WebDatabase::UpdateSize_Sym::IPCStableHash;
    }
    case internal::kWebDatabase_CloseImmediately_Name: {
      return &WebDatabase::CloseImmediately_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebDatabase::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebDatabase_UpdateSize_Name:
            return "Receive blink::mojom::WebDatabase::UpdateSize";
      case internal::kWebDatabase_CloseImmediately_Name:
            return "Receive blink::mojom::WebDatabase::CloseImmediately";
    }
  } else {
    switch (message.name()) {
      case internal::kWebDatabase_UpdateSize_Name:
            return "Receive reply blink::mojom::WebDatabase::UpdateSize";
      case internal::kWebDatabase_CloseImmediately_Name:
            return "Receive reply blink::mojom::WebDatabase::CloseImmediately";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebDatabase::UpdateSize_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabase::UpdateSize");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabase::CloseImmediately_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabase::CloseImmediately");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

WebDatabaseProxy::WebDatabaseProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void WebDatabaseProxy::UpdateSize(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, const ::WTF::String& in_name, int64_t in_size) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabase::UpdateSize", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("name"), in_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("size"), in_size,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabase_UpdateSize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabase_UpdateSize_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabase.UpdateSize request");
  mojo::internal::MessageFragment<
      typename decltype(params->name)::BaseType> name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_name, name_fragment);
  params->name.Set(
      name_fragment.is_null() ? nullptr : name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null name in WebDatabase.UpdateSize request");
  params->size = in_size;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabase::Name_);
  message.set_method_name("UpdateSize");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebDatabaseProxy::CloseImmediately(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, const ::WTF::String& in_name) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabase::CloseImmediately", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("name"), in_name,
                        "<value of type const ::WTF::String&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabase_CloseImmediately_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabase_CloseImmediately_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabase.CloseImmediately request");
  mojo::internal::MessageFragment<
      typename decltype(params->name)::BaseType> name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_name, name_fragment);
  params->name.Set(
      name_fragment.is_null() ? nullptr : name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null name in WebDatabase.CloseImmediately request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabase::Name_);
  message.set_method_name("CloseImmediately");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool WebDatabaseStubDispatch::Accept(
    WebDatabase* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebDatabase_UpdateSize_Name: {

      DCHECK(message->is_serialized());
      internal::WebDatabase_UpdateSize_Params_Data* params =
          reinterpret_cast<internal::WebDatabase_UpdateSize_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      ::WTF::String p_name{};
      int64_t p_size{};
      WebDatabase_UpdateSize_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (success && !input_data_view.ReadName(&p_name))
        success = false;
      if (success)
        p_size = input_data_view.size();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabase::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->UpdateSize(
std::move(p_origin), 
std::move(p_name), 
std::move(p_size));
      return true;
    }
    case internal::kWebDatabase_CloseImmediately_Name: {

      DCHECK(message->is_serialized());
      internal::WebDatabase_CloseImmediately_Params_Data* params =
          reinterpret_cast<internal::WebDatabase_CloseImmediately_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      ::WTF::String p_name{};
      WebDatabase_CloseImmediately_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (success && !input_data_view.ReadName(&p_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabase::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CloseImmediately(
std::move(p_origin), 
std::move(p_name));
      return true;
    }
  }
  return false;
}

// static
bool WebDatabaseStubDispatch::AcceptWithResponder(
    WebDatabase* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebDatabase_UpdateSize_Name: {
      break;
    }
    case internal::kWebDatabase_CloseImmediately_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebDatabaseValidationInfo[] = {
    {&internal::WebDatabase_UpdateSize_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebDatabase_CloseImmediately_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebDatabaseRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::WebDatabase::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebDatabaseValidationInfo);
}

const char WebDatabaseHost::Name_[] = "blink.mojom.WebDatabaseHost";

WebDatabaseHost::IPCStableHashFunction WebDatabaseHost::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kWebDatabaseHost_OpenFile_Name: {
      return &WebDatabaseHost::OpenFile_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_DeleteFile_Name: {
      return &WebDatabaseHost::DeleteFile_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_GetFileAttributes_Name: {
      return &WebDatabaseHost::GetFileAttributes_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_SetFileSize_Name: {
      return &WebDatabaseHost::SetFileSize_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_GetSpaceAvailable_Name: {
      return &WebDatabaseHost::GetSpaceAvailable_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_Opened_Name: {
      return &WebDatabaseHost::Opened_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_Modified_Name: {
      return &WebDatabaseHost::Modified_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_Closed_Name: {
      return &WebDatabaseHost::Closed_Sym::IPCStableHash;
    }
    case internal::kWebDatabaseHost_HandleSqliteError_Name: {
      return &WebDatabaseHost::HandleSqliteError_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* WebDatabaseHost::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kWebDatabaseHost_OpenFile_Name:
            return "Receive blink::mojom::WebDatabaseHost::OpenFile";
      case internal::kWebDatabaseHost_DeleteFile_Name:
            return "Receive blink::mojom::WebDatabaseHost::DeleteFile";
      case internal::kWebDatabaseHost_GetFileAttributes_Name:
            return "Receive blink::mojom::WebDatabaseHost::GetFileAttributes";
      case internal::kWebDatabaseHost_SetFileSize_Name:
            return "Receive blink::mojom::WebDatabaseHost::SetFileSize";
      case internal::kWebDatabaseHost_GetSpaceAvailable_Name:
            return "Receive blink::mojom::WebDatabaseHost::GetSpaceAvailable";
      case internal::kWebDatabaseHost_Opened_Name:
            return "Receive blink::mojom::WebDatabaseHost::Opened";
      case internal::kWebDatabaseHost_Modified_Name:
            return "Receive blink::mojom::WebDatabaseHost::Modified";
      case internal::kWebDatabaseHost_Closed_Name:
            return "Receive blink::mojom::WebDatabaseHost::Closed";
      case internal::kWebDatabaseHost_HandleSqliteError_Name:
            return "Receive blink::mojom::WebDatabaseHost::HandleSqliteError";
    }
  } else {
    switch (message.name()) {
      case internal::kWebDatabaseHost_OpenFile_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::OpenFile";
      case internal::kWebDatabaseHost_DeleteFile_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::DeleteFile";
      case internal::kWebDatabaseHost_GetFileAttributes_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::GetFileAttributes";
      case internal::kWebDatabaseHost_SetFileSize_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::SetFileSize";
      case internal::kWebDatabaseHost_GetSpaceAvailable_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::GetSpaceAvailable";
      case internal::kWebDatabaseHost_Opened_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::Opened";
      case internal::kWebDatabaseHost_Modified_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::Modified";
      case internal::kWebDatabaseHost_Closed_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::Closed";
      case internal::kWebDatabaseHost_HandleSqliteError_Name:
            return "Receive reply blink::mojom::WebDatabaseHost::HandleSqliteError";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t WebDatabaseHost::OpenFile_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::OpenFile");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::DeleteFile_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::DeleteFile");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::GetFileAttributes_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::GetFileAttributes");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::SetFileSize_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::SetFileSize");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::GetSpaceAvailable_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::GetSpaceAvailable");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::Opened_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::Opened");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::Modified_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::Modified");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::Closed_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::Closed");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t WebDatabaseHost::HandleSqliteError_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)blink::mojom::WebDatabaseHost::HandleSqliteError");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)
bool WebDatabaseHost::OpenFile(const ::WTF::String& vfs_file_name, int32_t desired_flags, ::base::File* out_file) {
  NOTREACHED();
  return false;
}
bool WebDatabaseHost::DeleteFile(const ::WTF::String& vfs_file_name, bool sync_dir, int32_t* out_sqlite_error_code) {
  NOTREACHED();
  return false;
}
bool WebDatabaseHost::GetFileAttributes(const ::WTF::String& vfs_file_name, int32_t* out_attributes) {
  NOTREACHED();
  return false;
}
bool WebDatabaseHost::SetFileSize(const ::WTF::String& vfs_file_name, int64_t expected_size, bool* out_success) {
  NOTREACHED();
  return false;
}
bool WebDatabaseHost::GetSpaceAvailable(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, int64_t* out_space_available) {
  NOTREACHED();
  return false;
}
class WebDatabaseHost_OpenFile_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_OpenFile_HandleSyncResponse(
      bool* result, ::base::File* out_file)
      : result_(result), out_file_(out_file) {
    DCHECK(!*result_);
  }

  WebDatabaseHost_OpenFile_HandleSyncResponse(const WebDatabaseHost_OpenFile_HandleSyncResponse&) = delete;
  WebDatabaseHost_OpenFile_HandleSyncResponse& operator=(const WebDatabaseHost_OpenFile_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  ::base::File* out_file_;};

class WebDatabaseHost_OpenFile_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_OpenFile_ForwardToCallback(
      WebDatabaseHost::OpenFileCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebDatabaseHost_OpenFile_ForwardToCallback(const WebDatabaseHost_OpenFile_ForwardToCallback&) = delete;
  WebDatabaseHost_OpenFile_ForwardToCallback& operator=(const WebDatabaseHost_OpenFile_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebDatabaseHost::OpenFileCallback callback_;
};
class WebDatabaseHost_DeleteFile_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_DeleteFile_HandleSyncResponse(
      bool* result, int32_t* out_sqlite_error_code)
      : result_(result), out_sqlite_error_code_(out_sqlite_error_code) {
    DCHECK(!*result_);
  }

  WebDatabaseHost_DeleteFile_HandleSyncResponse(const WebDatabaseHost_DeleteFile_HandleSyncResponse&) = delete;
  WebDatabaseHost_DeleteFile_HandleSyncResponse& operator=(const WebDatabaseHost_DeleteFile_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  int32_t* out_sqlite_error_code_;};

class WebDatabaseHost_DeleteFile_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_DeleteFile_ForwardToCallback(
      WebDatabaseHost::DeleteFileCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebDatabaseHost_DeleteFile_ForwardToCallback(const WebDatabaseHost_DeleteFile_ForwardToCallback&) = delete;
  WebDatabaseHost_DeleteFile_ForwardToCallback& operator=(const WebDatabaseHost_DeleteFile_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebDatabaseHost::DeleteFileCallback callback_;
};
class WebDatabaseHost_GetFileAttributes_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_GetFileAttributes_HandleSyncResponse(
      bool* result, int32_t* out_attributes)
      : result_(result), out_attributes_(out_attributes) {
    DCHECK(!*result_);
  }

  WebDatabaseHost_GetFileAttributes_HandleSyncResponse(const WebDatabaseHost_GetFileAttributes_HandleSyncResponse&) = delete;
  WebDatabaseHost_GetFileAttributes_HandleSyncResponse& operator=(const WebDatabaseHost_GetFileAttributes_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  int32_t* out_attributes_;};

class WebDatabaseHost_GetFileAttributes_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_GetFileAttributes_ForwardToCallback(
      WebDatabaseHost::GetFileAttributesCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebDatabaseHost_GetFileAttributes_ForwardToCallback(const WebDatabaseHost_GetFileAttributes_ForwardToCallback&) = delete;
  WebDatabaseHost_GetFileAttributes_ForwardToCallback& operator=(const WebDatabaseHost_GetFileAttributes_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebDatabaseHost::GetFileAttributesCallback callback_;
};
class WebDatabaseHost_SetFileSize_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_SetFileSize_HandleSyncResponse(
      bool* result, bool* out_success)
      : result_(result), out_success_(out_success) {
    DCHECK(!*result_);
  }

  WebDatabaseHost_SetFileSize_HandleSyncResponse(const WebDatabaseHost_SetFileSize_HandleSyncResponse&) = delete;
  WebDatabaseHost_SetFileSize_HandleSyncResponse& operator=(const WebDatabaseHost_SetFileSize_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  bool* out_success_;};

class WebDatabaseHost_SetFileSize_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_SetFileSize_ForwardToCallback(
      WebDatabaseHost::SetFileSizeCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebDatabaseHost_SetFileSize_ForwardToCallback(const WebDatabaseHost_SetFileSize_ForwardToCallback&) = delete;
  WebDatabaseHost_SetFileSize_ForwardToCallback& operator=(const WebDatabaseHost_SetFileSize_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebDatabaseHost::SetFileSizeCallback callback_;
};
class WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse(
      bool* result, int64_t* out_space_available)
      : result_(result), out_space_available_(out_space_available) {
    DCHECK(!*result_);
  }

  WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse(const WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse&) = delete;
  WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse& operator=(const WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  int64_t* out_space_available_;};

class WebDatabaseHost_GetSpaceAvailable_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  WebDatabaseHost_GetSpaceAvailable_ForwardToCallback(
      WebDatabaseHost::GetSpaceAvailableCallback callback
      ) : callback_(std::move(callback)) {
  }

  WebDatabaseHost_GetSpaceAvailable_ForwardToCallback(const WebDatabaseHost_GetSpaceAvailable_ForwardToCallback&) = delete;
  WebDatabaseHost_GetSpaceAvailable_ForwardToCallback& operator=(const WebDatabaseHost_GetSpaceAvailable_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  WebDatabaseHost::GetSpaceAvailableCallback callback_;
};

WebDatabaseHostProxy::WebDatabaseHostProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
bool WebDatabaseHostProxy::OpenFile(
    const ::WTF::String& param_vfs_file_name, int32_t param_desired_flags, ::base::File* out_param_file) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call blink::mojom::WebDatabaseHost::OpenFile (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), param_vfs_file_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("desired_flags"), param_desired_flags,
                        "<value of type int32_t>");
   });
#else
  TRACE_EVENT0("mojom", "WebDatabaseHost::OpenFile");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_OpenFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_OpenFile_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      param_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.OpenFile request");
  params->desired_flags = param_desired_flags;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("OpenFile");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_OpenFile_HandleSyncResponse(
          &result, out_param_file));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WebDatabaseHost::OpenFile", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("file"), out_param_file,
                        "<value of type ::base::File>");
   });
#endif
  return result;
}

void WebDatabaseHostProxy::OpenFile(
    const ::WTF::String& in_vfs_file_name, int32_t in_desired_flags, OpenFileCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::OpenFile", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), in_vfs_file_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("desired_flags"), in_desired_flags,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_OpenFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_OpenFile_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.OpenFile request");
  params->desired_flags = in_desired_flags;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("OpenFile");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_OpenFile_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WebDatabaseHostProxy::DeleteFile(
    const ::WTF::String& param_vfs_file_name, bool param_sync_dir, int32_t* out_param_sqlite_error_code) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call blink::mojom::WebDatabaseHost::DeleteFile (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), param_vfs_file_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sync_dir"), param_sync_dir,
                        "<value of type bool>");
   });
#else
  TRACE_EVENT0("mojom", "WebDatabaseHost::DeleteFile");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_DeleteFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_DeleteFile_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      param_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.DeleteFile request");
  params->sync_dir = param_sync_dir;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("DeleteFile");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_DeleteFile_HandleSyncResponse(
          &result, out_param_sqlite_error_code));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WebDatabaseHost::DeleteFile", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sqlite_error_code"), out_param_sqlite_error_code,
                        "<value of type int32_t>");
   });
#endif
  return result;
}

void WebDatabaseHostProxy::DeleteFile(
    const ::WTF::String& in_vfs_file_name, bool in_sync_dir, DeleteFileCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::DeleteFile", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), in_vfs_file_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sync_dir"), in_sync_dir,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_DeleteFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_DeleteFile_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.DeleteFile request");
  params->sync_dir = in_sync_dir;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("DeleteFile");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_DeleteFile_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WebDatabaseHostProxy::GetFileAttributes(
    const ::WTF::String& param_vfs_file_name, int32_t* out_param_attributes) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call blink::mojom::WebDatabaseHost::GetFileAttributes (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), param_vfs_file_name,
                        "<value of type const ::WTF::String&>");
   });
#else
  TRACE_EVENT0("mojom", "WebDatabaseHost::GetFileAttributes");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_GetFileAttributes_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_GetFileAttributes_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      param_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.GetFileAttributes request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("GetFileAttributes");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_GetFileAttributes_HandleSyncResponse(
          &result, out_param_attributes));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WebDatabaseHost::GetFileAttributes", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("attributes"), out_param_attributes,
                        "<value of type int32_t>");
   });
#endif
  return result;
}

void WebDatabaseHostProxy::GetFileAttributes(
    const ::WTF::String& in_vfs_file_name, GetFileAttributesCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::GetFileAttributes", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), in_vfs_file_name,
                        "<value of type const ::WTF::String&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_GetFileAttributes_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_GetFileAttributes_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.GetFileAttributes request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("GetFileAttributes");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_GetFileAttributes_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WebDatabaseHostProxy::SetFileSize(
    const ::WTF::String& param_vfs_file_name, int64_t param_expected_size, bool* out_param_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call blink::mojom::WebDatabaseHost::SetFileSize (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), param_vfs_file_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("expected_size"), param_expected_size,
                        "<value of type int64_t>");
   });
#else
  TRACE_EVENT0("mojom", "WebDatabaseHost::SetFileSize");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_SetFileSize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_SetFileSize_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      param_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.SetFileSize request");
  params->expected_size = param_expected_size;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("SetFileSize");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_SetFileSize_HandleSyncResponse(
          &result, out_param_success));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WebDatabaseHost::SetFileSize", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), out_param_success,
                        "<value of type bool>");
   });
#endif
  return result;
}

void WebDatabaseHostProxy::SetFileSize(
    const ::WTF::String& in_vfs_file_name, int64_t in_expected_size, SetFileSizeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::SetFileSize", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vfs_file_name"), in_vfs_file_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("expected_size"), in_expected_size,
                        "<value of type int64_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_SetFileSize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_SetFileSize_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->vfs_file_name)::BaseType> vfs_file_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_vfs_file_name, vfs_file_name_fragment);
  params->vfs_file_name.Set(
      vfs_file_name_fragment.is_null() ? nullptr : vfs_file_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->vfs_file_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null vfs_file_name in WebDatabaseHost.SetFileSize request");
  params->expected_size = in_expected_size;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("SetFileSize");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_SetFileSize_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
bool WebDatabaseHostProxy::GetSpaceAvailable(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& param_origin, int64_t* out_param_space_available) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call blink::mojom::WebDatabaseHost::GetSpaceAvailable (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), param_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
   });
#else
  TRACE_EVENT0("mojom", "WebDatabaseHost::GetSpaceAvailable");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_GetSpaceAvailable_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_GetSpaceAvailable_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      param_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabaseHost.GetSpaceAvailable request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("GetSpaceAvailable");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse(
          &result, out_param_space_available));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "WebDatabaseHost::GetSpaceAvailable", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("space_available"), out_param_space_available,
                        "<value of type int64_t>");
   });
#endif
  return result;
}

void WebDatabaseHostProxy::GetSpaceAvailable(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, GetSpaceAvailableCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::GetSpaceAvailable", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_GetSpaceAvailable_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_GetSpaceAvailable_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabaseHost.GetSpaceAvailable request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("GetSpaceAvailable");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new WebDatabaseHost_GetSpaceAvailable_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void WebDatabaseHostProxy::Opened(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, const ::WTF::String& in_database_name, const ::WTF::String& in_database_description) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::Opened", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("database_name"), in_database_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("database_description"), in_database_description,
                        "<value of type const ::WTF::String&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_Opened_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_Opened_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabaseHost.Opened request");
  mojo::internal::MessageFragment<
      typename decltype(params->database_name)::BaseType> database_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_database_name, database_name_fragment);
  params->database_name.Set(
      database_name_fragment.is_null() ? nullptr : database_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->database_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null database_name in WebDatabaseHost.Opened request");
  mojo::internal::MessageFragment<
      typename decltype(params->database_description)::BaseType> database_description_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_database_description, database_description_fragment);
  params->database_description.Set(
      database_description_fragment.is_null() ? nullptr : database_description_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->database_description.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null database_description in WebDatabaseHost.Opened request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("Opened");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebDatabaseHostProxy::Modified(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, const ::WTF::String& in_database_name) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::Modified", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("database_name"), in_database_name,
                        "<value of type const ::WTF::String&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_Modified_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_Modified_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabaseHost.Modified request");
  mojo::internal::MessageFragment<
      typename decltype(params->database_name)::BaseType> database_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_database_name, database_name_fragment);
  params->database_name.Set(
      database_name_fragment.is_null() ? nullptr : database_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->database_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null database_name in WebDatabaseHost.Modified request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("Modified");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebDatabaseHostProxy::Closed(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, const ::WTF::String& in_database_name) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::Closed", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("database_name"), in_database_name,
                        "<value of type const ::WTF::String&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_Closed_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_Closed_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabaseHost.Closed request");
  mojo::internal::MessageFragment<
      typename decltype(params->database_name)::BaseType> database_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_database_name, database_name_fragment);
  params->database_name.Set(
      database_name_fragment.is_null() ? nullptr : database_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->database_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null database_name in WebDatabaseHost.Closed request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("Closed");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void WebDatabaseHostProxy::HandleSqliteError(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& in_origin, const ::WTF::String& in_database_name, int32_t in_error) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send blink::mojom::WebDatabaseHost::HandleSqliteError", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("origin"), in_origin,
                        "<value of type const ::scoped_refptr<const ::blink::SecurityOrigin>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("database_name"), in_database_name,
                        "<value of type const ::WTF::String&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error"), in_error,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_HandleSqliteError_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_HandleSqliteError_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->origin)::BaseType> origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_origin, origin_fragment);
  params->origin.Set(
      origin_fragment.is_null() ? nullptr : origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null origin in WebDatabaseHost.HandleSqliteError request");
  mojo::internal::MessageFragment<
      typename decltype(params->database_name)::BaseType> database_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_database_name, database_name_fragment);
  params->database_name.Set(
      database_name_fragment.is_null() ? nullptr : database_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->database_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null database_name in WebDatabaseHost.HandleSqliteError request");
  params->error = in_error;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("HandleSqliteError");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class WebDatabaseHost_OpenFile_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebDatabaseHost::OpenFileCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebDatabaseHost_OpenFile_ProxyToResponder> proxy(
        new WebDatabaseHost_OpenFile_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebDatabaseHost_OpenFile_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebDatabaseHost_OpenFile_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebDatabaseHost_OpenFile_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebDatabaseHost::OpenFileCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::base::File in_file);
};

bool WebDatabaseHost_OpenFile_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_OpenFile_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebDatabaseHost_OpenFile_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::base::File p_file{};
  WebDatabaseHost_OpenFile_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadFile(&p_file))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_file));
  return true;
}

void WebDatabaseHost_OpenFile_ProxyToResponder::Run(
    ::base::File in_file) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WebDatabaseHost::OpenFile", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("file"), in_file,
                        "<value of type ::base::File>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_OpenFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_OpenFile_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->file)::BaseType> file_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::FileDataView>(
      in_file, file_fragment);
  params->file.Set(
      file_fragment.is_null() ? nullptr : file_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("OpenFile");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WebDatabaseHost_OpenFile_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_OpenFile_ResponseParams_Data* params =
      reinterpret_cast<internal::WebDatabaseHost_OpenFile_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  ::base::File p_file{};
  WebDatabaseHost_OpenFile_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadFile(&p_file))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 0, true);
    return false;
  }
  *out_file_ = std::move(p_file);
  *result_ = true;
  return true;
}
class WebDatabaseHost_DeleteFile_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebDatabaseHost::DeleteFileCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebDatabaseHost_DeleteFile_ProxyToResponder> proxy(
        new WebDatabaseHost_DeleteFile_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebDatabaseHost_DeleteFile_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebDatabaseHost_DeleteFile_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebDatabaseHost_DeleteFile_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebDatabaseHost::DeleteFileCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int32_t in_sqlite_error_code);
};

bool WebDatabaseHost_DeleteFile_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_DeleteFile_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebDatabaseHost_DeleteFile_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int32_t p_sqlite_error_code{};
  WebDatabaseHost_DeleteFile_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_sqlite_error_code = input_data_view.sqlite_error_code();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_sqlite_error_code));
  return true;
}

void WebDatabaseHost_DeleteFile_ProxyToResponder::Run(
    int32_t in_sqlite_error_code) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WebDatabaseHost::DeleteFile", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sqlite_error_code"), in_sqlite_error_code,
                        "<value of type int32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_DeleteFile_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_DeleteFile_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->sqlite_error_code = in_sqlite_error_code;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("DeleteFile");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WebDatabaseHost_DeleteFile_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_DeleteFile_ResponseParams_Data* params =
      reinterpret_cast<internal::WebDatabaseHost_DeleteFile_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  int32_t p_sqlite_error_code{};
  WebDatabaseHost_DeleteFile_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_sqlite_error_code = input_data_view.sqlite_error_code();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 1, true);
    return false;
  }
  *out_sqlite_error_code_ = std::move(p_sqlite_error_code);
  *result_ = true;
  return true;
}
class WebDatabaseHost_GetFileAttributes_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebDatabaseHost::GetFileAttributesCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebDatabaseHost_GetFileAttributes_ProxyToResponder> proxy(
        new WebDatabaseHost_GetFileAttributes_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebDatabaseHost_GetFileAttributes_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebDatabaseHost_GetFileAttributes_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebDatabaseHost_GetFileAttributes_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebDatabaseHost::GetFileAttributesCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int32_t in_attributes);
};

bool WebDatabaseHost_GetFileAttributes_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_GetFileAttributes_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebDatabaseHost_GetFileAttributes_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int32_t p_attributes{};
  WebDatabaseHost_GetFileAttributes_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_attributes = input_data_view.attributes();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_attributes));
  return true;
}

void WebDatabaseHost_GetFileAttributes_ProxyToResponder::Run(
    int32_t in_attributes) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WebDatabaseHost::GetFileAttributes", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("attributes"), in_attributes,
                        "<value of type int32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_GetFileAttributes_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_GetFileAttributes_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->attributes = in_attributes;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("GetFileAttributes");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WebDatabaseHost_GetFileAttributes_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_GetFileAttributes_ResponseParams_Data* params =
      reinterpret_cast<internal::WebDatabaseHost_GetFileAttributes_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  int32_t p_attributes{};
  WebDatabaseHost_GetFileAttributes_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_attributes = input_data_view.attributes();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 2, true);
    return false;
  }
  *out_attributes_ = std::move(p_attributes);
  *result_ = true;
  return true;
}
class WebDatabaseHost_SetFileSize_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebDatabaseHost::SetFileSizeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebDatabaseHost_SetFileSize_ProxyToResponder> proxy(
        new WebDatabaseHost_SetFileSize_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebDatabaseHost_SetFileSize_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebDatabaseHost_SetFileSize_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebDatabaseHost_SetFileSize_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebDatabaseHost::SetFileSizeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool WebDatabaseHost_SetFileSize_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_SetFileSize_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebDatabaseHost_SetFileSize_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  WebDatabaseHost_SetFileSize_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void WebDatabaseHost_SetFileSize_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WebDatabaseHost::SetFileSize", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_SetFileSize_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_SetFileSize_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("SetFileSize");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WebDatabaseHost_SetFileSize_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_SetFileSize_ResponseParams_Data* params =
      reinterpret_cast<internal::WebDatabaseHost_SetFileSize_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  WebDatabaseHost_SetFileSize_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 3, true);
    return false;
  }
  *out_success_ = std::move(p_success);
  *result_ = true;
  return true;
}
class WebDatabaseHost_GetSpaceAvailable_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static WebDatabaseHost::GetSpaceAvailableCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<WebDatabaseHost_GetSpaceAvailable_ProxyToResponder> proxy(
        new WebDatabaseHost_GetSpaceAvailable_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&WebDatabaseHost_GetSpaceAvailable_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~WebDatabaseHost_GetSpaceAvailable_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  WebDatabaseHost_GetSpaceAvailable_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "WebDatabaseHost::GetSpaceAvailableCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      int64_t in_space_available);
};

bool WebDatabaseHost_GetSpaceAvailable_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_GetSpaceAvailable_ResponseParams_Data* params =
      reinterpret_cast<
          internal::WebDatabaseHost_GetSpaceAvailable_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  int64_t p_space_available{};
  WebDatabaseHost_GetSpaceAvailable_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_space_available = input_data_view.space_available();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_space_available));
  return true;
}

void WebDatabaseHost_GetSpaceAvailable_ProxyToResponder::Run(
    int64_t in_space_available) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply blink::mojom::WebDatabaseHost::GetSpaceAvailable", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("space_available"), in_space_available,
                        "<value of type int64_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kWebDatabaseHost_GetSpaceAvailable_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::blink::mojom::internal::WebDatabaseHost_GetSpaceAvailable_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->space_available = in_space_available;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(WebDatabaseHost::Name_);
  message.set_method_name("GetSpaceAvailable");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool WebDatabaseHost_GetSpaceAvailable_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::WebDatabaseHost_GetSpaceAvailable_ResponseParams_Data* params =
      reinterpret_cast<internal::WebDatabaseHost_GetSpaceAvailable_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  int64_t p_space_available{};
  WebDatabaseHost_GetSpaceAvailable_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_space_available = input_data_view.space_available();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        WebDatabaseHost::Name_, 4, true);
    return false;
  }
  *out_space_available_ = std::move(p_space_available);
  *result_ = true;
  return true;
}

// static
bool WebDatabaseHostStubDispatch::Accept(
    WebDatabaseHost* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kWebDatabaseHost_OpenFile_Name: {
      break;
    }
    case internal::kWebDatabaseHost_DeleteFile_Name: {
      break;
    }
    case internal::kWebDatabaseHost_GetFileAttributes_Name: {
      break;
    }
    case internal::kWebDatabaseHost_SetFileSize_Name: {
      break;
    }
    case internal::kWebDatabaseHost_GetSpaceAvailable_Name: {
      break;
    }
    case internal::kWebDatabaseHost_Opened_Name: {

      DCHECK(message->is_serialized());
      internal::WebDatabaseHost_Opened_Params_Data* params =
          reinterpret_cast<internal::WebDatabaseHost_Opened_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      ::WTF::String p_database_name{};
      ::WTF::String p_database_description{};
      WebDatabaseHost_Opened_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (success && !input_data_view.ReadDatabaseName(&p_database_name))
        success = false;
      if (success && !input_data_view.ReadDatabaseDescription(&p_database_description))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Opened(
std::move(p_origin), 
std::move(p_database_name), 
std::move(p_database_description));
      return true;
    }
    case internal::kWebDatabaseHost_Modified_Name: {

      DCHECK(message->is_serialized());
      internal::WebDatabaseHost_Modified_Params_Data* params =
          reinterpret_cast<internal::WebDatabaseHost_Modified_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      ::WTF::String p_database_name{};
      WebDatabaseHost_Modified_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (success && !input_data_view.ReadDatabaseName(&p_database_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Modified(
std::move(p_origin), 
std::move(p_database_name));
      return true;
    }
    case internal::kWebDatabaseHost_Closed_Name: {

      DCHECK(message->is_serialized());
      internal::WebDatabaseHost_Closed_Params_Data* params =
          reinterpret_cast<internal::WebDatabaseHost_Closed_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      ::WTF::String p_database_name{};
      WebDatabaseHost_Closed_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (success && !input_data_view.ReadDatabaseName(&p_database_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 7, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Closed(
std::move(p_origin), 
std::move(p_database_name));
      return true;
    }
    case internal::kWebDatabaseHost_HandleSqliteError_Name: {

      DCHECK(message->is_serialized());
      internal::WebDatabaseHost_HandleSqliteError_Params_Data* params =
          reinterpret_cast<internal::WebDatabaseHost_HandleSqliteError_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      ::WTF::String p_database_name{};
      int32_t p_error{};
      WebDatabaseHost_HandleSqliteError_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (success && !input_data_view.ReadDatabaseName(&p_database_name))
        success = false;
      if (success)
        p_error = input_data_view.error();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleSqliteError(
std::move(p_origin), 
std::move(p_database_name), 
std::move(p_error));
      return true;
    }
  }
  return false;
}

// static
bool WebDatabaseHostStubDispatch::AcceptWithResponder(
    WebDatabaseHost* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kWebDatabaseHost_OpenFile_Name: {

      internal::WebDatabaseHost_OpenFile_Params_Data* params =
          reinterpret_cast<
              internal::WebDatabaseHost_OpenFile_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::WTF::String p_vfs_file_name{};
      int32_t p_desired_flags{};
      WebDatabaseHost_OpenFile_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadVfsFileName(&p_vfs_file_name))
        success = false;
      if (success)
        p_desired_flags = input_data_view.desired_flags();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 0, false);
        return false;
      }
      WebDatabaseHost::OpenFileCallback callback =
          WebDatabaseHost_OpenFile_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OpenFile(
std::move(p_vfs_file_name), 
std::move(p_desired_flags), std::move(callback));
      return true;
    }
    case internal::kWebDatabaseHost_DeleteFile_Name: {

      internal::WebDatabaseHost_DeleteFile_Params_Data* params =
          reinterpret_cast<
              internal::WebDatabaseHost_DeleteFile_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::WTF::String p_vfs_file_name{};
      bool p_sync_dir{};
      WebDatabaseHost_DeleteFile_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadVfsFileName(&p_vfs_file_name))
        success = false;
      if (success)
        p_sync_dir = input_data_view.sync_dir();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 1, false);
        return false;
      }
      WebDatabaseHost::DeleteFileCallback callback =
          WebDatabaseHost_DeleteFile_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DeleteFile(
std::move(p_vfs_file_name), 
std::move(p_sync_dir), std::move(callback));
      return true;
    }
    case internal::kWebDatabaseHost_GetFileAttributes_Name: {

      internal::WebDatabaseHost_GetFileAttributes_Params_Data* params =
          reinterpret_cast<
              internal::WebDatabaseHost_GetFileAttributes_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::WTF::String p_vfs_file_name{};
      WebDatabaseHost_GetFileAttributes_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadVfsFileName(&p_vfs_file_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 2, false);
        return false;
      }
      WebDatabaseHost::GetFileAttributesCallback callback =
          WebDatabaseHost_GetFileAttributes_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetFileAttributes(
std::move(p_vfs_file_name), std::move(callback));
      return true;
    }
    case internal::kWebDatabaseHost_SetFileSize_Name: {

      internal::WebDatabaseHost_SetFileSize_Params_Data* params =
          reinterpret_cast<
              internal::WebDatabaseHost_SetFileSize_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::WTF::String p_vfs_file_name{};
      int64_t p_expected_size{};
      WebDatabaseHost_SetFileSize_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadVfsFileName(&p_vfs_file_name))
        success = false;
      if (success)
        p_expected_size = input_data_view.expected_size();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 3, false);
        return false;
      }
      WebDatabaseHost::SetFileSizeCallback callback =
          WebDatabaseHost_SetFileSize_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetFileSize(
std::move(p_vfs_file_name), 
std::move(p_expected_size), std::move(callback));
      return true;
    }
    case internal::kWebDatabaseHost_GetSpaceAvailable_Name: {

      internal::WebDatabaseHost_GetSpaceAvailable_Params_Data* params =
          reinterpret_cast<
              internal::WebDatabaseHost_GetSpaceAvailable_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::scoped_refptr<const ::blink::SecurityOrigin> p_origin{};
      WebDatabaseHost_GetSpaceAvailable_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadOrigin(&p_origin))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            WebDatabaseHost::Name_, 4, false);
        return false;
      }
      WebDatabaseHost::GetSpaceAvailableCallback callback =
          WebDatabaseHost_GetSpaceAvailable_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetSpaceAvailable(
std::move(p_origin), std::move(callback));
      return true;
    }
    case internal::kWebDatabaseHost_Opened_Name: {
      break;
    }
    case internal::kWebDatabaseHost_Modified_Name: {
      break;
    }
    case internal::kWebDatabaseHost_Closed_Name: {
      break;
    }
    case internal::kWebDatabaseHost_HandleSqliteError_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kWebDatabaseHostValidationInfo[] = {
    {&internal::WebDatabaseHost_OpenFile_Params_Data::Validate,
     &internal::WebDatabaseHost_OpenFile_ResponseParams_Data::Validate},
    {&internal::WebDatabaseHost_DeleteFile_Params_Data::Validate,
     &internal::WebDatabaseHost_DeleteFile_ResponseParams_Data::Validate},
    {&internal::WebDatabaseHost_GetFileAttributes_Params_Data::Validate,
     &internal::WebDatabaseHost_GetFileAttributes_ResponseParams_Data::Validate},
    {&internal::WebDatabaseHost_SetFileSize_Params_Data::Validate,
     &internal::WebDatabaseHost_SetFileSize_ResponseParams_Data::Validate},
    {&internal::WebDatabaseHost_GetSpaceAvailable_Params_Data::Validate,
     &internal::WebDatabaseHost_GetSpaceAvailable_ResponseParams_Data::Validate},
    {&internal::WebDatabaseHost_Opened_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebDatabaseHost_Modified_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebDatabaseHost_Closed_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::WebDatabaseHost_HandleSqliteError_Params_Data::Validate,
     nullptr /* no response */},
};

bool WebDatabaseHostRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::WebDatabaseHost::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kWebDatabaseHostValidationInfo);
}

bool WebDatabaseHostResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::blink::mojom::blink::WebDatabaseHost::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kWebDatabaseHostValidationInfo);
}


}  // namespace blink
}  // namespace mojom
}  // namespace blink


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace blink {
namespace mojom {
namespace blink {


void WebDatabaseInterceptorForTesting::UpdateSize(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, const ::WTF::String& name, int64_t size) {
  GetForwardingInterface()->UpdateSize(std::move(origin), std::move(name), std::move(size));
}
void WebDatabaseInterceptorForTesting::CloseImmediately(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, const ::WTF::String& name) {
  GetForwardingInterface()->CloseImmediately(std::move(origin), std::move(name));
}
WebDatabaseAsyncWaiter::WebDatabaseAsyncWaiter(
    WebDatabase* proxy) : proxy_(proxy) {}

WebDatabaseAsyncWaiter::~WebDatabaseAsyncWaiter() = default;




void WebDatabaseHostInterceptorForTesting::OpenFile(const ::WTF::String& vfs_file_name, int32_t desired_flags, OpenFileCallback callback) {
  GetForwardingInterface()->OpenFile(std::move(vfs_file_name), std::move(desired_flags), std::move(callback));
}
void WebDatabaseHostInterceptorForTesting::DeleteFile(const ::WTF::String& vfs_file_name, bool sync_dir, DeleteFileCallback callback) {
  GetForwardingInterface()->DeleteFile(std::move(vfs_file_name), std::move(sync_dir), std::move(callback));
}
void WebDatabaseHostInterceptorForTesting::GetFileAttributes(const ::WTF::String& vfs_file_name, GetFileAttributesCallback callback) {
  GetForwardingInterface()->GetFileAttributes(std::move(vfs_file_name), std::move(callback));
}
void WebDatabaseHostInterceptorForTesting::SetFileSize(const ::WTF::String& vfs_file_name, int64_t expected_size, SetFileSizeCallback callback) {
  GetForwardingInterface()->SetFileSize(std::move(vfs_file_name), std::move(expected_size), std::move(callback));
}
void WebDatabaseHostInterceptorForTesting::GetSpaceAvailable(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, GetSpaceAvailableCallback callback) {
  GetForwardingInterface()->GetSpaceAvailable(std::move(origin), std::move(callback));
}
void WebDatabaseHostInterceptorForTesting::Opened(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, const ::WTF::String& database_name, const ::WTF::String& database_description) {
  GetForwardingInterface()->Opened(std::move(origin), std::move(database_name), std::move(database_description));
}
void WebDatabaseHostInterceptorForTesting::Modified(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, const ::WTF::String& database_name) {
  GetForwardingInterface()->Modified(std::move(origin), std::move(database_name));
}
void WebDatabaseHostInterceptorForTesting::Closed(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, const ::WTF::String& database_name) {
  GetForwardingInterface()->Closed(std::move(origin), std::move(database_name));
}
void WebDatabaseHostInterceptorForTesting::HandleSqliteError(const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, const ::WTF::String& database_name, int32_t error) {
  GetForwardingInterface()->HandleSqliteError(std::move(origin), std::move(database_name), std::move(error));
}
WebDatabaseHostAsyncWaiter::WebDatabaseHostAsyncWaiter(
    WebDatabaseHost* proxy) : proxy_(proxy) {}

WebDatabaseHostAsyncWaiter::~WebDatabaseHostAsyncWaiter() = default;

void WebDatabaseHostAsyncWaiter::OpenFile(
    const ::WTF::String& vfs_file_name, int32_t desired_flags, ::base::File* out_file) {
  base::RunLoop loop;
  proxy_->OpenFile(std::move(vfs_file_name),std::move(desired_flags),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::base::File* out_file
,
             ::base::File file) {*out_file = std::move(file);
            loop->Quit();
          },
          &loop,
          out_file));
  loop.Run();
}
void WebDatabaseHostAsyncWaiter::DeleteFile(
    const ::WTF::String& vfs_file_name, bool sync_dir, int32_t* out_sqlite_error_code) {
  base::RunLoop loop;
  proxy_->DeleteFile(std::move(vfs_file_name),std::move(sync_dir),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_sqlite_error_code
,
             int32_t sqlite_error_code) {*out_sqlite_error_code = std::move(sqlite_error_code);
            loop->Quit();
          },
          &loop,
          out_sqlite_error_code));
  loop.Run();
}
void WebDatabaseHostAsyncWaiter::GetFileAttributes(
    const ::WTF::String& vfs_file_name, int32_t* out_attributes) {
  base::RunLoop loop;
  proxy_->GetFileAttributes(std::move(vfs_file_name),
      base::BindOnce(
          [](base::RunLoop* loop,
             int32_t* out_attributes
,
             int32_t attributes) {*out_attributes = std::move(attributes);
            loop->Quit();
          },
          &loop,
          out_attributes));
  loop.Run();
}
void WebDatabaseHostAsyncWaiter::SetFileSize(
    const ::WTF::String& vfs_file_name, int64_t expected_size, bool* out_success) {
  base::RunLoop loop;
  proxy_->SetFileSize(std::move(vfs_file_name),std::move(expected_size),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void WebDatabaseHostAsyncWaiter::GetSpaceAvailable(
    const ::scoped_refptr<const ::blink::SecurityOrigin>& origin, int64_t* out_space_available) {
  base::RunLoop loop;
  proxy_->GetSpaceAvailable(std::move(origin),
      base::BindOnce(
          [](base::RunLoop* loop,
             int64_t* out_space_available
,
             int64_t space_available) {*out_space_available = std::move(space_available);
            loop->Quit();
          },
          &loop,
          out_space_available));
  loop.Run();
}





}  // namespace blink
}  // namespace mojom
}  // namespace blink


#if defined(__clang__)
#pragma clang diagnostic pop
#endif