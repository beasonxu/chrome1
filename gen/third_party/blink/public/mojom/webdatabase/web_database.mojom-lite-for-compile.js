// third_party/blink/public/mojom/webdatabase/web_database.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('mojoBase.mojom.File');
goog.require('url.mojom.Origin');
goog.require('mojoBase.mojom.String16');






goog.provide('blink.mojom.WebDatabase');
goog.provide('blink.mojom.WebDatabaseReceiver');
goog.provide('blink.mojom.WebDatabaseCallbackRouter');
goog.provide('blink.mojom.WebDatabaseInterface');
goog.provide('blink.mojom.WebDatabaseRemote');
goog.provide('blink.mojom.WebDatabasePendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.WebDatabasePendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.WebDatabase.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.WebDatabaseInterface = class {
  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } name
   * @param { !bigint } size
   */

  updateSize(origin, name, size) {}
  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } name
   */

  closeImmediately(origin, name) {}
};

/**
 * @export
 * @implements { blink.mojom.WebDatabaseInterface }
 */
blink.mojom.WebDatabaseRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.WebDatabasePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.WebDatabasePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.WebDatabasePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } name
   * @param { !bigint } size
   */

  updateSize(
      origin,
      name,
      size) {
    this.proxy.sendMessage(
        0,
        blink.mojom.WebDatabase_UpdateSize_ParamsSpec.$,
        null,
        [
          origin,
          name,
          size
        ]);
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } name
   */

  closeImmediately(
      origin,
      name) {
    this.proxy.sendMessage(
        1,
        blink.mojom.WebDatabase_CloseImmediately_ParamsSpec.$,
        null,
        [
          origin,
          name
        ]);
  }
};

/**
 * An object which receives request messages for the WebDatabase
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.WebDatabaseReceiver = class {
  /**
   * @param {!blink.mojom.WebDatabaseInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.WebDatabaseRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.WebDatabaseRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.WebDatabaseRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.WebDatabase_UpdateSize_ParamsSpec.$,
        null,
        impl.updateSize.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.WebDatabase_CloseImmediately_ParamsSpec.$,
        null,
        impl.closeImmediately.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.WebDatabase = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.WebDatabase";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.WebDatabaseRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.WebDatabaseRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the WebDatabase
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.WebDatabaseCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.WebDatabaseRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.WebDatabaseRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.updateSize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.WebDatabase_UpdateSize_ParamsSpec.$,
        null,
        this.updateSize.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.closeImmediately =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.WebDatabase_CloseImmediately_ParamsSpec.$,
        null,
        this.closeImmediately.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.WebDatabaseHost');
goog.provide('blink.mojom.WebDatabaseHostReceiver');
goog.provide('blink.mojom.WebDatabaseHostCallbackRouter');
goog.provide('blink.mojom.WebDatabaseHostInterface');
goog.provide('blink.mojom.WebDatabaseHostRemote');
goog.provide('blink.mojom.WebDatabaseHostPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
blink.mojom.WebDatabaseHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        blink.mojom.WebDatabaseHost.$interfaceName,
        scope);
  }
};

/** @interface */
blink.mojom.WebDatabaseHostInterface = class {
  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @param { !number } desiredFlags
   * @return {!Promise<{
        file: ?mojoBase.mojom.File,
   *  }>}
   */

  openFile(vfsFileName, desiredFlags) {}
  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @param { !boolean } syncDir
   * @return {!Promise<{
        sqliteErrorCode: !number,
   *  }>}
   */

  deleteFile(vfsFileName, syncDir) {}
  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @return {!Promise<{
        attributes: !number,
   *  }>}
   */

  getFileAttributes(vfsFileName) {}
  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @param { !bigint } expectedSize
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  setFileSize(vfsFileName, expectedSize) {}
  
  /**
   * @param { !url.mojom.Origin } origin
   * @return {!Promise<{
        spaceAvailable: !bigint,
   *  }>}
   */

  getSpaceAvailable(origin) {}
  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   * @param { !mojoBase.mojom.String16 } databaseDescription
   */

  opened(origin, databaseName, databaseDescription) {}
  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   */

  modified(origin, databaseName) {}
  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   */

  closed(origin, databaseName) {}
  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   * @param { !number } error
   */

  handleSqliteError(origin, databaseName, error) {}
};

/**
 * @export
 * @implements { blink.mojom.WebDatabaseHostInterface }
 */
blink.mojom.WebDatabaseHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!blink.mojom.WebDatabaseHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          blink.mojom.WebDatabaseHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!blink.mojom.WebDatabaseHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @param { !number } desiredFlags
   * @return {!Promise<{
        file: ?mojoBase.mojom.File,
   *  }>}
   */

  openFile(
      vfsFileName,
      desiredFlags) {
    return this.proxy.sendMessage(
        0,
        blink.mojom.WebDatabaseHost_OpenFile_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
        [
          vfsFileName,
          desiredFlags
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @param { !boolean } syncDir
   * @return {!Promise<{
        sqliteErrorCode: !number,
   *  }>}
   */

  deleteFile(
      vfsFileName,
      syncDir) {
    return this.proxy.sendMessage(
        1,
        blink.mojom.WebDatabaseHost_DeleteFile_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
        [
          vfsFileName,
          syncDir
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @return {!Promise<{
        attributes: !number,
   *  }>}
   */

  getFileAttributes(
      vfsFileName) {
    return this.proxy.sendMessage(
        2,
        blink.mojom.WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
        [
          vfsFileName
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.String16 } vfsFileName
   * @param { !bigint } expectedSize
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  setFileSize(
      vfsFileName,
      expectedSize) {
    return this.proxy.sendMessage(
        3,
        blink.mojom.WebDatabaseHost_SetFileSize_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
        [
          vfsFileName,
          expectedSize
        ]);
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @return {!Promise<{
        spaceAvailable: !bigint,
   *  }>}
   */

  getSpaceAvailable(
      origin) {
    return this.proxy.sendMessage(
        4,
        blink.mojom.WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
        [
          origin
        ]);
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   * @param { !mojoBase.mojom.String16 } databaseDescription
   */

  opened(
      origin,
      databaseName,
      databaseDescription) {
    this.proxy.sendMessage(
        5,
        blink.mojom.WebDatabaseHost_Opened_ParamsSpec.$,
        null,
        [
          origin,
          databaseName,
          databaseDescription
        ]);
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   */

  modified(
      origin,
      databaseName) {
    this.proxy.sendMessage(
        6,
        blink.mojom.WebDatabaseHost_Modified_ParamsSpec.$,
        null,
        [
          origin,
          databaseName
        ]);
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   */

  closed(
      origin,
      databaseName) {
    this.proxy.sendMessage(
        7,
        blink.mojom.WebDatabaseHost_Closed_ParamsSpec.$,
        null,
        [
          origin,
          databaseName
        ]);
  }

  
  /**
   * @param { !url.mojom.Origin } origin
   * @param { !mojoBase.mojom.String16 } databaseName
   * @param { !number } error
   */

  handleSqliteError(
      origin,
      databaseName,
      error) {
    this.proxy.sendMessage(
        8,
        blink.mojom.WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
        null,
        [
          origin,
          databaseName,
          error
        ]);
  }
};

/**
 * An object which receives request messages for the WebDatabaseHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
blink.mojom.WebDatabaseHostReceiver = class {
  /**
   * @param {!blink.mojom.WebDatabaseHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!blink.mojom.WebDatabaseHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        blink.mojom.WebDatabaseHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.WebDatabaseHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        blink.mojom.WebDatabaseHost_OpenFile_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
        impl.openFile.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        blink.mojom.WebDatabaseHost_DeleteFile_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
        impl.deleteFile.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        blink.mojom.WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
        impl.getFileAttributes.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        blink.mojom.WebDatabaseHost_SetFileSize_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
        impl.setFileSize.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        blink.mojom.WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
        impl.getSpaceAvailable.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        blink.mojom.WebDatabaseHost_Opened_ParamsSpec.$,
        null,
        impl.opened.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        blink.mojom.WebDatabaseHost_Modified_ParamsSpec.$,
        null,
        impl.modified.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        blink.mojom.WebDatabaseHost_Closed_ParamsSpec.$,
        null,
        impl.closed.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        blink.mojom.WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
        null,
        impl.handleSqliteError.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
blink.mojom.WebDatabaseHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "blink.mojom.WebDatabaseHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!blink.mojom.WebDatabaseHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new blink.mojom.WebDatabaseHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the WebDatabaseHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
blink.mojom.WebDatabaseHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      blink.mojom.WebDatabaseHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!blink.mojom.WebDatabaseHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.openFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        blink.mojom.WebDatabaseHost_OpenFile_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
        this.openFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.deleteFile =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        blink.mojom.WebDatabaseHost_DeleteFile_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
        this.deleteFile.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getFileAttributes =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        blink.mojom.WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
        this.getFileAttributes.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setFileSize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        blink.mojom.WebDatabaseHost_SetFileSize_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
        this.setFileSize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSpaceAvailable =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        blink.mojom.WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
        blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
        this.getSpaceAvailable.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.opened =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        blink.mojom.WebDatabaseHost_Opened_ParamsSpec.$,
        null,
        this.opened.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.modified =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        blink.mojom.WebDatabaseHost_Modified_ParamsSpec.$,
        null,
        this.modified.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.closed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        blink.mojom.WebDatabaseHost_Closed_ParamsSpec.$,
        null,
        this.closed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.handleSqliteError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        blink.mojom.WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
        null,
        this.handleSqliteError.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('blink.mojom.WebDatabase_UpdateSize_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabase_UpdateSize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabase_CloseImmediately_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabase_CloseImmediately_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_OpenFile_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_OpenFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_OpenFile_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_OpenFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_DeleteFile_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_DeleteFile_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_DeleteFile_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_DeleteFile_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_GetFileAttributes_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_GetFileAttributes_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_SetFileSize_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_SetFileSize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_SetFileSize_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_SetFileSize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_GetSpaceAvailable_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_GetSpaceAvailable_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_Opened_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_Opened_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_Modified_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_Modified_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_Closed_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_Closed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('blink.mojom.WebDatabaseHost_HandleSqliteError_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
blink.mojom.WebDatabaseHost_HandleSqliteError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    blink.mojom.WebDatabase_UpdateSize_ParamsSpec.$,
    'WebDatabase_UpdateSize_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'size', 16,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('blink.mojom.WebDatabase_UpdateSize_Params');

/** @record */
blink.mojom.WebDatabase_UpdateSize_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !mojoBase.mojom.String16 } */
    this.name;
    /** @export { !bigint } */
    this.size;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabase_CloseImmediately_ParamsSpec.$,
    'WebDatabase_CloseImmediately_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.WebDatabase_CloseImmediately_Params');

/** @record */
blink.mojom.WebDatabase_CloseImmediately_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !mojoBase.mojom.String16 } */
    this.name;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_OpenFile_ParamsSpec.$,
    'WebDatabaseHost_OpenFile_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'desiredFlags', 8,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.WebDatabaseHost_OpenFile_Params');

/** @record */
blink.mojom.WebDatabaseHost_OpenFile_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.String16 } */
    this.vfsFileName;
    /** @export { !number } */
    this.desiredFlags;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_OpenFile_ResponseParamsSpec.$,
    'WebDatabaseHost_OpenFile_ResponseParams',
    [
      mojo.internal.StructField(
        'file', 0,
        0,
        mojoBase.mojom.FileSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_OpenFile_ResponseParams');

/** @record */
blink.mojom.WebDatabaseHost_OpenFile_ResponseParams = class {
  constructor() {
    /** @export { (mojoBase.mojom.File|undefined) } */
    this.file;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_DeleteFile_ParamsSpec.$,
    'WebDatabaseHost_DeleteFile_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'syncDir', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.WebDatabaseHost_DeleteFile_Params');

/** @record */
blink.mojom.WebDatabaseHost_DeleteFile_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.String16 } */
    this.vfsFileName;
    /** @export { !boolean } */
    this.syncDir;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_DeleteFile_ResponseParamsSpec.$,
    'WebDatabaseHost_DeleteFile_ResponseParams',
    [
      mojo.internal.StructField(
        'sqliteErrorCode', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_DeleteFile_ResponseParams');

/** @record */
blink.mojom.WebDatabaseHost_DeleteFile_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.sqliteErrorCode;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_GetFileAttributes_ParamsSpec.$,
    'WebDatabaseHost_GetFileAttributes_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_GetFileAttributes_Params');

/** @record */
blink.mojom.WebDatabaseHost_GetFileAttributes_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.String16 } */
    this.vfsFileName;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParamsSpec.$,
    'WebDatabaseHost_GetFileAttributes_ResponseParams',
    [
      mojo.internal.StructField(
        'attributes', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParams');

/** @record */
blink.mojom.WebDatabaseHost_GetFileAttributes_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.attributes;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_SetFileSize_ParamsSpec.$,
    'WebDatabaseHost_SetFileSize_Params',
    [
      mojo.internal.StructField(
        'vfsFileName', 0,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'expectedSize', 8,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.WebDatabaseHost_SetFileSize_Params');

/** @record */
blink.mojom.WebDatabaseHost_SetFileSize_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.String16 } */
    this.vfsFileName;
    /** @export { !bigint } */
    this.expectedSize;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_SetFileSize_ResponseParamsSpec.$,
    'WebDatabaseHost_SetFileSize_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_SetFileSize_ResponseParams');

/** @record */
blink.mojom.WebDatabaseHost_SetFileSize_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.success;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_GetSpaceAvailable_ParamsSpec.$,
    'WebDatabaseHost_GetSpaceAvailable_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_GetSpaceAvailable_Params');

/** @record */
blink.mojom.WebDatabaseHost_GetSpaceAvailable_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParamsSpec.$,
    'WebDatabaseHost_GetSpaceAvailable_ResponseParams',
    [
      mojo.internal.StructField(
        'spaceAvailable', 0,
        0,
        mojo.internal.Int64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParams');

/** @record */
blink.mojom.WebDatabaseHost_GetSpaceAvailable_ResponseParams = class {
  constructor() {
    /** @export { !bigint } */
    this.spaceAvailable;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_Opened_ParamsSpec.$,
    'WebDatabaseHost_Opened_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'databaseDescription', 16,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('blink.mojom.WebDatabaseHost_Opened_Params');

/** @record */
blink.mojom.WebDatabaseHost_Opened_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !mojoBase.mojom.String16 } */
    this.databaseName;
    /** @export { !mojoBase.mojom.String16 } */
    this.databaseDescription;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_Modified_ParamsSpec.$,
    'WebDatabaseHost_Modified_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.WebDatabaseHost_Modified_Params');

/** @record */
blink.mojom.WebDatabaseHost_Modified_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !mojoBase.mojom.String16 } */
    this.databaseName;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_Closed_ParamsSpec.$,
    'WebDatabaseHost_Closed_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('blink.mojom.WebDatabaseHost_Closed_Params');

/** @record */
blink.mojom.WebDatabaseHost_Closed_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !mojoBase.mojom.String16 } */
    this.databaseName;
  }
};




mojo.internal.Struct(
    blink.mojom.WebDatabaseHost_HandleSqliteError_ParamsSpec.$,
    'WebDatabaseHost_HandleSqliteError_Params',
    [
      mojo.internal.StructField(
        'origin', 0,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'databaseName', 8,
        0,
        mojoBase.mojom.String16Spec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'error', 16,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('blink.mojom.WebDatabaseHost_HandleSqliteError_Params');

/** @record */
blink.mojom.WebDatabaseHost_HandleSqliteError_Params = class {
  constructor() {
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !mojoBase.mojom.String16 } */
    this.databaseName;
    /** @export { !number } */
    this.error;
  }
};


