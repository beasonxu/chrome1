// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_unique_name_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_font_5funique_5fname_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_font_5funique_5fname_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_font_5funique_5fname_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_font_5funique_5fname_5ftable_2eproto {
  static const uint32_t offsets[];
};
namespace blink {
class FontUniqueNameTable;
struct FontUniqueNameTableDefaultTypeInternal;
extern FontUniqueNameTableDefaultTypeInternal _FontUniqueNameTable_default_instance_;
class FontUniqueNameTable_UniqueFont;
struct FontUniqueNameTable_UniqueFontDefaultTypeInternal;
extern FontUniqueNameTable_UniqueFontDefaultTypeInternal _FontUniqueNameTable_UniqueFont_default_instance_;
class FontUniqueNameTable_UniqueNameToFontMapping;
struct FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal;
extern FontUniqueNameTable_UniqueNameToFontMappingDefaultTypeInternal _FontUniqueNameTable_UniqueNameToFontMapping_default_instance_;
}  // namespace blink
PROTOBUF_NAMESPACE_OPEN
template<> ::blink::FontUniqueNameTable* Arena::CreateMaybeMessage<::blink::FontUniqueNameTable>(Arena*);
template<> ::blink::FontUniqueNameTable_UniqueFont* Arena::CreateMaybeMessage<::blink::FontUniqueNameTable_UniqueFont>(Arena*);
template<> ::blink::FontUniqueNameTable_UniqueNameToFontMapping* Arena::CreateMaybeMessage<::blink::FontUniqueNameTable_UniqueNameToFontMapping>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blink {

// ===================================================================

class FontUniqueNameTable_UniqueFont final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontUniqueNameTable.UniqueFont) */ {
 public:
  inline FontUniqueNameTable_UniqueFont() : FontUniqueNameTable_UniqueFont(nullptr) {}
  ~FontUniqueNameTable_UniqueFont() override;
  explicit PROTOBUF_CONSTEXPR FontUniqueNameTable_UniqueFont(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontUniqueNameTable_UniqueFont(const FontUniqueNameTable_UniqueFont& from);
  FontUniqueNameTable_UniqueFont(FontUniqueNameTable_UniqueFont&& from) noexcept
    : FontUniqueNameTable_UniqueFont() {
    *this = ::std::move(from);
  }

  inline FontUniqueNameTable_UniqueFont& operator=(const FontUniqueNameTable_UniqueFont& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontUniqueNameTable_UniqueFont& operator=(FontUniqueNameTable_UniqueFont&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FontUniqueNameTable_UniqueFont& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontUniqueNameTable_UniqueFont* internal_default_instance() {
    return reinterpret_cast<const FontUniqueNameTable_UniqueFont*>(
               &_FontUniqueNameTable_UniqueFont_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FontUniqueNameTable_UniqueFont& a, FontUniqueNameTable_UniqueFont& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FontUniqueNameTable_UniqueFont* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontUniqueNameTable_UniqueFont* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontUniqueNameTable_UniqueFont* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontUniqueNameTable_UniqueFont>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FontUniqueNameTable_UniqueFont& from);
  void MergeFrom(const FontUniqueNameTable_UniqueFont& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontUniqueNameTable_UniqueFont* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontUniqueNameTable.UniqueFont";
  }
  protected:
  explicit FontUniqueNameTable_UniqueFont(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilePathFieldNumber = 10,
    kTtcIndexFieldNumber = 20,
  };
  // required string file_path = 10;
  bool has_file_path() const;
  private:
  bool _internal_has_file_path() const;
  public:
  void clear_file_path();
  const std::string& file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* file_path);
  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(const std::string& value);
  std::string* _internal_mutable_file_path();
  public:

  // required uint32 ttc_index = 20;
  bool has_ttc_index() const;
  private:
  bool _internal_has_ttc_index() const;
  public:
  void clear_ttc_index();
  uint32_t ttc_index() const;
  void set_ttc_index(uint32_t value);
  private:
  uint32_t _internal_ttc_index() const;
  void _internal_set_ttc_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blink.FontUniqueNameTable.UniqueFont)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_path_;
  uint32_t ttc_index_;
  friend struct ::TableStruct_font_5funique_5fname_5ftable_2eproto;
};
// -------------------------------------------------------------------

class FontUniqueNameTable_UniqueNameToFontMapping final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontUniqueNameTable.UniqueNameToFontMapping) */ {
 public:
  inline FontUniqueNameTable_UniqueNameToFontMapping() : FontUniqueNameTable_UniqueNameToFontMapping(nullptr) {}
  ~FontUniqueNameTable_UniqueNameToFontMapping() override;
  explicit PROTOBUF_CONSTEXPR FontUniqueNameTable_UniqueNameToFontMapping(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontUniqueNameTable_UniqueNameToFontMapping(const FontUniqueNameTable_UniqueNameToFontMapping& from);
  FontUniqueNameTable_UniqueNameToFontMapping(FontUniqueNameTable_UniqueNameToFontMapping&& from) noexcept
    : FontUniqueNameTable_UniqueNameToFontMapping() {
    *this = ::std::move(from);
  }

  inline FontUniqueNameTable_UniqueNameToFontMapping& operator=(const FontUniqueNameTable_UniqueNameToFontMapping& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontUniqueNameTable_UniqueNameToFontMapping& operator=(FontUniqueNameTable_UniqueNameToFontMapping&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FontUniqueNameTable_UniqueNameToFontMapping& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontUniqueNameTable_UniqueNameToFontMapping* internal_default_instance() {
    return reinterpret_cast<const FontUniqueNameTable_UniqueNameToFontMapping*>(
               &_FontUniqueNameTable_UniqueNameToFontMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FontUniqueNameTable_UniqueNameToFontMapping& a, FontUniqueNameTable_UniqueNameToFontMapping& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FontUniqueNameTable_UniqueNameToFontMapping* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontUniqueNameTable_UniqueNameToFontMapping* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontUniqueNameTable_UniqueNameToFontMapping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontUniqueNameTable_UniqueNameToFontMapping>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from);
  void MergeFrom(const FontUniqueNameTable_UniqueNameToFontMapping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontUniqueNameTable_UniqueNameToFontMapping* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontUniqueNameTable.UniqueNameToFontMapping";
  }
  protected:
  explicit FontUniqueNameTable_UniqueNameToFontMapping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFontNameFieldNumber = 10,
    kFontIndexFieldNumber = 20,
  };
  // required string font_name = 10;
  bool has_font_name() const;
  private:
  bool _internal_has_font_name() const;
  public:
  void clear_font_name();
  const std::string& font_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_font_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_font_name();
  PROTOBUF_NODISCARD std::string* release_font_name();
  void set_allocated_font_name(std::string* font_name);
  private:
  const std::string& _internal_font_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_font_name(const std::string& value);
  std::string* _internal_mutable_font_name();
  public:

  // required uint32 font_index = 20;
  bool has_font_index() const;
  private:
  bool _internal_has_font_index() const;
  public:
  void clear_font_index();
  uint32_t font_index() const;
  void set_font_index(uint32_t value);
  private:
  uint32_t _internal_font_index() const;
  void _internal_set_font_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:blink.FontUniqueNameTable.UniqueNameToFontMapping)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr font_name_;
  uint32_t font_index_;
  friend struct ::TableStruct_font_5funique_5fname_5ftable_2eproto;
};
// -------------------------------------------------------------------

class FontUniqueNameTable final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontUniqueNameTable) */ {
 public:
  inline FontUniqueNameTable() : FontUniqueNameTable(nullptr) {}
  ~FontUniqueNameTable() override;
  explicit PROTOBUF_CONSTEXPR FontUniqueNameTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontUniqueNameTable(const FontUniqueNameTable& from);
  FontUniqueNameTable(FontUniqueNameTable&& from) noexcept
    : FontUniqueNameTable() {
    *this = ::std::move(from);
  }

  inline FontUniqueNameTable& operator=(const FontUniqueNameTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontUniqueNameTable& operator=(FontUniqueNameTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FontUniqueNameTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontUniqueNameTable* internal_default_instance() {
    return reinterpret_cast<const FontUniqueNameTable*>(
               &_FontUniqueNameTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FontUniqueNameTable& a, FontUniqueNameTable& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FontUniqueNameTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontUniqueNameTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontUniqueNameTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontUniqueNameTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FontUniqueNameTable& from);
  void MergeFrom(const FontUniqueNameTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontUniqueNameTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontUniqueNameTable";
  }
  protected:
  explicit FontUniqueNameTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FontUniqueNameTable_UniqueFont UniqueFont;
  typedef FontUniqueNameTable_UniqueNameToFontMapping UniqueNameToFontMapping;

  // accessors -------------------------------------------------------

  enum : int {
    kFontsFieldNumber = 10,
    kNameMapFieldNumber = 20,
    kStoredForPlatformVersionIdentifierFieldNumber = 1,
  };
  // repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
  int fonts_size() const;
  private:
  int _internal_fonts_size() const;
  public:
  void clear_fonts();
  ::blink::FontUniqueNameTable_UniqueFont* mutable_fonts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >*
      mutable_fonts();
  private:
  const ::blink::FontUniqueNameTable_UniqueFont& _internal_fonts(int index) const;
  ::blink::FontUniqueNameTable_UniqueFont* _internal_add_fonts();
  public:
  const ::blink::FontUniqueNameTable_UniqueFont& fonts(int index) const;
  ::blink::FontUniqueNameTable_UniqueFont* add_fonts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >&
      fonts() const;

  // repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
  int name_map_size() const;
  private:
  int _internal_name_map_size() const;
  public:
  void clear_name_map();
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping* mutable_name_map(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >*
      mutable_name_map();
  private:
  const ::blink::FontUniqueNameTable_UniqueNameToFontMapping& _internal_name_map(int index) const;
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping* _internal_add_name_map();
  public:
  const ::blink::FontUniqueNameTable_UniqueNameToFontMapping& name_map(int index) const;
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping* add_name_map();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >&
      name_map() const;

  // required string stored_for_platform_version_identifier = 1;
  bool has_stored_for_platform_version_identifier() const;
  private:
  bool _internal_has_stored_for_platform_version_identifier() const;
  public:
  void clear_stored_for_platform_version_identifier();
  const std::string& stored_for_platform_version_identifier() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stored_for_platform_version_identifier(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stored_for_platform_version_identifier();
  PROTOBUF_NODISCARD std::string* release_stored_for_platform_version_identifier();
  void set_allocated_stored_for_platform_version_identifier(std::string* stored_for_platform_version_identifier);
  private:
  const std::string& _internal_stored_for_platform_version_identifier() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stored_for_platform_version_identifier(const std::string& value);
  std::string* _internal_mutable_stored_for_platform_version_identifier();
  public:

  // @@protoc_insertion_point(class_scope:blink.FontUniqueNameTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont > fonts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping > name_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stored_for_platform_version_identifier_;
  friend struct ::TableStruct_font_5funique_5fname_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FontUniqueNameTable_UniqueFont

// required string file_path = 10;
inline bool FontUniqueNameTable_UniqueFont::_internal_has_file_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontUniqueNameTable_UniqueFont::has_file_path() const {
  return _internal_has_file_path();
}
inline void FontUniqueNameTable_UniqueFont::clear_file_path() {
  file_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontUniqueNameTable_UniqueFont::file_path() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueFont.file_path)
  return _internal_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontUniqueNameTable_UniqueFont::set_file_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueFont.file_path)
}
inline std::string* FontUniqueNameTable_UniqueFont::mutable_file_path() {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.UniqueFont.file_path)
  return _s;
}
inline const std::string& FontUniqueNameTable_UniqueFont::_internal_file_path() const {
  return file_path_.Get();
}
inline void FontUniqueNameTable_UniqueFont::_internal_set_file_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* FontUniqueNameTable_UniqueFont::_internal_mutable_file_path() {
  _has_bits_[0] |= 0x00000001u;
  return file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* FontUniqueNameTable_UniqueFont::release_file_path() {
  // @@protoc_insertion_point(field_release:blink.FontUniqueNameTable.UniqueFont.file_path)
  if (!_internal_has_file_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = file_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontUniqueNameTable_UniqueFont::set_allocated_file_path(std::string* file_path) {
  if (file_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  file_path_.SetAllocated(file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (file_path_.IsDefault()) {
    file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontUniqueNameTable.UniqueFont.file_path)
}

// required uint32 ttc_index = 20;
inline bool FontUniqueNameTable_UniqueFont::_internal_has_ttc_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FontUniqueNameTable_UniqueFont::has_ttc_index() const {
  return _internal_has_ttc_index();
}
inline void FontUniqueNameTable_UniqueFont::clear_ttc_index() {
  ttc_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FontUniqueNameTable_UniqueFont::_internal_ttc_index() const {
  return ttc_index_;
}
inline uint32_t FontUniqueNameTable_UniqueFont::ttc_index() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueFont.ttc_index)
  return _internal_ttc_index();
}
inline void FontUniqueNameTable_UniqueFont::_internal_set_ttc_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ttc_index_ = value;
}
inline void FontUniqueNameTable_UniqueFont::set_ttc_index(uint32_t value) {
  _internal_set_ttc_index(value);
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueFont.ttc_index)
}

// -------------------------------------------------------------------

// FontUniqueNameTable_UniqueNameToFontMapping

// required string font_name = 10;
inline bool FontUniqueNameTable_UniqueNameToFontMapping::_internal_has_font_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontUniqueNameTable_UniqueNameToFontMapping::has_font_name() const {
  return _internal_has_font_name();
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::clear_font_name() {
  font_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontUniqueNameTable_UniqueNameToFontMapping::font_name() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
  return _internal_font_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontUniqueNameTable_UniqueNameToFontMapping::set_font_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 font_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}
inline std::string* FontUniqueNameTable_UniqueNameToFontMapping::mutable_font_name() {
  std::string* _s = _internal_mutable_font_name();
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
  return _s;
}
inline const std::string& FontUniqueNameTable_UniqueNameToFontMapping::_internal_font_name() const {
  return font_name_.Get();
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::_internal_set_font_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  font_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FontUniqueNameTable_UniqueNameToFontMapping::_internal_mutable_font_name() {
  _has_bits_[0] |= 0x00000001u;
  return font_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FontUniqueNameTable_UniqueNameToFontMapping::release_font_name() {
  // @@protoc_insertion_point(field_release:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
  if (!_internal_has_font_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = font_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (font_name_.IsDefault()) {
    font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_allocated_font_name(std::string* font_name) {
  if (font_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  font_name_.SetAllocated(font_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (font_name_.IsDefault()) {
    font_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_name)
}

// required uint32 font_index = 20;
inline bool FontUniqueNameTable_UniqueNameToFontMapping::_internal_has_font_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FontUniqueNameTable_UniqueNameToFontMapping::has_font_index() const {
  return _internal_has_font_index();
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::clear_font_index() {
  font_index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t FontUniqueNameTable_UniqueNameToFontMapping::_internal_font_index() const {
  return font_index_;
}
inline uint32_t FontUniqueNameTable_UniqueNameToFontMapping::font_index() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_index)
  return _internal_font_index();
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::_internal_set_font_index(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  font_index_ = value;
}
inline void FontUniqueNameTable_UniqueNameToFontMapping::set_font_index(uint32_t value) {
  _internal_set_font_index(value);
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.UniqueNameToFontMapping.font_index)
}

// -------------------------------------------------------------------

// FontUniqueNameTable

// required string stored_for_platform_version_identifier = 1;
inline bool FontUniqueNameTable::_internal_has_stored_for_platform_version_identifier() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontUniqueNameTable::has_stored_for_platform_version_identifier() const {
  return _internal_has_stored_for_platform_version_identifier();
}
inline void FontUniqueNameTable::clear_stored_for_platform_version_identifier() {
  stored_for_platform_version_identifier_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontUniqueNameTable::stored_for_platform_version_identifier() const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
  return _internal_stored_for_platform_version_identifier();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontUniqueNameTable::set_stored_for_platform_version_identifier(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 stored_for_platform_version_identifier_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}
inline std::string* FontUniqueNameTable::mutable_stored_for_platform_version_identifier() {
  std::string* _s = _internal_mutable_stored_for_platform_version_identifier();
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
  return _s;
}
inline const std::string& FontUniqueNameTable::_internal_stored_for_platform_version_identifier() const {
  return stored_for_platform_version_identifier_.Get();
}
inline void FontUniqueNameTable::_internal_set_stored_for_platform_version_identifier(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  stored_for_platform_version_identifier_.Set(value, GetArenaForAllocation());
}
inline std::string* FontUniqueNameTable::_internal_mutable_stored_for_platform_version_identifier() {
  _has_bits_[0] |= 0x00000001u;
  return stored_for_platform_version_identifier_.Mutable(GetArenaForAllocation());
}
inline std::string* FontUniqueNameTable::release_stored_for_platform_version_identifier() {
  // @@protoc_insertion_point(field_release:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
  if (!_internal_has_stored_for_platform_version_identifier()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = stored_for_platform_version_identifier_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stored_for_platform_version_identifier_.IsDefault()) {
    stored_for_platform_version_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontUniqueNameTable::set_allocated_stored_for_platform_version_identifier(std::string* stored_for_platform_version_identifier) {
  if (stored_for_platform_version_identifier != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  stored_for_platform_version_identifier_.SetAllocated(stored_for_platform_version_identifier, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stored_for_platform_version_identifier_.IsDefault()) {
    stored_for_platform_version_identifier_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontUniqueNameTable.stored_for_platform_version_identifier)
}

// repeated .blink.FontUniqueNameTable.UniqueFont fonts = 10;
inline int FontUniqueNameTable::_internal_fonts_size() const {
  return fonts_.size();
}
inline int FontUniqueNameTable::fonts_size() const {
  return _internal_fonts_size();
}
inline void FontUniqueNameTable::clear_fonts() {
  fonts_.Clear();
}
inline ::blink::FontUniqueNameTable_UniqueFont* FontUniqueNameTable::mutable_fonts(int index) {
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.fonts)
  return fonts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >*
FontUniqueNameTable::mutable_fonts() {
  // @@protoc_insertion_point(field_mutable_list:blink.FontUniqueNameTable.fonts)
  return &fonts_;
}
inline const ::blink::FontUniqueNameTable_UniqueFont& FontUniqueNameTable::_internal_fonts(int index) const {
  return fonts_.Get(index);
}
inline const ::blink::FontUniqueNameTable_UniqueFont& FontUniqueNameTable::fonts(int index) const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.fonts)
  return _internal_fonts(index);
}
inline ::blink::FontUniqueNameTable_UniqueFont* FontUniqueNameTable::_internal_add_fonts() {
  return fonts_.Add();
}
inline ::blink::FontUniqueNameTable_UniqueFont* FontUniqueNameTable::add_fonts() {
  ::blink::FontUniqueNameTable_UniqueFont* _add = _internal_add_fonts();
  // @@protoc_insertion_point(field_add:blink.FontUniqueNameTable.fonts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueFont >&
FontUniqueNameTable::fonts() const {
  // @@protoc_insertion_point(field_list:blink.FontUniqueNameTable.fonts)
  return fonts_;
}

// repeated .blink.FontUniqueNameTable.UniqueNameToFontMapping name_map = 20;
inline int FontUniqueNameTable::_internal_name_map_size() const {
  return name_map_.size();
}
inline int FontUniqueNameTable::name_map_size() const {
  return _internal_name_map_size();
}
inline void FontUniqueNameTable::clear_name_map() {
  name_map_.Clear();
}
inline ::blink::FontUniqueNameTable_UniqueNameToFontMapping* FontUniqueNameTable::mutable_name_map(int index) {
  // @@protoc_insertion_point(field_mutable:blink.FontUniqueNameTable.name_map)
  return name_map_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >*
FontUniqueNameTable::mutable_name_map() {
  // @@protoc_insertion_point(field_mutable_list:blink.FontUniqueNameTable.name_map)
  return &name_map_;
}
inline const ::blink::FontUniqueNameTable_UniqueNameToFontMapping& FontUniqueNameTable::_internal_name_map(int index) const {
  return name_map_.Get(index);
}
inline const ::blink::FontUniqueNameTable_UniqueNameToFontMapping& FontUniqueNameTable::name_map(int index) const {
  // @@protoc_insertion_point(field_get:blink.FontUniqueNameTable.name_map)
  return _internal_name_map(index);
}
inline ::blink::FontUniqueNameTable_UniqueNameToFontMapping* FontUniqueNameTable::_internal_add_name_map() {
  return name_map_.Add();
}
inline ::blink::FontUniqueNameTable_UniqueNameToFontMapping* FontUniqueNameTable::add_name_map() {
  ::blink::FontUniqueNameTable_UniqueNameToFontMapping* _add = _internal_add_name_map();
  // @@protoc_insertion_point(field_add:blink.FontUniqueNameTable.name_map)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontUniqueNameTable_UniqueNameToFontMapping >&
FontUniqueNameTable::name_map() const {
  // @@protoc_insertion_point(field_list:blink.FontUniqueNameTable.name_map)
  return name_map_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_font_5funique_5fname_5ftable_2eproto
