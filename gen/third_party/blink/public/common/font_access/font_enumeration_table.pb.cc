// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_enumeration_table.proto

#include "font_enumeration_table.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace blink {
PROTOBUF_CONSTEXPR FontEnumerationTable_FontData::FontEnumerationTable_FontData(
    ::_pbi::ConstantInitialized)
  : postscript_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , full_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , family_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , style_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FontEnumerationTable_FontDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontEnumerationTable_FontDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontEnumerationTable_FontDataDefaultTypeInternal() {}
  union {
    FontEnumerationTable_FontData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontEnumerationTable_FontDataDefaultTypeInternal _FontEnumerationTable_FontData_default_instance_;
PROTOBUF_CONSTEXPR FontEnumerationTable::FontEnumerationTable(
    ::_pbi::ConstantInitialized)
  : fonts_(){}
struct FontEnumerationTableDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FontEnumerationTableDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FontEnumerationTableDefaultTypeInternal() {}
  union {
    FontEnumerationTable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FontEnumerationTableDefaultTypeInternal _FontEnumerationTable_default_instance_;
}  // namespace blink
namespace blink {

// ===================================================================

class FontEnumerationTable_FontData::_Internal {
 public:
  using HasBits = decltype(std::declval<FontEnumerationTable_FontData>()._has_bits_);
  static void set_has_postscript_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_family(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_style(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

FontEnumerationTable_FontData::FontEnumerationTable_FontData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blink.FontEnumerationTable.FontData)
}
FontEnumerationTable_FontData::FontEnumerationTable_FontData(const FontEnumerationTable_FontData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  postscript_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    postscript_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_postscript_name()) {
    postscript_name_.Set(from._internal_postscript_name(), 
      GetArenaForAllocation());
  }
  full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_full_name()) {
    full_name_.Set(from._internal_full_name(), 
      GetArenaForAllocation());
  }
  family_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    family_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_family()) {
    family_.Set(from._internal_family(), 
      GetArenaForAllocation());
  }
  style_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    style_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_style()) {
    style_.Set(from._internal_style(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:blink.FontEnumerationTable.FontData)
}

inline void FontEnumerationTable_FontData::SharedCtor() {
postscript_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  postscript_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
full_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  full_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
family_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  family_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
style_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  style_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FontEnumerationTable_FontData::~FontEnumerationTable_FontData() {
  // @@protoc_insertion_point(destructor:blink.FontEnumerationTable.FontData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontEnumerationTable_FontData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  postscript_name_.Destroy();
  full_name_.Destroy();
  family_.Destroy();
  style_.Destroy();
}

void FontEnumerationTable_FontData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontEnumerationTable_FontData::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontEnumerationTable.FontData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      postscript_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      full_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      family_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      style_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FontEnumerationTable_FontData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string postscript_name = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_postscript_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string full_name = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string family = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 242)) {
          auto str = _internal_mutable_family();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string style = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_style();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontEnumerationTable_FontData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blink.FontEnumerationTable.FontData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string postscript_name = 10;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_postscript_name(), target);
  }

  // required string full_name = 20;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_full_name(), target);
  }

  // required string family = 30;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_family(), target);
  }

  // required string style = 40;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        40, this->_internal_style(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blink.FontEnumerationTable.FontData)
  return target;
}

size_t FontEnumerationTable_FontData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:blink.FontEnumerationTable.FontData)
  size_t total_size = 0;

  if (_internal_has_postscript_name()) {
    // required string postscript_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postscript_name());
  }

  if (_internal_has_full_name()) {
    // required string full_name = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  if (_internal_has_family()) {
    // required string family = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family());
  }

  if (_internal_has_style()) {
    // required string style = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());
  }

  return total_size;
}
size_t FontEnumerationTable_FontData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontEnumerationTable.FontData)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string postscript_name = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_postscript_name());

    // required string full_name = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());

    // required string family = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family());

    // required string style = 40;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_style());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontEnumerationTable_FontData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FontEnumerationTable_FontData*>(
      &from));
}

void FontEnumerationTable_FontData::MergeFrom(const FontEnumerationTable_FontData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontEnumerationTable.FontData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_postscript_name(from._internal_postscript_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_family(from._internal_family());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_style(from._internal_style());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FontEnumerationTable_FontData::CopyFrom(const FontEnumerationTable_FontData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontEnumerationTable.FontData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontEnumerationTable_FontData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FontEnumerationTable_FontData::InternalSwap(FontEnumerationTable_FontData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &postscript_name_, lhs_arena,
      &other->postscript_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &full_name_, lhs_arena,
      &other->full_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &family_, lhs_arena,
      &other->family_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &style_, lhs_arena,
      &other->style_, rhs_arena
  );
}

std::string FontEnumerationTable_FontData::GetTypeName() const {
  return "blink.FontEnumerationTable.FontData";
}


// ===================================================================

class FontEnumerationTable::_Internal {
 public:
};

FontEnumerationTable::FontEnumerationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  fonts_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:blink.FontEnumerationTable)
}
FontEnumerationTable::FontEnumerationTable(const FontEnumerationTable& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      fonts_(from.fonts_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:blink.FontEnumerationTable)
}

inline void FontEnumerationTable::SharedCtor() {
}

FontEnumerationTable::~FontEnumerationTable() {
  // @@protoc_insertion_point(destructor:blink.FontEnumerationTable)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FontEnumerationTable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FontEnumerationTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FontEnumerationTable::Clear() {
// @@protoc_insertion_point(message_clear_start:blink.FontEnumerationTable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fonts_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FontEnumerationTable::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .blink.FontEnumerationTable.FontData fonts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fonts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FontEnumerationTable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:blink.FontEnumerationTable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .blink.FontEnumerationTable.FontData fonts = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fonts_size()); i < n; i++) {
    const auto& repfield = this->_internal_fonts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:blink.FontEnumerationTable)
  return target;
}

size_t FontEnumerationTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:blink.FontEnumerationTable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .blink.FontEnumerationTable.FontData fonts = 10;
  total_size += 1UL * this->_internal_fonts_size();
  for (const auto& msg : this->fonts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FontEnumerationTable::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FontEnumerationTable*>(
      &from));
}

void FontEnumerationTable::MergeFrom(const FontEnumerationTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:blink.FontEnumerationTable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fonts_.MergeFrom(from.fonts_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FontEnumerationTable::CopyFrom(const FontEnumerationTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:blink.FontEnumerationTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FontEnumerationTable::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fonts_))
    return false;
  return true;
}

void FontEnumerationTable::InternalSwap(FontEnumerationTable* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fonts_.InternalSwap(&other->fonts_);
}

std::string FontEnumerationTable::GetTypeName() const {
  return "blink.FontEnumerationTable";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace blink
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::blink::FontEnumerationTable_FontData*
Arena::CreateMaybeMessage< ::blink::FontEnumerationTable_FontData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blink::FontEnumerationTable_FontData >(arena);
}
template<> PROTOBUF_NOINLINE ::blink::FontEnumerationTable*
Arena::CreateMaybeMessage< ::blink::FontEnumerationTable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::blink::FontEnumerationTable >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
