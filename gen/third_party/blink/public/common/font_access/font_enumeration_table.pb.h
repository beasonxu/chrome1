// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: font_enumeration_table.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_font_5fenumeration_5ftable_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_font_5fenumeration_5ftable_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_font_5fenumeration_5ftable_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_font_5fenumeration_5ftable_2eproto {
  static const uint32_t offsets[];
};
namespace blink {
class FontEnumerationTable;
struct FontEnumerationTableDefaultTypeInternal;
extern FontEnumerationTableDefaultTypeInternal _FontEnumerationTable_default_instance_;
class FontEnumerationTable_FontData;
struct FontEnumerationTable_FontDataDefaultTypeInternal;
extern FontEnumerationTable_FontDataDefaultTypeInternal _FontEnumerationTable_FontData_default_instance_;
}  // namespace blink
PROTOBUF_NAMESPACE_OPEN
template<> ::blink::FontEnumerationTable* Arena::CreateMaybeMessage<::blink::FontEnumerationTable>(Arena*);
template<> ::blink::FontEnumerationTable_FontData* Arena::CreateMaybeMessage<::blink::FontEnumerationTable_FontData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace blink {

// ===================================================================

class FontEnumerationTable_FontData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontEnumerationTable.FontData) */ {
 public:
  inline FontEnumerationTable_FontData() : FontEnumerationTable_FontData(nullptr) {}
  ~FontEnumerationTable_FontData() override;
  explicit PROTOBUF_CONSTEXPR FontEnumerationTable_FontData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontEnumerationTable_FontData(const FontEnumerationTable_FontData& from);
  FontEnumerationTable_FontData(FontEnumerationTable_FontData&& from) noexcept
    : FontEnumerationTable_FontData() {
    *this = ::std::move(from);
  }

  inline FontEnumerationTable_FontData& operator=(const FontEnumerationTable_FontData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontEnumerationTable_FontData& operator=(FontEnumerationTable_FontData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FontEnumerationTable_FontData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontEnumerationTable_FontData* internal_default_instance() {
    return reinterpret_cast<const FontEnumerationTable_FontData*>(
               &_FontEnumerationTable_FontData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FontEnumerationTable_FontData& a, FontEnumerationTable_FontData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FontEnumerationTable_FontData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontEnumerationTable_FontData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontEnumerationTable_FontData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontEnumerationTable_FontData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FontEnumerationTable_FontData& from);
  void MergeFrom(const FontEnumerationTable_FontData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontEnumerationTable_FontData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontEnumerationTable.FontData";
  }
  protected:
  explicit FontEnumerationTable_FontData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPostscriptNameFieldNumber = 10,
    kFullNameFieldNumber = 20,
    kFamilyFieldNumber = 30,
    kStyleFieldNumber = 40,
  };
  // required string postscript_name = 10;
  bool has_postscript_name() const;
  private:
  bool _internal_has_postscript_name() const;
  public:
  void clear_postscript_name();
  const std::string& postscript_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_postscript_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_postscript_name();
  PROTOBUF_NODISCARD std::string* release_postscript_name();
  void set_allocated_postscript_name(std::string* postscript_name);
  private:
  const std::string& _internal_postscript_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_postscript_name(const std::string& value);
  std::string* _internal_mutable_postscript_name();
  public:

  // required string full_name = 20;
  bool has_full_name() const;
  private:
  bool _internal_has_full_name() const;
  public:
  void clear_full_name();
  const std::string& full_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_full_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* full_name);
  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(const std::string& value);
  std::string* _internal_mutable_full_name();
  public:

  // required string family = 30;
  bool has_family() const;
  private:
  bool _internal_has_family() const;
  public:
  void clear_family();
  const std::string& family() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_family(ArgT0&& arg0, ArgT... args);
  std::string* mutable_family();
  PROTOBUF_NODISCARD std::string* release_family();
  void set_allocated_family(std::string* family);
  private:
  const std::string& _internal_family() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_family(const std::string& value);
  std::string* _internal_mutable_family();
  public:

  // required string style = 40;
  bool has_style() const;
  private:
  bool _internal_has_style() const;
  public:
  void clear_style();
  const std::string& style() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_style(ArgT0&& arg0, ArgT... args);
  std::string* mutable_style();
  PROTOBUF_NODISCARD std::string* release_style();
  void set_allocated_style(std::string* style);
  private:
  const std::string& _internal_style() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_style(const std::string& value);
  std::string* _internal_mutable_style();
  public:

  // @@protoc_insertion_point(class_scope:blink.FontEnumerationTable.FontData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr postscript_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr style_;
  friend struct ::TableStruct_font_5fenumeration_5ftable_2eproto;
};
// -------------------------------------------------------------------

class FontEnumerationTable final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:blink.FontEnumerationTable) */ {
 public:
  inline FontEnumerationTable() : FontEnumerationTable(nullptr) {}
  ~FontEnumerationTable() override;
  explicit PROTOBUF_CONSTEXPR FontEnumerationTable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FontEnumerationTable(const FontEnumerationTable& from);
  FontEnumerationTable(FontEnumerationTable&& from) noexcept
    : FontEnumerationTable() {
    *this = ::std::move(from);
  }

  inline FontEnumerationTable& operator=(const FontEnumerationTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline FontEnumerationTable& operator=(FontEnumerationTable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FontEnumerationTable& default_instance() {
    return *internal_default_instance();
  }
  static inline const FontEnumerationTable* internal_default_instance() {
    return reinterpret_cast<const FontEnumerationTable*>(
               &_FontEnumerationTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FontEnumerationTable& a, FontEnumerationTable& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FontEnumerationTable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FontEnumerationTable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FontEnumerationTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FontEnumerationTable>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FontEnumerationTable& from);
  void MergeFrom(const FontEnumerationTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FontEnumerationTable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "blink.FontEnumerationTable";
  }
  protected:
  explicit FontEnumerationTable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FontEnumerationTable_FontData FontData;

  // accessors -------------------------------------------------------

  enum : int {
    kFontsFieldNumber = 10,
  };
  // repeated .blink.FontEnumerationTable.FontData fonts = 10;
  int fonts_size() const;
  private:
  int _internal_fonts_size() const;
  public:
  void clear_fonts();
  ::blink::FontEnumerationTable_FontData* mutable_fonts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontEnumerationTable_FontData >*
      mutable_fonts();
  private:
  const ::blink::FontEnumerationTable_FontData& _internal_fonts(int index) const;
  ::blink::FontEnumerationTable_FontData* _internal_add_fonts();
  public:
  const ::blink::FontEnumerationTable_FontData& fonts(int index) const;
  ::blink::FontEnumerationTable_FontData* add_fonts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontEnumerationTable_FontData >&
      fonts() const;

  // @@protoc_insertion_point(class_scope:blink.FontEnumerationTable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontEnumerationTable_FontData > fonts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_font_5fenumeration_5ftable_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FontEnumerationTable_FontData

// required string postscript_name = 10;
inline bool FontEnumerationTable_FontData::_internal_has_postscript_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FontEnumerationTable_FontData::has_postscript_name() const {
  return _internal_has_postscript_name();
}
inline void FontEnumerationTable_FontData::clear_postscript_name() {
  postscript_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FontEnumerationTable_FontData::postscript_name() const {
  // @@protoc_insertion_point(field_get:blink.FontEnumerationTable.FontData.postscript_name)
  return _internal_postscript_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontEnumerationTable_FontData::set_postscript_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 postscript_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontEnumerationTable.FontData.postscript_name)
}
inline std::string* FontEnumerationTable_FontData::mutable_postscript_name() {
  std::string* _s = _internal_mutable_postscript_name();
  // @@protoc_insertion_point(field_mutable:blink.FontEnumerationTable.FontData.postscript_name)
  return _s;
}
inline const std::string& FontEnumerationTable_FontData::_internal_postscript_name() const {
  return postscript_name_.Get();
}
inline void FontEnumerationTable_FontData::_internal_set_postscript_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  postscript_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::_internal_mutable_postscript_name() {
  _has_bits_[0] |= 0x00000001u;
  return postscript_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::release_postscript_name() {
  // @@protoc_insertion_point(field_release:blink.FontEnumerationTable.FontData.postscript_name)
  if (!_internal_has_postscript_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = postscript_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postscript_name_.IsDefault()) {
    postscript_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontEnumerationTable_FontData::set_allocated_postscript_name(std::string* postscript_name) {
  if (postscript_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  postscript_name_.SetAllocated(postscript_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (postscript_name_.IsDefault()) {
    postscript_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontEnumerationTable.FontData.postscript_name)
}

// required string full_name = 20;
inline bool FontEnumerationTable_FontData::_internal_has_full_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FontEnumerationTable_FontData::has_full_name() const {
  return _internal_has_full_name();
}
inline void FontEnumerationTable_FontData::clear_full_name() {
  full_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FontEnumerationTable_FontData::full_name() const {
  // @@protoc_insertion_point(field_get:blink.FontEnumerationTable.FontData.full_name)
  return _internal_full_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontEnumerationTable_FontData::set_full_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 full_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontEnumerationTable.FontData.full_name)
}
inline std::string* FontEnumerationTable_FontData::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:blink.FontEnumerationTable.FontData.full_name)
  return _s;
}
inline const std::string& FontEnumerationTable_FontData::_internal_full_name() const {
  return full_name_.Get();
}
inline void FontEnumerationTable_FontData::_internal_set_full_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::_internal_mutable_full_name() {
  _has_bits_[0] |= 0x00000002u;
  return full_name_.Mutable(GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::release_full_name() {
  // @@protoc_insertion_point(field_release:blink.FontEnumerationTable.FontData.full_name)
  if (!_internal_has_full_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = full_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_name_.IsDefault()) {
    full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontEnumerationTable_FontData::set_allocated_full_name(std::string* full_name) {
  if (full_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  full_name_.SetAllocated(full_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (full_name_.IsDefault()) {
    full_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontEnumerationTable.FontData.full_name)
}

// required string family = 30;
inline bool FontEnumerationTable_FontData::_internal_has_family() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FontEnumerationTable_FontData::has_family() const {
  return _internal_has_family();
}
inline void FontEnumerationTable_FontData::clear_family() {
  family_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& FontEnumerationTable_FontData::family() const {
  // @@protoc_insertion_point(field_get:blink.FontEnumerationTable.FontData.family)
  return _internal_family();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontEnumerationTable_FontData::set_family(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 family_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontEnumerationTable.FontData.family)
}
inline std::string* FontEnumerationTable_FontData::mutable_family() {
  std::string* _s = _internal_mutable_family();
  // @@protoc_insertion_point(field_mutable:blink.FontEnumerationTable.FontData.family)
  return _s;
}
inline const std::string& FontEnumerationTable_FontData::_internal_family() const {
  return family_.Get();
}
inline void FontEnumerationTable_FontData::_internal_set_family(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  family_.Set(value, GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::_internal_mutable_family() {
  _has_bits_[0] |= 0x00000004u;
  return family_.Mutable(GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::release_family() {
  // @@protoc_insertion_point(field_release:blink.FontEnumerationTable.FontData.family)
  if (!_internal_has_family()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = family_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (family_.IsDefault()) {
    family_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontEnumerationTable_FontData::set_allocated_family(std::string* family) {
  if (family != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  family_.SetAllocated(family, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (family_.IsDefault()) {
    family_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontEnumerationTable.FontData.family)
}

// required string style = 40;
inline bool FontEnumerationTable_FontData::_internal_has_style() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FontEnumerationTable_FontData::has_style() const {
  return _internal_has_style();
}
inline void FontEnumerationTable_FontData::clear_style() {
  style_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& FontEnumerationTable_FontData::style() const {
  // @@protoc_insertion_point(field_get:blink.FontEnumerationTable.FontData.style)
  return _internal_style();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FontEnumerationTable_FontData::set_style(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 style_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:blink.FontEnumerationTable.FontData.style)
}
inline std::string* FontEnumerationTable_FontData::mutable_style() {
  std::string* _s = _internal_mutable_style();
  // @@protoc_insertion_point(field_mutable:blink.FontEnumerationTable.FontData.style)
  return _s;
}
inline const std::string& FontEnumerationTable_FontData::_internal_style() const {
  return style_.Get();
}
inline void FontEnumerationTable_FontData::_internal_set_style(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  style_.Set(value, GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::_internal_mutable_style() {
  _has_bits_[0] |= 0x00000008u;
  return style_.Mutable(GetArenaForAllocation());
}
inline std::string* FontEnumerationTable_FontData::release_style() {
  // @@protoc_insertion_point(field_release:blink.FontEnumerationTable.FontData.style)
  if (!_internal_has_style()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = style_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (style_.IsDefault()) {
    style_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FontEnumerationTable_FontData::set_allocated_style(std::string* style) {
  if (style != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  style_.SetAllocated(style, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (style_.IsDefault()) {
    style_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:blink.FontEnumerationTable.FontData.style)
}

// -------------------------------------------------------------------

// FontEnumerationTable

// repeated .blink.FontEnumerationTable.FontData fonts = 10;
inline int FontEnumerationTable::_internal_fonts_size() const {
  return fonts_.size();
}
inline int FontEnumerationTable::fonts_size() const {
  return _internal_fonts_size();
}
inline void FontEnumerationTable::clear_fonts() {
  fonts_.Clear();
}
inline ::blink::FontEnumerationTable_FontData* FontEnumerationTable::mutable_fonts(int index) {
  // @@protoc_insertion_point(field_mutable:blink.FontEnumerationTable.fonts)
  return fonts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontEnumerationTable_FontData >*
FontEnumerationTable::mutable_fonts() {
  // @@protoc_insertion_point(field_mutable_list:blink.FontEnumerationTable.fonts)
  return &fonts_;
}
inline const ::blink::FontEnumerationTable_FontData& FontEnumerationTable::_internal_fonts(int index) const {
  return fonts_.Get(index);
}
inline const ::blink::FontEnumerationTable_FontData& FontEnumerationTable::fonts(int index) const {
  // @@protoc_insertion_point(field_get:blink.FontEnumerationTable.fonts)
  return _internal_fonts(index);
}
inline ::blink::FontEnumerationTable_FontData* FontEnumerationTable::_internal_add_fonts() {
  return fonts_.Add();
}
inline ::blink::FontEnumerationTable_FontData* FontEnumerationTable::add_fonts() {
  ::blink::FontEnumerationTable_FontData* _add = _internal_add_fonts();
  // @@protoc_insertion_point(field_add:blink.FontEnumerationTable.fonts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::blink::FontEnumerationTable_FontData >&
FontEnumerationTable::fonts() const {
  // @@protoc_insertion_point(field_list:blink.FontEnumerationTable.fonts)
  return fonts_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace blink

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_font_5fenumeration_5ftable_2eproto
