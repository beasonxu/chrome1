// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: distributed_point_function.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_distributed_5fpoint_5ffunction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_distributed_5fpoint_5ffunction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_distributed_5fpoint_5ffunction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_distributed_5fpoint_5ffunction_2eproto {
  static const uint32_t offsets[];
};
namespace distributed_point_functions {
class Block;
struct BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class CorrectionWord;
struct CorrectionWordDefaultTypeInternal;
extern CorrectionWordDefaultTypeInternal _CorrectionWord_default_instance_;
class DpfKey;
struct DpfKeyDefaultTypeInternal;
extern DpfKeyDefaultTypeInternal _DpfKey_default_instance_;
class DpfParameters;
struct DpfParametersDefaultTypeInternal;
extern DpfParametersDefaultTypeInternal _DpfParameters_default_instance_;
class EvaluationContext;
struct EvaluationContextDefaultTypeInternal;
extern EvaluationContextDefaultTypeInternal _EvaluationContext_default_instance_;
class PartialEvaluation;
struct PartialEvaluationDefaultTypeInternal;
extern PartialEvaluationDefaultTypeInternal _PartialEvaluation_default_instance_;
class Value;
struct ValueDefaultTypeInternal;
extern ValueDefaultTypeInternal _Value_default_instance_;
class ValueType;
struct ValueTypeDefaultTypeInternal;
extern ValueTypeDefaultTypeInternal _ValueType_default_instance_;
class ValueType_IntModN;
struct ValueType_IntModNDefaultTypeInternal;
extern ValueType_IntModNDefaultTypeInternal _ValueType_IntModN_default_instance_;
class ValueType_Integer;
struct ValueType_IntegerDefaultTypeInternal;
extern ValueType_IntegerDefaultTypeInternal _ValueType_Integer_default_instance_;
class ValueType_Tuple;
struct ValueType_TupleDefaultTypeInternal;
extern ValueType_TupleDefaultTypeInternal _ValueType_Tuple_default_instance_;
class Value_Integer;
struct Value_IntegerDefaultTypeInternal;
extern Value_IntegerDefaultTypeInternal _Value_Integer_default_instance_;
class Value_Tuple;
struct Value_TupleDefaultTypeInternal;
extern Value_TupleDefaultTypeInternal _Value_Tuple_default_instance_;
}  // namespace distributed_point_functions
PROTOBUF_NAMESPACE_OPEN
template<> ::distributed_point_functions::Block* Arena::CreateMaybeMessage<::distributed_point_functions::Block>(Arena*);
template<> ::distributed_point_functions::CorrectionWord* Arena::CreateMaybeMessage<::distributed_point_functions::CorrectionWord>(Arena*);
template<> ::distributed_point_functions::DpfKey* Arena::CreateMaybeMessage<::distributed_point_functions::DpfKey>(Arena*);
template<> ::distributed_point_functions::DpfParameters* Arena::CreateMaybeMessage<::distributed_point_functions::DpfParameters>(Arena*);
template<> ::distributed_point_functions::EvaluationContext* Arena::CreateMaybeMessage<::distributed_point_functions::EvaluationContext>(Arena*);
template<> ::distributed_point_functions::PartialEvaluation* Arena::CreateMaybeMessage<::distributed_point_functions::PartialEvaluation>(Arena*);
template<> ::distributed_point_functions::Value* Arena::CreateMaybeMessage<::distributed_point_functions::Value>(Arena*);
template<> ::distributed_point_functions::ValueType* Arena::CreateMaybeMessage<::distributed_point_functions::ValueType>(Arena*);
template<> ::distributed_point_functions::ValueType_IntModN* Arena::CreateMaybeMessage<::distributed_point_functions::ValueType_IntModN>(Arena*);
template<> ::distributed_point_functions::ValueType_Integer* Arena::CreateMaybeMessage<::distributed_point_functions::ValueType_Integer>(Arena*);
template<> ::distributed_point_functions::ValueType_Tuple* Arena::CreateMaybeMessage<::distributed_point_functions::ValueType_Tuple>(Arena*);
template<> ::distributed_point_functions::Value_Integer* Arena::CreateMaybeMessage<::distributed_point_functions::Value_Integer>(Arena*);
template<> ::distributed_point_functions::Value_Tuple* Arena::CreateMaybeMessage<::distributed_point_functions::Value_Tuple>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace distributed_point_functions {

// ===================================================================

class ValueType_Integer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.ValueType.Integer) */ {
 public:
  inline ValueType_Integer() : ValueType_Integer(nullptr) {}
  ~ValueType_Integer() override;
  explicit PROTOBUF_CONSTEXPR ValueType_Integer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueType_Integer(const ValueType_Integer& from);
  ValueType_Integer(ValueType_Integer&& from) noexcept
    : ValueType_Integer() {
    *this = ::std::move(from);
  }

  inline ValueType_Integer& operator=(const ValueType_Integer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueType_Integer& operator=(ValueType_Integer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ValueType_Integer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueType_Integer* internal_default_instance() {
    return reinterpret_cast<const ValueType_Integer*>(
               &_ValueType_Integer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ValueType_Integer& a, ValueType_Integer& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ValueType_Integer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueType_Integer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueType_Integer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueType_Integer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ValueType_Integer& from);
  void MergeFrom(const ValueType_Integer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueType_Integer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.ValueType.Integer";
  }
  protected:
  explicit ValueType_Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBitsizeFieldNumber = 1,
  };
  // int32 bitsize = 1;
  void clear_bitsize();
  int32_t bitsize() const;
  void set_bitsize(int32_t value);
  private:
  int32_t _internal_bitsize() const;
  void _internal_set_bitsize(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.ValueType.Integer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t bitsize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class ValueType_Tuple final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.ValueType.Tuple) */ {
 public:
  inline ValueType_Tuple() : ValueType_Tuple(nullptr) {}
  ~ValueType_Tuple() override;
  explicit PROTOBUF_CONSTEXPR ValueType_Tuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueType_Tuple(const ValueType_Tuple& from);
  ValueType_Tuple(ValueType_Tuple&& from) noexcept
    : ValueType_Tuple() {
    *this = ::std::move(from);
  }

  inline ValueType_Tuple& operator=(const ValueType_Tuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueType_Tuple& operator=(ValueType_Tuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ValueType_Tuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueType_Tuple* internal_default_instance() {
    return reinterpret_cast<const ValueType_Tuple*>(
               &_ValueType_Tuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ValueType_Tuple& a, ValueType_Tuple& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ValueType_Tuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueType_Tuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueType_Tuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueType_Tuple>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ValueType_Tuple& from);
  void MergeFrom(const ValueType_Tuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueType_Tuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.ValueType.Tuple";
  }
  protected:
  explicit ValueType_Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .distributed_point_functions.ValueType elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::distributed_point_functions::ValueType* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::ValueType >*
      mutable_elements();
  private:
  const ::distributed_point_functions::ValueType& _internal_elements(int index) const;
  ::distributed_point_functions::ValueType* _internal_add_elements();
  public:
  const ::distributed_point_functions::ValueType& elements(int index) const;
  ::distributed_point_functions::ValueType* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::ValueType >&
      elements() const;

  // @@protoc_insertion_point(class_scope:distributed_point_functions.ValueType.Tuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::ValueType > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class ValueType_IntModN final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.ValueType.IntModN) */ {
 public:
  inline ValueType_IntModN() : ValueType_IntModN(nullptr) {}
  ~ValueType_IntModN() override;
  explicit PROTOBUF_CONSTEXPR ValueType_IntModN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueType_IntModN(const ValueType_IntModN& from);
  ValueType_IntModN(ValueType_IntModN&& from) noexcept
    : ValueType_IntModN() {
    *this = ::std::move(from);
  }

  inline ValueType_IntModN& operator=(const ValueType_IntModN& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueType_IntModN& operator=(ValueType_IntModN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ValueType_IntModN& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValueType_IntModN* internal_default_instance() {
    return reinterpret_cast<const ValueType_IntModN*>(
               &_ValueType_IntModN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ValueType_IntModN& a, ValueType_IntModN& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ValueType_IntModN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueType_IntModN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueType_IntModN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueType_IntModN>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ValueType_IntModN& from);
  void MergeFrom(const ValueType_IntModN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueType_IntModN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.ValueType.IntModN";
  }
  protected:
  explicit ValueType_IntModN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseIntegerFieldNumber = 1,
    kModulusFieldNumber = 2,
  };
  // .distributed_point_functions.ValueType.Integer base_integer = 1;
  bool has_base_integer() const;
  private:
  bool _internal_has_base_integer() const;
  public:
  void clear_base_integer();
  const ::distributed_point_functions::ValueType_Integer& base_integer() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::ValueType_Integer* release_base_integer();
  ::distributed_point_functions::ValueType_Integer* mutable_base_integer();
  void set_allocated_base_integer(::distributed_point_functions::ValueType_Integer* base_integer);
  private:
  const ::distributed_point_functions::ValueType_Integer& _internal_base_integer() const;
  ::distributed_point_functions::ValueType_Integer* _internal_mutable_base_integer();
  public:
  void unsafe_arena_set_allocated_base_integer(
      ::distributed_point_functions::ValueType_Integer* base_integer);
  ::distributed_point_functions::ValueType_Integer* unsafe_arena_release_base_integer();

  // .distributed_point_functions.Value.Integer modulus = 2;
  bool has_modulus() const;
  private:
  bool _internal_has_modulus() const;
  public:
  void clear_modulus();
  const ::distributed_point_functions::Value_Integer& modulus() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Value_Integer* release_modulus();
  ::distributed_point_functions::Value_Integer* mutable_modulus();
  void set_allocated_modulus(::distributed_point_functions::Value_Integer* modulus);
  private:
  const ::distributed_point_functions::Value_Integer& _internal_modulus() const;
  ::distributed_point_functions::Value_Integer* _internal_mutable_modulus();
  public:
  void unsafe_arena_set_allocated_modulus(
      ::distributed_point_functions::Value_Integer* modulus);
  ::distributed_point_functions::Value_Integer* unsafe_arena_release_modulus();

  // @@protoc_insertion_point(class_scope:distributed_point_functions.ValueType.IntModN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::distributed_point_functions::ValueType_Integer* base_integer_;
  ::distributed_point_functions::Value_Integer* modulus_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class ValueType final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.ValueType) */ {
 public:
  inline ValueType() : ValueType(nullptr) {}
  ~ValueType() override;
  explicit PROTOBUF_CONSTEXPR ValueType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValueType(const ValueType& from);
  ValueType(ValueType&& from) noexcept
    : ValueType() {
    *this = ::std::move(from);
  }

  inline ValueType& operator=(const ValueType& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValueType& operator=(ValueType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ValueType& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kInteger = 1,
    kTuple = 2,
    kIntModN = 3,
    kXorWrapper = 4,
    TYPE_NOT_SET = 0,
  };

  static inline const ValueType* internal_default_instance() {
    return reinterpret_cast<const ValueType*>(
               &_ValueType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ValueType& a, ValueType& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ValueType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValueType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValueType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValueType>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ValueType& from);
  void MergeFrom(const ValueType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ValueType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.ValueType";
  }
  protected:
  explicit ValueType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ValueType_Integer Integer;
  typedef ValueType_Tuple Tuple;
  typedef ValueType_IntModN IntModN;

  // accessors -------------------------------------------------------

  enum : int {
    kIntegerFieldNumber = 1,
    kTupleFieldNumber = 2,
    kIntModNFieldNumber = 3,
    kXorWrapperFieldNumber = 4,
  };
  // .distributed_point_functions.ValueType.Integer integer = 1;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  const ::distributed_point_functions::ValueType_Integer& integer() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::ValueType_Integer* release_integer();
  ::distributed_point_functions::ValueType_Integer* mutable_integer();
  void set_allocated_integer(::distributed_point_functions::ValueType_Integer* integer);
  private:
  const ::distributed_point_functions::ValueType_Integer& _internal_integer() const;
  ::distributed_point_functions::ValueType_Integer* _internal_mutable_integer();
  public:
  void unsafe_arena_set_allocated_integer(
      ::distributed_point_functions::ValueType_Integer* integer);
  ::distributed_point_functions::ValueType_Integer* unsafe_arena_release_integer();

  // .distributed_point_functions.ValueType.Tuple tuple = 2;
  bool has_tuple() const;
  private:
  bool _internal_has_tuple() const;
  public:
  void clear_tuple();
  const ::distributed_point_functions::ValueType_Tuple& tuple() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::ValueType_Tuple* release_tuple();
  ::distributed_point_functions::ValueType_Tuple* mutable_tuple();
  void set_allocated_tuple(::distributed_point_functions::ValueType_Tuple* tuple);
  private:
  const ::distributed_point_functions::ValueType_Tuple& _internal_tuple() const;
  ::distributed_point_functions::ValueType_Tuple* _internal_mutable_tuple();
  public:
  void unsafe_arena_set_allocated_tuple(
      ::distributed_point_functions::ValueType_Tuple* tuple);
  ::distributed_point_functions::ValueType_Tuple* unsafe_arena_release_tuple();

  // .distributed_point_functions.ValueType.IntModN int_mod_n = 3;
  bool has_int_mod_n() const;
  private:
  bool _internal_has_int_mod_n() const;
  public:
  void clear_int_mod_n();
  const ::distributed_point_functions::ValueType_IntModN& int_mod_n() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::ValueType_IntModN* release_int_mod_n();
  ::distributed_point_functions::ValueType_IntModN* mutable_int_mod_n();
  void set_allocated_int_mod_n(::distributed_point_functions::ValueType_IntModN* int_mod_n);
  private:
  const ::distributed_point_functions::ValueType_IntModN& _internal_int_mod_n() const;
  ::distributed_point_functions::ValueType_IntModN* _internal_mutable_int_mod_n();
  public:
  void unsafe_arena_set_allocated_int_mod_n(
      ::distributed_point_functions::ValueType_IntModN* int_mod_n);
  ::distributed_point_functions::ValueType_IntModN* unsafe_arena_release_int_mod_n();

  // .distributed_point_functions.ValueType.Integer xor_wrapper = 4;
  bool has_xor_wrapper() const;
  private:
  bool _internal_has_xor_wrapper() const;
  public:
  void clear_xor_wrapper();
  const ::distributed_point_functions::ValueType_Integer& xor_wrapper() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::ValueType_Integer* release_xor_wrapper();
  ::distributed_point_functions::ValueType_Integer* mutable_xor_wrapper();
  void set_allocated_xor_wrapper(::distributed_point_functions::ValueType_Integer* xor_wrapper);
  private:
  const ::distributed_point_functions::ValueType_Integer& _internal_xor_wrapper() const;
  ::distributed_point_functions::ValueType_Integer* _internal_mutable_xor_wrapper();
  public:
  void unsafe_arena_set_allocated_xor_wrapper(
      ::distributed_point_functions::ValueType_Integer* xor_wrapper);
  ::distributed_point_functions::ValueType_Integer* unsafe_arena_release_xor_wrapper();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:distributed_point_functions.ValueType)
 private:
  class _Internal;
  void set_has_integer();
  void set_has_tuple();
  void set_has_int_mod_n();
  void set_has_xor_wrapper();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::distributed_point_functions::ValueType_Integer* integer_;
    ::distributed_point_functions::ValueType_Tuple* tuple_;
    ::distributed_point_functions::ValueType_IntModN* int_mod_n_;
    ::distributed_point_functions::ValueType_Integer* xor_wrapper_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class Value_Integer final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.Value.Integer) */ {
 public:
  inline Value_Integer() : Value_Integer(nullptr) {}
  ~Value_Integer() override;
  explicit PROTOBUF_CONSTEXPR Value_Integer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value_Integer(const Value_Integer& from);
  Value_Integer(Value_Integer&& from) noexcept
    : Value_Integer() {
    *this = ::std::move(from);
  }

  inline Value_Integer& operator=(const Value_Integer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value_Integer& operator=(Value_Integer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Value_Integer& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kValueUint64 = 1,
    kValueUint128 = 2,
    VALUE_NOT_SET = 0,
  };

  static inline const Value_Integer* internal_default_instance() {
    return reinterpret_cast<const Value_Integer*>(
               &_Value_Integer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Value_Integer& a, Value_Integer& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Value_Integer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value_Integer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value_Integer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value_Integer>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Value_Integer& from);
  void MergeFrom(const Value_Integer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value_Integer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.Value.Integer";
  }
  protected:
  explicit Value_Integer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueUint64FieldNumber = 1,
    kValueUint128FieldNumber = 2,
  };
  // uint64 value_uint64 = 1;
  bool has_value_uint64() const;
  private:
  bool _internal_has_value_uint64() const;
  public:
  void clear_value_uint64();
  uint64_t value_uint64() const;
  void set_value_uint64(uint64_t value);
  private:
  uint64_t _internal_value_uint64() const;
  void _internal_set_value_uint64(uint64_t value);
  public:

  // .distributed_point_functions.Block value_uint128 = 2;
  bool has_value_uint128() const;
  private:
  bool _internal_has_value_uint128() const;
  public:
  void clear_value_uint128();
  const ::distributed_point_functions::Block& value_uint128() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Block* release_value_uint128();
  ::distributed_point_functions::Block* mutable_value_uint128();
  void set_allocated_value_uint128(::distributed_point_functions::Block* value_uint128);
  private:
  const ::distributed_point_functions::Block& _internal_value_uint128() const;
  ::distributed_point_functions::Block* _internal_mutable_value_uint128();
  public:
  void unsafe_arena_set_allocated_value_uint128(
      ::distributed_point_functions::Block* value_uint128);
  ::distributed_point_functions::Block* unsafe_arena_release_value_uint128();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:distributed_point_functions.Value.Integer)
 private:
  class _Internal;
  void set_has_value_uint64();
  void set_has_value_uint128();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    uint64_t value_uint64_;
    ::distributed_point_functions::Block* value_uint128_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class Value_Tuple final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.Value.Tuple) */ {
 public:
  inline Value_Tuple() : Value_Tuple(nullptr) {}
  ~Value_Tuple() override;
  explicit PROTOBUF_CONSTEXPR Value_Tuple(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value_Tuple(const Value_Tuple& from);
  Value_Tuple(Value_Tuple&& from) noexcept
    : Value_Tuple() {
    *this = ::std::move(from);
  }

  inline Value_Tuple& operator=(const Value_Tuple& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value_Tuple& operator=(Value_Tuple&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Value_Tuple& default_instance() {
    return *internal_default_instance();
  }
  static inline const Value_Tuple* internal_default_instance() {
    return reinterpret_cast<const Value_Tuple*>(
               &_Value_Tuple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Value_Tuple& a, Value_Tuple& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Value_Tuple* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value_Tuple* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value_Tuple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value_Tuple>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Value_Tuple& from);
  void MergeFrom(const Value_Tuple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value_Tuple* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.Value.Tuple";
  }
  protected:
  explicit Value_Tuple(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .distributed_point_functions.Value elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::distributed_point_functions::Value* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >*
      mutable_elements();
  private:
  const ::distributed_point_functions::Value& _internal_elements(int index) const;
  ::distributed_point_functions::Value* _internal_add_elements();
  public:
  const ::distributed_point_functions::Value& elements(int index) const;
  ::distributed_point_functions::Value* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >&
      elements() const;

  // @@protoc_insertion_point(class_scope:distributed_point_functions.Value.Tuple)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class Value final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.Value) */ {
 public:
  inline Value() : Value(nullptr) {}
  ~Value() override;
  explicit PROTOBUF_CONSTEXPR Value(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Value(const Value& from);
  Value(Value&& from) noexcept
    : Value() {
    *this = ::std::move(from);
  }

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }
  inline Value& operator=(Value&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Value& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kInteger = 1,
    kTuple = 2,
    kIntModN = 3,
    kXorWrapper = 4,
    VALUE_NOT_SET = 0,
  };

  static inline const Value* internal_default_instance() {
    return reinterpret_cast<const Value*>(
               &_Value_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Value& a, Value& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Value* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Value* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Value* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Value>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.Value";
  }
  protected:
  explicit Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef Value_Integer Integer;
  typedef Value_Tuple Tuple;

  // accessors -------------------------------------------------------

  enum : int {
    kIntegerFieldNumber = 1,
    kTupleFieldNumber = 2,
    kIntModNFieldNumber = 3,
    kXorWrapperFieldNumber = 4,
  };
  // .distributed_point_functions.Value.Integer integer = 1;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  const ::distributed_point_functions::Value_Integer& integer() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Value_Integer* release_integer();
  ::distributed_point_functions::Value_Integer* mutable_integer();
  void set_allocated_integer(::distributed_point_functions::Value_Integer* integer);
  private:
  const ::distributed_point_functions::Value_Integer& _internal_integer() const;
  ::distributed_point_functions::Value_Integer* _internal_mutable_integer();
  public:
  void unsafe_arena_set_allocated_integer(
      ::distributed_point_functions::Value_Integer* integer);
  ::distributed_point_functions::Value_Integer* unsafe_arena_release_integer();

  // .distributed_point_functions.Value.Tuple tuple = 2;
  bool has_tuple() const;
  private:
  bool _internal_has_tuple() const;
  public:
  void clear_tuple();
  const ::distributed_point_functions::Value_Tuple& tuple() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Value_Tuple* release_tuple();
  ::distributed_point_functions::Value_Tuple* mutable_tuple();
  void set_allocated_tuple(::distributed_point_functions::Value_Tuple* tuple);
  private:
  const ::distributed_point_functions::Value_Tuple& _internal_tuple() const;
  ::distributed_point_functions::Value_Tuple* _internal_mutable_tuple();
  public:
  void unsafe_arena_set_allocated_tuple(
      ::distributed_point_functions::Value_Tuple* tuple);
  ::distributed_point_functions::Value_Tuple* unsafe_arena_release_tuple();

  // .distributed_point_functions.Value.Integer int_mod_n = 3;
  bool has_int_mod_n() const;
  private:
  bool _internal_has_int_mod_n() const;
  public:
  void clear_int_mod_n();
  const ::distributed_point_functions::Value_Integer& int_mod_n() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Value_Integer* release_int_mod_n();
  ::distributed_point_functions::Value_Integer* mutable_int_mod_n();
  void set_allocated_int_mod_n(::distributed_point_functions::Value_Integer* int_mod_n);
  private:
  const ::distributed_point_functions::Value_Integer& _internal_int_mod_n() const;
  ::distributed_point_functions::Value_Integer* _internal_mutable_int_mod_n();
  public:
  void unsafe_arena_set_allocated_int_mod_n(
      ::distributed_point_functions::Value_Integer* int_mod_n);
  ::distributed_point_functions::Value_Integer* unsafe_arena_release_int_mod_n();

  // .distributed_point_functions.Value.Integer xor_wrapper = 4;
  bool has_xor_wrapper() const;
  private:
  bool _internal_has_xor_wrapper() const;
  public:
  void clear_xor_wrapper();
  const ::distributed_point_functions::Value_Integer& xor_wrapper() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Value_Integer* release_xor_wrapper();
  ::distributed_point_functions::Value_Integer* mutable_xor_wrapper();
  void set_allocated_xor_wrapper(::distributed_point_functions::Value_Integer* xor_wrapper);
  private:
  const ::distributed_point_functions::Value_Integer& _internal_xor_wrapper() const;
  ::distributed_point_functions::Value_Integer* _internal_mutable_xor_wrapper();
  public:
  void unsafe_arena_set_allocated_xor_wrapper(
      ::distributed_point_functions::Value_Integer* xor_wrapper);
  ::distributed_point_functions::Value_Integer* unsafe_arena_release_xor_wrapper();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:distributed_point_functions.Value)
 private:
  class _Internal;
  void set_has_integer();
  void set_has_tuple();
  void set_has_int_mod_n();
  void set_has_xor_wrapper();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ValueUnion {
    constexpr ValueUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::distributed_point_functions::Value_Integer* integer_;
    ::distributed_point_functions::Value_Tuple* tuple_;
    ::distributed_point_functions::Value_Integer* int_mod_n_;
    ::distributed_point_functions::Value_Integer* xor_wrapper_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class DpfParameters final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.DpfParameters) */ {
 public:
  inline DpfParameters() : DpfParameters(nullptr) {}
  ~DpfParameters() override;
  explicit PROTOBUF_CONSTEXPR DpfParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpfParameters(const DpfParameters& from);
  DpfParameters(DpfParameters&& from) noexcept
    : DpfParameters() {
    *this = ::std::move(from);
  }

  inline DpfParameters& operator=(const DpfParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpfParameters& operator=(DpfParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DpfParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpfParameters* internal_default_instance() {
    return reinterpret_cast<const DpfParameters*>(
               &_DpfParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DpfParameters& a, DpfParameters& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DpfParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpfParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpfParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpfParameters>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DpfParameters& from);
  void MergeFrom(const DpfParameters& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DpfParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.DpfParameters";
  }
  protected:
  explicit DpfParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueTypeFieldNumber = 3,
    kSecurityParameterFieldNumber = 4,
    kLogDomainSizeFieldNumber = 1,
  };
  // .distributed_point_functions.ValueType value_type = 3;
  bool has_value_type() const;
  private:
  bool _internal_has_value_type() const;
  public:
  void clear_value_type();
  const ::distributed_point_functions::ValueType& value_type() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::ValueType* release_value_type();
  ::distributed_point_functions::ValueType* mutable_value_type();
  void set_allocated_value_type(::distributed_point_functions::ValueType* value_type);
  private:
  const ::distributed_point_functions::ValueType& _internal_value_type() const;
  ::distributed_point_functions::ValueType* _internal_mutable_value_type();
  public:
  void unsafe_arena_set_allocated_value_type(
      ::distributed_point_functions::ValueType* value_type);
  ::distributed_point_functions::ValueType* unsafe_arena_release_value_type();

  // double security_parameter = 4;
  void clear_security_parameter();
  double security_parameter() const;
  void set_security_parameter(double value);
  private:
  double _internal_security_parameter() const;
  void _internal_set_security_parameter(double value);
  public:

  // int32 log_domain_size = 1;
  void clear_log_domain_size();
  int32_t log_domain_size() const;
  void set_log_domain_size(int32_t value);
  private:
  int32_t _internal_log_domain_size() const;
  void _internal_set_log_domain_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.DpfParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::distributed_point_functions::ValueType* value_type_;
  double security_parameter_;
  int32_t log_domain_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class Block final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.Block) */ {
 public:
  inline Block() : Block(nullptr) {}
  ~Block() override;
  explicit PROTOBUF_CONSTEXPR Block(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Block(const Block& from);
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Block& operator=(Block&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Block& default_instance() {
    return *internal_default_instance();
  }
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Block* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Block* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.Block";
  }
  protected:
  explicit Block(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighFieldNumber = 1,
    kLowFieldNumber = 2,
  };
  // uint64 high = 1;
  void clear_high();
  uint64_t high() const;
  void set_high(uint64_t value);
  private:
  uint64_t _internal_high() const;
  void _internal_set_high(uint64_t value);
  public:

  // uint64 low = 2;
  void clear_low();
  uint64_t low() const;
  void set_low(uint64_t value);
  private:
  uint64_t _internal_low() const;
  void _internal_set_low(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t high_;
  uint64_t low_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class CorrectionWord final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.CorrectionWord) */ {
 public:
  inline CorrectionWord() : CorrectionWord(nullptr) {}
  ~CorrectionWord() override;
  explicit PROTOBUF_CONSTEXPR CorrectionWord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CorrectionWord(const CorrectionWord& from);
  CorrectionWord(CorrectionWord&& from) noexcept
    : CorrectionWord() {
    *this = ::std::move(from);
  }

  inline CorrectionWord& operator=(const CorrectionWord& from) {
    CopyFrom(from);
    return *this;
  }
  inline CorrectionWord& operator=(CorrectionWord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const CorrectionWord& default_instance() {
    return *internal_default_instance();
  }
  static inline const CorrectionWord* internal_default_instance() {
    return reinterpret_cast<const CorrectionWord*>(
               &_CorrectionWord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(CorrectionWord& a, CorrectionWord& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CorrectionWord* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CorrectionWord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CorrectionWord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CorrectionWord>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CorrectionWord& from);
  void MergeFrom(const CorrectionWord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CorrectionWord* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.CorrectionWord";
  }
  protected:
  explicit CorrectionWord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueCorrectionFieldNumber = 5,
    kSeedFieldNumber = 1,
    kControlLeftFieldNumber = 2,
    kControlRightFieldNumber = 3,
  };
  // repeated .distributed_point_functions.Value value_correction = 5;
  int value_correction_size() const;
  private:
  int _internal_value_correction_size() const;
  public:
  void clear_value_correction();
  ::distributed_point_functions::Value* mutable_value_correction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >*
      mutable_value_correction();
  private:
  const ::distributed_point_functions::Value& _internal_value_correction(int index) const;
  ::distributed_point_functions::Value* _internal_add_value_correction();
  public:
  const ::distributed_point_functions::Value& value_correction(int index) const;
  ::distributed_point_functions::Value* add_value_correction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >&
      value_correction() const;

  // .distributed_point_functions.Block seed = 1;
  bool has_seed() const;
  private:
  bool _internal_has_seed() const;
  public:
  void clear_seed();
  const ::distributed_point_functions::Block& seed() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Block* release_seed();
  ::distributed_point_functions::Block* mutable_seed();
  void set_allocated_seed(::distributed_point_functions::Block* seed);
  private:
  const ::distributed_point_functions::Block& _internal_seed() const;
  ::distributed_point_functions::Block* _internal_mutable_seed();
  public:
  void unsafe_arena_set_allocated_seed(
      ::distributed_point_functions::Block* seed);
  ::distributed_point_functions::Block* unsafe_arena_release_seed();

  // bool control_left = 2;
  void clear_control_left();
  bool control_left() const;
  void set_control_left(bool value);
  private:
  bool _internal_control_left() const;
  void _internal_set_control_left(bool value);
  public:

  // bool control_right = 3;
  void clear_control_right();
  bool control_right() const;
  void set_control_right(bool value);
  private:
  bool _internal_control_right() const;
  void _internal_set_control_right(bool value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.CorrectionWord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value > value_correction_;
  ::distributed_point_functions::Block* seed_;
  bool control_left_;
  bool control_right_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class DpfKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.DpfKey) */ {
 public:
  inline DpfKey() : DpfKey(nullptr) {}
  ~DpfKey() override;
  explicit PROTOBUF_CONSTEXPR DpfKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DpfKey(const DpfKey& from);
  DpfKey(DpfKey&& from) noexcept
    : DpfKey() {
    *this = ::std::move(from);
  }

  inline DpfKey& operator=(const DpfKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DpfKey& operator=(DpfKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DpfKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DpfKey* internal_default_instance() {
    return reinterpret_cast<const DpfKey*>(
               &_DpfKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DpfKey& a, DpfKey& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DpfKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DpfKey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DpfKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DpfKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DpfKey& from);
  void MergeFrom(const DpfKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DpfKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.DpfKey";
  }
  protected:
  explicit DpfKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCorrectionWordsFieldNumber = 2,
    kLastLevelValueCorrectionFieldNumber = 5,
    kSeedFieldNumber = 1,
    kPartyFieldNumber = 3,
  };
  // repeated .distributed_point_functions.CorrectionWord correction_words = 2;
  int correction_words_size() const;
  private:
  int _internal_correction_words_size() const;
  public:
  void clear_correction_words();
  ::distributed_point_functions::CorrectionWord* mutable_correction_words(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::CorrectionWord >*
      mutable_correction_words();
  private:
  const ::distributed_point_functions::CorrectionWord& _internal_correction_words(int index) const;
  ::distributed_point_functions::CorrectionWord* _internal_add_correction_words();
  public:
  const ::distributed_point_functions::CorrectionWord& correction_words(int index) const;
  ::distributed_point_functions::CorrectionWord* add_correction_words();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::CorrectionWord >&
      correction_words() const;

  // repeated .distributed_point_functions.Value last_level_value_correction = 5;
  int last_level_value_correction_size() const;
  private:
  int _internal_last_level_value_correction_size() const;
  public:
  void clear_last_level_value_correction();
  ::distributed_point_functions::Value* mutable_last_level_value_correction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >*
      mutable_last_level_value_correction();
  private:
  const ::distributed_point_functions::Value& _internal_last_level_value_correction(int index) const;
  ::distributed_point_functions::Value* _internal_add_last_level_value_correction();
  public:
  const ::distributed_point_functions::Value& last_level_value_correction(int index) const;
  ::distributed_point_functions::Value* add_last_level_value_correction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >&
      last_level_value_correction() const;

  // .distributed_point_functions.Block seed = 1;
  bool has_seed() const;
  private:
  bool _internal_has_seed() const;
  public:
  void clear_seed();
  const ::distributed_point_functions::Block& seed() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Block* release_seed();
  ::distributed_point_functions::Block* mutable_seed();
  void set_allocated_seed(::distributed_point_functions::Block* seed);
  private:
  const ::distributed_point_functions::Block& _internal_seed() const;
  ::distributed_point_functions::Block* _internal_mutable_seed();
  public:
  void unsafe_arena_set_allocated_seed(
      ::distributed_point_functions::Block* seed);
  ::distributed_point_functions::Block* unsafe_arena_release_seed();

  // int32 party = 3;
  void clear_party();
  int32_t party() const;
  void set_party(int32_t value);
  private:
  int32_t _internal_party() const;
  void _internal_set_party(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.DpfKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::CorrectionWord > correction_words_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value > last_level_value_correction_;
  ::distributed_point_functions::Block* seed_;
  int32_t party_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class PartialEvaluation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.PartialEvaluation) */ {
 public:
  inline PartialEvaluation() : PartialEvaluation(nullptr) {}
  ~PartialEvaluation() override;
  explicit PROTOBUF_CONSTEXPR PartialEvaluation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PartialEvaluation(const PartialEvaluation& from);
  PartialEvaluation(PartialEvaluation&& from) noexcept
    : PartialEvaluation() {
    *this = ::std::move(from);
  }

  inline PartialEvaluation& operator=(const PartialEvaluation& from) {
    CopyFrom(from);
    return *this;
  }
  inline PartialEvaluation& operator=(PartialEvaluation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PartialEvaluation& default_instance() {
    return *internal_default_instance();
  }
  static inline const PartialEvaluation* internal_default_instance() {
    return reinterpret_cast<const PartialEvaluation*>(
               &_PartialEvaluation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PartialEvaluation& a, PartialEvaluation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PartialEvaluation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PartialEvaluation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PartialEvaluation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PartialEvaluation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PartialEvaluation& from);
  void MergeFrom(const PartialEvaluation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PartialEvaluation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.PartialEvaluation";
  }
  protected:
  explicit PartialEvaluation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrefixFieldNumber = 1,
    kSeedFieldNumber = 2,
    kControlBitFieldNumber = 3,
  };
  // .distributed_point_functions.Block prefix = 1;
  bool has_prefix() const;
  private:
  bool _internal_has_prefix() const;
  public:
  void clear_prefix();
  const ::distributed_point_functions::Block& prefix() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Block* release_prefix();
  ::distributed_point_functions::Block* mutable_prefix();
  void set_allocated_prefix(::distributed_point_functions::Block* prefix);
  private:
  const ::distributed_point_functions::Block& _internal_prefix() const;
  ::distributed_point_functions::Block* _internal_mutable_prefix();
  public:
  void unsafe_arena_set_allocated_prefix(
      ::distributed_point_functions::Block* prefix);
  ::distributed_point_functions::Block* unsafe_arena_release_prefix();

  // .distributed_point_functions.Block seed = 2;
  bool has_seed() const;
  private:
  bool _internal_has_seed() const;
  public:
  void clear_seed();
  const ::distributed_point_functions::Block& seed() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::Block* release_seed();
  ::distributed_point_functions::Block* mutable_seed();
  void set_allocated_seed(::distributed_point_functions::Block* seed);
  private:
  const ::distributed_point_functions::Block& _internal_seed() const;
  ::distributed_point_functions::Block* _internal_mutable_seed();
  public:
  void unsafe_arena_set_allocated_seed(
      ::distributed_point_functions::Block* seed);
  ::distributed_point_functions::Block* unsafe_arena_release_seed();

  // bool control_bit = 3;
  void clear_control_bit();
  bool control_bit() const;
  void set_control_bit(bool value);
  private:
  bool _internal_control_bit() const;
  void _internal_set_control_bit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.PartialEvaluation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::distributed_point_functions::Block* prefix_;
  ::distributed_point_functions::Block* seed_;
  bool control_bit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// -------------------------------------------------------------------

class EvaluationContext final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:distributed_point_functions.EvaluationContext) */ {
 public:
  inline EvaluationContext() : EvaluationContext(nullptr) {}
  ~EvaluationContext() override;
  explicit PROTOBUF_CONSTEXPR EvaluationContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EvaluationContext(const EvaluationContext& from);
  EvaluationContext(EvaluationContext&& from) noexcept
    : EvaluationContext() {
    *this = ::std::move(from);
  }

  inline EvaluationContext& operator=(const EvaluationContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline EvaluationContext& operator=(EvaluationContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const EvaluationContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const EvaluationContext* internal_default_instance() {
    return reinterpret_cast<const EvaluationContext*>(
               &_EvaluationContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EvaluationContext& a, EvaluationContext& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EvaluationContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EvaluationContext* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EvaluationContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EvaluationContext>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EvaluationContext& from);
  void MergeFrom(const EvaluationContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EvaluationContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "distributed_point_functions.EvaluationContext";
  }
  protected:
  explicit EvaluationContext(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 1,
    kPartialEvaluationsFieldNumber = 4,
    kKeyFieldNumber = 2,
    kPreviousHierarchyLevelFieldNumber = 3,
    kPartialEvaluationsLevelFieldNumber = 5,
  };
  // repeated .distributed_point_functions.DpfParameters parameters = 1;
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  ::distributed_point_functions::DpfParameters* mutable_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::DpfParameters >*
      mutable_parameters();
  private:
  const ::distributed_point_functions::DpfParameters& _internal_parameters(int index) const;
  ::distributed_point_functions::DpfParameters* _internal_add_parameters();
  public:
  const ::distributed_point_functions::DpfParameters& parameters(int index) const;
  ::distributed_point_functions::DpfParameters* add_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::DpfParameters >&
      parameters() const;

  // repeated .distributed_point_functions.PartialEvaluation partial_evaluations = 4;
  int partial_evaluations_size() const;
  private:
  int _internal_partial_evaluations_size() const;
  public:
  void clear_partial_evaluations();
  ::distributed_point_functions::PartialEvaluation* mutable_partial_evaluations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::PartialEvaluation >*
      mutable_partial_evaluations();
  private:
  const ::distributed_point_functions::PartialEvaluation& _internal_partial_evaluations(int index) const;
  ::distributed_point_functions::PartialEvaluation* _internal_add_partial_evaluations();
  public:
  const ::distributed_point_functions::PartialEvaluation& partial_evaluations(int index) const;
  ::distributed_point_functions::PartialEvaluation* add_partial_evaluations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::PartialEvaluation >&
      partial_evaluations() const;

  // .distributed_point_functions.DpfKey key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::distributed_point_functions::DpfKey& key() const;
  PROTOBUF_NODISCARD ::distributed_point_functions::DpfKey* release_key();
  ::distributed_point_functions::DpfKey* mutable_key();
  void set_allocated_key(::distributed_point_functions::DpfKey* key);
  private:
  const ::distributed_point_functions::DpfKey& _internal_key() const;
  ::distributed_point_functions::DpfKey* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::distributed_point_functions::DpfKey* key);
  ::distributed_point_functions::DpfKey* unsafe_arena_release_key();

  // int32 previous_hierarchy_level = 3;
  void clear_previous_hierarchy_level();
  int32_t previous_hierarchy_level() const;
  void set_previous_hierarchy_level(int32_t value);
  private:
  int32_t _internal_previous_hierarchy_level() const;
  void _internal_set_previous_hierarchy_level(int32_t value);
  public:

  // int32 partial_evaluations_level = 5;
  void clear_partial_evaluations_level();
  int32_t partial_evaluations_level() const;
  void set_partial_evaluations_level(int32_t value);
  private:
  int32_t _internal_partial_evaluations_level() const;
  void _internal_set_partial_evaluations_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:distributed_point_functions.EvaluationContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::DpfParameters > parameters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::PartialEvaluation > partial_evaluations_;
  ::distributed_point_functions::DpfKey* key_;
  int32_t previous_hierarchy_level_;
  int32_t partial_evaluations_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_distributed_5fpoint_5ffunction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ValueType_Integer

// int32 bitsize = 1;
inline void ValueType_Integer::clear_bitsize() {
  bitsize_ = 0;
}
inline int32_t ValueType_Integer::_internal_bitsize() const {
  return bitsize_;
}
inline int32_t ValueType_Integer::bitsize() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.Integer.bitsize)
  return _internal_bitsize();
}
inline void ValueType_Integer::_internal_set_bitsize(int32_t value) {
  
  bitsize_ = value;
}
inline void ValueType_Integer::set_bitsize(int32_t value) {
  _internal_set_bitsize(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.ValueType.Integer.bitsize)
}

// -------------------------------------------------------------------

// ValueType_Tuple

// repeated .distributed_point_functions.ValueType elements = 1;
inline int ValueType_Tuple::_internal_elements_size() const {
  return elements_.size();
}
inline int ValueType_Tuple::elements_size() const {
  return _internal_elements_size();
}
inline void ValueType_Tuple::clear_elements() {
  elements_.Clear();
}
inline ::distributed_point_functions::ValueType* ValueType_Tuple::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.Tuple.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::ValueType >*
ValueType_Tuple::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.ValueType.Tuple.elements)
  return &elements_;
}
inline const ::distributed_point_functions::ValueType& ValueType_Tuple::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::distributed_point_functions::ValueType& ValueType_Tuple::elements(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.Tuple.elements)
  return _internal_elements(index);
}
inline ::distributed_point_functions::ValueType* ValueType_Tuple::_internal_add_elements() {
  return elements_.Add();
}
inline ::distributed_point_functions::ValueType* ValueType_Tuple::add_elements() {
  ::distributed_point_functions::ValueType* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:distributed_point_functions.ValueType.Tuple.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::ValueType >&
ValueType_Tuple::elements() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.ValueType.Tuple.elements)
  return elements_;
}

// -------------------------------------------------------------------

// ValueType_IntModN

// .distributed_point_functions.ValueType.Integer base_integer = 1;
inline bool ValueType_IntModN::_internal_has_base_integer() const {
  return this != internal_default_instance() && base_integer_ != nullptr;
}
inline bool ValueType_IntModN::has_base_integer() const {
  return _internal_has_base_integer();
}
inline void ValueType_IntModN::clear_base_integer() {
  if (GetArenaForAllocation() == nullptr && base_integer_ != nullptr) {
    delete base_integer_;
  }
  base_integer_ = nullptr;
}
inline const ::distributed_point_functions::ValueType_Integer& ValueType_IntModN::_internal_base_integer() const {
  const ::distributed_point_functions::ValueType_Integer* p = base_integer_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::ValueType_Integer&>(
      ::distributed_point_functions::_ValueType_Integer_default_instance_);
}
inline const ::distributed_point_functions::ValueType_Integer& ValueType_IntModN::base_integer() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.IntModN.base_integer)
  return _internal_base_integer();
}
inline void ValueType_IntModN::unsafe_arena_set_allocated_base_integer(
    ::distributed_point_functions::ValueType_Integer* base_integer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_integer_);
  }
  base_integer_ = base_integer;
  if (base_integer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.ValueType.IntModN.base_integer)
}
inline ::distributed_point_functions::ValueType_Integer* ValueType_IntModN::release_base_integer() {
  
  ::distributed_point_functions::ValueType_Integer* temp = base_integer_;
  base_integer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::ValueType_Integer* ValueType_IntModN::unsafe_arena_release_base_integer() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.ValueType.IntModN.base_integer)
  
  ::distributed_point_functions::ValueType_Integer* temp = base_integer_;
  base_integer_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::ValueType_Integer* ValueType_IntModN::_internal_mutable_base_integer() {
  
  if (base_integer_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::ValueType_Integer>(GetArenaForAllocation());
    base_integer_ = p;
  }
  return base_integer_;
}
inline ::distributed_point_functions::ValueType_Integer* ValueType_IntModN::mutable_base_integer() {
  ::distributed_point_functions::ValueType_Integer* _msg = _internal_mutable_base_integer();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.IntModN.base_integer)
  return _msg;
}
inline void ValueType_IntModN::set_allocated_base_integer(::distributed_point_functions::ValueType_Integer* base_integer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_integer_;
  }
  if (base_integer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base_integer);
    if (message_arena != submessage_arena) {
      base_integer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_integer, submessage_arena);
    }
    
  } else {
    
  }
  base_integer_ = base_integer;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.ValueType.IntModN.base_integer)
}

// .distributed_point_functions.Value.Integer modulus = 2;
inline bool ValueType_IntModN::_internal_has_modulus() const {
  return this != internal_default_instance() && modulus_ != nullptr;
}
inline bool ValueType_IntModN::has_modulus() const {
  return _internal_has_modulus();
}
inline void ValueType_IntModN::clear_modulus() {
  if (GetArenaForAllocation() == nullptr && modulus_ != nullptr) {
    delete modulus_;
  }
  modulus_ = nullptr;
}
inline const ::distributed_point_functions::Value_Integer& ValueType_IntModN::_internal_modulus() const {
  const ::distributed_point_functions::Value_Integer* p = modulus_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::Value_Integer&>(
      ::distributed_point_functions::_Value_Integer_default_instance_);
}
inline const ::distributed_point_functions::Value_Integer& ValueType_IntModN::modulus() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.IntModN.modulus)
  return _internal_modulus();
}
inline void ValueType_IntModN::unsafe_arena_set_allocated_modulus(
    ::distributed_point_functions::Value_Integer* modulus) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modulus_);
  }
  modulus_ = modulus;
  if (modulus) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.ValueType.IntModN.modulus)
}
inline ::distributed_point_functions::Value_Integer* ValueType_IntModN::release_modulus() {
  
  ::distributed_point_functions::Value_Integer* temp = modulus_;
  modulus_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::Value_Integer* ValueType_IntModN::unsafe_arena_release_modulus() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.ValueType.IntModN.modulus)
  
  ::distributed_point_functions::Value_Integer* temp = modulus_;
  modulus_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::Value_Integer* ValueType_IntModN::_internal_mutable_modulus() {
  
  if (modulus_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::Value_Integer>(GetArenaForAllocation());
    modulus_ = p;
  }
  return modulus_;
}
inline ::distributed_point_functions::Value_Integer* ValueType_IntModN::mutable_modulus() {
  ::distributed_point_functions::Value_Integer* _msg = _internal_mutable_modulus();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.IntModN.modulus)
  return _msg;
}
inline void ValueType_IntModN::set_allocated_modulus(::distributed_point_functions::Value_Integer* modulus) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete modulus_;
  }
  if (modulus) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(modulus);
    if (message_arena != submessage_arena) {
      modulus = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modulus, submessage_arena);
    }
    
  } else {
    
  }
  modulus_ = modulus;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.ValueType.IntModN.modulus)
}

// -------------------------------------------------------------------

// ValueType

// .distributed_point_functions.ValueType.Integer integer = 1;
inline bool ValueType::_internal_has_integer() const {
  return type_case() == kInteger;
}
inline bool ValueType::has_integer() const {
  return _internal_has_integer();
}
inline void ValueType::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void ValueType::clear_integer() {
  if (_internal_has_integer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.integer_;
    }
    clear_has_type();
  }
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::release_integer() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.ValueType.integer)
  if (_internal_has_integer()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_Integer* temp = type_.integer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.integer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::ValueType_Integer& ValueType::_internal_integer() const {
  return _internal_has_integer()
      ? *type_.integer_
      : reinterpret_cast< ::distributed_point_functions::ValueType_Integer&>(::distributed_point_functions::_ValueType_Integer_default_instance_);
}
inline const ::distributed_point_functions::ValueType_Integer& ValueType::integer() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.integer)
  return _internal_integer();
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::unsafe_arena_release_integer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.ValueType.integer)
  if (_internal_has_integer()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_Integer* temp = type_.integer_;
    type_.integer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueType::unsafe_arena_set_allocated_integer(::distributed_point_functions::ValueType_Integer* integer) {
  clear_type();
  if (integer) {
    set_has_integer();
    type_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.ValueType.integer)
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::_internal_mutable_integer() {
  if (!_internal_has_integer()) {
    clear_type();
    set_has_integer();
    type_.integer_ = CreateMaybeMessage< ::distributed_point_functions::ValueType_Integer >(GetArenaForAllocation());
  }
  return type_.integer_;
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::mutable_integer() {
  ::distributed_point_functions::ValueType_Integer* _msg = _internal_mutable_integer();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.integer)
  return _msg;
}

// .distributed_point_functions.ValueType.Tuple tuple = 2;
inline bool ValueType::_internal_has_tuple() const {
  return type_case() == kTuple;
}
inline bool ValueType::has_tuple() const {
  return _internal_has_tuple();
}
inline void ValueType::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
inline void ValueType::clear_tuple() {
  if (_internal_has_tuple()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.tuple_;
    }
    clear_has_type();
  }
}
inline ::distributed_point_functions::ValueType_Tuple* ValueType::release_tuple() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.ValueType.tuple)
  if (_internal_has_tuple()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_Tuple* temp = type_.tuple_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::ValueType_Tuple& ValueType::_internal_tuple() const {
  return _internal_has_tuple()
      ? *type_.tuple_
      : reinterpret_cast< ::distributed_point_functions::ValueType_Tuple&>(::distributed_point_functions::_ValueType_Tuple_default_instance_);
}
inline const ::distributed_point_functions::ValueType_Tuple& ValueType::tuple() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.tuple)
  return _internal_tuple();
}
inline ::distributed_point_functions::ValueType_Tuple* ValueType::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.ValueType.tuple)
  if (_internal_has_tuple()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_Tuple* temp = type_.tuple_;
    type_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueType::unsafe_arena_set_allocated_tuple(::distributed_point_functions::ValueType_Tuple* tuple) {
  clear_type();
  if (tuple) {
    set_has_tuple();
    type_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.ValueType.tuple)
}
inline ::distributed_point_functions::ValueType_Tuple* ValueType::_internal_mutable_tuple() {
  if (!_internal_has_tuple()) {
    clear_type();
    set_has_tuple();
    type_.tuple_ = CreateMaybeMessage< ::distributed_point_functions::ValueType_Tuple >(GetArenaForAllocation());
  }
  return type_.tuple_;
}
inline ::distributed_point_functions::ValueType_Tuple* ValueType::mutable_tuple() {
  ::distributed_point_functions::ValueType_Tuple* _msg = _internal_mutable_tuple();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.tuple)
  return _msg;
}

// .distributed_point_functions.ValueType.IntModN int_mod_n = 3;
inline bool ValueType::_internal_has_int_mod_n() const {
  return type_case() == kIntModN;
}
inline bool ValueType::has_int_mod_n() const {
  return _internal_has_int_mod_n();
}
inline void ValueType::set_has_int_mod_n() {
  _oneof_case_[0] = kIntModN;
}
inline void ValueType::clear_int_mod_n() {
  if (_internal_has_int_mod_n()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.int_mod_n_;
    }
    clear_has_type();
  }
}
inline ::distributed_point_functions::ValueType_IntModN* ValueType::release_int_mod_n() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.ValueType.int_mod_n)
  if (_internal_has_int_mod_n()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_IntModN* temp = type_.int_mod_n_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.int_mod_n_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::ValueType_IntModN& ValueType::_internal_int_mod_n() const {
  return _internal_has_int_mod_n()
      ? *type_.int_mod_n_
      : reinterpret_cast< ::distributed_point_functions::ValueType_IntModN&>(::distributed_point_functions::_ValueType_IntModN_default_instance_);
}
inline const ::distributed_point_functions::ValueType_IntModN& ValueType::int_mod_n() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.int_mod_n)
  return _internal_int_mod_n();
}
inline ::distributed_point_functions::ValueType_IntModN* ValueType::unsafe_arena_release_int_mod_n() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.ValueType.int_mod_n)
  if (_internal_has_int_mod_n()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_IntModN* temp = type_.int_mod_n_;
    type_.int_mod_n_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueType::unsafe_arena_set_allocated_int_mod_n(::distributed_point_functions::ValueType_IntModN* int_mod_n) {
  clear_type();
  if (int_mod_n) {
    set_has_int_mod_n();
    type_.int_mod_n_ = int_mod_n;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.ValueType.int_mod_n)
}
inline ::distributed_point_functions::ValueType_IntModN* ValueType::_internal_mutable_int_mod_n() {
  if (!_internal_has_int_mod_n()) {
    clear_type();
    set_has_int_mod_n();
    type_.int_mod_n_ = CreateMaybeMessage< ::distributed_point_functions::ValueType_IntModN >(GetArenaForAllocation());
  }
  return type_.int_mod_n_;
}
inline ::distributed_point_functions::ValueType_IntModN* ValueType::mutable_int_mod_n() {
  ::distributed_point_functions::ValueType_IntModN* _msg = _internal_mutable_int_mod_n();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.int_mod_n)
  return _msg;
}

// .distributed_point_functions.ValueType.Integer xor_wrapper = 4;
inline bool ValueType::_internal_has_xor_wrapper() const {
  return type_case() == kXorWrapper;
}
inline bool ValueType::has_xor_wrapper() const {
  return _internal_has_xor_wrapper();
}
inline void ValueType::set_has_xor_wrapper() {
  _oneof_case_[0] = kXorWrapper;
}
inline void ValueType::clear_xor_wrapper() {
  if (_internal_has_xor_wrapper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.xor_wrapper_;
    }
    clear_has_type();
  }
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::release_xor_wrapper() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.ValueType.xor_wrapper)
  if (_internal_has_xor_wrapper()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_Integer* temp = type_.xor_wrapper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.xor_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::ValueType_Integer& ValueType::_internal_xor_wrapper() const {
  return _internal_has_xor_wrapper()
      ? *type_.xor_wrapper_
      : reinterpret_cast< ::distributed_point_functions::ValueType_Integer&>(::distributed_point_functions::_ValueType_Integer_default_instance_);
}
inline const ::distributed_point_functions::ValueType_Integer& ValueType::xor_wrapper() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.ValueType.xor_wrapper)
  return _internal_xor_wrapper();
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::unsafe_arena_release_xor_wrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.ValueType.xor_wrapper)
  if (_internal_has_xor_wrapper()) {
    clear_has_type();
    ::distributed_point_functions::ValueType_Integer* temp = type_.xor_wrapper_;
    type_.xor_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ValueType::unsafe_arena_set_allocated_xor_wrapper(::distributed_point_functions::ValueType_Integer* xor_wrapper) {
  clear_type();
  if (xor_wrapper) {
    set_has_xor_wrapper();
    type_.xor_wrapper_ = xor_wrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.ValueType.xor_wrapper)
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::_internal_mutable_xor_wrapper() {
  if (!_internal_has_xor_wrapper()) {
    clear_type();
    set_has_xor_wrapper();
    type_.xor_wrapper_ = CreateMaybeMessage< ::distributed_point_functions::ValueType_Integer >(GetArenaForAllocation());
  }
  return type_.xor_wrapper_;
}
inline ::distributed_point_functions::ValueType_Integer* ValueType::mutable_xor_wrapper() {
  ::distributed_point_functions::ValueType_Integer* _msg = _internal_mutable_xor_wrapper();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.ValueType.xor_wrapper)
  return _msg;
}

inline bool ValueType::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void ValueType::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ValueType::TypeCase ValueType::type_case() const {
  return ValueType::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Value_Integer

// uint64 value_uint64 = 1;
inline bool Value_Integer::_internal_has_value_uint64() const {
  return value_case() == kValueUint64;
}
inline bool Value_Integer::has_value_uint64() const {
  return _internal_has_value_uint64();
}
inline void Value_Integer::set_has_value_uint64() {
  _oneof_case_[0] = kValueUint64;
}
inline void Value_Integer::clear_value_uint64() {
  if (_internal_has_value_uint64()) {
    value_.value_uint64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t Value_Integer::_internal_value_uint64() const {
  if (_internal_has_value_uint64()) {
    return value_.value_uint64_;
  }
  return uint64_t{0u};
}
inline void Value_Integer::_internal_set_value_uint64(uint64_t value) {
  if (!_internal_has_value_uint64()) {
    clear_value();
    set_has_value_uint64();
  }
  value_.value_uint64_ = value;
}
inline uint64_t Value_Integer::value_uint64() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.Integer.value_uint64)
  return _internal_value_uint64();
}
inline void Value_Integer::set_value_uint64(uint64_t value) {
  _internal_set_value_uint64(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.Value.Integer.value_uint64)
}

// .distributed_point_functions.Block value_uint128 = 2;
inline bool Value_Integer::_internal_has_value_uint128() const {
  return value_case() == kValueUint128;
}
inline bool Value_Integer::has_value_uint128() const {
  return _internal_has_value_uint128();
}
inline void Value_Integer::set_has_value_uint128() {
  _oneof_case_[0] = kValueUint128;
}
inline void Value_Integer::clear_value_uint128() {
  if (_internal_has_value_uint128()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.value_uint128_;
    }
    clear_has_value();
  }
}
inline ::distributed_point_functions::Block* Value_Integer::release_value_uint128() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.Value.Integer.value_uint128)
  if (_internal_has_value_uint128()) {
    clear_has_value();
    ::distributed_point_functions::Block* temp = value_.value_uint128_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.value_uint128_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::Block& Value_Integer::_internal_value_uint128() const {
  return _internal_has_value_uint128()
      ? *value_.value_uint128_
      : reinterpret_cast< ::distributed_point_functions::Block&>(::distributed_point_functions::_Block_default_instance_);
}
inline const ::distributed_point_functions::Block& Value_Integer::value_uint128() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.Integer.value_uint128)
  return _internal_value_uint128();
}
inline ::distributed_point_functions::Block* Value_Integer::unsafe_arena_release_value_uint128() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.Value.Integer.value_uint128)
  if (_internal_has_value_uint128()) {
    clear_has_value();
    ::distributed_point_functions::Block* temp = value_.value_uint128_;
    value_.value_uint128_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value_Integer::unsafe_arena_set_allocated_value_uint128(::distributed_point_functions::Block* value_uint128) {
  clear_value();
  if (value_uint128) {
    set_has_value_uint128();
    value_.value_uint128_ = value_uint128;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.Value.Integer.value_uint128)
}
inline ::distributed_point_functions::Block* Value_Integer::_internal_mutable_value_uint128() {
  if (!_internal_has_value_uint128()) {
    clear_value();
    set_has_value_uint128();
    value_.value_uint128_ = CreateMaybeMessage< ::distributed_point_functions::Block >(GetArenaForAllocation());
  }
  return value_.value_uint128_;
}
inline ::distributed_point_functions::Block* Value_Integer::mutable_value_uint128() {
  ::distributed_point_functions::Block* _msg = _internal_mutable_value_uint128();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.Value.Integer.value_uint128)
  return _msg;
}

inline bool Value_Integer::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Value_Integer::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Value_Integer::ValueCase Value_Integer::value_case() const {
  return Value_Integer::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Value_Tuple

// repeated .distributed_point_functions.Value elements = 1;
inline int Value_Tuple::_internal_elements_size() const {
  return elements_.size();
}
inline int Value_Tuple::elements_size() const {
  return _internal_elements_size();
}
inline void Value_Tuple::clear_elements() {
  elements_.Clear();
}
inline ::distributed_point_functions::Value* Value_Tuple::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.Value.Tuple.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >*
Value_Tuple::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.Value.Tuple.elements)
  return &elements_;
}
inline const ::distributed_point_functions::Value& Value_Tuple::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::distributed_point_functions::Value& Value_Tuple::elements(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.Tuple.elements)
  return _internal_elements(index);
}
inline ::distributed_point_functions::Value* Value_Tuple::_internal_add_elements() {
  return elements_.Add();
}
inline ::distributed_point_functions::Value* Value_Tuple::add_elements() {
  ::distributed_point_functions::Value* _add = _internal_add_elements();
  // @@protoc_insertion_point(field_add:distributed_point_functions.Value.Tuple.elements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >&
Value_Tuple::elements() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.Value.Tuple.elements)
  return elements_;
}

// -------------------------------------------------------------------

// Value

// .distributed_point_functions.Value.Integer integer = 1;
inline bool Value::_internal_has_integer() const {
  return value_case() == kInteger;
}
inline bool Value::has_integer() const {
  return _internal_has_integer();
}
inline void Value::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void Value::clear_integer() {
  if (_internal_has_integer()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.integer_;
    }
    clear_has_value();
  }
}
inline ::distributed_point_functions::Value_Integer* Value::release_integer() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.Value.integer)
  if (_internal_has_integer()) {
    clear_has_value();
    ::distributed_point_functions::Value_Integer* temp = value_.integer_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.integer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::Value_Integer& Value::_internal_integer() const {
  return _internal_has_integer()
      ? *value_.integer_
      : reinterpret_cast< ::distributed_point_functions::Value_Integer&>(::distributed_point_functions::_Value_Integer_default_instance_);
}
inline const ::distributed_point_functions::Value_Integer& Value::integer() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.integer)
  return _internal_integer();
}
inline ::distributed_point_functions::Value_Integer* Value::unsafe_arena_release_integer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.Value.integer)
  if (_internal_has_integer()) {
    clear_has_value();
    ::distributed_point_functions::Value_Integer* temp = value_.integer_;
    value_.integer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_integer(::distributed_point_functions::Value_Integer* integer) {
  clear_value();
  if (integer) {
    set_has_integer();
    value_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.Value.integer)
}
inline ::distributed_point_functions::Value_Integer* Value::_internal_mutable_integer() {
  if (!_internal_has_integer()) {
    clear_value();
    set_has_integer();
    value_.integer_ = CreateMaybeMessage< ::distributed_point_functions::Value_Integer >(GetArenaForAllocation());
  }
  return value_.integer_;
}
inline ::distributed_point_functions::Value_Integer* Value::mutable_integer() {
  ::distributed_point_functions::Value_Integer* _msg = _internal_mutable_integer();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.Value.integer)
  return _msg;
}

// .distributed_point_functions.Value.Tuple tuple = 2;
inline bool Value::_internal_has_tuple() const {
  return value_case() == kTuple;
}
inline bool Value::has_tuple() const {
  return _internal_has_tuple();
}
inline void Value::set_has_tuple() {
  _oneof_case_[0] = kTuple;
}
inline void Value::clear_tuple() {
  if (_internal_has_tuple()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.tuple_;
    }
    clear_has_value();
  }
}
inline ::distributed_point_functions::Value_Tuple* Value::release_tuple() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.Value.tuple)
  if (_internal_has_tuple()) {
    clear_has_value();
    ::distributed_point_functions::Value_Tuple* temp = value_.tuple_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::Value_Tuple& Value::_internal_tuple() const {
  return _internal_has_tuple()
      ? *value_.tuple_
      : reinterpret_cast< ::distributed_point_functions::Value_Tuple&>(::distributed_point_functions::_Value_Tuple_default_instance_);
}
inline const ::distributed_point_functions::Value_Tuple& Value::tuple() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.tuple)
  return _internal_tuple();
}
inline ::distributed_point_functions::Value_Tuple* Value::unsafe_arena_release_tuple() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.Value.tuple)
  if (_internal_has_tuple()) {
    clear_has_value();
    ::distributed_point_functions::Value_Tuple* temp = value_.tuple_;
    value_.tuple_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_tuple(::distributed_point_functions::Value_Tuple* tuple) {
  clear_value();
  if (tuple) {
    set_has_tuple();
    value_.tuple_ = tuple;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.Value.tuple)
}
inline ::distributed_point_functions::Value_Tuple* Value::_internal_mutable_tuple() {
  if (!_internal_has_tuple()) {
    clear_value();
    set_has_tuple();
    value_.tuple_ = CreateMaybeMessage< ::distributed_point_functions::Value_Tuple >(GetArenaForAllocation());
  }
  return value_.tuple_;
}
inline ::distributed_point_functions::Value_Tuple* Value::mutable_tuple() {
  ::distributed_point_functions::Value_Tuple* _msg = _internal_mutable_tuple();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.Value.tuple)
  return _msg;
}

// .distributed_point_functions.Value.Integer int_mod_n = 3;
inline bool Value::_internal_has_int_mod_n() const {
  return value_case() == kIntModN;
}
inline bool Value::has_int_mod_n() const {
  return _internal_has_int_mod_n();
}
inline void Value::set_has_int_mod_n() {
  _oneof_case_[0] = kIntModN;
}
inline void Value::clear_int_mod_n() {
  if (_internal_has_int_mod_n()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.int_mod_n_;
    }
    clear_has_value();
  }
}
inline ::distributed_point_functions::Value_Integer* Value::release_int_mod_n() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.Value.int_mod_n)
  if (_internal_has_int_mod_n()) {
    clear_has_value();
    ::distributed_point_functions::Value_Integer* temp = value_.int_mod_n_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.int_mod_n_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::Value_Integer& Value::_internal_int_mod_n() const {
  return _internal_has_int_mod_n()
      ? *value_.int_mod_n_
      : reinterpret_cast< ::distributed_point_functions::Value_Integer&>(::distributed_point_functions::_Value_Integer_default_instance_);
}
inline const ::distributed_point_functions::Value_Integer& Value::int_mod_n() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.int_mod_n)
  return _internal_int_mod_n();
}
inline ::distributed_point_functions::Value_Integer* Value::unsafe_arena_release_int_mod_n() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.Value.int_mod_n)
  if (_internal_has_int_mod_n()) {
    clear_has_value();
    ::distributed_point_functions::Value_Integer* temp = value_.int_mod_n_;
    value_.int_mod_n_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_int_mod_n(::distributed_point_functions::Value_Integer* int_mod_n) {
  clear_value();
  if (int_mod_n) {
    set_has_int_mod_n();
    value_.int_mod_n_ = int_mod_n;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.Value.int_mod_n)
}
inline ::distributed_point_functions::Value_Integer* Value::_internal_mutable_int_mod_n() {
  if (!_internal_has_int_mod_n()) {
    clear_value();
    set_has_int_mod_n();
    value_.int_mod_n_ = CreateMaybeMessage< ::distributed_point_functions::Value_Integer >(GetArenaForAllocation());
  }
  return value_.int_mod_n_;
}
inline ::distributed_point_functions::Value_Integer* Value::mutable_int_mod_n() {
  ::distributed_point_functions::Value_Integer* _msg = _internal_mutable_int_mod_n();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.Value.int_mod_n)
  return _msg;
}

// .distributed_point_functions.Value.Integer xor_wrapper = 4;
inline bool Value::_internal_has_xor_wrapper() const {
  return value_case() == kXorWrapper;
}
inline bool Value::has_xor_wrapper() const {
  return _internal_has_xor_wrapper();
}
inline void Value::set_has_xor_wrapper() {
  _oneof_case_[0] = kXorWrapper;
}
inline void Value::clear_xor_wrapper() {
  if (_internal_has_xor_wrapper()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.xor_wrapper_;
    }
    clear_has_value();
  }
}
inline ::distributed_point_functions::Value_Integer* Value::release_xor_wrapper() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.Value.xor_wrapper)
  if (_internal_has_xor_wrapper()) {
    clear_has_value();
    ::distributed_point_functions::Value_Integer* temp = value_.xor_wrapper_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    value_.xor_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::distributed_point_functions::Value_Integer& Value::_internal_xor_wrapper() const {
  return _internal_has_xor_wrapper()
      ? *value_.xor_wrapper_
      : reinterpret_cast< ::distributed_point_functions::Value_Integer&>(::distributed_point_functions::_Value_Integer_default_instance_);
}
inline const ::distributed_point_functions::Value_Integer& Value::xor_wrapper() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Value.xor_wrapper)
  return _internal_xor_wrapper();
}
inline ::distributed_point_functions::Value_Integer* Value::unsafe_arena_release_xor_wrapper() {
  // @@protoc_insertion_point(field_unsafe_arena_release:distributed_point_functions.Value.xor_wrapper)
  if (_internal_has_xor_wrapper()) {
    clear_has_value();
    ::distributed_point_functions::Value_Integer* temp = value_.xor_wrapper_;
    value_.xor_wrapper_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Value::unsafe_arena_set_allocated_xor_wrapper(::distributed_point_functions::Value_Integer* xor_wrapper) {
  clear_value();
  if (xor_wrapper) {
    set_has_xor_wrapper();
    value_.xor_wrapper_ = xor_wrapper;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.Value.xor_wrapper)
}
inline ::distributed_point_functions::Value_Integer* Value::_internal_mutable_xor_wrapper() {
  if (!_internal_has_xor_wrapper()) {
    clear_value();
    set_has_xor_wrapper();
    value_.xor_wrapper_ = CreateMaybeMessage< ::distributed_point_functions::Value_Integer >(GetArenaForAllocation());
  }
  return value_.xor_wrapper_;
}
inline ::distributed_point_functions::Value_Integer* Value::mutable_xor_wrapper() {
  ::distributed_point_functions::Value_Integer* _msg = _internal_mutable_xor_wrapper();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.Value.xor_wrapper)
  return _msg;
}

inline bool Value::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Value::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Value::ValueCase Value::value_case() const {
  return Value::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DpfParameters

// int32 log_domain_size = 1;
inline void DpfParameters::clear_log_domain_size() {
  log_domain_size_ = 0;
}
inline int32_t DpfParameters::_internal_log_domain_size() const {
  return log_domain_size_;
}
inline int32_t DpfParameters::log_domain_size() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfParameters.log_domain_size)
  return _internal_log_domain_size();
}
inline void DpfParameters::_internal_set_log_domain_size(int32_t value) {
  
  log_domain_size_ = value;
}
inline void DpfParameters::set_log_domain_size(int32_t value) {
  _internal_set_log_domain_size(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.DpfParameters.log_domain_size)
}

// .distributed_point_functions.ValueType value_type = 3;
inline bool DpfParameters::_internal_has_value_type() const {
  return this != internal_default_instance() && value_type_ != nullptr;
}
inline bool DpfParameters::has_value_type() const {
  return _internal_has_value_type();
}
inline void DpfParameters::clear_value_type() {
  if (GetArenaForAllocation() == nullptr && value_type_ != nullptr) {
    delete value_type_;
  }
  value_type_ = nullptr;
}
inline const ::distributed_point_functions::ValueType& DpfParameters::_internal_value_type() const {
  const ::distributed_point_functions::ValueType* p = value_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::ValueType&>(
      ::distributed_point_functions::_ValueType_default_instance_);
}
inline const ::distributed_point_functions::ValueType& DpfParameters::value_type() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfParameters.value_type)
  return _internal_value_type();
}
inline void DpfParameters::unsafe_arena_set_allocated_value_type(
    ::distributed_point_functions::ValueType* value_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_type_);
  }
  value_type_ = value_type;
  if (value_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.DpfParameters.value_type)
}
inline ::distributed_point_functions::ValueType* DpfParameters::release_value_type() {
  
  ::distributed_point_functions::ValueType* temp = value_type_;
  value_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::ValueType* DpfParameters::unsafe_arena_release_value_type() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.DpfParameters.value_type)
  
  ::distributed_point_functions::ValueType* temp = value_type_;
  value_type_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::ValueType* DpfParameters::_internal_mutable_value_type() {
  
  if (value_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::ValueType>(GetArenaForAllocation());
    value_type_ = p;
  }
  return value_type_;
}
inline ::distributed_point_functions::ValueType* DpfParameters::mutable_value_type() {
  ::distributed_point_functions::ValueType* _msg = _internal_mutable_value_type();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.DpfParameters.value_type)
  return _msg;
}
inline void DpfParameters::set_allocated_value_type(::distributed_point_functions::ValueType* value_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete value_type_;
  }
  if (value_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(value_type);
    if (message_arena != submessage_arena) {
      value_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value_type, submessage_arena);
    }
    
  } else {
    
  }
  value_type_ = value_type;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.DpfParameters.value_type)
}

// double security_parameter = 4;
inline void DpfParameters::clear_security_parameter() {
  security_parameter_ = 0;
}
inline double DpfParameters::_internal_security_parameter() const {
  return security_parameter_;
}
inline double DpfParameters::security_parameter() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfParameters.security_parameter)
  return _internal_security_parameter();
}
inline void DpfParameters::_internal_set_security_parameter(double value) {
  
  security_parameter_ = value;
}
inline void DpfParameters::set_security_parameter(double value) {
  _internal_set_security_parameter(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.DpfParameters.security_parameter)
}

// -------------------------------------------------------------------

// Block

// uint64 high = 1;
inline void Block::clear_high() {
  high_ = uint64_t{0u};
}
inline uint64_t Block::_internal_high() const {
  return high_;
}
inline uint64_t Block::high() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Block.high)
  return _internal_high();
}
inline void Block::_internal_set_high(uint64_t value) {
  
  high_ = value;
}
inline void Block::set_high(uint64_t value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.Block.high)
}

// uint64 low = 2;
inline void Block::clear_low() {
  low_ = uint64_t{0u};
}
inline uint64_t Block::_internal_low() const {
  return low_;
}
inline uint64_t Block::low() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.Block.low)
  return _internal_low();
}
inline void Block::_internal_set_low(uint64_t value) {
  
  low_ = value;
}
inline void Block::set_low(uint64_t value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.Block.low)
}

// -------------------------------------------------------------------

// CorrectionWord

// .distributed_point_functions.Block seed = 1;
inline bool CorrectionWord::_internal_has_seed() const {
  return this != internal_default_instance() && seed_ != nullptr;
}
inline bool CorrectionWord::has_seed() const {
  return _internal_has_seed();
}
inline void CorrectionWord::clear_seed() {
  if (GetArenaForAllocation() == nullptr && seed_ != nullptr) {
    delete seed_;
  }
  seed_ = nullptr;
}
inline const ::distributed_point_functions::Block& CorrectionWord::_internal_seed() const {
  const ::distributed_point_functions::Block* p = seed_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::Block&>(
      ::distributed_point_functions::_Block_default_instance_);
}
inline const ::distributed_point_functions::Block& CorrectionWord::seed() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.CorrectionWord.seed)
  return _internal_seed();
}
inline void CorrectionWord::unsafe_arena_set_allocated_seed(
    ::distributed_point_functions::Block* seed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seed_);
  }
  seed_ = seed;
  if (seed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.CorrectionWord.seed)
}
inline ::distributed_point_functions::Block* CorrectionWord::release_seed() {
  
  ::distributed_point_functions::Block* temp = seed_;
  seed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::Block* CorrectionWord::unsafe_arena_release_seed() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.CorrectionWord.seed)
  
  ::distributed_point_functions::Block* temp = seed_;
  seed_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::Block* CorrectionWord::_internal_mutable_seed() {
  
  if (seed_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::Block>(GetArenaForAllocation());
    seed_ = p;
  }
  return seed_;
}
inline ::distributed_point_functions::Block* CorrectionWord::mutable_seed() {
  ::distributed_point_functions::Block* _msg = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.CorrectionWord.seed)
  return _msg;
}
inline void CorrectionWord::set_allocated_seed(::distributed_point_functions::Block* seed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete seed_;
  }
  if (seed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed);
    if (message_arena != submessage_arena) {
      seed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed, submessage_arena);
    }
    
  } else {
    
  }
  seed_ = seed;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.CorrectionWord.seed)
}

// bool control_left = 2;
inline void CorrectionWord::clear_control_left() {
  control_left_ = false;
}
inline bool CorrectionWord::_internal_control_left() const {
  return control_left_;
}
inline bool CorrectionWord::control_left() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.CorrectionWord.control_left)
  return _internal_control_left();
}
inline void CorrectionWord::_internal_set_control_left(bool value) {
  
  control_left_ = value;
}
inline void CorrectionWord::set_control_left(bool value) {
  _internal_set_control_left(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.CorrectionWord.control_left)
}

// bool control_right = 3;
inline void CorrectionWord::clear_control_right() {
  control_right_ = false;
}
inline bool CorrectionWord::_internal_control_right() const {
  return control_right_;
}
inline bool CorrectionWord::control_right() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.CorrectionWord.control_right)
  return _internal_control_right();
}
inline void CorrectionWord::_internal_set_control_right(bool value) {
  
  control_right_ = value;
}
inline void CorrectionWord::set_control_right(bool value) {
  _internal_set_control_right(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.CorrectionWord.control_right)
}

// repeated .distributed_point_functions.Value value_correction = 5;
inline int CorrectionWord::_internal_value_correction_size() const {
  return value_correction_.size();
}
inline int CorrectionWord::value_correction_size() const {
  return _internal_value_correction_size();
}
inline void CorrectionWord::clear_value_correction() {
  value_correction_.Clear();
}
inline ::distributed_point_functions::Value* CorrectionWord::mutable_value_correction(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.CorrectionWord.value_correction)
  return value_correction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >*
CorrectionWord::mutable_value_correction() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.CorrectionWord.value_correction)
  return &value_correction_;
}
inline const ::distributed_point_functions::Value& CorrectionWord::_internal_value_correction(int index) const {
  return value_correction_.Get(index);
}
inline const ::distributed_point_functions::Value& CorrectionWord::value_correction(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.CorrectionWord.value_correction)
  return _internal_value_correction(index);
}
inline ::distributed_point_functions::Value* CorrectionWord::_internal_add_value_correction() {
  return value_correction_.Add();
}
inline ::distributed_point_functions::Value* CorrectionWord::add_value_correction() {
  ::distributed_point_functions::Value* _add = _internal_add_value_correction();
  // @@protoc_insertion_point(field_add:distributed_point_functions.CorrectionWord.value_correction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >&
CorrectionWord::value_correction() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.CorrectionWord.value_correction)
  return value_correction_;
}

// -------------------------------------------------------------------

// DpfKey

// .distributed_point_functions.Block seed = 1;
inline bool DpfKey::_internal_has_seed() const {
  return this != internal_default_instance() && seed_ != nullptr;
}
inline bool DpfKey::has_seed() const {
  return _internal_has_seed();
}
inline void DpfKey::clear_seed() {
  if (GetArenaForAllocation() == nullptr && seed_ != nullptr) {
    delete seed_;
  }
  seed_ = nullptr;
}
inline const ::distributed_point_functions::Block& DpfKey::_internal_seed() const {
  const ::distributed_point_functions::Block* p = seed_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::Block&>(
      ::distributed_point_functions::_Block_default_instance_);
}
inline const ::distributed_point_functions::Block& DpfKey::seed() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfKey.seed)
  return _internal_seed();
}
inline void DpfKey::unsafe_arena_set_allocated_seed(
    ::distributed_point_functions::Block* seed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seed_);
  }
  seed_ = seed;
  if (seed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.DpfKey.seed)
}
inline ::distributed_point_functions::Block* DpfKey::release_seed() {
  
  ::distributed_point_functions::Block* temp = seed_;
  seed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::Block* DpfKey::unsafe_arena_release_seed() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.DpfKey.seed)
  
  ::distributed_point_functions::Block* temp = seed_;
  seed_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::Block* DpfKey::_internal_mutable_seed() {
  
  if (seed_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::Block>(GetArenaForAllocation());
    seed_ = p;
  }
  return seed_;
}
inline ::distributed_point_functions::Block* DpfKey::mutable_seed() {
  ::distributed_point_functions::Block* _msg = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.DpfKey.seed)
  return _msg;
}
inline void DpfKey::set_allocated_seed(::distributed_point_functions::Block* seed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete seed_;
  }
  if (seed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed);
    if (message_arena != submessage_arena) {
      seed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed, submessage_arena);
    }
    
  } else {
    
  }
  seed_ = seed;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.DpfKey.seed)
}

// repeated .distributed_point_functions.CorrectionWord correction_words = 2;
inline int DpfKey::_internal_correction_words_size() const {
  return correction_words_.size();
}
inline int DpfKey::correction_words_size() const {
  return _internal_correction_words_size();
}
inline void DpfKey::clear_correction_words() {
  correction_words_.Clear();
}
inline ::distributed_point_functions::CorrectionWord* DpfKey::mutable_correction_words(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.DpfKey.correction_words)
  return correction_words_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::CorrectionWord >*
DpfKey::mutable_correction_words() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.DpfKey.correction_words)
  return &correction_words_;
}
inline const ::distributed_point_functions::CorrectionWord& DpfKey::_internal_correction_words(int index) const {
  return correction_words_.Get(index);
}
inline const ::distributed_point_functions::CorrectionWord& DpfKey::correction_words(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfKey.correction_words)
  return _internal_correction_words(index);
}
inline ::distributed_point_functions::CorrectionWord* DpfKey::_internal_add_correction_words() {
  return correction_words_.Add();
}
inline ::distributed_point_functions::CorrectionWord* DpfKey::add_correction_words() {
  ::distributed_point_functions::CorrectionWord* _add = _internal_add_correction_words();
  // @@protoc_insertion_point(field_add:distributed_point_functions.DpfKey.correction_words)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::CorrectionWord >&
DpfKey::correction_words() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.DpfKey.correction_words)
  return correction_words_;
}

// int32 party = 3;
inline void DpfKey::clear_party() {
  party_ = 0;
}
inline int32_t DpfKey::_internal_party() const {
  return party_;
}
inline int32_t DpfKey::party() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfKey.party)
  return _internal_party();
}
inline void DpfKey::_internal_set_party(int32_t value) {
  
  party_ = value;
}
inline void DpfKey::set_party(int32_t value) {
  _internal_set_party(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.DpfKey.party)
}

// repeated .distributed_point_functions.Value last_level_value_correction = 5;
inline int DpfKey::_internal_last_level_value_correction_size() const {
  return last_level_value_correction_.size();
}
inline int DpfKey::last_level_value_correction_size() const {
  return _internal_last_level_value_correction_size();
}
inline void DpfKey::clear_last_level_value_correction() {
  last_level_value_correction_.Clear();
}
inline ::distributed_point_functions::Value* DpfKey::mutable_last_level_value_correction(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.DpfKey.last_level_value_correction)
  return last_level_value_correction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >*
DpfKey::mutable_last_level_value_correction() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.DpfKey.last_level_value_correction)
  return &last_level_value_correction_;
}
inline const ::distributed_point_functions::Value& DpfKey::_internal_last_level_value_correction(int index) const {
  return last_level_value_correction_.Get(index);
}
inline const ::distributed_point_functions::Value& DpfKey::last_level_value_correction(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.DpfKey.last_level_value_correction)
  return _internal_last_level_value_correction(index);
}
inline ::distributed_point_functions::Value* DpfKey::_internal_add_last_level_value_correction() {
  return last_level_value_correction_.Add();
}
inline ::distributed_point_functions::Value* DpfKey::add_last_level_value_correction() {
  ::distributed_point_functions::Value* _add = _internal_add_last_level_value_correction();
  // @@protoc_insertion_point(field_add:distributed_point_functions.DpfKey.last_level_value_correction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::Value >&
DpfKey::last_level_value_correction() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.DpfKey.last_level_value_correction)
  return last_level_value_correction_;
}

// -------------------------------------------------------------------

// PartialEvaluation

// .distributed_point_functions.Block prefix = 1;
inline bool PartialEvaluation::_internal_has_prefix() const {
  return this != internal_default_instance() && prefix_ != nullptr;
}
inline bool PartialEvaluation::has_prefix() const {
  return _internal_has_prefix();
}
inline void PartialEvaluation::clear_prefix() {
  if (GetArenaForAllocation() == nullptr && prefix_ != nullptr) {
    delete prefix_;
  }
  prefix_ = nullptr;
}
inline const ::distributed_point_functions::Block& PartialEvaluation::_internal_prefix() const {
  const ::distributed_point_functions::Block* p = prefix_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::Block&>(
      ::distributed_point_functions::_Block_default_instance_);
}
inline const ::distributed_point_functions::Block& PartialEvaluation::prefix() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.PartialEvaluation.prefix)
  return _internal_prefix();
}
inline void PartialEvaluation::unsafe_arena_set_allocated_prefix(
    ::distributed_point_functions::Block* prefix) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prefix_);
  }
  prefix_ = prefix;
  if (prefix) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.PartialEvaluation.prefix)
}
inline ::distributed_point_functions::Block* PartialEvaluation::release_prefix() {
  
  ::distributed_point_functions::Block* temp = prefix_;
  prefix_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::Block* PartialEvaluation::unsafe_arena_release_prefix() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.PartialEvaluation.prefix)
  
  ::distributed_point_functions::Block* temp = prefix_;
  prefix_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::Block* PartialEvaluation::_internal_mutable_prefix() {
  
  if (prefix_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::Block>(GetArenaForAllocation());
    prefix_ = p;
  }
  return prefix_;
}
inline ::distributed_point_functions::Block* PartialEvaluation::mutable_prefix() {
  ::distributed_point_functions::Block* _msg = _internal_mutable_prefix();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.PartialEvaluation.prefix)
  return _msg;
}
inline void PartialEvaluation::set_allocated_prefix(::distributed_point_functions::Block* prefix) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete prefix_;
  }
  if (prefix) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prefix);
    if (message_arena != submessage_arena) {
      prefix = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prefix, submessage_arena);
    }
    
  } else {
    
  }
  prefix_ = prefix;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.PartialEvaluation.prefix)
}

// .distributed_point_functions.Block seed = 2;
inline bool PartialEvaluation::_internal_has_seed() const {
  return this != internal_default_instance() && seed_ != nullptr;
}
inline bool PartialEvaluation::has_seed() const {
  return _internal_has_seed();
}
inline void PartialEvaluation::clear_seed() {
  if (GetArenaForAllocation() == nullptr && seed_ != nullptr) {
    delete seed_;
  }
  seed_ = nullptr;
}
inline const ::distributed_point_functions::Block& PartialEvaluation::_internal_seed() const {
  const ::distributed_point_functions::Block* p = seed_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::Block&>(
      ::distributed_point_functions::_Block_default_instance_);
}
inline const ::distributed_point_functions::Block& PartialEvaluation::seed() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.PartialEvaluation.seed)
  return _internal_seed();
}
inline void PartialEvaluation::unsafe_arena_set_allocated_seed(
    ::distributed_point_functions::Block* seed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(seed_);
  }
  seed_ = seed;
  if (seed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.PartialEvaluation.seed)
}
inline ::distributed_point_functions::Block* PartialEvaluation::release_seed() {
  
  ::distributed_point_functions::Block* temp = seed_;
  seed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::Block* PartialEvaluation::unsafe_arena_release_seed() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.PartialEvaluation.seed)
  
  ::distributed_point_functions::Block* temp = seed_;
  seed_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::Block* PartialEvaluation::_internal_mutable_seed() {
  
  if (seed_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::Block>(GetArenaForAllocation());
    seed_ = p;
  }
  return seed_;
}
inline ::distributed_point_functions::Block* PartialEvaluation::mutable_seed() {
  ::distributed_point_functions::Block* _msg = _internal_mutable_seed();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.PartialEvaluation.seed)
  return _msg;
}
inline void PartialEvaluation::set_allocated_seed(::distributed_point_functions::Block* seed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete seed_;
  }
  if (seed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(seed);
    if (message_arena != submessage_arena) {
      seed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, seed, submessage_arena);
    }
    
  } else {
    
  }
  seed_ = seed;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.PartialEvaluation.seed)
}

// bool control_bit = 3;
inline void PartialEvaluation::clear_control_bit() {
  control_bit_ = false;
}
inline bool PartialEvaluation::_internal_control_bit() const {
  return control_bit_;
}
inline bool PartialEvaluation::control_bit() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.PartialEvaluation.control_bit)
  return _internal_control_bit();
}
inline void PartialEvaluation::_internal_set_control_bit(bool value) {
  
  control_bit_ = value;
}
inline void PartialEvaluation::set_control_bit(bool value) {
  _internal_set_control_bit(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.PartialEvaluation.control_bit)
}

// -------------------------------------------------------------------

// EvaluationContext

// repeated .distributed_point_functions.DpfParameters parameters = 1;
inline int EvaluationContext::_internal_parameters_size() const {
  return parameters_.size();
}
inline int EvaluationContext::parameters_size() const {
  return _internal_parameters_size();
}
inline void EvaluationContext::clear_parameters() {
  parameters_.Clear();
}
inline ::distributed_point_functions::DpfParameters* EvaluationContext::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.EvaluationContext.parameters)
  return parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::DpfParameters >*
EvaluationContext::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.EvaluationContext.parameters)
  return &parameters_;
}
inline const ::distributed_point_functions::DpfParameters& EvaluationContext::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline const ::distributed_point_functions::DpfParameters& EvaluationContext::parameters(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.EvaluationContext.parameters)
  return _internal_parameters(index);
}
inline ::distributed_point_functions::DpfParameters* EvaluationContext::_internal_add_parameters() {
  return parameters_.Add();
}
inline ::distributed_point_functions::DpfParameters* EvaluationContext::add_parameters() {
  ::distributed_point_functions::DpfParameters* _add = _internal_add_parameters();
  // @@protoc_insertion_point(field_add:distributed_point_functions.EvaluationContext.parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::DpfParameters >&
EvaluationContext::parameters() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.EvaluationContext.parameters)
  return parameters_;
}

// .distributed_point_functions.DpfKey key = 2;
inline bool EvaluationContext::_internal_has_key() const {
  return this != internal_default_instance() && key_ != nullptr;
}
inline bool EvaluationContext::has_key() const {
  return _internal_has_key();
}
inline void EvaluationContext::clear_key() {
  if (GetArenaForAllocation() == nullptr && key_ != nullptr) {
    delete key_;
  }
  key_ = nullptr;
}
inline const ::distributed_point_functions::DpfKey& EvaluationContext::_internal_key() const {
  const ::distributed_point_functions::DpfKey* p = key_;
  return p != nullptr ? *p : reinterpret_cast<const ::distributed_point_functions::DpfKey&>(
      ::distributed_point_functions::_DpfKey_default_instance_);
}
inline const ::distributed_point_functions::DpfKey& EvaluationContext::key() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.EvaluationContext.key)
  return _internal_key();
}
inline void EvaluationContext::unsafe_arena_set_allocated_key(
    ::distributed_point_functions::DpfKey* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key_);
  }
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:distributed_point_functions.EvaluationContext.key)
}
inline ::distributed_point_functions::DpfKey* EvaluationContext::release_key() {
  
  ::distributed_point_functions::DpfKey* temp = key_;
  key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::distributed_point_functions::DpfKey* EvaluationContext::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:distributed_point_functions.EvaluationContext.key)
  
  ::distributed_point_functions::DpfKey* temp = key_;
  key_ = nullptr;
  return temp;
}
inline ::distributed_point_functions::DpfKey* EvaluationContext::_internal_mutable_key() {
  
  if (key_ == nullptr) {
    auto* p = CreateMaybeMessage<::distributed_point_functions::DpfKey>(GetArenaForAllocation());
    key_ = p;
  }
  return key_;
}
inline ::distributed_point_functions::DpfKey* EvaluationContext::mutable_key() {
  ::distributed_point_functions::DpfKey* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.EvaluationContext.key)
  return _msg;
}
inline void EvaluationContext::set_allocated_key(::distributed_point_functions::DpfKey* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete key_;
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(key);
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    
  } else {
    
  }
  key_ = key;
  // @@protoc_insertion_point(field_set_allocated:distributed_point_functions.EvaluationContext.key)
}

// int32 previous_hierarchy_level = 3;
inline void EvaluationContext::clear_previous_hierarchy_level() {
  previous_hierarchy_level_ = 0;
}
inline int32_t EvaluationContext::_internal_previous_hierarchy_level() const {
  return previous_hierarchy_level_;
}
inline int32_t EvaluationContext::previous_hierarchy_level() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.EvaluationContext.previous_hierarchy_level)
  return _internal_previous_hierarchy_level();
}
inline void EvaluationContext::_internal_set_previous_hierarchy_level(int32_t value) {
  
  previous_hierarchy_level_ = value;
}
inline void EvaluationContext::set_previous_hierarchy_level(int32_t value) {
  _internal_set_previous_hierarchy_level(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.EvaluationContext.previous_hierarchy_level)
}

// repeated .distributed_point_functions.PartialEvaluation partial_evaluations = 4;
inline int EvaluationContext::_internal_partial_evaluations_size() const {
  return partial_evaluations_.size();
}
inline int EvaluationContext::partial_evaluations_size() const {
  return _internal_partial_evaluations_size();
}
inline void EvaluationContext::clear_partial_evaluations() {
  partial_evaluations_.Clear();
}
inline ::distributed_point_functions::PartialEvaluation* EvaluationContext::mutable_partial_evaluations(int index) {
  // @@protoc_insertion_point(field_mutable:distributed_point_functions.EvaluationContext.partial_evaluations)
  return partial_evaluations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::PartialEvaluation >*
EvaluationContext::mutable_partial_evaluations() {
  // @@protoc_insertion_point(field_mutable_list:distributed_point_functions.EvaluationContext.partial_evaluations)
  return &partial_evaluations_;
}
inline const ::distributed_point_functions::PartialEvaluation& EvaluationContext::_internal_partial_evaluations(int index) const {
  return partial_evaluations_.Get(index);
}
inline const ::distributed_point_functions::PartialEvaluation& EvaluationContext::partial_evaluations(int index) const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.EvaluationContext.partial_evaluations)
  return _internal_partial_evaluations(index);
}
inline ::distributed_point_functions::PartialEvaluation* EvaluationContext::_internal_add_partial_evaluations() {
  return partial_evaluations_.Add();
}
inline ::distributed_point_functions::PartialEvaluation* EvaluationContext::add_partial_evaluations() {
  ::distributed_point_functions::PartialEvaluation* _add = _internal_add_partial_evaluations();
  // @@protoc_insertion_point(field_add:distributed_point_functions.EvaluationContext.partial_evaluations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::distributed_point_functions::PartialEvaluation >&
EvaluationContext::partial_evaluations() const {
  // @@protoc_insertion_point(field_list:distributed_point_functions.EvaluationContext.partial_evaluations)
  return partial_evaluations_;
}

// int32 partial_evaluations_level = 5;
inline void EvaluationContext::clear_partial_evaluations_level() {
  partial_evaluations_level_ = 0;
}
inline int32_t EvaluationContext::_internal_partial_evaluations_level() const {
  return partial_evaluations_level_;
}
inline int32_t EvaluationContext::partial_evaluations_level() const {
  // @@protoc_insertion_point(field_get:distributed_point_functions.EvaluationContext.partial_evaluations_level)
  return _internal_partial_evaluations_level();
}
inline void EvaluationContext::_internal_set_partial_evaluations_level(int32_t value) {
  
  partial_evaluations_level_ = value;
}
inline void EvaluationContext::set_partial_evaluations_level(int32_t value) {
  _internal_set_partial_evaluations_level(value);
  // @@protoc_insertion_point(field_set:distributed_point_functions.EvaluationContext.partial_evaluations_level)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace distributed_point_functions

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_distributed_5fpoint_5ffunction_2eproto
