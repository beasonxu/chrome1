// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: authority_keys.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_authority_5fkeys_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_authority_5fkeys_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_authority_5fkeys_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_authority_5fkeys_2eproto {
  static const uint32_t offsets[];
};
namespace cast {
namespace channel {
class AuthorityKeys;
struct AuthorityKeysDefaultTypeInternal;
extern AuthorityKeysDefaultTypeInternal _AuthorityKeys_default_instance_;
class AuthorityKeys_Key;
struct AuthorityKeys_KeyDefaultTypeInternal;
extern AuthorityKeys_KeyDefaultTypeInternal _AuthorityKeys_Key_default_instance_;
}  // namespace channel
}  // namespace cast
PROTOBUF_NAMESPACE_OPEN
template<> ::cast::channel::AuthorityKeys* Arena::CreateMaybeMessage<::cast::channel::AuthorityKeys>(Arena*);
template<> ::cast::channel::AuthorityKeys_Key* Arena::CreateMaybeMessage<::cast::channel::AuthorityKeys_Key>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cast {
namespace channel {

// ===================================================================

class AuthorityKeys_Key final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cast.channel.AuthorityKeys.Key) */ {
 public:
  inline AuthorityKeys_Key() : AuthorityKeys_Key(nullptr) {}
  ~AuthorityKeys_Key() override;
  explicit PROTOBUF_CONSTEXPR AuthorityKeys_Key(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthorityKeys_Key(const AuthorityKeys_Key& from);
  AuthorityKeys_Key(AuthorityKeys_Key&& from) noexcept
    : AuthorityKeys_Key() {
    *this = ::std::move(from);
  }

  inline AuthorityKeys_Key& operator=(const AuthorityKeys_Key& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorityKeys_Key& operator=(AuthorityKeys_Key&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthorityKeys_Key& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthorityKeys_Key* internal_default_instance() {
    return reinterpret_cast<const AuthorityKeys_Key*>(
               &_AuthorityKeys_Key_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AuthorityKeys_Key& a, AuthorityKeys_Key& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AuthorityKeys_Key* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorityKeys_Key* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthorityKeys_Key* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthorityKeys_Key>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthorityKeys_Key& from);
  void MergeFrom(const AuthorityKeys_Key& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthorityKeys_Key* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cast.channel.AuthorityKeys.Key";
  }
  protected:
  explicit AuthorityKeys_Key(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFingerprintFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // required bytes fingerprint = 1;
  bool has_fingerprint() const;
  private:
  bool _internal_has_fingerprint() const;
  public:
  void clear_fingerprint();
  const std::string& fingerprint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_fingerprint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_fingerprint();
  PROTOBUF_NODISCARD std::string* release_fingerprint();
  void set_allocated_fingerprint(std::string* fingerprint);
  private:
  const std::string& _internal_fingerprint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_fingerprint(const std::string& value);
  std::string* _internal_mutable_fingerprint();
  public:

  // required bytes public_key = 2;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:cast.channel.AuthorityKeys.Key)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fingerprint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  friend struct ::TableStruct_authority_5fkeys_2eproto;
};
// -------------------------------------------------------------------

class AuthorityKeys final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:cast.channel.AuthorityKeys) */ {
 public:
  inline AuthorityKeys() : AuthorityKeys(nullptr) {}
  ~AuthorityKeys() override;
  explicit PROTOBUF_CONSTEXPR AuthorityKeys(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AuthorityKeys(const AuthorityKeys& from);
  AuthorityKeys(AuthorityKeys&& from) noexcept
    : AuthorityKeys() {
    *this = ::std::move(from);
  }

  inline AuthorityKeys& operator=(const AuthorityKeys& from) {
    CopyFrom(from);
    return *this;
  }
  inline AuthorityKeys& operator=(AuthorityKeys&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AuthorityKeys& default_instance() {
    return *internal_default_instance();
  }
  static inline const AuthorityKeys* internal_default_instance() {
    return reinterpret_cast<const AuthorityKeys*>(
               &_AuthorityKeys_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AuthorityKeys& a, AuthorityKeys& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AuthorityKeys* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AuthorityKeys* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AuthorityKeys* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AuthorityKeys>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AuthorityKeys& from);
  void MergeFrom(const AuthorityKeys& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthorityKeys* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cast.channel.AuthorityKeys";
  }
  protected:
  explicit AuthorityKeys(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AuthorityKeys_Key Key;

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 1,
  };
  // repeated .cast.channel.AuthorityKeys.Key keys = 1;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::cast::channel::AuthorityKeys_Key* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::channel::AuthorityKeys_Key >*
      mutable_keys();
  private:
  const ::cast::channel::AuthorityKeys_Key& _internal_keys(int index) const;
  ::cast::channel::AuthorityKeys_Key* _internal_add_keys();
  public:
  const ::cast::channel::AuthorityKeys_Key& keys(int index) const;
  ::cast::channel::AuthorityKeys_Key* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::channel::AuthorityKeys_Key >&
      keys() const;

  // @@protoc_insertion_point(class_scope:cast.channel.AuthorityKeys)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::channel::AuthorityKeys_Key > keys_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_authority_5fkeys_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AuthorityKeys_Key

// required bytes fingerprint = 1;
inline bool AuthorityKeys_Key::_internal_has_fingerprint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AuthorityKeys_Key::has_fingerprint() const {
  return _internal_has_fingerprint();
}
inline void AuthorityKeys_Key::clear_fingerprint() {
  fingerprint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AuthorityKeys_Key::fingerprint() const {
  // @@protoc_insertion_point(field_get:cast.channel.AuthorityKeys.Key.fingerprint)
  return _internal_fingerprint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthorityKeys_Key::set_fingerprint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 fingerprint_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cast.channel.AuthorityKeys.Key.fingerprint)
}
inline std::string* AuthorityKeys_Key::mutable_fingerprint() {
  std::string* _s = _internal_mutable_fingerprint();
  // @@protoc_insertion_point(field_mutable:cast.channel.AuthorityKeys.Key.fingerprint)
  return _s;
}
inline const std::string& AuthorityKeys_Key::_internal_fingerprint() const {
  return fingerprint_.Get();
}
inline void AuthorityKeys_Key::_internal_set_fingerprint(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  fingerprint_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorityKeys_Key::_internal_mutable_fingerprint() {
  _has_bits_[0] |= 0x00000001u;
  return fingerprint_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthorityKeys_Key::release_fingerprint() {
  // @@protoc_insertion_point(field_release:cast.channel.AuthorityKeys.Key.fingerprint)
  if (!_internal_has_fingerprint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = fingerprint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fingerprint_.IsDefault()) {
    fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthorityKeys_Key::set_allocated_fingerprint(std::string* fingerprint) {
  if (fingerprint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  fingerprint_.SetAllocated(fingerprint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (fingerprint_.IsDefault()) {
    fingerprint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cast.channel.AuthorityKeys.Key.fingerprint)
}

// required bytes public_key = 2;
inline bool AuthorityKeys_Key::_internal_has_public_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AuthorityKeys_Key::has_public_key() const {
  return _internal_has_public_key();
}
inline void AuthorityKeys_Key::clear_public_key() {
  public_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AuthorityKeys_Key::public_key() const {
  // @@protoc_insertion_point(field_get:cast.channel.AuthorityKeys.Key.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AuthorityKeys_Key::set_public_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cast.channel.AuthorityKeys.Key.public_key)
}
inline std::string* AuthorityKeys_Key::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:cast.channel.AuthorityKeys.Key.public_key)
  return _s;
}
inline const std::string& AuthorityKeys_Key::_internal_public_key() const {
  return public_key_.Get();
}
inline void AuthorityKeys_Key::_internal_set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AuthorityKeys_Key::_internal_mutable_public_key() {
  _has_bits_[0] |= 0x00000002u;
  return public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* AuthorityKeys_Key::release_public_key() {
  // @@protoc_insertion_point(field_release:cast.channel.AuthorityKeys.Key.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AuthorityKeys_Key::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cast.channel.AuthorityKeys.Key.public_key)
}

// -------------------------------------------------------------------

// AuthorityKeys

// repeated .cast.channel.AuthorityKeys.Key keys = 1;
inline int AuthorityKeys::_internal_keys_size() const {
  return keys_.size();
}
inline int AuthorityKeys::keys_size() const {
  return _internal_keys_size();
}
inline void AuthorityKeys::clear_keys() {
  keys_.Clear();
}
inline ::cast::channel::AuthorityKeys_Key* AuthorityKeys::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:cast.channel.AuthorityKeys.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::channel::AuthorityKeys_Key >*
AuthorityKeys::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:cast.channel.AuthorityKeys.keys)
  return &keys_;
}
inline const ::cast::channel::AuthorityKeys_Key& AuthorityKeys::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::cast::channel::AuthorityKeys_Key& AuthorityKeys::keys(int index) const {
  // @@protoc_insertion_point(field_get:cast.channel.AuthorityKeys.keys)
  return _internal_keys(index);
}
inline ::cast::channel::AuthorityKeys_Key* AuthorityKeys::_internal_add_keys() {
  return keys_.Add();
}
inline ::cast::channel::AuthorityKeys_Key* AuthorityKeys::add_keys() {
  ::cast::channel::AuthorityKeys_Key* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:cast.channel.AuthorityKeys.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::cast::channel::AuthorityKeys_Key >&
AuthorityKeys::keys() const {
  // @@protoc_insertion_point(field_list:cast.channel.AuthorityKeys.keys)
  return keys_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace channel
}  // namespace cast

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_authority_5fkeys_2eproto
