// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/testing/regression_test_data/regression_test_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "private_membership_rlwe.pb.h"
// @@protoc_insertion_point(includes)
#include "third_party/private_membership/base/private_membership_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto PRIVATE_MEMBERSHIP_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct PRIVATE_MEMBERSHIP_EXPORT TableStruct_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto {
static const uint32_t offsets[];
};
namespace private_membership {
namespace rlwe {
class PrivateMembershipRlweClientRegressionTestData;
struct PrivateMembershipRlweClientRegressionTestDataDefaultTypeInternal;
PRIVATE_MEMBERSHIP_EXPORT extern PrivateMembershipRlweClientRegressionTestDataDefaultTypeInternal _PrivateMembershipRlweClientRegressionTestData_default_instance_;
class PrivateMembershipRlweClientRegressionTestData_TestCase;
struct PrivateMembershipRlweClientRegressionTestData_TestCaseDefaultTypeInternal;
PRIVATE_MEMBERSHIP_EXPORT extern PrivateMembershipRlweClientRegressionTestData_TestCaseDefaultTypeInternal _PrivateMembershipRlweClientRegressionTestData_TestCase_default_instance_;
}  // namespace rlwe
}  // namespace private_membership
PROTOBUF_NAMESPACE_OPEN
template<> PRIVATE_MEMBERSHIP_EXPORT ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData>(Arena*);
template<> PRIVATE_MEMBERSHIP_EXPORT ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* Arena::CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace private_membership {
namespace rlwe {

// ===================================================================

class PRIVATE_MEMBERSHIP_EXPORT PrivateMembershipRlweClientRegressionTestData_TestCase final :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase) */ {
public:
inline PrivateMembershipRlweClientRegressionTestData_TestCase() : PrivateMembershipRlweClientRegressionTestData_TestCase(nullptr) {}
~PrivateMembershipRlweClientRegressionTestData_TestCase() override;
explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweClientRegressionTestData_TestCase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

PrivateMembershipRlweClientRegressionTestData_TestCase(const PrivateMembershipRlweClientRegressionTestData_TestCase& from);
PrivateMembershipRlweClientRegressionTestData_TestCase(PrivateMembershipRlweClientRegressionTestData_TestCase&& from) noexcept
: PrivateMembershipRlweClientRegressionTestData_TestCase() {
*this = ::std::move(from);
}

inline PrivateMembershipRlweClientRegressionTestData_TestCase& operator=(const PrivateMembershipRlweClientRegressionTestData_TestCase& from) {
CopyFrom(from);
return *this;
}
inline PrivateMembershipRlweClientRegressionTestData_TestCase& operator=(PrivateMembershipRlweClientRegressionTestData_TestCase&& from) noexcept {
if (this == &from) return *this;
if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

static const PrivateMembershipRlweClientRegressionTestData_TestCase& default_instance() {
return *internal_default_instance();
}
static inline const PrivateMembershipRlweClientRegressionTestData_TestCase* internal_default_instance() {
return reinterpret_cast<const PrivateMembershipRlweClientRegressionTestData_TestCase*>(
&_PrivateMembershipRlweClientRegressionTestData_TestCase_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(PrivateMembershipRlweClientRegressionTestData_TestCase& a, PrivateMembershipRlweClientRegressionTestData_TestCase& b) {
a.Swap(&b);
}
PROTOBUF_NOINLINE void Swap(PrivateMembershipRlweClientRegressionTestData_TestCase* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() != nullptr &&
GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PrivateMembershipRlweClientRegressionTestData_TestCase* other) {
if (other == this) return;
GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PrivateMembershipRlweClientRegressionTestData_TestCase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
return CreateMaybeMessage<PrivateMembershipRlweClientRegressionTestData_TestCase>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
void CopyFrom(const PrivateMembershipRlweClientRegressionTestData_TestCase& from);
void MergeFrom(const PrivateMembershipRlweClientRegressionTestData_TestCase& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
uint8_t* _InternalSerialize(
uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PrivateMembershipRlweClientRegressionTestData_TestCase* other);

private:
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase";
}
protected:
explicit PrivateMembershipRlweClientRegressionTestData_TestCase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
bool is_message_owned = false);
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kEcCipherKeyFieldNumber = 3,
kSeedFieldNumber = 4,
kPlaintextIdFieldNumber = 2,
kExpectedOprfRequestFieldNumber = 5,
kOprfResponseFieldNumber = 6,
kExpectedQueryRequestFieldNumber = 7,
kQueryResponseFieldNumber = 8,
kUseCaseFieldNumber = 1,
kIsPositiveMembershipExpectedFieldNumber = 9,
};
// bytes ec_cipher_key = 3;
void clear_ec_cipher_key();
const std::string& ec_cipher_key() const;
template <typename ArgT0 = const std::string&, typename... ArgT>
void set_ec_cipher_key(ArgT0&& arg0, ArgT... args);
std::string* mutable_ec_cipher_key();
PROTOBUF_NODISCARD std::string* release_ec_cipher_key();
void set_allocated_ec_cipher_key(std::string* ec_cipher_key);
private:
const std::string& _internal_ec_cipher_key() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_ec_cipher_key(const std::string& value);
std::string* _internal_mutable_ec_cipher_key();
public:

// bytes seed = 4;
void clear_seed();
const std::string& seed() const;
template <typename ArgT0 = const std::string&, typename... ArgT>
void set_seed(ArgT0&& arg0, ArgT... args);
std::string* mutable_seed();
PROTOBUF_NODISCARD std::string* release_seed();
void set_allocated_seed(std::string* seed);
private:
const std::string& _internal_seed() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_seed(const std::string& value);
std::string* _internal_mutable_seed();
public:

// .private_membership.rlwe.RlwePlaintextId plaintext_id = 2;
bool has_plaintext_id() const;
private:
bool _internal_has_plaintext_id() const;
public:
void clear_plaintext_id();
const ::private_membership::rlwe::RlwePlaintextId& plaintext_id() const;
PROTOBUF_NODISCARD ::private_membership::rlwe::RlwePlaintextId* release_plaintext_id();
::private_membership::rlwe::RlwePlaintextId* mutable_plaintext_id();
void set_allocated_plaintext_id(::private_membership::rlwe::RlwePlaintextId* plaintext_id);
private:
const ::private_membership::rlwe::RlwePlaintextId& _internal_plaintext_id() const;
::private_membership::rlwe::RlwePlaintextId* _internal_mutable_plaintext_id();
public:
void unsafe_arena_set_allocated_plaintext_id(
::private_membership::rlwe::RlwePlaintextId* plaintext_id);
::private_membership::rlwe::RlwePlaintextId* unsafe_arena_release_plaintext_id();

// .private_membership.rlwe.PrivateMembershipRlweOprfRequest expected_oprf_request = 5;
bool has_expected_oprf_request() const;
private:
bool _internal_has_expected_oprf_request() const;
public:
void clear_expected_oprf_request();
const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest& expected_oprf_request() const;
PROTOBUF_NODISCARD ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* release_expected_oprf_request();
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* mutable_expected_oprf_request();
void set_allocated_expected_oprf_request(::private_membership::rlwe::PrivateMembershipRlweOprfRequest* expected_oprf_request);
private:
const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest& _internal_expected_oprf_request() const;
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* _internal_mutable_expected_oprf_request();
public:
void unsafe_arena_set_allocated_expected_oprf_request(
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* expected_oprf_request);
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* unsafe_arena_release_expected_oprf_request();

// .private_membership.rlwe.PrivateMembershipRlweOprfResponse oprf_response = 6;
bool has_oprf_response() const;
private:
bool _internal_has_oprf_response() const;
public:
void clear_oprf_response();
const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse& oprf_response() const;
PROTOBUF_NODISCARD ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* release_oprf_response();
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* mutable_oprf_response();
void set_allocated_oprf_response(::private_membership::rlwe::PrivateMembershipRlweOprfResponse* oprf_response);
private:
const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse& _internal_oprf_response() const;
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* _internal_mutable_oprf_response();
public:
void unsafe_arena_set_allocated_oprf_response(
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* oprf_response);
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* unsafe_arena_release_oprf_response();

// .private_membership.rlwe.PrivateMembershipRlweQueryRequest expected_query_request = 7;
bool has_expected_query_request() const;
private:
bool _internal_has_expected_query_request() const;
public:
void clear_expected_query_request();
const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest& expected_query_request() const;
PROTOBUF_NODISCARD ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* release_expected_query_request();
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* mutable_expected_query_request();
void set_allocated_expected_query_request(::private_membership::rlwe::PrivateMembershipRlweQueryRequest* expected_query_request);
private:
const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest& _internal_expected_query_request() const;
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* _internal_mutable_expected_query_request();
public:
void unsafe_arena_set_allocated_expected_query_request(
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* expected_query_request);
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* unsafe_arena_release_expected_query_request();

// .private_membership.rlwe.PrivateMembershipRlweQueryResponse query_response = 8;
bool has_query_response() const;
private:
bool _internal_has_query_response() const;
public:
void clear_query_response();
const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse& query_response() const;
PROTOBUF_NODISCARD ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* release_query_response();
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* mutable_query_response();
void set_allocated_query_response(::private_membership::rlwe::PrivateMembershipRlweQueryResponse* query_response);
private:
const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse& _internal_query_response() const;
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* _internal_mutable_query_response();
public:
void unsafe_arena_set_allocated_query_response(
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* query_response);
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* unsafe_arena_release_query_response();

// .private_membership.rlwe.RlweUseCase use_case = 1;
void clear_use_case();
::private_membership::rlwe::RlweUseCase use_case() const;
void set_use_case(::private_membership::rlwe::RlweUseCase value);
private:
::private_membership::rlwe::RlweUseCase _internal_use_case() const;
void _internal_set_use_case(::private_membership::rlwe::RlweUseCase value);
public:

// bool is_positive_membership_expected = 9;
void clear_is_positive_membership_expected();
bool is_positive_membership_expected() const;
void set_is_positive_membership_expected(bool value);
private:
bool _internal_is_positive_membership_expected() const;
void _internal_set_is_positive_membership_expected(bool value);
public:

// @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase)
private:
class _Internal;

template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
typedef void InternalArenaConstructable_;
typedef void DestructorSkippable_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ec_cipher_key_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr seed_;
::private_membership::rlwe::RlwePlaintextId* plaintext_id_;
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* expected_oprf_request_;
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* oprf_response_;
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* expected_query_request_;
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* query_response_;
int use_case_;
bool is_positive_membership_expected_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
friend struct ::TableStruct_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto;
};
// -------------------------------------------------------------------

class PRIVATE_MEMBERSHIP_EXPORT PrivateMembershipRlweClientRegressionTestData final :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData) */ {
public:
inline PrivateMembershipRlweClientRegressionTestData() : PrivateMembershipRlweClientRegressionTestData(nullptr) {}
~PrivateMembershipRlweClientRegressionTestData() override;
explicit PROTOBUF_CONSTEXPR PrivateMembershipRlweClientRegressionTestData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

PrivateMembershipRlweClientRegressionTestData(const PrivateMembershipRlweClientRegressionTestData& from);
PrivateMembershipRlweClientRegressionTestData(PrivateMembershipRlweClientRegressionTestData&& from) noexcept
: PrivateMembershipRlweClientRegressionTestData() {
*this = ::std::move(from);
}

inline PrivateMembershipRlweClientRegressionTestData& operator=(const PrivateMembershipRlweClientRegressionTestData& from) {
CopyFrom(from);
return *this;
}
inline PrivateMembershipRlweClientRegressionTestData& operator=(PrivateMembershipRlweClientRegressionTestData&& from) noexcept {
if (this == &from) return *this;
if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

static const PrivateMembershipRlweClientRegressionTestData& default_instance() {
return *internal_default_instance();
}
static inline const PrivateMembershipRlweClientRegressionTestData* internal_default_instance() {
return reinterpret_cast<const PrivateMembershipRlweClientRegressionTestData*>(
&_PrivateMembershipRlweClientRegressionTestData_default_instance_);
}
static constexpr int kIndexInFileMessages =
1;

friend void swap(PrivateMembershipRlweClientRegressionTestData& a, PrivateMembershipRlweClientRegressionTestData& b) {
a.Swap(&b);
}
PROTOBUF_NOINLINE void Swap(PrivateMembershipRlweClientRegressionTestData* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() != nullptr &&
GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PrivateMembershipRlweClientRegressionTestData* other) {
if (other == this) return;
GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PrivateMembershipRlweClientRegressionTestData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
return CreateMaybeMessage<PrivateMembershipRlweClientRegressionTestData>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
void CopyFrom(const PrivateMembershipRlweClientRegressionTestData& from);
void MergeFrom(const PrivateMembershipRlweClientRegressionTestData& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
uint8_t* _InternalSerialize(
uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PrivateMembershipRlweClientRegressionTestData* other);

private:
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData";
}
protected:
explicit PrivateMembershipRlweClientRegressionTestData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
bool is_message_owned = false);
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

typedef PrivateMembershipRlweClientRegressionTestData_TestCase TestCase;

// accessors -------------------------------------------------------

enum : int {
kTestCasesFieldNumber = 1,
};
// repeated .private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase test_cases = 1;
int test_cases_size() const;
private:
int _internal_test_cases_size() const;
public:
void clear_test_cases();
::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* mutable_test_cases(int index);
::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase >*
mutable_test_cases();
private:
const ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase& _internal_test_cases(int index) const;
::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* _internal_add_test_cases();
public:
const ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase& test_cases(int index) const;
::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* add_test_cases();
const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase >&
test_cases() const;

// @@protoc_insertion_point(class_scope:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData)
private:
class _Internal;

template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
typedef void InternalArenaConstructable_;
typedef void DestructorSkippable_;
::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase > test_cases_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
friend struct ::TableStruct_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PrivateMembershipRlweClientRegressionTestData_TestCase

// .private_membership.rlwe.RlweUseCase use_case = 1;
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_use_case() {
use_case_ = 0;
}
inline ::private_membership::rlwe::RlweUseCase PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_use_case() const {
return static_cast< ::private_membership::rlwe::RlweUseCase >(use_case_);
}
inline ::private_membership::rlwe::RlweUseCase PrivateMembershipRlweClientRegressionTestData_TestCase::use_case() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.use_case)
return _internal_use_case();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_set_use_case(::private_membership::rlwe::RlweUseCase value) {

use_case_ = value;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_use_case(::private_membership::rlwe::RlweUseCase value) {
_internal_set_use_case(value);
// @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.use_case)
}

// .private_membership.rlwe.RlwePlaintextId plaintext_id = 2;
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_has_plaintext_id() const {
return this != internal_default_instance() && plaintext_id_ != nullptr;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::has_plaintext_id() const {
return _internal_has_plaintext_id();
}
inline const ::private_membership::rlwe::RlwePlaintextId& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_plaintext_id() const {
const ::private_membership::rlwe::RlwePlaintextId* p = plaintext_id_;
return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::RlwePlaintextId&>(
::private_membership::rlwe::_RlwePlaintextId_default_instance_);
}
inline const ::private_membership::rlwe::RlwePlaintextId& PrivateMembershipRlweClientRegressionTestData_TestCase::plaintext_id() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.plaintext_id)
return _internal_plaintext_id();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_set_allocated_plaintext_id(
::private_membership::rlwe::RlwePlaintextId* plaintext_id) {
if (GetArenaForAllocation() == nullptr) {
delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plaintext_id_);
}
plaintext_id_ = plaintext_id;
if (plaintext_id) {

} else {

}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.plaintext_id)
}
inline ::private_membership::rlwe::RlwePlaintextId* PrivateMembershipRlweClientRegressionTestData_TestCase::release_plaintext_id() {

::private_membership::rlwe::RlwePlaintextId* temp = plaintext_id_;
plaintext_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArenaForAllocation() != nullptr) {
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return temp;
}
inline ::private_membership::rlwe::RlwePlaintextId* PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_release_plaintext_id() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.plaintext_id)

::private_membership::rlwe::RlwePlaintextId* temp = plaintext_id_;
plaintext_id_ = nullptr;
return temp;
}
inline ::private_membership::rlwe::RlwePlaintextId* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_plaintext_id() {

if (plaintext_id_ == nullptr) {
auto* p = CreateMaybeMessage<::private_membership::rlwe::RlwePlaintextId>(GetArenaForAllocation());
plaintext_id_ = p;
}
return plaintext_id_;
}
inline ::private_membership::rlwe::RlwePlaintextId* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_plaintext_id() {
::private_membership::rlwe::RlwePlaintextId* _msg = _internal_mutable_plaintext_id();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.plaintext_id)
return _msg;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_plaintext_id(::private_membership::rlwe::RlwePlaintextId* plaintext_id) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
if (message_arena == nullptr) {
delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(plaintext_id_);
}
if (plaintext_id) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(plaintext_id));
if (message_arena != submessage_arena) {
plaintext_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, plaintext_id, submessage_arena);
}

} else {

}
plaintext_id_ = plaintext_id;
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.plaintext_id)
}

// bytes ec_cipher_key = 3;
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_ec_cipher_key() {
ec_cipher_key_.ClearToEmpty();
}
inline const std::string& PrivateMembershipRlweClientRegressionTestData_TestCase::ec_cipher_key() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.ec_cipher_key)
return _internal_ec_cipher_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMembershipRlweClientRegressionTestData_TestCase::set_ec_cipher_key(ArgT0&& arg0, ArgT... args) {

ec_cipher_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
// @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.ec_cipher_key)
}
inline std::string* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_ec_cipher_key() {
std::string* _s = _internal_mutable_ec_cipher_key();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.ec_cipher_key)
return _s;
}
inline const std::string& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_ec_cipher_key() const {
return ec_cipher_key_.Get();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_set_ec_cipher_key(const std::string& value) {

ec_cipher_key_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_ec_cipher_key() {

return ec_cipher_key_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweClientRegressionTestData_TestCase::release_ec_cipher_key() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.ec_cipher_key)
return ec_cipher_key_.Release();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_ec_cipher_key(std::string* ec_cipher_key) {
if (ec_cipher_key != nullptr) {

} else {

}
ec_cipher_key_.SetAllocated(ec_cipher_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (ec_cipher_key_.IsDefault()) {
ec_cipher_key_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.ec_cipher_key)
}

// bytes seed = 4;
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_seed() {
seed_.ClearToEmpty();
}
inline const std::string& PrivateMembershipRlweClientRegressionTestData_TestCase::seed() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.seed)
return _internal_seed();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PrivateMembershipRlweClientRegressionTestData_TestCase::set_seed(ArgT0&& arg0, ArgT... args) {

seed_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
// @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.seed)
}
inline std::string* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_seed() {
std::string* _s = _internal_mutable_seed();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.seed)
return _s;
}
inline const std::string& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_seed() const {
return seed_.Get();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_set_seed(const std::string& value) {

seed_.Set(value, GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_seed() {

return seed_.Mutable(GetArenaForAllocation());
}
inline std::string* PrivateMembershipRlweClientRegressionTestData_TestCase::release_seed() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.seed)
return seed_.Release();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_seed(std::string* seed) {
if (seed != nullptr) {

} else {

}
seed_.SetAllocated(seed, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (seed_.IsDefault()) {
seed_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.seed)
}

// .private_membership.rlwe.PrivateMembershipRlweOprfRequest expected_oprf_request = 5;
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_has_expected_oprf_request() const {
return this != internal_default_instance() && expected_oprf_request_ != nullptr;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::has_expected_oprf_request() const {
return _internal_has_expected_oprf_request();
}
inline const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_expected_oprf_request() const {
const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* p = expected_oprf_request_;
return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest&>(
::private_membership::rlwe::_PrivateMembershipRlweOprfRequest_default_instance_);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweOprfRequest& PrivateMembershipRlweClientRegressionTestData_TestCase::expected_oprf_request() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_oprf_request)
return _internal_expected_oprf_request();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_set_allocated_expected_oprf_request(
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* expected_oprf_request) {
if (GetArenaForAllocation() == nullptr) {
delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_oprf_request_);
}
expected_oprf_request_ = expected_oprf_request;
if (expected_oprf_request) {

} else {

}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_oprf_request)
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::release_expected_oprf_request() {

::private_membership::rlwe::PrivateMembershipRlweOprfRequest* temp = expected_oprf_request_;
expected_oprf_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArenaForAllocation() != nullptr) {
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_release_expected_oprf_request() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_oprf_request)

::private_membership::rlwe::PrivateMembershipRlweOprfRequest* temp = expected_oprf_request_;
expected_oprf_request_ = nullptr;
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_expected_oprf_request() {

if (expected_oprf_request_ == nullptr) {
auto* p = CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweOprfRequest>(GetArenaForAllocation());
expected_oprf_request_ = p;
}
return expected_oprf_request_;
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_expected_oprf_request() {
::private_membership::rlwe::PrivateMembershipRlweOprfRequest* _msg = _internal_mutable_expected_oprf_request();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_oprf_request)
return _msg;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_expected_oprf_request(::private_membership::rlwe::PrivateMembershipRlweOprfRequest* expected_oprf_request) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
if (message_arena == nullptr) {
delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_oprf_request_);
}
if (expected_oprf_request) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_oprf_request));
if (message_arena != submessage_arena) {
expected_oprf_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, expected_oprf_request, submessage_arena);
}

} else {

}
expected_oprf_request_ = expected_oprf_request;
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_oprf_request)
}

// .private_membership.rlwe.PrivateMembershipRlweOprfResponse oprf_response = 6;
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_has_oprf_response() const {
return this != internal_default_instance() && oprf_response_ != nullptr;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::has_oprf_response() const {
return _internal_has_oprf_response();
}
inline const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_oprf_response() const {
const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* p = oprf_response_;
return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse&>(
::private_membership::rlwe::_PrivateMembershipRlweOprfResponse_default_instance_);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweOprfResponse& PrivateMembershipRlweClientRegressionTestData_TestCase::oprf_response() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.oprf_response)
return _internal_oprf_response();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_set_allocated_oprf_response(
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* oprf_response) {
if (GetArenaForAllocation() == nullptr) {
delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oprf_response_);
}
oprf_response_ = oprf_response;
if (oprf_response) {

} else {

}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.oprf_response)
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::release_oprf_response() {

::private_membership::rlwe::PrivateMembershipRlweOprfResponse* temp = oprf_response_;
oprf_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArenaForAllocation() != nullptr) {
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_release_oprf_response() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.oprf_response)

::private_membership::rlwe::PrivateMembershipRlweOprfResponse* temp = oprf_response_;
oprf_response_ = nullptr;
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_oprf_response() {

if (oprf_response_ == nullptr) {
auto* p = CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweOprfResponse>(GetArenaForAllocation());
oprf_response_ = p;
}
return oprf_response_;
}
inline ::private_membership::rlwe::PrivateMembershipRlweOprfResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_oprf_response() {
::private_membership::rlwe::PrivateMembershipRlweOprfResponse* _msg = _internal_mutable_oprf_response();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.oprf_response)
return _msg;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_oprf_response(::private_membership::rlwe::PrivateMembershipRlweOprfResponse* oprf_response) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
if (message_arena == nullptr) {
delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(oprf_response_);
}
if (oprf_response) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(oprf_response));
if (message_arena != submessage_arena) {
oprf_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, oprf_response, submessage_arena);
}

} else {

}
oprf_response_ = oprf_response;
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.oprf_response)
}

// .private_membership.rlwe.PrivateMembershipRlweQueryRequest expected_query_request = 7;
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_has_expected_query_request() const {
return this != internal_default_instance() && expected_query_request_ != nullptr;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::has_expected_query_request() const {
return _internal_has_expected_query_request();
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_expected_query_request() const {
const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* p = expected_query_request_;
return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest&>(
::private_membership::rlwe::_PrivateMembershipRlweQueryRequest_default_instance_);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQueryRequest& PrivateMembershipRlweClientRegressionTestData_TestCase::expected_query_request() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_query_request)
return _internal_expected_query_request();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_set_allocated_expected_query_request(
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* expected_query_request) {
if (GetArenaForAllocation() == nullptr) {
delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_query_request_);
}
expected_query_request_ = expected_query_request;
if (expected_query_request) {

} else {

}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_query_request)
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::release_expected_query_request() {

::private_membership::rlwe::PrivateMembershipRlweQueryRequest* temp = expected_query_request_;
expected_query_request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArenaForAllocation() != nullptr) {
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_release_expected_query_request() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_query_request)

::private_membership::rlwe::PrivateMembershipRlweQueryRequest* temp = expected_query_request_;
expected_query_request_ = nullptr;
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_expected_query_request() {

if (expected_query_request_ == nullptr) {
auto* p = CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQueryRequest>(GetArenaForAllocation());
expected_query_request_ = p;
}
return expected_query_request_;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryRequest* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_expected_query_request() {
::private_membership::rlwe::PrivateMembershipRlweQueryRequest* _msg = _internal_mutable_expected_query_request();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_query_request)
return _msg;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_expected_query_request(::private_membership::rlwe::PrivateMembershipRlweQueryRequest* expected_query_request) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
if (message_arena == nullptr) {
delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_query_request_);
}
if (expected_query_request) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expected_query_request));
if (message_arena != submessage_arena) {
expected_query_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, expected_query_request, submessage_arena);
}

} else {

}
expected_query_request_ = expected_query_request;
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.expected_query_request)
}

// .private_membership.rlwe.PrivateMembershipRlweQueryResponse query_response = 8;
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_has_query_response() const {
return this != internal_default_instance() && query_response_ != nullptr;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::has_query_response() const {
return _internal_has_query_response();
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse& PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_query_response() const {
const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* p = query_response_;
return p != nullptr ? *p : reinterpret_cast<const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse&>(
::private_membership::rlwe::_PrivateMembershipRlweQueryResponse_default_instance_);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweQueryResponse& PrivateMembershipRlweClientRegressionTestData_TestCase::query_response() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.query_response)
return _internal_query_response();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_set_allocated_query_response(
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* query_response) {
if (GetArenaForAllocation() == nullptr) {
delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_response_);
}
query_response_ = query_response;
if (query_response) {

} else {

}
// @@protoc_insertion_point(field_unsafe_arena_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.query_response)
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::release_query_response() {

::private_membership::rlwe::PrivateMembershipRlweQueryResponse* temp = query_response_;
query_response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
if (GetArenaForAllocation() != nullptr) {
temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
}
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::unsafe_arena_release_query_response() {
// @@protoc_insertion_point(field_release:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.query_response)

::private_membership::rlwe::PrivateMembershipRlweQueryResponse* temp = query_response_;
query_response_ = nullptr;
return temp;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_mutable_query_response() {

if (query_response_ == nullptr) {
auto* p = CreateMaybeMessage<::private_membership::rlwe::PrivateMembershipRlweQueryResponse>(GetArenaForAllocation());
query_response_ = p;
}
return query_response_;
}
inline ::private_membership::rlwe::PrivateMembershipRlweQueryResponse* PrivateMembershipRlweClientRegressionTestData_TestCase::mutable_query_response() {
::private_membership::rlwe::PrivateMembershipRlweQueryResponse* _msg = _internal_mutable_query_response();
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.query_response)
return _msg;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_allocated_query_response(::private_membership::rlwe::PrivateMembershipRlweQueryResponse* query_response) {
::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
if (message_arena == nullptr) {
delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_response_);
}
if (query_response) {
::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(query_response));
if (message_arena != submessage_arena) {
query_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
message_arena, query_response, submessage_arena);
}

} else {

}
query_response_ = query_response;
// @@protoc_insertion_point(field_set_allocated:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.query_response)
}

// bool is_positive_membership_expected = 9;
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::clear_is_positive_membership_expected() {
is_positive_membership_expected_ = false;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_is_positive_membership_expected() const {
return is_positive_membership_expected_;
}
inline bool PrivateMembershipRlweClientRegressionTestData_TestCase::is_positive_membership_expected() const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.is_positive_membership_expected)
return _internal_is_positive_membership_expected();
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::_internal_set_is_positive_membership_expected(bool value) {

is_positive_membership_expected_ = value;
}
inline void PrivateMembershipRlweClientRegressionTestData_TestCase::set_is_positive_membership_expected(bool value) {
_internal_set_is_positive_membership_expected(value);
// @@protoc_insertion_point(field_set:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase.is_positive_membership_expected)
}

// -------------------------------------------------------------------

// PrivateMembershipRlweClientRegressionTestData

// repeated .private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.TestCase test_cases = 1;
inline int PrivateMembershipRlweClientRegressionTestData::_internal_test_cases_size() const {
return test_cases_.size();
}
inline int PrivateMembershipRlweClientRegressionTestData::test_cases_size() const {
return _internal_test_cases_size();
}
inline void PrivateMembershipRlweClientRegressionTestData::clear_test_cases() {
test_cases_.Clear();
}
inline ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* PrivateMembershipRlweClientRegressionTestData::mutable_test_cases(int index) {
// @@protoc_insertion_point(field_mutable:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.test_cases)
return test_cases_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase >*
PrivateMembershipRlweClientRegressionTestData::mutable_test_cases() {
// @@protoc_insertion_point(field_mutable_list:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.test_cases)
return &test_cases_;
}
inline const ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase& PrivateMembershipRlweClientRegressionTestData::_internal_test_cases(int index) const {
return test_cases_.Get(index);
}
inline const ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase& PrivateMembershipRlweClientRegressionTestData::test_cases(int index) const {
// @@protoc_insertion_point(field_get:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.test_cases)
return _internal_test_cases(index);
}
inline ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* PrivateMembershipRlweClientRegressionTestData::_internal_add_test_cases() {
return test_cases_.Add();
}
inline ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* PrivateMembershipRlweClientRegressionTestData::add_test_cases() {
::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase* _add = _internal_add_test_cases();
// @@protoc_insertion_point(field_add:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.test_cases)
return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::private_membership::rlwe::PrivateMembershipRlweClientRegressionTestData_TestCase >&
PrivateMembershipRlweClientRegressionTestData::test_cases() const {
// @@protoc_insertion_point(field_list:private_membership.rlwe.PrivateMembershipRlweClientRegressionTestData.test_cases)
return test_cases_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rlwe
}  // namespace private_membership

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internal_2ftesting_2fregression_5ftest_5fdata_2fregression_5ftest_5fdata_2eproto
