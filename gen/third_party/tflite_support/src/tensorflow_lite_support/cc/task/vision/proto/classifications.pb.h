// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/classifications.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "tensorflow_lite_support/cc/task/vision/proto/class.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto {
  static const uint32_t offsets[];
};
namespace tflite {
namespace task {
namespace vision {
class ClassificationResult;
struct ClassificationResultDefaultTypeInternal;
extern ClassificationResultDefaultTypeInternal _ClassificationResult_default_instance_;
class Classifications;
struct ClassificationsDefaultTypeInternal;
extern ClassificationsDefaultTypeInternal _Classifications_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> ::tflite::task::vision::ClassificationResult* Arena::CreateMaybeMessage<::tflite::task::vision::ClassificationResult>(Arena*);
template<> ::tflite::task::vision::Classifications* Arena::CreateMaybeMessage<::tflite::task::vision::Classifications>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace tflite {
namespace task {
namespace vision {

// ===================================================================

class Classifications final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:tflite.task.vision.Classifications) */ {
 public:
  inline Classifications() : Classifications(nullptr) {}
  ~Classifications() override;
  explicit PROTOBUF_CONSTEXPR Classifications(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Classifications(const Classifications& from);
  Classifications(Classifications&& from) noexcept
    : Classifications() {
    *this = ::std::move(from);
  }

  inline Classifications& operator=(const Classifications& from) {
    CopyFrom(from);
    return *this;
  }
  inline Classifications& operator=(Classifications&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Classifications& default_instance() {
    return *internal_default_instance();
  }
  static inline const Classifications* internal_default_instance() {
    return reinterpret_cast<const Classifications*>(
               &_Classifications_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Classifications& a, Classifications& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Classifications* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Classifications* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Classifications* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Classifications>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Classifications& from);
  void MergeFrom(const Classifications& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Classifications* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.task.vision.Classifications";
  }
  protected:
  explicit Classifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassesFieldNumber = 1,
    kHeadIndexFieldNumber = 2,
  };
  // repeated .tflite.task.vision.Class classes = 1;
  int classes_size() const;
  private:
  int _internal_classes_size() const;
  public:
  void clear_classes();
  ::tflite::task::vision::Class* mutable_classes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Class >*
      mutable_classes();
  private:
  const ::tflite::task::vision::Class& _internal_classes(int index) const;
  ::tflite::task::vision::Class* _internal_add_classes();
  public:
  const ::tflite::task::vision::Class& classes(int index) const;
  ::tflite::task::vision::Class* add_classes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Class >&
      classes() const;

  // optional int32 head_index = 2;
  bool has_head_index() const;
  private:
  bool _internal_has_head_index() const;
  public:
  void clear_head_index();
  int32_t head_index() const;
  void set_head_index(int32_t value);
  private:
  int32_t _internal_head_index() const;
  void _internal_set_head_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:tflite.task.vision.Classifications)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Class > classes_;
  int32_t head_index_;
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto;
};
// -------------------------------------------------------------------

class ClassificationResult final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:tflite.task.vision.ClassificationResult) */ {
 public:
  inline ClassificationResult() : ClassificationResult(nullptr) {}
  ~ClassificationResult() override;
  explicit PROTOBUF_CONSTEXPR ClassificationResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassificationResult(const ClassificationResult& from);
  ClassificationResult(ClassificationResult&& from) noexcept
    : ClassificationResult() {
    *this = ::std::move(from);
  }

  inline ClassificationResult& operator=(const ClassificationResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassificationResult& operator=(ClassificationResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClassificationResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassificationResult* internal_default_instance() {
    return reinterpret_cast<const ClassificationResult*>(
               &_ClassificationResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClassificationResult& a, ClassificationResult& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClassificationResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassificationResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassificationResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassificationResult>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClassificationResult& from);
  void MergeFrom(const ClassificationResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassificationResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "tflite.task.vision.ClassificationResult";
  }
  protected:
  explicit ClassificationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationsFieldNumber = 1,
  };
  // repeated .tflite.task.vision.Classifications classifications = 1;
  int classifications_size() const;
  private:
  int _internal_classifications_size() const;
  public:
  void clear_classifications();
  ::tflite::task::vision::Classifications* mutable_classifications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Classifications >*
      mutable_classifications();
  private:
  const ::tflite::task::vision::Classifications& _internal_classifications(int index) const;
  ::tflite::task::vision::Classifications* _internal_add_classifications();
  public:
  const ::tflite::task::vision::Classifications& classifications(int index) const;
  ::tflite::task::vision::Classifications* add_classifications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Classifications >&
      classifications() const;

  // @@protoc_insertion_point(class_scope:tflite.task.vision.ClassificationResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Classifications > classifications_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Classifications

// repeated .tflite.task.vision.Class classes = 1;
inline int Classifications::_internal_classes_size() const {
  return classes_.size();
}
inline int Classifications::classes_size() const {
  return _internal_classes_size();
}
inline ::tflite::task::vision::Class* Classifications::mutable_classes(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.Classifications.classes)
  return classes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Class >*
Classifications::mutable_classes() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.vision.Classifications.classes)
  return &classes_;
}
inline const ::tflite::task::vision::Class& Classifications::_internal_classes(int index) const {
  return classes_.Get(index);
}
inline const ::tflite::task::vision::Class& Classifications::classes(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.Classifications.classes)
  return _internal_classes(index);
}
inline ::tflite::task::vision::Class* Classifications::_internal_add_classes() {
  return classes_.Add();
}
inline ::tflite::task::vision::Class* Classifications::add_classes() {
  ::tflite::task::vision::Class* _add = _internal_add_classes();
  // @@protoc_insertion_point(field_add:tflite.task.vision.Classifications.classes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Class >&
Classifications::classes() const {
  // @@protoc_insertion_point(field_list:tflite.task.vision.Classifications.classes)
  return classes_;
}

// optional int32 head_index = 2;
inline bool Classifications::_internal_has_head_index() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Classifications::has_head_index() const {
  return _internal_has_head_index();
}
inline void Classifications::clear_head_index() {
  head_index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t Classifications::_internal_head_index() const {
  return head_index_;
}
inline int32_t Classifications::head_index() const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.Classifications.head_index)
  return _internal_head_index();
}
inline void Classifications::_internal_set_head_index(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  head_index_ = value;
}
inline void Classifications::set_head_index(int32_t value) {
  _internal_set_head_index(value);
  // @@protoc_insertion_point(field_set:tflite.task.vision.Classifications.head_index)
}

// -------------------------------------------------------------------

// ClassificationResult

// repeated .tflite.task.vision.Classifications classifications = 1;
inline int ClassificationResult::_internal_classifications_size() const {
  return classifications_.size();
}
inline int ClassificationResult::classifications_size() const {
  return _internal_classifications_size();
}
inline void ClassificationResult::clear_classifications() {
  classifications_.Clear();
}
inline ::tflite::task::vision::Classifications* ClassificationResult::mutable_classifications(int index) {
  // @@protoc_insertion_point(field_mutable:tflite.task.vision.ClassificationResult.classifications)
  return classifications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Classifications >*
ClassificationResult::mutable_classifications() {
  // @@protoc_insertion_point(field_mutable_list:tflite.task.vision.ClassificationResult.classifications)
  return &classifications_;
}
inline const ::tflite::task::vision::Classifications& ClassificationResult::_internal_classifications(int index) const {
  return classifications_.Get(index);
}
inline const ::tflite::task::vision::Classifications& ClassificationResult::classifications(int index) const {
  // @@protoc_insertion_point(field_get:tflite.task.vision.ClassificationResult.classifications)
  return _internal_classifications(index);
}
inline ::tflite::task::vision::Classifications* ClassificationResult::_internal_add_classifications() {
  return classifications_.Add();
}
inline ::tflite::task::vision::Classifications* ClassificationResult::add_classifications() {
  ::tflite::task::vision::Classifications* _add = _internal_add_classifications();
  // @@protoc_insertion_point(field_add:tflite.task.vision.ClassificationResult.classifications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::tflite::task::vision::Classifications >&
ClassificationResult::classifications() const {
  // @@protoc_insertion_point(field_list:tflite.task.vision.ClassificationResult.classifications)
  return classifications_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace vision
}  // namespace task
}  // namespace tflite

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_tensorflow_5flite_5fsupport_2fcc_2ftask_2fvision_2fproto_2fclassifications_2eproto
