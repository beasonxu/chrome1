// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow_lite_support/cc/task/vision/proto/classifications.proto

#include "tensorflow_lite_support/cc/task/vision/proto/classifications.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tflite {
namespace task {
namespace vision {
PROTOBUF_CONSTEXPR Classifications::Classifications(
    ::_pbi::ConstantInitialized)
  : classes_()
  , head_index_(0){}
struct ClassificationsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassificationsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassificationsDefaultTypeInternal() {}
  union {
    Classifications _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassificationsDefaultTypeInternal _Classifications_default_instance_;
PROTOBUF_CONSTEXPR ClassificationResult::ClassificationResult(
    ::_pbi::ConstantInitialized)
  : classifications_(){}
struct ClassificationResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassificationResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassificationResultDefaultTypeInternal() {}
  union {
    ClassificationResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassificationResultDefaultTypeInternal _ClassificationResult_default_instance_;
}  // namespace vision
}  // namespace task
}  // namespace tflite
namespace tflite {
namespace task {
namespace vision {

// ===================================================================

class Classifications::_Internal {
 public:
  using HasBits = decltype(std::declval<Classifications>()._has_bits_);
  static void set_has_head_index(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void Classifications::clear_classes() {
  classes_.Clear();
}
Classifications::Classifications(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  classes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.Classifications)
}
Classifications::Classifications(const Classifications& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      classes_(from.classes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  head_index_ = from.head_index_;
  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.Classifications)
}

inline void Classifications::SharedCtor() {
head_index_ = 0;
}

Classifications::~Classifications() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.Classifications)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Classifications::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Classifications::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Classifications::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.Classifications)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classes_.Clear();
  head_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Classifications::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tflite.task.vision.Class classes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional int32 head_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_head_index(&has_bits);
          head_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Classifications::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.Classifications)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Class classes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classes_size()); i < n; i++) {
    const auto& repfield = this->_internal_classes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 head_index = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_head_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.Classifications)
  return target;
}

size_t Classifications::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.Classifications)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Class classes = 1;
  total_size += 1UL * this->_internal_classes_size();
  for (const auto& msg : this->classes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 head_index = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_head_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Classifications::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Classifications*>(
      &from));
}

void Classifications::MergeFrom(const Classifications& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.Classifications)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classes_.MergeFrom(from.classes_);
  if (from._internal_has_head_index()) {
    _internal_set_head_index(from._internal_head_index());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Classifications::CopyFrom(const Classifications& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.Classifications)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Classifications::IsInitialized() const {
  return true;
}

void Classifications::InternalSwap(Classifications* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  classes_.InternalSwap(&other->classes_);
  swap(head_index_, other->head_index_);
}

std::string Classifications::GetTypeName() const {
  return "tflite.task.vision.Classifications";
}


// ===================================================================

class ClassificationResult::_Internal {
 public:
};

ClassificationResult::ClassificationResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  classifications_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:tflite.task.vision.ClassificationResult)
}
ClassificationResult::ClassificationResult(const ClassificationResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      classifications_(from.classifications_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tflite.task.vision.ClassificationResult)
}

inline void ClassificationResult::SharedCtor() {
}

ClassificationResult::~ClassificationResult() {
  // @@protoc_insertion_point(destructor:tflite.task.vision.ClassificationResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassificationResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClassificationResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClassificationResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tflite.task.vision.ClassificationResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  classifications_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClassificationResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tflite.task.vision.Classifications classifications = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_classifications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassificationResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tflite.task.vision.ClassificationResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Classifications classifications = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_classifications_size()); i < n; i++) {
    const auto& repfield = this->_internal_classifications(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tflite.task.vision.ClassificationResult)
  return target;
}

size_t ClassificationResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tflite.task.vision.ClassificationResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tflite.task.vision.Classifications classifications = 1;
  total_size += 1UL * this->_internal_classifications_size();
  for (const auto& msg : this->classifications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassificationResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClassificationResult*>(
      &from));
}

void ClassificationResult::MergeFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tflite.task.vision.ClassificationResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  classifications_.MergeFrom(from.classifications_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClassificationResult::CopyFrom(const ClassificationResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tflite.task.vision.ClassificationResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassificationResult::IsInitialized() const {
  return true;
}

void ClassificationResult::InternalSwap(ClassificationResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  classifications_.InternalSwap(&other->classifications_);
}

std::string ClassificationResult::GetTypeName() const {
  return "tflite.task.vision.ClassificationResult";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace vision
}  // namespace task
}  // namespace tflite
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tflite::task::vision::Classifications*
Arena::CreateMaybeMessage< ::tflite::task::vision::Classifications >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::task::vision::Classifications >(arena);
}
template<> PROTOBUF_NOINLINE ::tflite::task::vision::ClassificationResult*
Arena::CreateMaybeMessage< ::tflite::task::vision::ClassificationResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tflite::task::vision::ClassificationResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
