// skia/public/mojom/tile_mode.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SKIA_PUBLIC_MOJOM_TILE_MODE_MOJOM_SHARED_H_
#define SKIA_PUBLIC_MOJOM_TILE_MODE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "skia/public/mojom/tile_mode.mojom-shared-internal.h"







namespace skia {
namespace mojom {


}  // namespace mojom
}  // namespace skia

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace skia {
namespace mojom {


enum class TileMode : int32_t {
  
  CLAMP = 0,
  
  REPEAT = 1,
  
  MIRROR = 2,
  
  DECAL = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, TileMode value);
inline bool IsKnownEnumValue(TileMode value) {
  return internal::TileMode_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace skia

namespace std {

template <>
struct hash<::skia::mojom::TileMode>
    : public mojo::internal::EnumHashImpl<::skia::mojom::TileMode> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::skia::mojom::TileMode, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::skia::mojom::TileMode, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::skia::mojom::TileMode>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace skia {
namespace mojom {


}  // namespace mojom
}  // namespace skia

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::skia::mojom::TileMode> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::skia::mojom::TileMode value);
};

} // namespace perfetto

#endif  // SKIA_PUBLIC_MOJOM_TILE_MODE_MOJOM_SHARED_H_