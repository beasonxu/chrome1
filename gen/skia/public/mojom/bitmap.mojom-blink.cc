// skia/public/mojom/bitmap.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "skia/public/mojom/bitmap.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "skia/public/mojom/bitmap.mojom-params-data.h"
#include "skia/public/mojom/bitmap.mojom-shared-message-ids.h"

#include "skia/public/mojom/bitmap.mojom-blink-import-headers.h"
#include "skia/public/mojom/bitmap.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SKIA_PUBLIC_MOJOM_BITMAP_MOJOM_BLINK_JUMBO_H_
#define SKIA_PUBLIC_MOJOM_BITMAP_MOJOM_BLINK_JUMBO_H_
#endif



namespace skia {
namespace mojom {
namespace blink {
BitmapN32::BitmapN32()
    : image_info(),
      pixel_data() {}

BitmapN32::BitmapN32(
    const ::SkImageInfo& image_info_in,
    ::mojo_base::BigBuffer pixel_data_in)
    : image_info(std::move(image_info_in)),
      pixel_data(std::move(pixel_data_in)) {}

BitmapN32::~BitmapN32() = default;

void BitmapN32::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_info"), this->image_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkImageInfo&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pixel_data"), this->pixel_data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo_base::BigBuffer>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BitmapN32::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BitmapWithArbitraryBpp::BitmapWithArbitraryBpp()
    : image_info(),
      UNUSED_row_bytes(),
      pixel_data() {}

BitmapWithArbitraryBpp::BitmapWithArbitraryBpp(
    const ::SkImageInfo& image_info_in,
    uint64_t UNUSED_row_bytes_in,
    ::mojo_base::BigBuffer pixel_data_in)
    : image_info(std::move(image_info_in)),
      UNUSED_row_bytes(std::move(UNUSED_row_bytes_in)),
      pixel_data(std::move(pixel_data_in)) {}

BitmapWithArbitraryBpp::~BitmapWithArbitraryBpp() = default;

void BitmapWithArbitraryBpp::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_info"), this->image_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkImageInfo&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "UNUSED_row_bytes"), this->UNUSED_row_bytes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pixel_data"), this->pixel_data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo_base::BigBuffer>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BitmapWithArbitraryBpp::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BitmapMappedFromTrustedProcess::BitmapMappedFromTrustedProcess()
    : image_info(),
      UNUSED_row_bytes(),
      pixel_data() {}

BitmapMappedFromTrustedProcess::BitmapMappedFromTrustedProcess(
    const ::SkImageInfo& image_info_in,
    uint64_t UNUSED_row_bytes_in,
    ::mojo_base::BigBuffer pixel_data_in)
    : image_info(std::move(image_info_in)),
      UNUSED_row_bytes(std::move(UNUSED_row_bytes_in)),
      pixel_data(std::move(pixel_data_in)) {}

BitmapMappedFromTrustedProcess::~BitmapMappedFromTrustedProcess() = default;

void BitmapMappedFromTrustedProcess::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_info"), this->image_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkImageInfo&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "UNUSED_row_bytes"), this->UNUSED_row_bytes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pixel_data"), this->pixel_data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo_base::BigBuffer>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BitmapMappedFromTrustedProcess::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
InlineBitmap::InlineBitmap()
    : image_info(),
      pixel_data() {}

InlineBitmap::InlineBitmap(
    const ::SkImageInfo& image_info_in,
    WTF::Vector<uint8_t> pixel_data_in)
    : image_info(std::move(image_info_in)),
      pixel_data(std::move(pixel_data_in)) {}

InlineBitmap::~InlineBitmap() = default;

void InlineBitmap::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_info"), this->image_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkImageInfo&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pixel_data"), this->pixel_data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const WTF::Vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool InlineBitmap::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace skia


namespace mojo {


// static
bool StructTraits<::skia::mojom::blink::BitmapN32::DataView, ::skia::mojom::blink::BitmapN32Ptr>::Read(
    ::skia::mojom::blink::BitmapN32::DataView input,
    ::skia::mojom::blink::BitmapN32Ptr* output) {
  bool success = true;
  ::skia::mojom::blink::BitmapN32Ptr result(::skia::mojom::blink::BitmapN32::New());
  
      if (success && !input.ReadImageInfo(&result->image_info))
        success = false;
      if (success && !input.ReadPixelData(&result->pixel_data))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::skia::mojom::blink::BitmapWithArbitraryBpp::DataView, ::skia::mojom::blink::BitmapWithArbitraryBppPtr>::Read(
    ::skia::mojom::blink::BitmapWithArbitraryBpp::DataView input,
    ::skia::mojom::blink::BitmapWithArbitraryBppPtr* output) {
  bool success = true;
  ::skia::mojom::blink::BitmapWithArbitraryBppPtr result(::skia::mojom::blink::BitmapWithArbitraryBpp::New());
  
      if (success && !input.ReadImageInfo(&result->image_info))
        success = false;
      if (success)
        result->UNUSED_row_bytes = input.UNUSED_row_bytes();
      if (success && !input.ReadPixelData(&result->pixel_data))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::skia::mojom::blink::BitmapMappedFromTrustedProcess::DataView, ::skia::mojom::blink::BitmapMappedFromTrustedProcessPtr>::Read(
    ::skia::mojom::blink::BitmapMappedFromTrustedProcess::DataView input,
    ::skia::mojom::blink::BitmapMappedFromTrustedProcessPtr* output) {
  bool success = true;
  ::skia::mojom::blink::BitmapMappedFromTrustedProcessPtr result(::skia::mojom::blink::BitmapMappedFromTrustedProcess::New());
  
      if (success && !input.ReadImageInfo(&result->image_info))
        success = false;
      if (success)
        result->UNUSED_row_bytes = input.UNUSED_row_bytes();
      if (success && !input.ReadPixelData(&result->pixel_data))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::skia::mojom::blink::InlineBitmap::DataView, ::skia::mojom::blink::InlineBitmapPtr>::Read(
    ::skia::mojom::blink::InlineBitmap::DataView input,
    ::skia::mojom::blink::InlineBitmapPtr* output) {
  bool success = true;
  ::skia::mojom::blink::InlineBitmapPtr result(::skia::mojom::blink::InlineBitmap::New());
  
      if (success && !input.ReadImageInfo(&result->image_info))
        success = false;
      if (success && !input.ReadPixelData(&result->pixel_data))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace skia {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace skia


#if defined(__clang__)
#pragma clang diagnostic pop
#endif