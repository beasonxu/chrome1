// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/flags/ChromeFeatureList

#ifndef org_chromium_chrome_browser_flags_ChromeFeatureList_JNI
#define org_chromium_chrome_browser_flags_ChromeFeatureList_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace chrome {
namespace android {

static jboolean JNI_ChromeFeatureList_IsEnabled(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& featureName);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M09VlOh_1(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName) {
  return JNI_ChromeFeatureList_IsEnabled(env, base::android::JavaParamRef<jstring>(env,
      featureName));
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_ChromeFeatureList_GetFieldTrialParamByFeature(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName);

JNI_GENERATOR_EXPORT jstring Java_J_N_MMltG_00024kc(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName,
    jstring paramName) {
  return JNI_ChromeFeatureList_GetFieldTrialParamByFeature(env,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName)).Release();
}

static jint JNI_ChromeFeatureList_GetFieldTrialParamByFeatureAsInt(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName,
    jint defaultValue);

JNI_GENERATOR_EXPORT jint Java_J_N_M37SqSAy(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName,
    jstring paramName,
    jint defaultValue) {
  return JNI_ChromeFeatureList_GetFieldTrialParamByFeatureAsInt(env,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName), defaultValue);
}

static jdouble JNI_ChromeFeatureList_GetFieldTrialParamByFeatureAsDouble(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName,
    jdouble defaultValue);

JNI_GENERATOR_EXPORT jdouble Java_J_N_MQdjXFDB(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName,
    jstring paramName,
    jdouble defaultValue) {
  return JNI_ChromeFeatureList_GetFieldTrialParamByFeatureAsDouble(env,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName), defaultValue);
}

static jboolean JNI_ChromeFeatureList_GetFieldTrialParamByFeatureAsBoolean(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& featureName,
    const base::android::JavaParamRef<jstring>& paramName,
    jboolean defaultValue);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M6bsIDpc(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName,
    jstring paramName,
    jboolean defaultValue) {
  return JNI_ChromeFeatureList_GetFieldTrialParamByFeatureAsBoolean(env,
      base::android::JavaParamRef<jstring>(env, featureName),
      base::android::JavaParamRef<jstring>(env, paramName), defaultValue);
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_ChromeFeatureList_GetFlattedFieldTrialParamsForFeature(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& featureName);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_M1ealghd(
    JNIEnv* env,
    jclass jcaller,
    jstring featureName) {
  return JNI_ChromeFeatureList_GetFlattedFieldTrialParamsForFeature(env,
      base::android::JavaParamRef<jstring>(env, featureName)).Release();
}


}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_flags_ChromeFeatureList_JNI
