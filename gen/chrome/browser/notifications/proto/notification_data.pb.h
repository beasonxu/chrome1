// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notification_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notification_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notification_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace notifications {
namespace proto {
class CustomData;
struct CustomDataDefaultTypeInternal;
extern CustomDataDefaultTypeInternal _CustomData_default_instance_;
class NotificationData;
struct NotificationDataDefaultTypeInternal;
extern NotificationDataDefaultTypeInternal _NotificationData_default_instance_;
class NotificationData_Button;
struct NotificationData_ButtonDefaultTypeInternal;
extern NotificationData_ButtonDefaultTypeInternal _NotificationData_Button_default_instance_;
class NotificationData_IconUuidBundle;
struct NotificationData_IconUuidBundleDefaultTypeInternal;
extern NotificationData_IconUuidBundleDefaultTypeInternal _NotificationData_IconUuidBundle_default_instance_;
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> ::notifications::proto::CustomData* Arena::CreateMaybeMessage<::notifications::proto::CustomData>(Arena*);
template<> ::notifications::proto::NotificationData* Arena::CreateMaybeMessage<::notifications::proto::NotificationData>(Arena*);
template<> ::notifications::proto::NotificationData_Button* Arena::CreateMaybeMessage<::notifications::proto::NotificationData_Button>(Arena*);
template<> ::notifications::proto::NotificationData_IconUuidBundle* Arena::CreateMaybeMessage<::notifications::proto::NotificationData_IconUuidBundle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace notifications {
namespace proto {

enum ActionButtonType : int {
  UNKNOWN_ACTION = 0,
  HELPFUL = 1,
  UNHELPFUL = 2
};
bool ActionButtonType_IsValid(int value);
constexpr ActionButtonType ActionButtonType_MIN = UNKNOWN_ACTION;
constexpr ActionButtonType ActionButtonType_MAX = UNHELPFUL;
constexpr int ActionButtonType_ARRAYSIZE = ActionButtonType_MAX + 1;

const std::string& ActionButtonType_Name(ActionButtonType value);
template<typename T>
inline const std::string& ActionButtonType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActionButtonType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActionButtonType_Name.");
  return ActionButtonType_Name(static_cast<ActionButtonType>(enum_t_value));
}
bool ActionButtonType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActionButtonType* value);
enum IconType : int {
  UNKNOWN_ICON_TYPE = 0,
  SMALL_ICON = 1,
  LARGE_ICON = 2
};
bool IconType_IsValid(int value);
constexpr IconType IconType_MIN = UNKNOWN_ICON_TYPE;
constexpr IconType IconType_MAX = LARGE_ICON;
constexpr int IconType_ARRAYSIZE = IconType_MAX + 1;

const std::string& IconType_Name(IconType value);
template<typename T>
inline const std::string& IconType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, IconType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function IconType_Name.");
  return IconType_Name(static_cast<IconType>(enum_t_value));
}
bool IconType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, IconType* value);
// ===================================================================

class CustomData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.CustomData) */ {
 public:
  inline CustomData() : CustomData(nullptr) {}
  ~CustomData() override;
  explicit PROTOBUF_CONSTEXPR CustomData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CustomData(const CustomData& from);
  CustomData(CustomData&& from) noexcept
    : CustomData() {
    *this = ::std::move(from);
  }

  inline CustomData& operator=(const CustomData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomData& operator=(CustomData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CustomData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CustomData* internal_default_instance() {
    return reinterpret_cast<const CustomData*>(
               &_CustomData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CustomData& a, CustomData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CustomData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CustomData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CustomData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CustomData& from);
  void MergeFrom(const CustomData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CustomData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.CustomData";
  }
  protected:
  explicit CustomData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional bytes value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.CustomData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationData_Button final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationData.Button) */ {
 public:
  inline NotificationData_Button() : NotificationData_Button(nullptr) {}
  ~NotificationData_Button() override;
  explicit PROTOBUF_CONSTEXPR NotificationData_Button(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationData_Button(const NotificationData_Button& from);
  NotificationData_Button(NotificationData_Button&& from) noexcept
    : NotificationData_Button() {
    *this = ::std::move(from);
  }

  inline NotificationData_Button& operator=(const NotificationData_Button& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationData_Button& operator=(NotificationData_Button&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NotificationData_Button& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationData_Button* internal_default_instance() {
    return reinterpret_cast<const NotificationData_Button*>(
               &_NotificationData_Button_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationData_Button& a, NotificationData_Button& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NotificationData_Button* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationData_Button* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationData_Button* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationData_Button>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NotificationData_Button& from);
  void MergeFrom(const NotificationData_Button& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationData_Button* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationData.Button";
  }
  protected:
  explicit NotificationData_Button(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kIdFieldNumber = 3,
    kButtonTypeFieldNumber = 2,
  };
  // optional string text = 1;
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // optional string id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional .notifications.proto.ActionButtonType button_type = 2;
  bool has_button_type() const;
  private:
  bool _internal_has_button_type() const;
  public:
  void clear_button_type();
  ::notifications::proto::ActionButtonType button_type() const;
  void set_button_type(::notifications::proto::ActionButtonType value);
  private:
  ::notifications::proto::ActionButtonType _internal_button_type() const;
  void _internal_set_button_type(::notifications::proto::ActionButtonType value);
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationData.Button)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int button_type_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationData_IconUuidBundle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationData.IconUuidBundle) */ {
 public:
  inline NotificationData_IconUuidBundle() : NotificationData_IconUuidBundle(nullptr) {}
  ~NotificationData_IconUuidBundle() override;
  explicit PROTOBUF_CONSTEXPR NotificationData_IconUuidBundle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationData_IconUuidBundle(const NotificationData_IconUuidBundle& from);
  NotificationData_IconUuidBundle(NotificationData_IconUuidBundle&& from) noexcept
    : NotificationData_IconUuidBundle() {
    *this = ::std::move(from);
  }

  inline NotificationData_IconUuidBundle& operator=(const NotificationData_IconUuidBundle& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationData_IconUuidBundle& operator=(NotificationData_IconUuidBundle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NotificationData_IconUuidBundle& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationData_IconUuidBundle* internal_default_instance() {
    return reinterpret_cast<const NotificationData_IconUuidBundle*>(
               &_NotificationData_IconUuidBundle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NotificationData_IconUuidBundle& a, NotificationData_IconUuidBundle& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NotificationData_IconUuidBundle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationData_IconUuidBundle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationData_IconUuidBundle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationData_IconUuidBundle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NotificationData_IconUuidBundle& from);
  void MergeFrom(const NotificationData_IconUuidBundle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationData_IconUuidBundle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationData.IconUuidBundle";
  }
  protected:
  explicit NotificationData_IconUuidBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // optional string uuid = 2;
  bool has_uuid() const;
  private:
  bool _internal_has_uuid() const;
  public:
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_NODISCARD std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // optional .notifications.proto.IconType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::notifications::proto::IconType type() const;
  void set_type(::notifications::proto::IconType value);
  private:
  ::notifications::proto::IconType _internal_type() const;
  void _internal_set_type(::notifications::proto::IconType value);
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationData.IconUuidBundle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  int type_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// -------------------------------------------------------------------

class NotificationData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:notifications.proto.NotificationData) */ {
 public:
  inline NotificationData() : NotificationData(nullptr) {}
  ~NotificationData() override;
  explicit PROTOBUF_CONSTEXPR NotificationData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationData(const NotificationData& from);
  NotificationData(NotificationData&& from) noexcept
    : NotificationData() {
    *this = ::std::move(from);
  }

  inline NotificationData& operator=(const NotificationData& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationData& operator=(NotificationData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NotificationData& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationData* internal_default_instance() {
    return reinterpret_cast<const NotificationData*>(
               &_NotificationData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(NotificationData& a, NotificationData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NotificationData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NotificationData& from);
  void MergeFrom(const NotificationData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "notifications.proto.NotificationData";
  }
  protected:
  explicit NotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef NotificationData_Button Button;
  typedef NotificationData_IconUuidBundle IconUuidBundle;

  // accessors -------------------------------------------------------

  enum : int {
    kCustomDataFieldNumber = 3,
    kButtonsFieldNumber = 4,
    kIconsUuidFieldNumber = 5,
    kTitleFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // repeated .notifications.proto.CustomData custom_data = 3;
  int custom_data_size() const;
  private:
  int _internal_custom_data_size() const;
  public:
  void clear_custom_data();
  ::notifications::proto::CustomData* mutable_custom_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >*
      mutable_custom_data();
  private:
  const ::notifications::proto::CustomData& _internal_custom_data(int index) const;
  ::notifications::proto::CustomData* _internal_add_custom_data();
  public:
  const ::notifications::proto::CustomData& custom_data(int index) const;
  ::notifications::proto::CustomData* add_custom_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >&
      custom_data() const;

  // repeated .notifications.proto.NotificationData.Button buttons = 4;
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  ::notifications::proto::NotificationData_Button* mutable_buttons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >*
      mutable_buttons();
  private:
  const ::notifications::proto::NotificationData_Button& _internal_buttons(int index) const;
  ::notifications::proto::NotificationData_Button* _internal_add_buttons();
  public:
  const ::notifications::proto::NotificationData_Button& buttons(int index) const;
  ::notifications::proto::NotificationData_Button* add_buttons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >&
      buttons() const;

  // repeated .notifications.proto.NotificationData.IconUuidBundle icons_uuid = 5;
  int icons_uuid_size() const;
  private:
  int _internal_icons_uuid_size() const;
  public:
  void clear_icons_uuid();
  ::notifications::proto::NotificationData_IconUuidBundle* mutable_icons_uuid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >*
      mutable_icons_uuid();
  private:
  const ::notifications::proto::NotificationData_IconUuidBundle& _internal_icons_uuid(int index) const;
  ::notifications::proto::NotificationData_IconUuidBundle* _internal_add_icons_uuid();
  public:
  const ::notifications::proto::NotificationData_IconUuidBundle& icons_uuid(int index) const;
  ::notifications::proto::NotificationData_IconUuidBundle* add_icons_uuid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >&
      icons_uuid() const;

  // optional string title = 1;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:notifications.proto.NotificationData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData > custom_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button > buttons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle > icons_uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_notification_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CustomData

// optional string key = 1;
inline bool CustomData::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CustomData::has_key() const {
  return _internal_has_key();
}
inline void CustomData::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CustomData::key() const {
  // @@protoc_insertion_point(field_get:notifications.proto.CustomData.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomData::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.CustomData.key)
}
inline std::string* CustomData::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:notifications.proto.CustomData.key)
  return _s;
}
inline const std::string& CustomData::_internal_key() const {
  return key_.Get();
}
inline void CustomData::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomData::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomData::release_key() {
  // @@protoc_insertion_point(field_release:notifications.proto.CustomData.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomData::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.CustomData.key)
}

// optional bytes value = 2;
inline bool CustomData::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CustomData::has_value() const {
  return _internal_has_value();
}
inline void CustomData::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CustomData::value() const {
  // @@protoc_insertion_point(field_get:notifications.proto.CustomData.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CustomData::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.CustomData.value)
}
inline std::string* CustomData::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:notifications.proto.CustomData.value)
  return _s;
}
inline const std::string& CustomData::_internal_value() const {
  return value_.Get();
}
inline void CustomData::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* CustomData::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* CustomData::release_value() {
  // @@protoc_insertion_point(field_release:notifications.proto.CustomData.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CustomData::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.CustomData.value)
}

// -------------------------------------------------------------------

// NotificationData_Button

// optional string text = 1;
inline bool NotificationData_Button::_internal_has_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationData_Button::has_text() const {
  return _internal_has_text();
}
inline void NotificationData_Button::clear_text() {
  text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationData_Button::text() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.Button.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationData_Button::set_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.Button.text)
}
inline std::string* NotificationData_Button::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.Button.text)
  return _s;
}
inline const std::string& NotificationData_Button::_internal_text() const {
  return text_.Get();
}
inline void NotificationData_Button::_internal_set_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  text_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationData_Button::_internal_mutable_text() {
  _has_bits_[0] |= 0x00000001u;
  return text_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationData_Button::release_text() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.Button.text)
  if (!_internal_has_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationData_Button::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (text_.IsDefault()) {
    text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.Button.text)
}

// optional .notifications.proto.ActionButtonType button_type = 2;
inline bool NotificationData_Button::_internal_has_button_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NotificationData_Button::has_button_type() const {
  return _internal_has_button_type();
}
inline void NotificationData_Button::clear_button_type() {
  button_type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::notifications::proto::ActionButtonType NotificationData_Button::_internal_button_type() const {
  return static_cast< ::notifications::proto::ActionButtonType >(button_type_);
}
inline ::notifications::proto::ActionButtonType NotificationData_Button::button_type() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.Button.button_type)
  return _internal_button_type();
}
inline void NotificationData_Button::_internal_set_button_type(::notifications::proto::ActionButtonType value) {
  assert(::notifications::proto::ActionButtonType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  button_type_ = value;
}
inline void NotificationData_Button::set_button_type(::notifications::proto::ActionButtonType value) {
  _internal_set_button_type(value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.Button.button_type)
}

// optional string id = 3;
inline bool NotificationData_Button::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NotificationData_Button::has_id() const {
  return _internal_has_id();
}
inline void NotificationData_Button::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationData_Button::id() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.Button.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationData_Button::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.Button.id)
}
inline std::string* NotificationData_Button::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.Button.id)
  return _s;
}
inline const std::string& NotificationData_Button::_internal_id() const {
  return id_.Get();
}
inline void NotificationData_Button::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationData_Button::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationData_Button::release_id() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.Button.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationData_Button::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.Button.id)
}

// -------------------------------------------------------------------

// NotificationData_IconUuidBundle

// optional .notifications.proto.IconType type = 1;
inline bool NotificationData_IconUuidBundle::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NotificationData_IconUuidBundle::has_type() const {
  return _internal_has_type();
}
inline void NotificationData_IconUuidBundle::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::notifications::proto::IconType NotificationData_IconUuidBundle::_internal_type() const {
  return static_cast< ::notifications::proto::IconType >(type_);
}
inline ::notifications::proto::IconType NotificationData_IconUuidBundle::type() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.IconUuidBundle.type)
  return _internal_type();
}
inline void NotificationData_IconUuidBundle::_internal_set_type(::notifications::proto::IconType value) {
  assert(::notifications::proto::IconType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  type_ = value;
}
inline void NotificationData_IconUuidBundle::set_type(::notifications::proto::IconType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.IconUuidBundle.type)
}

// optional string uuid = 2;
inline bool NotificationData_IconUuidBundle::_internal_has_uuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationData_IconUuidBundle::has_uuid() const {
  return _internal_has_uuid();
}
inline void NotificationData_IconUuidBundle::clear_uuid() {
  uuid_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationData_IconUuidBundle::uuid() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.IconUuidBundle.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationData_IconUuidBundle::set_uuid(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 uuid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.IconUuidBundle.uuid)
}
inline std::string* NotificationData_IconUuidBundle::mutable_uuid() {
  std::string* _s = _internal_mutable_uuid();
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.IconUuidBundle.uuid)
  return _s;
}
inline const std::string& NotificationData_IconUuidBundle::_internal_uuid() const {
  return uuid_.Get();
}
inline void NotificationData_IconUuidBundle::_internal_set_uuid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationData_IconUuidBundle::_internal_mutable_uuid() {
  _has_bits_[0] |= 0x00000001u;
  return uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationData_IconUuidBundle::release_uuid() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.IconUuidBundle.uuid)
  if (!_internal_has_uuid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = uuid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationData_IconUuidBundle::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  uuid_.SetAllocated(uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uuid_.IsDefault()) {
    uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.IconUuidBundle.uuid)
}

// -------------------------------------------------------------------

// NotificationData

// optional string title = 1;
inline bool NotificationData::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationData::has_title() const {
  return _internal_has_title();
}
inline void NotificationData::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationData::title() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationData::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.title)
}
inline std::string* NotificationData::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.title)
  return _s;
}
inline const std::string& NotificationData::_internal_title() const {
  return title_.Get();
}
inline void NotificationData::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationData::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000001u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationData::release_title() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationData::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.title)
}

// optional string message = 2;
inline bool NotificationData::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NotificationData::has_message() const {
  return _internal_has_message();
}
inline void NotificationData::clear_message() {
  message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationData::message() const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationData::set_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:notifications.proto.NotificationData.message)
}
inline std::string* NotificationData::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.message)
  return _s;
}
inline const std::string& NotificationData::_internal_message() const {
  return message_.Get();
}
inline void NotificationData::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  message_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationData::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000002u;
  return message_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationData::release_message() {
  // @@protoc_insertion_point(field_release:notifications.proto.NotificationData.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationData::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault()) {
    message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:notifications.proto.NotificationData.message)
}

// repeated .notifications.proto.CustomData custom_data = 3;
inline int NotificationData::_internal_custom_data_size() const {
  return custom_data_.size();
}
inline int NotificationData::custom_data_size() const {
  return _internal_custom_data_size();
}
inline void NotificationData::clear_custom_data() {
  custom_data_.Clear();
}
inline ::notifications::proto::CustomData* NotificationData::mutable_custom_data(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.custom_data)
  return custom_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >*
NotificationData::mutable_custom_data() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.NotificationData.custom_data)
  return &custom_data_;
}
inline const ::notifications::proto::CustomData& NotificationData::_internal_custom_data(int index) const {
  return custom_data_.Get(index);
}
inline const ::notifications::proto::CustomData& NotificationData::custom_data(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.custom_data)
  return _internal_custom_data(index);
}
inline ::notifications::proto::CustomData* NotificationData::_internal_add_custom_data() {
  return custom_data_.Add();
}
inline ::notifications::proto::CustomData* NotificationData::add_custom_data() {
  ::notifications::proto::CustomData* _add = _internal_add_custom_data();
  // @@protoc_insertion_point(field_add:notifications.proto.NotificationData.custom_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::CustomData >&
NotificationData::custom_data() const {
  // @@protoc_insertion_point(field_list:notifications.proto.NotificationData.custom_data)
  return custom_data_;
}

// repeated .notifications.proto.NotificationData.Button buttons = 4;
inline int NotificationData::_internal_buttons_size() const {
  return buttons_.size();
}
inline int NotificationData::buttons_size() const {
  return _internal_buttons_size();
}
inline void NotificationData::clear_buttons() {
  buttons_.Clear();
}
inline ::notifications::proto::NotificationData_Button* NotificationData::mutable_buttons(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.buttons)
  return buttons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >*
NotificationData::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.NotificationData.buttons)
  return &buttons_;
}
inline const ::notifications::proto::NotificationData_Button& NotificationData::_internal_buttons(int index) const {
  return buttons_.Get(index);
}
inline const ::notifications::proto::NotificationData_Button& NotificationData::buttons(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.buttons)
  return _internal_buttons(index);
}
inline ::notifications::proto::NotificationData_Button* NotificationData::_internal_add_buttons() {
  return buttons_.Add();
}
inline ::notifications::proto::NotificationData_Button* NotificationData::add_buttons() {
  ::notifications::proto::NotificationData_Button* _add = _internal_add_buttons();
  // @@protoc_insertion_point(field_add:notifications.proto.NotificationData.buttons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_Button >&
NotificationData::buttons() const {
  // @@protoc_insertion_point(field_list:notifications.proto.NotificationData.buttons)
  return buttons_;
}

// repeated .notifications.proto.NotificationData.IconUuidBundle icons_uuid = 5;
inline int NotificationData::_internal_icons_uuid_size() const {
  return icons_uuid_.size();
}
inline int NotificationData::icons_uuid_size() const {
  return _internal_icons_uuid_size();
}
inline void NotificationData::clear_icons_uuid() {
  icons_uuid_.Clear();
}
inline ::notifications::proto::NotificationData_IconUuidBundle* NotificationData::mutable_icons_uuid(int index) {
  // @@protoc_insertion_point(field_mutable:notifications.proto.NotificationData.icons_uuid)
  return icons_uuid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >*
NotificationData::mutable_icons_uuid() {
  // @@protoc_insertion_point(field_mutable_list:notifications.proto.NotificationData.icons_uuid)
  return &icons_uuid_;
}
inline const ::notifications::proto::NotificationData_IconUuidBundle& NotificationData::_internal_icons_uuid(int index) const {
  return icons_uuid_.Get(index);
}
inline const ::notifications::proto::NotificationData_IconUuidBundle& NotificationData::icons_uuid(int index) const {
  // @@protoc_insertion_point(field_get:notifications.proto.NotificationData.icons_uuid)
  return _internal_icons_uuid(index);
}
inline ::notifications::proto::NotificationData_IconUuidBundle* NotificationData::_internal_add_icons_uuid() {
  return icons_uuid_.Add();
}
inline ::notifications::proto::NotificationData_IconUuidBundle* NotificationData::add_icons_uuid() {
  ::notifications::proto::NotificationData_IconUuidBundle* _add = _internal_add_icons_uuid();
  // @@protoc_insertion_point(field_add:notifications.proto.NotificationData.icons_uuid)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::notifications::proto::NotificationData_IconUuidBundle >&
NotificationData::icons_uuid() const {
  // @@protoc_insertion_point(field_list:notifications.proto.NotificationData.icons_uuid)
  return icons_uuid_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace notifications

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::notifications::proto::ActionButtonType> : ::std::true_type {};
template <> struct is_proto_enum< ::notifications::proto::IconType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notification_5fdata_2eproto
