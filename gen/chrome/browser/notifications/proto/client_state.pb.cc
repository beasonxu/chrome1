// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_state.proto

#include "client_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace notifications {
namespace proto {
PROTOBUF_CONSTEXPR SuppressionInfo::SuppressionInfo(
    ::_pbi::ConstantInitialized)
  : last_trigger_time_(int64_t{0})
  , duration_ms_(int64_t{0})
  , recover_goal_(0){}
struct SuppressionInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuppressionInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuppressionInfoDefaultTypeInternal() {}
  union {
    SuppressionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuppressionInfoDefaultTypeInternal _SuppressionInfo_default_instance_;
PROTOBUF_CONSTEXPR ClientState::ClientState(
    ::_pbi::ConstantInitialized)
  : impressions_()
  , suppression_info_(nullptr)
  , current_max_daily_show_(0)
  , negative_events_count_(0)
  , last_negative_event_ts_(int64_t{0})
  , last_shown_ts_(int64_t{0})
  , type_(-1)
{}
struct ClientStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientStateDefaultTypeInternal() {}
  union {
    ClientState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientStateDefaultTypeInternal _ClientState_default_instance_;
}  // namespace proto
}  // namespace notifications
namespace notifications {
namespace proto {
bool SchedulerClientType_IsValid(int value) {
  switch (value) {
    case -3:
    case -2:
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SchedulerClientType_strings[9] = {};

static const char SchedulerClientType_names[] =
  "CHROME_UPDATE"
  "FEATURE_GUIDE"
  "PREFETCH"
  "READING_LIST"
  "TEST_1"
  "TEST_2"
  "TEST_3"
  "UNKNOWN"
  "WEBUI";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SchedulerClientType_entries[] = {
  { {SchedulerClientType_names + 0, 13}, 2 },
  { {SchedulerClientType_names + 13, 13}, 5 },
  { {SchedulerClientType_names + 26, 8}, 3 },
  { {SchedulerClientType_names + 34, 12}, 4 },
  { {SchedulerClientType_names + 46, 6}, -1 },
  { {SchedulerClientType_names + 52, 6}, -2 },
  { {SchedulerClientType_names + 58, 6}, -3 },
  { {SchedulerClientType_names + 64, 7}, 0 },
  { {SchedulerClientType_names + 71, 5}, 1 },
};

static const int SchedulerClientType_entries_by_number[] = {
  6, // -3 -> TEST_3
  5, // -2 -> TEST_2
  4, // -1 -> TEST_1
  7, // 0 -> UNKNOWN
  8, // 1 -> WEBUI
  0, // 2 -> CHROME_UPDATE
  2, // 3 -> PREFETCH
  3, // 4 -> READING_LIST
  1, // 5 -> FEATURE_GUIDE
};

const std::string& SchedulerClientType_Name(
    SchedulerClientType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SchedulerClientType_entries,
          SchedulerClientType_entries_by_number,
          9, SchedulerClientType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SchedulerClientType_entries,
      SchedulerClientType_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SchedulerClientType_strings[idx].get();
}
bool SchedulerClientType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SchedulerClientType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SchedulerClientType_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<SchedulerClientType>(int_value);
  }
  return success;
}

// ===================================================================

class SuppressionInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<SuppressionInfo>()._has_bits_);
  static void set_has_last_trigger_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recover_goal(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SuppressionInfo::SuppressionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:notifications.proto.SuppressionInfo)
}
SuppressionInfo::SuppressionInfo(const SuppressionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&last_trigger_time_, &from.last_trigger_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&recover_goal_) -
    reinterpret_cast<char*>(&last_trigger_time_)) + sizeof(recover_goal_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.SuppressionInfo)
}

inline void SuppressionInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_trigger_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&recover_goal_) -
    reinterpret_cast<char*>(&last_trigger_time_)) + sizeof(recover_goal_));
}

SuppressionInfo::~SuppressionInfo() {
  // @@protoc_insertion_point(destructor:notifications.proto.SuppressionInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SuppressionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SuppressionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SuppressionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.SuppressionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&last_trigger_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recover_goal_) -
        reinterpret_cast<char*>(&last_trigger_time_)) + sizeof(recover_goal_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SuppressionInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 last_trigger_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_last_trigger_time(&has_bits);
          last_trigger_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 duration_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration_ms(&has_bits);
          duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 recover_goal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_recover_goal(&has_bits);
          recover_goal_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SuppressionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notifications.proto.SuppressionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 last_trigger_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_last_trigger_time(), target);
  }

  // optional int64 duration_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration_ms(), target);
  }

  // optional int32 recover_goal = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_recover_goal(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notifications.proto.SuppressionInfo)
  return target;
}

size_t SuppressionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.SuppressionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int64 last_trigger_time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_trigger_time());
    }

    // optional int64 duration_ms = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ms());
    }

    // optional int32 recover_goal = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_recover_goal());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuppressionInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SuppressionInfo*>(
      &from));
}

void SuppressionInfo::MergeFrom(const SuppressionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.SuppressionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      last_trigger_time_ = from.last_trigger_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ms_ = from.duration_ms_;
    }
    if (cached_has_bits & 0x00000004u) {
      recover_goal_ = from.recover_goal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SuppressionInfo::CopyFrom(const SuppressionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.SuppressionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuppressionInfo::IsInitialized() const {
  return true;
}

void SuppressionInfo::InternalSwap(SuppressionInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuppressionInfo, recover_goal_)
      + sizeof(SuppressionInfo::recover_goal_)
      - PROTOBUF_FIELD_OFFSET(SuppressionInfo, last_trigger_time_)>(
          reinterpret_cast<char*>(&last_trigger_time_),
          reinterpret_cast<char*>(&other->last_trigger_time_));
}

std::string SuppressionInfo::GetTypeName() const {
  return "notifications.proto.SuppressionInfo";
}


// ===================================================================

class ClientState::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientState>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_current_max_daily_show(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::notifications::proto::SuppressionInfo& suppression_info(const ClientState* msg);
  static void set_has_suppression_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_negative_events_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_negative_event_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_last_shown_ts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::notifications::proto::SuppressionInfo&
ClientState::_Internal::suppression_info(const ClientState* msg) {
  return *msg->suppression_info_;
}
void ClientState::clear_impressions() {
  impressions_.Clear();
}
ClientState::ClientState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  impressions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:notifications.proto.ClientState)
}
ClientState::ClientState(const ClientState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      impressions_(from.impressions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_suppression_info()) {
    suppression_info_ = new ::notifications::proto::SuppressionInfo(*from.suppression_info_);
  } else {
    suppression_info_ = nullptr;
  }
  ::memcpy(&current_max_daily_show_, &from.current_max_daily_show_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&current_max_daily_show_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:notifications.proto.ClientState)
}

inline void ClientState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&suppression_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_shown_ts_) -
    reinterpret_cast<char*>(&suppression_info_)) + sizeof(last_shown_ts_));
type_ = -1;
}

ClientState::~ClientState() {
  // @@protoc_insertion_point(destructor:notifications.proto.ClientState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete suppression_info_;
}

void ClientState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientState::Clear() {
// @@protoc_insertion_point(message_clear_start:notifications.proto.ClientState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  impressions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(suppression_info_ != nullptr);
    suppression_info_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&current_max_daily_show_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_shown_ts_) -
        reinterpret_cast<char*>(&current_max_daily_show_)) + sizeof(last_shown_ts_));
    type_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .notifications.proto.SchedulerClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::notifications::proto::SchedulerClientType_IsValid(val))) {
            _internal_set_type(static_cast<::notifications::proto::SchedulerClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int32 current_max_daily_show = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_current_max_daily_show(&has_bits);
          current_max_daily_show_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .notifications.proto.Impression impressions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_impressions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .notifications.proto.SuppressionInfo suppression_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_suppression_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 negative_events_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_negative_events_count(&has_bits);
          negative_events_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_negative_event_ts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_last_negative_event_ts(&has_bits);
          last_negative_event_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_shown_ts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_last_shown_ts(&has_bits);
          last_shown_ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:notifications.proto.ClientState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .notifications.proto.SchedulerClientType type = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 current_max_daily_show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_current_max_daily_show(), target);
  }

  // repeated .notifications.proto.Impression impressions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_impressions_size()); i < n; i++) {
    const auto& repfield = this->_internal_impressions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .notifications.proto.SuppressionInfo suppression_info = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::suppression_info(this),
        _Internal::suppression_info(this).GetCachedSize(), target, stream);
  }

  // optional int32 negative_events_count = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_negative_events_count(), target);
  }

  // optional int64 last_negative_event_ts = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_negative_event_ts(), target);
  }

  // optional int64 last_shown_ts = 7;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_last_shown_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:notifications.proto.ClientState)
  return target;
}

size_t ClientState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:notifications.proto.ClientState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .notifications.proto.Impression impressions = 3;
  total_size += 1UL * this->_internal_impressions_size();
  for (const auto& msg : this->impressions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .notifications.proto.SuppressionInfo suppression_info = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *suppression_info_);
    }

    // optional int32 current_max_daily_show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_current_max_daily_show());
    }

    // optional int32 negative_events_count = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_negative_events_count());
    }

    // optional int64 last_negative_event_ts = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_negative_event_ts());
    }

    // optional int64 last_shown_ts = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_shown_ts());
    }

    // optional .notifications.proto.SchedulerClientType type = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientState*>(
      &from));
}

void ClientState::MergeFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:notifications.proto.ClientState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  impressions_.MergeFrom(from.impressions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_suppression_info()->::notifications::proto::SuppressionInfo::MergeFrom(from._internal_suppression_info());
    }
    if (cached_has_bits & 0x00000002u) {
      current_max_daily_show_ = from.current_max_daily_show_;
    }
    if (cached_has_bits & 0x00000004u) {
      negative_events_count_ = from.negative_events_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_negative_event_ts_ = from.last_negative_event_ts_;
    }
    if (cached_has_bits & 0x00000010u) {
      last_shown_ts_ = from.last_shown_ts_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientState::CopyFrom(const ClientState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:notifications.proto.ClientState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientState::IsInitialized() const {
  return true;
}

void ClientState::InternalSwap(ClientState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  impressions_.InternalSwap(&other->impressions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientState, last_shown_ts_)
      + sizeof(ClientState::last_shown_ts_)
      - PROTOBUF_FIELD_OFFSET(ClientState, suppression_info_)>(
          reinterpret_cast<char*>(&suppression_info_),
          reinterpret_cast<char*>(&other->suppression_info_));
  swap(type_, other->type_);
}

std::string ClientState::GetTypeName() const {
  return "notifications.proto.ClientState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace notifications
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::notifications::proto::SuppressionInfo*
Arena::CreateMaybeMessage< ::notifications::proto::SuppressionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notifications::proto::SuppressionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::notifications::proto::ClientState*
Arena::CreateMaybeMessage< ::notifications::proto::ClientState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::notifications::proto::ClientState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
