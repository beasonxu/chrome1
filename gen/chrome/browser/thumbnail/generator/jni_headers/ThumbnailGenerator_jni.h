// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/thumbnail/generator/ThumbnailGenerator

#ifndef org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_JNI
#define org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator[];
const char kClassPath_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator[] =
    "org/chromium/chrome/browser/thumbnail/generator/ThumbnailGenerator";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz(nullptr);
#ifndef org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz_defined
#define org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz_defined
inline jclass org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator,
      &g_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_ThumbnailGenerator_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_McvDi7ks(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_ThumbnailGenerator_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MabdmJU9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeThumbnailGenerator,
    jobject caller) {
  ThumbnailGenerator* native = reinterpret_cast<ThumbnailGenerator*>(nativeThumbnailGenerator);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MIn_1XlLY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeThumbnailGenerator,
    jobject caller,
    jstring contentId,
    jstring filePath,
    jstring mimeType,
    jint thumbnailSize,
    jobject callback) {
  ThumbnailGenerator* native = reinterpret_cast<ThumbnailGenerator*>(nativeThumbnailGenerator);
  CHECK_NATIVE_PTR(env, jcaller, native, "RetrieveThumbnail");
  return native->RetrieveThumbnail(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, contentId),
      base::android::JavaParamRef<jstring>(env, filePath), base::android::JavaParamRef<jstring>(env,
      mimeType), thumbnailSize, base::android::JavaParamRef<jobject>(env, callback));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_onThumbnailRetrieved(nullptr);
static void Java_ThumbnailGenerator_onThumbnailRetrieved(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& contentId,
    JniIntWrapper requestedIconSizePx,
    const base::android::JavaRef<jobject>& bitmap,
    const base::android::JavaRef<jobject>& callback) {
  jclass clazz = org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onThumbnailRetrieved",
"(Ljava/lang/String;ILandroid/graphics/Bitmap;Lorg/chromium/chrome/browser/thumbnail/generator/ThumbnailGeneratorCallback;)V",
&g_org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_onThumbnailRetrieved);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, contentId.obj(), as_jint(requestedIconSizePx), bitmap.obj(),
              callback.obj());
}

#endif  // org_chromium_chrome_browser_thumbnail_generator_ThumbnailGenerator_JNI
