// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/preferences/PrefChangeRegistrar

#ifndef org_chromium_chrome_browser_preferences_PrefChangeRegistrar_JNI
#define org_chromium_chrome_browser_preferences_PrefChangeRegistrar_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_preferences_PrefChangeRegistrar[];
const char kClassPath_org_chromium_chrome_browser_preferences_PrefChangeRegistrar[] =
    "org/chromium/chrome/browser/preferences/PrefChangeRegistrar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz(nullptr);
#ifndef org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz_defined
#define org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz_defined
inline jclass org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_preferences_PrefChangeRegistrar,
      &g_org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_PrefChangeRegistrar_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MiTdj3xP(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_PrefChangeRegistrar_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mrf8X6ah(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefChangeRegistrarAndroid,
    jobject caller,
    jstring preference) {
  PrefChangeRegistrarAndroid* native =
      reinterpret_cast<PrefChangeRegistrarAndroid*>(nativePrefChangeRegistrarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Add");
  return native->Add(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, preference));
}

JNI_GENERATOR_EXPORT void Java_J_N_M0E_00024fVRB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefChangeRegistrarAndroid,
    jobject caller,
    jstring preference) {
  PrefChangeRegistrarAndroid* native =
      reinterpret_cast<PrefChangeRegistrarAndroid*>(nativePrefChangeRegistrarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Remove");
  return native->Remove(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, preference));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mn0XciAY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefChangeRegistrarAndroid,
    jobject caller) {
  PrefChangeRegistrarAndroid* native =
      reinterpret_cast<PrefChangeRegistrarAndroid*>(nativePrefChangeRegistrarAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_preferences_PrefChangeRegistrar_onPreferenceChange(nullptr);
static void Java_PrefChangeRegistrar_onPreferenceChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& preference) {
  jclass clazz = org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_preferences_PrefChangeRegistrar_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPreferenceChange",
          "(Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_preferences_PrefChangeRegistrar_onPreferenceChange);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, preference.obj());
}

#endif  // org_chromium_chrome_browser_preferences_PrefChangeRegistrar_JNI
