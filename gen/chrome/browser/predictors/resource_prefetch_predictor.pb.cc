// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: resource_prefetch_predictor.proto

#include "resource_prefetch_predictor.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace predictors {
PROTOBUF_CONSTEXPR RedirectStat::RedirectStat(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_scheme_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , number_of_hits_(0u)
  , number_of_misses_(0u)
  , consecutive_misses_(0u)
  , url_port_(0){}
struct RedirectStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectStatDefaultTypeInternal() {}
  union {
    RedirectStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectStatDefaultTypeInternal _RedirectStat_default_instance_;
PROTOBUF_CONSTEXPR RedirectData::RedirectData(
    ::_pbi::ConstantInitialized)
  : redirect_endpoints_()
  , primary_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_visit_time_(uint64_t{0u}){}
struct RedirectDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RedirectDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RedirectDataDefaultTypeInternal() {}
  union {
    RedirectData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RedirectDataDefaultTypeInternal _RedirectData_default_instance_;
PROTOBUF_CONSTEXPR OriginStat::OriginStat(
    ::_pbi::ConstantInitialized)
  : origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , number_of_hits_(0u)
  , number_of_misses_(0u)
  , average_position_(0)
  , consecutive_misses_(0u)
  , always_access_network_(false)
  , accessed_network_(false){}
struct OriginStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginStatDefaultTypeInternal() {}
  union {
    OriginStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginStatDefaultTypeInternal _OriginStat_default_instance_;
PROTOBUF_CONSTEXPR OriginData::OriginData(
    ::_pbi::ConstantInitialized)
  : origins_()
  , host_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_visit_time_(uint64_t{0u}){}
struct OriginDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OriginDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OriginDataDefaultTypeInternal() {}
  union {
    OriginData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OriginDataDefaultTypeInternal _OriginData_default_instance_;
}  // namespace predictors
namespace predictors {

// ===================================================================

class RedirectStat::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectStat>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_number_of_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_consecutive_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_url_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url_port(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

RedirectStat::RedirectStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:predictors.RedirectStat)
}
RedirectStat::RedirectStat(const RedirectStat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  url_scheme_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_scheme_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url_scheme()) {
    url_scheme_.Set(from._internal_url_scheme(), 
      GetArenaForAllocation());
  }
  ::memcpy(&number_of_hits_, &from.number_of_hits_,
    static_cast<size_t>(reinterpret_cast<char*>(&url_port_) -
    reinterpret_cast<char*>(&number_of_hits_)) + sizeof(url_port_));
  // @@protoc_insertion_point(copy_constructor:predictors.RedirectStat)
}

inline void RedirectStat::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_scheme_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_scheme_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&number_of_hits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&url_port_) -
    reinterpret_cast<char*>(&number_of_hits_)) + sizeof(url_port_));
}

RedirectStat::~RedirectStat() {
  // @@protoc_insertion_point(destructor:predictors.RedirectStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  url_scheme_.Destroy();
}

void RedirectStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RedirectStat::Clear() {
// @@protoc_insertion_point(message_clear_start:predictors.RedirectStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_scheme_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&number_of_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&url_port_) -
        reinterpret_cast<char*>(&number_of_hits_)) + sizeof(url_port_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_hits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number_of_hits(&has_bits);
          number_of_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_misses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_misses(&has_bits);
          number_of_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 consecutive_misses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_consecutive_misses(&has_bits);
          consecutive_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url_scheme = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_url_scheme();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 url_port = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_url_port(&has_bits);
          url_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RedirectStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictors.RedirectStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional uint32 number_of_hits = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_of_hits(), target);
  }

  // optional uint32 number_of_misses = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_misses(), target);
  }

  // optional uint32 consecutive_misses = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_consecutive_misses(), target);
  }

  // optional string url_scheme = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_url_scheme(), target);
  }

  // optional int32 url_port = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_url_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictors.RedirectStat)
  return target;
}

size_t RedirectStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:predictors.RedirectStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string url = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string url_scheme = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url_scheme());
    }

    // optional uint32 number_of_hits = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_hits());
    }

    // optional uint32 number_of_misses = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_misses());
    }

    // optional uint32 consecutive_misses = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_consecutive_misses());
    }

    // optional int32 url_port = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_url_port());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectStat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectStat*>(
      &from));
}

void RedirectStat::MergeFrom(const RedirectStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:predictors.RedirectStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url_scheme(from._internal_url_scheme());
    }
    if (cached_has_bits & 0x00000004u) {
      number_of_hits_ = from.number_of_hits_;
    }
    if (cached_has_bits & 0x00000008u) {
      number_of_misses_ = from.number_of_misses_;
    }
    if (cached_has_bits & 0x00000010u) {
      consecutive_misses_ = from.consecutive_misses_;
    }
    if (cached_has_bits & 0x00000020u) {
      url_port_ = from.url_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectStat::CopyFrom(const RedirectStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:predictors.RedirectStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectStat::IsInitialized() const {
  return true;
}

void RedirectStat::InternalSwap(RedirectStat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_scheme_, lhs_arena,
      &other->url_scheme_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RedirectStat, url_port_)
      + sizeof(RedirectStat::url_port_)
      - PROTOBUF_FIELD_OFFSET(RedirectStat, number_of_hits_)>(
          reinterpret_cast<char*>(&number_of_hits_),
          reinterpret_cast<char*>(&other->number_of_hits_));
}

std::string RedirectStat::GetTypeName() const {
  return "predictors.RedirectStat";
}


// ===================================================================

class RedirectData::_Internal {
 public:
  using HasBits = decltype(std::declval<RedirectData>()._has_bits_);
  static void set_has_primary_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_visit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RedirectData::RedirectData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  redirect_endpoints_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:predictors.RedirectData)
}
RedirectData::RedirectData(const RedirectData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      redirect_endpoints_(from.redirect_endpoints_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  primary_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    primary_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_primary_key()) {
    primary_key_.Set(from._internal_primary_key(), 
      GetArenaForAllocation());
  }
  last_visit_time_ = from.last_visit_time_;
  // @@protoc_insertion_point(copy_constructor:predictors.RedirectData)
}

inline void RedirectData::SharedCtor() {
primary_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  primary_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_visit_time_ = uint64_t{0u};
}

RedirectData::~RedirectData() {
  // @@protoc_insertion_point(destructor:predictors.RedirectData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RedirectData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  primary_key_.Destroy();
}

void RedirectData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RedirectData::Clear() {
// @@protoc_insertion_point(message_clear_start:predictors.RedirectData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  redirect_endpoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    primary_key_.ClearNonDefaultToEmpty();
  }
  last_visit_time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RedirectData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string primary_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_primary_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_visit_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_visit_time(&has_bits);
          last_visit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .predictors.RedirectStat redirect_endpoints = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_redirect_endpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RedirectData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictors.RedirectData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string primary_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_primary_key(), target);
  }

  // optional uint64 last_visit_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_visit_time(), target);
  }

  // repeated .predictors.RedirectStat redirect_endpoints = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_redirect_endpoints_size()); i < n; i++) {
    const auto& repfield = this->_internal_redirect_endpoints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictors.RedirectData)
  return target;
}

size_t RedirectData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:predictors.RedirectData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .predictors.RedirectStat redirect_endpoints = 3;
  total_size += 1UL * this->_internal_redirect_endpoints_size();
  for (const auto& msg : this->redirect_endpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string primary_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_primary_key());
    }

    // optional uint64 last_visit_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_visit_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RedirectData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RedirectData*>(
      &from));
}

void RedirectData::MergeFrom(const RedirectData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:predictors.RedirectData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  redirect_endpoints_.MergeFrom(from.redirect_endpoints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_primary_key(from._internal_primary_key());
    }
    if (cached_has_bits & 0x00000002u) {
      last_visit_time_ = from.last_visit_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RedirectData::CopyFrom(const RedirectData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:predictors.RedirectData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedirectData::IsInitialized() const {
  return true;
}

void RedirectData::InternalSwap(RedirectData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  redirect_endpoints_.InternalSwap(&other->redirect_endpoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &primary_key_, lhs_arena,
      &other->primary_key_, rhs_arena
  );
  swap(last_visit_time_, other->last_visit_time_);
}

std::string RedirectData::GetTypeName() const {
  return "predictors.RedirectData";
}


// ===================================================================

class OriginStat::_Internal {
 public:
  using HasBits = decltype(std::declval<OriginStat>()._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_number_of_hits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_number_of_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_consecutive_misses(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_average_position(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_always_access_network(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_accessed_network(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

OriginStat::OriginStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:predictors.OriginStat)
}
OriginStat::OriginStat(const OriginStat& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  ::memcpy(&number_of_hits_, &from.number_of_hits_,
    static_cast<size_t>(reinterpret_cast<char*>(&accessed_network_) -
    reinterpret_cast<char*>(&number_of_hits_)) + sizeof(accessed_network_));
  // @@protoc_insertion_point(copy_constructor:predictors.OriginStat)
}

inline void OriginStat::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&number_of_hits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&accessed_network_) -
    reinterpret_cast<char*>(&number_of_hits_)) + sizeof(accessed_network_));
}

OriginStat::~OriginStat() {
  // @@protoc_insertion_point(destructor:predictors.OriginStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.Destroy();
}

void OriginStat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OriginStat::Clear() {
// @@protoc_insertion_point(message_clear_start:predictors.OriginStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&number_of_hits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&accessed_network_) -
        reinterpret_cast<char*>(&number_of_hits_)) + sizeof(accessed_network_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OriginStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string origin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_hits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_number_of_hits(&has_bits);
          number_of_hits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_of_misses = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_number_of_misses(&has_bits);
          number_of_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 consecutive_misses = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_consecutive_misses(&has_bits);
          consecutive_misses_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double average_position = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_average_position(&has_bits);
          average_position_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional bool always_access_network = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_always_access_network(&has_bits);
          always_access_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool accessed_network = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_accessed_network(&has_bits);
          accessed_network_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictors.OriginStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_origin(), target);
  }

  // optional uint32 number_of_hits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_number_of_hits(), target);
  }

  // optional uint32 number_of_misses = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_number_of_misses(), target);
  }

  // optional uint32 consecutive_misses = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_consecutive_misses(), target);
  }

  // optional double average_position = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_average_position(), target);
  }

  // optional bool always_access_network = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_always_access_network(), target);
  }

  // optional bool accessed_network = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_accessed_network(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictors.OriginStat)
  return target;
}

size_t OriginStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:predictors.OriginStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional uint32 number_of_hits = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_hits());
    }

    // optional uint32 number_of_misses = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_of_misses());
    }

    // optional double average_position = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 consecutive_misses = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_consecutive_misses());
    }

    // optional bool always_access_network = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool accessed_network = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginStat::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OriginStat*>(
      &from));
}

void OriginStat::MergeFrom(const OriginStat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:predictors.OriginStat)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_hits_ = from.number_of_hits_;
    }
    if (cached_has_bits & 0x00000004u) {
      number_of_misses_ = from.number_of_misses_;
    }
    if (cached_has_bits & 0x00000008u) {
      average_position_ = from.average_position_;
    }
    if (cached_has_bits & 0x00000010u) {
      consecutive_misses_ = from.consecutive_misses_;
    }
    if (cached_has_bits & 0x00000020u) {
      always_access_network_ = from.always_access_network_;
    }
    if (cached_has_bits & 0x00000040u) {
      accessed_network_ = from.accessed_network_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OriginStat::CopyFrom(const OriginStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:predictors.OriginStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginStat::IsInitialized() const {
  return true;
}

void OriginStat::InternalSwap(OriginStat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OriginStat, accessed_network_)
      + sizeof(OriginStat::accessed_network_)
      - PROTOBUF_FIELD_OFFSET(OriginStat, number_of_hits_)>(
          reinterpret_cast<char*>(&number_of_hits_),
          reinterpret_cast<char*>(&other->number_of_hits_));
}

std::string OriginStat::GetTypeName() const {
  return "predictors.OriginStat";
}


// ===================================================================

class OriginData::_Internal {
 public:
  using HasBits = decltype(std::declval<OriginData>()._has_bits_);
  static void set_has_host(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_last_visit_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

OriginData::OriginData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  origins_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:predictors.OriginData)
}
OriginData::OriginData(const OriginData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      origins_(from.origins_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_host()) {
    host_.Set(from._internal_host(), 
      GetArenaForAllocation());
  }
  last_visit_time_ = from.last_visit_time_;
  // @@protoc_insertion_point(copy_constructor:predictors.OriginData)
}

inline void OriginData::SharedCtor() {
host_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
last_visit_time_ = uint64_t{0u};
}

OriginData::~OriginData() {
  // @@protoc_insertion_point(destructor:predictors.OriginData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OriginData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_.Destroy();
}

void OriginData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OriginData::Clear() {
// @@protoc_insertion_point(message_clear_start:predictors.OriginData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origins_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    host_.ClearNonDefaultToEmpty();
  }
  last_visit_time_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OriginData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 last_visit_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_last_visit_time(&has_bits);
          last_visit_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .predictors.OriginStat origins = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_origins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OriginData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:predictors.OriginData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string host = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // optional uint64 last_visit_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_last_visit_time(), target);
  }

  // repeated .predictors.OriginStat origins = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_origins_size()); i < n; i++) {
    const auto& repfield = this->_internal_origins(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:predictors.OriginData)
  return target;
}

size_t OriginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:predictors.OriginData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .predictors.OriginStat origins = 3;
  total_size += 1UL * this->_internal_origins_size();
  for (const auto& msg : this->origins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string host = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_host());
    }

    // optional uint64 last_visit_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_last_visit_time());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OriginData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OriginData*>(
      &from));
}

void OriginData::MergeFrom(const OriginData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:predictors.OriginData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  origins_.MergeFrom(from.origins_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_host(from._internal_host());
    }
    if (cached_has_bits & 0x00000002u) {
      last_visit_time_ = from.last_visit_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OriginData::CopyFrom(const OriginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:predictors.OriginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OriginData::IsInitialized() const {
  return true;
}

void OriginData::InternalSwap(OriginData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  origins_.InternalSwap(&other->origins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_, lhs_arena,
      &other->host_, rhs_arena
  );
  swap(last_visit_time_, other->last_visit_time_);
}

std::string OriginData::GetTypeName() const {
  return "predictors.OriginData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace predictors
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::predictors::RedirectStat*
Arena::CreateMaybeMessage< ::predictors::RedirectStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::predictors::RedirectStat >(arena);
}
template<> PROTOBUF_NOINLINE ::predictors::RedirectData*
Arena::CreateMaybeMessage< ::predictors::RedirectData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::predictors::RedirectData >(arena);
}
template<> PROTOBUF_NOINLINE ::predictors::OriginStat*
Arena::CreateMaybeMessage< ::predictors::OriginStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::predictors::OriginStat >(arena);
}
template<> PROTOBUF_NOINLINE ::predictors::OriginData*
Arena::CreateMaybeMessage< ::predictors::OriginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::predictors::OriginData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
