// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/profiles/Profile

#ifndef org_chromium_chrome_browser_profiles_Profile_JNI
#define org_chromium_chrome_browser_profiles_Profile_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_chrome_browser_profiles_Profile[];
const char kClassPath_org_chromium_chrome_browser_profiles_Profile[] =
    "org/chromium/chrome/browser/profiles/Profile";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_profiles_Profile_clazz(nullptr);
#ifndef org_chromium_chrome_browser_profiles_Profile_clazz_defined
#define org_chromium_chrome_browser_profiles_Profile_clazz_defined
inline jclass org_chromium_chrome_browser_profiles_Profile_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_profiles_Profile,
      &g_org_chromium_chrome_browser_profiles_Profile_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static base::android::ScopedJavaLocalRef<jobject> JNI_Profile_GetLastUsedRegularProfile(JNIEnv*
    env);

JNI_GENERATOR_EXPORT jobject Java_J_N_M_13GXkeQ(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_Profile_GetLastUsedRegularProfile(env).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_Profile_FromWebContents(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT jobject Java_J_N_MvvJTucy(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents) {
  return JNI_Profile_FromWebContents(env, base::android::JavaParamRef<jobject>(env,
      webContents)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MScIZBOB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "DestroyWhenAppropriate");
  return native->DestroyWhenAppropriate(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MD_1ez_00024kP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOriginalProfile", NULL);
  return native->GetOriginalProfile(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MIzCSj22(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller,
    jobject otrProfileID,
    jboolean createIfNeeded) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOffTheRecordProfile", NULL);
  return native->GetOffTheRecordProfile(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, otrProfileID), createIfNeeded).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_Mhxya0Qy(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller,
    jboolean createIfNeeded) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPrimaryOTRProfile", NULL);
  return native->GetPrimaryOTRProfile(env, base::android::JavaParamRef<jobject>(env, caller),
      createIfNeeded).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MQioXkwA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller,
    jobject otrProfileID) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasOffTheRecordProfile", false);
  return native->HasOffTheRecordProfile(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, otrProfileID));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MrGvO7pv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasPrimaryOTRProfile", false);
  return native->HasPrimaryOTRProfile(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MEt51B0E(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsOffTheRecord", false);
  return native->IsOffTheRecord(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MWNOGDsM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPrimaryOTRProfile", false);
  return native->IsPrimaryOTRProfile(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MBL3czGJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsChild", false);
  return native->IsChild(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mfjp8BfR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Wipe");
  return native->Wipe(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MjGj0xKY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetProfileKey", NULL);
  return native->GetProfileKey(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MgjF0wyD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBrowserContextPointer", 0);
  return native->GetBrowserContextPointer(env);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MyopTl49(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileAndroid,
    jobject caller) {
  ProfileAndroid* native = reinterpret_cast<ProfileAndroid*>(nativeProfileAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOTRProfileID", NULL);
  return native->GetOTRProfileID(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_profiles_Profile_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_Profile_create(JNIEnv* env, jlong
    nativeProfileAndroid) {
  jclass clazz = org_chromium_chrome_browser_profiles_Profile_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_profiles_Profile_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/profiles/Profile;",
          &g_org_chromium_chrome_browser_profiles_Profile_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeProfileAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_profiles_Profile_onNativeDestroyed(nullptr);
static void Java_Profile_onNativeDestroyed(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_chrome_browser_profiles_Profile_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_profiles_Profile_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_chrome_browser_profiles_Profile_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_profiles_Profile_getNativePointer(nullptr);
static jlong Java_Profile_getNativePointer(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_chrome_browser_profiles_Profile_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_profiles_Profile_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePointer",
          "()J",
          &g_org_chromium_chrome_browser_profiles_Profile_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_profiles_Profile_JNI
