// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/profiles/ProfileKey

#ifndef org_chromium_chrome_browser_profiles_ProfileKey_JNI
#define org_chromium_chrome_browser_profiles_ProfileKey_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_profiles_ProfileKey[];
const char kClassPath_org_chromium_chrome_browser_profiles_ProfileKey[] =
    "org/chromium/chrome/browser/profiles/ProfileKey";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_profiles_ProfileKey_clazz(nullptr);
#ifndef org_chromium_chrome_browser_profiles_ProfileKey_clazz_defined
#define org_chromium_chrome_browser_profiles_ProfileKey_clazz_defined
inline jclass org_chromium_chrome_browser_profiles_ProfileKey_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_profiles_ProfileKey,
      &g_org_chromium_chrome_browser_profiles_ProfileKey_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static base::android::ScopedJavaLocalRef<jobject>
    JNI_ProfileKey_GetLastUsedRegularProfileKey(JNIEnv* env);

JNI_GENERATOR_EXPORT jobject Java_J_N_MZXDYv9T(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_ProfileKey_GetLastUsedRegularProfileKey(env).Release();
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MxX9WirW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileKeyAndroid) {
  ProfileKeyAndroid* native = reinterpret_cast<ProfileKeyAndroid*>(nativeProfileKeyAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetOriginalKey", NULL);
  return native->GetOriginalKey(env).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MdejbNQu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileKeyAndroid) {
  ProfileKeyAndroid* native = reinterpret_cast<ProfileKeyAndroid*>(nativeProfileKeyAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsOffTheRecord", false);
  return native->IsOffTheRecord(env);
}

JNI_GENERATOR_EXPORT jlong Java_J_N_M1kMd8V5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeProfileKeyAndroid) {
  ProfileKeyAndroid* native = reinterpret_cast<ProfileKeyAndroid*>(nativeProfileKeyAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSimpleFactoryKeyPointer", 0);
  return native->GetSimpleFactoryKeyPointer(env);
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_profiles_ProfileKey_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ProfileKey_create(JNIEnv* env, jlong
    nativeProfileKeyAndroid) {
  jclass clazz = org_chromium_chrome_browser_profiles_ProfileKey_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_profiles_ProfileKey_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/profiles/ProfileKey;",
          &g_org_chromium_chrome_browser_profiles_ProfileKey_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeProfileKeyAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_profiles_ProfileKey_onNativeDestroyed(nullptr);
static void Java_ProfileKey_onNativeDestroyed(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_profiles_ProfileKey_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_profiles_ProfileKey_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_chrome_browser_profiles_ProfileKey_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_profiles_ProfileKey_getNativePointer(nullptr);
static jlong Java_ProfileKey_getNativePointer(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_profiles_ProfileKey_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_profiles_ProfileKey_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePointer",
          "()J",
          &g_org_chromium_chrome_browser_profiles_ProfileKey_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_profiles_ProfileKey_JNI
