// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/sync/SyncServiceImpl

#ifndef org_chromium_chrome_browser_sync_SyncServiceImpl_JNI
#define org_chromium_chrome_browser_sync_SyncServiceImpl_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_sync_SyncServiceImpl[];
const char kClassPath_org_chromium_chrome_browser_sync_SyncServiceImpl[] =
    "org/chromium/chrome/browser/sync/SyncServiceImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_sync_SyncServiceImpl_clazz(nullptr);
#ifndef org_chromium_chrome_browser_sync_SyncServiceImpl_clazz_defined
#define org_chromium_chrome_browser_sync_SyncServiceImpl_clazz_defined
inline jclass org_chromium_chrome_browser_sync_SyncServiceImpl_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_sync_SyncServiceImpl,
      &g_org_chromium_chrome_browser_sync_SyncServiceImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_SyncServiceImpl_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mq2O1L55(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_SyncServiceImpl_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Ms9hWCjY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSyncRequested", false);
  return native->IsSyncRequested(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MYTq2YI9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jboolean requested) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSyncRequested");
  return native->SetSyncRequested(env, requested);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_McPXHM_00024R(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "CanSyncFeatureStart", false);
  return native->CanSyncFeatureStart(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MRz7OWfN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSyncFeatureEnabled", false);
  return native->IsSyncFeatureEnabled(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MbQJKXXr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSyncFeatureActive", false);
  return native->IsSyncFeatureActive(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M56mW_1xB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsSyncDisabledByEnterprisePolicy", false);
  return native->IsSyncDisabledByEnterprisePolicy(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MDAo3Ozm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEngineInitialized", false);
  return native->IsEngineInitialized(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MkcYkIa5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTransportStateActive", false);
  return native->IsTransportStateActive(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024maQ5d_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jboolean inProgress) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSetupInProgress");
  return native->SetSetupInProgress(env, inProgress);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M_1K26FRY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsFirstSetupComplete", false);
  return native->IsFirstSetupComplete(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDDo_000240ot(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jint syncFirstSetupCompleteSource) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetFirstSetupComplete");
  return native->SetFirstSetupComplete(env, syncFirstSetupCompleteSource);
}

JNI_GENERATOR_EXPORT jintArray Java_J_N_MVqF80Hk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetActiveDataTypes", NULL);
  return native->GetActiveDataTypes(env).Release();
}

JNI_GENERATOR_EXPORT jintArray Java_J_N_Me_00024_1G_13F(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetChosenDataTypes", NULL);
  return native->GetChosenDataTypes(env).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_Mn4DCKmu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jboolean syncEverything,
    jintArray modelTypeArray) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetChosenDataTypes");
  return native->SetChosenDataTypes(env, syncEverything, base::android::JavaParamRef<jintArray>(env,
      modelTypeArray));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MQNi8hO7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsCustomPassphraseAllowed", false);
  return native->IsCustomPassphraseAllowed(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MzPOLnaO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsEncryptEverythingEnabled", false);
  return native->IsEncryptEverythingEnabled(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MljitpQi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPassphraseRequiredForPreferredDataTypes", false);
  return native->IsPassphraseRequiredForPreferredDataTypes(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MUR3vHAY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTrustedVaultKeyRequired", false);
  return native->IsTrustedVaultKeyRequired(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MXx_00024a024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTrustedVaultKeyRequiredForPreferredDataTypes", false);
  return native->IsTrustedVaultKeyRequiredForPreferredDataTypes(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MTllqxqb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTrustedVaultRecoverabilityDegraded", false);
  return native->IsTrustedVaultRecoverabilityDegraded(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mlf1N2n_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsUsingExplicitPassphrase", false);
  return native->IsUsingExplicitPassphrase(env);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MWsjrqlA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPassphraseType", 0);
  return native->GetPassphraseType(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mr3aSNk6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jstring passphrase) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetEncryptionPassphrase");
  return native->SetEncryptionPassphrase(env, base::android::JavaParamRef<jstring>(env,
      passphrase));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MVem29BX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jstring passphrase) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDecryptionPassphrase", false);
  return native->SetDecryptionPassphrase(env, base::android::JavaParamRef<jstring>(env,
      passphrase));
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MiYQ8NoG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetExplicitPassphraseTime", 0);
  return native->GetExplicitPassphraseTime(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MP49bXG4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge,
    jobject callback) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllNodes");
  return native->GetAllNodes(env, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT jint Java_J_N_M6Zr_00024x1d(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAuthError", 0);
  return native->GetAuthError(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mmbpwv9L(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasUnrecoverableError", false);
  return native->HasUnrecoverableError(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MuE0jZeQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RequiresClientUpgrade", false);
  return native->RequiresClientUpgrade(env);
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MAPSa9re(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAccountInfo", NULL);
  return native->GetAccountInfo(env).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mb4wS4pL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasSyncConsent", false);
  return native->HasSyncConsent(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mdf1CYiG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsPassphrasePromptMutedForCurrentProductVersion", false);
  return native->IsPassphrasePromptMutedForCurrentProductVersion(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MODPLfHa(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "MarkPassphrasePromptMutedForCurrentProductVersion");
  return native->MarkPassphrasePromptMutedForCurrentProductVersion(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mlc5dpRY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasKeepEverythingSynced", false);
  return native->HasKeepEverythingSynced(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MI8FvT4_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ShouldOfferTrustedVaultOptIn", false);
  return native->ShouldOfferTrustedVaultOptIn(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M9jsQxVx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TriggerRefresh");
  return native->TriggerRefresh(env);
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MydhcRjm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeSyncServiceAndroidBridge) {
  SyncServiceAndroidBridge* native =
      reinterpret_cast<SyncServiceAndroidBridge*>(nativeSyncServiceAndroidBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastSyncedTimeForDebugging", 0);
  return native->GetLastSyncedTimeForDebugging(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_SyncServiceImpl_syncStateChanged(nullptr);
static void Java_SyncServiceImpl_syncStateChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_sync_SyncServiceImpl_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_sync_SyncServiceImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "syncStateChanged",
          "()V",
          &g_org_chromium_chrome_browser_sync_SyncServiceImpl_syncStateChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_sync_SyncServiceImpl_onGetAllNodesResult(nullptr);
static void Java_SyncServiceImpl_onGetAllNodesResult(JNIEnv* env, const
    base::android::JavaRef<jobject>& callback,
    const base::android::JavaRef<jstring>& serializedNodes) {
  jclass clazz = org_chromium_chrome_browser_sync_SyncServiceImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_sync_SyncServiceImpl_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onGetAllNodesResult",
          "(Lorg/chromium/base/Callback;Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_sync_SyncServiceImpl_onGetAllNodesResult);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callback.obj(), serializedNodes.obj());
}

#endif  // org_chromium_chrome_browser_sync_SyncServiceImpl_JNI
