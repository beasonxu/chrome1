// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_pinning.proto

#include "key_pinning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_key_pinning {
PROTOBUF_CONSTEXPR PinSet::PinSet(
    ::_pbi::ConstantInitialized)
  : static_spki_hashes_sha256_()
  , bad_static_spki_hashes_sha256_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , report_uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PinSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinSetDefaultTypeInternal() {}
  union {
    PinSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinSetDefaultTypeInternal _PinSet_default_instance_;
PROTOBUF_CONSTEXPR PinSetInfo::PinSetInfo(
    ::_pbi::ConstantInitialized)
  : hostname_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pinset_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , include_subdomains_(false){}
struct PinSetInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinSetInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinSetInfoDefaultTypeInternal() {}
  union {
    PinSetInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinSetInfoDefaultTypeInternal _PinSetInfo_default_instance_;
PROTOBUF_CONSTEXPR PinList::PinList(
    ::_pbi::ConstantInitialized)
  : pinsets_()
  , host_pins_()
  , timestamp_(nullptr)
  , compatibility_version_(uint64_t{0u}){}
struct PinListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PinListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PinListDefaultTypeInternal() {}
  union {
    PinList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PinListDefaultTypeInternal _PinList_default_instance_;
}  // namespace chrome_browser_key_pinning
namespace chrome_browser_key_pinning {

// ===================================================================

class PinSet::_Internal {
 public:
};

PinSet::PinSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  static_spki_hashes_sha256_(arena),
  bad_static_spki_hashes_sha256_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_key_pinning.PinSet)
}
PinSet::PinSet(const PinSet& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      static_spki_hashes_sha256_(from.static_spki_hashes_sha256_),
      bad_static_spki_hashes_sha256_(from.bad_static_spki_hashes_sha256_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  report_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    report_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_report_uri().empty()) {
    report_uri_.Set(from._internal_report_uri(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_key_pinning.PinSet)
}

inline void PinSet::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
report_uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  report_uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PinSet::~PinSet() {
  // @@protoc_insertion_point(destructor:chrome_browser_key_pinning.PinSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  report_uri_.Destroy();
}

void PinSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PinSet::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_key_pinning.PinSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  static_spki_hashes_sha256_.Clear();
  bad_static_spki_hashes_sha256_.Clear();
  name_.ClearToEmpty();
  report_uri_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* PinSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes static_spki_hashes_sha256 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_static_spki_hashes_sha256();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated bytes bad_static_spki_hashes_sha256 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bad_static_spki_hashes_sha256();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string report_uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_report_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PinSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_key_pinning.PinSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_key_pinning.PinSet.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated bytes static_spki_hashes_sha256 = 2;
  for (int i = 0, n = this->_internal_static_spki_hashes_sha256_size(); i < n; i++) {
    const auto& s = this->_internal_static_spki_hashes_sha256(i);
    target = stream->WriteBytes(2, s, target);
  }

  // repeated bytes bad_static_spki_hashes_sha256 = 3;
  for (int i = 0, n = this->_internal_bad_static_spki_hashes_sha256_size(); i < n; i++) {
    const auto& s = this->_internal_bad_static_spki_hashes_sha256(i);
    target = stream->WriteBytes(3, s, target);
  }

  // string report_uri = 4;
  if (!this->_internal_report_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_report_uri().data(), static_cast<int>(this->_internal_report_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_key_pinning.PinSet.report_uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_report_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_key_pinning.PinSet)
  return target;
}

size_t PinSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_key_pinning.PinSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes static_spki_hashes_sha256 = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(static_spki_hashes_sha256_.size());
  for (int i = 0, n = static_spki_hashes_sha256_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      static_spki_hashes_sha256_.Get(i));
  }

  // repeated bytes bad_static_spki_hashes_sha256 = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bad_static_spki_hashes_sha256_.size());
  for (int i = 0, n = bad_static_spki_hashes_sha256_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bad_static_spki_hashes_sha256_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string report_uri = 4;
  if (!this->_internal_report_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_report_uri());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinSet::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PinSet*>(
      &from));
}

void PinSet::MergeFrom(const PinSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_key_pinning.PinSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_spki_hashes_sha256_.MergeFrom(from.static_spki_hashes_sha256_);
  bad_static_spki_hashes_sha256_.MergeFrom(from.bad_static_spki_hashes_sha256_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_report_uri().empty()) {
    _internal_set_report_uri(from._internal_report_uri());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PinSet::CopyFrom(const PinSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_key_pinning.PinSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinSet::IsInitialized() const {
  return true;
}

void PinSet::InternalSwap(PinSet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  static_spki_hashes_sha256_.InternalSwap(&other->static_spki_hashes_sha256_);
  bad_static_spki_hashes_sha256_.InternalSwap(&other->bad_static_spki_hashes_sha256_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &report_uri_, lhs_arena,
      &other->report_uri_, rhs_arena
  );
}

std::string PinSet::GetTypeName() const {
  return "chrome_browser_key_pinning.PinSet";
}


// ===================================================================

class PinSetInfo::_Internal {
 public:
};

PinSetInfo::PinSetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_key_pinning.PinSetInfo)
}
PinSetInfo::PinSetInfo(const PinSetInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    hostname_.Set(from._internal_hostname(), 
      GetArenaForAllocation());
  }
  pinset_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pinset_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pinset_name().empty()) {
    pinset_name_.Set(from._internal_pinset_name(), 
      GetArenaForAllocation());
  }
  include_subdomains_ = from.include_subdomains_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_key_pinning.PinSetInfo)
}

inline void PinSetInfo::SharedCtor() {
hostname_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hostname_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pinset_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pinset_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
include_subdomains_ = false;
}

PinSetInfo::~PinSetInfo() {
  // @@protoc_insertion_point(destructor:chrome_browser_key_pinning.PinSetInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinSetInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hostname_.Destroy();
  pinset_name_.Destroy();
}

void PinSetInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PinSetInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_key_pinning.PinSetInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hostname_.ClearToEmpty();
  pinset_name_.ClearToEmpty();
  include_subdomains_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* PinSetInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string pinset_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pinset_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bool include_subdomains = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          include_subdomains_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PinSetInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_key_pinning.PinSetInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_key_pinning.PinSetInfo.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // string pinset_name = 2;
  if (!this->_internal_pinset_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pinset_name().data(), static_cast<int>(this->_internal_pinset_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_key_pinning.PinSetInfo.pinset_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pinset_name(), target);
  }

  // bool include_subdomains = 3;
  if (this->_internal_include_subdomains() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_include_subdomains(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_key_pinning.PinSetInfo)
  return target;
}

size_t PinSetInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_key_pinning.PinSetInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string pinset_name = 2;
  if (!this->_internal_pinset_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pinset_name());
  }

  // bool include_subdomains = 3;
  if (this->_internal_include_subdomains() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinSetInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PinSetInfo*>(
      &from));
}

void PinSetInfo::MergeFrom(const PinSetInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_key_pinning.PinSetInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hostname().empty()) {
    _internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_pinset_name().empty()) {
    _internal_set_pinset_name(from._internal_pinset_name());
  }
  if (from._internal_include_subdomains() != 0) {
    _internal_set_include_subdomains(from._internal_include_subdomains());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PinSetInfo::CopyFrom(const PinSetInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_key_pinning.PinSetInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinSetInfo::IsInitialized() const {
  return true;
}

void PinSetInfo::InternalSwap(PinSetInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hostname_, lhs_arena,
      &other->hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pinset_name_, lhs_arena,
      &other->pinset_name_, rhs_arena
  );
  swap(include_subdomains_, other->include_subdomains_);
}

std::string PinSetInfo::GetTypeName() const {
  return "chrome_browser_key_pinning.PinSetInfo";
}


// ===================================================================

class PinList::_Internal {
 public:
  static const ::chrome_browser_key_pinning::KPTimestamp& timestamp(const PinList* msg);
};

const ::chrome_browser_key_pinning::KPTimestamp&
PinList::_Internal::timestamp(const PinList* msg) {
  return *msg->timestamp_;
}
void PinList::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
PinList::PinList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  pinsets_(arena),
  host_pins_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_key_pinning.PinList)
}
PinList::PinList(const PinList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      pinsets_(from.pinsets_),
      host_pins_(from.host_pins_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::chrome_browser_key_pinning::KPTimestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  compatibility_version_ = from.compatibility_version_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_key_pinning.PinList)
}

inline void PinList::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&compatibility_version_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(compatibility_version_));
}

PinList::~PinList() {
  // @@protoc_insertion_point(destructor:chrome_browser_key_pinning.PinList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PinList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete timestamp_;
}

void PinList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PinList::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_key_pinning.PinList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pinsets_.Clear();
  host_pins_.Clear();
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  compatibility_version_ = uint64_t{0u};
  _internal_metadata_.Clear<std::string>();
}

const char* PinList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chrome_browser_key_pinning.KPTimestamp timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 compatibility_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          compatibility_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .chrome_browser_key_pinning.PinSet pinsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pinsets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .chrome_browser_key_pinning.PinSetInfo host_pins = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_host_pins(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PinList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_key_pinning.PinList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chrome_browser_key_pinning.KPTimestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::timestamp(this),
        _Internal::timestamp(this).GetCachedSize(), target, stream);
  }

  // uint64 compatibility_version = 2;
  if (this->_internal_compatibility_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_compatibility_version(), target);
  }

  // repeated .chrome_browser_key_pinning.PinSet pinsets = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_pinsets_size()); i < n; i++) {
    const auto& repfield = this->_internal_pinsets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .chrome_browser_key_pinning.PinSetInfo host_pins = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_host_pins_size()); i < n; i++) {
    const auto& repfield = this->_internal_host_pins(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_key_pinning.PinList)
  return target;
}

size_t PinList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_key_pinning.PinList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .chrome_browser_key_pinning.PinSet pinsets = 3;
  total_size += 1UL * this->_internal_pinsets_size();
  for (const auto& msg : this->pinsets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .chrome_browser_key_pinning.PinSetInfo host_pins = 4;
  total_size += 1UL * this->_internal_host_pins_size();
  for (const auto& msg : this->host_pins_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .chrome_browser_key_pinning.KPTimestamp timestamp = 1;
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // uint64 compatibility_version = 2;
  if (this->_internal_compatibility_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_compatibility_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PinList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PinList*>(
      &from));
}

void PinList::MergeFrom(const PinList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_key_pinning.PinList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  pinsets_.MergeFrom(from.pinsets_);
  host_pins_.MergeFrom(from.host_pins_);
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::chrome_browser_key_pinning::KPTimestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_compatibility_version() != 0) {
    _internal_set_compatibility_version(from._internal_compatibility_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PinList::CopyFrom(const PinList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_key_pinning.PinList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PinList::IsInitialized() const {
  return true;
}

void PinList::InternalSwap(PinList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  pinsets_.InternalSwap(&other->pinsets_);
  host_pins_.InternalSwap(&other->host_pins_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PinList, compatibility_version_)
      + sizeof(PinList::compatibility_version_)
      - PROTOBUF_FIELD_OFFSET(PinList, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

std::string PinList::GetTypeName() const {
  return "chrome_browser_key_pinning.PinList";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_key_pinning
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_key_pinning::PinSet*
Arena::CreateMaybeMessage< ::chrome_browser_key_pinning::PinSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_key_pinning::PinSet >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_key_pinning::PinSetInfo*
Arena::CreateMaybeMessage< ::chrome_browser_key_pinning::PinSetInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_key_pinning::PinSetInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_key_pinning::PinList*
Arena::CreateMaybeMessage< ::chrome_browser_key_pinning::PinList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_key_pinning::PinList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
