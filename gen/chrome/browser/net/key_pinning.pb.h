// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_pinning.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_key_5fpinning_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_key_5fpinning_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "kp_timestamp.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_key_5fpinning_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_key_5fpinning_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_key_pinning {
class PinList;
struct PinListDefaultTypeInternal;
extern PinListDefaultTypeInternal _PinList_default_instance_;
class PinSet;
struct PinSetDefaultTypeInternal;
extern PinSetDefaultTypeInternal _PinSet_default_instance_;
class PinSetInfo;
struct PinSetInfoDefaultTypeInternal;
extern PinSetInfoDefaultTypeInternal _PinSetInfo_default_instance_;
}  // namespace chrome_browser_key_pinning
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_key_pinning::PinList* Arena::CreateMaybeMessage<::chrome_browser_key_pinning::PinList>(Arena*);
template<> ::chrome_browser_key_pinning::PinSet* Arena::CreateMaybeMessage<::chrome_browser_key_pinning::PinSet>(Arena*);
template<> ::chrome_browser_key_pinning::PinSetInfo* Arena::CreateMaybeMessage<::chrome_browser_key_pinning::PinSetInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_key_pinning {

// ===================================================================

class PinSet final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_key_pinning.PinSet) */ {
 public:
  inline PinSet() : PinSet(nullptr) {}
  ~PinSet() override;
  explicit PROTOBUF_CONSTEXPR PinSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PinSet(const PinSet& from);
  PinSet(PinSet&& from) noexcept
    : PinSet() {
    *this = ::std::move(from);
  }

  inline PinSet& operator=(const PinSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinSet& operator=(PinSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PinSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const PinSet* internal_default_instance() {
    return reinterpret_cast<const PinSet*>(
               &_PinSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PinSet& a, PinSet& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PinSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PinSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PinSet>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PinSet& from);
  void MergeFrom(const PinSet& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PinSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_key_pinning.PinSet";
  }
  protected:
  explicit PinSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStaticSpkiHashesSha256FieldNumber = 2,
    kBadStaticSpkiHashesSha256FieldNumber = 3,
    kNameFieldNumber = 1,
    kReportUriFieldNumber = 4,
  };
  // repeated bytes static_spki_hashes_sha256 = 2;
  int static_spki_hashes_sha256_size() const;
  private:
  int _internal_static_spki_hashes_sha256_size() const;
  public:
  void clear_static_spki_hashes_sha256();
  const std::string& static_spki_hashes_sha256(int index) const;
  std::string* mutable_static_spki_hashes_sha256(int index);
  void set_static_spki_hashes_sha256(int index, const std::string& value);
  void set_static_spki_hashes_sha256(int index, std::string&& value);
  void set_static_spki_hashes_sha256(int index, const char* value);
  void set_static_spki_hashes_sha256(int index, const void* value, size_t size);
  std::string* add_static_spki_hashes_sha256();
  void add_static_spki_hashes_sha256(const std::string& value);
  void add_static_spki_hashes_sha256(std::string&& value);
  void add_static_spki_hashes_sha256(const char* value);
  void add_static_spki_hashes_sha256(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& static_spki_hashes_sha256() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_static_spki_hashes_sha256();
  private:
  const std::string& _internal_static_spki_hashes_sha256(int index) const;
  std::string* _internal_add_static_spki_hashes_sha256();
  public:

  // repeated bytes bad_static_spki_hashes_sha256 = 3;
  int bad_static_spki_hashes_sha256_size() const;
  private:
  int _internal_bad_static_spki_hashes_sha256_size() const;
  public:
  void clear_bad_static_spki_hashes_sha256();
  const std::string& bad_static_spki_hashes_sha256(int index) const;
  std::string* mutable_bad_static_spki_hashes_sha256(int index);
  void set_bad_static_spki_hashes_sha256(int index, const std::string& value);
  void set_bad_static_spki_hashes_sha256(int index, std::string&& value);
  void set_bad_static_spki_hashes_sha256(int index, const char* value);
  void set_bad_static_spki_hashes_sha256(int index, const void* value, size_t size);
  std::string* add_bad_static_spki_hashes_sha256();
  void add_bad_static_spki_hashes_sha256(const std::string& value);
  void add_bad_static_spki_hashes_sha256(std::string&& value);
  void add_bad_static_spki_hashes_sha256(const char* value);
  void add_bad_static_spki_hashes_sha256(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bad_static_spki_hashes_sha256() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bad_static_spki_hashes_sha256();
  private:
  const std::string& _internal_bad_static_spki_hashes_sha256(int index) const;
  std::string* _internal_add_bad_static_spki_hashes_sha256();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string report_uri = 4;
  void clear_report_uri();
  const std::string& report_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_uri();
  PROTOBUF_NODISCARD std::string* release_report_uri();
  void set_allocated_report_uri(std::string* report_uri);
  private:
  const std::string& _internal_report_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_uri(const std::string& value);
  std::string* _internal_mutable_report_uri();
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_key_pinning.PinSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> static_spki_hashes_sha256_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bad_static_spki_hashes_sha256_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fpinning_2eproto;
};
// -------------------------------------------------------------------

class PinSetInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_key_pinning.PinSetInfo) */ {
 public:
  inline PinSetInfo() : PinSetInfo(nullptr) {}
  ~PinSetInfo() override;
  explicit PROTOBUF_CONSTEXPR PinSetInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PinSetInfo(const PinSetInfo& from);
  PinSetInfo(PinSetInfo&& from) noexcept
    : PinSetInfo() {
    *this = ::std::move(from);
  }

  inline PinSetInfo& operator=(const PinSetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinSetInfo& operator=(PinSetInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PinSetInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PinSetInfo* internal_default_instance() {
    return reinterpret_cast<const PinSetInfo*>(
               &_PinSetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PinSetInfo& a, PinSetInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PinSetInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinSetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PinSetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PinSetInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PinSetInfo& from);
  void MergeFrom(const PinSetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PinSetInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_key_pinning.PinSetInfo";
  }
  protected:
  explicit PinSetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostnameFieldNumber = 1,
    kPinsetNameFieldNumber = 2,
    kIncludeSubdomainsFieldNumber = 3,
  };
  // string hostname = 1;
  void clear_hostname();
  const std::string& hostname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_hostname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_hostname();
  PROTOBUF_NODISCARD std::string* release_hostname();
  void set_allocated_hostname(std::string* hostname);
  private:
  const std::string& _internal_hostname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hostname(const std::string& value);
  std::string* _internal_mutable_hostname();
  public:

  // string pinset_name = 2;
  void clear_pinset_name();
  const std::string& pinset_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pinset_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pinset_name();
  PROTOBUF_NODISCARD std::string* release_pinset_name();
  void set_allocated_pinset_name(std::string* pinset_name);
  private:
  const std::string& _internal_pinset_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pinset_name(const std::string& value);
  std::string* _internal_mutable_pinset_name();
  public:

  // bool include_subdomains = 3;
  void clear_include_subdomains();
  bool include_subdomains() const;
  void set_include_subdomains(bool value);
  private:
  bool _internal_include_subdomains() const;
  void _internal_set_include_subdomains(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_key_pinning.PinSetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hostname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pinset_name_;
  bool include_subdomains_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fpinning_2eproto;
};
// -------------------------------------------------------------------

class PinList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_key_pinning.PinList) */ {
 public:
  inline PinList() : PinList(nullptr) {}
  ~PinList() override;
  explicit PROTOBUF_CONSTEXPR PinList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PinList(const PinList& from);
  PinList(PinList&& from) noexcept
    : PinList() {
    *this = ::std::move(from);
  }

  inline PinList& operator=(const PinList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PinList& operator=(PinList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PinList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PinList* internal_default_instance() {
    return reinterpret_cast<const PinList*>(
               &_PinList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PinList& a, PinList& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PinList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PinList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PinList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PinList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PinList& from);
  void MergeFrom(const PinList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PinList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_key_pinning.PinList";
  }
  protected:
  explicit PinList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPinsetsFieldNumber = 3,
    kHostPinsFieldNumber = 4,
    kTimestampFieldNumber = 1,
    kCompatibilityVersionFieldNumber = 2,
  };
  // repeated .chrome_browser_key_pinning.PinSet pinsets = 3;
  int pinsets_size() const;
  private:
  int _internal_pinsets_size() const;
  public:
  void clear_pinsets();
  ::chrome_browser_key_pinning::PinSet* mutable_pinsets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSet >*
      mutable_pinsets();
  private:
  const ::chrome_browser_key_pinning::PinSet& _internal_pinsets(int index) const;
  ::chrome_browser_key_pinning::PinSet* _internal_add_pinsets();
  public:
  const ::chrome_browser_key_pinning::PinSet& pinsets(int index) const;
  ::chrome_browser_key_pinning::PinSet* add_pinsets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSet >&
      pinsets() const;

  // repeated .chrome_browser_key_pinning.PinSetInfo host_pins = 4;
  int host_pins_size() const;
  private:
  int _internal_host_pins_size() const;
  public:
  void clear_host_pins();
  ::chrome_browser_key_pinning::PinSetInfo* mutable_host_pins(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSetInfo >*
      mutable_host_pins();
  private:
  const ::chrome_browser_key_pinning::PinSetInfo& _internal_host_pins(int index) const;
  ::chrome_browser_key_pinning::PinSetInfo* _internal_add_host_pins();
  public:
  const ::chrome_browser_key_pinning::PinSetInfo& host_pins(int index) const;
  ::chrome_browser_key_pinning::PinSetInfo* add_host_pins();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSetInfo >&
      host_pins() const;

  // .chrome_browser_key_pinning.KPTimestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::chrome_browser_key_pinning::KPTimestamp& timestamp() const;
  PROTOBUF_NODISCARD ::chrome_browser_key_pinning::KPTimestamp* release_timestamp();
  ::chrome_browser_key_pinning::KPTimestamp* mutable_timestamp();
  void set_allocated_timestamp(::chrome_browser_key_pinning::KPTimestamp* timestamp);
  private:
  const ::chrome_browser_key_pinning::KPTimestamp& _internal_timestamp() const;
  ::chrome_browser_key_pinning::KPTimestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::chrome_browser_key_pinning::KPTimestamp* timestamp);
  ::chrome_browser_key_pinning::KPTimestamp* unsafe_arena_release_timestamp();

  // uint64 compatibility_version = 2;
  void clear_compatibility_version();
  uint64_t compatibility_version() const;
  void set_compatibility_version(uint64_t value);
  private:
  uint64_t _internal_compatibility_version() const;
  void _internal_set_compatibility_version(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_key_pinning.PinList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSet > pinsets_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSetInfo > host_pins_;
  ::chrome_browser_key_pinning::KPTimestamp* timestamp_;
  uint64_t compatibility_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_key_5fpinning_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PinSet

// string name = 1;
inline void PinSet::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PinSet::name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSet.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PinSet::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSet.name)
}
inline std::string* PinSet::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinSet.name)
  return _s;
}
inline const std::string& PinSet::_internal_name() const {
  return name_.Get();
}
inline void PinSet::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PinSet::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PinSet::release_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_key_pinning.PinSet.name)
  return name_.Release();
}
inline void PinSet::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_key_pinning.PinSet.name)
}

// repeated bytes static_spki_hashes_sha256 = 2;
inline int PinSet::_internal_static_spki_hashes_sha256_size() const {
  return static_spki_hashes_sha256_.size();
}
inline int PinSet::static_spki_hashes_sha256_size() const {
  return _internal_static_spki_hashes_sha256_size();
}
inline void PinSet::clear_static_spki_hashes_sha256() {
  static_spki_hashes_sha256_.Clear();
}
inline std::string* PinSet::add_static_spki_hashes_sha256() {
  std::string* _s = _internal_add_static_spki_hashes_sha256();
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
  return _s;
}
inline const std::string& PinSet::_internal_static_spki_hashes_sha256(int index) const {
  return static_spki_hashes_sha256_.Get(index);
}
inline const std::string& PinSet::static_spki_hashes_sha256(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
  return _internal_static_spki_hashes_sha256(index);
}
inline std::string* PinSet::mutable_static_spki_hashes_sha256(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
  return static_spki_hashes_sha256_.Mutable(index);
}
inline void PinSet::set_static_spki_hashes_sha256(int index, const std::string& value) {
  static_spki_hashes_sha256_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline void PinSet::set_static_spki_hashes_sha256(int index, std::string&& value) {
  static_spki_hashes_sha256_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline void PinSet::set_static_spki_hashes_sha256(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  static_spki_hashes_sha256_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline void PinSet::set_static_spki_hashes_sha256(int index, const void* value, size_t size) {
  static_spki_hashes_sha256_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline std::string* PinSet::_internal_add_static_spki_hashes_sha256() {
  return static_spki_hashes_sha256_.Add();
}
inline void PinSet::add_static_spki_hashes_sha256(const std::string& value) {
  static_spki_hashes_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline void PinSet::add_static_spki_hashes_sha256(std::string&& value) {
  static_spki_hashes_sha256_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline void PinSet::add_static_spki_hashes_sha256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  static_spki_hashes_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline void PinSet::add_static_spki_hashes_sha256(const void* value, size_t size) {
  static_spki_hashes_sha256_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PinSet::static_spki_hashes_sha256() const {
  // @@protoc_insertion_point(field_list:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
  return static_spki_hashes_sha256_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PinSet::mutable_static_spki_hashes_sha256() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_key_pinning.PinSet.static_spki_hashes_sha256)
  return &static_spki_hashes_sha256_;
}

// repeated bytes bad_static_spki_hashes_sha256 = 3;
inline int PinSet::_internal_bad_static_spki_hashes_sha256_size() const {
  return bad_static_spki_hashes_sha256_.size();
}
inline int PinSet::bad_static_spki_hashes_sha256_size() const {
  return _internal_bad_static_spki_hashes_sha256_size();
}
inline void PinSet::clear_bad_static_spki_hashes_sha256() {
  bad_static_spki_hashes_sha256_.Clear();
}
inline std::string* PinSet::add_bad_static_spki_hashes_sha256() {
  std::string* _s = _internal_add_bad_static_spki_hashes_sha256();
  // @@protoc_insertion_point(field_add_mutable:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
  return _s;
}
inline const std::string& PinSet::_internal_bad_static_spki_hashes_sha256(int index) const {
  return bad_static_spki_hashes_sha256_.Get(index);
}
inline const std::string& PinSet::bad_static_spki_hashes_sha256(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
  return _internal_bad_static_spki_hashes_sha256(index);
}
inline std::string* PinSet::mutable_bad_static_spki_hashes_sha256(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
  return bad_static_spki_hashes_sha256_.Mutable(index);
}
inline void PinSet::set_bad_static_spki_hashes_sha256(int index, const std::string& value) {
  bad_static_spki_hashes_sha256_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline void PinSet::set_bad_static_spki_hashes_sha256(int index, std::string&& value) {
  bad_static_spki_hashes_sha256_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline void PinSet::set_bad_static_spki_hashes_sha256(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bad_static_spki_hashes_sha256_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline void PinSet::set_bad_static_spki_hashes_sha256(int index, const void* value, size_t size) {
  bad_static_spki_hashes_sha256_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline std::string* PinSet::_internal_add_bad_static_spki_hashes_sha256() {
  return bad_static_spki_hashes_sha256_.Add();
}
inline void PinSet::add_bad_static_spki_hashes_sha256(const std::string& value) {
  bad_static_spki_hashes_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline void PinSet::add_bad_static_spki_hashes_sha256(std::string&& value) {
  bad_static_spki_hashes_sha256_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline void PinSet::add_bad_static_spki_hashes_sha256(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bad_static_spki_hashes_sha256_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline void PinSet::add_bad_static_spki_hashes_sha256(const void* value, size_t size) {
  bad_static_spki_hashes_sha256_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
PinSet::bad_static_spki_hashes_sha256() const {
  // @@protoc_insertion_point(field_list:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
  return bad_static_spki_hashes_sha256_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
PinSet::mutable_bad_static_spki_hashes_sha256() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_key_pinning.PinSet.bad_static_spki_hashes_sha256)
  return &bad_static_spki_hashes_sha256_;
}

// string report_uri = 4;
inline void PinSet::clear_report_uri() {
  report_uri_.ClearToEmpty();
}
inline const std::string& PinSet::report_uri() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSet.report_uri)
  return _internal_report_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PinSet::set_report_uri(ArgT0&& arg0, ArgT... args) {
 
 report_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSet.report_uri)
}
inline std::string* PinSet::mutable_report_uri() {
  std::string* _s = _internal_mutable_report_uri();
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinSet.report_uri)
  return _s;
}
inline const std::string& PinSet::_internal_report_uri() const {
  return report_uri_.Get();
}
inline void PinSet::_internal_set_report_uri(const std::string& value) {
  
  report_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* PinSet::_internal_mutable_report_uri() {
  
  return report_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* PinSet::release_report_uri() {
  // @@protoc_insertion_point(field_release:chrome_browser_key_pinning.PinSet.report_uri)
  return report_uri_.Release();
}
inline void PinSet::set_allocated_report_uri(std::string* report_uri) {
  if (report_uri != nullptr) {
    
  } else {
    
  }
  report_uri_.SetAllocated(report_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (report_uri_.IsDefault()) {
    report_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_key_pinning.PinSet.report_uri)
}

// -------------------------------------------------------------------

// PinSetInfo

// string hostname = 1;
inline void PinSetInfo::clear_hostname() {
  hostname_.ClearToEmpty();
}
inline const std::string& PinSetInfo::hostname() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSetInfo.hostname)
  return _internal_hostname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PinSetInfo::set_hostname(ArgT0&& arg0, ArgT... args) {
 
 hostname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSetInfo.hostname)
}
inline std::string* PinSetInfo::mutable_hostname() {
  std::string* _s = _internal_mutable_hostname();
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinSetInfo.hostname)
  return _s;
}
inline const std::string& PinSetInfo::_internal_hostname() const {
  return hostname_.Get();
}
inline void PinSetInfo::_internal_set_hostname(const std::string& value) {
  
  hostname_.Set(value, GetArenaForAllocation());
}
inline std::string* PinSetInfo::_internal_mutable_hostname() {
  
  return hostname_.Mutable(GetArenaForAllocation());
}
inline std::string* PinSetInfo::release_hostname() {
  // @@protoc_insertion_point(field_release:chrome_browser_key_pinning.PinSetInfo.hostname)
  return hostname_.Release();
}
inline void PinSetInfo::set_allocated_hostname(std::string* hostname) {
  if (hostname != nullptr) {
    
  } else {
    
  }
  hostname_.SetAllocated(hostname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (hostname_.IsDefault()) {
    hostname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_key_pinning.PinSetInfo.hostname)
}

// string pinset_name = 2;
inline void PinSetInfo::clear_pinset_name() {
  pinset_name_.ClearToEmpty();
}
inline const std::string& PinSetInfo::pinset_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSetInfo.pinset_name)
  return _internal_pinset_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PinSetInfo::set_pinset_name(ArgT0&& arg0, ArgT... args) {
 
 pinset_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSetInfo.pinset_name)
}
inline std::string* PinSetInfo::mutable_pinset_name() {
  std::string* _s = _internal_mutable_pinset_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinSetInfo.pinset_name)
  return _s;
}
inline const std::string& PinSetInfo::_internal_pinset_name() const {
  return pinset_name_.Get();
}
inline void PinSetInfo::_internal_set_pinset_name(const std::string& value) {
  
  pinset_name_.Set(value, GetArenaForAllocation());
}
inline std::string* PinSetInfo::_internal_mutable_pinset_name() {
  
  return pinset_name_.Mutable(GetArenaForAllocation());
}
inline std::string* PinSetInfo::release_pinset_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_key_pinning.PinSetInfo.pinset_name)
  return pinset_name_.Release();
}
inline void PinSetInfo::set_allocated_pinset_name(std::string* pinset_name) {
  if (pinset_name != nullptr) {
    
  } else {
    
  }
  pinset_name_.SetAllocated(pinset_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pinset_name_.IsDefault()) {
    pinset_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_key_pinning.PinSetInfo.pinset_name)
}

// bool include_subdomains = 3;
inline void PinSetInfo::clear_include_subdomains() {
  include_subdomains_ = false;
}
inline bool PinSetInfo::_internal_include_subdomains() const {
  return include_subdomains_;
}
inline bool PinSetInfo::include_subdomains() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinSetInfo.include_subdomains)
  return _internal_include_subdomains();
}
inline void PinSetInfo::_internal_set_include_subdomains(bool value) {
  
  include_subdomains_ = value;
}
inline void PinSetInfo::set_include_subdomains(bool value) {
  _internal_set_include_subdomains(value);
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinSetInfo.include_subdomains)
}

// -------------------------------------------------------------------

// PinList

// .chrome_browser_key_pinning.KPTimestamp timestamp = 1;
inline bool PinList::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool PinList::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::chrome_browser_key_pinning::KPTimestamp& PinList::_internal_timestamp() const {
  const ::chrome_browser_key_pinning::KPTimestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::chrome_browser_key_pinning::KPTimestamp&>(
      ::chrome_browser_key_pinning::_KPTimestamp_default_instance_);
}
inline const ::chrome_browser_key_pinning::KPTimestamp& PinList::timestamp() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinList.timestamp)
  return _internal_timestamp();
}
inline void PinList::unsafe_arena_set_allocated_timestamp(
    ::chrome_browser_key_pinning::KPTimestamp* timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chrome_browser_key_pinning.PinList.timestamp)
}
inline ::chrome_browser_key_pinning::KPTimestamp* PinList::release_timestamp() {
  
  ::chrome_browser_key_pinning::KPTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chrome_browser_key_pinning::KPTimestamp* PinList::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:chrome_browser_key_pinning.PinList.timestamp)
  
  ::chrome_browser_key_pinning::KPTimestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::chrome_browser_key_pinning::KPTimestamp* PinList::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_key_pinning::KPTimestamp>(GetArenaForAllocation());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::chrome_browser_key_pinning::KPTimestamp* PinList::mutable_timestamp() {
  ::chrome_browser_key_pinning::KPTimestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinList.timestamp)
  return _msg;
}
inline void PinList::set_allocated_timestamp(::chrome_browser_key_pinning::KPTimestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp));
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_key_pinning.PinList.timestamp)
}

// uint64 compatibility_version = 2;
inline void PinList::clear_compatibility_version() {
  compatibility_version_ = uint64_t{0u};
}
inline uint64_t PinList::_internal_compatibility_version() const {
  return compatibility_version_;
}
inline uint64_t PinList::compatibility_version() const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinList.compatibility_version)
  return _internal_compatibility_version();
}
inline void PinList::_internal_set_compatibility_version(uint64_t value) {
  
  compatibility_version_ = value;
}
inline void PinList::set_compatibility_version(uint64_t value) {
  _internal_set_compatibility_version(value);
  // @@protoc_insertion_point(field_set:chrome_browser_key_pinning.PinList.compatibility_version)
}

// repeated .chrome_browser_key_pinning.PinSet pinsets = 3;
inline int PinList::_internal_pinsets_size() const {
  return pinsets_.size();
}
inline int PinList::pinsets_size() const {
  return _internal_pinsets_size();
}
inline void PinList::clear_pinsets() {
  pinsets_.Clear();
}
inline ::chrome_browser_key_pinning::PinSet* PinList::mutable_pinsets(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinList.pinsets)
  return pinsets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSet >*
PinList::mutable_pinsets() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_key_pinning.PinList.pinsets)
  return &pinsets_;
}
inline const ::chrome_browser_key_pinning::PinSet& PinList::_internal_pinsets(int index) const {
  return pinsets_.Get(index);
}
inline const ::chrome_browser_key_pinning::PinSet& PinList::pinsets(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinList.pinsets)
  return _internal_pinsets(index);
}
inline ::chrome_browser_key_pinning::PinSet* PinList::_internal_add_pinsets() {
  return pinsets_.Add();
}
inline ::chrome_browser_key_pinning::PinSet* PinList::add_pinsets() {
  ::chrome_browser_key_pinning::PinSet* _add = _internal_add_pinsets();
  // @@protoc_insertion_point(field_add:chrome_browser_key_pinning.PinList.pinsets)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSet >&
PinList::pinsets() const {
  // @@protoc_insertion_point(field_list:chrome_browser_key_pinning.PinList.pinsets)
  return pinsets_;
}

// repeated .chrome_browser_key_pinning.PinSetInfo host_pins = 4;
inline int PinList::_internal_host_pins_size() const {
  return host_pins_.size();
}
inline int PinList::host_pins_size() const {
  return _internal_host_pins_size();
}
inline void PinList::clear_host_pins() {
  host_pins_.Clear();
}
inline ::chrome_browser_key_pinning::PinSetInfo* PinList::mutable_host_pins(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_key_pinning.PinList.host_pins)
  return host_pins_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSetInfo >*
PinList::mutable_host_pins() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_key_pinning.PinList.host_pins)
  return &host_pins_;
}
inline const ::chrome_browser_key_pinning::PinSetInfo& PinList::_internal_host_pins(int index) const {
  return host_pins_.Get(index);
}
inline const ::chrome_browser_key_pinning::PinSetInfo& PinList::host_pins(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_key_pinning.PinList.host_pins)
  return _internal_host_pins(index);
}
inline ::chrome_browser_key_pinning::PinSetInfo* PinList::_internal_add_host_pins() {
  return host_pins_.Add();
}
inline ::chrome_browser_key_pinning::PinSetInfo* PinList::add_host_pins() {
  ::chrome_browser_key_pinning::PinSetInfo* _add = _internal_add_host_pins();
  // @@protoc_insertion_point(field_add:chrome_browser_key_pinning.PinList.host_pins)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_key_pinning::PinSetInfo >&
PinList::host_pins() const {
  // @@protoc_insertion_point(field_list:chrome_browser_key_pinning.PinList.host_pins)
  return host_pins_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_key_pinning

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_key_5fpinning_2eproto
