// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: probe_message.proto

#include "probe_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_net {
PROTOBUF_CONSTEXPR ProbePacket_Header::ProbePacket_Header(
    ::_pbi::ConstantInitialized)
  : version_(0u)
  , checksum_(0u)
  , type_(0)
{}
struct ProbePacket_HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProbePacket_HeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProbePacket_HeaderDefaultTypeInternal() {}
  union {
    ProbePacket_Header _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProbePacket_HeaderDefaultTypeInternal _ProbePacket_Header_default_instance_;
PROTOBUF_CONSTEXPR ProbePacket_Token::ProbePacket_Token(
    ::_pbi::ConstantInitialized)
  : hash_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_micros_(uint64_t{0u}){}
struct ProbePacket_TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProbePacket_TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProbePacket_TokenDefaultTypeInternal() {}
  union {
    ProbePacket_Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProbePacket_TokenDefaultTypeInternal _ProbePacket_Token_default_instance_;
PROTOBUF_CONSTEXPR ProbePacket::ProbePacket(
    ::_pbi::ConstantInitialized)
  : padding_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , header_(nullptr)
  , token_(nullptr)
  , group_id_(0u)
  , packet_index_(0u)
  , probe_size_bytes_(0u)
  , pacing_interval_micros_(0u)
  , server_processing_micros_(int64_t{0})
  , number_probe_packets_(0u){}
struct ProbePacketDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProbePacketDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProbePacketDefaultTypeInternal() {}
  union {
    ProbePacket _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProbePacketDefaultTypeInternal _ProbePacket_default_instance_;
}  // namespace chrome_browser_net
namespace chrome_browser_net {
bool ProbePacket_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ProbePacket_Type_strings[5] = {};

static const char ProbePacket_Type_names[] =
  "HELLO_REPLY"
  "HELLO_REQUEST"
  "PROBE_REPLY"
  "PROBE_REQUEST"
  "UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ProbePacket_Type_entries[] = {
  { {ProbePacket_Type_names + 0, 11}, 2 },
  { {ProbePacket_Type_names + 11, 13}, 1 },
  { {ProbePacket_Type_names + 24, 11}, 4 },
  { {ProbePacket_Type_names + 35, 13}, 3 },
  { {ProbePacket_Type_names + 48, 7}, 0 },
};

static const int ProbePacket_Type_entries_by_number[] = {
  4, // 0 -> UNKNOWN
  1, // 1 -> HELLO_REQUEST
  0, // 2 -> HELLO_REPLY
  3, // 3 -> PROBE_REQUEST
  2, // 4 -> PROBE_REPLY
};

const std::string& ProbePacket_Type_Name(
    ProbePacket_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ProbePacket_Type_entries,
          ProbePacket_Type_entries_by_number,
          5, ProbePacket_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ProbePacket_Type_entries,
      ProbePacket_Type_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ProbePacket_Type_strings[idx].get();
}
bool ProbePacket_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProbePacket_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ProbePacket_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ProbePacket_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProbePacket_Type ProbePacket::UNKNOWN;
constexpr ProbePacket_Type ProbePacket::HELLO_REQUEST;
constexpr ProbePacket_Type ProbePacket::HELLO_REPLY;
constexpr ProbePacket_Type ProbePacket::PROBE_REQUEST;
constexpr ProbePacket_Type ProbePacket::PROBE_REPLY;
constexpr ProbePacket_Type ProbePacket::Type_MIN;
constexpr ProbePacket_Type ProbePacket::Type_MAX;
constexpr int ProbePacket::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProbePacket_Header::_Internal {
 public:
  using HasBits = decltype(std::declval<ProbePacket_Header>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_checksum(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ProbePacket_Header::ProbePacket_Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_net.ProbePacket.Header)
}
ProbePacket_Header::ProbePacket_Header(const ProbePacket_Header& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_net.ProbePacket.Header)
}

inline void ProbePacket_Header::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&version_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_)) + sizeof(type_));
}

ProbePacket_Header::~ProbePacket_Header() {
  // @@protoc_insertion_point(destructor:chrome_browser_net.ProbePacket.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProbePacket_Header::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProbePacket_Header::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProbePacket_Header::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_net.ProbePacket.Header)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&type_) -
        reinterpret_cast<char*>(&version_)) + sizeof(type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProbePacket_Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 checksum = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_checksum(&has_bits);
          checksum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .chrome_browser_net.ProbePacket.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::chrome_browser_net::ProbePacket_Type_IsValid(val))) {
            _internal_set_type(static_cast<::chrome_browser_net::ProbePacket_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProbePacket_Header::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_net.ProbePacket.Header)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version(), target);
  }

  // optional uint32 checksum = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_checksum(), target);
  }

  // optional .chrome_browser_net.ProbePacket.Type type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_net.ProbePacket.Header)
  return target;
}

size_t ProbePacket_Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_net.ProbePacket.Header)
  size_t total_size = 0;

  // required uint32 version = 1;
  if (_internal_has_version()) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 checksum = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_checksum());
    }

    // optional .chrome_browser_net.ProbePacket.Type type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbePacket_Header::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProbePacket_Header*>(
      &from));
}

void ProbePacket_Header::MergeFrom(const ProbePacket_Header& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_net.ProbePacket.Header)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000002u) {
      checksum_ = from.checksum_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProbePacket_Header::CopyFrom(const ProbePacket_Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_net.ProbePacket.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbePacket_Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProbePacket_Header::InternalSwap(ProbePacket_Header* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProbePacket_Header, type_)
      + sizeof(ProbePacket_Header::type_)
      - PROTOBUF_FIELD_OFFSET(ProbePacket_Header, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

std::string ProbePacket_Header::GetTypeName() const {
  return "chrome_browser_net.ProbePacket.Header";
}


// ===================================================================

class ProbePacket_Token::_Internal {
 public:
  using HasBits = decltype(std::declval<ProbePacket_Token>()._has_bits_);
  static void set_has_timestamp_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ProbePacket_Token::ProbePacket_Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_net.ProbePacket.Token)
}
ProbePacket_Token::ProbePacket_Token(const ProbePacket_Token& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hash()) {
    hash_.Set(from._internal_hash(), 
      GetArenaForAllocation());
  }
  timestamp_micros_ = from.timestamp_micros_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_net.ProbePacket.Token)
}

inline void ProbePacket_Token::SharedCtor() {
hash_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hash_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_micros_ = uint64_t{0u};
}

ProbePacket_Token::~ProbePacket_Token() {
  // @@protoc_insertion_point(destructor:chrome_browser_net.ProbePacket.Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProbePacket_Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hash_.Destroy();
}

void ProbePacket_Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProbePacket_Token::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_net.ProbePacket.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    hash_.ClearNonDefaultToEmpty();
  }
  timestamp_micros_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProbePacket_Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint64 timestamp_micros = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp_micros(&has_bits);
          timestamp_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProbePacket_Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_net.ProbePacket.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 timestamp_micros = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_timestamp_micros(), target);
  }

  // required bytes hash = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_net.ProbePacket.Token)
  return target;
}

size_t ProbePacket_Token::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chrome_browser_net.ProbePacket.Token)
  size_t total_size = 0;

  if (_internal_has_hash()) {
    // required bytes hash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  if (_internal_has_timestamp_micros()) {
    // required uint64 timestamp_micros = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_micros());
  }

  return total_size;
}
size_t ProbePacket_Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_net.ProbePacket.Token)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes hash = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());

    // required uint64 timestamp_micros = 1;
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp_micros());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbePacket_Token::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProbePacket_Token*>(
      &from));
}

void ProbePacket_Token::MergeFrom(const ProbePacket_Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_net.ProbePacket.Token)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_hash(from._internal_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_micros_ = from.timestamp_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProbePacket_Token::CopyFrom(const ProbePacket_Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_net.ProbePacket.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbePacket_Token::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProbePacket_Token::InternalSwap(ProbePacket_Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hash_, lhs_arena,
      &other->hash_, rhs_arena
  );
  swap(timestamp_micros_, other->timestamp_micros_);
}

std::string ProbePacket_Token::GetTypeName() const {
  return "chrome_browser_net.ProbePacket.Token";
}


// ===================================================================

class ProbePacket::_Internal {
 public:
  using HasBits = decltype(std::declval<ProbePacket>()._has_bits_);
  static const ::chrome_browser_net::ProbePacket_Header& header(const ProbePacket* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::chrome_browser_net::ProbePacket_Token& token(const ProbePacket* msg);
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_group_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_packet_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_probe_size_bytes(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_pacing_interval_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_number_probe_packets(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_server_processing_micros(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_padding(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::chrome_browser_net::ProbePacket_Header&
ProbePacket::_Internal::header(const ProbePacket* msg) {
  return *msg->header_;
}
const ::chrome_browser_net::ProbePacket_Token&
ProbePacket::_Internal::token(const ProbePacket* msg) {
  return *msg->token_;
}
ProbePacket::ProbePacket(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_net.ProbePacket)
}
ProbePacket::ProbePacket(const ProbePacket& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  padding_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    padding_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_padding()) {
    padding_.Set(from._internal_padding(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::chrome_browser_net::ProbePacket_Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_token()) {
    token_ = new ::chrome_browser_net::ProbePacket_Token(*from.token_);
  } else {
    token_ = nullptr;
  }
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&number_probe_packets_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(number_probe_packets_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_net.ProbePacket)
}

inline void ProbePacket::SharedCtor() {
padding_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  padding_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&number_probe_packets_) -
    reinterpret_cast<char*>(&header_)) + sizeof(number_probe_packets_));
}

ProbePacket::~ProbePacket() {
  // @@protoc_insertion_point(destructor:chrome_browser_net.ProbePacket)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProbePacket::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  padding_.Destroy();
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete token_;
}

void ProbePacket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProbePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_net.ProbePacket)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      padding_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(token_ != nullptr);
      token_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_processing_micros_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(server_processing_micros_));
  }
  number_probe_packets_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ProbePacket::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .chrome_browser_net.ProbePacket.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .chrome_browser_net.ProbePacket.Token token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 group_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_group_id(&has_bits);
          group_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 packet_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_packet_index(&has_bits);
          packet_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 probe_size_bytes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_probe_size_bytes(&has_bits);
          probe_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 pacing_interval_micros = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_pacing_interval_micros(&has_bits);
          pacing_interval_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 number_probe_packets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_number_probe_packets(&has_bits);
          number_probe_packets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes padding = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_padding();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 server_processing_micros = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_server_processing_micros(&has_bits);
          server_processing_micros_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProbePacket::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_net.ProbePacket)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chrome_browser_net.ProbePacket.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // optional .chrome_browser_net.ProbePacket.Token token = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::token(this),
        _Internal::token(this).GetCachedSize(), target, stream);
  }

  // optional uint32 group_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_group_id(), target);
  }

  // optional uint32 packet_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_packet_index(), target);
  }

  // optional uint32 probe_size_bytes = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_probe_size_bytes(), target);
  }

  // optional uint32 pacing_interval_micros = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pacing_interval_micros(), target);
  }

  // optional uint32 number_probe_packets = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(7, this->_internal_number_probe_packets(), target);
  }

  // optional bytes padding = 8;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_padding(), target);
  }

  // optional int64 server_processing_micros = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_server_processing_micros(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_net.ProbePacket)
  return target;
}

size_t ProbePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_net.ProbePacket)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional bytes padding = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_padding());
    }

    // optional .chrome_browser_net.ProbePacket.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .chrome_browser_net.ProbePacket.Token token = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *token_);
    }

    // optional uint32 group_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_group_id());
    }

    // optional uint32 packet_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_packet_index());
    }

    // optional uint32 probe_size_bytes = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_probe_size_bytes());
    }

    // optional uint32 pacing_interval_micros = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_pacing_interval_micros());
    }

    // optional int64 server_processing_micros = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_server_processing_micros());
    }

  }
  // optional uint32 number_probe_packets = 7;
  if (cached_has_bits & 0x00000100u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_number_probe_packets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProbePacket::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ProbePacket*>(
      &from));
}

void ProbePacket::MergeFrom(const ProbePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_net.ProbePacket)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_padding(from._internal_padding());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::chrome_browser_net::ProbePacket_Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_token()->::chrome_browser_net::ProbePacket_Token::MergeFrom(from._internal_token());
    }
    if (cached_has_bits & 0x00000008u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      packet_index_ = from.packet_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      probe_size_bytes_ = from.probe_size_bytes_;
    }
    if (cached_has_bits & 0x00000040u) {
      pacing_interval_micros_ = from.pacing_interval_micros_;
    }
    if (cached_has_bits & 0x00000080u) {
      server_processing_micros_ = from.server_processing_micros_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_number_probe_packets(from._internal_number_probe_packets());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ProbePacket::CopyFrom(const ProbePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_net.ProbePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProbePacket::IsInitialized() const {
  if (_internal_has_header()) {
    if (!header_->IsInitialized()) return false;
  }
  if (_internal_has_token()) {
    if (!token_->IsInitialized()) return false;
  }
  return true;
}

void ProbePacket::InternalSwap(ProbePacket* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &padding_, lhs_arena,
      &other->padding_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProbePacket, number_probe_packets_)
      + sizeof(ProbePacket::number_probe_packets_)
      - PROTOBUF_FIELD_OFFSET(ProbePacket, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

std::string ProbePacket::GetTypeName() const {
  return "chrome_browser_net.ProbePacket";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_net
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_net::ProbePacket_Header*
Arena::CreateMaybeMessage< ::chrome_browser_net::ProbePacket_Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_net::ProbePacket_Header >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_net::ProbePacket_Token*
Arena::CreateMaybeMessage< ::chrome_browser_net::ProbePacket_Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_net::ProbePacket_Token >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_net::ProbePacket*
Arena::CreateMaybeMessage< ::chrome_browser_net::ProbePacket >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_net::ProbePacket >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
