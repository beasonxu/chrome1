// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_manager/PasswordStoreBridge

#ifndef org_chromium_chrome_browser_password_manager_PasswordStoreBridge_JNI
#define org_chromium_chrome_browser_password_manager_PasswordStoreBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge[];
const char kClassPath_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge[] =
    "org/chromium/chrome/browser/password_manager/PasswordStoreBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz_defined
#define org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz_defined
inline jclass org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge,
      &g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_PasswordStoreBridge_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    passwordStoreBridge);

JNI_GENERATOR_EXPORT jlong Java_J_N_MgZAkbOC(
    JNIEnv* env,
    jclass jcaller,
    jobject passwordStoreBridge) {
  return JNI_PasswordStoreBridge_Init(env, base::android::JavaParamRef<jobject>(env,
      passwordStoreBridge));
}

JNI_GENERATOR_EXPORT void Java_J_N_MEKWOk6W_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordStoreBridge,
    jobject credential) {
  PasswordStoreBridge* native = reinterpret_cast<PasswordStoreBridge*>(nativePasswordStoreBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "InsertPasswordCredentialForTesting");
  return native->InsertPasswordCredentialForTesting(env, base::android::JavaParamRef<jobject>(env,
      credential));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MOWgzdeG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordStoreBridge,
    jobject credential,
    jstring newPassword) {
  PasswordStoreBridge* native = reinterpret_cast<PasswordStoreBridge*>(nativePasswordStoreBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "EditPassword", false);
  return native->EditPassword(env, base::android::JavaParamRef<jobject>(env, credential),
      base::android::JavaParamRef<jstring>(env, newPassword));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MrzpchgE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordStoreBridge) {
  PasswordStoreBridge* native = reinterpret_cast<PasswordStoreBridge*>(nativePasswordStoreBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPasswordStoreCredentialsCount", 0);
  return native->GetPasswordStoreCredentialsCount(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MoPDNwn9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordStoreBridge,
    jobjectArray credentials) {
  PasswordStoreBridge* native = reinterpret_cast<PasswordStoreBridge*>(nativePasswordStoreBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllCredentials");
  return native->GetAllCredentials(env, base::android::JavaParamRef<jobjectArray>(env,
      credentials));
}

JNI_GENERATOR_EXPORT void Java_J_N_MoYhonCn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordStoreBridge) {
  PasswordStoreBridge* native = reinterpret_cast<PasswordStoreBridge*>(nativePasswordStoreBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearAllPasswords");
  return native->ClearAllPasswords(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MQCQJ059(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordStoreBridge) {
  PasswordStoreBridge* native = reinterpret_cast<PasswordStoreBridge*>(nativePasswordStoreBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_createPasswordStoreCredential(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_PasswordStoreBridge_createPasswordStoreCredential(JNIEnv* env, const
    base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jstring>& username,
    const base::android::JavaRef<jstring>& password) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createPasswordStoreCredential",
"(Lorg/chromium/url/GURL;Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/chrome/browser/password_manager/PasswordStoreCredential;",
&g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_createPasswordStoreCredential);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj(), username.obj(), password.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_passwordListAvailable(nullptr);
static void Java_PasswordStoreBridge_passwordListAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper count) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "passwordListAvailable",
          "(I)V",
&g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_passwordListAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(count));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_onEditCredential(nullptr);
static void Java_PasswordStoreBridge_onEditCredential(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& credential) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onEditCredential",
          "(Lorg/chromium/chrome/browser/password_manager/PasswordStoreCredential;)V",
          &g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_onEditCredential);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, credential.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_insertCredential(nullptr);
static void Java_PasswordStoreBridge_insertCredential(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& credentials,
    JniIntWrapper index,
    const base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jstring>& username,
    const base::android::JavaRef<jstring>& password) {
  jclass clazz = org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "insertCredential",
"([Lorg/chromium/chrome/browser/password_manager/PasswordStoreCredential;ILorg/chromium/url/GURL;Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_password_1manager_PasswordStoreBridge_insertCredential);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, credentials.obj(), as_jint(index), url.obj(), username.obj(),
              password.obj());
}

#endif  // org_chromium_chrome_browser_password_manager_PasswordStoreBridge_JNI
