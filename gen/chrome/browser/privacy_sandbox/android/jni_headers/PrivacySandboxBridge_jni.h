// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/privacy_sandbox/PrivacySandboxBridge

#ifndef org_chromium_chrome_browser_privacy_sandbox_PrivacySandboxBridge_JNI
#define org_chromium_chrome_browser_privacy_sandbox_PrivacySandboxBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge[];
const char kClassPath_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge[] =
    "org/chromium/chrome/browser/privacy_sandbox/PrivacySandboxBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz_defined
#define org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz_defined
inline jclass org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge,
      &g_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jboolean JNI_PrivacySandboxBridge_IsPrivacySandboxEnabled(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MhaiireD(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_IsPrivacySandboxEnabled(env);
}

static jboolean JNI_PrivacySandboxBridge_IsPrivacySandboxManaged(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MNmYFihT(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_IsPrivacySandboxManaged(env);
}

static jboolean JNI_PrivacySandboxBridge_IsPrivacySandboxRestricted(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MewRKkCC(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_IsPrivacySandboxRestricted(env);
}

static void JNI_PrivacySandboxBridge_SetPrivacySandboxEnabled(JNIEnv* env, jboolean enabled);

JNI_GENERATOR_EXPORT void Java_J_N_Mx0_1lgx5(
    JNIEnv* env,
    jclass jcaller,
    jboolean enabled) {
  return JNI_PrivacySandboxBridge_SetPrivacySandboxEnabled(env, enabled);
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_PrivacySandboxBridge_GetFlocStatusString(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MWBejMEu(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetFlocStatusString(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_PrivacySandboxBridge_GetFlocGroupString(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MLYptWc6(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetFlocGroupString(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_PrivacySandboxBridge_GetFlocUpdateString(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M4do85LF(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetFlocUpdateString(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_PrivacySandboxBridge_GetFlocDescriptionString(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MHCgxumR(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetFlocDescriptionString(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring>
    JNI_PrivacySandboxBridge_GetFlocResetExplanationString(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_M8beoiRM(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetFlocResetExplanationString(env).Release();
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_PrivacySandboxBridge_GetCurrentTopTopics(JNIEnv* env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_M9_000248x7Sf(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetCurrentTopTopics(env).Release();
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_PrivacySandboxBridge_GetBlockedTopics(JNIEnv* env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_M7p7P4Yj(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetBlockedTopics(env).Release();
}

static void JNI_PrivacySandboxBridge_SetTopicAllowed(JNIEnv* env, jint topicId,
    jint taxonomyVersion,
    jboolean allowed);

JNI_GENERATOR_EXPORT void Java_J_N_MUKJJ8VA(
    JNIEnv* env,
    jclass jcaller,
    jint topicId,
    jint taxonomyVersion,
    jboolean allowed) {
  return JNI_PrivacySandboxBridge_SetTopicAllowed(env, topicId, taxonomyVersion, allowed);
}

static void JNI_PrivacySandboxBridge_GetFledgeJoiningEtldPlusOneForDisplay(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MfWQDaSM(
    JNIEnv* env,
    jclass jcaller,
    jobject callback) {
  return JNI_PrivacySandboxBridge_GetFledgeJoiningEtldPlusOneForDisplay(env,
      base::android::JavaParamRef<jobject>(env, callback));
}

static base::android::ScopedJavaLocalRef<jobjectArray>
    JNI_PrivacySandboxBridge_GetBlockedFledgeJoiningTopFramesForDisplay(JNIEnv* env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MCGJWOhZ(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetBlockedFledgeJoiningTopFramesForDisplay(env).Release();
}

static void JNI_PrivacySandboxBridge_SetFledgeJoiningAllowed(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& topFrameEtldPlus1,
    jboolean allowed);

JNI_GENERATOR_EXPORT void Java_J_N_MK6T9EFy(
    JNIEnv* env,
    jclass jcaller,
    jstring topFrameEtldPlus1,
    jboolean allowed) {
  return JNI_PrivacySandboxBridge_SetFledgeJoiningAllowed(env,
      base::android::JavaParamRef<jstring>(env, topFrameEtldPlus1), allowed);
}

static jint JNI_PrivacySandboxBridge_GetRequiredPromptType(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_M1vrjld5(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PrivacySandboxBridge_GetRequiredPromptType(env);
}

static void JNI_PrivacySandboxBridge_PromptActionOccurred(JNIEnv* env, jint action);

JNI_GENERATOR_EXPORT void Java_J_N_Mq9orIwX(
    JNIEnv* env,
    jclass jcaller,
    jint action) {
  return JNI_PrivacySandboxBridge_PromptActionOccurred(env, action);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_createTopic(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PrivacySandboxBridge_createTopic(JNIEnv* env,
    JniIntWrapper topicId,
    JniIntWrapper taxonomyVersion,
    const base::android::JavaRef<jstring>& name) {
  jclass clazz = org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createTopic",
          "(IILjava/lang/String;)Lorg/chromium/chrome/browser/privacy_sandbox/Topic;",
          &g_org_chromium_chrome_browser_privacy_1sandbox_PrivacySandboxBridge_createTopic);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(topicId), as_jint(taxonomyVersion), name.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_chrome_browser_privacy_sandbox_PrivacySandboxBridge_JNI
