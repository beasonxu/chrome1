// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/password_check/PasswordCheckBridge

#ifndef org_chromium_chrome_browser_password_check_PasswordCheckBridge_JNI
#define org_chromium_chrome_browser_password_check_PasswordCheckBridge_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_password_1check_PasswordCheckBridge[];
const char kClassPath_org_chromium_chrome_browser_password_1check_PasswordCheckBridge[] =
    "org/chromium/chrome/browser/password_check/PasswordCheckBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz_defined
#define org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz_defined
inline jclass org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_password_1check_PasswordCheckBridge,
      &g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_PasswordCheckBridge_Create(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    passwordCheckBridge);

JNI_GENERATOR_EXPORT jlong Java_J_N_MC_00024M7l1y(
    JNIEnv* env,
    jclass jcaller,
    jobject passwordCheckBridge) {
  return JNI_PasswordCheckBridge_Create(env, base::android::JavaParamRef<jobject>(env,
      passwordCheckBridge));
}

JNI_GENERATOR_EXPORT void Java_J_N_MqdzTSiP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartCheck");
  return native->StartCheck(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MbiHHiCX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "StopCheck");
  return native->StopCheck(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M8rO_1trn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "AreScriptsRefreshed", false);
  return native->AreScriptsRefreshed(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M9QKlyGA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RefreshScripts");
  return native->RefreshScripts(env);
}

JNI_GENERATOR_EXPORT jlong Java_J_N_MXktgJl6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetLastCheckTimestamp", 0);
  return native->GetLastCheckTimestamp(env);
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mu_1fY_12N(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCompromisedCredentialsCount", 0);
  return native->GetCompromisedCredentialsCount(env);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MDe7TasX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetSavedPasswordsCount", 0);
  return native->GetSavedPasswordsCount(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MgE46U6G(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge,
    jobjectArray credentials) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetCompromisedCredentials");
  return native->GetCompromisedCredentials(env, base::android::JavaParamRef<jobjectArray>(env,
      credentials));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2leB6Ho(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge,
    jobject activity) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "LaunchCheckupInAccount");
  return native->LaunchCheckupInAccount(env, base::android::JavaParamRef<jobject>(env, activity));
}

JNI_GENERATOR_EXPORT void Java_J_N_MPrs6LwU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge,
    jobject credential,
    jstring newPassword) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateCredential");
  return native->UpdateCredential(env, base::android::JavaParamRef<jobject>(env, credential),
      base::android::JavaParamRef<jstring>(env, newPassword));
}

JNI_GENERATOR_EXPORT void Java_J_N_M4w82atV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge,
    jobject credential,
    jobject context,
    jobject settingsLauncher) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnEditCredential");
  return native->OnEditCredential(env, base::android::JavaParamRef<jobject>(env, credential),
      base::android::JavaParamRef<jobject>(env, context), base::android::JavaParamRef<jobject>(env,
      settingsLauncher));
}

JNI_GENERATOR_EXPORT void Java_J_N_MShNfrj_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge,
    jobject credentials) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveCredential");
  return native->RemoveCredential(env, base::android::JavaParamRef<jobject>(env, credentials));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_000241pAUJ0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePasswordCheckBridge) {
  PasswordCheckBridge* native = reinterpret_cast<PasswordCheckBridge*>(nativePasswordCheckBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onCompromisedCredentialsFetched(nullptr);
static void Java_PasswordCheckBridge_onCompromisedCredentialsFetched(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper count) {
  jclass clazz = org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCompromisedCredentialsFetched",
          "(I)V",
&g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onCompromisedCredentialsFetched);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(count));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onSavedPasswordsFetched(nullptr);
static void Java_PasswordCheckBridge_onSavedPasswordsFetched(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper count) {
  jclass clazz = org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onSavedPasswordsFetched",
          "(I)V",
&g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onSavedPasswordsFetched);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(count));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onPasswordCheckStatusChanged(nullptr);
static void Java_PasswordCheckBridge_onPasswordCheckStatusChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper state) {
  jclass clazz = org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPasswordCheckStatusChanged",
          "(I)V",
&g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onPasswordCheckStatusChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(state));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onPasswordCheckProgressChanged(nullptr);
static void Java_PasswordCheckBridge_onPasswordCheckProgressChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper alreadyProcessed,
    JniIntWrapper remainingInQueue) {
  jclass clazz = org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPasswordCheckProgressChanged",
          "(II)V",
&g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_onPasswordCheckProgressChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(alreadyProcessed), as_jint(remainingInQueue));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_insertCredential(nullptr);
static void Java_PasswordCheckBridge_insertCredential(JNIEnv* env, const
    base::android::JavaRef<jobjectArray>& credentials,
    JniIntWrapper index,
    const base::android::JavaRef<jstring>& signonRealm,
    const base::android::JavaRef<jobject>& associatedUrl,
    const base::android::JavaRef<jstring>& username,
    const base::android::JavaRef<jstring>& displayOrigin,
    const base::android::JavaRef<jstring>& displayUsername,
    const base::android::JavaRef<jstring>& password,
    const base::android::JavaRef<jstring>& passwordChangeUrl,
    const base::android::JavaRef<jstring>& associatedApp,
    jlong creationTime,
    jlong lastUsedTime,
    jboolean leaked,
    jboolean phished,
    jboolean hasStartableScript,
    jboolean hasAutoChangeButton) {
  jclass clazz = org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_password_1check_PasswordCheckBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "insertCredential",
"([Lorg/chromium/chrome/browser/password_check/CompromisedCredential;ILjava/lang/String;Lorg/chromium/url/GURL;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;JJZZZZ)V",
          &g_org_chromium_chrome_browser_password_1check_PasswordCheckBridge_insertCredential);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, credentials.obj(), as_jint(index), signonRealm.obj(),
              associatedUrl.obj(), username.obj(), displayOrigin.obj(), displayUsername.obj(),
              password.obj(), passwordChangeUrl.obj(), associatedApp.obj(), creationTime,
              lastUsedTime, leaked, phished, hasStartableScript, hasAutoChangeButton);
}

#endif  // org_chromium_chrome_browser_password_check_PasswordCheckBridge_JNI
