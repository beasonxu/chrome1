// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/privacy/secure_dns/SecureDnsBridge

#ifndef org_chromium_chrome_browser_privacy_secure_dns_SecureDnsBridge_JNI
#define org_chromium_chrome_browser_privacy_secure_dns_SecureDnsBridge_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jint JNI_SecureDnsBridge_GetMode(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MvJZm_1HK(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SecureDnsBridge_GetMode(env);
}

static void JNI_SecureDnsBridge_SetMode(JNIEnv* env, jint mode);

JNI_GENERATOR_EXPORT void Java_J_N_M7D0A6Nn(
    JNIEnv* env,
    jclass jcaller,
    jint mode) {
  return JNI_SecureDnsBridge_SetMode(env, mode);
}

static jboolean JNI_SecureDnsBridge_IsModeManaged(JNIEnv* env);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M_1qct0Io(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SecureDnsBridge_IsModeManaged(env);
}

static base::android::ScopedJavaLocalRef<jobjectArray> JNI_SecureDnsBridge_GetProviders(JNIEnv*
    env);

JNI_GENERATOR_EXPORT jobjectArray Java_J_N_MvmUzLgj(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SecureDnsBridge_GetProviders(env).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_SecureDnsBridge_GetConfig(JNIEnv* env);

JNI_GENERATOR_EXPORT jstring Java_J_N_MBuwU61d(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SecureDnsBridge_GetConfig(env).Release();
}

static jboolean JNI_SecureDnsBridge_SetConfig(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& config);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MPV_1PP8Y(
    JNIEnv* env,
    jclass jcaller,
    jstring config) {
  return JNI_SecureDnsBridge_SetConfig(env, base::android::JavaParamRef<jstring>(env, config));
}

static jint JNI_SecureDnsBridge_GetManagementMode(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MPUFHf86(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_SecureDnsBridge_GetManagementMode(env);
}

static void JNI_SecureDnsBridge_UpdateDropdownHistograms(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& oldConfig,
    const base::android::JavaParamRef<jstring>& newConfig);

JNI_GENERATOR_EXPORT void Java_J_N_MHfKmORH(
    JNIEnv* env,
    jclass jcaller,
    jstring oldConfig,
    jstring newConfig) {
  return JNI_SecureDnsBridge_UpdateDropdownHistograms(env, base::android::JavaParamRef<jstring>(env,
      oldConfig), base::android::JavaParamRef<jstring>(env, newConfig));
}

static void JNI_SecureDnsBridge_UpdateValidationHistogram(JNIEnv* env, jboolean valid);

JNI_GENERATOR_EXPORT void Java_J_N_M6OgZ3EY(
    JNIEnv* env,
    jclass jcaller,
    jboolean valid) {
  return JNI_SecureDnsBridge_UpdateValidationHistogram(env, valid);
}

static jboolean JNI_SecureDnsBridge_ProbeConfig(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& dohConfig);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MvzcX2os(
    JNIEnv* env,
    jclass jcaller,
    jstring dohConfig) {
  return JNI_SecureDnsBridge_ProbeConfig(env, base::android::JavaParamRef<jstring>(env, dohConfig));
}


#endif  // org_chromium_chrome_browser_privacy_secure_dns_SecureDnsBridge_JNI
