// chrome/browser/resource_coordinator/lifecycle_unit_state.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_RESOURCE_COORDINATOR_LIFECYCLE_UNIT_STATE_MOJOM_SHARED_H_
#define CHROME_BROWSER_RESOURCE_COORDINATOR_LIFECYCLE_UNIT_STATE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/browser/resource_coordinator/lifecycle_unit_state.mojom-shared-internal.h"







namespace mojom {


}  // namespace mojom

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace mojom {


enum class LifecycleUnitState : int32_t {
  
  ACTIVE = 0,
  
  THROTTLED = 1,
  
  FROZEN = 3,
  
  DISCARDED = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

 std::ostream& operator<<(std::ostream& os, LifecycleUnitState value);
inline bool IsKnownEnumValue(LifecycleUnitState value) {
  return internal::LifecycleUnitState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class LifecycleUnitLoadingState : int32_t {
  
  UNLOADED = 0,
  
  LOADING = 1,
  
  LOADED = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, LifecycleUnitLoadingState value);
inline bool IsKnownEnumValue(LifecycleUnitLoadingState value) {
  return internal::LifecycleUnitLoadingState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class LifecycleUnitStateChangeReason : int32_t {
  
  BROWSER_INITIATED = 0,
  
  RENDERER_INITIATED = 1,
  
  SYSTEM_MEMORY_PRESSURE = 2,
  
  EXTENSION_INITIATED = 3,
  
  USER_INITIATED = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, LifecycleUnitStateChangeReason value);
inline bool IsKnownEnumValue(LifecycleUnitStateChangeReason value) {
  return internal::LifecycleUnitStateChangeReason_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class LifecycleUnitDiscardReason : int32_t {
  
  EXTERNAL = 0,
  
  URGENT = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, LifecycleUnitDiscardReason value);
inline bool IsKnownEnumValue(LifecycleUnitDiscardReason value) {
  return internal::LifecycleUnitDiscardReason_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom

namespace std {

template <>
struct hash<::mojom::LifecycleUnitState>
    : public mojo::internal::EnumHashImpl<::mojom::LifecycleUnitState> {};

template <>
struct hash<::mojom::LifecycleUnitLoadingState>
    : public mojo::internal::EnumHashImpl<::mojom::LifecycleUnitLoadingState> {};

template <>
struct hash<::mojom::LifecycleUnitStateChangeReason>
    : public mojo::internal::EnumHashImpl<::mojom::LifecycleUnitStateChangeReason> {};

template <>
struct hash<::mojom::LifecycleUnitDiscardReason>
    : public mojo::internal::EnumHashImpl<::mojom::LifecycleUnitDiscardReason> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojom::LifecycleUnitState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojom::LifecycleUnitState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojom::LifecycleUnitState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojom::LifecycleUnitLoadingState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojom::LifecycleUnitLoadingState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojom::LifecycleUnitLoadingState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojom::LifecycleUnitStateChangeReason, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojom::LifecycleUnitStateChangeReason, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojom::LifecycleUnitStateChangeReason>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::mojom::LifecycleUnitDiscardReason, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::mojom::LifecycleUnitDiscardReason, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::mojom::LifecycleUnitDiscardReason>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace mojom {


}  // namespace mojom

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojom::LifecycleUnitState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::mojom::LifecycleUnitState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojom::LifecycleUnitLoadingState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::mojom::LifecycleUnitLoadingState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojom::LifecycleUnitStateChangeReason> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::mojom::LifecycleUnitStateChangeReason value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::mojom::LifecycleUnitDiscardReason> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::mojom::LifecycleUnitDiscardReason value);
};

} // namespace perfetto

#endif  // CHROME_BROWSER_RESOURCE_COORDINATOR_LIFECYCLE_UNIT_STATE_MOJOM_SHARED_H_