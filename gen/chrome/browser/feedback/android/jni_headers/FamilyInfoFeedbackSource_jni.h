// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feedback/FamilyInfoFeedbackSource

#ifndef org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_JNI
#define org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource[];
const char kClassPath_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource[] =
    "org/chromium/chrome/browser/feedback/FamilyInfoFeedbackSource";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz(nullptr);
#ifndef org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz_defined
#define org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz_defined
inline jclass org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource,
      &g_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace chrome {
namespace android {

static void JNI_FamilyInfoFeedbackSource_Start(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& source,
    const base::android::JavaParamRef<jobject>& profile);

JNI_GENERATOR_EXPORT void Java_J_N_MYGJsJCo(
    JNIEnv* env,
    jclass jcaller,
    jobject source,
    jobject profile) {
  return JNI_FamilyInfoFeedbackSource_Start(env, base::android::JavaParamRef<jobject>(env, source),
      base::android::JavaParamRef<jobject>(env, profile));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_processFamilyMemberRole(nullptr);
static void Java_FamilyInfoFeedbackSource_processFamilyMemberRole(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& familyRole) {
  jclass clazz = org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "processFamilyMemberRole",
          "(Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_processFamilyMemberRole);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, familyRole.obj());
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_feedback_FamilyInfoFeedbackSource_JNI
