// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/contextmenu/ContextMenuNativeDelegateImpl

#ifndef org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_JNI
#define org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl[];
const char kClassPath_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl[] =
    "org/chromium/chrome/browser/contextmenu/ContextMenuNativeDelegateImpl";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz(nullptr);
#ifndef org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz_defined
#define org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz_defined
inline jclass org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl,
      &g_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_ContextMenuNativeDelegateImpl_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& webContents,
    const base::android::JavaParamRef<jobject>& contextMenuParams);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mz9Ykykf(
    JNIEnv* env,
    jclass jcaller,
    jobject webContents,
    jobject contextMenuParams) {
  return JNI_ContextMenuNativeDelegateImpl_Init(env, base::android::JavaParamRef<jobject>(env,
      webContents), base::android::JavaParamRef<jobject>(env, contextMenuParams));
}

JNI_GENERATOR_EXPORT void Java_J_N_M4wUt4Cl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextMenuNativeDelegateImpl,
    jobject caller,
    jobject renderFrameHost,
    jobject callback,
    jint maxWidthPx,
    jint maxHeightPx,
    jint imageFormat) {
  ContextMenuNativeDelegateImpl* native =
      reinterpret_cast<ContextMenuNativeDelegateImpl*>(nativeContextMenuNativeDelegateImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RetrieveImageForShare");
  return native->RetrieveImageForShare(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, renderFrameHost),
      base::android::JavaParamRef<jobject>(env, callback), maxWidthPx, maxHeightPx, imageFormat);
}

JNI_GENERATOR_EXPORT void Java_J_N_MrTfYLQo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextMenuNativeDelegateImpl,
    jobject caller,
    jobject renderFrameHost,
    jobject callback,
    jint maxWidthPx,
    jint maxHeightPx) {
  ContextMenuNativeDelegateImpl* native =
      reinterpret_cast<ContextMenuNativeDelegateImpl*>(nativeContextMenuNativeDelegateImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "RetrieveImageForContextMenu");
  return native->RetrieveImageForContextMenu(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, renderFrameHost),
      base::android::JavaParamRef<jobject>(env, callback), maxWidthPx, maxHeightPx);
}

JNI_GENERATOR_EXPORT void Java_J_N_MyvrkkwD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextMenuNativeDelegateImpl,
    jobject caller,
    jboolean isLink) {
  ContextMenuNativeDelegateImpl* native =
      reinterpret_cast<ContextMenuNativeDelegateImpl*>(nativeContextMenuNativeDelegateImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "StartDownload");
  return native->StartDownload(env, base::android::JavaParamRef<jobject>(env, caller), isLink);
}

JNI_GENERATOR_EXPORT void Java_J_N_MvCFvtGL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextMenuNativeDelegateImpl,
    jobject caller,
    jobject renderFrameHost) {
  ContextMenuNativeDelegateImpl* native =
      reinterpret_cast<ContextMenuNativeDelegateImpl*>(nativeContextMenuNativeDelegateImpl);
  CHECK_NATIVE_PTR(env, jcaller, native, "SearchForImage");
  return native->SearchForImage(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, renderFrameHost));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_createImageCallbackResult(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ContextMenuNativeDelegateImpl_createImageCallbackResult(JNIEnv* env, const
    base::android::JavaRef<jbyteArray>& imageData,
    const base::android::JavaRef<jstring>& extension) {
  jclass clazz = org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createImageCallbackResult",
"([BLjava/lang/String;)Lorg/chromium/chrome/browser/contextmenu/ContextMenuNativeDelegateImpl$ImageCallbackResult;",
&g_org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_createImageCallbackResult);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, imageData.obj(), extension.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_chrome_browser_contextmenu_ContextMenuNativeDelegateImpl_JNI
