// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: share_history_message.proto

#include "share_history_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace sharing {
namespace mojom {
PROTOBUF_CONSTEXPR Target::Target(
    ::_pbi::ConstantInitialized)
  : component_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetDefaultTypeInternal() {}
  union {
    Target _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetDefaultTypeInternal _Target_default_instance_;
PROTOBUF_CONSTEXPR ShareHistory::ShareHistory(
    ::_pbi::ConstantInitialized)
  : day_histories_(){}
struct ShareHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareHistoryDefaultTypeInternal() {}
  union {
    ShareHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareHistoryDefaultTypeInternal _ShareHistory_default_instance_;
PROTOBUF_CONSTEXPR DayShareHistory::DayShareHistory(
    ::_pbi::ConstantInitialized)
  : target_histories_()
  , day_(0){}
struct DayShareHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DayShareHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DayShareHistoryDefaultTypeInternal() {}
  union {
    DayShareHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DayShareHistoryDefaultTypeInternal _DayShareHistory_default_instance_;
PROTOBUF_CONSTEXPR TargetShareHistory::TargetShareHistory(
    ::_pbi::ConstantInitialized)
  : target_(nullptr)
  , count_(0){}
struct TargetShareHistoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TargetShareHistoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TargetShareHistoryDefaultTypeInternal() {}
  union {
    TargetShareHistory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TargetShareHistoryDefaultTypeInternal _TargetShareHistory_default_instance_;
}  // namespace mojom
}  // namespace sharing
namespace sharing {
namespace mojom {

// ===================================================================

class Target::_Internal {
 public:
};

Target::Target(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sharing.mojom.Target)
}
Target::Target(const Target& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  component_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    component_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_component_name().empty()) {
    component_name_.Set(from._internal_component_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:sharing.mojom.Target)
}

inline void Target::SharedCtor() {
component_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  component_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Target::~Target() {
  // @@protoc_insertion_point(destructor:sharing.mojom.Target)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Target::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  component_name_.Destroy();
}

void Target::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Target::Clear() {
// @@protoc_insertion_point(message_clear_start:sharing.mojom.Target)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  component_name_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Target::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string component_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_component_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Target::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharing.mojom.Target)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string component_name = 1;
  if (!this->_internal_component_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_component_name().data(), static_cast<int>(this->_internal_component_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "sharing.mojom.Target.component_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_component_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharing.mojom.Target)
  return target;
}

size_t Target::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sharing.mojom.Target)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string component_name = 1;
  if (!this->_internal_component_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_component_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Target::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Target*>(
      &from));
}

void Target::MergeFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sharing.mojom.Target)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_component_name().empty()) {
    _internal_set_component_name(from._internal_component_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Target::CopyFrom(const Target& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sharing.mojom.Target)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Target::IsInitialized() const {
  return true;
}

void Target::InternalSwap(Target* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &component_name_, lhs_arena,
      &other->component_name_, rhs_arena
  );
}

std::string Target::GetTypeName() const {
  return "sharing.mojom.Target";
}


// ===================================================================

class ShareHistory::_Internal {
 public:
};

ShareHistory::ShareHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  day_histories_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sharing.mojom.ShareHistory)
}
ShareHistory::ShareHistory(const ShareHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      day_histories_(from.day_histories_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sharing.mojom.ShareHistory)
}

inline void ShareHistory::SharedCtor() {
}

ShareHistory::~ShareHistory() {
  // @@protoc_insertion_point(destructor:sharing.mojom.ShareHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShareHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ShareHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:sharing.mojom.ShareHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  day_histories_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sharing.mojom.DayShareHistory day_histories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_day_histories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShareHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharing.mojom.ShareHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sharing.mojom.DayShareHistory day_histories = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_day_histories_size()); i < n; i++) {
    const auto& repfield = this->_internal_day_histories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharing.mojom.ShareHistory)
  return target;
}

size_t ShareHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sharing.mojom.ShareHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sharing.mojom.DayShareHistory day_histories = 1;
  total_size += 1UL * this->_internal_day_histories_size();
  for (const auto& msg : this->day_histories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareHistory*>(
      &from));
}

void ShareHistory::MergeFrom(const ShareHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sharing.mojom.ShareHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  day_histories_.MergeFrom(from.day_histories_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareHistory::CopyFrom(const ShareHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sharing.mojom.ShareHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareHistory::IsInitialized() const {
  return true;
}

void ShareHistory::InternalSwap(ShareHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  day_histories_.InternalSwap(&other->day_histories_);
}

std::string ShareHistory::GetTypeName() const {
  return "sharing.mojom.ShareHistory";
}


// ===================================================================

class DayShareHistory::_Internal {
 public:
};

DayShareHistory::DayShareHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  target_histories_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sharing.mojom.DayShareHistory)
}
DayShareHistory::DayShareHistory(const DayShareHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      target_histories_(from.target_histories_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  day_ = from.day_;
  // @@protoc_insertion_point(copy_constructor:sharing.mojom.DayShareHistory)
}

inline void DayShareHistory::SharedCtor() {
day_ = 0;
}

DayShareHistory::~DayShareHistory() {
  // @@protoc_insertion_point(destructor:sharing.mojom.DayShareHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DayShareHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DayShareHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DayShareHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:sharing.mojom.DayShareHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  target_histories_.Clear();
  day_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* DayShareHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 day = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .sharing.mojom.TargetShareHistory target_histories = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_target_histories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DayShareHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharing.mojom.DayShareHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 day = 1;
  if (this->_internal_day() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_day(), target);
  }

  // repeated .sharing.mojom.TargetShareHistory target_histories = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_target_histories_size()); i < n; i++) {
    const auto& repfield = this->_internal_target_histories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharing.mojom.DayShareHistory)
  return target;
}

size_t DayShareHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sharing.mojom.DayShareHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sharing.mojom.TargetShareHistory target_histories = 2;
  total_size += 1UL * this->_internal_target_histories_size();
  for (const auto& msg : this->target_histories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 day = 1;
  if (this->_internal_day() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DayShareHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DayShareHistory*>(
      &from));
}

void DayShareHistory::MergeFrom(const DayShareHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sharing.mojom.DayShareHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  target_histories_.MergeFrom(from.target_histories_);
  if (from._internal_day() != 0) {
    _internal_set_day(from._internal_day());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DayShareHistory::CopyFrom(const DayShareHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sharing.mojom.DayShareHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayShareHistory::IsInitialized() const {
  return true;
}

void DayShareHistory::InternalSwap(DayShareHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  target_histories_.InternalSwap(&other->target_histories_);
  swap(day_, other->day_);
}

std::string DayShareHistory::GetTypeName() const {
  return "sharing.mojom.DayShareHistory";
}


// ===================================================================

class TargetShareHistory::_Internal {
 public:
  static const ::sharing::mojom::Target& target(const TargetShareHistory* msg);
};

const ::sharing::mojom::Target&
TargetShareHistory::_Internal::target(const TargetShareHistory* msg) {
  return *msg->target_;
}
TargetShareHistory::TargetShareHistory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:sharing.mojom.TargetShareHistory)
}
TargetShareHistory::TargetShareHistory(const TargetShareHistory& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_target()) {
    target_ = new ::sharing::mojom::Target(*from.target_);
  } else {
    target_ = nullptr;
  }
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:sharing.mojom.TargetShareHistory)
}

inline void TargetShareHistory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&target_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&target_)) + sizeof(count_));
}

TargetShareHistory::~TargetShareHistory() {
  // @@protoc_insertion_point(destructor:sharing.mojom.TargetShareHistory)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TargetShareHistory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete target_;
}

void TargetShareHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetShareHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:sharing.mojom.TargetShareHistory)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  count_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* TargetShareHistory::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sharing.mojom.Target target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetShareHistory::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sharing.mojom.TargetShareHistory)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .sharing.mojom.Target target = 1;
  if (this->_internal_has_target()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sharing.mojom.TargetShareHistory)
  return target;
}

size_t TargetShareHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sharing.mojom.TargetShareHistory)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sharing.mojom.Target target = 1;
  if (this->_internal_has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // int32 count = 2;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TargetShareHistory::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TargetShareHistory*>(
      &from));
}

void TargetShareHistory::MergeFrom(const TargetShareHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sharing.mojom.TargetShareHistory)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_target()) {
    _internal_mutable_target()->::sharing::mojom::Target::MergeFrom(from._internal_target());
  }
  if (from._internal_count() != 0) {
    _internal_set_count(from._internal_count());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TargetShareHistory::CopyFrom(const TargetShareHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sharing.mojom.TargetShareHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetShareHistory::IsInitialized() const {
  return true;
}

void TargetShareHistory::InternalSwap(TargetShareHistory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TargetShareHistory, count_)
      + sizeof(TargetShareHistory::count_)
      - PROTOBUF_FIELD_OFFSET(TargetShareHistory, target_)>(
          reinterpret_cast<char*>(&target_),
          reinterpret_cast<char*>(&other->target_));
}

std::string TargetShareHistory::GetTypeName() const {
  return "sharing.mojom.TargetShareHistory";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mojom
}  // namespace sharing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sharing::mojom::Target*
Arena::CreateMaybeMessage< ::sharing::mojom::Target >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sharing::mojom::Target >(arena);
}
template<> PROTOBUF_NOINLINE ::sharing::mojom::ShareHistory*
Arena::CreateMaybeMessage< ::sharing::mojom::ShareHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sharing::mojom::ShareHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::sharing::mojom::DayShareHistory*
Arena::CreateMaybeMessage< ::sharing::mojom::DayShareHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sharing::mojom::DayShareHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::sharing::mojom::TargetShareHistory*
Arena::CreateMaybeMessage< ::sharing::mojom::TargetShareHistory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sharing::mojom::TargetShareHistory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
