// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crow_configuration.proto

#include "crow_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace crow {
namespace mojom {
PROTOBUF_CONSTEXPR CrowConfiguration::CrowConfiguration(
    ::_pbi::ConstantInitialized)
  : publisher_()
  , allowed_country_codes_(){}
struct CrowConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrowConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrowConfigurationDefaultTypeInternal() {}
  union {
    CrowConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrowConfigurationDefaultTypeInternal _CrowConfiguration_default_instance_;
PROTOBUF_CONSTEXPR Publisher::Publisher(
    ::_pbi::ConstantInitialized)
  : host_()
  , publication_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PublisherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublisherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublisherDefaultTypeInternal() {}
  union {
    Publisher _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublisherDefaultTypeInternal _Publisher_default_instance_;
}  // namespace mojom
}  // namespace crow
namespace crow {
namespace mojom {

// ===================================================================

class CrowConfiguration::_Internal {
 public:
};

CrowConfiguration::CrowConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  publisher_(arena),
  allowed_country_codes_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:crow.mojom.CrowConfiguration)
}
CrowConfiguration::CrowConfiguration(const CrowConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      publisher_(from.publisher_),
      allowed_country_codes_(from.allowed_country_codes_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:crow.mojom.CrowConfiguration)
}

inline void CrowConfiguration::SharedCtor() {
}

CrowConfiguration::~CrowConfiguration() {
  // @@protoc_insertion_point(destructor:crow.mojom.CrowConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrowConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CrowConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CrowConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:crow.mojom.CrowConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  publisher_.Clear();
  allowed_country_codes_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CrowConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .crow.mojom.Publisher publisher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_publisher(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string allowed_country_codes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_allowed_country_codes();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrowConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crow.mojom.CrowConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .crow.mojom.Publisher publisher = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_publisher_size()); i < n; i++) {
    const auto& repfield = this->_internal_publisher(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string allowed_country_codes = 2;
  for (int i = 0, n = this->_internal_allowed_country_codes_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_country_codes(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crow.mojom.CrowConfiguration)
  return target;
}

size_t CrowConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crow.mojom.CrowConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .crow.mojom.Publisher publisher = 1;
  total_size += 1UL * this->_internal_publisher_size();
  for (const auto& msg : this->publisher_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string allowed_country_codes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allowed_country_codes_.size());
  for (int i = 0, n = allowed_country_codes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allowed_country_codes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CrowConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CrowConfiguration*>(
      &from));
}

void CrowConfiguration::MergeFrom(const CrowConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crow.mojom.CrowConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  publisher_.MergeFrom(from.publisher_);
  allowed_country_codes_.MergeFrom(from.allowed_country_codes_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CrowConfiguration::CopyFrom(const CrowConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crow.mojom.CrowConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrowConfiguration::IsInitialized() const {
  return true;
}

void CrowConfiguration::InternalSwap(CrowConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  publisher_.InternalSwap(&other->publisher_);
  allowed_country_codes_.InternalSwap(&other->allowed_country_codes_);
}

std::string CrowConfiguration::GetTypeName() const {
  return "crow.mojom.CrowConfiguration";
}


// ===================================================================

class Publisher::_Internal {
 public:
  using HasBits = decltype(std::declval<Publisher>()._has_bits_);
  static void set_has_publication_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Publisher::Publisher(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  host_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:crow.mojom.Publisher)
}
Publisher::Publisher(const Publisher& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      host_(from.host_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  publication_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    publication_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_publication_id()) {
    publication_id_.Set(from._internal_publication_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:crow.mojom.Publisher)
}

inline void Publisher::SharedCtor() {
publication_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  publication_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Publisher::~Publisher() {
  // @@protoc_insertion_point(destructor:crow.mojom.Publisher)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Publisher::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  publication_id_.Destroy();
}

void Publisher::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Publisher::Clear() {
// @@protoc_insertion_point(message_clear_start:crow.mojom.Publisher)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    publication_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Publisher::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string publication_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_publication_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string host = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_host();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Publisher::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:crow.mojom.Publisher)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string publication_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_publication_id(), target);
  }

  // repeated string host = 2;
  for (int i = 0, n = this->_internal_host_size(); i < n; i++) {
    const auto& s = this->_internal_host(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:crow.mojom.Publisher)
  return target;
}

size_t Publisher::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:crow.mojom.Publisher)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string host = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(host_.size());
  for (int i = 0, n = host_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      host_.Get(i));
  }

  // optional string publication_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_publication_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Publisher::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Publisher*>(
      &from));
}

void Publisher::MergeFrom(const Publisher& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:crow.mojom.Publisher)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  host_.MergeFrom(from.host_);
  if (from._internal_has_publication_id()) {
    _internal_set_publication_id(from._internal_publication_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Publisher::CopyFrom(const Publisher& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:crow.mojom.Publisher)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Publisher::IsInitialized() const {
  return true;
}

void Publisher::InternalSwap(Publisher* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  host_.InternalSwap(&other->host_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &publication_id_, lhs_arena,
      &other->publication_id_, rhs_arena
  );
}

std::string Publisher::GetTypeName() const {
  return "crow.mojom.Publisher";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mojom
}  // namespace crow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::crow::mojom::CrowConfiguration*
Arena::CreateMaybeMessage< ::crow::mojom::CrowConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crow::mojom::CrowConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::crow::mojom::Publisher*
Arena::CreateMaybeMessage< ::crow::mojom::Publisher >(Arena* arena) {
  return Arena::CreateMessageInternal< ::crow::mojom::Publisher >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
