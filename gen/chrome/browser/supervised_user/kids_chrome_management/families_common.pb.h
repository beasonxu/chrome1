// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: families_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_families_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_families_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_families_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_families_5fcommon_2eproto {
  static const uint32_t offsets[];
};
namespace kids_chrome_management {
class FamilyMember;
struct FamilyMemberDefaultTypeInternal;
extern FamilyMemberDefaultTypeInternal _FamilyMember_default_instance_;
class UserProfile;
struct UserProfileDefaultTypeInternal;
extern UserProfileDefaultTypeInternal _UserProfile_default_instance_;
}  // namespace kids_chrome_management
PROTOBUF_NAMESPACE_OPEN
template<> ::kids_chrome_management::FamilyMember* Arena::CreateMaybeMessage<::kids_chrome_management::FamilyMember>(Arena*);
template<> ::kids_chrome_management::UserProfile* Arena::CreateMaybeMessage<::kids_chrome_management::UserProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kids_chrome_management {

enum FamilyRole : int {
  UNKNOWN_FAMILY_ROLE = 0,
  HEAD_OF_HOUSEHOLD = 1,
  PARENT = 2,
  MEMBER = 3,
  CHILD = 4,
  UNCONFIRMED_MEMBER = 5
};
bool FamilyRole_IsValid(int value);
constexpr FamilyRole FamilyRole_MIN = UNKNOWN_FAMILY_ROLE;
constexpr FamilyRole FamilyRole_MAX = UNCONFIRMED_MEMBER;
constexpr int FamilyRole_ARRAYSIZE = FamilyRole_MAX + 1;

const std::string& FamilyRole_Name(FamilyRole value);
template<typename T>
inline const std::string& FamilyRole_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FamilyRole>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FamilyRole_Name.");
  return FamilyRole_Name(static_cast<FamilyRole>(enum_t_value));
}
bool FamilyRole_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FamilyRole* value);
// ===================================================================

class UserProfile final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.UserProfile) */ {
 public:
  inline UserProfile() : UserProfile(nullptr) {}
  ~UserProfile() override;
  explicit PROTOBUF_CONSTEXPR UserProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserProfile(const UserProfile& from);
  UserProfile(UserProfile&& from) noexcept
    : UserProfile() {
    *this = ::std::move(from);
  }

  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserProfile& operator=(UserProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserProfile* internal_default_instance() {
    return reinterpret_cast<const UserProfile*>(
               &_UserProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserProfile& a, UserProfile& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UserProfile* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserProfile>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserProfile& from);
  void MergeFrom(const UserProfile& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserProfile* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.UserProfile";
  }
  protected:
  explicit UserProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObfuscatedUserIdFieldNumber = 1,
    kEmailFieldNumber = 2,
    kDisplayNameFieldNumber = 3,
    kProfileImageUrlFieldNumber = 4,
    kDefaultProfileImageUrlFieldNumber = 5,
  };
  // optional string obfuscated_user_id = 1;
  bool has_obfuscated_user_id() const;
  private:
  bool _internal_has_obfuscated_user_id() const;
  public:
  void clear_obfuscated_user_id();
  const std::string& obfuscated_user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_obfuscated_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_obfuscated_user_id();
  PROTOBUF_NODISCARD std::string* release_obfuscated_user_id();
  void set_allocated_obfuscated_user_id(std::string* obfuscated_user_id);
  private:
  const std::string& _internal_obfuscated_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obfuscated_user_id(const std::string& value);
  std::string* _internal_mutable_obfuscated_user_id();
  public:

  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_email(ArgT0&& arg0, ArgT... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string display_name = 3;
  bool has_display_name() const;
  private:
  bool _internal_has_display_name() const;
  public:
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // optional string profile_image_url = 4;
  bool has_profile_image_url() const;
  private:
  bool _internal_has_profile_image_url() const;
  public:
  void clear_profile_image_url();
  const std::string& profile_image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_profile_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_profile_image_url();
  PROTOBUF_NODISCARD std::string* release_profile_image_url();
  void set_allocated_profile_image_url(std::string* profile_image_url);
  private:
  const std::string& _internal_profile_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_profile_image_url(const std::string& value);
  std::string* _internal_mutable_profile_image_url();
  public:

  // optional string default_profile_image_url = 5;
  bool has_default_profile_image_url() const;
  private:
  bool _internal_has_default_profile_image_url() const;
  public:
  void clear_default_profile_image_url();
  const std::string& default_profile_image_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_profile_image_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_profile_image_url();
  PROTOBUF_NODISCARD std::string* release_default_profile_image_url();
  void set_allocated_default_profile_image_url(std::string* default_profile_image_url);
  private:
  const std::string& _internal_default_profile_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_profile_image_url(const std::string& value);
  std::string* _internal_mutable_default_profile_image_url();
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.UserProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obfuscated_user_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr profile_image_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default_profile_image_url_;
  friend struct ::TableStruct_families_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class FamilyMember final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.FamilyMember) */ {
 public:
  inline FamilyMember() : FamilyMember(nullptr) {}
  ~FamilyMember() override;
  explicit PROTOBUF_CONSTEXPR FamilyMember(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FamilyMember(const FamilyMember& from);
  FamilyMember(FamilyMember&& from) noexcept
    : FamilyMember() {
    *this = ::std::move(from);
  }

  inline FamilyMember& operator=(const FamilyMember& from) {
    CopyFrom(from);
    return *this;
  }
  inline FamilyMember& operator=(FamilyMember&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FamilyMember& default_instance() {
    return *internal_default_instance();
  }
  static inline const FamilyMember* internal_default_instance() {
    return reinterpret_cast<const FamilyMember*>(
               &_FamilyMember_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FamilyMember& a, FamilyMember& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FamilyMember* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FamilyMember* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FamilyMember* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FamilyMember>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FamilyMember& from);
  void MergeFrom(const FamilyMember& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FamilyMember* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.FamilyMember";
  }
  protected:
  explicit FamilyMember(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProfileFieldNumber = 2,
    kRoleFieldNumber = 1,
  };
  // optional .kids_chrome_management.UserProfile profile = 2;
  bool has_profile() const;
  private:
  bool _internal_has_profile() const;
  public:
  void clear_profile();
  const ::kids_chrome_management::UserProfile& profile() const;
  PROTOBUF_NODISCARD ::kids_chrome_management::UserProfile* release_profile();
  ::kids_chrome_management::UserProfile* mutable_profile();
  void set_allocated_profile(::kids_chrome_management::UserProfile* profile);
  private:
  const ::kids_chrome_management::UserProfile& _internal_profile() const;
  ::kids_chrome_management::UserProfile* _internal_mutable_profile();
  public:
  void unsafe_arena_set_allocated_profile(
      ::kids_chrome_management::UserProfile* profile);
  ::kids_chrome_management::UserProfile* unsafe_arena_release_profile();

  // optional .kids_chrome_management.FamilyRole role = 1;
  bool has_role() const;
  private:
  bool _internal_has_role() const;
  public:
  void clear_role();
  ::kids_chrome_management::FamilyRole role() const;
  void set_role(::kids_chrome_management::FamilyRole value);
  private:
  ::kids_chrome_management::FamilyRole _internal_role() const;
  void _internal_set_role(::kids_chrome_management::FamilyRole value);
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.FamilyMember)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::kids_chrome_management::UserProfile* profile_;
  int role_;
  friend struct ::TableStruct_families_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserProfile

// optional string obfuscated_user_id = 1;
inline bool UserProfile::_internal_has_obfuscated_user_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UserProfile::has_obfuscated_user_id() const {
  return _internal_has_obfuscated_user_id();
}
inline void UserProfile::clear_obfuscated_user_id() {
  obfuscated_user_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UserProfile::obfuscated_user_id() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.UserProfile.obfuscated_user_id)
  return _internal_obfuscated_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserProfile::set_obfuscated_user_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 obfuscated_user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.UserProfile.obfuscated_user_id)
}
inline std::string* UserProfile::mutable_obfuscated_user_id() {
  std::string* _s = _internal_mutable_obfuscated_user_id();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.UserProfile.obfuscated_user_id)
  return _s;
}
inline const std::string& UserProfile::_internal_obfuscated_user_id() const {
  return obfuscated_user_id_.Get();
}
inline void UserProfile::_internal_set_obfuscated_user_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  obfuscated_user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserProfile::_internal_mutable_obfuscated_user_id() {
  _has_bits_[0] |= 0x00000001u;
  return obfuscated_user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserProfile::release_obfuscated_user_id() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.UserProfile.obfuscated_user_id)
  if (!_internal_has_obfuscated_user_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = obfuscated_user_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obfuscated_user_id_.IsDefault()) {
    obfuscated_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserProfile::set_allocated_obfuscated_user_id(std::string* obfuscated_user_id) {
  if (obfuscated_user_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  obfuscated_user_id_.SetAllocated(obfuscated_user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (obfuscated_user_id_.IsDefault()) {
    obfuscated_user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.UserProfile.obfuscated_user_id)
}

// optional string email = 2;
inline bool UserProfile::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UserProfile::has_email() const {
  return _internal_has_email();
}
inline void UserProfile::clear_email() {
  email_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UserProfile::email() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.UserProfile.email)
  return _internal_email();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserProfile::set_email(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 email_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.UserProfile.email)
}
inline std::string* UserProfile::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.UserProfile.email)
  return _s;
}
inline const std::string& UserProfile::_internal_email() const {
  return email_.Get();
}
inline void UserProfile::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  email_.Set(value, GetArenaForAllocation());
}
inline std::string* UserProfile::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000002u;
  return email_.Mutable(GetArenaForAllocation());
}
inline std::string* UserProfile::release_email() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.UserProfile.email)
  if (!_internal_has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = email_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserProfile::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  email_.SetAllocated(email, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (email_.IsDefault()) {
    email_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.UserProfile.email)
}

// optional string display_name = 3;
inline bool UserProfile::_internal_has_display_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UserProfile::has_display_name() const {
  return _internal_has_display_name();
}
inline void UserProfile::clear_display_name() {
  display_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UserProfile::display_name() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.UserProfile.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserProfile::set_display_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.UserProfile.display_name)
}
inline std::string* UserProfile::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.UserProfile.display_name)
  return _s;
}
inline const std::string& UserProfile::_internal_display_name() const {
  return display_name_.Get();
}
inline void UserProfile::_internal_set_display_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UserProfile::_internal_mutable_display_name() {
  _has_bits_[0] |= 0x00000004u;
  return display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* UserProfile::release_display_name() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.UserProfile.display_name)
  if (!_internal_has_display_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = display_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserProfile::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.UserProfile.display_name)
}

// optional string profile_image_url = 4;
inline bool UserProfile::_internal_has_profile_image_url() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UserProfile::has_profile_image_url() const {
  return _internal_has_profile_image_url();
}
inline void UserProfile::clear_profile_image_url() {
  profile_image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& UserProfile::profile_image_url() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.UserProfile.profile_image_url)
  return _internal_profile_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserProfile::set_profile_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 profile_image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.UserProfile.profile_image_url)
}
inline std::string* UserProfile::mutable_profile_image_url() {
  std::string* _s = _internal_mutable_profile_image_url();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.UserProfile.profile_image_url)
  return _s;
}
inline const std::string& UserProfile::_internal_profile_image_url() const {
  return profile_image_url_.Get();
}
inline void UserProfile::_internal_set_profile_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  profile_image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UserProfile::_internal_mutable_profile_image_url() {
  _has_bits_[0] |= 0x00000008u;
  return profile_image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UserProfile::release_profile_image_url() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.UserProfile.profile_image_url)
  if (!_internal_has_profile_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = profile_image_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_image_url_.IsDefault()) {
    profile_image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserProfile::set_allocated_profile_image_url(std::string* profile_image_url) {
  if (profile_image_url != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  profile_image_url_.SetAllocated(profile_image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (profile_image_url_.IsDefault()) {
    profile_image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.UserProfile.profile_image_url)
}

// optional string default_profile_image_url = 5;
inline bool UserProfile::_internal_has_default_profile_image_url() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UserProfile::has_default_profile_image_url() const {
  return _internal_has_default_profile_image_url();
}
inline void UserProfile::clear_default_profile_image_url() {
  default_profile_image_url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& UserProfile::default_profile_image_url() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.UserProfile.default_profile_image_url)
  return _internal_default_profile_image_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserProfile::set_default_profile_image_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 default_profile_image_url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.UserProfile.default_profile_image_url)
}
inline std::string* UserProfile::mutable_default_profile_image_url() {
  std::string* _s = _internal_mutable_default_profile_image_url();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.UserProfile.default_profile_image_url)
  return _s;
}
inline const std::string& UserProfile::_internal_default_profile_image_url() const {
  return default_profile_image_url_.Get();
}
inline void UserProfile::_internal_set_default_profile_image_url(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  default_profile_image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UserProfile::_internal_mutable_default_profile_image_url() {
  _has_bits_[0] |= 0x00000010u;
  return default_profile_image_url_.Mutable(GetArenaForAllocation());
}
inline std::string* UserProfile::release_default_profile_image_url() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.UserProfile.default_profile_image_url)
  if (!_internal_has_default_profile_image_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = default_profile_image_url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_profile_image_url_.IsDefault()) {
    default_profile_image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UserProfile::set_allocated_default_profile_image_url(std::string* default_profile_image_url) {
  if (default_profile_image_url != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  default_profile_image_url_.SetAllocated(default_profile_image_url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default_profile_image_url_.IsDefault()) {
    default_profile_image_url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.UserProfile.default_profile_image_url)
}

// -------------------------------------------------------------------

// FamilyMember

// optional .kids_chrome_management.FamilyRole role = 1;
inline bool FamilyMember::_internal_has_role() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FamilyMember::has_role() const {
  return _internal_has_role();
}
inline void FamilyMember::clear_role() {
  role_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::kids_chrome_management::FamilyRole FamilyMember::_internal_role() const {
  return static_cast< ::kids_chrome_management::FamilyRole >(role_);
}
inline ::kids_chrome_management::FamilyRole FamilyMember::role() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.FamilyMember.role)
  return _internal_role();
}
inline void FamilyMember::_internal_set_role(::kids_chrome_management::FamilyRole value) {
  assert(::kids_chrome_management::FamilyRole_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  role_ = value;
}
inline void FamilyMember::set_role(::kids_chrome_management::FamilyRole value) {
  _internal_set_role(value);
  // @@protoc_insertion_point(field_set:kids_chrome_management.FamilyMember.role)
}

// optional .kids_chrome_management.UserProfile profile = 2;
inline bool FamilyMember::_internal_has_profile() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || profile_ != nullptr);
  return value;
}
inline bool FamilyMember::has_profile() const {
  return _internal_has_profile();
}
inline void FamilyMember::clear_profile() {
  if (profile_ != nullptr) profile_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::kids_chrome_management::UserProfile& FamilyMember::_internal_profile() const {
  const ::kids_chrome_management::UserProfile* p = profile_;
  return p != nullptr ? *p : reinterpret_cast<const ::kids_chrome_management::UserProfile&>(
      ::kids_chrome_management::_UserProfile_default_instance_);
}
inline const ::kids_chrome_management::UserProfile& FamilyMember::profile() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.FamilyMember.profile)
  return _internal_profile();
}
inline void FamilyMember::unsafe_arena_set_allocated_profile(
    ::kids_chrome_management::UserProfile* profile) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(profile_);
  }
  profile_ = profile;
  if (profile) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:kids_chrome_management.FamilyMember.profile)
}
inline ::kids_chrome_management::UserProfile* FamilyMember::release_profile() {
  _has_bits_[0] &= ~0x00000001u;
  ::kids_chrome_management::UserProfile* temp = profile_;
  profile_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::kids_chrome_management::UserProfile* FamilyMember::unsafe_arena_release_profile() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.FamilyMember.profile)
  _has_bits_[0] &= ~0x00000001u;
  ::kids_chrome_management::UserProfile* temp = profile_;
  profile_ = nullptr;
  return temp;
}
inline ::kids_chrome_management::UserProfile* FamilyMember::_internal_mutable_profile() {
  _has_bits_[0] |= 0x00000001u;
  if (profile_ == nullptr) {
    auto* p = CreateMaybeMessage<::kids_chrome_management::UserProfile>(GetArenaForAllocation());
    profile_ = p;
  }
  return profile_;
}
inline ::kids_chrome_management::UserProfile* FamilyMember::mutable_profile() {
  ::kids_chrome_management::UserProfile* _msg = _internal_mutable_profile();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.FamilyMember.profile)
  return _msg;
}
inline void FamilyMember::set_allocated_profile(::kids_chrome_management::UserProfile* profile) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete profile_;
  }
  if (profile) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(profile);
    if (message_arena != submessage_arena) {
      profile = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, profile, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  profile_ = profile;
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.FamilyMember.profile)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kids_chrome_management

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kids_chrome_management::FamilyRole> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_families_5fcommon_2eproto
