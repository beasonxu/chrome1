// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kidschromemanagement_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kidschromemanagement_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kidschromemanagement_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "families_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kidschromemanagement_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kidschromemanagement_5fmessages_2eproto {
  static const uint32_t offsets[];
};
namespace kids_chrome_management {
class ClassifyUrlRequest;
struct ClassifyUrlRequestDefaultTypeInternal;
extern ClassifyUrlRequestDefaultTypeInternal _ClassifyUrlRequest_default_instance_;
class ClassifyUrlResponse;
struct ClassifyUrlResponseDefaultTypeInternal;
extern ClassifyUrlResponseDefaultTypeInternal _ClassifyUrlResponse_default_instance_;
class ListFamilyMembersRequest;
struct ListFamilyMembersRequestDefaultTypeInternal;
extern ListFamilyMembersRequestDefaultTypeInternal _ListFamilyMembersRequest_default_instance_;
class ListFamilyMembersResponse;
struct ListFamilyMembersResponseDefaultTypeInternal;
extern ListFamilyMembersResponseDefaultTypeInternal _ListFamilyMembersResponse_default_instance_;
class RequestRestrictedUrlAccessRequest;
struct RequestRestrictedUrlAccessRequestDefaultTypeInternal;
extern RequestRestrictedUrlAccessRequestDefaultTypeInternal _RequestRestrictedUrlAccessRequest_default_instance_;
class RequestRestrictedUrlAccessResponse;
struct RequestRestrictedUrlAccessResponseDefaultTypeInternal;
extern RequestRestrictedUrlAccessResponseDefaultTypeInternal _RequestRestrictedUrlAccessResponse_default_instance_;
}  // namespace kids_chrome_management
PROTOBUF_NAMESPACE_OPEN
template<> ::kids_chrome_management::ClassifyUrlRequest* Arena::CreateMaybeMessage<::kids_chrome_management::ClassifyUrlRequest>(Arena*);
template<> ::kids_chrome_management::ClassifyUrlResponse* Arena::CreateMaybeMessage<::kids_chrome_management::ClassifyUrlResponse>(Arena*);
template<> ::kids_chrome_management::ListFamilyMembersRequest* Arena::CreateMaybeMessage<::kids_chrome_management::ListFamilyMembersRequest>(Arena*);
template<> ::kids_chrome_management::ListFamilyMembersResponse* Arena::CreateMaybeMessage<::kids_chrome_management::ListFamilyMembersResponse>(Arena*);
template<> ::kids_chrome_management::RequestRestrictedUrlAccessRequest* Arena::CreateMaybeMessage<::kids_chrome_management::RequestRestrictedUrlAccessRequest>(Arena*);
template<> ::kids_chrome_management::RequestRestrictedUrlAccessResponse* Arena::CreateMaybeMessage<::kids_chrome_management::RequestRestrictedUrlAccessResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace kids_chrome_management {

enum ClassifyUrlResponse_DisplayClassification : int {
  ClassifyUrlResponse_DisplayClassification_UNKNOWN_DISPLAY_CLASSIFICATION = 0,
  ClassifyUrlResponse_DisplayClassification_ALLOWED = 1,
  ClassifyUrlResponse_DisplayClassification_RESTRICTED = 2
};
bool ClassifyUrlResponse_DisplayClassification_IsValid(int value);
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse_DisplayClassification_DisplayClassification_MIN = ClassifyUrlResponse_DisplayClassification_UNKNOWN_DISPLAY_CLASSIFICATION;
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse_DisplayClassification_DisplayClassification_MAX = ClassifyUrlResponse_DisplayClassification_RESTRICTED;
constexpr int ClassifyUrlResponse_DisplayClassification_DisplayClassification_ARRAYSIZE = ClassifyUrlResponse_DisplayClassification_DisplayClassification_MAX + 1;

const std::string& ClassifyUrlResponse_DisplayClassification_Name(ClassifyUrlResponse_DisplayClassification value);
template<typename T>
inline const std::string& ClassifyUrlResponse_DisplayClassification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClassifyUrlResponse_DisplayClassification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClassifyUrlResponse_DisplayClassification_Name.");
  return ClassifyUrlResponse_DisplayClassification_Name(static_cast<ClassifyUrlResponse_DisplayClassification>(enum_t_value));
}
bool ClassifyUrlResponse_DisplayClassification_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClassifyUrlResponse_DisplayClassification* value);
// ===================================================================

class ListFamilyMembersRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.ListFamilyMembersRequest) */ {
 public:
  inline ListFamilyMembersRequest() : ListFamilyMembersRequest(nullptr) {}
  ~ListFamilyMembersRequest() override;
  explicit PROTOBUF_CONSTEXPR ListFamilyMembersRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFamilyMembersRequest(const ListFamilyMembersRequest& from);
  ListFamilyMembersRequest(ListFamilyMembersRequest&& from) noexcept
    : ListFamilyMembersRequest() {
    *this = ::std::move(from);
  }

  inline ListFamilyMembersRequest& operator=(const ListFamilyMembersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFamilyMembersRequest& operator=(ListFamilyMembersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ListFamilyMembersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFamilyMembersRequest* internal_default_instance() {
    return reinterpret_cast<const ListFamilyMembersRequest*>(
               &_ListFamilyMembersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListFamilyMembersRequest& a, ListFamilyMembersRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ListFamilyMembersRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFamilyMembersRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFamilyMembersRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListFamilyMembersRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListFamilyMembersRequest& from);
  void MergeFrom(const ListFamilyMembersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListFamilyMembersRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.ListFamilyMembersRequest";
  }
  protected:
  explicit ListFamilyMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFamilyIdFieldNumber = 1,
  };
  // optional string family_id = 1;
  bool has_family_id() const;
  private:
  bool _internal_has_family_id() const;
  public:
  void clear_family_id();
  const std::string& family_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_family_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_family_id();
  PROTOBUF_NODISCARD std::string* release_family_id();
  void set_allocated_family_id(std::string* family_id);
  private:
  const std::string& _internal_family_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_family_id(const std::string& value);
  std::string* _internal_mutable_family_id();
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.ListFamilyMembersRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr family_id_;
  friend struct ::TableStruct_kidschromemanagement_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ListFamilyMembersResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.ListFamilyMembersResponse) */ {
 public:
  inline ListFamilyMembersResponse() : ListFamilyMembersResponse(nullptr) {}
  ~ListFamilyMembersResponse() override;
  explicit PROTOBUF_CONSTEXPR ListFamilyMembersResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListFamilyMembersResponse(const ListFamilyMembersResponse& from);
  ListFamilyMembersResponse(ListFamilyMembersResponse&& from) noexcept
    : ListFamilyMembersResponse() {
    *this = ::std::move(from);
  }

  inline ListFamilyMembersResponse& operator=(const ListFamilyMembersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListFamilyMembersResponse& operator=(ListFamilyMembersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ListFamilyMembersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListFamilyMembersResponse* internal_default_instance() {
    return reinterpret_cast<const ListFamilyMembersResponse*>(
               &_ListFamilyMembersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListFamilyMembersResponse& a, ListFamilyMembersResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ListFamilyMembersResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListFamilyMembersResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListFamilyMembersResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListFamilyMembersResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListFamilyMembersResponse& from);
  void MergeFrom(const ListFamilyMembersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListFamilyMembersResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.ListFamilyMembersResponse";
  }
  protected:
  explicit ListFamilyMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembersFieldNumber = 2,
    kSelfObfuscatedGaiaIdFieldNumber = 1,
  };
  // repeated .kids_chrome_management.FamilyMember members = 2;
  int members_size() const;
  private:
  int _internal_members_size() const;
  public:
  void clear_members();
  ::kids_chrome_management::FamilyMember* mutable_members(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kids_chrome_management::FamilyMember >*
      mutable_members();
  private:
  const ::kids_chrome_management::FamilyMember& _internal_members(int index) const;
  ::kids_chrome_management::FamilyMember* _internal_add_members();
  public:
  const ::kids_chrome_management::FamilyMember& members(int index) const;
  ::kids_chrome_management::FamilyMember* add_members();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kids_chrome_management::FamilyMember >&
      members() const;

  // optional string self_obfuscated_gaia_id = 1;
  bool has_self_obfuscated_gaia_id() const;
  private:
  bool _internal_has_self_obfuscated_gaia_id() const;
  public:
  void clear_self_obfuscated_gaia_id();
  const std::string& self_obfuscated_gaia_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_self_obfuscated_gaia_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_self_obfuscated_gaia_id();
  PROTOBUF_NODISCARD std::string* release_self_obfuscated_gaia_id();
  void set_allocated_self_obfuscated_gaia_id(std::string* self_obfuscated_gaia_id);
  private:
  const std::string& _internal_self_obfuscated_gaia_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_self_obfuscated_gaia_id(const std::string& value);
  std::string* _internal_mutable_self_obfuscated_gaia_id();
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.ListFamilyMembersResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kids_chrome_management::FamilyMember > members_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr self_obfuscated_gaia_id_;
  friend struct ::TableStruct_kidschromemanagement_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RequestRestrictedUrlAccessRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.RequestRestrictedUrlAccessRequest) */ {
 public:
  inline RequestRestrictedUrlAccessRequest() : RequestRestrictedUrlAccessRequest(nullptr) {}
  ~RequestRestrictedUrlAccessRequest() override;
  explicit PROTOBUF_CONSTEXPR RequestRestrictedUrlAccessRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRestrictedUrlAccessRequest(const RequestRestrictedUrlAccessRequest& from);
  RequestRestrictedUrlAccessRequest(RequestRestrictedUrlAccessRequest&& from) noexcept
    : RequestRestrictedUrlAccessRequest() {
    *this = ::std::move(from);
  }

  inline RequestRestrictedUrlAccessRequest& operator=(const RequestRestrictedUrlAccessRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRestrictedUrlAccessRequest& operator=(RequestRestrictedUrlAccessRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestRestrictedUrlAccessRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRestrictedUrlAccessRequest* internal_default_instance() {
    return reinterpret_cast<const RequestRestrictedUrlAccessRequest*>(
               &_RequestRestrictedUrlAccessRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestRestrictedUrlAccessRequest& a, RequestRestrictedUrlAccessRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequestRestrictedUrlAccessRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRestrictedUrlAccessRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestRestrictedUrlAccessRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestRestrictedUrlAccessRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestRestrictedUrlAccessRequest& from);
  void MergeFrom(const RequestRestrictedUrlAccessRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestRestrictedUrlAccessRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.RequestRestrictedUrlAccessRequest";
  }
  protected:
  explicit RequestRestrictedUrlAccessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonIdFieldNumber = 1,
    kUrlFieldNumber = 2,
  };
  // optional string person_id = 1;
  bool has_person_id() const;
  private:
  bool _internal_has_person_id() const;
  public:
  void clear_person_id();
  const std::string& person_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_person_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_person_id();
  PROTOBUF_NODISCARD std::string* release_person_id();
  void set_allocated_person_id(std::string* person_id);
  private:
  const std::string& _internal_person_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_person_id(const std::string& value);
  std::string* _internal_mutable_person_id();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.RequestRestrictedUrlAccessRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr person_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_kidschromemanagement_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class RequestRestrictedUrlAccessResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.RequestRestrictedUrlAccessResponse) */ {
 public:
  inline RequestRestrictedUrlAccessResponse() : RequestRestrictedUrlAccessResponse(nullptr) {}
  ~RequestRestrictedUrlAccessResponse() override;
  explicit PROTOBUF_CONSTEXPR RequestRestrictedUrlAccessResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestRestrictedUrlAccessResponse(const RequestRestrictedUrlAccessResponse& from);
  RequestRestrictedUrlAccessResponse(RequestRestrictedUrlAccessResponse&& from) noexcept
    : RequestRestrictedUrlAccessResponse() {
    *this = ::std::move(from);
  }

  inline RequestRestrictedUrlAccessResponse& operator=(const RequestRestrictedUrlAccessResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRestrictedUrlAccessResponse& operator=(RequestRestrictedUrlAccessResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestRestrictedUrlAccessResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestRestrictedUrlAccessResponse* internal_default_instance() {
    return reinterpret_cast<const RequestRestrictedUrlAccessResponse*>(
               &_RequestRestrictedUrlAccessResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RequestRestrictedUrlAccessResponse& a, RequestRestrictedUrlAccessResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequestRestrictedUrlAccessResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestRestrictedUrlAccessResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestRestrictedUrlAccessResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestRestrictedUrlAccessResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestRestrictedUrlAccessResponse& from);
  void MergeFrom(const RequestRestrictedUrlAccessResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestRestrictedUrlAccessResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.RequestRestrictedUrlAccessResponse";
  }
  protected:
  explicit RequestRestrictedUrlAccessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:kids_chrome_management.RequestRestrictedUrlAccessResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kidschromemanagement_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClassifyUrlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.ClassifyUrlRequest) */ {
 public:
  inline ClassifyUrlRequest() : ClassifyUrlRequest(nullptr) {}
  ~ClassifyUrlRequest() override;
  explicit PROTOBUF_CONSTEXPR ClassifyUrlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassifyUrlRequest(const ClassifyUrlRequest& from);
  ClassifyUrlRequest(ClassifyUrlRequest&& from) noexcept
    : ClassifyUrlRequest() {
    *this = ::std::move(from);
  }

  inline ClassifyUrlRequest& operator=(const ClassifyUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassifyUrlRequest& operator=(ClassifyUrlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClassifyUrlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassifyUrlRequest* internal_default_instance() {
    return reinterpret_cast<const ClassifyUrlRequest*>(
               &_ClassifyUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClassifyUrlRequest& a, ClassifyUrlRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClassifyUrlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassifyUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassifyUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassifyUrlRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClassifyUrlRequest& from);
  void MergeFrom(const ClassifyUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassifyUrlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.ClassifyUrlRequest";
  }
  protected:
  explicit ClassifyUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonIdFieldNumber = 1,
    kUrlFieldNumber = 2,
    kRegionCodeFieldNumber = 3,
  };
  // optional string person_id = 1;
  bool has_person_id() const;
  private:
  bool _internal_has_person_id() const;
  public:
  void clear_person_id();
  const std::string& person_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_person_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_person_id();
  PROTOBUF_NODISCARD std::string* release_person_id();
  void set_allocated_person_id(std::string* person_id);
  private:
  const std::string& _internal_person_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_person_id(const std::string& value);
  std::string* _internal_mutable_person_id();
  public:

  // optional string url = 2;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string region_code = 3;
  bool has_region_code() const;
  private:
  bool _internal_has_region_code() const;
  public:
  void clear_region_code();
  const std::string& region_code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region_code();
  PROTOBUF_NODISCARD std::string* release_region_code();
  void set_allocated_region_code(std::string* region_code);
  private:
  const std::string& _internal_region_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region_code(const std::string& value);
  std::string* _internal_mutable_region_code();
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.ClassifyUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr person_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_code_;
  friend struct ::TableStruct_kidschromemanagement_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class ClassifyUrlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:kids_chrome_management.ClassifyUrlResponse) */ {
 public:
  inline ClassifyUrlResponse() : ClassifyUrlResponse(nullptr) {}
  ~ClassifyUrlResponse() override;
  explicit PROTOBUF_CONSTEXPR ClassifyUrlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClassifyUrlResponse(const ClassifyUrlResponse& from);
  ClassifyUrlResponse(ClassifyUrlResponse&& from) noexcept
    : ClassifyUrlResponse() {
    *this = ::std::move(from);
  }

  inline ClassifyUrlResponse& operator=(const ClassifyUrlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClassifyUrlResponse& operator=(ClassifyUrlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClassifyUrlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClassifyUrlResponse* internal_default_instance() {
    return reinterpret_cast<const ClassifyUrlResponse*>(
               &_ClassifyUrlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ClassifyUrlResponse& a, ClassifyUrlResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClassifyUrlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClassifyUrlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClassifyUrlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClassifyUrlResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClassifyUrlResponse& from);
  void MergeFrom(const ClassifyUrlResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClassifyUrlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "kids_chrome_management.ClassifyUrlResponse";
  }
  protected:
  explicit ClassifyUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClassifyUrlResponse_DisplayClassification DisplayClassification;
  static constexpr DisplayClassification UNKNOWN_DISPLAY_CLASSIFICATION =
    ClassifyUrlResponse_DisplayClassification_UNKNOWN_DISPLAY_CLASSIFICATION;
  static constexpr DisplayClassification ALLOWED =
    ClassifyUrlResponse_DisplayClassification_ALLOWED;
  static constexpr DisplayClassification RESTRICTED =
    ClassifyUrlResponse_DisplayClassification_RESTRICTED;
  static inline bool DisplayClassification_IsValid(int value) {
    return ClassifyUrlResponse_DisplayClassification_IsValid(value);
  }
  static constexpr DisplayClassification DisplayClassification_MIN =
    ClassifyUrlResponse_DisplayClassification_DisplayClassification_MIN;
  static constexpr DisplayClassification DisplayClassification_MAX =
    ClassifyUrlResponse_DisplayClassification_DisplayClassification_MAX;
  static constexpr int DisplayClassification_ARRAYSIZE =
    ClassifyUrlResponse_DisplayClassification_DisplayClassification_ARRAYSIZE;
  template<typename T>
  static inline const std::string& DisplayClassification_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DisplayClassification>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DisplayClassification_Name.");
    return ClassifyUrlResponse_DisplayClassification_Name(enum_t_value);
  }
  static inline bool DisplayClassification_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DisplayClassification* value) {
    return ClassifyUrlResponse_DisplayClassification_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayClassificationFieldNumber = 1,
  };
  // optional .kids_chrome_management.ClassifyUrlResponse.DisplayClassification display_classification = 1;
  bool has_display_classification() const;
  private:
  bool _internal_has_display_classification() const;
  public:
  void clear_display_classification();
  ::kids_chrome_management::ClassifyUrlResponse_DisplayClassification display_classification() const;
  void set_display_classification(::kids_chrome_management::ClassifyUrlResponse_DisplayClassification value);
  private:
  ::kids_chrome_management::ClassifyUrlResponse_DisplayClassification _internal_display_classification() const;
  void _internal_set_display_classification(::kids_chrome_management::ClassifyUrlResponse_DisplayClassification value);
  public:

  // @@protoc_insertion_point(class_scope:kids_chrome_management.ClassifyUrlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int display_classification_;
  friend struct ::TableStruct_kidschromemanagement_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ListFamilyMembersRequest

// optional string family_id = 1;
inline bool ListFamilyMembersRequest::_internal_has_family_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListFamilyMembersRequest::has_family_id() const {
  return _internal_has_family_id();
}
inline void ListFamilyMembersRequest::clear_family_id() {
  family_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListFamilyMembersRequest::family_id() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ListFamilyMembersRequest.family_id)
  return _internal_family_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListFamilyMembersRequest::set_family_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 family_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.ListFamilyMembersRequest.family_id)
}
inline std::string* ListFamilyMembersRequest::mutable_family_id() {
  std::string* _s = _internal_mutable_family_id();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.ListFamilyMembersRequest.family_id)
  return _s;
}
inline const std::string& ListFamilyMembersRequest::_internal_family_id() const {
  return family_id_.Get();
}
inline void ListFamilyMembersRequest::_internal_set_family_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  family_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListFamilyMembersRequest::_internal_mutable_family_id() {
  _has_bits_[0] |= 0x00000001u;
  return family_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListFamilyMembersRequest::release_family_id() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.ListFamilyMembersRequest.family_id)
  if (!_internal_has_family_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = family_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (family_id_.IsDefault()) {
    family_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListFamilyMembersRequest::set_allocated_family_id(std::string* family_id) {
  if (family_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  family_id_.SetAllocated(family_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (family_id_.IsDefault()) {
    family_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.ListFamilyMembersRequest.family_id)
}

// -------------------------------------------------------------------

// ListFamilyMembersResponse

// optional string self_obfuscated_gaia_id = 1;
inline bool ListFamilyMembersResponse::_internal_has_self_obfuscated_gaia_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ListFamilyMembersResponse::has_self_obfuscated_gaia_id() const {
  return _internal_has_self_obfuscated_gaia_id();
}
inline void ListFamilyMembersResponse::clear_self_obfuscated_gaia_id() {
  self_obfuscated_gaia_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ListFamilyMembersResponse::self_obfuscated_gaia_id() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ListFamilyMembersResponse.self_obfuscated_gaia_id)
  return _internal_self_obfuscated_gaia_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListFamilyMembersResponse::set_self_obfuscated_gaia_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 self_obfuscated_gaia_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.ListFamilyMembersResponse.self_obfuscated_gaia_id)
}
inline std::string* ListFamilyMembersResponse::mutable_self_obfuscated_gaia_id() {
  std::string* _s = _internal_mutable_self_obfuscated_gaia_id();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.ListFamilyMembersResponse.self_obfuscated_gaia_id)
  return _s;
}
inline const std::string& ListFamilyMembersResponse::_internal_self_obfuscated_gaia_id() const {
  return self_obfuscated_gaia_id_.Get();
}
inline void ListFamilyMembersResponse::_internal_set_self_obfuscated_gaia_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  self_obfuscated_gaia_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListFamilyMembersResponse::_internal_mutable_self_obfuscated_gaia_id() {
  _has_bits_[0] |= 0x00000001u;
  return self_obfuscated_gaia_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListFamilyMembersResponse::release_self_obfuscated_gaia_id() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.ListFamilyMembersResponse.self_obfuscated_gaia_id)
  if (!_internal_has_self_obfuscated_gaia_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = self_obfuscated_gaia_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (self_obfuscated_gaia_id_.IsDefault()) {
    self_obfuscated_gaia_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ListFamilyMembersResponse::set_allocated_self_obfuscated_gaia_id(std::string* self_obfuscated_gaia_id) {
  if (self_obfuscated_gaia_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  self_obfuscated_gaia_id_.SetAllocated(self_obfuscated_gaia_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (self_obfuscated_gaia_id_.IsDefault()) {
    self_obfuscated_gaia_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.ListFamilyMembersResponse.self_obfuscated_gaia_id)
}

// repeated .kids_chrome_management.FamilyMember members = 2;
inline int ListFamilyMembersResponse::_internal_members_size() const {
  return members_.size();
}
inline int ListFamilyMembersResponse::members_size() const {
  return _internal_members_size();
}
inline ::kids_chrome_management::FamilyMember* ListFamilyMembersResponse::mutable_members(int index) {
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.ListFamilyMembersResponse.members)
  return members_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kids_chrome_management::FamilyMember >*
ListFamilyMembersResponse::mutable_members() {
  // @@protoc_insertion_point(field_mutable_list:kids_chrome_management.ListFamilyMembersResponse.members)
  return &members_;
}
inline const ::kids_chrome_management::FamilyMember& ListFamilyMembersResponse::_internal_members(int index) const {
  return members_.Get(index);
}
inline const ::kids_chrome_management::FamilyMember& ListFamilyMembersResponse::members(int index) const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ListFamilyMembersResponse.members)
  return _internal_members(index);
}
inline ::kids_chrome_management::FamilyMember* ListFamilyMembersResponse::_internal_add_members() {
  return members_.Add();
}
inline ::kids_chrome_management::FamilyMember* ListFamilyMembersResponse::add_members() {
  ::kids_chrome_management::FamilyMember* _add = _internal_add_members();
  // @@protoc_insertion_point(field_add:kids_chrome_management.ListFamilyMembersResponse.members)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::kids_chrome_management::FamilyMember >&
ListFamilyMembersResponse::members() const {
  // @@protoc_insertion_point(field_list:kids_chrome_management.ListFamilyMembersResponse.members)
  return members_;
}

// -------------------------------------------------------------------

// RequestRestrictedUrlAccessRequest

// optional string person_id = 1;
inline bool RequestRestrictedUrlAccessRequest::_internal_has_person_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RequestRestrictedUrlAccessRequest::has_person_id() const {
  return _internal_has_person_id();
}
inline void RequestRestrictedUrlAccessRequest::clear_person_id() {
  person_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RequestRestrictedUrlAccessRequest::person_id() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.RequestRestrictedUrlAccessRequest.person_id)
  return _internal_person_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestRestrictedUrlAccessRequest::set_person_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 person_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.RequestRestrictedUrlAccessRequest.person_id)
}
inline std::string* RequestRestrictedUrlAccessRequest::mutable_person_id() {
  std::string* _s = _internal_mutable_person_id();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.RequestRestrictedUrlAccessRequest.person_id)
  return _s;
}
inline const std::string& RequestRestrictedUrlAccessRequest::_internal_person_id() const {
  return person_id_.Get();
}
inline void RequestRestrictedUrlAccessRequest::_internal_set_person_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  person_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestRestrictedUrlAccessRequest::_internal_mutable_person_id() {
  _has_bits_[0] |= 0x00000001u;
  return person_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestRestrictedUrlAccessRequest::release_person_id() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.RequestRestrictedUrlAccessRequest.person_id)
  if (!_internal_has_person_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = person_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (person_id_.IsDefault()) {
    person_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequestRestrictedUrlAccessRequest::set_allocated_person_id(std::string* person_id) {
  if (person_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  person_id_.SetAllocated(person_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (person_id_.IsDefault()) {
    person_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.RequestRestrictedUrlAccessRequest.person_id)
}

// optional string url = 2;
inline bool RequestRestrictedUrlAccessRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RequestRestrictedUrlAccessRequest::has_url() const {
  return _internal_has_url();
}
inline void RequestRestrictedUrlAccessRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RequestRestrictedUrlAccessRequest::url() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.RequestRestrictedUrlAccessRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestRestrictedUrlAccessRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.RequestRestrictedUrlAccessRequest.url)
}
inline std::string* RequestRestrictedUrlAccessRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.RequestRestrictedUrlAccessRequest.url)
  return _s;
}
inline const std::string& RequestRestrictedUrlAccessRequest::_internal_url() const {
  return url_.Get();
}
inline void RequestRestrictedUrlAccessRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* RequestRestrictedUrlAccessRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* RequestRestrictedUrlAccessRequest::release_url() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.RequestRestrictedUrlAccessRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RequestRestrictedUrlAccessRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.RequestRestrictedUrlAccessRequest.url)
}

// -------------------------------------------------------------------

// RequestRestrictedUrlAccessResponse

// -------------------------------------------------------------------

// ClassifyUrlRequest

// optional string person_id = 1;
inline bool ClassifyUrlRequest::_internal_has_person_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassifyUrlRequest::has_person_id() const {
  return _internal_has_person_id();
}
inline void ClassifyUrlRequest::clear_person_id() {
  person_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClassifyUrlRequest::person_id() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ClassifyUrlRequest.person_id)
  return _internal_person_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClassifyUrlRequest::set_person_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 person_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.ClassifyUrlRequest.person_id)
}
inline std::string* ClassifyUrlRequest::mutable_person_id() {
  std::string* _s = _internal_mutable_person_id();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.ClassifyUrlRequest.person_id)
  return _s;
}
inline const std::string& ClassifyUrlRequest::_internal_person_id() const {
  return person_id_.Get();
}
inline void ClassifyUrlRequest::_internal_set_person_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  person_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClassifyUrlRequest::_internal_mutable_person_id() {
  _has_bits_[0] |= 0x00000001u;
  return person_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClassifyUrlRequest::release_person_id() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.ClassifyUrlRequest.person_id)
  if (!_internal_has_person_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = person_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (person_id_.IsDefault()) {
    person_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClassifyUrlRequest::set_allocated_person_id(std::string* person_id) {
  if (person_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  person_id_.SetAllocated(person_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (person_id_.IsDefault()) {
    person_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.ClassifyUrlRequest.person_id)
}

// optional string url = 2;
inline bool ClassifyUrlRequest::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClassifyUrlRequest::has_url() const {
  return _internal_has_url();
}
inline void ClassifyUrlRequest::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClassifyUrlRequest::url() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ClassifyUrlRequest.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClassifyUrlRequest::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.ClassifyUrlRequest.url)
}
inline std::string* ClassifyUrlRequest::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.ClassifyUrlRequest.url)
  return _s;
}
inline const std::string& ClassifyUrlRequest::_internal_url() const {
  return url_.Get();
}
inline void ClassifyUrlRequest::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* ClassifyUrlRequest::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* ClassifyUrlRequest::release_url() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.ClassifyUrlRequest.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClassifyUrlRequest::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.ClassifyUrlRequest.url)
}

// optional string region_code = 3;
inline bool ClassifyUrlRequest::_internal_has_region_code() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClassifyUrlRequest::has_region_code() const {
  return _internal_has_region_code();
}
inline void ClassifyUrlRequest::clear_region_code() {
  region_code_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClassifyUrlRequest::region_code() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ClassifyUrlRequest.region_code)
  return _internal_region_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClassifyUrlRequest::set_region_code(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 region_code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:kids_chrome_management.ClassifyUrlRequest.region_code)
}
inline std::string* ClassifyUrlRequest::mutable_region_code() {
  std::string* _s = _internal_mutable_region_code();
  // @@protoc_insertion_point(field_mutable:kids_chrome_management.ClassifyUrlRequest.region_code)
  return _s;
}
inline const std::string& ClassifyUrlRequest::_internal_region_code() const {
  return region_code_.Get();
}
inline void ClassifyUrlRequest::_internal_set_region_code(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  region_code_.Set(value, GetArenaForAllocation());
}
inline std::string* ClassifyUrlRequest::_internal_mutable_region_code() {
  _has_bits_[0] |= 0x00000004u;
  return region_code_.Mutable(GetArenaForAllocation());
}
inline std::string* ClassifyUrlRequest::release_region_code() {
  // @@protoc_insertion_point(field_release:kids_chrome_management.ClassifyUrlRequest.region_code)
  if (!_internal_has_region_code()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = region_code_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (region_code_.IsDefault()) {
    region_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClassifyUrlRequest::set_allocated_region_code(std::string* region_code) {
  if (region_code != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  region_code_.SetAllocated(region_code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (region_code_.IsDefault()) {
    region_code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:kids_chrome_management.ClassifyUrlRequest.region_code)
}

// -------------------------------------------------------------------

// ClassifyUrlResponse

// optional .kids_chrome_management.ClassifyUrlResponse.DisplayClassification display_classification = 1;
inline bool ClassifyUrlResponse::_internal_has_display_classification() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClassifyUrlResponse::has_display_classification() const {
  return _internal_has_display_classification();
}
inline void ClassifyUrlResponse::clear_display_classification() {
  display_classification_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::kids_chrome_management::ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::_internal_display_classification() const {
  return static_cast< ::kids_chrome_management::ClassifyUrlResponse_DisplayClassification >(display_classification_);
}
inline ::kids_chrome_management::ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::display_classification() const {
  // @@protoc_insertion_point(field_get:kids_chrome_management.ClassifyUrlResponse.display_classification)
  return _internal_display_classification();
}
inline void ClassifyUrlResponse::_internal_set_display_classification(::kids_chrome_management::ClassifyUrlResponse_DisplayClassification value) {
  assert(::kids_chrome_management::ClassifyUrlResponse_DisplayClassification_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  display_classification_ = value;
}
inline void ClassifyUrlResponse::set_display_classification(::kids_chrome_management::ClassifyUrlResponse_DisplayClassification value) {
  _internal_set_display_classification(value);
  // @@protoc_insertion_point(field_set:kids_chrome_management.ClassifyUrlResponse.display_classification)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace kids_chrome_management

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::kids_chrome_management::ClassifyUrlResponse_DisplayClassification> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kidschromemanagement_5fmessages_2eproto
