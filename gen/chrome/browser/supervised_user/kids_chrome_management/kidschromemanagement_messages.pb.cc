// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kidschromemanagement_messages.proto

#include "kidschromemanagement_messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace kids_chrome_management {
PROTOBUF_CONSTEXPR ListFamilyMembersRequest::ListFamilyMembersRequest(
    ::_pbi::ConstantInitialized)
  : family_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListFamilyMembersRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListFamilyMembersRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListFamilyMembersRequestDefaultTypeInternal() {}
  union {
    ListFamilyMembersRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListFamilyMembersRequestDefaultTypeInternal _ListFamilyMembersRequest_default_instance_;
PROTOBUF_CONSTEXPR ListFamilyMembersResponse::ListFamilyMembersResponse(
    ::_pbi::ConstantInitialized)
  : members_()
  , self_obfuscated_gaia_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ListFamilyMembersResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListFamilyMembersResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListFamilyMembersResponseDefaultTypeInternal() {}
  union {
    ListFamilyMembersResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListFamilyMembersResponseDefaultTypeInternal _ListFamilyMembersResponse_default_instance_;
PROTOBUF_CONSTEXPR RequestRestrictedUrlAccessRequest::RequestRestrictedUrlAccessRequest(
    ::_pbi::ConstantInitialized)
  : person_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RequestRestrictedUrlAccessRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestRestrictedUrlAccessRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestRestrictedUrlAccessRequestDefaultTypeInternal() {}
  union {
    RequestRestrictedUrlAccessRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestRestrictedUrlAccessRequestDefaultTypeInternal _RequestRestrictedUrlAccessRequest_default_instance_;
PROTOBUF_CONSTEXPR RequestRestrictedUrlAccessResponse::RequestRestrictedUrlAccessResponse(
    ::_pbi::ConstantInitialized){}
struct RequestRestrictedUrlAccessResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestRestrictedUrlAccessResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestRestrictedUrlAccessResponseDefaultTypeInternal() {}
  union {
    RequestRestrictedUrlAccessResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestRestrictedUrlAccessResponseDefaultTypeInternal _RequestRestrictedUrlAccessResponse_default_instance_;
PROTOBUF_CONSTEXPR ClassifyUrlRequest::ClassifyUrlRequest(
    ::_pbi::ConstantInitialized)
  : person_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , region_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClassifyUrlRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassifyUrlRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassifyUrlRequestDefaultTypeInternal() {}
  union {
    ClassifyUrlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassifyUrlRequestDefaultTypeInternal _ClassifyUrlRequest_default_instance_;
PROTOBUF_CONSTEXPR ClassifyUrlResponse::ClassifyUrlResponse(
    ::_pbi::ConstantInitialized)
  : display_classification_(0)
{}
struct ClassifyUrlResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClassifyUrlResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClassifyUrlResponseDefaultTypeInternal() {}
  union {
    ClassifyUrlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClassifyUrlResponseDefaultTypeInternal _ClassifyUrlResponse_default_instance_;
}  // namespace kids_chrome_management
namespace kids_chrome_management {
bool ClassifyUrlResponse_DisplayClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClassifyUrlResponse_DisplayClassification_strings[3] = {};

static const char ClassifyUrlResponse_DisplayClassification_names[] =
  "ALLOWED"
  "RESTRICTED"
  "UNKNOWN_DISPLAY_CLASSIFICATION";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClassifyUrlResponse_DisplayClassification_entries[] = {
  { {ClassifyUrlResponse_DisplayClassification_names + 0, 7}, 1 },
  { {ClassifyUrlResponse_DisplayClassification_names + 7, 10}, 2 },
  { {ClassifyUrlResponse_DisplayClassification_names + 17, 30}, 0 },
};

static const int ClassifyUrlResponse_DisplayClassification_entries_by_number[] = {
  2, // 0 -> UNKNOWN_DISPLAY_CLASSIFICATION
  0, // 1 -> ALLOWED
  1, // 2 -> RESTRICTED
};

const std::string& ClassifyUrlResponse_DisplayClassification_Name(
    ClassifyUrlResponse_DisplayClassification value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClassifyUrlResponse_DisplayClassification_entries,
          ClassifyUrlResponse_DisplayClassification_entries_by_number,
          3, ClassifyUrlResponse_DisplayClassification_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClassifyUrlResponse_DisplayClassification_entries,
      ClassifyUrlResponse_DisplayClassification_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClassifyUrlResponse_DisplayClassification_strings[idx].get();
}
bool ClassifyUrlResponse_DisplayClassification_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClassifyUrlResponse_DisplayClassification* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClassifyUrlResponse_DisplayClassification_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ClassifyUrlResponse_DisplayClassification>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::UNKNOWN_DISPLAY_CLASSIFICATION;
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::ALLOWED;
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::RESTRICTED;
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::DisplayClassification_MIN;
constexpr ClassifyUrlResponse_DisplayClassification ClassifyUrlResponse::DisplayClassification_MAX;
constexpr int ClassifyUrlResponse::DisplayClassification_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ListFamilyMembersRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ListFamilyMembersRequest>()._has_bits_);
  static void set_has_family_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ListFamilyMembersRequest::ListFamilyMembersRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kids_chrome_management.ListFamilyMembersRequest)
}
ListFamilyMembersRequest::ListFamilyMembersRequest(const ListFamilyMembersRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  family_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    family_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_family_id()) {
    family_id_.Set(from._internal_family_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kids_chrome_management.ListFamilyMembersRequest)
}

inline void ListFamilyMembersRequest::SharedCtor() {
family_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  family_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListFamilyMembersRequest::~ListFamilyMembersRequest() {
  // @@protoc_insertion_point(destructor:kids_chrome_management.ListFamilyMembersRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListFamilyMembersRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  family_id_.Destroy();
}

void ListFamilyMembersRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListFamilyMembersRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kids_chrome_management.ListFamilyMembersRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    family_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ListFamilyMembersRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string family_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_family_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListFamilyMembersRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kids_chrome_management.ListFamilyMembersRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string family_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_family_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kids_chrome_management.ListFamilyMembersRequest)
  return target;
}

size_t ListFamilyMembersRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kids_chrome_management.ListFamilyMembersRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string family_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_family_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFamilyMembersRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListFamilyMembersRequest*>(
      &from));
}

void ListFamilyMembersRequest::MergeFrom(const ListFamilyMembersRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kids_chrome_management.ListFamilyMembersRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_family_id()) {
    _internal_set_family_id(from._internal_family_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListFamilyMembersRequest::CopyFrom(const ListFamilyMembersRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kids_chrome_management.ListFamilyMembersRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFamilyMembersRequest::IsInitialized() const {
  return true;
}

void ListFamilyMembersRequest::InternalSwap(ListFamilyMembersRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &family_id_, lhs_arena,
      &other->family_id_, rhs_arena
  );
}

std::string ListFamilyMembersRequest::GetTypeName() const {
  return "kids_chrome_management.ListFamilyMembersRequest";
}


// ===================================================================

class ListFamilyMembersResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ListFamilyMembersResponse>()._has_bits_);
  static void set_has_self_obfuscated_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

void ListFamilyMembersResponse::clear_members() {
  members_.Clear();
}
ListFamilyMembersResponse::ListFamilyMembersResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  members_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kids_chrome_management.ListFamilyMembersResponse)
}
ListFamilyMembersResponse::ListFamilyMembersResponse(const ListFamilyMembersResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  self_obfuscated_gaia_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    self_obfuscated_gaia_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_self_obfuscated_gaia_id()) {
    self_obfuscated_gaia_id_.Set(from._internal_self_obfuscated_gaia_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kids_chrome_management.ListFamilyMembersResponse)
}

inline void ListFamilyMembersResponse::SharedCtor() {
self_obfuscated_gaia_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  self_obfuscated_gaia_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListFamilyMembersResponse::~ListFamilyMembersResponse() {
  // @@protoc_insertion_point(destructor:kids_chrome_management.ListFamilyMembersResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListFamilyMembersResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  self_obfuscated_gaia_id_.Destroy();
}

void ListFamilyMembersResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListFamilyMembersResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kids_chrome_management.ListFamilyMembersResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    self_obfuscated_gaia_id_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ListFamilyMembersResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string self_obfuscated_gaia_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_self_obfuscated_gaia_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .kids_chrome_management.FamilyMember members = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_members(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListFamilyMembersResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kids_chrome_management.ListFamilyMembersResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string self_obfuscated_gaia_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_self_obfuscated_gaia_id(), target);
  }

  // repeated .kids_chrome_management.FamilyMember members = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_members_size()); i < n; i++) {
    const auto& repfield = this->_internal_members(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kids_chrome_management.ListFamilyMembersResponse)
  return target;
}

size_t ListFamilyMembersResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kids_chrome_management.ListFamilyMembersResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .kids_chrome_management.FamilyMember members = 2;
  total_size += 1UL * this->_internal_members_size();
  for (const auto& msg : this->members_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string self_obfuscated_gaia_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_self_obfuscated_gaia_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListFamilyMembersResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListFamilyMembersResponse*>(
      &from));
}

void ListFamilyMembersResponse::MergeFrom(const ListFamilyMembersResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kids_chrome_management.ListFamilyMembersResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from._internal_has_self_obfuscated_gaia_id()) {
    _internal_set_self_obfuscated_gaia_id(from._internal_self_obfuscated_gaia_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListFamilyMembersResponse::CopyFrom(const ListFamilyMembersResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kids_chrome_management.ListFamilyMembersResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListFamilyMembersResponse::IsInitialized() const {
  return true;
}

void ListFamilyMembersResponse::InternalSwap(ListFamilyMembersResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  members_.InternalSwap(&other->members_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &self_obfuscated_gaia_id_, lhs_arena,
      &other->self_obfuscated_gaia_id_, rhs_arena
  );
}

std::string ListFamilyMembersResponse::GetTypeName() const {
  return "kids_chrome_management.ListFamilyMembersResponse";
}


// ===================================================================

class RequestRestrictedUrlAccessRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestRestrictedUrlAccessRequest>()._has_bits_);
  static void set_has_person_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RequestRestrictedUrlAccessRequest::RequestRestrictedUrlAccessRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kids_chrome_management.RequestRestrictedUrlAccessRequest)
}
RequestRestrictedUrlAccessRequest::RequestRestrictedUrlAccessRequest(const RequestRestrictedUrlAccessRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  person_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    person_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_person_id()) {
    person_id_.Set(from._internal_person_id(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kids_chrome_management.RequestRestrictedUrlAccessRequest)
}

inline void RequestRestrictedUrlAccessRequest::SharedCtor() {
person_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  person_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RequestRestrictedUrlAccessRequest::~RequestRestrictedUrlAccessRequest() {
  // @@protoc_insertion_point(destructor:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestRestrictedUrlAccessRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  person_id_.Destroy();
  url_.Destroy();
}

void RequestRestrictedUrlAccessRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestRestrictedUrlAccessRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      person_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RequestRestrictedUrlAccessRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string person_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_person_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestRestrictedUrlAccessRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string person_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_person_id(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  return target;
}

size_t RequestRestrictedUrlAccessRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string person_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_person_id());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRestrictedUrlAccessRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RequestRestrictedUrlAccessRequest*>(
      &from));
}

void RequestRestrictedUrlAccessRequest::MergeFrom(const RequestRestrictedUrlAccessRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_person_id(from._internal_person_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RequestRestrictedUrlAccessRequest::CopyFrom(const RequestRestrictedUrlAccessRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kids_chrome_management.RequestRestrictedUrlAccessRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRestrictedUrlAccessRequest::IsInitialized() const {
  return true;
}

void RequestRestrictedUrlAccessRequest::InternalSwap(RequestRestrictedUrlAccessRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &person_id_, lhs_arena,
      &other->person_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

std::string RequestRestrictedUrlAccessRequest::GetTypeName() const {
  return "kids_chrome_management.RequestRestrictedUrlAccessRequest";
}


// ===================================================================

class RequestRestrictedUrlAccessResponse::_Internal {
 public:
};

RequestRestrictedUrlAccessResponse::RequestRestrictedUrlAccessResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kids_chrome_management.RequestRestrictedUrlAccessResponse)
}
RequestRestrictedUrlAccessResponse::RequestRestrictedUrlAccessResponse(const RequestRestrictedUrlAccessResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:kids_chrome_management.RequestRestrictedUrlAccessResponse)
}

inline void RequestRestrictedUrlAccessResponse::SharedCtor() {
}

RequestRestrictedUrlAccessResponse::~RequestRestrictedUrlAccessResponse() {
  // @@protoc_insertion_point(destructor:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestRestrictedUrlAccessResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestRestrictedUrlAccessResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestRestrictedUrlAccessResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* RequestRestrictedUrlAccessResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestRestrictedUrlAccessResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  return target;
}

size_t RequestRestrictedUrlAccessResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRestrictedUrlAccessResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RequestRestrictedUrlAccessResponse*>(
      &from));
}

void RequestRestrictedUrlAccessResponse::MergeFrom(const RequestRestrictedUrlAccessResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RequestRestrictedUrlAccessResponse::CopyFrom(const RequestRestrictedUrlAccessResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kids_chrome_management.RequestRestrictedUrlAccessResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRestrictedUrlAccessResponse::IsInitialized() const {
  return true;
}

void RequestRestrictedUrlAccessResponse::InternalSwap(RequestRestrictedUrlAccessResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string RequestRestrictedUrlAccessResponse::GetTypeName() const {
  return "kids_chrome_management.RequestRestrictedUrlAccessResponse";
}


// ===================================================================

class ClassifyUrlRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassifyUrlRequest>()._has_bits_);
  static void set_has_person_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_region_code(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ClassifyUrlRequest::ClassifyUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kids_chrome_management.ClassifyUrlRequest)
}
ClassifyUrlRequest::ClassifyUrlRequest(const ClassifyUrlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  person_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    person_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_person_id()) {
    person_id_.Set(from._internal_person_id(), 
      GetArenaForAllocation());
  }
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  region_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    region_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_region_code()) {
    region_code_.Set(from._internal_region_code(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:kids_chrome_management.ClassifyUrlRequest)
}

inline void ClassifyUrlRequest::SharedCtor() {
person_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  person_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
region_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  region_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClassifyUrlRequest::~ClassifyUrlRequest() {
  // @@protoc_insertion_point(destructor:kids_chrome_management.ClassifyUrlRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassifyUrlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  person_id_.Destroy();
  url_.Destroy();
  region_code_.Destroy();
}

void ClassifyUrlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClassifyUrlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:kids_chrome_management.ClassifyUrlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      person_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      region_code_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClassifyUrlRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string person_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_person_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string region_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_region_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassifyUrlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kids_chrome_management.ClassifyUrlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string person_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_person_id(), target);
  }

  // optional string url = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // optional string region_code = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_region_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kids_chrome_management.ClassifyUrlRequest)
  return target;
}

size_t ClassifyUrlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kids_chrome_management.ClassifyUrlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string person_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_person_id());
    }

    // optional string url = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
    }

    // optional string region_code = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_region_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifyUrlRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClassifyUrlRequest*>(
      &from));
}

void ClassifyUrlRequest::MergeFrom(const ClassifyUrlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kids_chrome_management.ClassifyUrlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_person_id(from._internal_person_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_region_code(from._internal_region_code());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClassifyUrlRequest::CopyFrom(const ClassifyUrlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kids_chrome_management.ClassifyUrlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyUrlRequest::IsInitialized() const {
  return true;
}

void ClassifyUrlRequest::InternalSwap(ClassifyUrlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &person_id_, lhs_arena,
      &other->person_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &region_code_, lhs_arena,
      &other->region_code_, rhs_arena
  );
}

std::string ClassifyUrlRequest::GetTypeName() const {
  return "kids_chrome_management.ClassifyUrlRequest";
}


// ===================================================================

class ClassifyUrlResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClassifyUrlResponse>()._has_bits_);
  static void set_has_display_classification(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClassifyUrlResponse::ClassifyUrlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:kids_chrome_management.ClassifyUrlResponse)
}
ClassifyUrlResponse::ClassifyUrlResponse(const ClassifyUrlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  display_classification_ = from.display_classification_;
  // @@protoc_insertion_point(copy_constructor:kids_chrome_management.ClassifyUrlResponse)
}

inline void ClassifyUrlResponse::SharedCtor() {
display_classification_ = 0;
}

ClassifyUrlResponse::~ClassifyUrlResponse() {
  // @@protoc_insertion_point(destructor:kids_chrome_management.ClassifyUrlResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClassifyUrlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ClassifyUrlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClassifyUrlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:kids_chrome_management.ClassifyUrlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_classification_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClassifyUrlResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .kids_chrome_management.ClassifyUrlResponse.DisplayClassification display_classification = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::kids_chrome_management::ClassifyUrlResponse_DisplayClassification_IsValid(val))) {
            _internal_set_display_classification(static_cast<::kids_chrome_management::ClassifyUrlResponse_DisplayClassification>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClassifyUrlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:kids_chrome_management.ClassifyUrlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .kids_chrome_management.ClassifyUrlResponse.DisplayClassification display_classification = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_display_classification(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:kids_chrome_management.ClassifyUrlResponse)
  return target;
}

size_t ClassifyUrlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:kids_chrome_management.ClassifyUrlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .kids_chrome_management.ClassifyUrlResponse.DisplayClassification display_classification = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_display_classification());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClassifyUrlResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClassifyUrlResponse*>(
      &from));
}

void ClassifyUrlResponse::MergeFrom(const ClassifyUrlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:kids_chrome_management.ClassifyUrlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_display_classification()) {
    _internal_set_display_classification(from._internal_display_classification());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClassifyUrlResponse::CopyFrom(const ClassifyUrlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:kids_chrome_management.ClassifyUrlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClassifyUrlResponse::IsInitialized() const {
  return true;
}

void ClassifyUrlResponse::InternalSwap(ClassifyUrlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(display_classification_, other->display_classification_);
}

std::string ClassifyUrlResponse::GetTypeName() const {
  return "kids_chrome_management.ClassifyUrlResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace kids_chrome_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::kids_chrome_management::ListFamilyMembersRequest*
Arena::CreateMaybeMessage< ::kids_chrome_management::ListFamilyMembersRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kids_chrome_management::ListFamilyMembersRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kids_chrome_management::ListFamilyMembersResponse*
Arena::CreateMaybeMessage< ::kids_chrome_management::ListFamilyMembersResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kids_chrome_management::ListFamilyMembersResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kids_chrome_management::RequestRestrictedUrlAccessRequest*
Arena::CreateMaybeMessage< ::kids_chrome_management::RequestRestrictedUrlAccessRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kids_chrome_management::RequestRestrictedUrlAccessRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kids_chrome_management::RequestRestrictedUrlAccessResponse*
Arena::CreateMaybeMessage< ::kids_chrome_management::RequestRestrictedUrlAccessResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kids_chrome_management::RequestRestrictedUrlAccessResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::kids_chrome_management::ClassifyUrlRequest*
Arena::CreateMaybeMessage< ::kids_chrome_management::ClassifyUrlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kids_chrome_management::ClassifyUrlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::kids_chrome_management::ClassifyUrlResponse*
Arena::CreateMaybeMessage< ::kids_chrome_management::ClassifyUrlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::kids_chrome_management::ClassifyUrlResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
