// chrome/browser/media/history/media_history_store.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/media/history/media_history_store.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/media/history/media_history_store.mojom-params-data.h"
namespace media_history {
namespace mojom {

namespace internal {


// static
bool MediaHistoryStats_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStats_Data* object =
      static_cast<const MediaHistoryStats_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->table_row_counts, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams table_row_counts_validate_params(
      new mojo::internal::ContainerValidateParams(0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr)), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->table_row_counts, validation_context,
                                         &table_row_counts_validate_params)) {
    return false;
  }

  return true;
}

MediaHistoryStats_Data::MediaHistoryStats_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryOriginRow_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryOriginRow_Data* object =
      static_cast<const MediaHistoryOriginRow_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->origin, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->origin, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->cached_audio_video_watchtime, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->cached_audio_video_watchtime, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->actual_audio_video_watchtime, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->actual_audio_video_watchtime, validation_context))
    return false;

  return true;
}

MediaHistoryOriginRow_Data::MediaHistoryOriginRow_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryPlaybackRow_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryPlaybackRow_Data* object =
      static_cast<const MediaHistoryPlaybackRow_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->watchtime, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->watchtime, validation_context))
    return false;

  return true;
}

MediaHistoryPlaybackRow_Data::MediaHistoryPlaybackRow_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryPlaybackSessionRow_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 64, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryPlaybackSessionRow_Data* object =
      static_cast<const MediaHistoryPlaybackSessionRow_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->duration, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->duration, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->position, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->position, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->metadata, 5, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->metadata, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->artwork, 6, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams artwork_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->artwork, validation_context,
                                         &artwork_validate_params)) {
    return false;
  }

  return true;
}

MediaHistoryPlaybackSessionRow_Data::MediaHistoryPlaybackSessionRow_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryStats_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryStats_Params_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryStats_Params_Data*>(data);

  return true;
}

MediaHistoryStore_GetMediaHistoryStats_Params_Data::MediaHistoryStore_GetMediaHistoryStats_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->stats, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->stats, validation_context))
    return false;

  return true;
}

MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data::MediaHistoryStore_GetMediaHistoryStats_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data*>(data);

  return true;
}

MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data::MediaHistoryStore_GetMediaHistoryOriginRows_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->rows, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams rows_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->rows, validation_context,
                                         &rows_validate_params)) {
    return false;
  }

  return true;
}

MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data::MediaHistoryStore_GetMediaHistoryOriginRows_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data*>(data);

  return true;
}

MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data::MediaHistoryStore_GetMediaHistoryPlaybackRows_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->rows, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams rows_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->rows, validation_context,
                                         &rows_validate_params)) {
    return false;
  }

  return true;
}

MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data::MediaHistoryStore_GetMediaHistoryPlaybackRows_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data*>(data);

  return true;
}

MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data* object =
      static_cast<const MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->rows, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams rows_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->rows, validation_context,
                                         &rows_validate_params)) {
    return false;
  }

  return true;
}

MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data::MediaHistoryStore_GetMediaHistoryPlaybackSessionRows_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace media_history