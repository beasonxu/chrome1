// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery_resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_discovery_5fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_discovery_5fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_discovery_5fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_discovery_5fresources_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_media {
namespace proto {
class DeviceCapabilities;
struct DeviceCapabilitiesDefaultTypeInternal;
extern DeviceCapabilitiesDefaultTypeInternal _DeviceCapabilities_default_instance_;
class DiscoveryDevice;
struct DiscoveryDeviceDefaultTypeInternal;
extern DiscoveryDeviceDefaultTypeInternal _DiscoveryDevice_default_instance_;
class NetworkInfo;
struct NetworkInfoDefaultTypeInternal;
extern NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
}  // namespace proto
}  // namespace chrome_browser_media
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_media::proto::DeviceCapabilities* Arena::CreateMaybeMessage<::chrome_browser_media::proto::DeviceCapabilities>(Arena*);
template<> ::chrome_browser_media::proto::DiscoveryDevice* Arena::CreateMaybeMessage<::chrome_browser_media::proto::DiscoveryDevice>(Arena*);
template<> ::chrome_browser_media::proto::NetworkInfo* Arena::CreateMaybeMessage<::chrome_browser_media::proto::NetworkInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_media {
namespace proto {

// ===================================================================

class DeviceCapabilities final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_media.proto.DeviceCapabilities) */ {
 public:
  inline DeviceCapabilities() : DeviceCapabilities(nullptr) {}
  ~DeviceCapabilities() override;
  explicit PROTOBUF_CONSTEXPR DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceCapabilities(const DeviceCapabilities& from);
  DeviceCapabilities(DeviceCapabilities&& from) noexcept
    : DeviceCapabilities() {
    *this = ::std::move(from);
  }

  inline DeviceCapabilities& operator=(const DeviceCapabilities& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceCapabilities& operator=(DeviceCapabilities&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DeviceCapabilities& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceCapabilities* internal_default_instance() {
    return reinterpret_cast<const DeviceCapabilities*>(
               &_DeviceCapabilities_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceCapabilities& a, DeviceCapabilities& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DeviceCapabilities* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceCapabilities* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceCapabilities* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceCapabilities>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeviceCapabilities& from);
  void MergeFrom(const DeviceCapabilities& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceCapabilities* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_media.proto.DeviceCapabilities";
  }
  protected:
  explicit DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoOutFieldNumber = 1,
    kVideoInFieldNumber = 2,
    kAudioOutFieldNumber = 3,
    kAudioInFieldNumber = 4,
    kDevModeFieldNumber = 5,
  };
  // bool video_out = 1;
  void clear_video_out();
  bool video_out() const;
  void set_video_out(bool value);
  private:
  bool _internal_video_out() const;
  void _internal_set_video_out(bool value);
  public:

  // bool video_in = 2;
  void clear_video_in();
  bool video_in() const;
  void set_video_in(bool value);
  private:
  bool _internal_video_in() const;
  void _internal_set_video_in(bool value);
  public:

  // bool audio_out = 3;
  void clear_audio_out();
  bool audio_out() const;
  void set_audio_out(bool value);
  private:
  bool _internal_audio_out() const;
  void _internal_set_audio_out(bool value);
  public:

  // bool audio_in = 4;
  void clear_audio_in();
  bool audio_in() const;
  void set_audio_in(bool value);
  private:
  bool _internal_audio_in() const;
  void _internal_set_audio_in(bool value);
  public:

  // bool dev_mode = 5;
  void clear_dev_mode();
  bool dev_mode() const;
  void set_dev_mode(bool value);
  private:
  bool _internal_dev_mode() const;
  void _internal_set_dev_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_media.proto.DeviceCapabilities)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool video_out_;
  bool video_in_;
  bool audio_out_;
  bool audio_in_;
  bool dev_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_discovery_5fresources_2eproto;
};
// -------------------------------------------------------------------

class NetworkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_media.proto.NetworkInfo) */ {
 public:
  inline NetworkInfo() : NetworkInfo(nullptr) {}
  ~NetworkInfo() override;
  explicit PROTOBUF_CONSTEXPR NetworkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NetworkInfo(const NetworkInfo& from);
  NetworkInfo(NetworkInfo&& from) noexcept
    : NetworkInfo() {
    *this = ::std::move(from);
  }

  inline NetworkInfo& operator=(const NetworkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NetworkInfo& operator=(NetworkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const NetworkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const NetworkInfo* internal_default_instance() {
    return reinterpret_cast<const NetworkInfo*>(
               &_NetworkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NetworkInfo& a, NetworkInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NetworkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NetworkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NetworkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NetworkInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NetworkInfo& from);
  void MergeFrom(const NetworkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_media.proto.NetworkInfo";
  }
  protected:
  explicit NetworkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostNameFieldNumber = 1,
    kPortFieldNumber = 2,
    kIpV4AddressFieldNumber = 3,
    kIpV6AddressFieldNumber = 4,
  };
  // string host_name = 1;
  void clear_host_name();
  const std::string& host_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host_name();
  PROTOBUF_NODISCARD std::string* release_host_name();
  void set_allocated_host_name(std::string* host_name);
  private:
  const std::string& _internal_host_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host_name(const std::string& value);
  std::string* _internal_mutable_host_name();
  public:

  // string port = 2;
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_NODISCARD std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // string ip_v4_address = 3;
  void clear_ip_v4_address();
  const std::string& ip_v4_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_v4_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_v4_address();
  PROTOBUF_NODISCARD std::string* release_ip_v4_address();
  void set_allocated_ip_v4_address(std::string* ip_v4_address);
  private:
  const std::string& _internal_ip_v4_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_v4_address(const std::string& value);
  std::string* _internal_mutable_ip_v4_address();
  public:

  // string ip_v6_address = 4;
  void clear_ip_v6_address();
  const std::string& ip_v6_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_v6_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_v6_address();
  PROTOBUF_NODISCARD std::string* release_ip_v6_address();
  void set_allocated_ip_v6_address(std::string* ip_v6_address);
  private:
  const std::string& _internal_ip_v6_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_v6_address(const std::string& value);
  std::string* _internal_mutable_ip_v6_address();
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_media.proto.NetworkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_v4_address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_v6_address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_discovery_5fresources_2eproto;
};
// -------------------------------------------------------------------

class DiscoveryDevice final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_media.proto.DiscoveryDevice) */ {
 public:
  inline DiscoveryDevice() : DiscoveryDevice(nullptr) {}
  ~DiscoveryDevice() override;
  explicit PROTOBUF_CONSTEXPR DiscoveryDevice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DiscoveryDevice(const DiscoveryDevice& from);
  DiscoveryDevice(DiscoveryDevice&& from) noexcept
    : DiscoveryDevice() {
    *this = ::std::move(from);
  }

  inline DiscoveryDevice& operator=(const DiscoveryDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline DiscoveryDevice& operator=(DiscoveryDevice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const DiscoveryDevice& default_instance() {
    return *internal_default_instance();
  }
  static inline const DiscoveryDevice* internal_default_instance() {
    return reinterpret_cast<const DiscoveryDevice*>(
               &_DiscoveryDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DiscoveryDevice& a, DiscoveryDevice& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DiscoveryDevice* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DiscoveryDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DiscoveryDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DiscoveryDevice>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DiscoveryDevice& from);
  void MergeFrom(const DiscoveryDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DiscoveryDevice* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_media.proto.DiscoveryDevice";
  }
  protected:
  explicit DiscoveryDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayNameFieldNumber = 1,
    kIdFieldNumber = 6,
    kDeviceCapabilitiesFieldNumber = 4,
    kNetworkInfoFieldNumber = 5,
  };
  // string display_name = 1;
  void clear_display_name();
  const std::string& display_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_display_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_display_name();
  PROTOBUF_NODISCARD std::string* release_display_name();
  void set_allocated_display_name(std::string* display_name);
  private:
  const std::string& _internal_display_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_display_name(const std::string& value);
  std::string* _internal_mutable_display_name();
  public:

  // string id = 6;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .chrome_browser_media.proto.DeviceCapabilities device_capabilities = 4;
  bool has_device_capabilities() const;
  private:
  bool _internal_has_device_capabilities() const;
  public:
  void clear_device_capabilities();
  const ::chrome_browser_media::proto::DeviceCapabilities& device_capabilities() const;
  PROTOBUF_NODISCARD ::chrome_browser_media::proto::DeviceCapabilities* release_device_capabilities();
  ::chrome_browser_media::proto::DeviceCapabilities* mutable_device_capabilities();
  void set_allocated_device_capabilities(::chrome_browser_media::proto::DeviceCapabilities* device_capabilities);
  private:
  const ::chrome_browser_media::proto::DeviceCapabilities& _internal_device_capabilities() const;
  ::chrome_browser_media::proto::DeviceCapabilities* _internal_mutable_device_capabilities();
  public:
  void unsafe_arena_set_allocated_device_capabilities(
      ::chrome_browser_media::proto::DeviceCapabilities* device_capabilities);
  ::chrome_browser_media::proto::DeviceCapabilities* unsafe_arena_release_device_capabilities();

  // .chrome_browser_media.proto.NetworkInfo network_info = 5;
  bool has_network_info() const;
  private:
  bool _internal_has_network_info() const;
  public:
  void clear_network_info();
  const ::chrome_browser_media::proto::NetworkInfo& network_info() const;
  PROTOBUF_NODISCARD ::chrome_browser_media::proto::NetworkInfo* release_network_info();
  ::chrome_browser_media::proto::NetworkInfo* mutable_network_info();
  void set_allocated_network_info(::chrome_browser_media::proto::NetworkInfo* network_info);
  private:
  const ::chrome_browser_media::proto::NetworkInfo& _internal_network_info() const;
  ::chrome_browser_media::proto::NetworkInfo* _internal_mutable_network_info();
  public:
  void unsafe_arena_set_allocated_network_info(
      ::chrome_browser_media::proto::NetworkInfo* network_info);
  ::chrome_browser_media::proto::NetworkInfo* unsafe_arena_release_network_info();

  // @@protoc_insertion_point(class_scope:chrome_browser_media.proto.DiscoveryDevice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr display_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::chrome_browser_media::proto::DeviceCapabilities* device_capabilities_;
  ::chrome_browser_media::proto::NetworkInfo* network_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_discovery_5fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeviceCapabilities

// bool video_out = 1;
inline void DeviceCapabilities::clear_video_out() {
  video_out_ = false;
}
inline bool DeviceCapabilities::_internal_video_out() const {
  return video_out_;
}
inline bool DeviceCapabilities::video_out() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DeviceCapabilities.video_out)
  return _internal_video_out();
}
inline void DeviceCapabilities::_internal_set_video_out(bool value) {
  
  video_out_ = value;
}
inline void DeviceCapabilities::set_video_out(bool value) {
  _internal_set_video_out(value);
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DeviceCapabilities.video_out)
}

// bool video_in = 2;
inline void DeviceCapabilities::clear_video_in() {
  video_in_ = false;
}
inline bool DeviceCapabilities::_internal_video_in() const {
  return video_in_;
}
inline bool DeviceCapabilities::video_in() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DeviceCapabilities.video_in)
  return _internal_video_in();
}
inline void DeviceCapabilities::_internal_set_video_in(bool value) {
  
  video_in_ = value;
}
inline void DeviceCapabilities::set_video_in(bool value) {
  _internal_set_video_in(value);
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DeviceCapabilities.video_in)
}

// bool audio_out = 3;
inline void DeviceCapabilities::clear_audio_out() {
  audio_out_ = false;
}
inline bool DeviceCapabilities::_internal_audio_out() const {
  return audio_out_;
}
inline bool DeviceCapabilities::audio_out() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DeviceCapabilities.audio_out)
  return _internal_audio_out();
}
inline void DeviceCapabilities::_internal_set_audio_out(bool value) {
  
  audio_out_ = value;
}
inline void DeviceCapabilities::set_audio_out(bool value) {
  _internal_set_audio_out(value);
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DeviceCapabilities.audio_out)
}

// bool audio_in = 4;
inline void DeviceCapabilities::clear_audio_in() {
  audio_in_ = false;
}
inline bool DeviceCapabilities::_internal_audio_in() const {
  return audio_in_;
}
inline bool DeviceCapabilities::audio_in() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DeviceCapabilities.audio_in)
  return _internal_audio_in();
}
inline void DeviceCapabilities::_internal_set_audio_in(bool value) {
  
  audio_in_ = value;
}
inline void DeviceCapabilities::set_audio_in(bool value) {
  _internal_set_audio_in(value);
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DeviceCapabilities.audio_in)
}

// bool dev_mode = 5;
inline void DeviceCapabilities::clear_dev_mode() {
  dev_mode_ = false;
}
inline bool DeviceCapabilities::_internal_dev_mode() const {
  return dev_mode_;
}
inline bool DeviceCapabilities::dev_mode() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DeviceCapabilities.dev_mode)
  return _internal_dev_mode();
}
inline void DeviceCapabilities::_internal_set_dev_mode(bool value) {
  
  dev_mode_ = value;
}
inline void DeviceCapabilities::set_dev_mode(bool value) {
  _internal_set_dev_mode(value);
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DeviceCapabilities.dev_mode)
}

// -------------------------------------------------------------------

// NetworkInfo

// string host_name = 1;
inline void NetworkInfo::clear_host_name() {
  host_name_.ClearToEmpty();
}
inline const std::string& NetworkInfo::host_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.NetworkInfo.host_name)
  return _internal_host_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkInfo::set_host_name(ArgT0&& arg0, ArgT... args) {
 
 host_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.NetworkInfo.host_name)
}
inline std::string* NetworkInfo::mutable_host_name() {
  std::string* _s = _internal_mutable_host_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.NetworkInfo.host_name)
  return _s;
}
inline const std::string& NetworkInfo::_internal_host_name() const {
  return host_name_.Get();
}
inline void NetworkInfo::_internal_set_host_name(const std::string& value) {
  
  host_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkInfo::_internal_mutable_host_name() {
  
  return host_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkInfo::release_host_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.NetworkInfo.host_name)
  return host_name_.Release();
}
inline void NetworkInfo::set_allocated_host_name(std::string* host_name) {
  if (host_name != nullptr) {
    
  } else {
    
  }
  host_name_.SetAllocated(host_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_name_.IsDefault()) {
    host_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.NetworkInfo.host_name)
}

// string port = 2;
inline void NetworkInfo::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& NetworkInfo::port() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.NetworkInfo.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkInfo::set_port(ArgT0&& arg0, ArgT... args) {
 
 port_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.NetworkInfo.port)
}
inline std::string* NetworkInfo::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.NetworkInfo.port)
  return _s;
}
inline const std::string& NetworkInfo::_internal_port() const {
  return port_.Get();
}
inline void NetworkInfo::_internal_set_port(const std::string& value) {
  
  port_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkInfo::_internal_mutable_port() {
  
  return port_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkInfo::release_port() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.NetworkInfo.port)
  return port_.Release();
}
inline void NetworkInfo::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(port, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (port_.IsDefault()) {
    port_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.NetworkInfo.port)
}

// string ip_v4_address = 3;
inline void NetworkInfo::clear_ip_v4_address() {
  ip_v4_address_.ClearToEmpty();
}
inline const std::string& NetworkInfo::ip_v4_address() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.NetworkInfo.ip_v4_address)
  return _internal_ip_v4_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkInfo::set_ip_v4_address(ArgT0&& arg0, ArgT... args) {
 
 ip_v4_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.NetworkInfo.ip_v4_address)
}
inline std::string* NetworkInfo::mutable_ip_v4_address() {
  std::string* _s = _internal_mutable_ip_v4_address();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.NetworkInfo.ip_v4_address)
  return _s;
}
inline const std::string& NetworkInfo::_internal_ip_v4_address() const {
  return ip_v4_address_.Get();
}
inline void NetworkInfo::_internal_set_ip_v4_address(const std::string& value) {
  
  ip_v4_address_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkInfo::_internal_mutable_ip_v4_address() {
  
  return ip_v4_address_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkInfo::release_ip_v4_address() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.NetworkInfo.ip_v4_address)
  return ip_v4_address_.Release();
}
inline void NetworkInfo::set_allocated_ip_v4_address(std::string* ip_v4_address) {
  if (ip_v4_address != nullptr) {
    
  } else {
    
  }
  ip_v4_address_.SetAllocated(ip_v4_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_v4_address_.IsDefault()) {
    ip_v4_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.NetworkInfo.ip_v4_address)
}

// string ip_v6_address = 4;
inline void NetworkInfo::clear_ip_v6_address() {
  ip_v6_address_.ClearToEmpty();
}
inline const std::string& NetworkInfo::ip_v6_address() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.NetworkInfo.ip_v6_address)
  return _internal_ip_v6_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NetworkInfo::set_ip_v6_address(ArgT0&& arg0, ArgT... args) {
 
 ip_v6_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.NetworkInfo.ip_v6_address)
}
inline std::string* NetworkInfo::mutable_ip_v6_address() {
  std::string* _s = _internal_mutable_ip_v6_address();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.NetworkInfo.ip_v6_address)
  return _s;
}
inline const std::string& NetworkInfo::_internal_ip_v6_address() const {
  return ip_v6_address_.Get();
}
inline void NetworkInfo::_internal_set_ip_v6_address(const std::string& value) {
  
  ip_v6_address_.Set(value, GetArenaForAllocation());
}
inline std::string* NetworkInfo::_internal_mutable_ip_v6_address() {
  
  return ip_v6_address_.Mutable(GetArenaForAllocation());
}
inline std::string* NetworkInfo::release_ip_v6_address() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.NetworkInfo.ip_v6_address)
  return ip_v6_address_.Release();
}
inline void NetworkInfo::set_allocated_ip_v6_address(std::string* ip_v6_address) {
  if (ip_v6_address != nullptr) {
    
  } else {
    
  }
  ip_v6_address_.SetAllocated(ip_v6_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_v6_address_.IsDefault()) {
    ip_v6_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.NetworkInfo.ip_v6_address)
}

// -------------------------------------------------------------------

// DiscoveryDevice

// string display_name = 1;
inline void DiscoveryDevice::clear_display_name() {
  display_name_.ClearToEmpty();
}
inline const std::string& DiscoveryDevice::display_name() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DiscoveryDevice.display_name)
  return _internal_display_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryDevice::set_display_name(ArgT0&& arg0, ArgT... args) {
 
 display_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DiscoveryDevice.display_name)
}
inline std::string* DiscoveryDevice::mutable_display_name() {
  std::string* _s = _internal_mutable_display_name();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.DiscoveryDevice.display_name)
  return _s;
}
inline const std::string& DiscoveryDevice::_internal_display_name() const {
  return display_name_.Get();
}
inline void DiscoveryDevice::_internal_set_display_name(const std::string& value) {
  
  display_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryDevice::_internal_mutable_display_name() {
  
  return display_name_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryDevice::release_display_name() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.DiscoveryDevice.display_name)
  return display_name_.Release();
}
inline void DiscoveryDevice::set_allocated_display_name(std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocated(display_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (display_name_.IsDefault()) {
    display_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.DiscoveryDevice.display_name)
}

// .chrome_browser_media.proto.DeviceCapabilities device_capabilities = 4;
inline bool DiscoveryDevice::_internal_has_device_capabilities() const {
  return this != internal_default_instance() && device_capabilities_ != nullptr;
}
inline bool DiscoveryDevice::has_device_capabilities() const {
  return _internal_has_device_capabilities();
}
inline void DiscoveryDevice::clear_device_capabilities() {
  if (GetArenaForAllocation() == nullptr && device_capabilities_ != nullptr) {
    delete device_capabilities_;
  }
  device_capabilities_ = nullptr;
}
inline const ::chrome_browser_media::proto::DeviceCapabilities& DiscoveryDevice::_internal_device_capabilities() const {
  const ::chrome_browser_media::proto::DeviceCapabilities* p = device_capabilities_;
  return p != nullptr ? *p : reinterpret_cast<const ::chrome_browser_media::proto::DeviceCapabilities&>(
      ::chrome_browser_media::proto::_DeviceCapabilities_default_instance_);
}
inline const ::chrome_browser_media::proto::DeviceCapabilities& DiscoveryDevice::device_capabilities() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DiscoveryDevice.device_capabilities)
  return _internal_device_capabilities();
}
inline void DiscoveryDevice::unsafe_arena_set_allocated_device_capabilities(
    ::chrome_browser_media::proto::DeviceCapabilities* device_capabilities) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_capabilities_);
  }
  device_capabilities_ = device_capabilities;
  if (device_capabilities) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chrome_browser_media.proto.DiscoveryDevice.device_capabilities)
}
inline ::chrome_browser_media::proto::DeviceCapabilities* DiscoveryDevice::release_device_capabilities() {
  
  ::chrome_browser_media::proto::DeviceCapabilities* temp = device_capabilities_;
  device_capabilities_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chrome_browser_media::proto::DeviceCapabilities* DiscoveryDevice::unsafe_arena_release_device_capabilities() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.DiscoveryDevice.device_capabilities)
  
  ::chrome_browser_media::proto::DeviceCapabilities* temp = device_capabilities_;
  device_capabilities_ = nullptr;
  return temp;
}
inline ::chrome_browser_media::proto::DeviceCapabilities* DiscoveryDevice::_internal_mutable_device_capabilities() {
  
  if (device_capabilities_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_media::proto::DeviceCapabilities>(GetArenaForAllocation());
    device_capabilities_ = p;
  }
  return device_capabilities_;
}
inline ::chrome_browser_media::proto::DeviceCapabilities* DiscoveryDevice::mutable_device_capabilities() {
  ::chrome_browser_media::proto::DeviceCapabilities* _msg = _internal_mutable_device_capabilities();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.DiscoveryDevice.device_capabilities)
  return _msg;
}
inline void DiscoveryDevice::set_allocated_device_capabilities(::chrome_browser_media::proto::DeviceCapabilities* device_capabilities) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete device_capabilities_;
  }
  if (device_capabilities) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(device_capabilities);
    if (message_arena != submessage_arena) {
      device_capabilities = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_capabilities, submessage_arena);
    }
    
  } else {
    
  }
  device_capabilities_ = device_capabilities;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.DiscoveryDevice.device_capabilities)
}

// .chrome_browser_media.proto.NetworkInfo network_info = 5;
inline bool DiscoveryDevice::_internal_has_network_info() const {
  return this != internal_default_instance() && network_info_ != nullptr;
}
inline bool DiscoveryDevice::has_network_info() const {
  return _internal_has_network_info();
}
inline void DiscoveryDevice::clear_network_info() {
  if (GetArenaForAllocation() == nullptr && network_info_ != nullptr) {
    delete network_info_;
  }
  network_info_ = nullptr;
}
inline const ::chrome_browser_media::proto::NetworkInfo& DiscoveryDevice::_internal_network_info() const {
  const ::chrome_browser_media::proto::NetworkInfo* p = network_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::chrome_browser_media::proto::NetworkInfo&>(
      ::chrome_browser_media::proto::_NetworkInfo_default_instance_);
}
inline const ::chrome_browser_media::proto::NetworkInfo& DiscoveryDevice::network_info() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DiscoveryDevice.network_info)
  return _internal_network_info();
}
inline void DiscoveryDevice::unsafe_arena_set_allocated_network_info(
    ::chrome_browser_media::proto::NetworkInfo* network_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(network_info_);
  }
  network_info_ = network_info;
  if (network_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:chrome_browser_media.proto.DiscoveryDevice.network_info)
}
inline ::chrome_browser_media::proto::NetworkInfo* DiscoveryDevice::release_network_info() {
  
  ::chrome_browser_media::proto::NetworkInfo* temp = network_info_;
  network_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::chrome_browser_media::proto::NetworkInfo* DiscoveryDevice::unsafe_arena_release_network_info() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.DiscoveryDevice.network_info)
  
  ::chrome_browser_media::proto::NetworkInfo* temp = network_info_;
  network_info_ = nullptr;
  return temp;
}
inline ::chrome_browser_media::proto::NetworkInfo* DiscoveryDevice::_internal_mutable_network_info() {
  
  if (network_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::chrome_browser_media::proto::NetworkInfo>(GetArenaForAllocation());
    network_info_ = p;
  }
  return network_info_;
}
inline ::chrome_browser_media::proto::NetworkInfo* DiscoveryDevice::mutable_network_info() {
  ::chrome_browser_media::proto::NetworkInfo* _msg = _internal_mutable_network_info();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.DiscoveryDevice.network_info)
  return _msg;
}
inline void DiscoveryDevice::set_allocated_network_info(::chrome_browser_media::proto::NetworkInfo* network_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete network_info_;
  }
  if (network_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(network_info);
    if (message_arena != submessage_arena) {
      network_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, network_info, submessage_arena);
    }
    
  } else {
    
  }
  network_info_ = network_info;
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.DiscoveryDevice.network_info)
}

// string id = 6;
inline void DiscoveryDevice::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DiscoveryDevice::id() const {
  // @@protoc_insertion_point(field_get:chrome_browser_media.proto.DiscoveryDevice.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DiscoveryDevice::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_media.proto.DiscoveryDevice.id)
}
inline std::string* DiscoveryDevice::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:chrome_browser_media.proto.DiscoveryDevice.id)
  return _s;
}
inline const std::string& DiscoveryDevice::_internal_id() const {
  return id_.Get();
}
inline void DiscoveryDevice::_internal_set_id(const std::string& value) {
  
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* DiscoveryDevice::_internal_mutable_id() {
  
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* DiscoveryDevice::release_id() {
  // @@protoc_insertion_point(field_release:chrome_browser_media.proto.DiscoveryDevice.id)
  return id_.Release();
}
inline void DiscoveryDevice::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_media.proto.DiscoveryDevice.id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace chrome_browser_media

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_discovery_5fresources_2eproto
