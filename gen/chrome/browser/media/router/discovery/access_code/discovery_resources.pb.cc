// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: discovery_resources.proto

#include "discovery_resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_media {
namespace proto {
PROTOBUF_CONSTEXPR DeviceCapabilities::DeviceCapabilities(
    ::_pbi::ConstantInitialized)
  : video_out_(false)
  , video_in_(false)
  , audio_out_(false)
  , audio_in_(false)
  , dev_mode_(false){}
struct DeviceCapabilitiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceCapabilitiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceCapabilitiesDefaultTypeInternal() {}
  union {
    DeviceCapabilities _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceCapabilitiesDefaultTypeInternal _DeviceCapabilities_default_instance_;
PROTOBUF_CONSTEXPR NetworkInfo::NetworkInfo(
    ::_pbi::ConstantInitialized)
  : host_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , port_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_v4_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_v6_address_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NetworkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NetworkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NetworkInfoDefaultTypeInternal() {}
  union {
    NetworkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NetworkInfoDefaultTypeInternal _NetworkInfo_default_instance_;
PROTOBUF_CONSTEXPR DiscoveryDevice::DiscoveryDevice(
    ::_pbi::ConstantInitialized)
  : display_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , device_capabilities_(nullptr)
  , network_info_(nullptr){}
struct DiscoveryDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryDeviceDefaultTypeInternal() {}
  union {
    DiscoveryDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryDeviceDefaultTypeInternal _DiscoveryDevice_default_instance_;
}  // namespace proto
}  // namespace chrome_browser_media
namespace chrome_browser_media {
namespace proto {

// ===================================================================

class DeviceCapabilities::_Internal {
 public:
};

DeviceCapabilities::DeviceCapabilities(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_media.proto.DeviceCapabilities)
}
DeviceCapabilities::DeviceCapabilities(const DeviceCapabilities& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&video_out_, &from.video_out_,
    static_cast<size_t>(reinterpret_cast<char*>(&dev_mode_) -
    reinterpret_cast<char*>(&video_out_)) + sizeof(dev_mode_));
  // @@protoc_insertion_point(copy_constructor:chrome_browser_media.proto.DeviceCapabilities)
}

inline void DeviceCapabilities::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&video_out_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dev_mode_) -
    reinterpret_cast<char*>(&video_out_)) + sizeof(dev_mode_));
}

DeviceCapabilities::~DeviceCapabilities() {
  // @@protoc_insertion_point(destructor:chrome_browser_media.proto.DeviceCapabilities)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceCapabilities::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeviceCapabilities::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceCapabilities::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_media.proto.DeviceCapabilities)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&video_out_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dev_mode_) -
      reinterpret_cast<char*>(&video_out_)) + sizeof(dev_mode_));
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceCapabilities::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool video_out = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          video_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool video_in = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          video_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool audio_out = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          audio_out_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool audio_in = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          audio_in_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool dev_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          dev_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceCapabilities::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_media.proto.DeviceCapabilities)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool video_out = 1;
  if (this->_internal_video_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_video_out(), target);
  }

  // bool video_in = 2;
  if (this->_internal_video_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_video_in(), target);
  }

  // bool audio_out = 3;
  if (this->_internal_audio_out() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_audio_out(), target);
  }

  // bool audio_in = 4;
  if (this->_internal_audio_in() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_audio_in(), target);
  }

  // bool dev_mode = 5;
  if (this->_internal_dev_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_dev_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_media.proto.DeviceCapabilities)
  return target;
}

size_t DeviceCapabilities::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_media.proto.DeviceCapabilities)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool video_out = 1;
  if (this->_internal_video_out() != 0) {
    total_size += 1 + 1;
  }

  // bool video_in = 2;
  if (this->_internal_video_in() != 0) {
    total_size += 1 + 1;
  }

  // bool audio_out = 3;
  if (this->_internal_audio_out() != 0) {
    total_size += 1 + 1;
  }

  // bool audio_in = 4;
  if (this->_internal_audio_in() != 0) {
    total_size += 1 + 1;
  }

  // bool dev_mode = 5;
  if (this->_internal_dev_mode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceCapabilities::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeviceCapabilities*>(
      &from));
}

void DeviceCapabilities::MergeFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_media.proto.DeviceCapabilities)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_video_out() != 0) {
    _internal_set_video_out(from._internal_video_out());
  }
  if (from._internal_video_in() != 0) {
    _internal_set_video_in(from._internal_video_in());
  }
  if (from._internal_audio_out() != 0) {
    _internal_set_audio_out(from._internal_audio_out());
  }
  if (from._internal_audio_in() != 0) {
    _internal_set_audio_in(from._internal_audio_in());
  }
  if (from._internal_dev_mode() != 0) {
    _internal_set_dev_mode(from._internal_dev_mode());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeviceCapabilities::CopyFrom(const DeviceCapabilities& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_media.proto.DeviceCapabilities)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceCapabilities::IsInitialized() const {
  return true;
}

void DeviceCapabilities::InternalSwap(DeviceCapabilities* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceCapabilities, dev_mode_)
      + sizeof(DeviceCapabilities::dev_mode_)
      - PROTOBUF_FIELD_OFFSET(DeviceCapabilities, video_out_)>(
          reinterpret_cast<char*>(&video_out_),
          reinterpret_cast<char*>(&other->video_out_));
}

std::string DeviceCapabilities::GetTypeName() const {
  return "chrome_browser_media.proto.DeviceCapabilities";
}


// ===================================================================

class NetworkInfo::_Internal {
 public:
};

NetworkInfo::NetworkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_media.proto.NetworkInfo)
}
NetworkInfo::NetworkInfo(const NetworkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    host_name_.Set(from._internal_host_name(), 
      GetArenaForAllocation());
  }
  port_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    port_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_port().empty()) {
    port_.Set(from._internal_port(), 
      GetArenaForAllocation());
  }
  ip_v4_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_v4_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_v4_address().empty()) {
    ip_v4_address_.Set(from._internal_ip_v4_address(), 
      GetArenaForAllocation());
  }
  ip_v6_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_v6_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_v6_address().empty()) {
    ip_v6_address_.Set(from._internal_ip_v6_address(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_media.proto.NetworkInfo)
}

inline void NetworkInfo::SharedCtor() {
host_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  host_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
port_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  port_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_v4_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_v4_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_v6_address_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_v6_address_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NetworkInfo::~NetworkInfo() {
  // @@protoc_insertion_point(destructor:chrome_browser_media.proto.NetworkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NetworkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  host_name_.Destroy();
  port_.Destroy();
  ip_v4_address_.Destroy();
  ip_v6_address_.Destroy();
}

void NetworkInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NetworkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_media.proto.NetworkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  host_name_.ClearToEmpty();
  port_.ClearToEmpty();
  ip_v4_address_.ClearToEmpty();
  ip_v6_address_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* NetworkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_port();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string ip_v4_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ip_v4_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string ip_v6_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ip_v6_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NetworkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_media.proto.NetworkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_media.proto.NetworkInfo.host_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_name(), target);
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_port().data(), static_cast<int>(this->_internal_port().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_media.proto.NetworkInfo.port");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_port(), target);
  }

  // string ip_v4_address = 3;
  if (!this->_internal_ip_v4_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_v4_address().data(), static_cast<int>(this->_internal_ip_v4_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_media.proto.NetworkInfo.ip_v4_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ip_v4_address(), target);
  }

  // string ip_v6_address = 4;
  if (!this->_internal_ip_v6_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_v6_address().data(), static_cast<int>(this->_internal_ip_v6_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_media.proto.NetworkInfo.ip_v6_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ip_v6_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_media.proto.NetworkInfo)
  return target;
}

size_t NetworkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_media.proto.NetworkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string host_name = 1;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  // string port = 2;
  if (!this->_internal_port().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_port());
  }

  // string ip_v4_address = 3;
  if (!this->_internal_ip_v4_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_v4_address());
  }

  // string ip_v6_address = 4;
  if (!this->_internal_ip_v6_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_v6_address());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NetworkInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NetworkInfo*>(
      &from));
}

void NetworkInfo::MergeFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_media.proto.NetworkInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_host_name().empty()) {
    _internal_set_host_name(from._internal_host_name());
  }
  if (!from._internal_port().empty()) {
    _internal_set_port(from._internal_port());
  }
  if (!from._internal_ip_v4_address().empty()) {
    _internal_set_ip_v4_address(from._internal_ip_v4_address());
  }
  if (!from._internal_ip_v6_address().empty()) {
    _internal_set_ip_v6_address(from._internal_ip_v6_address());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NetworkInfo::CopyFrom(const NetworkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_media.proto.NetworkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkInfo::IsInitialized() const {
  return true;
}

void NetworkInfo::InternalSwap(NetworkInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &host_name_, lhs_arena,
      &other->host_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &port_, lhs_arena,
      &other->port_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_v4_address_, lhs_arena,
      &other->ip_v4_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_v6_address_, lhs_arena,
      &other->ip_v6_address_, rhs_arena
  );
}

std::string NetworkInfo::GetTypeName() const {
  return "chrome_browser_media.proto.NetworkInfo";
}


// ===================================================================

class DiscoveryDevice::_Internal {
 public:
  static const ::chrome_browser_media::proto::DeviceCapabilities& device_capabilities(const DiscoveryDevice* msg);
  static const ::chrome_browser_media::proto::NetworkInfo& network_info(const DiscoveryDevice* msg);
};

const ::chrome_browser_media::proto::DeviceCapabilities&
DiscoveryDevice::_Internal::device_capabilities(const DiscoveryDevice* msg) {
  return *msg->device_capabilities_;
}
const ::chrome_browser_media::proto::NetworkInfo&
DiscoveryDevice::_Internal::network_info(const DiscoveryDevice* msg) {
  return *msg->network_info_;
}
DiscoveryDevice::DiscoveryDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_media.proto.DiscoveryDevice)
}
DiscoveryDevice::DiscoveryDevice(const DiscoveryDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    display_name_.Set(from._internal_display_name(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_device_capabilities()) {
    device_capabilities_ = new ::chrome_browser_media::proto::DeviceCapabilities(*from.device_capabilities_);
  } else {
    device_capabilities_ = nullptr;
  }
  if (from._internal_has_network_info()) {
    network_info_ = new ::chrome_browser_media::proto::NetworkInfo(*from.network_info_);
  } else {
    network_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_media.proto.DiscoveryDevice)
}

inline void DiscoveryDevice::SharedCtor() {
display_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&device_capabilities_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&network_info_) -
    reinterpret_cast<char*>(&device_capabilities_)) + sizeof(network_info_));
}

DiscoveryDevice::~DiscoveryDevice() {
  // @@protoc_insertion_point(destructor:chrome_browser_media.proto.DiscoveryDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.Destroy();
  id_.Destroy();
  if (this != internal_default_instance()) delete device_capabilities_;
  if (this != internal_default_instance()) delete network_info_;
}

void DiscoveryDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoveryDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_media.proto.DiscoveryDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_name_.ClearToEmpty();
  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && device_capabilities_ != nullptr) {
    delete device_capabilities_;
  }
  device_capabilities_ = nullptr;
  if (GetArenaForAllocation() == nullptr && network_info_ != nullptr) {
    delete network_info_;
  }
  network_info_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoveryDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string display_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_media.proto.DeviceCapabilities device_capabilities = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_capabilities(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_media.proto.NetworkInfo network_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_network_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_media.proto.DiscoveryDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_media.proto.DiscoveryDevice.display_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_display_name(), target);
  }

  // .chrome_browser_media.proto.DeviceCapabilities device_capabilities = 4;
  if (this->_internal_has_device_capabilities()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::device_capabilities(this),
        _Internal::device_capabilities(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_media.proto.NetworkInfo network_info = 5;
  if (this->_internal_has_network_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::network_info(this),
        _Internal::network_info(this).GetCachedSize(), target, stream);
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_media.proto.DiscoveryDevice.id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_media.proto.DiscoveryDevice)
  return target;
}

size_t DiscoveryDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_media.proto.DiscoveryDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 1;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string id = 6;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .chrome_browser_media.proto.DeviceCapabilities device_capabilities = 4;
  if (this->_internal_has_device_capabilities()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_capabilities_);
  }

  // .chrome_browser_media.proto.NetworkInfo network_info = 5;
  if (this->_internal_has_network_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *network_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveryDevice::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DiscoveryDevice*>(
      &from));
}

void DiscoveryDevice::MergeFrom(const DiscoveryDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_media.proto.DiscoveryDevice)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_display_name().empty()) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_device_capabilities()) {
    _internal_mutable_device_capabilities()->::chrome_browser_media::proto::DeviceCapabilities::MergeFrom(from._internal_device_capabilities());
  }
  if (from._internal_has_network_info()) {
    _internal_mutable_network_info()->::chrome_browser_media::proto::NetworkInfo::MergeFrom(from._internal_network_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiscoveryDevice::CopyFrom(const DiscoveryDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_media.proto.DiscoveryDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryDevice::IsInitialized() const {
  return true;
}

void DiscoveryDevice::InternalSwap(DiscoveryDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiscoveryDevice, network_info_)
      + sizeof(DiscoveryDevice::network_info_)
      - PROTOBUF_FIELD_OFFSET(DiscoveryDevice, device_capabilities_)>(
          reinterpret_cast<char*>(&device_capabilities_),
          reinterpret_cast<char*>(&other->device_capabilities_));
}

std::string DiscoveryDevice::GetTypeName() const {
  return "chrome_browser_media.proto.DiscoveryDevice";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace chrome_browser_media
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_media::proto::DeviceCapabilities*
Arena::CreateMaybeMessage< ::chrome_browser_media::proto::DeviceCapabilities >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_media::proto::DeviceCapabilities >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_media::proto::NetworkInfo*
Arena::CreateMaybeMessage< ::chrome_browser_media::proto::NetworkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_media::proto::NetworkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_media::proto::DiscoveryDevice*
Arena::CreateMaybeMessage< ::chrome_browser_media::proto::DiscoveryDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_media::proto::DiscoveryDevice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
