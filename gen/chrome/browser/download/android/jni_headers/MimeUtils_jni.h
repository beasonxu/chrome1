// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/MimeUtils

#ifndef org_chromium_chrome_browser_download_MimeUtils_JNI
#define org_chromium_chrome_browser_download_MimeUtils_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_MimeUtils[];
const char kClassPath_org_chromium_chrome_browser_download_MimeUtils[] =
    "org/chromium/chrome/browser/download/MimeUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_MimeUtils_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_MimeUtils_clazz_defined
#define org_chromium_chrome_browser_download_MimeUtils_clazz_defined
inline jclass org_chromium_chrome_browser_download_MimeUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_download_MimeUtils,
      &g_org_chromium_chrome_browser_download_MimeUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_MimeUtils_remapGenericMimeType(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_MimeUtils_remapGenericMimeType(JNIEnv* env,
    const base::android::JavaRef<jstring>& mimeType,
    const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jstring>& filename) {
  jclass clazz = org_chromium_chrome_browser_download_MimeUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_MimeUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "remapGenericMimeType",
          "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_chrome_browser_download_MimeUtils_remapGenericMimeType);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, mimeType.obj(), url.obj(), filename.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_MimeUtils_isOMADownloadDescription(nullptr);
static jboolean Java_MimeUtils_isOMADownloadDescription(JNIEnv* env, const
    base::android::JavaRef<jstring>& mimeType) {
  jclass clazz = org_chromium_chrome_browser_download_MimeUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_MimeUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isOMADownloadDescription",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_chrome_browser_download_MimeUtils_isOMADownloadDescription);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, mimeType.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_MimeUtils_canAutoOpenMimeType(nullptr);
static jboolean Java_MimeUtils_canAutoOpenMimeType(JNIEnv* env, const
    base::android::JavaRef<jstring>& mimeType) {
  jclass clazz = org_chromium_chrome_browser_download_MimeUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_MimeUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "canAutoOpenMimeType",
          "(Ljava/lang/String;)Z",
          &g_org_chromium_chrome_browser_download_MimeUtils_canAutoOpenMimeType);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, mimeType.obj());
  return ret;
}

#endif  // org_chromium_chrome_browser_download_MimeUtils_JNI
