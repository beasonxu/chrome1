// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing_message.proto

#include "sharing_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_sharing {
PROTOBUF_CONSTEXPR SharingMessage::SharingMessage(
    ::_pbi::ConstantInitialized)
  : sender_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_device_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct SharingMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharingMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharingMessageDefaultTypeInternal() {}
  union {
    SharingMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharingMessageDefaultTypeInternal _SharingMessage_default_instance_;
PROTOBUF_CONSTEXPR PingMessage::PingMessage(
    ::_pbi::ConstantInitialized){}
struct PingMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PingMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PingMessageDefaultTypeInternal() {}
  union {
    PingMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PingMessageDefaultTypeInternal _PingMessage_default_instance_;
PROTOBUF_CONSTEXPR AckMessage::AckMessage(
    ::_pbi::ConstantInitialized)
  : original_message_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , response_message_(nullptr){}
struct AckMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AckMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AckMessageDefaultTypeInternal() {}
  union {
    AckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AckMessageDefaultTypeInternal _AckMessage_default_instance_;
PROTOBUF_CONSTEXPR ResponseMessage::ResponseMessage(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct ResponseMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponseMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponseMessageDefaultTypeInternal() {}
  union {
    ResponseMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponseMessageDefaultTypeInternal _ResponseMessage_default_instance_;
PROTOBUF_CONSTEXPR FCMChannelConfiguration::FCMChannelConfiguration(
    ::_pbi::ConstantInitialized)
  : vapid_fcm_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vapid_p256dh_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , vapid_auth_secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_id_fcm_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_id_p256dh_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sender_id_auth_secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FCMChannelConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FCMChannelConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FCMChannelConfigurationDefaultTypeInternal() {}
  union {
    FCMChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FCMChannelConfigurationDefaultTypeInternal _FCMChannelConfiguration_default_instance_;
PROTOBUF_CONSTEXPR ServerChannelConfiguration::ServerChannelConfiguration(
    ::_pbi::ConstantInitialized)
  : configuration_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , p256dh_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , auth_secret_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ServerChannelConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerChannelConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerChannelConfigurationDefaultTypeInternal() {}
  union {
    ServerChannelConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerChannelConfigurationDefaultTypeInternal _ServerChannelConfiguration_default_instance_;
PROTOBUF_CONSTEXPR DiscoveryRequest::DiscoveryRequest(
    ::_pbi::ConstantInitialized)
  : service_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DiscoveryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryRequestDefaultTypeInternal() {}
  union {
    DiscoveryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryRequestDefaultTypeInternal _DiscoveryRequest_default_instance_;
PROTOBUF_CONSTEXPR DiscoveryResponse::DiscoveryResponse(
    ::_pbi::ConstantInitialized)
  : service_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , endpoint_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , endpoint_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DiscoveryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiscoveryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiscoveryResponseDefaultTypeInternal() {}
  union {
    DiscoveryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiscoveryResponseDefaultTypeInternal _DiscoveryResponse_default_instance_;
PROTOBUF_CONSTEXPR WebRtcSignalingMessage::WebRtcSignalingMessage(
    ::_pbi::ConstantInitialized)
  : web_rtc_signaling_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WebRtcSignalingMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebRtcSignalingMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebRtcSignalingMessageDefaultTypeInternal() {}
  union {
    WebRtcSignalingMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebRtcSignalingMessageDefaultTypeInternal _WebRtcSignalingMessage_default_instance_;
PROTOBUF_CONSTEXPR WebRtcMessage::WebRtcMessage(
    ::_pbi::ConstantInitialized)
  : message_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , message_(nullptr){}
struct WebRtcMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebRtcMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebRtcMessageDefaultTypeInternal() {}
  union {
    WebRtcMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebRtcMessageDefaultTypeInternal _WebRtcMessage_default_instance_;
}  // namespace chrome_browser_sharing
namespace chrome_browser_sharing {
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> MessageType_strings[12] = {};

static const char MessageType_names[] =
  "ACK_MESSAGE"
  "CLICK_TO_CALL_MESSAGE"
  "DISCOVERY_REQUEST"
  "OPTIMIZATION_GUIDE_PUSH_NOTIFICATION"
  "PEER_CONNECTION_ICE_CANDIDATES_MESSAGE"
  "PEER_CONNECTION_OFFER_MESSAGE"
  "PING_MESSAGE"
  "REMOTE_COPY_MESSAGE"
  "SHARED_CLIPBOARD_MESSAGE"
  "SMS_FETCH_REQUEST"
  "UNKNOWN_MESSAGE"
  "WEB_RTC_SIGNALING_FRAME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry MessageType_entries[] = {
  { {MessageType_names + 0, 11}, 2 },
  { {MessageType_names + 11, 21}, 3 },
  { {MessageType_names + 32, 17}, 9 },
  { {MessageType_names + 49, 36}, 11 },
  { {MessageType_names + 85, 38}, 8 },
  { {MessageType_names + 123, 29}, 7 },
  { {MessageType_names + 152, 12}, 1 },
  { {MessageType_names + 164, 19}, 6 },
  { {MessageType_names + 183, 24}, 4 },
  { {MessageType_names + 207, 17}, 5 },
  { {MessageType_names + 224, 15}, 0 },
  { {MessageType_names + 239, 23}, 10 },
};

static const int MessageType_entries_by_number[] = {
  10, // 0 -> UNKNOWN_MESSAGE
  6, // 1 -> PING_MESSAGE
  0, // 2 -> ACK_MESSAGE
  1, // 3 -> CLICK_TO_CALL_MESSAGE
  8, // 4 -> SHARED_CLIPBOARD_MESSAGE
  9, // 5 -> SMS_FETCH_REQUEST
  7, // 6 -> REMOTE_COPY_MESSAGE
  5, // 7 -> PEER_CONNECTION_OFFER_MESSAGE
  4, // 8 -> PEER_CONNECTION_ICE_CANDIDATES_MESSAGE
  2, // 9 -> DISCOVERY_REQUEST
  11, // 10 -> WEB_RTC_SIGNALING_FRAME
  3, // 11 -> OPTIMIZATION_GUIDE_PUSH_NOTIFICATION
};

const std::string& MessageType_Name(
    MessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          MessageType_entries,
          MessageType_entries_by_number,
          12, MessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      MessageType_entries,
      MessageType_entries_by_number,
      12, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     MessageType_strings[idx].get();
}
bool MessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      MessageType_entries, 12, name, &int_value);
  if (success) {
    *value = static_cast<MessageType>(int_value);
  }
  return success;
}

// ===================================================================

class SharingMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::PingMessage& ping_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::AckMessage& ack_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::ClickToCallMessage& click_to_call_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::SharedClipboardMessage& shared_clipboard_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::SmsFetchRequest& sms_fetch_request(const SharingMessage* msg);
  static const ::chrome_browser_sharing::RemoteCopyMessage& remote_copy_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::PeerConnectionOfferMessage& peer_connection_offer_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage& peer_connection_ice_candidates_message(const SharingMessage* msg);
  static const ::chrome_browser_sharing::DiscoveryRequest& discovery_request(const SharingMessage* msg);
  static const ::chrome_browser_sharing::WebRtcSignalingMessage& web_rtc_signaling_frame(const SharingMessage* msg);
  static const ::chrome_browser_sharing::OptimizationGuidePushNotification& optimization_guide_push_notification(const SharingMessage* msg);
  static const ::chrome_browser_sharing::FCMChannelConfiguration& fcm_channel_configuration(const SharingMessage* msg);
  static const ::chrome_browser_sharing::ServerChannelConfiguration& server_channel_configuration(const SharingMessage* msg);
};

const ::chrome_browser_sharing::PingMessage&
SharingMessage::_Internal::ping_message(const SharingMessage* msg) {
  return *msg->payload_.ping_message_;
}
const ::chrome_browser_sharing::AckMessage&
SharingMessage::_Internal::ack_message(const SharingMessage* msg) {
  return *msg->payload_.ack_message_;
}
const ::chrome_browser_sharing::ClickToCallMessage&
SharingMessage::_Internal::click_to_call_message(const SharingMessage* msg) {
  return *msg->payload_.click_to_call_message_;
}
const ::chrome_browser_sharing::SharedClipboardMessage&
SharingMessage::_Internal::shared_clipboard_message(const SharingMessage* msg) {
  return *msg->payload_.shared_clipboard_message_;
}
const ::chrome_browser_sharing::SmsFetchRequest&
SharingMessage::_Internal::sms_fetch_request(const SharingMessage* msg) {
  return *msg->payload_.sms_fetch_request_;
}
const ::chrome_browser_sharing::RemoteCopyMessage&
SharingMessage::_Internal::remote_copy_message(const SharingMessage* msg) {
  return *msg->payload_.remote_copy_message_;
}
const ::chrome_browser_sharing::PeerConnectionOfferMessage&
SharingMessage::_Internal::peer_connection_offer_message(const SharingMessage* msg) {
  return *msg->payload_.peer_connection_offer_message_;
}
const ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage&
SharingMessage::_Internal::peer_connection_ice_candidates_message(const SharingMessage* msg) {
  return *msg->payload_.peer_connection_ice_candidates_message_;
}
const ::chrome_browser_sharing::DiscoveryRequest&
SharingMessage::_Internal::discovery_request(const SharingMessage* msg) {
  return *msg->payload_.discovery_request_;
}
const ::chrome_browser_sharing::WebRtcSignalingMessage&
SharingMessage::_Internal::web_rtc_signaling_frame(const SharingMessage* msg) {
  return *msg->payload_.web_rtc_signaling_frame_;
}
const ::chrome_browser_sharing::OptimizationGuidePushNotification&
SharingMessage::_Internal::optimization_guide_push_notification(const SharingMessage* msg) {
  return *msg->payload_.optimization_guide_push_notification_;
}
const ::chrome_browser_sharing::FCMChannelConfiguration&
SharingMessage::_Internal::fcm_channel_configuration(const SharingMessage* msg) {
  return *msg->ack_channel_configuration_.fcm_channel_configuration_;
}
const ::chrome_browser_sharing::ServerChannelConfiguration&
SharingMessage::_Internal::server_channel_configuration(const SharingMessage* msg) {
  return *msg->ack_channel_configuration_.server_channel_configuration_;
}
void SharingMessage::set_allocated_ping_message(::chrome_browser_sharing::PingMessage* ping_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (ping_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ping_message);
    if (message_arena != submessage_arena) {
      ping_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping_message, submessage_arena);
    }
    set_has_ping_message();
    payload_.ping_message_ = ping_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.ping_message)
}
void SharingMessage::set_allocated_ack_message(::chrome_browser_sharing::AckMessage* ack_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (ack_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ack_message);
    if (message_arena != submessage_arena) {
      ack_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack_message, submessage_arena);
    }
    set_has_ack_message();
    payload_.ack_message_ = ack_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.ack_message)
}
void SharingMessage::set_allocated_click_to_call_message(::chrome_browser_sharing::ClickToCallMessage* click_to_call_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (click_to_call_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(click_to_call_message));
    if (message_arena != submessage_arena) {
      click_to_call_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, click_to_call_message, submessage_arena);
    }
    set_has_click_to_call_message();
    payload_.click_to_call_message_ = click_to_call_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.click_to_call_message)
}
void SharingMessage::clear_click_to_call_message() {
  if (_internal_has_click_to_call_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.click_to_call_message_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_shared_clipboard_message(::chrome_browser_sharing::SharedClipboardMessage* shared_clipboard_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (shared_clipboard_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shared_clipboard_message));
    if (message_arena != submessage_arena) {
      shared_clipboard_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shared_clipboard_message, submessage_arena);
    }
    set_has_shared_clipboard_message();
    payload_.shared_clipboard_message_ = shared_clipboard_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.shared_clipboard_message)
}
void SharingMessage::clear_shared_clipboard_message() {
  if (_internal_has_shared_clipboard_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.shared_clipboard_message_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_sms_fetch_request(::chrome_browser_sharing::SmsFetchRequest* sms_fetch_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (sms_fetch_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_fetch_request));
    if (message_arena != submessage_arena) {
      sms_fetch_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_fetch_request, submessage_arena);
    }
    set_has_sms_fetch_request();
    payload_.sms_fetch_request_ = sms_fetch_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.sms_fetch_request)
}
void SharingMessage::clear_sms_fetch_request() {
  if (_internal_has_sms_fetch_request()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.sms_fetch_request_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_remote_copy_message(::chrome_browser_sharing::RemoteCopyMessage* remote_copy_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (remote_copy_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_copy_message));
    if (message_arena != submessage_arena) {
      remote_copy_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_copy_message, submessage_arena);
    }
    set_has_remote_copy_message();
    payload_.remote_copy_message_ = remote_copy_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.remote_copy_message)
}
void SharingMessage::clear_remote_copy_message() {
  if (_internal_has_remote_copy_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.remote_copy_message_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_peer_connection_offer_message(::chrome_browser_sharing::PeerConnectionOfferMessage* peer_connection_offer_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (peer_connection_offer_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_connection_offer_message));
    if (message_arena != submessage_arena) {
      peer_connection_offer_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_offer_message, submessage_arena);
    }
    set_has_peer_connection_offer_message();
    payload_.peer_connection_offer_message_ = peer_connection_offer_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.peer_connection_offer_message)
}
void SharingMessage::clear_peer_connection_offer_message() {
  if (_internal_has_peer_connection_offer_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.peer_connection_offer_message_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_peer_connection_ice_candidates_message(::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* peer_connection_ice_candidates_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (peer_connection_ice_candidates_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_connection_ice_candidates_message));
    if (message_arena != submessage_arena) {
      peer_connection_ice_candidates_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_ice_candidates_message, submessage_arena);
    }
    set_has_peer_connection_ice_candidates_message();
    payload_.peer_connection_ice_candidates_message_ = peer_connection_ice_candidates_message;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.peer_connection_ice_candidates_message)
}
void SharingMessage::clear_peer_connection_ice_candidates_message() {
  if (_internal_has_peer_connection_ice_candidates_message()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.peer_connection_ice_candidates_message_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_discovery_request(::chrome_browser_sharing::DiscoveryRequest* discovery_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (discovery_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(discovery_request);
    if (message_arena != submessage_arena) {
      discovery_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_request, submessage_arena);
    }
    set_has_discovery_request();
    payload_.discovery_request_ = discovery_request;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.discovery_request)
}
void SharingMessage::set_allocated_web_rtc_signaling_frame(::chrome_browser_sharing::WebRtcSignalingMessage* web_rtc_signaling_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (web_rtc_signaling_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(web_rtc_signaling_frame);
    if (message_arena != submessage_arena) {
      web_rtc_signaling_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_rtc_signaling_frame, submessage_arena);
    }
    set_has_web_rtc_signaling_frame();
    payload_.web_rtc_signaling_frame_ = web_rtc_signaling_frame;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.web_rtc_signaling_frame)
}
void SharingMessage::set_allocated_optimization_guide_push_notification(::chrome_browser_sharing::OptimizationGuidePushNotification* optimization_guide_push_notification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (optimization_guide_push_notification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(optimization_guide_push_notification));
    if (message_arena != submessage_arena) {
      optimization_guide_push_notification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, optimization_guide_push_notification, submessage_arena);
    }
    set_has_optimization_guide_push_notification();
    payload_.optimization_guide_push_notification_ = optimization_guide_push_notification;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.optimization_guide_push_notification)
}
void SharingMessage::clear_optimization_guide_push_notification() {
  if (_internal_has_optimization_guide_push_notification()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.optimization_guide_push_notification_;
    }
    clear_has_payload();
  }
}
void SharingMessage::set_allocated_fcm_channel_configuration(::chrome_browser_sharing::FCMChannelConfiguration* fcm_channel_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ack_channel_configuration();
  if (fcm_channel_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(fcm_channel_configuration);
    if (message_arena != submessage_arena) {
      fcm_channel_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fcm_channel_configuration, submessage_arena);
    }
    set_has_fcm_channel_configuration();
    ack_channel_configuration_.fcm_channel_configuration_ = fcm_channel_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.fcm_channel_configuration)
}
void SharingMessage::set_allocated_server_channel_configuration(::chrome_browser_sharing::ServerChannelConfiguration* server_channel_configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ack_channel_configuration();
  if (server_channel_configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(server_channel_configuration);
    if (message_arena != submessage_arena) {
      server_channel_configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_channel_configuration, submessage_arena);
    }
    set_has_server_channel_configuration();
    ack_channel_configuration_.server_channel_configuration_ = server_channel_configuration;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.SharingMessage.server_channel_configuration)
}
SharingMessage::SharingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.SharingMessage)
}
SharingMessage::SharingMessage(const SharingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  sender_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_guid().empty()) {
    sender_guid_.Set(from._internal_sender_guid(), 
      GetArenaForAllocation());
  }
  sender_device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_device_name().empty()) {
    sender_device_name_.Set(from._internal_sender_device_name(), 
      GetArenaForAllocation());
  }
  message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_id().empty()) {
    message_id_.Set(from._internal_message_id(), 
      GetArenaForAllocation());
  }
  clear_has_payload();
  switch (from.payload_case()) {
    case kPingMessage: {
      _internal_mutable_ping_message()->::chrome_browser_sharing::PingMessage::MergeFrom(from._internal_ping_message());
      break;
    }
    case kAckMessage: {
      _internal_mutable_ack_message()->::chrome_browser_sharing::AckMessage::MergeFrom(from._internal_ack_message());
      break;
    }
    case kClickToCallMessage: {
      _internal_mutable_click_to_call_message()->::chrome_browser_sharing::ClickToCallMessage::MergeFrom(from._internal_click_to_call_message());
      break;
    }
    case kSharedClipboardMessage: {
      _internal_mutable_shared_clipboard_message()->::chrome_browser_sharing::SharedClipboardMessage::MergeFrom(from._internal_shared_clipboard_message());
      break;
    }
    case kSmsFetchRequest: {
      _internal_mutable_sms_fetch_request()->::chrome_browser_sharing::SmsFetchRequest::MergeFrom(from._internal_sms_fetch_request());
      break;
    }
    case kRemoteCopyMessage: {
      _internal_mutable_remote_copy_message()->::chrome_browser_sharing::RemoteCopyMessage::MergeFrom(from._internal_remote_copy_message());
      break;
    }
    case kPeerConnectionOfferMessage: {
      _internal_mutable_peer_connection_offer_message()->::chrome_browser_sharing::PeerConnectionOfferMessage::MergeFrom(from._internal_peer_connection_offer_message());
      break;
    }
    case kPeerConnectionIceCandidatesMessage: {
      _internal_mutable_peer_connection_ice_candidates_message()->::chrome_browser_sharing::PeerConnectionIceCandidatesMessage::MergeFrom(from._internal_peer_connection_ice_candidates_message());
      break;
    }
    case kDiscoveryRequest: {
      _internal_mutable_discovery_request()->::chrome_browser_sharing::DiscoveryRequest::MergeFrom(from._internal_discovery_request());
      break;
    }
    case kWebRtcSignalingFrame: {
      _internal_mutable_web_rtc_signaling_frame()->::chrome_browser_sharing::WebRtcSignalingMessage::MergeFrom(from._internal_web_rtc_signaling_frame());
      break;
    }
    case kOptimizationGuidePushNotification: {
      _internal_mutable_optimization_guide_push_notification()->::chrome_browser_sharing::OptimizationGuidePushNotification::MergeFrom(from._internal_optimization_guide_push_notification());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  clear_has_ack_channel_configuration();
  switch (from.ack_channel_configuration_case()) {
    case kFcmChannelConfiguration: {
      _internal_mutable_fcm_channel_configuration()->::chrome_browser_sharing::FCMChannelConfiguration::MergeFrom(from._internal_fcm_channel_configuration());
      break;
    }
    case kServerChannelConfiguration: {
      _internal_mutable_server_channel_configuration()->::chrome_browser_sharing::ServerChannelConfiguration::MergeFrom(from._internal_server_channel_configuration());
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.SharingMessage)
}

inline void SharingMessage::SharedCtor() {
sender_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_device_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_device_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_payload();
clear_has_ack_channel_configuration();
}

SharingMessage::~SharingMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.SharingMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  sender_guid_.Destroy();
  sender_device_name_.Destroy();
  message_id_.Destroy();
  if (has_payload()) {
    clear_payload();
  }
  if (has_ack_channel_configuration()) {
    clear_ack_channel_configuration();
  }
}

void SharingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SharingMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:chrome_browser_sharing.SharingMessage)
  switch (payload_case()) {
    case kPingMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.ping_message_;
      }
      break;
    }
    case kAckMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.ack_message_;
      }
      break;
    }
    case kClickToCallMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.click_to_call_message_;
      }
      break;
    }
    case kSharedClipboardMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.shared_clipboard_message_;
      }
      break;
    }
    case kSmsFetchRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.sms_fetch_request_;
      }
      break;
    }
    case kRemoteCopyMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.remote_copy_message_;
      }
      break;
    }
    case kPeerConnectionOfferMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.peer_connection_offer_message_;
      }
      break;
    }
    case kPeerConnectionIceCandidatesMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.peer_connection_ice_candidates_message_;
      }
      break;
    }
    case kDiscoveryRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.discovery_request_;
      }
      break;
    }
    case kWebRtcSignalingFrame: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.web_rtc_signaling_frame_;
      }
      break;
    }
    case kOptimizationGuidePushNotification: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.optimization_guide_push_notification_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}

void SharingMessage::clear_ack_channel_configuration() {
// @@protoc_insertion_point(one_of_clear_start:chrome_browser_sharing.SharingMessage)
  switch (ack_channel_configuration_case()) {
    case kFcmChannelConfiguration: {
      if (GetArenaForAllocation() == nullptr) {
        delete ack_channel_configuration_.fcm_channel_configuration_;
      }
      break;
    }
    case kServerChannelConfiguration: {
      if (GetArenaForAllocation() == nullptr) {
        delete ack_channel_configuration_.server_channel_configuration_;
      }
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[1] = ACK_CHANNEL_CONFIGURATION_NOT_SET;
}


void SharingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.SharingMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sender_guid_.ClearToEmpty();
  sender_device_name_.ClearToEmpty();
  message_id_.ClearToEmpty();
  clear_payload();
  clear_ack_channel_configuration();
  _internal_metadata_.Clear<std::string>();
}

const char* SharingMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string sender_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sender_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PingMessage ping_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.AckMessage ack_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_click_to_call_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_shared_clipboard_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_fcm_channel_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_device_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_sender_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sms_fetch_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_copy_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_connection_offer_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_connection_ice_candidates_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_channel_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_discovery_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_rtc_signaling_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message_id = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.OptimizationGuidePushNotification optimization_guide_push_notification = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization_guide_push_notification(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SharingMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.SharingMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string sender_guid = 1;
  if (!this->_internal_sender_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_guid().data(), static_cast<int>(this->_internal_sender_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SharingMessage.sender_guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sender_guid(), target);
  }

  // .chrome_browser_sharing.PingMessage ping_message = 2;
  if (_internal_has_ping_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ping_message(this),
        _Internal::ping_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.AckMessage ack_message = 3;
  if (_internal_has_ack_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ack_message(this),
        _Internal::ack_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
  if (_internal_has_click_to_call_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::click_to_call_message(this),
        _Internal::click_to_call_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
  if (_internal_has_shared_clipboard_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::shared_clipboard_message(this),
        _Internal::shared_clipboard_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
  if (_internal_has_fcm_channel_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fcm_channel_configuration(this),
        _Internal::fcm_channel_configuration(this).GetCachedSize(), target, stream);
  }

  // string sender_device_name = 7;
  if (!this->_internal_sender_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_device_name().data(), static_cast<int>(this->_internal_sender_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SharingMessage.sender_device_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_sender_device_name(), target);
  }

  // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
  if (_internal_has_sms_fetch_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::sms_fetch_request(this),
        _Internal::sms_fetch_request(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
  if (_internal_has_remote_copy_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::remote_copy_message(this),
        _Internal::remote_copy_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
  if (_internal_has_peer_connection_offer_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::peer_connection_offer_message(this),
        _Internal::peer_connection_offer_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
  if (_internal_has_peer_connection_ice_candidates_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::peer_connection_ice_candidates_message(this),
        _Internal::peer_connection_ice_candidates_message(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
  if (_internal_has_server_channel_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::server_channel_configuration(this),
        _Internal::server_channel_configuration(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
  if (_internal_has_discovery_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::discovery_request(this),
        _Internal::discovery_request(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
  if (_internal_has_web_rtc_signaling_frame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::web_rtc_signaling_frame(this),
        _Internal::web_rtc_signaling_frame(this).GetCachedSize(), target, stream);
  }

  // string message_id = 15;
  if (!this->_internal_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SharingMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_message_id(), target);
  }

  // .chrome_browser_sharing.OptimizationGuidePushNotification optimization_guide_push_notification = 16;
  if (_internal_has_optimization_guide_push_notification()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::optimization_guide_push_notification(this),
        _Internal::optimization_guide_push_notification(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.SharingMessage)
  return target;
}

size_t SharingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.SharingMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sender_guid = 1;
  if (!this->_internal_sender_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_guid());
  }

  // string sender_device_name = 7;
  if (!this->_internal_sender_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_device_name());
  }

  // string message_id = 15;
  if (!this->_internal_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  switch (payload_case()) {
    // .chrome_browser_sharing.PingMessage ping_message = 2;
    case kPingMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.ping_message_);
      break;
    }
    // .chrome_browser_sharing.AckMessage ack_message = 3;
    case kAckMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.ack_message_);
      break;
    }
    // .chrome_browser_sharing.ClickToCallMessage click_to_call_message = 4;
    case kClickToCallMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.click_to_call_message_);
      break;
    }
    // .chrome_browser_sharing.SharedClipboardMessage shared_clipboard_message = 5;
    case kSharedClipboardMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.shared_clipboard_message_);
      break;
    }
    // .chrome_browser_sharing.SmsFetchRequest sms_fetch_request = 8;
    case kSmsFetchRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.sms_fetch_request_);
      break;
    }
    // .chrome_browser_sharing.RemoteCopyMessage remote_copy_message = 9;
    case kRemoteCopyMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.remote_copy_message_);
      break;
    }
    // .chrome_browser_sharing.PeerConnectionOfferMessage peer_connection_offer_message = 10;
    case kPeerConnectionOfferMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.peer_connection_offer_message_);
      break;
    }
    // .chrome_browser_sharing.PeerConnectionIceCandidatesMessage peer_connection_ice_candidates_message = 11;
    case kPeerConnectionIceCandidatesMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.peer_connection_ice_candidates_message_);
      break;
    }
    // .chrome_browser_sharing.DiscoveryRequest discovery_request = 13;
    case kDiscoveryRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.discovery_request_);
      break;
    }
    // .chrome_browser_sharing.WebRtcSignalingMessage web_rtc_signaling_frame = 14;
    case kWebRtcSignalingFrame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.web_rtc_signaling_frame_);
      break;
    }
    // .chrome_browser_sharing.OptimizationGuidePushNotification optimization_guide_push_notification = 16;
    case kOptimizationGuidePushNotification: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.optimization_guide_push_notification_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  switch (ack_channel_configuration_case()) {
    // .chrome_browser_sharing.FCMChannelConfiguration fcm_channel_configuration = 6;
    case kFcmChannelConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ack_channel_configuration_.fcm_channel_configuration_);
      break;
    }
    // .chrome_browser_sharing.ServerChannelConfiguration server_channel_configuration = 12;
    case kServerChannelConfiguration: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ack_channel_configuration_.server_channel_configuration_);
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharingMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharingMessage*>(
      &from));
}

void SharingMessage::MergeFrom(const SharingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.SharingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_sender_guid().empty()) {
    _internal_set_sender_guid(from._internal_sender_guid());
  }
  if (!from._internal_sender_device_name().empty()) {
    _internal_set_sender_device_name(from._internal_sender_device_name());
  }
  if (!from._internal_message_id().empty()) {
    _internal_set_message_id(from._internal_message_id());
  }
  switch (from.payload_case()) {
    case kPingMessage: {
      _internal_mutable_ping_message()->::chrome_browser_sharing::PingMessage::MergeFrom(from._internal_ping_message());
      break;
    }
    case kAckMessage: {
      _internal_mutable_ack_message()->::chrome_browser_sharing::AckMessage::MergeFrom(from._internal_ack_message());
      break;
    }
    case kClickToCallMessage: {
      _internal_mutable_click_to_call_message()->::chrome_browser_sharing::ClickToCallMessage::MergeFrom(from._internal_click_to_call_message());
      break;
    }
    case kSharedClipboardMessage: {
      _internal_mutable_shared_clipboard_message()->::chrome_browser_sharing::SharedClipboardMessage::MergeFrom(from._internal_shared_clipboard_message());
      break;
    }
    case kSmsFetchRequest: {
      _internal_mutable_sms_fetch_request()->::chrome_browser_sharing::SmsFetchRequest::MergeFrom(from._internal_sms_fetch_request());
      break;
    }
    case kRemoteCopyMessage: {
      _internal_mutable_remote_copy_message()->::chrome_browser_sharing::RemoteCopyMessage::MergeFrom(from._internal_remote_copy_message());
      break;
    }
    case kPeerConnectionOfferMessage: {
      _internal_mutable_peer_connection_offer_message()->::chrome_browser_sharing::PeerConnectionOfferMessage::MergeFrom(from._internal_peer_connection_offer_message());
      break;
    }
    case kPeerConnectionIceCandidatesMessage: {
      _internal_mutable_peer_connection_ice_candidates_message()->::chrome_browser_sharing::PeerConnectionIceCandidatesMessage::MergeFrom(from._internal_peer_connection_ice_candidates_message());
      break;
    }
    case kDiscoveryRequest: {
      _internal_mutable_discovery_request()->::chrome_browser_sharing::DiscoveryRequest::MergeFrom(from._internal_discovery_request());
      break;
    }
    case kWebRtcSignalingFrame: {
      _internal_mutable_web_rtc_signaling_frame()->::chrome_browser_sharing::WebRtcSignalingMessage::MergeFrom(from._internal_web_rtc_signaling_frame());
      break;
    }
    case kOptimizationGuidePushNotification: {
      _internal_mutable_optimization_guide_push_notification()->::chrome_browser_sharing::OptimizationGuidePushNotification::MergeFrom(from._internal_optimization_guide_push_notification());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  switch (from.ack_channel_configuration_case()) {
    case kFcmChannelConfiguration: {
      _internal_mutable_fcm_channel_configuration()->::chrome_browser_sharing::FCMChannelConfiguration::MergeFrom(from._internal_fcm_channel_configuration());
      break;
    }
    case kServerChannelConfiguration: {
      _internal_mutable_server_channel_configuration()->::chrome_browser_sharing::ServerChannelConfiguration::MergeFrom(from._internal_server_channel_configuration());
      break;
    }
    case ACK_CHANNEL_CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharingMessage::CopyFrom(const SharingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.SharingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharingMessage::IsInitialized() const {
  return true;
}

void SharingMessage::InternalSwap(SharingMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_guid_, lhs_arena,
      &other->sender_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_device_name_, lhs_arena,
      &other->sender_device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_id_, lhs_arena,
      &other->message_id_, rhs_arena
  );
  swap(payload_, other->payload_);
  swap(ack_channel_configuration_, other->ack_channel_configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_oneof_case_[1], other->_oneof_case_[1]);
}

std::string SharingMessage::GetTypeName() const {
  return "chrome_browser_sharing.SharingMessage";
}


// ===================================================================

class PingMessage::_Internal {
 public:
};

PingMessage::PingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.PingMessage)
}
PingMessage::PingMessage(const PingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.PingMessage)
}

inline void PingMessage::SharedCtor() {
}

PingMessage::~PingMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.PingMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.PingMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* PingMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PingMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.PingMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.PingMessage)
  return target;
}

size_t PingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.PingMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PingMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PingMessage*>(
      &from));
}

void PingMessage::MergeFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.PingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PingMessage::CopyFrom(const PingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.PingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingMessage::IsInitialized() const {
  return true;
}

void PingMessage::InternalSwap(PingMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string PingMessage::GetTypeName() const {
  return "chrome_browser_sharing.PingMessage";
}


// ===================================================================

class AckMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::ResponseMessage& response_message(const AckMessage* msg);
};

const ::chrome_browser_sharing::ResponseMessage&
AckMessage::_Internal::response_message(const AckMessage* msg) {
  return *msg->response_message_;
}
AckMessage::AckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.AckMessage)
}
AckMessage::AckMessage(const AckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  original_message_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    original_message_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_message_id().empty()) {
    original_message_id_.Set(from._internal_original_message_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_response_message()) {
    response_message_ = new ::chrome_browser_sharing::ResponseMessage(*from.response_message_);
  } else {
    response_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.AckMessage)
}

inline void AckMessage::SharedCtor() {
original_message_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  original_message_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
response_message_ = nullptr;
}

AckMessage::~AckMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.AckMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  original_message_id_.Destroy();
  if (this != internal_default_instance()) delete response_message_;
}

void AckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.AckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  original_message_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && response_message_ != nullptr) {
    delete response_message_;
  }
  response_message_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* AckMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string original_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_original_message_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.ResponseMessage response_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_response_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.AckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string original_message_id = 1;
  if (!this->_internal_original_message_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_original_message_id().data(), static_cast<int>(this->_internal_original_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.AckMessage.original_message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_original_message_id(), target);
  }

  // .chrome_browser_sharing.ResponseMessage response_message = 3;
  if (this->_internal_has_response_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::response_message(this),
        _Internal::response_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.AckMessage)
  return target;
}

size_t AckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.AckMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string original_message_id = 1;
  if (!this->_internal_original_message_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_original_message_id());
  }

  // .chrome_browser_sharing.ResponseMessage response_message = 3;
  if (this->_internal_has_response_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AckMessage*>(
      &from));
}

void AckMessage::MergeFrom(const AckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.AckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_original_message_id().empty()) {
    _internal_set_original_message_id(from._internal_original_message_id());
  }
  if (from._internal_has_response_message()) {
    _internal_mutable_response_message()->::chrome_browser_sharing::ResponseMessage::MergeFrom(from._internal_response_message());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AckMessage::CopyFrom(const AckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.AckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckMessage::IsInitialized() const {
  return true;
}

void AckMessage::InternalSwap(AckMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &original_message_id_, lhs_arena,
      &other->original_message_id_, rhs_arena
  );
  swap(response_message_, other->response_message_);
}

std::string AckMessage::GetTypeName() const {
  return "chrome_browser_sharing.AckMessage";
}


// ===================================================================

class ResponseMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::SmsFetchResponse& sms_fetch_response(const ResponseMessage* msg);
  static const ::chrome_browser_sharing::PeerConnectionAnswerMessage& peer_connection_answer_message_response(const ResponseMessage* msg);
  static const ::chrome_browser_sharing::DiscoveryResponse& discovery_response(const ResponseMessage* msg);
};

const ::chrome_browser_sharing::SmsFetchResponse&
ResponseMessage::_Internal::sms_fetch_response(const ResponseMessage* msg) {
  return *msg->payload_.sms_fetch_response_;
}
const ::chrome_browser_sharing::PeerConnectionAnswerMessage&
ResponseMessage::_Internal::peer_connection_answer_message_response(const ResponseMessage* msg) {
  return *msg->payload_.peer_connection_answer_message_response_;
}
const ::chrome_browser_sharing::DiscoveryResponse&
ResponseMessage::_Internal::discovery_response(const ResponseMessage* msg) {
  return *msg->payload_.discovery_response_;
}
void ResponseMessage::set_allocated_sms_fetch_response(::chrome_browser_sharing::SmsFetchResponse* sms_fetch_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (sms_fetch_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sms_fetch_response));
    if (message_arena != submessage_arena) {
      sms_fetch_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sms_fetch_response, submessage_arena);
    }
    set_has_sms_fetch_response();
    payload_.sms_fetch_response_ = sms_fetch_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ResponseMessage.sms_fetch_response)
}
void ResponseMessage::clear_sms_fetch_response() {
  if (_internal_has_sms_fetch_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.sms_fetch_response_;
    }
    clear_has_payload();
  }
}
void ResponseMessage::set_allocated_peer_connection_answer_message_response(::chrome_browser_sharing::PeerConnectionAnswerMessage* peer_connection_answer_message_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (peer_connection_answer_message_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(peer_connection_answer_message_response));
    if (message_arena != submessage_arena) {
      peer_connection_answer_message_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, peer_connection_answer_message_response, submessage_arena);
    }
    set_has_peer_connection_answer_message_response();
    payload_.peer_connection_answer_message_response_ = peer_connection_answer_message_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ResponseMessage.peer_connection_answer_message_response)
}
void ResponseMessage::clear_peer_connection_answer_message_response() {
  if (_internal_has_peer_connection_answer_message_response()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.peer_connection_answer_message_response_;
    }
    clear_has_payload();
  }
}
void ResponseMessage::set_allocated_discovery_response(::chrome_browser_sharing::DiscoveryResponse* discovery_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (discovery_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(discovery_response);
    if (message_arena != submessage_arena) {
      discovery_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, discovery_response, submessage_arena);
    }
    set_has_discovery_response();
    payload_.discovery_response_ = discovery_response;
  }
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.ResponseMessage.discovery_response)
}
ResponseMessage::ResponseMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.ResponseMessage)
}
ResponseMessage::ResponseMessage(const ResponseMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_payload();
  switch (from.payload_case()) {
    case kSmsFetchResponse: {
      _internal_mutable_sms_fetch_response()->::chrome_browser_sharing::SmsFetchResponse::MergeFrom(from._internal_sms_fetch_response());
      break;
    }
    case kPeerConnectionAnswerMessageResponse: {
      _internal_mutable_peer_connection_answer_message_response()->::chrome_browser_sharing::PeerConnectionAnswerMessage::MergeFrom(from._internal_peer_connection_answer_message_response());
      break;
    }
    case kDiscoveryResponse: {
      _internal_mutable_discovery_response()->::chrome_browser_sharing::DiscoveryResponse::MergeFrom(from._internal_discovery_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.ResponseMessage)
}

inline void ResponseMessage::SharedCtor() {
clear_has_payload();
}

ResponseMessage::~ResponseMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.ResponseMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponseMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_payload()) {
    clear_payload();
  }
}

void ResponseMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseMessage::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:chrome_browser_sharing.ResponseMessage)
  switch (payload_case()) {
    case kSmsFetchResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.sms_fetch_response_;
      }
      break;
    }
    case kPeerConnectionAnswerMessageResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.peer_connection_answer_message_response_;
      }
      break;
    }
    case kDiscoveryResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.discovery_response_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void ResponseMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.ResponseMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_payload();
  _internal_metadata_.Clear<std::string>();
}

const char* ResponseMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_sms_fetch_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_peer_connection_answer_message_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_discovery_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.ResponseMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
  if (_internal_has_sms_fetch_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::sms_fetch_response(this),
        _Internal::sms_fetch_response(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
  if (_internal_has_peer_connection_answer_message_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::peer_connection_answer_message_response(this),
        _Internal::peer_connection_answer_message_response(this).GetCachedSize(), target, stream);
  }

  // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
  if (_internal_has_discovery_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::discovery_response(this),
        _Internal::discovery_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.ResponseMessage)
  return target;
}

size_t ResponseMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.ResponseMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (payload_case()) {
    // .chrome_browser_sharing.SmsFetchResponse sms_fetch_response = 1;
    case kSmsFetchResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.sms_fetch_response_);
      break;
    }
    // .chrome_browser_sharing.PeerConnectionAnswerMessage peer_connection_answer_message_response = 2;
    case kPeerConnectionAnswerMessageResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.peer_connection_answer_message_response_);
      break;
    }
    // .chrome_browser_sharing.DiscoveryResponse discovery_response = 3;
    case kDiscoveryResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.discovery_response_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponseMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ResponseMessage*>(
      &from));
}

void ResponseMessage::MergeFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.ResponseMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.payload_case()) {
    case kSmsFetchResponse: {
      _internal_mutable_sms_fetch_response()->::chrome_browser_sharing::SmsFetchResponse::MergeFrom(from._internal_sms_fetch_response());
      break;
    }
    case kPeerConnectionAnswerMessageResponse: {
      _internal_mutable_peer_connection_answer_message_response()->::chrome_browser_sharing::PeerConnectionAnswerMessage::MergeFrom(from._internal_peer_connection_answer_message_response());
      break;
    }
    case kDiscoveryResponse: {
      _internal_mutable_discovery_response()->::chrome_browser_sharing::DiscoveryResponse::MergeFrom(from._internal_discovery_response());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ResponseMessage::CopyFrom(const ResponseMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.ResponseMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseMessage::IsInitialized() const {
  return true;
}

void ResponseMessage::InternalSwap(ResponseMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string ResponseMessage::GetTypeName() const {
  return "chrome_browser_sharing.ResponseMessage";
}


// ===================================================================

class FCMChannelConfiguration::_Internal {
 public:
};

FCMChannelConfiguration::FCMChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.FCMChannelConfiguration)
}
FCMChannelConfiguration::FCMChannelConfiguration(const FCMChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  vapid_fcm_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vapid_fcm_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vapid_fcm_token().empty()) {
    vapid_fcm_token_.Set(from._internal_vapid_fcm_token(), 
      GetArenaForAllocation());
  }
  vapid_p256dh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vapid_p256dh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vapid_p256dh().empty()) {
    vapid_p256dh_.Set(from._internal_vapid_p256dh(), 
      GetArenaForAllocation());
  }
  vapid_auth_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    vapid_auth_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vapid_auth_secret().empty()) {
    vapid_auth_secret_.Set(from._internal_vapid_auth_secret(), 
      GetArenaForAllocation());
  }
  sender_id_fcm_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_id_fcm_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id_fcm_token().empty()) {
    sender_id_fcm_token_.Set(from._internal_sender_id_fcm_token(), 
      GetArenaForAllocation());
  }
  sender_id_p256dh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_id_p256dh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id_p256dh().empty()) {
    sender_id_p256dh_.Set(from._internal_sender_id_p256dh(), 
      GetArenaForAllocation());
  }
  sender_id_auth_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sender_id_auth_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sender_id_auth_secret().empty()) {
    sender_id_auth_secret_.Set(from._internal_sender_id_auth_secret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.FCMChannelConfiguration)
}

inline void FCMChannelConfiguration::SharedCtor() {
vapid_fcm_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vapid_fcm_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vapid_p256dh_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vapid_p256dh_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
vapid_auth_secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  vapid_auth_secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_id_fcm_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_id_fcm_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_id_p256dh_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_id_p256dh_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sender_id_auth_secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sender_id_auth_secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FCMChannelConfiguration::~FCMChannelConfiguration() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.FCMChannelConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FCMChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  vapid_fcm_token_.Destroy();
  vapid_p256dh_.Destroy();
  vapid_auth_secret_.Destroy();
  sender_id_fcm_token_.Destroy();
  sender_id_p256dh_.Destroy();
  sender_id_auth_secret_.Destroy();
}

void FCMChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FCMChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.FCMChannelConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vapid_fcm_token_.ClearToEmpty();
  vapid_p256dh_.ClearToEmpty();
  vapid_auth_secret_.ClearToEmpty();
  sender_id_fcm_token_.ClearToEmpty();
  sender_id_p256dh_.ClearToEmpty();
  sender_id_auth_secret_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* FCMChannelConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string vapid_fcm_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_vapid_fcm_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes vapid_p256dh = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vapid_p256dh();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes vapid_auth_secret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_vapid_auth_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sender_id_fcm_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_sender_id_fcm_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes sender_id_p256dh = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sender_id_p256dh();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes sender_id_auth_secret = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sender_id_auth_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FCMChannelConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.FCMChannelConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string vapid_fcm_token = 1;
  if (!this->_internal_vapid_fcm_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vapid_fcm_token().data(), static_cast<int>(this->_internal_vapid_fcm_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.FCMChannelConfiguration.vapid_fcm_token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_vapid_fcm_token(), target);
  }

  // bytes vapid_p256dh = 2;
  if (!this->_internal_vapid_p256dh().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_vapid_p256dh(), target);
  }

  // bytes vapid_auth_secret = 3;
  if (!this->_internal_vapid_auth_secret().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_vapid_auth_secret(), target);
  }

  // string sender_id_fcm_token = 4;
  if (!this->_internal_sender_id_fcm_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sender_id_fcm_token().data(), static_cast<int>(this->_internal_sender_id_fcm_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.FCMChannelConfiguration.sender_id_fcm_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_sender_id_fcm_token(), target);
  }

  // bytes sender_id_p256dh = 5;
  if (!this->_internal_sender_id_p256dh().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_sender_id_p256dh(), target);
  }

  // bytes sender_id_auth_secret = 6;
  if (!this->_internal_sender_id_auth_secret().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_sender_id_auth_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.FCMChannelConfiguration)
  return target;
}

size_t FCMChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.FCMChannelConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string vapid_fcm_token = 1;
  if (!this->_internal_vapid_fcm_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vapid_fcm_token());
  }

  // bytes vapid_p256dh = 2;
  if (!this->_internal_vapid_p256dh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vapid_p256dh());
  }

  // bytes vapid_auth_secret = 3;
  if (!this->_internal_vapid_auth_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_vapid_auth_secret());
  }

  // string sender_id_fcm_token = 4;
  if (!this->_internal_sender_id_fcm_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sender_id_fcm_token());
  }

  // bytes sender_id_p256dh = 5;
  if (!this->_internal_sender_id_p256dh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_id_p256dh());
  }

  // bytes sender_id_auth_secret = 6;
  if (!this->_internal_sender_id_auth_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sender_id_auth_secret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FCMChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FCMChannelConfiguration*>(
      &from));
}

void FCMChannelConfiguration::MergeFrom(const FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.FCMChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_vapid_fcm_token().empty()) {
    _internal_set_vapid_fcm_token(from._internal_vapid_fcm_token());
  }
  if (!from._internal_vapid_p256dh().empty()) {
    _internal_set_vapid_p256dh(from._internal_vapid_p256dh());
  }
  if (!from._internal_vapid_auth_secret().empty()) {
    _internal_set_vapid_auth_secret(from._internal_vapid_auth_secret());
  }
  if (!from._internal_sender_id_fcm_token().empty()) {
    _internal_set_sender_id_fcm_token(from._internal_sender_id_fcm_token());
  }
  if (!from._internal_sender_id_p256dh().empty()) {
    _internal_set_sender_id_p256dh(from._internal_sender_id_p256dh());
  }
  if (!from._internal_sender_id_auth_secret().empty()) {
    _internal_set_sender_id_auth_secret(from._internal_sender_id_auth_secret());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FCMChannelConfiguration::CopyFrom(const FCMChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.FCMChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCMChannelConfiguration::IsInitialized() const {
  return true;
}

void FCMChannelConfiguration::InternalSwap(FCMChannelConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vapid_fcm_token_, lhs_arena,
      &other->vapid_fcm_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vapid_p256dh_, lhs_arena,
      &other->vapid_p256dh_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &vapid_auth_secret_, lhs_arena,
      &other->vapid_auth_secret_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_id_fcm_token_, lhs_arena,
      &other->sender_id_fcm_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_id_p256dh_, lhs_arena,
      &other->sender_id_p256dh_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &sender_id_auth_secret_, lhs_arena,
      &other->sender_id_auth_secret_, rhs_arena
  );
}

std::string FCMChannelConfiguration::GetTypeName() const {
  return "chrome_browser_sharing.FCMChannelConfiguration";
}


// ===================================================================

class ServerChannelConfiguration::_Internal {
 public:
};

ServerChannelConfiguration::ServerChannelConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.ServerChannelConfiguration)
}
ServerChannelConfiguration::ServerChannelConfiguration(const ServerChannelConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  configuration_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    configuration_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_configuration().empty()) {
    configuration_.Set(from._internal_configuration(), 
      GetArenaForAllocation());
  }
  p256dh_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    p256dh_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_p256dh().empty()) {
    p256dh_.Set(from._internal_p256dh(), 
      GetArenaForAllocation());
  }
  auth_secret_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    auth_secret_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_auth_secret().empty()) {
    auth_secret_.Set(from._internal_auth_secret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.ServerChannelConfiguration)
}

inline void ServerChannelConfiguration::SharedCtor() {
configuration_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  configuration_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
p256dh_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  p256dh_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
auth_secret_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  auth_secret_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerChannelConfiguration::~ServerChannelConfiguration() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.ServerChannelConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerChannelConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  configuration_.Destroy();
  p256dh_.Destroy();
  auth_secret_.Destroy();
}

void ServerChannelConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServerChannelConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.ServerChannelConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configuration_.ClearToEmpty();
  p256dh_.ClearToEmpty();
  auth_secret_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* ServerChannelConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_configuration();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes p256dh = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_p256dh();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes auth_secret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_auth_secret();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerChannelConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.ServerChannelConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes configuration = 3;
  if (!this->_internal_configuration().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_configuration(), target);
  }

  // bytes p256dh = 4;
  if (!this->_internal_p256dh().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_p256dh(), target);
  }

  // bytes auth_secret = 5;
  if (!this->_internal_auth_secret().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_auth_secret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.ServerChannelConfiguration)
  return target;
}

size_t ServerChannelConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.ServerChannelConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes configuration = 3;
  if (!this->_internal_configuration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_configuration());
  }

  // bytes p256dh = 4;
  if (!this->_internal_p256dh().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_p256dh());
  }

  // bytes auth_secret = 5;
  if (!this->_internal_auth_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_auth_secret());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerChannelConfiguration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ServerChannelConfiguration*>(
      &from));
}

void ServerChannelConfiguration::MergeFrom(const ServerChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.ServerChannelConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_configuration().empty()) {
    _internal_set_configuration(from._internal_configuration());
  }
  if (!from._internal_p256dh().empty()) {
    _internal_set_p256dh(from._internal_p256dh());
  }
  if (!from._internal_auth_secret().empty()) {
    _internal_set_auth_secret(from._internal_auth_secret());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ServerChannelConfiguration::CopyFrom(const ServerChannelConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.ServerChannelConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerChannelConfiguration::IsInitialized() const {
  return true;
}

void ServerChannelConfiguration::InternalSwap(ServerChannelConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &configuration_, lhs_arena,
      &other->configuration_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &p256dh_, lhs_arena,
      &other->p256dh_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &auth_secret_, lhs_arena,
      &other->auth_secret_, rhs_arena
  );
}

std::string ServerChannelConfiguration::GetTypeName() const {
  return "chrome_browser_sharing.ServerChannelConfiguration";
}


// ===================================================================

class DiscoveryRequest::_Internal {
 public:
};

DiscoveryRequest::DiscoveryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.DiscoveryRequest)
}
DiscoveryRequest::DiscoveryRequest(const DiscoveryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  service_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_id().empty()) {
    service_id_.Set(from._internal_service_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.DiscoveryRequest)
}

inline void DiscoveryRequest::SharedCtor() {
service_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiscoveryRequest::~DiscoveryRequest() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.DiscoveryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_id_.Destroy();
}

void DiscoveryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoveryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.DiscoveryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_id_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoveryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.DiscoveryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_id = 1;
  if (!this->_internal_service_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_id().data(), static_cast<int>(this->_internal_service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.DiscoveryRequest.service_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.DiscoveryRequest)
  return target;
}

size_t DiscoveryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.DiscoveryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_id = 1;
  if (!this->_internal_service_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DiscoveryRequest*>(
      &from));
}

void DiscoveryRequest::MergeFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.DiscoveryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_id().empty()) {
    _internal_set_service_id(from._internal_service_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiscoveryRequest::CopyFrom(const DiscoveryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.DiscoveryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryRequest::IsInitialized() const {
  return true;
}

void DiscoveryRequest::InternalSwap(DiscoveryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_id_, lhs_arena,
      &other->service_id_, rhs_arena
  );
}

std::string DiscoveryRequest::GetTypeName() const {
  return "chrome_browser_sharing.DiscoveryRequest";
}


// ===================================================================

class DiscoveryResponse::_Internal {
 public:
};

DiscoveryResponse::DiscoveryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.DiscoveryResponse)
}
DiscoveryResponse::DiscoveryResponse(const DiscoveryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  service_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    service_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_id().empty()) {
    service_id_.Set(from._internal_service_id(), 
      GetArenaForAllocation());
  }
  endpoint_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    endpoint_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint_id().empty()) {
    endpoint_id_.Set(from._internal_endpoint_id(), 
      GetArenaForAllocation());
  }
  endpoint_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    endpoint_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_endpoint_info().empty()) {
    endpoint_info_.Set(from._internal_endpoint_info(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.DiscoveryResponse)
}

inline void DiscoveryResponse::SharedCtor() {
service_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  service_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
endpoint_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  endpoint_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
endpoint_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  endpoint_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DiscoveryResponse::~DiscoveryResponse() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.DiscoveryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiscoveryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  service_id_.Destroy();
  endpoint_id_.Destroy();
  endpoint_info_.Destroy();
}

void DiscoveryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiscoveryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.DiscoveryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_id_.ClearToEmpty();
  endpoint_id_.ClearToEmpty();
  endpoint_info_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* DiscoveryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string endpoint_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_endpoint_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes endpoint_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_endpoint_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiscoveryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.DiscoveryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_id = 1;
  if (!this->_internal_service_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_id().data(), static_cast<int>(this->_internal_service_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.DiscoveryResponse.service_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_id(), target);
  }

  // string endpoint_id = 2;
  if (!this->_internal_endpoint_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint_id().data(), static_cast<int>(this->_internal_endpoint_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.DiscoveryResponse.endpoint_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_endpoint_id(), target);
  }

  // bytes endpoint_info = 3;
  if (!this->_internal_endpoint_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_endpoint_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.DiscoveryResponse)
  return target;
}

size_t DiscoveryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.DiscoveryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_id = 1;
  if (!this->_internal_service_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_id());
  }

  // string endpoint_id = 2;
  if (!this->_internal_endpoint_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint_id());
  }

  // bytes endpoint_info = 3;
  if (!this->_internal_endpoint_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_endpoint_info());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiscoveryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DiscoveryResponse*>(
      &from));
}

void DiscoveryResponse::MergeFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.DiscoveryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_service_id().empty()) {
    _internal_set_service_id(from._internal_service_id());
  }
  if (!from._internal_endpoint_id().empty()) {
    _internal_set_endpoint_id(from._internal_endpoint_id());
  }
  if (!from._internal_endpoint_info().empty()) {
    _internal_set_endpoint_info(from._internal_endpoint_info());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DiscoveryResponse::CopyFrom(const DiscoveryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.DiscoveryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiscoveryResponse::IsInitialized() const {
  return true;
}

void DiscoveryResponse::InternalSwap(DiscoveryResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &service_id_, lhs_arena,
      &other->service_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &endpoint_id_, lhs_arena,
      &other->endpoint_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &endpoint_info_, lhs_arena,
      &other->endpoint_info_, rhs_arena
  );
}

std::string DiscoveryResponse::GetTypeName() const {
  return "chrome_browser_sharing.DiscoveryResponse";
}


// ===================================================================

class WebRtcSignalingMessage::_Internal {
 public:
};

WebRtcSignalingMessage::WebRtcSignalingMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.WebRtcSignalingMessage)
}
WebRtcSignalingMessage::WebRtcSignalingMessage(const WebRtcSignalingMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  web_rtc_signaling_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    web_rtc_signaling_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_web_rtc_signaling_frame().empty()) {
    web_rtc_signaling_frame_.Set(from._internal_web_rtc_signaling_frame(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.WebRtcSignalingMessage)
}

inline void WebRtcSignalingMessage::SharedCtor() {
web_rtc_signaling_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  web_rtc_signaling_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WebRtcSignalingMessage::~WebRtcSignalingMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.WebRtcSignalingMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebRtcSignalingMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  web_rtc_signaling_frame_.Destroy();
}

void WebRtcSignalingMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebRtcSignalingMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.WebRtcSignalingMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  web_rtc_signaling_frame_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* WebRtcSignalingMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes web_rtc_signaling_frame = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_web_rtc_signaling_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebRtcSignalingMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.WebRtcSignalingMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes web_rtc_signaling_frame = 1;
  if (!this->_internal_web_rtc_signaling_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_web_rtc_signaling_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.WebRtcSignalingMessage)
  return target;
}

size_t WebRtcSignalingMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.WebRtcSignalingMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes web_rtc_signaling_frame = 1;
  if (!this->_internal_web_rtc_signaling_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_web_rtc_signaling_frame());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebRtcSignalingMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebRtcSignalingMessage*>(
      &from));
}

void WebRtcSignalingMessage::MergeFrom(const WebRtcSignalingMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.WebRtcSignalingMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_web_rtc_signaling_frame().empty()) {
    _internal_set_web_rtc_signaling_frame(from._internal_web_rtc_signaling_frame());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebRtcSignalingMessage::CopyFrom(const WebRtcSignalingMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.WebRtcSignalingMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRtcSignalingMessage::IsInitialized() const {
  return true;
}

void WebRtcSignalingMessage::InternalSwap(WebRtcSignalingMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &web_rtc_signaling_frame_, lhs_arena,
      &other->web_rtc_signaling_frame_, rhs_arena
  );
}

std::string WebRtcSignalingMessage::GetTypeName() const {
  return "chrome_browser_sharing.WebRtcSignalingMessage";
}


// ===================================================================

class WebRtcMessage::_Internal {
 public:
  static const ::chrome_browser_sharing::SharingMessage& message(const WebRtcMessage* msg);
};

const ::chrome_browser_sharing::SharingMessage&
WebRtcMessage::_Internal::message(const WebRtcMessage* msg) {
  return *msg->message_;
}
WebRtcMessage::WebRtcMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.WebRtcMessage)
}
WebRtcMessage::WebRtcMessage(const WebRtcMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  message_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message_guid().empty()) {
    message_guid_.Set(from._internal_message_guid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::chrome_browser_sharing::SharingMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.WebRtcMessage)
}

inline void WebRtcMessage::SharedCtor() {
message_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

WebRtcMessage::~WebRtcMessage() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.WebRtcMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebRtcMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_guid_.Destroy();
  if (this != internal_default_instance()) delete message_;
}

void WebRtcMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebRtcMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.WebRtcMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_guid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* WebRtcMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .chrome_browser_sharing.SharingMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebRtcMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.WebRtcMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_guid = 1;
  if (!this->_internal_message_guid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_guid().data(), static_cast<int>(this->_internal_message_guid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.WebRtcMessage.message_guid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_guid(), target);
  }

  // .chrome_browser_sharing.SharingMessage message = 2;
  if (this->_internal_has_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::message(this),
        _Internal::message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.WebRtcMessage)
  return target;
}

size_t WebRtcMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.WebRtcMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_guid = 1;
  if (!this->_internal_message_guid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_guid());
  }

  // .chrome_browser_sharing.SharingMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebRtcMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebRtcMessage*>(
      &from));
}

void WebRtcMessage::MergeFrom(const WebRtcMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.WebRtcMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message_guid().empty()) {
    _internal_set_message_guid(from._internal_message_guid());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::chrome_browser_sharing::SharingMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebRtcMessage::CopyFrom(const WebRtcMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.WebRtcMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebRtcMessage::IsInitialized() const {
  return true;
}

void WebRtcMessage::InternalSwap(WebRtcMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_guid_, lhs_arena,
      &other->message_guid_, rhs_arena
  );
  swap(message_, other->message_);
}

std::string WebRtcMessage::GetTypeName() const {
  return "chrome_browser_sharing.WebRtcMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::SharingMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::SharingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::SharingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::PingMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::PingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::PingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::AckMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::AckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::AckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::ResponseMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::ResponseMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::ResponseMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::FCMChannelConfiguration*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::FCMChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::FCMChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::ServerChannelConfiguration*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::ServerChannelConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::ServerChannelConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::DiscoveryRequest*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::DiscoveryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::DiscoveryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::DiscoveryResponse*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::DiscoveryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::DiscoveryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::WebRtcSignalingMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::WebRtcSignalingMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::WebRtcSignalingMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::WebRtcMessage*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::WebRtcMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::WebRtcMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
