// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sms_fetch_message_test_proto3_optional.proto

#include "sms_fetch_message_test_proto3_optional.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace chrome_browser_sharing {
PROTOBUF_CONSTEXPR SmsFetchRequest::SmsFetchRequest(
    ::_pbi::ConstantInitialized)
  : origins_(){}
struct SmsFetchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmsFetchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmsFetchRequestDefaultTypeInternal() {}
  union {
    SmsFetchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmsFetchRequestDefaultTypeInternal _SmsFetchRequest_default_instance_;
PROTOBUF_CONSTEXPR SmsFetchResponse::SmsFetchResponse(
    ::_pbi::ConstantInitialized)
  : origins_()
  , one_time_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , failure_type_(0)
{}
struct SmsFetchResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SmsFetchResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SmsFetchResponseDefaultTypeInternal() {}
  union {
    SmsFetchResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SmsFetchResponseDefaultTypeInternal _SmsFetchResponse_default_instance_;
}  // namespace chrome_browser_sharing
namespace chrome_browser_sharing {
bool SmsFetchResponse_FailureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SmsFetchResponse_FailureType_strings[7] = {};

static const char SmsFetchResponse_FailureType_names[] =
  "BACKEND_NOT_AVAILABLE"
  "FAILURE_TYPE_UNSPECIFIED"
  "PROMPT_CANCELLED"
  "PROMPT_TIMEOUT"
  "SMS_NOT_PARSED_GURL_NOT_VALID"
  "SMS_NOT_PARSED_HOST_AND_PORT_NOT_PARSED"
  "SMS_NOT_PARSED_OTP_FORMAT_REGEX_NOT_MATCH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SmsFetchResponse_FailureType_entries[] = {
  { {SmsFetchResponse_FailureType_names + 0, 21}, 6 },
  { {SmsFetchResponse_FailureType_names + 21, 24}, 0 },
  { {SmsFetchResponse_FailureType_names + 45, 16}, 5 },
  { {SmsFetchResponse_FailureType_names + 61, 14}, 4 },
  { {SmsFetchResponse_FailureType_names + 75, 29}, 3 },
  { {SmsFetchResponse_FailureType_names + 104, 39}, 2 },
  { {SmsFetchResponse_FailureType_names + 143, 41}, 1 },
};

static const int SmsFetchResponse_FailureType_entries_by_number[] = {
  1, // 0 -> FAILURE_TYPE_UNSPECIFIED
  6, // 1 -> SMS_NOT_PARSED_OTP_FORMAT_REGEX_NOT_MATCH
  5, // 2 -> SMS_NOT_PARSED_HOST_AND_PORT_NOT_PARSED
  4, // 3 -> SMS_NOT_PARSED_GURL_NOT_VALID
  3, // 4 -> PROMPT_TIMEOUT
  2, // 5 -> PROMPT_CANCELLED
  0, // 6 -> BACKEND_NOT_AVAILABLE
};

const std::string& SmsFetchResponse_FailureType_Name(
    SmsFetchResponse_FailureType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SmsFetchResponse_FailureType_entries,
          SmsFetchResponse_FailureType_entries_by_number,
          7, SmsFetchResponse_FailureType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SmsFetchResponse_FailureType_entries,
      SmsFetchResponse_FailureType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SmsFetchResponse_FailureType_strings[idx].get();
}
bool SmsFetchResponse_FailureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SmsFetchResponse_FailureType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SmsFetchResponse_FailureType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<SmsFetchResponse_FailureType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SmsFetchResponse_FailureType SmsFetchResponse::FAILURE_TYPE_UNSPECIFIED;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::SMS_NOT_PARSED_OTP_FORMAT_REGEX_NOT_MATCH;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::SMS_NOT_PARSED_HOST_AND_PORT_NOT_PARSED;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::SMS_NOT_PARSED_GURL_NOT_VALID;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::PROMPT_TIMEOUT;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::PROMPT_CANCELLED;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::BACKEND_NOT_AVAILABLE;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::FailureType_MIN;
constexpr SmsFetchResponse_FailureType SmsFetchResponse::FailureType_MAX;
constexpr int SmsFetchResponse::FailureType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SmsFetchRequest::_Internal {
 public:
};

SmsFetchRequest::SmsFetchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  origins_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.SmsFetchRequest)
}
SmsFetchRequest::SmsFetchRequest(const SmsFetchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      origins_(from.origins_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.SmsFetchRequest)
}

inline void SmsFetchRequest::SharedCtor() {
}

SmsFetchRequest::~SmsFetchRequest() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.SmsFetchRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmsFetchRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SmsFetchRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SmsFetchRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.SmsFetchRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origins_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SmsFetchRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string origins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_origins();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmsFetchRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.SmsFetchRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string origins = 1;
  for (int i = 0, n = this->_internal_origins_size(); i < n; i++) {
    const auto& s = this->_internal_origins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SmsFetchRequest.origins");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.SmsFetchRequest)
  return target;
}

size_t SmsFetchRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.SmsFetchRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string origins = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(origins_.size());
  for (int i = 0, n = origins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      origins_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmsFetchRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SmsFetchRequest*>(
      &from));
}

void SmsFetchRequest::MergeFrom(const SmsFetchRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.SmsFetchRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  origins_.MergeFrom(from.origins_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SmsFetchRequest::CopyFrom(const SmsFetchRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.SmsFetchRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsFetchRequest::IsInitialized() const {
  return true;
}

void SmsFetchRequest::InternalSwap(SmsFetchRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  origins_.InternalSwap(&other->origins_);
}

std::string SmsFetchRequest::GetTypeName() const {
  return "chrome_browser_sharing.SmsFetchRequest";
}


// ===================================================================

class SmsFetchResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<SmsFetchResponse>()._has_bits_);
  static void set_has_failure_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SmsFetchResponse::SmsFetchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  origins_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:chrome_browser_sharing.SmsFetchResponse)
}
SmsFetchResponse::SmsFetchResponse(const SmsFetchResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      origins_(from.origins_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  one_time_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    one_time_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_one_time_code().empty()) {
    one_time_code_.Set(from._internal_one_time_code(), 
      GetArenaForAllocation());
  }
  failure_type_ = from.failure_type_;
  // @@protoc_insertion_point(copy_constructor:chrome_browser_sharing.SmsFetchResponse)
}

inline void SmsFetchResponse::SharedCtor() {
one_time_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  one_time_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
failure_type_ = 0;
}

SmsFetchResponse::~SmsFetchResponse() {
  // @@protoc_insertion_point(destructor:chrome_browser_sharing.SmsFetchResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SmsFetchResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  one_time_code_.Destroy();
}

void SmsFetchResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SmsFetchResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_browser_sharing.SmsFetchResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  origins_.Clear();
  one_time_code_.ClearToEmpty();
  failure_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SmsFetchResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string origins = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_origins();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string one_time_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_one_time_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // optional .chrome_browser_sharing.SmsFetchResponse.FailureType failure_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_failure_type(static_cast<::chrome_browser_sharing::SmsFetchResponse_FailureType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SmsFetchResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:chrome_browser_sharing.SmsFetchResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string origins = 1;
  for (int i = 0, n = this->_internal_origins_size(); i < n; i++) {
    const auto& s = this->_internal_origins(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SmsFetchResponse.origins");
    target = stream->WriteString(1, s, target);
  }

  // string one_time_code = 2;
  if (!this->_internal_one_time_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_one_time_code().data(), static_cast<int>(this->_internal_one_time_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "chrome_browser_sharing.SmsFetchResponse.one_time_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_one_time_code(), target);
  }

  // optional .chrome_browser_sharing.SmsFetchResponse.FailureType failure_type = 3;
  if (_internal_has_failure_type()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_failure_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chrome_browser_sharing.SmsFetchResponse)
  return target;
}

size_t SmsFetchResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_browser_sharing.SmsFetchResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string origins = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(origins_.size());
  for (int i = 0, n = origins_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      origins_.Get(i));
  }

  // string one_time_code = 2;
  if (!this->_internal_one_time_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_one_time_code());
  }

  // optional .chrome_browser_sharing.SmsFetchResponse.FailureType failure_type = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_failure_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SmsFetchResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SmsFetchResponse*>(
      &from));
}

void SmsFetchResponse::MergeFrom(const SmsFetchResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_browser_sharing.SmsFetchResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  origins_.MergeFrom(from.origins_);
  if (!from._internal_one_time_code().empty()) {
    _internal_set_one_time_code(from._internal_one_time_code());
  }
  if (from._internal_has_failure_type()) {
    _internal_set_failure_type(from._internal_failure_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SmsFetchResponse::CopyFrom(const SmsFetchResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_browser_sharing.SmsFetchResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmsFetchResponse::IsInitialized() const {
  return true;
}

void SmsFetchResponse::InternalSwap(SmsFetchResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  origins_.InternalSwap(&other->origins_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &one_time_code_, lhs_arena,
      &other->one_time_code_, rhs_arena
  );
  swap(failure_type_, other->failure_type_);
}

std::string SmsFetchResponse::GetTypeName() const {
  return "chrome_browser_sharing.SmsFetchResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::SmsFetchRequest*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::SmsFetchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::SmsFetchRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::chrome_browser_sharing::SmsFetchResponse*
Arena::CreateMaybeMessage< ::chrome_browser_sharing::SmsFetchResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::chrome_browser_sharing::SmsFetchResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
