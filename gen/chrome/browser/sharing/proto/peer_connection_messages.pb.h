// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: peer_connection_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_peer_5fconnection_5fmessages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_peer_5fconnection_5fmessages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_peer_5fconnection_5fmessages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_peer_5fconnection_5fmessages_2eproto {
  static const uint32_t offsets[];
};
namespace chrome_browser_sharing {
class PeerConnectionAnswerMessage;
struct PeerConnectionAnswerMessageDefaultTypeInternal;
extern PeerConnectionAnswerMessageDefaultTypeInternal _PeerConnectionAnswerMessage_default_instance_;
class PeerConnectionIceCandidate;
struct PeerConnectionIceCandidateDefaultTypeInternal;
extern PeerConnectionIceCandidateDefaultTypeInternal _PeerConnectionIceCandidate_default_instance_;
class PeerConnectionIceCandidatesMessage;
struct PeerConnectionIceCandidatesMessageDefaultTypeInternal;
extern PeerConnectionIceCandidatesMessageDefaultTypeInternal _PeerConnectionIceCandidatesMessage_default_instance_;
class PeerConnectionOfferMessage;
struct PeerConnectionOfferMessageDefaultTypeInternal;
extern PeerConnectionOfferMessageDefaultTypeInternal _PeerConnectionOfferMessage_default_instance_;
}  // namespace chrome_browser_sharing
PROTOBUF_NAMESPACE_OPEN
template<> ::chrome_browser_sharing::PeerConnectionAnswerMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::PeerConnectionAnswerMessage>(Arena*);
template<> ::chrome_browser_sharing::PeerConnectionIceCandidate* Arena::CreateMaybeMessage<::chrome_browser_sharing::PeerConnectionIceCandidate>(Arena*);
template<> ::chrome_browser_sharing::PeerConnectionIceCandidatesMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::PeerConnectionIceCandidatesMessage>(Arena*);
template<> ::chrome_browser_sharing::PeerConnectionOfferMessage* Arena::CreateMaybeMessage<::chrome_browser_sharing::PeerConnectionOfferMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace chrome_browser_sharing {

// ===================================================================

class PeerConnectionOfferMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.PeerConnectionOfferMessage) */ {
 public:
  inline PeerConnectionOfferMessage() : PeerConnectionOfferMessage(nullptr) {}
  ~PeerConnectionOfferMessage() override;
  explicit PROTOBUF_CONSTEXPR PeerConnectionOfferMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerConnectionOfferMessage(const PeerConnectionOfferMessage& from);
  PeerConnectionOfferMessage(PeerConnectionOfferMessage&& from) noexcept
    : PeerConnectionOfferMessage() {
    *this = ::std::move(from);
  }

  inline PeerConnectionOfferMessage& operator=(const PeerConnectionOfferMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnectionOfferMessage& operator=(PeerConnectionOfferMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PeerConnectionOfferMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnectionOfferMessage* internal_default_instance() {
    return reinterpret_cast<const PeerConnectionOfferMessage*>(
               &_PeerConnectionOfferMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeerConnectionOfferMessage& a, PeerConnectionOfferMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PeerConnectionOfferMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnectionOfferMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnectionOfferMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConnectionOfferMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PeerConnectionOfferMessage& from);
  void MergeFrom(const PeerConnectionOfferMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerConnectionOfferMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.PeerConnectionOfferMessage";
  }
  protected:
  explicit PeerConnectionOfferMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdpFieldNumber = 1,
  };
  // string sdp = 1;
  void clear_sdp();
  const std::string& sdp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdp();
  PROTOBUF_NODISCARD std::string* release_sdp();
  void set_allocated_sdp(std::string* sdp);
  private:
  const std::string& _internal_sdp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdp(const std::string& value);
  std::string* _internal_mutable_sdp();
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.PeerConnectionOfferMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_5fconnection_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PeerConnectionAnswerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.PeerConnectionAnswerMessage) */ {
 public:
  inline PeerConnectionAnswerMessage() : PeerConnectionAnswerMessage(nullptr) {}
  ~PeerConnectionAnswerMessage() override;
  explicit PROTOBUF_CONSTEXPR PeerConnectionAnswerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerConnectionAnswerMessage(const PeerConnectionAnswerMessage& from);
  PeerConnectionAnswerMessage(PeerConnectionAnswerMessage&& from) noexcept
    : PeerConnectionAnswerMessage() {
    *this = ::std::move(from);
  }

  inline PeerConnectionAnswerMessage& operator=(const PeerConnectionAnswerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnectionAnswerMessage& operator=(PeerConnectionAnswerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PeerConnectionAnswerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnectionAnswerMessage* internal_default_instance() {
    return reinterpret_cast<const PeerConnectionAnswerMessage*>(
               &_PeerConnectionAnswerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PeerConnectionAnswerMessage& a, PeerConnectionAnswerMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PeerConnectionAnswerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnectionAnswerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnectionAnswerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConnectionAnswerMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PeerConnectionAnswerMessage& from);
  void MergeFrom(const PeerConnectionAnswerMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerConnectionAnswerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.PeerConnectionAnswerMessage";
  }
  protected:
  explicit PeerConnectionAnswerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdpFieldNumber = 1,
  };
  // string sdp = 1;
  void clear_sdp();
  const std::string& sdp() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdp(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdp();
  PROTOBUF_NODISCARD std::string* release_sdp();
  void set_allocated_sdp(std::string* sdp);
  private:
  const std::string& _internal_sdp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdp(const std::string& value);
  std::string* _internal_mutable_sdp();
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.PeerConnectionAnswerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_5fconnection_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PeerConnectionIceCandidate final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.PeerConnectionIceCandidate) */ {
 public:
  inline PeerConnectionIceCandidate() : PeerConnectionIceCandidate(nullptr) {}
  ~PeerConnectionIceCandidate() override;
  explicit PROTOBUF_CONSTEXPR PeerConnectionIceCandidate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerConnectionIceCandidate(const PeerConnectionIceCandidate& from);
  PeerConnectionIceCandidate(PeerConnectionIceCandidate&& from) noexcept
    : PeerConnectionIceCandidate() {
    *this = ::std::move(from);
  }

  inline PeerConnectionIceCandidate& operator=(const PeerConnectionIceCandidate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnectionIceCandidate& operator=(PeerConnectionIceCandidate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PeerConnectionIceCandidate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnectionIceCandidate* internal_default_instance() {
    return reinterpret_cast<const PeerConnectionIceCandidate*>(
               &_PeerConnectionIceCandidate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PeerConnectionIceCandidate& a, PeerConnectionIceCandidate& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PeerConnectionIceCandidate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnectionIceCandidate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnectionIceCandidate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConnectionIceCandidate>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PeerConnectionIceCandidate& from);
  void MergeFrom(const PeerConnectionIceCandidate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerConnectionIceCandidate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.PeerConnectionIceCandidate";
  }
  protected:
  explicit PeerConnectionIceCandidate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 1,
    kSdpMidFieldNumber = 2,
    kSdpMlineIndexFieldNumber = 3,
  };
  // string candidate = 1;
  void clear_candidate();
  const std::string& candidate() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_candidate(ArgT0&& arg0, ArgT... args);
  std::string* mutable_candidate();
  PROTOBUF_NODISCARD std::string* release_candidate();
  void set_allocated_candidate(std::string* candidate);
  private:
  const std::string& _internal_candidate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_candidate(const std::string& value);
  std::string* _internal_mutable_candidate();
  public:

  // string sdp_mid = 2;
  void clear_sdp_mid();
  const std::string& sdp_mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdp_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdp_mid();
  PROTOBUF_NODISCARD std::string* release_sdp_mid();
  void set_allocated_sdp_mid(std::string* sdp_mid);
  private:
  const std::string& _internal_sdp_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdp_mid(const std::string& value);
  std::string* _internal_mutable_sdp_mid();
  public:

  // int32 sdp_mline_index = 3;
  void clear_sdp_mline_index();
  int32_t sdp_mline_index() const;
  void set_sdp_mline_index(int32_t value);
  private:
  int32_t _internal_sdp_mline_index() const;
  void _internal_set_sdp_mline_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.PeerConnectionIceCandidate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr candidate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdp_mid_;
  int32_t sdp_mline_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_5fconnection_5fmessages_2eproto;
};
// -------------------------------------------------------------------

class PeerConnectionIceCandidatesMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:chrome_browser_sharing.PeerConnectionIceCandidatesMessage) */ {
 public:
  inline PeerConnectionIceCandidatesMessage() : PeerConnectionIceCandidatesMessage(nullptr) {}
  ~PeerConnectionIceCandidatesMessage() override;
  explicit PROTOBUF_CONSTEXPR PeerConnectionIceCandidatesMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeerConnectionIceCandidatesMessage(const PeerConnectionIceCandidatesMessage& from);
  PeerConnectionIceCandidatesMessage(PeerConnectionIceCandidatesMessage&& from) noexcept
    : PeerConnectionIceCandidatesMessage() {
    *this = ::std::move(from);
  }

  inline PeerConnectionIceCandidatesMessage& operator=(const PeerConnectionIceCandidatesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeerConnectionIceCandidatesMessage& operator=(PeerConnectionIceCandidatesMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const PeerConnectionIceCandidatesMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeerConnectionIceCandidatesMessage* internal_default_instance() {
    return reinterpret_cast<const PeerConnectionIceCandidatesMessage*>(
               &_PeerConnectionIceCandidatesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PeerConnectionIceCandidatesMessage& a, PeerConnectionIceCandidatesMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PeerConnectionIceCandidatesMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeerConnectionIceCandidatesMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeerConnectionIceCandidatesMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeerConnectionIceCandidatesMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PeerConnectionIceCandidatesMessage& from);
  void MergeFrom(const PeerConnectionIceCandidatesMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeerConnectionIceCandidatesMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "chrome_browser_sharing.PeerConnectionIceCandidatesMessage";
  }
  protected:
  explicit PeerConnectionIceCandidatesMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIceCandidatesFieldNumber = 1,
  };
  // repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
  int ice_candidates_size() const;
  private:
  int _internal_ice_candidates_size() const;
  public:
  void clear_ice_candidates();
  ::chrome_browser_sharing::PeerConnectionIceCandidate* mutable_ice_candidates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_sharing::PeerConnectionIceCandidate >*
      mutable_ice_candidates();
  private:
  const ::chrome_browser_sharing::PeerConnectionIceCandidate& _internal_ice_candidates(int index) const;
  ::chrome_browser_sharing::PeerConnectionIceCandidate* _internal_add_ice_candidates();
  public:
  const ::chrome_browser_sharing::PeerConnectionIceCandidate& ice_candidates(int index) const;
  ::chrome_browser_sharing::PeerConnectionIceCandidate* add_ice_candidates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_sharing::PeerConnectionIceCandidate >&
      ice_candidates() const;

  // @@protoc_insertion_point(class_scope:chrome_browser_sharing.PeerConnectionIceCandidatesMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_sharing::PeerConnectionIceCandidate > ice_candidates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_peer_5fconnection_5fmessages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeerConnectionOfferMessage

// string sdp = 1;
inline void PeerConnectionOfferMessage::clear_sdp() {
  sdp_.ClearToEmpty();
}
inline const std::string& PeerConnectionOfferMessage::sdp() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.PeerConnectionOfferMessage.sdp)
  return _internal_sdp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerConnectionOfferMessage::set_sdp(ArgT0&& arg0, ArgT... args) {
 
 sdp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.PeerConnectionOfferMessage.sdp)
}
inline std::string* PeerConnectionOfferMessage::mutable_sdp() {
  std::string* _s = _internal_mutable_sdp();
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.PeerConnectionOfferMessage.sdp)
  return _s;
}
inline const std::string& PeerConnectionOfferMessage::_internal_sdp() const {
  return sdp_.Get();
}
inline void PeerConnectionOfferMessage::_internal_set_sdp(const std::string& value) {
  
  sdp_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerConnectionOfferMessage::_internal_mutable_sdp() {
  
  return sdp_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerConnectionOfferMessage::release_sdp() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.PeerConnectionOfferMessage.sdp)
  return sdp_.Release();
}
inline void PeerConnectionOfferMessage::set_allocated_sdp(std::string* sdp) {
  if (sdp != nullptr) {
    
  } else {
    
  }
  sdp_.SetAllocated(sdp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdp_.IsDefault()) {
    sdp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.PeerConnectionOfferMessage.sdp)
}

// -------------------------------------------------------------------

// PeerConnectionAnswerMessage

// string sdp = 1;
inline void PeerConnectionAnswerMessage::clear_sdp() {
  sdp_.ClearToEmpty();
}
inline const std::string& PeerConnectionAnswerMessage::sdp() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.PeerConnectionAnswerMessage.sdp)
  return _internal_sdp();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerConnectionAnswerMessage::set_sdp(ArgT0&& arg0, ArgT... args) {
 
 sdp_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.PeerConnectionAnswerMessage.sdp)
}
inline std::string* PeerConnectionAnswerMessage::mutable_sdp() {
  std::string* _s = _internal_mutable_sdp();
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.PeerConnectionAnswerMessage.sdp)
  return _s;
}
inline const std::string& PeerConnectionAnswerMessage::_internal_sdp() const {
  return sdp_.Get();
}
inline void PeerConnectionAnswerMessage::_internal_set_sdp(const std::string& value) {
  
  sdp_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerConnectionAnswerMessage::_internal_mutable_sdp() {
  
  return sdp_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerConnectionAnswerMessage::release_sdp() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.PeerConnectionAnswerMessage.sdp)
  return sdp_.Release();
}
inline void PeerConnectionAnswerMessage::set_allocated_sdp(std::string* sdp) {
  if (sdp != nullptr) {
    
  } else {
    
  }
  sdp_.SetAllocated(sdp, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdp_.IsDefault()) {
    sdp_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.PeerConnectionAnswerMessage.sdp)
}

// -------------------------------------------------------------------

// PeerConnectionIceCandidate

// string candidate = 1;
inline void PeerConnectionIceCandidate::clear_candidate() {
  candidate_.ClearToEmpty();
}
inline const std::string& PeerConnectionIceCandidate::candidate() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.PeerConnectionIceCandidate.candidate)
  return _internal_candidate();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerConnectionIceCandidate::set_candidate(ArgT0&& arg0, ArgT... args) {
 
 candidate_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.PeerConnectionIceCandidate.candidate)
}
inline std::string* PeerConnectionIceCandidate::mutable_candidate() {
  std::string* _s = _internal_mutable_candidate();
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.PeerConnectionIceCandidate.candidate)
  return _s;
}
inline const std::string& PeerConnectionIceCandidate::_internal_candidate() const {
  return candidate_.Get();
}
inline void PeerConnectionIceCandidate::_internal_set_candidate(const std::string& value) {
  
  candidate_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerConnectionIceCandidate::_internal_mutable_candidate() {
  
  return candidate_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerConnectionIceCandidate::release_candidate() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.PeerConnectionIceCandidate.candidate)
  return candidate_.Release();
}
inline void PeerConnectionIceCandidate::set_allocated_candidate(std::string* candidate) {
  if (candidate != nullptr) {
    
  } else {
    
  }
  candidate_.SetAllocated(candidate, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (candidate_.IsDefault()) {
    candidate_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.PeerConnectionIceCandidate.candidate)
}

// string sdp_mid = 2;
inline void PeerConnectionIceCandidate::clear_sdp_mid() {
  sdp_mid_.ClearToEmpty();
}
inline const std::string& PeerConnectionIceCandidate::sdp_mid() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid)
  return _internal_sdp_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PeerConnectionIceCandidate::set_sdp_mid(ArgT0&& arg0, ArgT... args) {
 
 sdp_mid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid)
}
inline std::string* PeerConnectionIceCandidate::mutable_sdp_mid() {
  std::string* _s = _internal_mutable_sdp_mid();
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid)
  return _s;
}
inline const std::string& PeerConnectionIceCandidate::_internal_sdp_mid() const {
  return sdp_mid_.Get();
}
inline void PeerConnectionIceCandidate::_internal_set_sdp_mid(const std::string& value) {
  
  sdp_mid_.Set(value, GetArenaForAllocation());
}
inline std::string* PeerConnectionIceCandidate::_internal_mutable_sdp_mid() {
  
  return sdp_mid_.Mutable(GetArenaForAllocation());
}
inline std::string* PeerConnectionIceCandidate::release_sdp_mid() {
  // @@protoc_insertion_point(field_release:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid)
  return sdp_mid_.Release();
}
inline void PeerConnectionIceCandidate::set_allocated_sdp_mid(std::string* sdp_mid) {
  if (sdp_mid != nullptr) {
    
  } else {
    
  }
  sdp_mid_.SetAllocated(sdp_mid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sdp_mid_.IsDefault()) {
    sdp_mid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mid)
}

// int32 sdp_mline_index = 3;
inline void PeerConnectionIceCandidate::clear_sdp_mline_index() {
  sdp_mline_index_ = 0;
}
inline int32_t PeerConnectionIceCandidate::_internal_sdp_mline_index() const {
  return sdp_mline_index_;
}
inline int32_t PeerConnectionIceCandidate::sdp_mline_index() const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mline_index)
  return _internal_sdp_mline_index();
}
inline void PeerConnectionIceCandidate::_internal_set_sdp_mline_index(int32_t value) {
  
  sdp_mline_index_ = value;
}
inline void PeerConnectionIceCandidate::set_sdp_mline_index(int32_t value) {
  _internal_set_sdp_mline_index(value);
  // @@protoc_insertion_point(field_set:chrome_browser_sharing.PeerConnectionIceCandidate.sdp_mline_index)
}

// -------------------------------------------------------------------

// PeerConnectionIceCandidatesMessage

// repeated .chrome_browser_sharing.PeerConnectionIceCandidate ice_candidates = 1;
inline int PeerConnectionIceCandidatesMessage::_internal_ice_candidates_size() const {
  return ice_candidates_.size();
}
inline int PeerConnectionIceCandidatesMessage::ice_candidates_size() const {
  return _internal_ice_candidates_size();
}
inline void PeerConnectionIceCandidatesMessage::clear_ice_candidates() {
  ice_candidates_.Clear();
}
inline ::chrome_browser_sharing::PeerConnectionIceCandidate* PeerConnectionIceCandidatesMessage::mutable_ice_candidates(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_browser_sharing.PeerConnectionIceCandidatesMessage.ice_candidates)
  return ice_candidates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_sharing::PeerConnectionIceCandidate >*
PeerConnectionIceCandidatesMessage::mutable_ice_candidates() {
  // @@protoc_insertion_point(field_mutable_list:chrome_browser_sharing.PeerConnectionIceCandidatesMessage.ice_candidates)
  return &ice_candidates_;
}
inline const ::chrome_browser_sharing::PeerConnectionIceCandidate& PeerConnectionIceCandidatesMessage::_internal_ice_candidates(int index) const {
  return ice_candidates_.Get(index);
}
inline const ::chrome_browser_sharing::PeerConnectionIceCandidate& PeerConnectionIceCandidatesMessage::ice_candidates(int index) const {
  // @@protoc_insertion_point(field_get:chrome_browser_sharing.PeerConnectionIceCandidatesMessage.ice_candidates)
  return _internal_ice_candidates(index);
}
inline ::chrome_browser_sharing::PeerConnectionIceCandidate* PeerConnectionIceCandidatesMessage::_internal_add_ice_candidates() {
  return ice_candidates_.Add();
}
inline ::chrome_browser_sharing::PeerConnectionIceCandidate* PeerConnectionIceCandidatesMessage::add_ice_candidates() {
  ::chrome_browser_sharing::PeerConnectionIceCandidate* _add = _internal_add_ice_candidates();
  // @@protoc_insertion_point(field_add:chrome_browser_sharing.PeerConnectionIceCandidatesMessage.ice_candidates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::chrome_browser_sharing::PeerConnectionIceCandidate >&
PeerConnectionIceCandidatesMessage::ice_candidates() const {
  // @@protoc_insertion_point(field_list:chrome_browser_sharing.PeerConnectionIceCandidatesMessage.ice_candidates)
  return ice_candidates_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_browser_sharing

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_peer_5fconnection_5fmessages_2eproto
