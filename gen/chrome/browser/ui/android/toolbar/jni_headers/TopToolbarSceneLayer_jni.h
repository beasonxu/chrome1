// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/toolbar/top/TopToolbarSceneLayer

#ifndef org_chromium_chrome_browser_toolbar_top_TopToolbarSceneLayer_JNI
#define org_chromium_chrome_browser_toolbar_top_TopToolbarSceneLayer_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_TopToolbarSceneLayer_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MFC6akug(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_TopToolbarSceneLayer_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M9k8YKLL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopToolbarSceneLayer,
    jobject caller,
    jobject contentTree) {
  TopToolbarSceneLayer* native =
      reinterpret_cast<TopToolbarSceneLayer*>(nativeTopToolbarSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetContentTree");
  return native->SetContentTree(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, contentTree));
}

JNI_GENERATOR_EXPORT void Java_J_N_MHqlwRYg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopToolbarSceneLayer,
    jobject caller,
    jobject resourceManager,
    jint resourceId,
    jint toolbarBackgroundColor,
    jint urlBarResourceId,
    jint urlBarColor,
    jfloat xOffset,
    jfloat contentOffset,
    jboolean showShadow,
    jboolean visible,
    jboolean anonymize) {
  TopToolbarSceneLayer* native =
      reinterpret_cast<TopToolbarSceneLayer*>(nativeTopToolbarSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateToolbarLayer");
  return native->UpdateToolbarLayer(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, resourceManager), resourceId,
      toolbarBackgroundColor, urlBarResourceId, urlBarColor, xOffset, contentOffset, showShadow,
      visible, anonymize);
}

JNI_GENERATOR_EXPORT void Java_J_N_MKAQCQU8(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTopToolbarSceneLayer,
    jobject caller,
    jint progressBarX,
    jint progressBarY,
    jint progressBarWidth,
    jint progressBarHeight,
    jint progressBarColor,
    jint progressBarBackgroundX,
    jint progressBarBackgroundY,
    jint progressBarBackgroundWidth,
    jint progressBarBackgroundHeight,
    jint progressBarBackgroundColor) {
  TopToolbarSceneLayer* native =
      reinterpret_cast<TopToolbarSceneLayer*>(nativeTopToolbarSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateProgressBar");
  return native->UpdateProgressBar(env, base::android::JavaParamRef<jobject>(env, caller),
      progressBarX, progressBarY, progressBarWidth, progressBarHeight, progressBarColor,
      progressBarBackgroundX, progressBarBackgroundY, progressBarBackgroundWidth,
      progressBarBackgroundHeight, progressBarBackgroundColor);
}


}  // namespace android

#endif  // org_chromium_chrome_browser_toolbar_top_TopToolbarSceneLayer_JNI
