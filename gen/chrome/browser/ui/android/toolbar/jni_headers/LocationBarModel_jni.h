// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/toolbar/LocationBarModel

#ifndef org_chromium_chrome_browser_toolbar_LocationBarModel_JNI
#define org_chromium_chrome_browser_toolbar_LocationBarModel_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_toolbar_LocationBarModel[];
const char kClassPath_org_chromium_chrome_browser_toolbar_LocationBarModel[] =
    "org/chromium/chrome/browser/toolbar/LocationBarModel";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_toolbar_LocationBarModel_clazz(nullptr);
#ifndef org_chromium_chrome_browser_toolbar_LocationBarModel_clazz_defined
#define org_chromium_chrome_browser_toolbar_LocationBarModel_clazz_defined
inline jclass org_chromium_chrome_browser_toolbar_LocationBarModel_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_toolbar_LocationBarModel,
      &g_org_chromium_chrome_browser_toolbar_LocationBarModel_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_LocationBarModel_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_M8_1Iwqb0(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_LocationBarModel_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MltVHpYK(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLocationBarModelAndroid,
    jobject caller) {
  LocationBarModelAndroid* native =
      reinterpret_cast<LocationBarModelAndroid*>(nativeLocationBarModelAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MvJvjGzq(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLocationBarModelAndroid,
    jobject caller) {
  LocationBarModelAndroid* native =
      reinterpret_cast<LocationBarModelAndroid*>(nativeLocationBarModelAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetFormattedFullURL", NULL);
  return native->GetFormattedFullURL(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_Ml_00024ZWVQn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLocationBarModelAndroid,
    jobject caller) {
  LocationBarModelAndroid* native =
      reinterpret_cast<LocationBarModelAndroid*>(nativeLocationBarModelAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetURLForDisplay", NULL);
  return native->GetURLForDisplay(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}

JNI_GENERATOR_EXPORT jint Java_J_N_MY48gn2Q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeLocationBarModelAndroid,
    jobject caller,
    jboolean isFocusedFromFakebox) {
  LocationBarModelAndroid* native =
      reinterpret_cast<LocationBarModelAndroid*>(nativeLocationBarModelAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPageClassification", 0);
  return native->GetPageClassification(env, base::android::JavaParamRef<jobject>(env, caller),
      isFocusedFromFakebox);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_toolbar_LocationBarModel_getActiveWebContents(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_LocationBarModel_getActiveWebContents(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_toolbar_LocationBarModel_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_toolbar_LocationBarModel_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getActiveWebContents",
          "()Lorg/chromium/content_public/browser/WebContents;",
          &g_org_chromium_chrome_browser_toolbar_LocationBarModel_getActiveWebContents);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_chrome_browser_toolbar_LocationBarModel_JNI
