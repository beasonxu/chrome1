// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/omnibox/geo/GeolocationHeader

#ifndef org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_JNI
#define org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_JNI

#include <jni.h>

#include "../../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader[];
const char kClassPath_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader[] =
    "org/chromium/chrome/browser/omnibox/geo/GeolocationHeader";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz(nullptr);
#ifndef org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz_defined
#define org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz_defined
inline jclass org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader,
      &g_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_getGeoHeader(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_GeolocationHeader_getGeoHeader(JNIEnv* env,
    const base::android::JavaRef<jstring>& url,
    const base::android::JavaRef<jobject>& profile) {
  jclass clazz = org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getGeoHeader",
          "(Ljava/lang/String;Lorg/chromium/chrome/browser/profiles/Profile;)Ljava/lang/String;",
          &g_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_getGeoHeader);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, url.obj(), profile.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_hasGeolocationPermission(nullptr);
static jboolean Java_GeolocationHeader_hasGeolocationPermission(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "hasGeolocationPermission",
          "()Z",
          &g_org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_hasGeolocationPermission);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_omnibox_geo_GeolocationHeader_JNI
