// chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-params-data.h"
namespace mojom {
namespace app_service_internals {

namespace internal {


// static
bool AppInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AppInfo_Data* object =
      static_cast<const AppInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->id, validation_context,
                                         &id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->debug_info, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams debug_info_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->debug_info, validation_context,
                                         &debug_info_validate_params)) {
    return false;
  }

  return true;
}

AppInfo_Data::AppInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool PreferredAppInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const PreferredAppInfo_Data* object =
      static_cast<const PreferredAppInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->id, validation_context,
                                         &id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->name, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams name_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->name, validation_context,
                                         &name_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->preferred_filters, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams preferred_filters_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->preferred_filters, validation_context,
                                         &preferred_filters_validate_params)) {
    return false;
  }

  return true;
}

PreferredAppInfo_Data::PreferredAppInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AppServiceInternalsPageHandler_GetApps_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AppServiceInternalsPageHandler_GetApps_Params_Data* object =
      static_cast<const AppServiceInternalsPageHandler_GetApps_Params_Data*>(data);

  return true;
}

AppServiceInternalsPageHandler_GetApps_Params_Data::AppServiceInternalsPageHandler_GetApps_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AppServiceInternalsPageHandler_GetApps_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AppServiceInternalsPageHandler_GetApps_ResponseParams_Data* object =
      static_cast<const AppServiceInternalsPageHandler_GetApps_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->app_list, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams app_list_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->app_list, validation_context,
                                         &app_list_validate_params)) {
    return false;
  }

  return true;
}

AppServiceInternalsPageHandler_GetApps_ResponseParams_Data::AppServiceInternalsPageHandler_GetApps_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AppServiceInternalsPageHandler_GetPreferredApps_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AppServiceInternalsPageHandler_GetPreferredApps_Params_Data* object =
      static_cast<const AppServiceInternalsPageHandler_GetPreferredApps_Params_Data*>(data);

  return true;
}

AppServiceInternalsPageHandler_GetPreferredApps_Params_Data::AppServiceInternalsPageHandler_GetPreferredApps_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data* object =
      static_cast<const AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->preferred_app_list_, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams preferred_app_list__validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->preferred_app_list_, validation_context,
                                         &preferred_app_list__validate_params)) {
    return false;
  }

  return true;
}

AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data::AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace app_service_internals
}  // namespace mojom