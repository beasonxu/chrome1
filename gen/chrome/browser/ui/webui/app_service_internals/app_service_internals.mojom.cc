// chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-params-data.h"
#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-import-headers.h"
#include "chrome/browser/ui/webui/app_service_internals/app_service_internals.mojom-test-utils.h"


#ifndef CHROME_BROWSER_UI_WEBUI_APP_SERVICE_INTERNALS_APP_SERVICE_INTERNALS_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_APP_SERVICE_INTERNALS_APP_SERVICE_INTERNALS_MOJOM_JUMBO_H_
#endif



namespace mojom {
namespace app_service_internals {
AppInfo::AppInfo()
    : id(),
      name(),
      debug_info() {}

AppInfo::AppInfo(
    const std::string& id_in,
    const std::string& name_in,
    const std::string& debug_info_in)
    : id(std::move(id_in)),
      name(std::move(name_in)),
      debug_info(std::move(debug_info_in)) {}

AppInfo::~AppInfo() = default;
size_t AppInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->id);
  seed = mojo::internal::Hash(seed, this->name);
  seed = mojo::internal::Hash(seed, this->debug_info);
  return seed;
}

void AppInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "debug_info"), this->debug_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AppInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
PreferredAppInfo::PreferredAppInfo()
    : id(),
      name(),
      preferred_filters() {}

PreferredAppInfo::PreferredAppInfo(
    const std::string& id_in,
    const std::string& name_in,
    const std::string& preferred_filters_in)
    : id(std::move(id_in)),
      name(std::move(name_in)),
      preferred_filters(std::move(preferred_filters_in)) {}

PreferredAppInfo::~PreferredAppInfo() = default;
size_t PreferredAppInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->id);
  seed = mojo::internal::Hash(seed, this->name);
  seed = mojo::internal::Hash(seed, this->preferred_filters);
  return seed;
}

void PreferredAppInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "id"), this->id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "preferred_filters"), this->preferred_filters,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool PreferredAppInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char AppServiceInternalsPageHandler::Name_[] = "mojom.app_service_internals.AppServiceInternalsPageHandler";

AppServiceInternalsPageHandler::IPCStableHashFunction AppServiceInternalsPageHandler::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAppServiceInternalsPageHandler_GetApps_Name: {
      return &AppServiceInternalsPageHandler::GetApps_Sym::IPCStableHash;
    }
    case internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name: {
      return &AppServiceInternalsPageHandler::GetPreferredApps_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AppServiceInternalsPageHandler::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAppServiceInternalsPageHandler_GetApps_Name:
            return "Receive mojom::app_service_internals::AppServiceInternalsPageHandler::GetApps";
      case internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name:
            return "Receive mojom::app_service_internals::AppServiceInternalsPageHandler::GetPreferredApps";
    }
  } else {
    switch (message.name()) {
      case internal::kAppServiceInternalsPageHandler_GetApps_Name:
            return "Receive reply mojom::app_service_internals::AppServiceInternalsPageHandler::GetApps";
      case internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name:
            return "Receive reply mojom::app_service_internals::AppServiceInternalsPageHandler::GetPreferredApps";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AppServiceInternalsPageHandler::GetApps_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::app_service_internals::AppServiceInternalsPageHandler::GetApps");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AppServiceInternalsPageHandler::GetPreferredApps_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::app_service_internals::AppServiceInternalsPageHandler::GetPreferredApps");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class AppServiceInternalsPageHandler_GetApps_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AppServiceInternalsPageHandler_GetApps_ForwardToCallback(
      AppServiceInternalsPageHandler::GetAppsCallback callback
      ) : callback_(std::move(callback)) {
  }

  AppServiceInternalsPageHandler_GetApps_ForwardToCallback(const AppServiceInternalsPageHandler_GetApps_ForwardToCallback&) = delete;
  AppServiceInternalsPageHandler_GetApps_ForwardToCallback& operator=(const AppServiceInternalsPageHandler_GetApps_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AppServiceInternalsPageHandler::GetAppsCallback callback_;
};

class AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback(
      AppServiceInternalsPageHandler::GetPreferredAppsCallback callback
      ) : callback_(std::move(callback)) {
  }

  AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback(const AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback&) = delete;
  AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback& operator=(const AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  AppServiceInternalsPageHandler::GetPreferredAppsCallback callback_;
};

AppServiceInternalsPageHandlerProxy::AppServiceInternalsPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AppServiceInternalsPageHandlerProxy::GetApps(
    GetAppsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send mojom::app_service_internals::AppServiceInternalsPageHandler::GetApps");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppServiceInternalsPageHandler_GetApps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::app_service_internals::internal::AppServiceInternalsPageHandler_GetApps_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppServiceInternalsPageHandler::Name_);
  message.set_method_name("GetApps");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AppServiceInternalsPageHandler_GetApps_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void AppServiceInternalsPageHandlerProxy::GetPreferredApps(
    GetPreferredAppsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send mojom::app_service_internals::AppServiceInternalsPageHandler::GetPreferredApps");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::app_service_internals::internal::AppServiceInternalsPageHandler_GetPreferredApps_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppServiceInternalsPageHandler::Name_);
  message.set_method_name("GetPreferredApps");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class AppServiceInternalsPageHandler_GetApps_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AppServiceInternalsPageHandler::GetAppsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AppServiceInternalsPageHandler_GetApps_ProxyToResponder> proxy(
        new AppServiceInternalsPageHandler_GetApps_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AppServiceInternalsPageHandler_GetApps_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AppServiceInternalsPageHandler_GetApps_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AppServiceInternalsPageHandler_GetApps_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AppServiceInternalsPageHandler::GetAppsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<AppInfoPtr> in_app_list);
};

bool AppServiceInternalsPageHandler_GetApps_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AppServiceInternalsPageHandler_GetApps_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AppServiceInternalsPageHandler_GetApps_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<AppInfoPtr> p_app_list{};
  AppServiceInternalsPageHandler_GetApps_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadAppList(&p_app_list))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AppServiceInternalsPageHandler::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_app_list));
  return true;
}

void AppServiceInternalsPageHandler_GetApps_ProxyToResponder::Run(
    std::vector<AppInfoPtr> in_app_list) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply mojom::app_service_internals::AppServiceInternalsPageHandler::GetApps", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("app_list"), in_app_list,
                        "<value of type std::vector<AppInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppServiceInternalsPageHandler_GetApps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::app_service_internals::internal::AppServiceInternalsPageHandler_GetApps_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->app_list)::BaseType>
      app_list_fragment(params.message());
  const mojo::internal::ContainerValidateParams app_list_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::mojom::app_service_internals::AppInfoDataView>>(
      in_app_list, app_list_fragment, &app_list_validate_params);
  params->app_list.Set(
      app_list_fragment.is_null() ? nullptr : app_list_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->app_list.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null app_list in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppServiceInternalsPageHandler::Name_);
  message.set_method_name("GetApps");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static AppServiceInternalsPageHandler::GetPreferredAppsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder> proxy(
        new AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "AppServiceInternalsPageHandler::GetPreferredAppsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<PreferredAppInfoPtr> in_preferred_app_list_);
};

bool AppServiceInternalsPageHandler_GetPreferredApps_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data* params =
      reinterpret_cast<
          internal::AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<PreferredAppInfoPtr> p_preferred_app_list_{};
  AppServiceInternalsPageHandler_GetPreferredApps_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadPreferredAppList(&p_preferred_app_list_))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        AppServiceInternalsPageHandler::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_preferred_app_list_));
  return true;
}

void AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder::Run(
    std::vector<PreferredAppInfoPtr> in_preferred_app_list_) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply mojom::app_service_internals::AppServiceInternalsPageHandler::GetPreferredApps", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("preferred_app_list_"), in_preferred_app_list_,
                        "<value of type std::vector<PreferredAppInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::app_service_internals::internal::AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->preferred_app_list_)::BaseType>
      preferred_app_list__fragment(params.message());
  const mojo::internal::ContainerValidateParams preferred_app_list__validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::mojom::app_service_internals::PreferredAppInfoDataView>>(
      in_preferred_app_list_, preferred_app_list__fragment, &preferred_app_list__validate_params);
  params->preferred_app_list_.Set(
      preferred_app_list__fragment.is_null() ? nullptr : preferred_app_list__fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->preferred_app_list_.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null preferred_app_list_ in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AppServiceInternalsPageHandler::Name_);
  message.set_method_name("GetPreferredApps");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool AppServiceInternalsPageHandlerStubDispatch::Accept(
    AppServiceInternalsPageHandler* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAppServiceInternalsPageHandler_GetApps_Name: {
      break;
    }
    case internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name: {
      break;
    }
  }
  return false;
}

// static
bool AppServiceInternalsPageHandlerStubDispatch::AcceptWithResponder(
    AppServiceInternalsPageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAppServiceInternalsPageHandler_GetApps_Name: {

      internal::AppServiceInternalsPageHandler_GetApps_Params_Data* params =
          reinterpret_cast<
              internal::AppServiceInternalsPageHandler_GetApps_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      AppServiceInternalsPageHandler_GetApps_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppServiceInternalsPageHandler::Name_, 0, false);
        return false;
      }
      AppServiceInternalsPageHandler::GetAppsCallback callback =
          AppServiceInternalsPageHandler_GetApps_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetApps(std::move(callback));
      return true;
    }
    case internal::kAppServiceInternalsPageHandler_GetPreferredApps_Name: {

      internal::AppServiceInternalsPageHandler_GetPreferredApps_Params_Data* params =
          reinterpret_cast<
              internal::AppServiceInternalsPageHandler_GetPreferredApps_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      AppServiceInternalsPageHandler_GetPreferredApps_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AppServiceInternalsPageHandler::Name_, 1, false);
        return false;
      }
      AppServiceInternalsPageHandler::GetPreferredAppsCallback callback =
          AppServiceInternalsPageHandler_GetPreferredApps_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetPreferredApps(std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAppServiceInternalsPageHandlerValidationInfo[] = {
    {&internal::AppServiceInternalsPageHandler_GetApps_Params_Data::Validate,
     &internal::AppServiceInternalsPageHandler_GetApps_ResponseParams_Data::Validate},
    {&internal::AppServiceInternalsPageHandler_GetPreferredApps_Params_Data::Validate,
     &internal::AppServiceInternalsPageHandler_GetPreferredApps_ResponseParams_Data::Validate},
};

bool AppServiceInternalsPageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::app_service_internals::AppServiceInternalsPageHandler::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAppServiceInternalsPageHandlerValidationInfo);
}

bool AppServiceInternalsPageHandlerResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::app_service_internals::AppServiceInternalsPageHandler::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kAppServiceInternalsPageHandlerValidationInfo);
}


}  // namespace app_service_internals
}  // namespace mojom


namespace mojo {


// static
bool StructTraits<::mojom::app_service_internals::AppInfo::DataView, ::mojom::app_service_internals::AppInfoPtr>::Read(
    ::mojom::app_service_internals::AppInfo::DataView input,
    ::mojom::app_service_internals::AppInfoPtr* output) {
  bool success = true;
  ::mojom::app_service_internals::AppInfoPtr result(::mojom::app_service_internals::AppInfo::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadDebugInfo(&result->debug_info))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::app_service_internals::PreferredAppInfo::DataView, ::mojom::app_service_internals::PreferredAppInfoPtr>::Read(
    ::mojom::app_service_internals::PreferredAppInfo::DataView input,
    ::mojom::app_service_internals::PreferredAppInfoPtr* output) {
  bool success = true;
  ::mojom::app_service_internals::PreferredAppInfoPtr result(::mojom::app_service_internals::PreferredAppInfo::New());
  
      if (success && !input.ReadId(&result->id))
        success = false;
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadPreferredFilters(&result->preferred_filters))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace mojom {
namespace app_service_internals {


void AppServiceInternalsPageHandlerInterceptorForTesting::GetApps(GetAppsCallback callback) {
  GetForwardingInterface()->GetApps(std::move(callback));
}
void AppServiceInternalsPageHandlerInterceptorForTesting::GetPreferredApps(GetPreferredAppsCallback callback) {
  GetForwardingInterface()->GetPreferredApps(std::move(callback));
}
AppServiceInternalsPageHandlerAsyncWaiter::AppServiceInternalsPageHandlerAsyncWaiter(
    AppServiceInternalsPageHandler* proxy) : proxy_(proxy) {}

AppServiceInternalsPageHandlerAsyncWaiter::~AppServiceInternalsPageHandlerAsyncWaiter() = default;

void AppServiceInternalsPageHandlerAsyncWaiter::GetApps(
    std::vector<AppInfoPtr>* out_app_list) {
  base::RunLoop loop;
  proxy_->GetApps(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<AppInfoPtr>* out_app_list
,
             std::vector<AppInfoPtr> app_list) {*out_app_list = std::move(app_list);
            loop->Quit();
          },
          &loop,
          out_app_list));
  loop.Run();
}
void AppServiceInternalsPageHandlerAsyncWaiter::GetPreferredApps(
    std::vector<PreferredAppInfoPtr>* out_preferred_app_list_) {
  base::RunLoop loop;
  proxy_->GetPreferredApps(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<PreferredAppInfoPtr>* out_preferred_app_list_
,
             std::vector<PreferredAppInfoPtr> preferred_app_list_) {*out_preferred_app_list_ = std::move(preferred_app_list_);
            loop->Quit();
          },
          &loop,
          out_preferred_app_list_));
  loop.Run();
}





}  // namespace app_service_internals
}  // namespace mojom


#if defined(__clang__)
#pragma clang diagnostic pop
#endif