// chrome/browser/ui/webui/omnibox/omnibox.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-params-data.h"
#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-shared-message-ids.h"

#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-import-headers.h"
#include "chrome/browser/ui/webui/omnibox/omnibox.mojom-test-utils.h"


#ifndef CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_JUMBO_H_
#define CHROME_BROWSER_UI_WEBUI_OMNIBOX_OMNIBOX_MOJOM_JUMBO_H_
#endif



namespace mojom {
ACMatchClassification::ACMatchClassification()
    : offset(),
      style() {}

ACMatchClassification::ACMatchClassification(
    int32_t offset_in,
    int32_t style_in)
    : offset(std::move(offset_in)),
      style(std::move(style_in)) {}

ACMatchClassification::~ACMatchClassification() = default;
size_t ACMatchClassification::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->offset);
  seed = mojo::internal::Hash(seed, this->style);
  return seed;
}

void ACMatchClassification::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "offset"), this->offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "style"), this->style,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ACMatchClassification::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AutocompleteAdditionalInfo::AutocompleteAdditionalInfo()
    : key(),
      value() {}

AutocompleteAdditionalInfo::AutocompleteAdditionalInfo(
    const std::string& key_in,
    const std::string& value_in)
    : key(std::move(key_in)),
      value(std::move(value_in)) {}

AutocompleteAdditionalInfo::~AutocompleteAdditionalInfo() = default;
size_t AutocompleteAdditionalInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->key);
  seed = mojo::internal::Hash(seed, this->value);
  return seed;
}

void AutocompleteAdditionalInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "key"), this->key,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AutocompleteAdditionalInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AutocompleteMatch::AutocompleteMatch()
    : provider_name(),
      provider_done(),
      relevance(),
      deletable(),
      fill_into_edit(),
      inline_autocompletion(),
      destination_url(),
      stripped_destination_url(),
      image(),
      contents(),
      contents_class(),
      description(),
      description_class(),
      swap_contents_and_description(),
      answer(),
      transition(),
      allowed_to_be_default_match(),
      type(),
      is_search_type(),
      aqs_type_subtypes(),
      has_tab_match(),
      associated_keyword(),
      keyword(),
      starred(),
      duplicates(),
      from_previous(),
      pedal_id(),
      additional_info() {}

AutocompleteMatch::AutocompleteMatch(
    const absl::optional<std::string>& provider_name_in,
    bool provider_done_in,
    int32_t relevance_in,
    bool deletable_in,
    const std::string& fill_into_edit_in,
    const std::string& inline_autocompletion_in,
    const std::string& destination_url_in,
    const std::string& stripped_destination_url_in,
    const std::string& image_in,
    const std::string& contents_in,
    std::vector<ACMatchClassificationPtr> contents_class_in,
    const std::string& description_in,
    std::vector<ACMatchClassificationPtr> description_class_in,
    bool swap_contents_and_description_in,
    const std::string& answer_in,
    const std::string& transition_in,
    bool allowed_to_be_default_match_in,
    const std::string& type_in,
    bool is_search_type_in,
    const std::string& aqs_type_subtypes_in,
    bool has_tab_match_in,
    const absl::optional<std::string>& associated_keyword_in,
    const std::string& keyword_in,
    bool starred_in,
    int32_t duplicates_in,
    bool from_previous_in,
    int32_t pedal_id_in,
    std::vector<AutocompleteAdditionalInfoPtr> additional_info_in)
    : provider_name(std::move(provider_name_in)),
      provider_done(std::move(provider_done_in)),
      relevance(std::move(relevance_in)),
      deletable(std::move(deletable_in)),
      fill_into_edit(std::move(fill_into_edit_in)),
      inline_autocompletion(std::move(inline_autocompletion_in)),
      destination_url(std::move(destination_url_in)),
      stripped_destination_url(std::move(stripped_destination_url_in)),
      image(std::move(image_in)),
      contents(std::move(contents_in)),
      contents_class(std::move(contents_class_in)),
      description(std::move(description_in)),
      description_class(std::move(description_class_in)),
      swap_contents_and_description(std::move(swap_contents_and_description_in)),
      answer(std::move(answer_in)),
      transition(std::move(transition_in)),
      allowed_to_be_default_match(std::move(allowed_to_be_default_match_in)),
      type(std::move(type_in)),
      is_search_type(std::move(is_search_type_in)),
      aqs_type_subtypes(std::move(aqs_type_subtypes_in)),
      has_tab_match(std::move(has_tab_match_in)),
      associated_keyword(std::move(associated_keyword_in)),
      keyword(std::move(keyword_in)),
      starred(std::move(starred_in)),
      duplicates(std::move(duplicates_in)),
      from_previous(std::move(from_previous_in)),
      pedal_id(std::move(pedal_id_in)),
      additional_info(std::move(additional_info_in)) {}

AutocompleteMatch::~AutocompleteMatch() = default;

void AutocompleteMatch::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "provider_name"), this->provider_name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "provider_done"), this->provider_done,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "relevance"), this->relevance,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "deletable"), this->deletable,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "fill_into_edit"), this->fill_into_edit,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "inline_autocompletion"), this->inline_autocompletion,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "destination_url"), this->destination_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stripped_destination_url"), this->stripped_destination_url,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image"), this->image,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "contents"), this->contents,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "contents_class"), this->contents_class,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<ACMatchClassificationPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "description"), this->description,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "description_class"), this->description_class,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<ACMatchClassificationPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "swap_contents_and_description"), this->swap_contents_and_description,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "answer"), this->answer,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "transition"), this->transition,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "allowed_to_be_default_match"), this->allowed_to_be_default_match,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_search_type"), this->is_search_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "aqs_type_subtypes"), this->aqs_type_subtypes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_tab_match"), this->has_tab_match,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "associated_keyword"), this->associated_keyword,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::string>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "keyword"), this->keyword,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "starred"), this->starred,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "duplicates"), this->duplicates,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "from_previous"), this->from_previous,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "pedal_id"), this->pedal_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "additional_info"), this->additional_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<AutocompleteAdditionalInfoPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AutocompleteMatch::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
AutocompleteResultsForProvider::AutocompleteResultsForProvider()
    : provider_name(),
      results() {}

AutocompleteResultsForProvider::AutocompleteResultsForProvider(
    const std::string& provider_name_in,
    std::vector<AutocompleteMatchPtr> results_in)
    : provider_name(std::move(provider_name_in)),
      results(std::move(results_in)) {}

AutocompleteResultsForProvider::~AutocompleteResultsForProvider() = default;

void AutocompleteResultsForProvider::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "provider_name"), this->provider_name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "results"), this->results,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<AutocompleteMatchPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AutocompleteResultsForProvider::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
OmniboxResponse::OmniboxResponse()
    : cursor_position(),
      time_since_omnibox_started_ms(),
      done(),
      type(),
      host(),
      is_typed_host(),
      input_text(),
      combined_results(),
      results_by_provider() {}

OmniboxResponse::OmniboxResponse(
    int32_t cursor_position_in,
    int32_t time_since_omnibox_started_ms_in,
    bool done_in,
    const std::string& type_in,
    const std::string& host_in,
    bool is_typed_host_in,
    const std::string& input_text_in,
    std::vector<AutocompleteMatchPtr> combined_results_in,
    std::vector<AutocompleteResultsForProviderPtr> results_by_provider_in)
    : cursor_position(std::move(cursor_position_in)),
      time_since_omnibox_started_ms(std::move(time_since_omnibox_started_ms_in)),
      done(std::move(done_in)),
      type(std::move(type_in)),
      host(std::move(host_in)),
      is_typed_host(std::move(is_typed_host_in)),
      input_text(std::move(input_text_in)),
      combined_results(std::move(combined_results_in)),
      results_by_provider(std::move(results_by_provider_in)) {}

OmniboxResponse::~OmniboxResponse() = default;

void OmniboxResponse::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "cursor_position"), this->cursor_position,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "time_since_omnibox_started_ms"), this->time_since_omnibox_started_ms,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "done"), this->done,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "host"), this->host,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_typed_host"), this->is_typed_host,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "input_text"), this->input_text,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "combined_results"), this->combined_results,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<AutocompleteMatchPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "results_by_provider"), this->results_by_provider,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<AutocompleteResultsForProviderPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool OmniboxResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char OmniboxPageHandler::Name_[] = "mojom.OmniboxPageHandler";

OmniboxPageHandler::IPCStableHashFunction OmniboxPageHandler::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kOmniboxPageHandler_SetClientPage_Name: {
      return &OmniboxPageHandler::SetClientPage_Sym::IPCStableHash;
    }
    case internal::kOmniboxPageHandler_StartOmniboxQuery_Name: {
      return &OmniboxPageHandler::StartOmniboxQuery_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* OmniboxPageHandler::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kOmniboxPageHandler_SetClientPage_Name:
            return "Receive mojom::OmniboxPageHandler::SetClientPage";
      case internal::kOmniboxPageHandler_StartOmniboxQuery_Name:
            return "Receive mojom::OmniboxPageHandler::StartOmniboxQuery";
    }
  } else {
    switch (message.name()) {
      case internal::kOmniboxPageHandler_SetClientPage_Name:
            return "Receive reply mojom::OmniboxPageHandler::SetClientPage";
      case internal::kOmniboxPageHandler_StartOmniboxQuery_Name:
            return "Receive reply mojom::OmniboxPageHandler::StartOmniboxQuery";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t OmniboxPageHandler::SetClientPage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::OmniboxPageHandler::SetClientPage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t OmniboxPageHandler::StartOmniboxQuery_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::OmniboxPageHandler::StartOmniboxQuery");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

OmniboxPageHandlerProxy::OmniboxPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void OmniboxPageHandlerProxy::SetClientPage(
    ::mojo::PendingRemote<OmniboxPage> in_page) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::OmniboxPageHandler::SetClientPage", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("page"), in_page,
                        "<value of type ::mojo::PendingRemote<OmniboxPage>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kOmniboxPageHandler_SetClientPage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::internal::OmniboxPageHandler_SetClientPage_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::mojom::OmniboxPageInterfaceBase>>(
      in_page, &params->page, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->page),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid page in OmniboxPageHandler.SetClientPage request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPageHandler::Name_);
  message.set_method_name("SetClientPage");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void OmniboxPageHandlerProxy::StartOmniboxQuery(
    const std::string& in_input_string, bool in_reset_autocomplete_controller, int32_t in_cursor_position, bool in_zero_suggest, bool in_prevent_inline_autocomplete, bool in_prefer_keyword, const std::string& in_current_url, int32_t in_page_classification) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::OmniboxPageHandler::StartOmniboxQuery", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("input_string"), in_input_string,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("reset_autocomplete_controller"), in_reset_autocomplete_controller,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cursor_position"), in_cursor_position,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("zero_suggest"), in_zero_suggest,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("prevent_inline_autocomplete"), in_prevent_inline_autocomplete,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("prefer_keyword"), in_prefer_keyword,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("current_url"), in_current_url,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("page_classification"), in_page_classification,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kOmniboxPageHandler_StartOmniboxQuery_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->input_string)::BaseType> input_string_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_input_string, input_string_fragment);
  params->input_string.Set(
      input_string_fragment.is_null() ? nullptr : input_string_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->input_string.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null input_string in OmniboxPageHandler.StartOmniboxQuery request");
  params->reset_autocomplete_controller = in_reset_autocomplete_controller;
  params->cursor_position = in_cursor_position;
  params->zero_suggest = in_zero_suggest;
  params->prevent_inline_autocomplete = in_prevent_inline_autocomplete;
  params->prefer_keyword = in_prefer_keyword;
  mojo::internal::MessageFragment<
      typename decltype(params->current_url)::BaseType> current_url_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_current_url, current_url_fragment);
  params->current_url.Set(
      current_url_fragment.is_null() ? nullptr : current_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->current_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null current_url in OmniboxPageHandler.StartOmniboxQuery request");
  params->page_classification = in_page_classification;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPageHandler::Name_);
  message.set_method_name("StartOmniboxQuery");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool OmniboxPageHandlerStubDispatch::Accept(
    OmniboxPageHandler* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kOmniboxPageHandler_SetClientPage_Name: {

      DCHECK(message->is_serialized());
      internal::OmniboxPageHandler_SetClientPage_Params_Data* params =
          reinterpret_cast<internal::OmniboxPageHandler_SetClientPage_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<OmniboxPage> p_page{};
      OmniboxPageHandler_SetClientPage_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_page =
            input_data_view.TakePage<decltype(p_page)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPageHandler::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetClientPage(
std::move(p_page));
      return true;
    }
    case internal::kOmniboxPageHandler_StartOmniboxQuery_Name: {

      DCHECK(message->is_serialized());
      internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data* params =
          reinterpret_cast<internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_input_string{};
      bool p_reset_autocomplete_controller{};
      int32_t p_cursor_position{};
      bool p_zero_suggest{};
      bool p_prevent_inline_autocomplete{};
      bool p_prefer_keyword{};
      std::string p_current_url{};
      int32_t p_page_classification{};
      OmniboxPageHandler_StartOmniboxQuery_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadInputString(&p_input_string))
        success = false;
      if (success)
        p_reset_autocomplete_controller = input_data_view.reset_autocomplete_controller();
      if (success)
        p_cursor_position = input_data_view.cursor_position();
      if (success)
        p_zero_suggest = input_data_view.zero_suggest();
      if (success)
        p_prevent_inline_autocomplete = input_data_view.prevent_inline_autocomplete();
      if (success)
        p_prefer_keyword = input_data_view.prefer_keyword();
      if (success && !input_data_view.ReadCurrentUrl(&p_current_url))
        success = false;
      if (success)
        p_page_classification = input_data_view.page_classification();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPageHandler::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartOmniboxQuery(
std::move(p_input_string), 
std::move(p_reset_autocomplete_controller), 
std::move(p_cursor_position), 
std::move(p_zero_suggest), 
std::move(p_prevent_inline_autocomplete), 
std::move(p_prefer_keyword), 
std::move(p_current_url), 
std::move(p_page_classification));
      return true;
    }
  }
  return false;
}

// static
bool OmniboxPageHandlerStubDispatch::AcceptWithResponder(
    OmniboxPageHandler* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kOmniboxPageHandler_SetClientPage_Name: {
      break;
    }
    case internal::kOmniboxPageHandler_StartOmniboxQuery_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kOmniboxPageHandlerValidationInfo[] = {
    {&internal::OmniboxPageHandler_SetClientPage_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::OmniboxPageHandler_StartOmniboxQuery_Params_Data::Validate,
     nullptr /* no response */},
};

bool OmniboxPageHandlerRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::OmniboxPageHandler::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kOmniboxPageHandlerValidationInfo);
}

const char OmniboxPage::Name_[] = "mojom.OmniboxPage";

OmniboxPage::IPCStableHashFunction OmniboxPage::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name: {
      return &OmniboxPage::HandleNewAutocompleteResponse_Sym::IPCStableHash;
    }
    case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name: {
      return &OmniboxPage::HandleNewAutocompleteQuery_Sym::IPCStableHash;
    }
    case internal::kOmniboxPage_HandleAnswerImageData_Name: {
      return &OmniboxPage::HandleAnswerImageData_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* OmniboxPage::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name:
            return "Receive mojom::OmniboxPage::HandleNewAutocompleteResponse";
      case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name:
            return "Receive mojom::OmniboxPage::HandleNewAutocompleteQuery";
      case internal::kOmniboxPage_HandleAnswerImageData_Name:
            return "Receive mojom::OmniboxPage::HandleAnswerImageData";
    }
  } else {
    switch (message.name()) {
      case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name:
            return "Receive reply mojom::OmniboxPage::HandleNewAutocompleteResponse";
      case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name:
            return "Receive reply mojom::OmniboxPage::HandleNewAutocompleteQuery";
      case internal::kOmniboxPage_HandleAnswerImageData_Name:
            return "Receive reply mojom::OmniboxPage::HandleAnswerImageData";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t OmniboxPage::HandleNewAutocompleteResponse_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::OmniboxPage::HandleNewAutocompleteResponse");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t OmniboxPage::HandleNewAutocompleteQuery_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::OmniboxPage::HandleNewAutocompleteQuery");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t OmniboxPage::HandleAnswerImageData_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)mojom::OmniboxPage::HandleAnswerImageData");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

OmniboxPageProxy::OmniboxPageProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void OmniboxPageProxy::HandleNewAutocompleteResponse(
    OmniboxResponsePtr in_response, bool in_is_page_controller) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::OmniboxPage::HandleNewAutocompleteResponse", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("response"), in_response,
                        "<value of type OmniboxResponsePtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_page_controller"), in_is_page_controller,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kOmniboxPage_HandleNewAutocompleteResponse_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->response)::BaseType> response_fragment(
          params.message());
  mojo::internal::Serialize<::mojom::OmniboxResponseDataView>(
      in_response, response_fragment);
  params->response.Set(
      response_fragment.is_null() ? nullptr : response_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->response.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null response in OmniboxPage.HandleNewAutocompleteResponse request");
  params->is_page_controller = in_is_page_controller;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPage::Name_);
  message.set_method_name("HandleNewAutocompleteResponse");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void OmniboxPageProxy::HandleNewAutocompleteQuery(
    bool in_is_page_controller, const std::string& in_input_text) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::OmniboxPage::HandleNewAutocompleteQuery", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_page_controller"), in_is_page_controller,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("input_text"), in_input_text,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kOmniboxPage_HandleNewAutocompleteQuery_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data> params(
          message);
  params.Allocate();
  params->is_page_controller = in_is_page_controller;
  mojo::internal::MessageFragment<
      typename decltype(params->input_text)::BaseType> input_text_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_input_text, input_text_fragment);
  params->input_text.Set(
      input_text_fragment.is_null() ? nullptr : input_text_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->input_text.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null input_text in OmniboxPage.HandleNewAutocompleteQuery request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPage::Name_);
  message.set_method_name("HandleNewAutocompleteQuery");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void OmniboxPageProxy::HandleAnswerImageData(
    const std::string& in_image_url, const std::string& in_image_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send mojom::OmniboxPage::HandleAnswerImageData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image_url"), in_image_url,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("image_data"), in_image_data,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kOmniboxPage_HandleAnswerImageData_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::mojom::internal::OmniboxPage_HandleAnswerImageData_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->image_url)::BaseType> image_url_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_image_url, image_url_fragment);
  params->image_url.Set(
      image_url_fragment.is_null() ? nullptr : image_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image_url in OmniboxPage.HandleAnswerImageData request");
  mojo::internal::MessageFragment<
      typename decltype(params->image_data)::BaseType> image_data_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_image_data, image_data_fragment);
  params->image_data.Set(
      image_data_fragment.is_null() ? nullptr : image_data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->image_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null image_data in OmniboxPage.HandleAnswerImageData request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(OmniboxPage::Name_);
  message.set_method_name("HandleAnswerImageData");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool OmniboxPageStubDispatch::Accept(
    OmniboxPage* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name: {

      DCHECK(message->is_serialized());
      internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data* params =
          reinterpret_cast<internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      OmniboxResponsePtr p_response{};
      bool p_is_page_controller{};
      OmniboxPage_HandleNewAutocompleteResponse_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadResponse(&p_response))
        success = false;
      if (success)
        p_is_page_controller = input_data_view.is_page_controller();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPage::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleNewAutocompleteResponse(
std::move(p_response), 
std::move(p_is_page_controller));
      return true;
    }
    case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name: {

      DCHECK(message->is_serialized());
      internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data* params =
          reinterpret_cast<internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_page_controller{};
      std::string p_input_text{};
      OmniboxPage_HandleNewAutocompleteQuery_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_page_controller = input_data_view.is_page_controller();
      if (success && !input_data_view.ReadInputText(&p_input_text))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPage::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleNewAutocompleteQuery(
std::move(p_is_page_controller), 
std::move(p_input_text));
      return true;
    }
    case internal::kOmniboxPage_HandleAnswerImageData_Name: {

      DCHECK(message->is_serialized());
      internal::OmniboxPage_HandleAnswerImageData_Params_Data* params =
          reinterpret_cast<internal::OmniboxPage_HandleAnswerImageData_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_image_url{};
      std::string p_image_data{};
      OmniboxPage_HandleAnswerImageData_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadImageUrl(&p_image_url))
        success = false;
      if (success && !input_data_view.ReadImageData(&p_image_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            OmniboxPage::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->HandleAnswerImageData(
std::move(p_image_url), 
std::move(p_image_data));
      return true;
    }
  }
  return false;
}

// static
bool OmniboxPageStubDispatch::AcceptWithResponder(
    OmniboxPage* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kOmniboxPage_HandleNewAutocompleteResponse_Name: {
      break;
    }
    case internal::kOmniboxPage_HandleNewAutocompleteQuery_Name: {
      break;
    }
    case internal::kOmniboxPage_HandleAnswerImageData_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kOmniboxPageValidationInfo[] = {
    {&internal::OmniboxPage_HandleNewAutocompleteResponse_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::OmniboxPage_HandleNewAutocompleteQuery_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::OmniboxPage_HandleAnswerImageData_Params_Data::Validate,
     nullptr /* no response */},
};

bool OmniboxPageRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::mojom::OmniboxPage::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kOmniboxPageValidationInfo);
}



}  // namespace mojom


namespace mojo {


// static
bool StructTraits<::mojom::ACMatchClassification::DataView, ::mojom::ACMatchClassificationPtr>::Read(
    ::mojom::ACMatchClassification::DataView input,
    ::mojom::ACMatchClassificationPtr* output) {
  bool success = true;
  ::mojom::ACMatchClassificationPtr result(::mojom::ACMatchClassification::New());
  
      if (success)
        result->offset = input.offset();
      if (success)
        result->style = input.style();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::AutocompleteAdditionalInfo::DataView, ::mojom::AutocompleteAdditionalInfoPtr>::Read(
    ::mojom::AutocompleteAdditionalInfo::DataView input,
    ::mojom::AutocompleteAdditionalInfoPtr* output) {
  bool success = true;
  ::mojom::AutocompleteAdditionalInfoPtr result(::mojom::AutocompleteAdditionalInfo::New());
  
      if (success && !input.ReadKey(&result->key))
        success = false;
      if (success && !input.ReadValue(&result->value))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::AutocompleteMatch::DataView, ::mojom::AutocompleteMatchPtr>::Read(
    ::mojom::AutocompleteMatch::DataView input,
    ::mojom::AutocompleteMatchPtr* output) {
  bool success = true;
  ::mojom::AutocompleteMatchPtr result(::mojom::AutocompleteMatch::New());
  
      if (success && !input.ReadProviderName(&result->provider_name))
        success = false;
      if (success)
        result->provider_done = input.provider_done();
      if (success)
        result->relevance = input.relevance();
      if (success)
        result->deletable = input.deletable();
      if (success && !input.ReadFillIntoEdit(&result->fill_into_edit))
        success = false;
      if (success && !input.ReadInlineAutocompletion(&result->inline_autocompletion))
        success = false;
      if (success && !input.ReadDestinationUrl(&result->destination_url))
        success = false;
      if (success && !input.ReadStrippedDestinationUrl(&result->stripped_destination_url))
        success = false;
      if (success && !input.ReadImage(&result->image))
        success = false;
      if (success && !input.ReadContents(&result->contents))
        success = false;
      if (success && !input.ReadContentsClass(&result->contents_class))
        success = false;
      if (success && !input.ReadDescription(&result->description))
        success = false;
      if (success && !input.ReadDescriptionClass(&result->description_class))
        success = false;
      if (success)
        result->swap_contents_and_description = input.swap_contents_and_description();
      if (success && !input.ReadAnswer(&result->answer))
        success = false;
      if (success && !input.ReadTransition(&result->transition))
        success = false;
      if (success)
        result->allowed_to_be_default_match = input.allowed_to_be_default_match();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->is_search_type = input.is_search_type();
      if (success && !input.ReadAqsTypeSubtypes(&result->aqs_type_subtypes))
        success = false;
      if (success)
        result->has_tab_match = input.has_tab_match();
      if (success && !input.ReadAssociatedKeyword(&result->associated_keyword))
        success = false;
      if (success && !input.ReadKeyword(&result->keyword))
        success = false;
      if (success)
        result->starred = input.starred();
      if (success)
        result->duplicates = input.duplicates();
      if (success)
        result->from_previous = input.from_previous();
      if (success)
        result->pedal_id = input.pedal_id();
      if (success && !input.ReadAdditionalInfo(&result->additional_info))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::AutocompleteResultsForProvider::DataView, ::mojom::AutocompleteResultsForProviderPtr>::Read(
    ::mojom::AutocompleteResultsForProvider::DataView input,
    ::mojom::AutocompleteResultsForProviderPtr* output) {
  bool success = true;
  ::mojom::AutocompleteResultsForProviderPtr result(::mojom::AutocompleteResultsForProvider::New());
  
      if (success && !input.ReadProviderName(&result->provider_name))
        success = false;
      if (success && !input.ReadResults(&result->results))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::mojom::OmniboxResponse::DataView, ::mojom::OmniboxResponsePtr>::Read(
    ::mojom::OmniboxResponse::DataView input,
    ::mojom::OmniboxResponsePtr* output) {
  bool success = true;
  ::mojom::OmniboxResponsePtr result(::mojom::OmniboxResponse::New());
  
      if (success)
        result->cursor_position = input.cursor_position();
      if (success)
        result->time_since_omnibox_started_ms = input.time_since_omnibox_started_ms();
      if (success)
        result->done = input.done();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success && !input.ReadHost(&result->host))
        success = false;
      if (success)
        result->is_typed_host = input.is_typed_host();
      if (success && !input.ReadInputText(&result->input_text))
        success = false;
      if (success && !input.ReadCombinedResults(&result->combined_results))
        success = false;
      if (success && !input.ReadResultsByProvider(&result->results_by_provider))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace mojom {


void OmniboxPageHandlerInterceptorForTesting::SetClientPage(::mojo::PendingRemote<OmniboxPage> page) {
  GetForwardingInterface()->SetClientPage(std::move(page));
}
void OmniboxPageHandlerInterceptorForTesting::StartOmniboxQuery(const std::string& input_string, bool reset_autocomplete_controller, int32_t cursor_position, bool zero_suggest, bool prevent_inline_autocomplete, bool prefer_keyword, const std::string& current_url, int32_t page_classification) {
  GetForwardingInterface()->StartOmniboxQuery(std::move(input_string), std::move(reset_autocomplete_controller), std::move(cursor_position), std::move(zero_suggest), std::move(prevent_inline_autocomplete), std::move(prefer_keyword), std::move(current_url), std::move(page_classification));
}
OmniboxPageHandlerAsyncWaiter::OmniboxPageHandlerAsyncWaiter(
    OmniboxPageHandler* proxy) : proxy_(proxy) {}

OmniboxPageHandlerAsyncWaiter::~OmniboxPageHandlerAsyncWaiter() = default;




void OmniboxPageInterceptorForTesting::HandleNewAutocompleteResponse(OmniboxResponsePtr response, bool is_page_controller) {
  GetForwardingInterface()->HandleNewAutocompleteResponse(std::move(response), std::move(is_page_controller));
}
void OmniboxPageInterceptorForTesting::HandleNewAutocompleteQuery(bool is_page_controller, const std::string& input_text) {
  GetForwardingInterface()->HandleNewAutocompleteQuery(std::move(is_page_controller), std::move(input_text));
}
void OmniboxPageInterceptorForTesting::HandleAnswerImageData(const std::string& image_url, const std::string& image_data) {
  GetForwardingInterface()->HandleAnswerImageData(std::move(image_url), std::move(image_data));
}
OmniboxPageAsyncWaiter::OmniboxPageAsyncWaiter(
    OmniboxPage* proxy) : proxy_(proxy) {}

OmniboxPageAsyncWaiter::~OmniboxPageAsyncWaiter() = default;






}  // namespace mojom


#if defined(__clang__)
#pragma clang diagnostic pop
#endif