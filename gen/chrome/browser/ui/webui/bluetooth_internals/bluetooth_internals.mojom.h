// chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_H_
#define CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-shared.h"
#include "chrome/browser/ui/webui/bluetooth_internals/bluetooth_internals.mojom-forward.h"
#include "device/bluetooth/public/mojom/adapter.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace mojom {

class DebugLogsChangeHandlerProxy;

template <typename ImplRefTraits>
class DebugLogsChangeHandlerStub;

class DebugLogsChangeHandlerRequestValidator;


class  DebugLogsChangeHandler
    : public DebugLogsChangeHandlerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DebugLogsChangeHandlerInterfaceBase;
  using Proxy_ = DebugLogsChangeHandlerProxy;

  template <typename ImplRefTraits>
  using Stub_ = DebugLogsChangeHandlerStub<ImplRefTraits>;

  using RequestValidator_ = DebugLogsChangeHandlerRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kChangeDebugLogsStateMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct ChangeDebugLogsState_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DebugLogsChangeHandler() = default;

  
  virtual void ChangeDebugLogsState(bool should_debug_logs_be_enabled) = 0;
};

class BluetoothInternalsHandlerProxy;

template <typename ImplRefTraits>
class BluetoothInternalsHandlerStub;

class BluetoothInternalsHandlerRequestValidator;
class BluetoothInternalsHandlerResponseValidator;


class  BluetoothInternalsHandler
    : public BluetoothInternalsHandlerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = BluetoothInternalsHandlerInterfaceBase;
  using Proxy_ = BluetoothInternalsHandlerProxy;

  template <typename ImplRefTraits>
  using Stub_ = BluetoothInternalsHandlerStub<ImplRefTraits>;

  using RequestValidator_ = BluetoothInternalsHandlerRequestValidator;
  using ResponseValidator_ = BluetoothInternalsHandlerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetAdapterMinVersion = 0,
    kGetDebugLogsChangeHandlerMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetAdapter_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetDebugLogsChangeHandler_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~BluetoothInternalsHandler() = default;


  using GetAdapterCallback = base::OnceCallback<void(::mojo::PendingRemote<::bluetooth::mojom::Adapter>)>;
  
  virtual void GetAdapter(GetAdapterCallback callback) = 0;


  using GetDebugLogsChangeHandlerCallback = base::OnceCallback<void(::mojo::PendingRemote<DebugLogsChangeHandler>, bool)>;
  
  virtual void GetDebugLogsChangeHandler(GetDebugLogsChangeHandlerCallback callback) = 0;
};



class  DebugLogsChangeHandlerProxy
    : public DebugLogsChangeHandler {
 public:
  using InterfaceType = DebugLogsChangeHandler;

  explicit DebugLogsChangeHandlerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void ChangeDebugLogsState(bool should_debug_logs_be_enabled) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  BluetoothInternalsHandlerProxy
    : public BluetoothInternalsHandler {
 public:
  using InterfaceType = BluetoothInternalsHandler;

  explicit BluetoothInternalsHandlerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetAdapter(GetAdapterCallback callback) final;
  
  void GetDebugLogsChangeHandler(GetDebugLogsChangeHandlerCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  DebugLogsChangeHandlerStubDispatch {
 public:
  static bool Accept(DebugLogsChangeHandler* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DebugLogsChangeHandler* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DebugLogsChangeHandler>>
class DebugLogsChangeHandlerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DebugLogsChangeHandlerStub() = default;
  ~DebugLogsChangeHandlerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DebugLogsChangeHandlerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DebugLogsChangeHandlerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  BluetoothInternalsHandlerStubDispatch {
 public:
  static bool Accept(BluetoothInternalsHandler* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      BluetoothInternalsHandler* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<BluetoothInternalsHandler>>
class BluetoothInternalsHandlerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  BluetoothInternalsHandlerStub() = default;
  ~BluetoothInternalsHandlerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BluetoothInternalsHandlerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return BluetoothInternalsHandlerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  DebugLogsChangeHandlerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  BluetoothInternalsHandlerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  BluetoothInternalsHandlerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom

namespace mojo {

}  // namespace mojo

#endif  // CHROME_BROWSER_UI_WEBUI_BLUETOOTH_INTERNALS_BLUETOOTH_INTERNALS_MOJOM_H_