// chrome/browser/ui/webui/explore_sites_internals/explore_sites_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_EXPLORE_SITES_INTERNALS_EXPLORE_SITES_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CHROME_BROWSER_UI_WEBUI_EXPLORE_SITES_INTERNALS_EXPLORE_SITES_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace explore_sites_internals {
namespace mojom {
namespace internal {

class ValidationContext;
class  PageHandler_GetProperties_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PageHandler_GetProperties_Params_Data>;

  PageHandler_GetProperties_Params_Data();
  ~PageHandler_GetProperties_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_GetProperties_Params_Data) == 8,
              "Bad sizeof(PageHandler_GetProperties_Params_Data)");
class  PageHandler_GetProperties_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<mojo::internal::String_Data>, mojo::internal::Pointer<mojo::internal::String_Data>>> properties;

 private:
  friend class mojo::internal::MessageFragment<PageHandler_GetProperties_ResponseParams_Data>;

  PageHandler_GetProperties_ResponseParams_Data();
  ~PageHandler_GetProperties_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_GetProperties_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_GetProperties_ResponseParams_Data)");
class  PageHandler_ClearCachedExploreSitesCatalog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PageHandler_ClearCachedExploreSitesCatalog_Params_Data>;

  PageHandler_ClearCachedExploreSitesCatalog_Params_Data();
  ~PageHandler_ClearCachedExploreSitesCatalog_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ClearCachedExploreSitesCatalog_Params_Data) == 8,
              "Bad sizeof(PageHandler_ClearCachedExploreSitesCatalog_Params_Data)");
class  PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data>;

  PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data();
  ~PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data)");
class  PageHandler_ForceNetworkRequest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PageHandler_ForceNetworkRequest_Params_Data>;

  PageHandler_ForceNetworkRequest_Params_Data();
  ~PageHandler_ForceNetworkRequest_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_ForceNetworkRequest_Params_Data) == 8,
              "Bad sizeof(PageHandler_ForceNetworkRequest_Params_Data)");
class  PageHandler_ForceNetworkRequest_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PageHandler_ForceNetworkRequest_ResponseParams_Data>;

  PageHandler_ForceNetworkRequest_ResponseParams_Data();
  ~PageHandler_ForceNetworkRequest_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_ForceNetworkRequest_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_ForceNetworkRequest_ResponseParams_Data)");
class  PageHandler_OverrideCountryCode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> country_code;

 private:
  friend class mojo::internal::MessageFragment<PageHandler_OverrideCountryCode_Params_Data>;

  PageHandler_OverrideCountryCode_Params_Data();
  ~PageHandler_OverrideCountryCode_Params_Data() = delete;
};
static_assert(sizeof(PageHandler_OverrideCountryCode_Params_Data) == 16,
              "Bad sizeof(PageHandler_OverrideCountryCode_Params_Data)");
class  PageHandler_OverrideCountryCode_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PageHandler_OverrideCountryCode_ResponseParams_Data>;

  PageHandler_OverrideCountryCode_ResponseParams_Data();
  ~PageHandler_OverrideCountryCode_ResponseParams_Data() = delete;
};
static_assert(sizeof(PageHandler_OverrideCountryCode_ResponseParams_Data) == 16,
              "Bad sizeof(PageHandler_OverrideCountryCode_ResponseParams_Data)");

}  // namespace internal


class PageHandler_GetProperties_ParamsDataView {
 public:
  PageHandler_GetProperties_ParamsDataView() = default;

  PageHandler_GetProperties_ParamsDataView(
      internal::PageHandler_GetProperties_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_GetProperties_Params_Data* data_ = nullptr;
};



class PageHandler_GetProperties_ResponseParamsDataView {
 public:
  PageHandler_GetProperties_ResponseParamsDataView() = default;

  PageHandler_GetProperties_ResponseParamsDataView(
      internal::PageHandler_GetProperties_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPropertiesDataView(
      mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProperties(UserType* output) {
    
    auto* pointer = data_->properties.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PageHandler_GetProperties_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageHandler_ClearCachedExploreSitesCatalog_ParamsDataView {
 public:
  PageHandler_ClearCachedExploreSitesCatalog_ParamsDataView() = default;

  PageHandler_ClearCachedExploreSitesCatalog_ParamsDataView(
      internal::PageHandler_ClearCachedExploreSitesCatalog_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ClearCachedExploreSitesCatalog_Params_Data* data_ = nullptr;
};



class PageHandler_ClearCachedExploreSitesCatalog_ResponseParamsDataView {
 public:
  PageHandler_ClearCachedExploreSitesCatalog_ResponseParamsDataView() = default;

  PageHandler_ClearCachedExploreSitesCatalog_ResponseParamsDataView(
      internal::PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PageHandler_ClearCachedExploreSitesCatalog_ResponseParams_Data* data_ = nullptr;
};



class PageHandler_ForceNetworkRequest_ParamsDataView {
 public:
  PageHandler_ForceNetworkRequest_ParamsDataView() = default;

  PageHandler_ForceNetworkRequest_ParamsDataView(
      internal::PageHandler_ForceNetworkRequest_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PageHandler_ForceNetworkRequest_Params_Data* data_ = nullptr;
};



class PageHandler_ForceNetworkRequest_ResponseParamsDataView {
 public:
  PageHandler_ForceNetworkRequest_ResponseParamsDataView() = default;

  PageHandler_ForceNetworkRequest_ResponseParamsDataView(
      internal::PageHandler_ForceNetworkRequest_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PageHandler_ForceNetworkRequest_ResponseParams_Data* data_ = nullptr;
};



class PageHandler_OverrideCountryCode_ParamsDataView {
 public:
  PageHandler_OverrideCountryCode_ParamsDataView() = default;

  PageHandler_OverrideCountryCode_ParamsDataView(
      internal::PageHandler_OverrideCountryCode_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCountryCodeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCountryCode(UserType* output) {
    
    auto* pointer = data_->country_code.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PageHandler_OverrideCountryCode_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PageHandler_OverrideCountryCode_ResponseParamsDataView {
 public:
  PageHandler_OverrideCountryCode_ResponseParamsDataView() = default;

  PageHandler_OverrideCountryCode_ResponseParamsDataView(
      internal::PageHandler_OverrideCountryCode_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PageHandler_OverrideCountryCode_ResponseParams_Data* data_ = nullptr;
};




inline void PageHandler_GetProperties_ResponseParamsDataView::GetPropertiesDataView(
    mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>* output) {
  auto pointer = data_->properties.Get();
  *output = mojo::MapDataView<mojo::StringDataView, mojo::StringDataView>(pointer, message_);
}










inline void PageHandler_OverrideCountryCode_ParamsDataView::GetCountryCodeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->country_code.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace explore_sites_internals

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_BROWSER_UI_WEBUI_EXPLORE_SITES_INTERNALS_EXPLORE_SITES_INTERNALS_MOJOM_PARAMS_DATA_H_