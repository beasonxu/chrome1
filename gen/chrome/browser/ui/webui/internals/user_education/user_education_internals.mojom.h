// chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_H_
#define CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-shared.h"
#include "chrome/browser/ui/webui/internals/user_education/user_education_internals.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace mojom {
namespace user_education_internals {

class UserEducationInternalsPageHandlerProxy;

template <typename ImplRefTraits>
class UserEducationInternalsPageHandlerStub;

class UserEducationInternalsPageHandlerRequestValidator;
class UserEducationInternalsPageHandlerResponseValidator;


class  UserEducationInternalsPageHandler
    : public UserEducationInternalsPageHandlerInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = UserEducationInternalsPageHandlerInterfaceBase;
  using Proxy_ = UserEducationInternalsPageHandlerProxy;

  template <typename ImplRefTraits>
  using Stub_ = UserEducationInternalsPageHandlerStub<ImplRefTraits>;

  using RequestValidator_ = UserEducationInternalsPageHandlerRequestValidator;
  using ResponseValidator_ = UserEducationInternalsPageHandlerResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGetTutorialsMinVersion = 0,
    kStartTutorialMinVersion = 0,
    kGetFeaturePromosMinVersion = 0,
    kShowFeaturePromoMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetTutorials_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StartTutorial_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetFeaturePromos_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ShowFeaturePromo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~UserEducationInternalsPageHandler() = default;


  using GetTutorialsCallback = base::OnceCallback<void(const std::vector<std::string>&)>;
  
  virtual void GetTutorials(GetTutorialsCallback callback) = 0;

  
  virtual void StartTutorial(const std::string& tutorial_id) = 0;


  using GetFeaturePromosCallback = base::OnceCallback<void(std::vector<FeaturePromoDemoPageInfoPtr>)>;
  
  virtual void GetFeaturePromos(GetFeaturePromosCallback callback) = 0;


  using ShowFeaturePromoCallback = base::OnceCallback<void(const std::string&)>;
  
  virtual void ShowFeaturePromo(const std::string& title, ShowFeaturePromoCallback callback) = 0;
};



class  UserEducationInternalsPageHandlerProxy
    : public UserEducationInternalsPageHandler {
 public:
  using InterfaceType = UserEducationInternalsPageHandler;

  explicit UserEducationInternalsPageHandlerProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetTutorials(GetTutorialsCallback callback) final;
  
  void StartTutorial(const std::string& tutorial_id) final;
  
  void GetFeaturePromos(GetFeaturePromosCallback callback) final;
  
  void ShowFeaturePromo(const std::string& title, ShowFeaturePromoCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  UserEducationInternalsPageHandlerStubDispatch {
 public:
  static bool Accept(UserEducationInternalsPageHandler* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      UserEducationInternalsPageHandler* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<UserEducationInternalsPageHandler>>
class UserEducationInternalsPageHandlerStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  UserEducationInternalsPageHandlerStub() = default;
  ~UserEducationInternalsPageHandlerStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return UserEducationInternalsPageHandlerStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return UserEducationInternalsPageHandlerStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  UserEducationInternalsPageHandlerRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  UserEducationInternalsPageHandlerResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class  FeaturePromoDemoPageInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<FeaturePromoDemoPageInfo, T>::value>;
  using DataView = FeaturePromoDemoPageInfoDataView;
  using Data_ = internal::FeaturePromoDemoPageInfo_Data;

  template <typename... Args>
  static FeaturePromoDemoPageInfoPtr New(Args&&... args) {
    return FeaturePromoDemoPageInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static FeaturePromoDemoPageInfoPtr From(const U& u) {
    return mojo::TypeConverter<FeaturePromoDemoPageInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, FeaturePromoDemoPageInfo>::Convert(*this);
  }


  FeaturePromoDemoPageInfo();

  FeaturePromoDemoPageInfo(
      const std::string& display_title,
      const std::string& display_description);


  ~FeaturePromoDemoPageInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = FeaturePromoDemoPageInfoPtr>
  FeaturePromoDemoPageInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        FeaturePromoDemoPageInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        FeaturePromoDemoPageInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::FeaturePromoDemoPageInfo_UnserializedMessageContext<
            UserType, FeaturePromoDemoPageInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<FeaturePromoDemoPageInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return FeaturePromoDemoPageInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::FeaturePromoDemoPageInfo_UnserializedMessageContext<
            UserType, FeaturePromoDemoPageInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<FeaturePromoDemoPageInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string display_title;
  
  std::string display_description;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}




template <typename StructPtrType>
FeaturePromoDemoPageInfoPtr FeaturePromoDemoPageInfo::Clone() const {
  return New(
      mojo::Clone(display_title),
      mojo::Clone(display_description)
  );
}

template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>*>
bool FeaturePromoDemoPageInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->display_title, other_struct.display_title))
    return false;
  if (!mojo::Equals(this->display_description, other_struct.display_description))
    return false;
  return true;
}

template <typename T, FeaturePromoDemoPageInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.display_title < rhs.display_title)
    return true;
  if (rhs.display_title < lhs.display_title)
    return false;
  if (lhs.display_description < rhs.display_description)
    return true;
  if (rhs.display_description < lhs.display_description)
    return false;
  return false;
}


}  // namespace user_education_internals
}  // namespace mojom

namespace mojo {


template <>
struct  StructTraits<::mojom::user_education_internals::FeaturePromoDemoPageInfo::DataView,
                                         ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr> {
  static bool IsNull(const ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr& input) { return !input; }
  static void SetToNull(::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr* output) { output->reset(); }

  static const decltype(::mojom::user_education_internals::FeaturePromoDemoPageInfo::display_title)& display_title(
      const ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr& input) {
    return input->display_title;
  }

  static const decltype(::mojom::user_education_internals::FeaturePromoDemoPageInfo::display_description)& display_description(
      const ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr& input) {
    return input->display_description;
  }

  static bool Read(::mojom::user_education_internals::FeaturePromoDemoPageInfo::DataView input, ::mojom::user_education_internals::FeaturePromoDemoPageInfoPtr* output);
};

}  // namespace mojo

#endif  // CHROME_BROWSER_UI_WEBUI_INTERNALS_USER_EDUCATION_USER_EDUCATION_INTERNALS_MOJOM_H_