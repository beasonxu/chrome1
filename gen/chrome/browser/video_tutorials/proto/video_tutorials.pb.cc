// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_tutorials.proto

#include "video_tutorials.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace video_tutorials {
namespace proto {
PROTOBUF_CONSTEXPR VideoTutorialGroup::VideoTutorialGroup(
    ::_pbi::ConstantInitialized)
  : tutorials_()
  , language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct VideoTutorialGroupDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoTutorialGroupDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoTutorialGroupDefaultTypeInternal() {}
  union {
    VideoTutorialGroup _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoTutorialGroupDefaultTypeInternal _VideoTutorialGroup_default_instance_;
PROTOBUF_CONSTEXPR VideoTutorial::VideoTutorial(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , video_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , share_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , poster_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , caption_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , animated_gif_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , thumbnail_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , video_length_(int64_t{0})
  , feature_(0)
{}
struct VideoTutorialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoTutorialDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoTutorialDefaultTypeInternal() {}
  union {
    VideoTutorial _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoTutorialDefaultTypeInternal _VideoTutorial_default_instance_;
PROTOBUF_CONSTEXPR VideoTutorialGroups::VideoTutorialGroups(
    ::_pbi::ConstantInitialized)
  : tutorial_groups_()
  , text_locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , preferred_locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct VideoTutorialGroupsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoTutorialGroupsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoTutorialGroupsDefaultTypeInternal() {}
  union {
    VideoTutorialGroups _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoTutorialGroupsDefaultTypeInternal _VideoTutorialGroups_default_instance_;
}  // namespace proto
}  // namespace video_tutorials
namespace video_tutorials {
namespace proto {
bool FeatureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 9999999:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FeatureType_strings[7] = {};

static const char FeatureType_names[] =
  "CHROME_INTRO"
  "DOWNLOAD"
  "INVALID"
  "SEARCH"
  "SUMMARY"
  "TEST"
  "VOICE_SEARCH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FeatureType_entries[] = {
  { {FeatureType_names + 0, 12}, 2 },
  { {FeatureType_names + 12, 8}, 3 },
  { {FeatureType_names + 20, 7}, 0 },
  { {FeatureType_names + 27, 6}, 4 },
  { {FeatureType_names + 33, 7}, 1 },
  { {FeatureType_names + 40, 4}, 9999999 },
  { {FeatureType_names + 44, 12}, 5 },
};

static const int FeatureType_entries_by_number[] = {
  2, // 0 -> INVALID
  4, // 1 -> SUMMARY
  0, // 2 -> CHROME_INTRO
  1, // 3 -> DOWNLOAD
  3, // 4 -> SEARCH
  6, // 5 -> VOICE_SEARCH
  5, // 9999999 -> TEST
};

const std::string& FeatureType_Name(
    FeatureType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FeatureType_entries,
          FeatureType_entries_by_number,
          7, FeatureType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FeatureType_entries,
      FeatureType_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FeatureType_strings[idx].get();
}
bool FeatureType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeatureType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FeatureType_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<FeatureType>(int_value);
  }
  return success;
}

// ===================================================================

class VideoTutorialGroup::_Internal {
 public:
};

VideoTutorialGroup::VideoTutorialGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tutorials_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:video_tutorials.proto.VideoTutorialGroup)
}
VideoTutorialGroup::VideoTutorialGroup(const VideoTutorialGroup& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tutorials_(from.tutorials_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    language_.Set(from._internal_language(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:video_tutorials.proto.VideoTutorialGroup)
}

inline void VideoTutorialGroup::SharedCtor() {
language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoTutorialGroup::~VideoTutorialGroup() {
  // @@protoc_insertion_point(destructor:video_tutorials.proto.VideoTutorialGroup)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoTutorialGroup::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  language_.Destroy();
}

void VideoTutorialGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoTutorialGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:video_tutorials.proto.VideoTutorialGroup)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tutorials_.Clear();
  language_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoTutorialGroup::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string language = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .video_tutorials.proto.VideoTutorial tutorials = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tutorials(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoTutorialGroup::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_tutorials.proto.VideoTutorialGroup)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string language = 1;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorialGroup.language");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_language(), target);
  }

  // repeated .video_tutorials.proto.VideoTutorial tutorials = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tutorials_size()); i < n; i++) {
    const auto& repfield = this->_internal_tutorials(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_tutorials.proto.VideoTutorialGroup)
  return target;
}

size_t VideoTutorialGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:video_tutorials.proto.VideoTutorialGroup)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .video_tutorials.proto.VideoTutorial tutorials = 2;
  total_size += 1UL * this->_internal_tutorials_size();
  for (const auto& msg : this->tutorials_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string language = 1;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoTutorialGroup::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoTutorialGroup*>(
      &from));
}

void VideoTutorialGroup::MergeFrom(const VideoTutorialGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_tutorials.proto.VideoTutorialGroup)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tutorials_.MergeFrom(from.tutorials_);
  if (!from._internal_language().empty()) {
    _internal_set_language(from._internal_language());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoTutorialGroup::CopyFrom(const VideoTutorialGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_tutorials.proto.VideoTutorialGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoTutorialGroup::IsInitialized() const {
  return true;
}

void VideoTutorialGroup::InternalSwap(VideoTutorialGroup* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tutorials_.InternalSwap(&other->tutorials_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &language_, lhs_arena,
      &other->language_, rhs_arena
  );
}

std::string VideoTutorialGroup::GetTypeName() const {
  return "video_tutorials.proto.VideoTutorialGroup";
}


// ===================================================================

class VideoTutorial::_Internal {
 public:
};

VideoTutorial::VideoTutorial(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:video_tutorials.proto.VideoTutorial)
}
VideoTutorial::VideoTutorial(const VideoTutorial& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  video_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    video_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_video_url().empty()) {
    video_url_.Set(from._internal_video_url(), 
      GetArenaForAllocation());
  }
  share_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    share_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_share_url().empty()) {
    share_url_.Set(from._internal_share_url(), 
      GetArenaForAllocation());
  }
  poster_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    poster_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_poster_url().empty()) {
    poster_url_.Set(from._internal_poster_url(), 
      GetArenaForAllocation());
  }
  caption_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    caption_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_caption_url().empty()) {
    caption_url_.Set(from._internal_caption_url(), 
      GetArenaForAllocation());
  }
  animated_gif_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    animated_gif_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_animated_gif_url().empty()) {
    animated_gif_url_.Set(from._internal_animated_gif_url(), 
      GetArenaForAllocation());
  }
  thumbnail_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    thumbnail_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_thumbnail_url().empty()) {
    thumbnail_url_.Set(from._internal_thumbnail_url(), 
      GetArenaForAllocation());
  }
  ::memcpy(&video_length_, &from.video_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&feature_) -
    reinterpret_cast<char*>(&video_length_)) + sizeof(feature_));
  // @@protoc_insertion_point(copy_constructor:video_tutorials.proto.VideoTutorial)
}

inline void VideoTutorial::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
video_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  video_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
share_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  share_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
poster_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  poster_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
caption_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  caption_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
animated_gif_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  animated_gif_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
thumbnail_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  thumbnail_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&video_length_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feature_) -
    reinterpret_cast<char*>(&video_length_)) + sizeof(feature_));
}

VideoTutorial::~VideoTutorial() {
  // @@protoc_insertion_point(destructor:video_tutorials.proto.VideoTutorial)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoTutorial::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  video_url_.Destroy();
  share_url_.Destroy();
  poster_url_.Destroy();
  caption_url_.Destroy();
  animated_gif_url_.Destroy();
  thumbnail_url_.Destroy();
}

void VideoTutorial::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoTutorial::Clear() {
// @@protoc_insertion_point(message_clear_start:video_tutorials.proto.VideoTutorial)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  video_url_.ClearToEmpty();
  share_url_.ClearToEmpty();
  poster_url_.ClearToEmpty();
  caption_url_.ClearToEmpty();
  animated_gif_url_.ClearToEmpty();
  thumbnail_url_.ClearToEmpty();
  ::memset(&video_length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&feature_) -
      reinterpret_cast<char*>(&video_length_)) + sizeof(feature_));
  _internal_metadata_.Clear<std::string>();
}

const char* VideoTutorial::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .video_tutorials.proto.FeatureType feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_feature(static_cast<::video_tutorials::proto::FeatureType>(val));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string video_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_video_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string share_url = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_share_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string poster_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_poster_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string caption_url = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_caption_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // int64 video_length = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          video_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string animated_gif_url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_animated_gif_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string thumbnail_url = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_thumbnail_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoTutorial::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_tutorials.proto.VideoTutorial)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .video_tutorials.proto.FeatureType feature = 1;
  if (this->_internal_feature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_feature(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string video_url = 3;
  if (!this->_internal_video_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_video_url().data(), static_cast<int>(this->_internal_video_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.video_url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_video_url(), target);
  }

  // string share_url = 4;
  if (!this->_internal_share_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_share_url().data(), static_cast<int>(this->_internal_share_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.share_url");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_share_url(), target);
  }

  // string poster_url = 5;
  if (!this->_internal_poster_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_poster_url().data(), static_cast<int>(this->_internal_poster_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.poster_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_poster_url(), target);
  }

  // string caption_url = 6;
  if (!this->_internal_caption_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_caption_url().data(), static_cast<int>(this->_internal_caption_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.caption_url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_caption_url(), target);
  }

  // int64 video_length = 7;
  if (this->_internal_video_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_video_length(), target);
  }

  // string animated_gif_url = 8;
  if (!this->_internal_animated_gif_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_animated_gif_url().data(), static_cast<int>(this->_internal_animated_gif_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.animated_gif_url");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_animated_gif_url(), target);
  }

  // string thumbnail_url = 9;
  if (!this->_internal_thumbnail_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_thumbnail_url().data(), static_cast<int>(this->_internal_thumbnail_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorial.thumbnail_url");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_thumbnail_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_tutorials.proto.VideoTutorial)
  return target;
}

size_t VideoTutorial::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:video_tutorials.proto.VideoTutorial)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string video_url = 3;
  if (!this->_internal_video_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_video_url());
  }

  // string share_url = 4;
  if (!this->_internal_share_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_share_url());
  }

  // string poster_url = 5;
  if (!this->_internal_poster_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_poster_url());
  }

  // string caption_url = 6;
  if (!this->_internal_caption_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_caption_url());
  }

  // string animated_gif_url = 8;
  if (!this->_internal_animated_gif_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_animated_gif_url());
  }

  // string thumbnail_url = 9;
  if (!this->_internal_thumbnail_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_thumbnail_url());
  }

  // int64 video_length = 7;
  if (this->_internal_video_length() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_video_length());
  }

  // .video_tutorials.proto.FeatureType feature = 1;
  if (this->_internal_feature() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_feature());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoTutorial::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoTutorial*>(
      &from));
}

void VideoTutorial::MergeFrom(const VideoTutorial& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_tutorials.proto.VideoTutorial)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_video_url().empty()) {
    _internal_set_video_url(from._internal_video_url());
  }
  if (!from._internal_share_url().empty()) {
    _internal_set_share_url(from._internal_share_url());
  }
  if (!from._internal_poster_url().empty()) {
    _internal_set_poster_url(from._internal_poster_url());
  }
  if (!from._internal_caption_url().empty()) {
    _internal_set_caption_url(from._internal_caption_url());
  }
  if (!from._internal_animated_gif_url().empty()) {
    _internal_set_animated_gif_url(from._internal_animated_gif_url());
  }
  if (!from._internal_thumbnail_url().empty()) {
    _internal_set_thumbnail_url(from._internal_thumbnail_url());
  }
  if (from._internal_video_length() != 0) {
    _internal_set_video_length(from._internal_video_length());
  }
  if (from._internal_feature() != 0) {
    _internal_set_feature(from._internal_feature());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoTutorial::CopyFrom(const VideoTutorial& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_tutorials.proto.VideoTutorial)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoTutorial::IsInitialized() const {
  return true;
}

void VideoTutorial::InternalSwap(VideoTutorial* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &video_url_, lhs_arena,
      &other->video_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &share_url_, lhs_arena,
      &other->share_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &poster_url_, lhs_arena,
      &other->poster_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &caption_url_, lhs_arena,
      &other->caption_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &animated_gif_url_, lhs_arena,
      &other->animated_gif_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &thumbnail_url_, lhs_arena,
      &other->thumbnail_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoTutorial, feature_)
      + sizeof(VideoTutorial::feature_)
      - PROTOBUF_FIELD_OFFSET(VideoTutorial, video_length_)>(
          reinterpret_cast<char*>(&video_length_),
          reinterpret_cast<char*>(&other->video_length_));
}

std::string VideoTutorial::GetTypeName() const {
  return "video_tutorials.proto.VideoTutorial";
}


// ===================================================================

class VideoTutorialGroups::_Internal {
 public:
};

VideoTutorialGroups::VideoTutorialGroups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tutorial_groups_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:video_tutorials.proto.VideoTutorialGroups)
}
VideoTutorialGroups::VideoTutorialGroups(const VideoTutorialGroups& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tutorial_groups_(from.tutorial_groups_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  text_locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text_locale().empty()) {
    text_locale_.Set(from._internal_text_locale(), 
      GetArenaForAllocation());
  }
  preferred_locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    preferred_locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_preferred_locale().empty()) {
    preferred_locale_.Set(from._internal_preferred_locale(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:video_tutorials.proto.VideoTutorialGroups)
}

inline void VideoTutorialGroups::SharedCtor() {
text_locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
preferred_locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  preferred_locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoTutorialGroups::~VideoTutorialGroups() {
  // @@protoc_insertion_point(destructor:video_tutorials.proto.VideoTutorialGroups)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoTutorialGroups::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  text_locale_.Destroy();
  preferred_locale_.Destroy();
}

void VideoTutorialGroups::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VideoTutorialGroups::Clear() {
// @@protoc_insertion_point(message_clear_start:video_tutorials.proto.VideoTutorialGroups)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tutorial_groups_.Clear();
  text_locale_.ClearToEmpty();
  preferred_locale_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoTutorialGroups::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .video_tutorials.proto.VideoTutorialGroup tutorial_groups = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tutorial_groups(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string text_locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_text_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string preferred_locale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_preferred_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VideoTutorialGroups::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:video_tutorials.proto.VideoTutorialGroups)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .video_tutorials.proto.VideoTutorialGroup tutorial_groups = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tutorial_groups_size()); i < n; i++) {
    const auto& repfield = this->_internal_tutorial_groups(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string text_locale = 2;
  if (!this->_internal_text_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_locale().data(), static_cast<int>(this->_internal_text_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorialGroups.text_locale");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_text_locale(), target);
  }

  // string preferred_locale = 3;
  if (!this->_internal_preferred_locale().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_preferred_locale().data(), static_cast<int>(this->_internal_preferred_locale().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "video_tutorials.proto.VideoTutorialGroups.preferred_locale");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_preferred_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:video_tutorials.proto.VideoTutorialGroups)
  return target;
}

size_t VideoTutorialGroups::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:video_tutorials.proto.VideoTutorialGroups)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .video_tutorials.proto.VideoTutorialGroup tutorial_groups = 1;
  total_size += 1UL * this->_internal_tutorial_groups_size();
  for (const auto& msg : this->tutorial_groups_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text_locale = 2;
  if (!this->_internal_text_locale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text_locale());
  }

  // string preferred_locale = 3;
  if (!this->_internal_preferred_locale().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_preferred_locale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoTutorialGroups::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoTutorialGroups*>(
      &from));
}

void VideoTutorialGroups::MergeFrom(const VideoTutorialGroups& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:video_tutorials.proto.VideoTutorialGroups)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tutorial_groups_.MergeFrom(from.tutorial_groups_);
  if (!from._internal_text_locale().empty()) {
    _internal_set_text_locale(from._internal_text_locale());
  }
  if (!from._internal_preferred_locale().empty()) {
    _internal_set_preferred_locale(from._internal_preferred_locale());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoTutorialGroups::CopyFrom(const VideoTutorialGroups& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:video_tutorials.proto.VideoTutorialGroups)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoTutorialGroups::IsInitialized() const {
  return true;
}

void VideoTutorialGroups::InternalSwap(VideoTutorialGroups* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tutorial_groups_.InternalSwap(&other->tutorial_groups_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_locale_, lhs_arena,
      &other->text_locale_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &preferred_locale_, lhs_arena,
      &other->preferred_locale_, rhs_arena
  );
}

std::string VideoTutorialGroups::GetTypeName() const {
  return "video_tutorials.proto.VideoTutorialGroups";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace video_tutorials
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::video_tutorials::proto::VideoTutorialGroup*
Arena::CreateMaybeMessage< ::video_tutorials::proto::VideoTutorialGroup >(Arena* arena) {
  return Arena::CreateMessageInternal< ::video_tutorials::proto::VideoTutorialGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::video_tutorials::proto::VideoTutorial*
Arena::CreateMaybeMessage< ::video_tutorials::proto::VideoTutorial >(Arena* arena) {
  return Arena::CreateMessageInternal< ::video_tutorials::proto::VideoTutorial >(arena);
}
template<> PROTOBUF_NOINLINE ::video_tutorials::proto::VideoTutorialGroups*
Arena::CreateMaybeMessage< ::video_tutorials::proto::VideoTutorialGroups >(Arena* arena) {
  return Arena::CreateMessageInternal< ::video_tutorials::proto::VideoTutorialGroups >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
