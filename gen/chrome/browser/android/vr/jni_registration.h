// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_registration_generator.py
// Please do not change its content.

#ifndef GEN_CHROME_BROWSER_ANDROID_VR_JNI_REGISTRATION_
#define GEN_CHROME_BROWSER_ANDROID_VR_JNI_REGISTRATION_

#include <jni.h>

#include <iterator>

#include "base/android/jni_generator/jni_generator_helper.h"
#include "base/android/jni_int_wrapper.h"


// Step 1: Forward declarations (classes).


// Step 2: Forward declarations (methods).

JNI_GENERATOR_EXPORT jlong Java_J_N_Mk5j7W4J(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jfloat scaleFactor,
    jfloat scrollRatio,
    jint touchSlop);
JNI_GENERATOR_EXPORT void Java_J_N_Mabi_00024gAF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeAndroidVSyncHelper,
    jobject caller,
    jlong frameTimeNanos);
JNI_GENERATOR_EXPORT void Java_J_N_MfwMBbhe(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrCoreInstallHelper,
    jboolean success);
JNI_GENERATOR_EXPORT void Java_J_N_MQhox5h_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrInputConnection,
    jobject caller,
    jstring text);
JNI_GENERATOR_EXPORT jlong Java_J_N_MKRQ_00024loE(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject delegate,
    jboolean forWebVR,
    jboolean browsingDisabled,
    jboolean hasOrCanRequestRecordAudioPermission,
    jlong gvrApi,
    jboolean reprojectedRendering,
    jfloat displayWidthMeters,
    jfloat displayHeightMeters,
    jint displayWidthPixels,
    jint displayHeightPixels,
    jboolean pauseContent,
    jboolean lowDensity,
    jboolean isStandaloneVrDevice);
JNI_GENERATOR_EXPORT jboolean Java_J_N_MV_00024qqU_1t(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_MtYUo17r(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jobject surface);
JNI_GENERATOR_EXPORT void Java_J_N_Mt_00024XV3Tu(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jobject tab);
JNI_GENERATOR_EXPORT void Java_J_N_MuRNYnAv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jobject androidUiGestureTarget);
JNI_GENERATOR_EXPORT void Java_J_N_M_000247KPysW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jobject dialogGestureTarget);
JNI_GENERATOR_EXPORT void Java_J_N_MdhFBNv9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_Mx9gLrf_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean touched);
JNI_GENERATOR_EXPORT void Java_J_N_M23xBBeG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M8DYidpe(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M1COYGAS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jdouble progress);
JNI_GENERATOR_EXPORT void Java_J_N_MRgUIjz7(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jint contentWidth,
    jint contentHeight,
    jint overlayWidth,
    jint overlayHeight);
JNI_GENERATOR_EXPORT void Java_J_N_M4qYdSMc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean enabled);
JNI_GENERATOR_EXPORT jboolean Java_J_N_M_00024X22ueI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_MtZ_10X8f(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jobjectArray mainTabs,
    jobjectArray incognitoTabs);
JNI_GENERATOR_EXPORT void Java_J_N_MT175_1UO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean incognito,
    jint id,
    jstring title);
JNI_GENERATOR_EXPORT void Java_J_N_M3mI95le(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean incognito,
    jint id);
JNI_GENERATOR_EXPORT void Java_J_N_MN_1BMvRJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M4jRizzc(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jfloat width,
    jfloat height);
JNI_GENERATOR_EXPORT void Java_J_N_MBxhpfBq(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jint width,
    jint height);
JNI_GENERATOR_EXPORT void Java_J_N_M8SZtGP4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jfloat width,
    jfloat height);
JNI_GENERATOR_EXPORT void Java_J_N_Mf7LrKcp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jfloat x,
    jfloat y);
JNI_GENERATOR_EXPORT void Java_J_N_MC_00024C6Gne(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean floating);
JNI_GENERATOR_EXPORT void Java_J_N_MzlSkL_1b(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jstring text);
JNI_GENERATOR_EXPORT void Java_J_N_MfyEiF1q(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_MBzmMfnQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean canGoBack,
    jboolean canGoForward);
JNI_GENERATOR_EXPORT void Java_J_N_M9a3AJig(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jint reason);
JNI_GENERATOR_EXPORT void Java_J_N_MYCeEYIp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean show);
JNI_GENERATOR_EXPORT void Java_J_N_MP893CNH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jint selectionStart,
    jint selectionEnd,
    jint compositionStart,
    jint compositionEnd);
JNI_GENERATOR_EXPORT void Java_J_N_MPaO1wu2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M64karSd(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean empty);
JNI_GENERATOR_EXPORT void Java_J_N_MfjYy43V(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShell,
    jobject caller,
    jboolean canRecordAudio);
JNI_GENERATOR_EXPORT jlong Java_J_N_M7uQy4b6(
    JNIEnv* env,
    jclass jcaller,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M5BNAVgK(
    JNIEnv* env,
    jclass jcaller);
JNI_GENERATOR_EXPORT void Java_J_N_MXq5KpR_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller,
    jboolean result);
JNI_GENERATOR_EXPORT void Java_J_N_MTSox2k6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_MwPjVrWz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_M72yrhTB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller);
JNI_GENERATOR_EXPORT void Java_J_N_Mb9hqS1F(
    JNIEnv* env,
    jclass jcaller);


// Step 3: Method declarations.


static const JNINativeMethod kMethods_J_N[] = {
    { "Mk5j7W4J", "(Ljava/lang/Object;FFI)J", reinterpret_cast<void*>(Java_J_N_Mk5j7W4J) },
    { "Mabi$gAF", "(JLjava/lang/Object;J)V", reinterpret_cast<void*>(Java_J_N_Mabi_00024gAF) },
    { "MfwMBbhe", "(JZ)V", reinterpret_cast<void*>(Java_J_N_MfwMBbhe) },
    { "MQhox5h_", "(JLjava/lang/Object;Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MQhox5h_1) },
    { "MKRQ$loE", "(Ljava/lang/Object;Ljava/lang/Object;ZZZJZFFIIZZZ)J",
        reinterpret_cast<void*>(Java_J_N_MKRQ_00024loE) },
    { "MV$qqU_t", "(JLjava/lang/Object;)Z", reinterpret_cast<void*>(Java_J_N_MV_00024qqU_1t) },
    { "MtYUo17r", "(JLjava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N_MtYUo17r) },
    { "Mt$XV3Tu", "(JLjava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N_Mt_00024XV3Tu) },
    { "MuRNYnAv", "(JLjava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N_MuRNYnAv) },
    { "M$7KPysW", "(JLjava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N_M_000247KPysW) },
    { "MdhFBNv9", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MdhFBNv9) },
    { "Mx9gLrf$", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_Mx9gLrf_00024) },
    { "M23xBBeG", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_M23xBBeG) },
    { "M8DYidpe", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_M8DYidpe) },
    { "M1COYGAS", "(JLjava/lang/Object;D)V", reinterpret_cast<void*>(Java_J_N_M1COYGAS) },
    { "MRgUIjz7", "(JLjava/lang/Object;IIII)V", reinterpret_cast<void*>(Java_J_N_MRgUIjz7) },
    { "M4qYdSMc", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_M4qYdSMc) },
    { "M$X22ueI", "(JLjava/lang/Object;)Z", reinterpret_cast<void*>(Java_J_N_M_00024X22ueI) },
    { "MtZ_0X8f", "(JLjava/lang/Object;[Ljava/lang/Object;[Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N_MtZ_10X8f) },
    { "MT175_UO", "(JLjava/lang/Object;ZILjava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MT175_1UO) },
    { "M3mI95le", "(JLjava/lang/Object;ZI)V", reinterpret_cast<void*>(Java_J_N_M3mI95le) },
    { "MN_BMvRJ", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MN_1BMvRJ) },
    { "M4jRizzc", "(JLjava/lang/Object;FF)V", reinterpret_cast<void*>(Java_J_N_M4jRizzc) },
    { "MBxhpfBq", "(JLjava/lang/Object;II)V", reinterpret_cast<void*>(Java_J_N_MBxhpfBq) },
    { "M8SZtGP4", "(JLjava/lang/Object;FF)V", reinterpret_cast<void*>(Java_J_N_M8SZtGP4) },
    { "Mf7LrKcp", "(JLjava/lang/Object;FF)V", reinterpret_cast<void*>(Java_J_N_Mf7LrKcp) },
    { "MC$C6Gne", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MC_00024C6Gne) },
    { "MzlSkL_b", "(JLjava/lang/Object;Ljava/lang/String;)V",
        reinterpret_cast<void*>(Java_J_N_MzlSkL_1b) },
    { "MfyEiF1q", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MfyEiF1q) },
    { "MBzmMfnQ", "(JLjava/lang/Object;ZZ)V", reinterpret_cast<void*>(Java_J_N_MBzmMfnQ) },
    { "M9a3AJig", "(JLjava/lang/Object;I)V", reinterpret_cast<void*>(Java_J_N_M9a3AJig) },
    { "MYCeEYIp", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MYCeEYIp) },
    { "MP893CNH", "(JLjava/lang/Object;IIII)V", reinterpret_cast<void*>(Java_J_N_MP893CNH) },
    { "MPaO1wu2", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MPaO1wu2) },
    { "M64karSd", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_M64karSd) },
    { "MfjYy43V", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MfjYy43V) },
    { "M7uQy4b6", "(Ljava/lang/Object;)J", reinterpret_cast<void*>(Java_J_N_M7uQy4b6) },
    { "M5BNAVgK", "()V", reinterpret_cast<void*>(Java_J_N_M5BNAVgK) },
    { "MXq5KpR$", "(JLjava/lang/Object;Z)V", reinterpret_cast<void*>(Java_J_N_MXq5KpR_00024) },
    { "MTSox2k6", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MTSox2k6) },
    { "MwPjVrWz", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_MwPjVrWz) },
    { "M72yrhTB", "(JLjava/lang/Object;)V", reinterpret_cast<void*>(Java_J_N_M72yrhTB) },
    { "Mb9hqS1F", "()V", reinterpret_cast<void*>(Java_J_N_Mb9hqS1F) },

};

namespace {

JNI_REGISTRATION_EXPORT bool RegisterNative_J_N(JNIEnv* env) {
  const int number_of_methods = std::size(kMethods_J_N);

  base::android::ScopedJavaLocalRef<jclass> native_clazz =
      base::android::GetClass(env, "J/N");
  if (env->RegisterNatives(
      native_clazz.obj(),
      kMethods_J_N,
      number_of_methods) < 0) {

    jni_generator::HandleRegistrationError(env, native_clazz.obj(), __FILE__);
    return false;
  }

  return true;
}

}  // namespace


// Step 4: Main dex and non-main dex registration functions.

namespace vr {

bool RegisterMainDexNatives(JNIEnv* env) {

  return true;
}

bool RegisterNonMainDexNatives(JNIEnv* env) {
  // Register natives in a proxy.
  if (!RegisterNative_J_N(env)) {
    return false;
  }


  return true;
}

}  // namespace vr

#endif  // GEN_CHROME_BROWSER_ANDROID_VR_JNI_REGISTRATION_
