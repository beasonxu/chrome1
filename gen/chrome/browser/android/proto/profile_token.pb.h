// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profile_token.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_profile_5ftoken_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_profile_5ftoken_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_profile_5ftoken_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_profile_5ftoken_2eproto {
  static const uint32_t offsets[];
};
namespace profile_resolver {
class ProfileToken;
struct ProfileTokenDefaultTypeInternal;
extern ProfileTokenDefaultTypeInternal _ProfileToken_default_instance_;
}  // namespace profile_resolver
PROTOBUF_NAMESPACE_OPEN
template<> ::profile_resolver::ProfileToken* Arena::CreateMaybeMessage<::profile_resolver::ProfileToken>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace profile_resolver {

// ===================================================================

class ProfileToken final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:profile_resolver.ProfileToken) */ {
 public:
  inline ProfileToken() : ProfileToken(nullptr) {}
  ~ProfileToken() override;
  explicit PROTOBUF_CONSTEXPR ProfileToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProfileToken(const ProfileToken& from);
  ProfileToken(ProfileToken&& from) noexcept
    : ProfileToken() {
    *this = ::std::move(from);
  }

  inline ProfileToken& operator=(const ProfileToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProfileToken& operator=(ProfileToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ProfileToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProfileToken* internal_default_instance() {
    return reinterpret_cast<const ProfileToken*>(
               &_ProfileToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProfileToken& a, ProfileToken& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ProfileToken* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProfileToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProfileToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProfileToken>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ProfileToken& from);
  void MergeFrom(const ProfileToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ProfileToken* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "profile_resolver.ProfileToken";
  }
  protected:
  explicit ProfileToken(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelativePathFieldNumber = 1,
    kOtrProfileIdFieldNumber = 2,
  };
  // string relative_path = 1;
  void clear_relative_path();
  const std::string& relative_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_path();
  PROTOBUF_NODISCARD std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // string otr_profile_id = 2;
  void clear_otr_profile_id();
  const std::string& otr_profile_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_otr_profile_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_otr_profile_id();
  PROTOBUF_NODISCARD std::string* release_otr_profile_id();
  void set_allocated_otr_profile_id(std::string* otr_profile_id);
  private:
  const std::string& _internal_otr_profile_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_otr_profile_id(const std::string& value);
  std::string* _internal_mutable_otr_profile_id();
  public:

  // @@protoc_insertion_point(class_scope:profile_resolver.ProfileToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr otr_profile_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_profile_5ftoken_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProfileToken

// string relative_path = 1;
inline void ProfileToken::clear_relative_path() {
  relative_path_.ClearToEmpty();
}
inline const std::string& ProfileToken::relative_path() const {
  // @@protoc_insertion_point(field_get:profile_resolver.ProfileToken.relative_path)
  return _internal_relative_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileToken::set_relative_path(ArgT0&& arg0, ArgT... args) {
 
 relative_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:profile_resolver.ProfileToken.relative_path)
}
inline std::string* ProfileToken::mutable_relative_path() {
  std::string* _s = _internal_mutable_relative_path();
  // @@protoc_insertion_point(field_mutable:profile_resolver.ProfileToken.relative_path)
  return _s;
}
inline const std::string& ProfileToken::_internal_relative_path() const {
  return relative_path_.Get();
}
inline void ProfileToken::_internal_set_relative_path(const std::string& value) {
  
  relative_path_.Set(value, GetArenaForAllocation());
}
inline std::string* ProfileToken::_internal_mutable_relative_path() {
  
  return relative_path_.Mutable(GetArenaForAllocation());
}
inline std::string* ProfileToken::release_relative_path() {
  // @@protoc_insertion_point(field_release:profile_resolver.ProfileToken.relative_path)
  return relative_path_.Release();
}
inline void ProfileToken::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    
  } else {
    
  }
  relative_path_.SetAllocated(relative_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_path_.IsDefault()) {
    relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:profile_resolver.ProfileToken.relative_path)
}

// string otr_profile_id = 2;
inline void ProfileToken::clear_otr_profile_id() {
  otr_profile_id_.ClearToEmpty();
}
inline const std::string& ProfileToken::otr_profile_id() const {
  // @@protoc_insertion_point(field_get:profile_resolver.ProfileToken.otr_profile_id)
  return _internal_otr_profile_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProfileToken::set_otr_profile_id(ArgT0&& arg0, ArgT... args) {
 
 otr_profile_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:profile_resolver.ProfileToken.otr_profile_id)
}
inline std::string* ProfileToken::mutable_otr_profile_id() {
  std::string* _s = _internal_mutable_otr_profile_id();
  // @@protoc_insertion_point(field_mutable:profile_resolver.ProfileToken.otr_profile_id)
  return _s;
}
inline const std::string& ProfileToken::_internal_otr_profile_id() const {
  return otr_profile_id_.Get();
}
inline void ProfileToken::_internal_set_otr_profile_id(const std::string& value) {
  
  otr_profile_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ProfileToken::_internal_mutable_otr_profile_id() {
  
  return otr_profile_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ProfileToken::release_otr_profile_id() {
  // @@protoc_insertion_point(field_release:profile_resolver.ProfileToken.otr_profile_id)
  return otr_profile_id_.Release();
}
inline void ProfileToken::set_allocated_otr_profile_id(std::string* otr_profile_id) {
  if (otr_profile_id != nullptr) {
    
  } else {
    
  }
  otr_profile_id_.SetAllocated(otr_profile_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (otr_profile_id_.IsDefault()) {
    otr_profile_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:profile_resolver.ProfileToken.otr_profile_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace profile_resolver

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_profile_5ftoken_2eproto
