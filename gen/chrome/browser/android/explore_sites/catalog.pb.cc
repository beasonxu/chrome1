// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: catalog.proto

#include "catalog.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace explore_sites {
PROTOBUF_CONSTEXPR Catalog::Catalog(
    ::_pbi::ConstantInitialized)
  : categories_(){}
struct CatalogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CatalogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CatalogDefaultTypeInternal() {}
  union {
    Catalog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CatalogDefaultTypeInternal _Catalog_default_instance_;
PROTOBUF_CONSTEXPR Category::Category(
    ::_pbi::ConstantInitialized)
  : sites_()
  , localized_title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct CategoryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CategoryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CategoryDefaultTypeInternal() {}
  union {
    Category _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CategoryDefaultTypeInternal _Category_default_instance_;
PROTOBUF_CONSTEXPR Site::Site(
    ::_pbi::ConstantInitialized)
  : site_url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct SiteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SiteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SiteDefaultTypeInternal() {}
  union {
    Site _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SiteDefaultTypeInternal _Site_default_instance_;
PROTOBUF_CONSTEXPR GetCatalogRequest::GetCatalogRequest(
    ::_pbi::ConstantInitialized)
  : country_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetCatalogRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCatalogRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCatalogRequestDefaultTypeInternal() {}
  union {
    GetCatalogRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCatalogRequestDefaultTypeInternal _GetCatalogRequest_default_instance_;
PROTOBUF_CONSTEXPR GetCatalogResponse::GetCatalogResponse(
    ::_pbi::ConstantInitialized)
  : country_code_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , version_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , catalog_(nullptr){}
struct GetCatalogResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCatalogResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCatalogResponseDefaultTypeInternal() {}
  union {
    GetCatalogResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCatalogResponseDefaultTypeInternal _GetCatalogResponse_default_instance_;
}  // namespace explore_sites
namespace explore_sites {
bool Category_CategoryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> Category_CategoryType_strings[20] = {};

static const char Category_CategoryType_names[] =
  "APPS_GAMES"
  "BANKING"
  "BOOKS"
  "DEFAULT"
  "EDUCATION"
  "ENTERTAINMENT"
  "FAVORITE"
  "FOOD"
  "GOOGLE"
  "GOVERNMENT"
  "HEALTH"
  "JOBS"
  "NEWS"
  "REFERENCE"
  "SCIENCE"
  "SHOPPING"
  "SOCIAL"
  "SPORT"
  "TECHNOLOGY"
  "TRAVEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Category_CategoryType_entries[] = {
  { {Category_CategoryType_names + 0, 10}, 12 },
  { {Category_CategoryType_names + 10, 7}, 7 },
  { {Category_CategoryType_names + 17, 5}, 17 },
  { {Category_CategoryType_names + 22, 7}, 0 },
  { {Category_CategoryType_names + 29, 9}, 10 },
  { {Category_CategoryType_names + 38, 13}, 2 },
  { {Category_CategoryType_names + 51, 8}, 13 },
  { {Category_CategoryType_names + 59, 4}, 15 },
  { {Category_CategoryType_names + 63, 6}, 14 },
  { {Category_CategoryType_names + 69, 10}, 8 },
  { {Category_CategoryType_names + 79, 6}, 16 },
  { {Category_CategoryType_names + 85, 4}, 11 },
  { {Category_CategoryType_names + 89, 4}, 4 },
  { {Category_CategoryType_names + 93, 9}, 6 },
  { {Category_CategoryType_names + 102, 7}, 19 },
  { {Category_CategoryType_names + 109, 8}, 5 },
  { {Category_CategoryType_names + 117, 6}, 1 },
  { {Category_CategoryType_names + 123, 5}, 3 },
  { {Category_CategoryType_names + 128, 10}, 18 },
  { {Category_CategoryType_names + 138, 6}, 9 },
};

static const int Category_CategoryType_entries_by_number[] = {
  3, // 0 -> DEFAULT
  16, // 1 -> SOCIAL
  5, // 2 -> ENTERTAINMENT
  17, // 3 -> SPORT
  12, // 4 -> NEWS
  15, // 5 -> SHOPPING
  13, // 6 -> REFERENCE
  1, // 7 -> BANKING
  9, // 8 -> GOVERNMENT
  19, // 9 -> TRAVEL
  4, // 10 -> EDUCATION
  11, // 11 -> JOBS
  0, // 12 -> APPS_GAMES
  6, // 13 -> FAVORITE
  8, // 14 -> GOOGLE
  7, // 15 -> FOOD
  10, // 16 -> HEALTH
  2, // 17 -> BOOKS
  18, // 18 -> TECHNOLOGY
  14, // 19 -> SCIENCE
};

const std::string& Category_CategoryType_Name(
    Category_CategoryType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Category_CategoryType_entries,
          Category_CategoryType_entries_by_number,
          20, Category_CategoryType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Category_CategoryType_entries,
      Category_CategoryType_entries_by_number,
      20, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     Category_CategoryType_strings[idx].get();
}
bool Category_CategoryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Category_CategoryType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Category_CategoryType_entries, 20, name, &int_value);
  if (success) {
    *value = static_cast<Category_CategoryType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Category_CategoryType Category::DEFAULT;
constexpr Category_CategoryType Category::SOCIAL;
constexpr Category_CategoryType Category::ENTERTAINMENT;
constexpr Category_CategoryType Category::SPORT;
constexpr Category_CategoryType Category::NEWS;
constexpr Category_CategoryType Category::SHOPPING;
constexpr Category_CategoryType Category::REFERENCE;
constexpr Category_CategoryType Category::BANKING;
constexpr Category_CategoryType Category::GOVERNMENT;
constexpr Category_CategoryType Category::TRAVEL;
constexpr Category_CategoryType Category::EDUCATION;
constexpr Category_CategoryType Category::JOBS;
constexpr Category_CategoryType Category::APPS_GAMES;
constexpr Category_CategoryType Category::FAVORITE;
constexpr Category_CategoryType Category::GOOGLE;
constexpr Category_CategoryType Category::FOOD;
constexpr Category_CategoryType Category::HEALTH;
constexpr Category_CategoryType Category::BOOKS;
constexpr Category_CategoryType Category::TECHNOLOGY;
constexpr Category_CategoryType Category::SCIENCE;
constexpr Category_CategoryType Category::CategoryType_MIN;
constexpr Category_CategoryType Category::CategoryType_MAX;
constexpr int Category::CategoryType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Catalog::_Internal {
 public:
};

Catalog::Catalog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  categories_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:explore_sites.Catalog)
}
Catalog::Catalog(const Catalog& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      categories_(from.categories_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:explore_sites.Catalog)
}

inline void Catalog::SharedCtor() {
}

Catalog::~Catalog() {
  // @@protoc_insertion_point(destructor:explore_sites.Catalog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Catalog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Catalog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Catalog::Clear() {
// @@protoc_insertion_point(message_clear_start:explore_sites.Catalog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  categories_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Catalog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .explore_sites.Category categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_categories(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Catalog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:explore_sites.Catalog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .explore_sites.Category categories = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_categories_size()); i < n; i++) {
    const auto& repfield = this->_internal_categories(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:explore_sites.Catalog)
  return target;
}

size_t Catalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:explore_sites.Catalog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .explore_sites.Category categories = 1;
  total_size += 1UL * this->_internal_categories_size();
  for (const auto& msg : this->categories_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Catalog::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Catalog*>(
      &from));
}

void Catalog::MergeFrom(const Catalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:explore_sites.Catalog)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  categories_.MergeFrom(from.categories_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Catalog::CopyFrom(const Catalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:explore_sites.Catalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Catalog::IsInitialized() const {
  return true;
}

void Catalog::InternalSwap(Catalog* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  categories_.InternalSwap(&other->categories_);
}

std::string Catalog::GetTypeName() const {
  return "explore_sites.Catalog";
}


// ===================================================================

class Category::_Internal {
 public:
};

Category::Category(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  sites_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:explore_sites.Category)
}
Category::Category(const Category& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      sites_(from.sites_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  localized_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    localized_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_localized_title().empty()) {
    localized_title_.Set(from._internal_localized_title(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:explore_sites.Category)
}

inline void Category::SharedCtor() {
localized_title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  localized_title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

Category::~Category() {
  // @@protoc_insertion_point(destructor:explore_sites.Category)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Category::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  localized_title_.Destroy();
  icon_.Destroy();
}

void Category::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Category::Clear() {
// @@protoc_insertion_point(message_clear_start:explore_sites.Category)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sites_.Clear();
  localized_title_.ClearToEmpty();
  icon_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* Category::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .explore_sites.Category.CategoryType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::explore_sites::Category_CategoryType>(val));
        } else
          goto handle_unusual;
        continue;
      // string localized_title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_localized_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .explore_sites.Site sites = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sites(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Category::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:explore_sites.Category)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .explore_sites.Category.CategoryType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string localized_title = 2;
  if (!this->_internal_localized_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_localized_title().data(), static_cast<int>(this->_internal_localized_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.Category.localized_title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_localized_title(), target);
  }

  // bytes icon = 3;
  if (!this->_internal_icon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // repeated .explore_sites.Site sites = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sites_size()); i < n; i++) {
    const auto& repfield = this->_internal_sites(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:explore_sites.Category)
  return target;
}

size_t Category::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:explore_sites.Category)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .explore_sites.Site sites = 4;
  total_size += 1UL * this->_internal_sites_size();
  for (const auto& msg : this->sites_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string localized_title = 2;
  if (!this->_internal_localized_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_localized_title());
  }

  // bytes icon = 3;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_icon());
  }

  // .explore_sites.Category.CategoryType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Category::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Category*>(
      &from));
}

void Category::MergeFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:explore_sites.Category)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sites_.MergeFrom(from.sites_);
  if (!from._internal_localized_title().empty()) {
    _internal_set_localized_title(from._internal_localized_title());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Category::CopyFrom(const Category& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:explore_sites.Category)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Category::IsInitialized() const {
  return true;
}

void Category::InternalSwap(Category* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  sites_.InternalSwap(&other->sites_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &localized_title_, lhs_arena,
      &other->localized_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string Category::GetTypeName() const {
  return "explore_sites.Category";
}


// ===================================================================

class Site::_Internal {
 public:
};

Site::Site(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:explore_sites.Site)
}
Site::Site(const Site& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  site_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    site_url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_site_url().empty()) {
    site_url_.Set(from._internal_site_url(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_icon().empty()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:explore_sites.Site)
}

inline void Site::SharedCtor() {
site_url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  site_url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Site::~Site() {
  // @@protoc_insertion_point(destructor:explore_sites.Site)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Site::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  site_url_.Destroy();
  icon_.Destroy();
  title_.Destroy();
}

void Site::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Site::Clear() {
// @@protoc_insertion_point(message_clear_start:explore_sites.Site)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  site_url_.ClearToEmpty();
  icon_.ClearToEmpty();
  title_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Site::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string site_url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_site_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // bytes icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Site::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:explore_sites.Site)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string site_url = 1;
  if (!this->_internal_site_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_site_url().data(), static_cast<int>(this->_internal_site_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.Site.site_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_site_url(), target);
  }

  // bytes icon = 2;
  if (!this->_internal_icon().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_icon(), target);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.Site.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:explore_sites.Site)
  return target;
}

size_t Site::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:explore_sites.Site)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string site_url = 1;
  if (!this->_internal_site_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_url());
  }

  // bytes icon = 2;
  if (!this->_internal_icon().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_icon());
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Site::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Site*>(
      &from));
}

void Site::MergeFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:explore_sites.Site)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_site_url().empty()) {
    _internal_set_site_url(from._internal_site_url());
  }
  if (!from._internal_icon().empty()) {
    _internal_set_icon(from._internal_icon());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Site::CopyFrom(const Site& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:explore_sites.Site)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Site::IsInitialized() const {
  return true;
}

void Site::InternalSwap(Site* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &site_url_, lhs_arena,
      &other->site_url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
}

std::string Site::GetTypeName() const {
  return "explore_sites.Site";
}


// ===================================================================

class GetCatalogRequest::_Internal {
 public:
};

GetCatalogRequest::GetCatalogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:explore_sites.GetCatalogRequest)
}
GetCatalogRequest::GetCatalogRequest(const GetCatalogRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_code().empty()) {
    country_code_.Set(from._internal_country_code(), 
      GetArenaForAllocation());
  }
  version_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_token().empty()) {
    version_token_.Set(from._internal_version_token(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:explore_sites.GetCatalogRequest)
}

inline void GetCatalogRequest::SharedCtor() {
country_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetCatalogRequest::~GetCatalogRequest() {
  // @@protoc_insertion_point(destructor:explore_sites.GetCatalogRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCatalogRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.Destroy();
  version_token_.Destroy();
}

void GetCatalogRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCatalogRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:explore_sites.GetCatalogRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_code_.ClearToEmpty();
  version_token_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* GetCatalogRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string country_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string version_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCatalogRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:explore_sites.GetCatalogRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string country_code = 2;
  if (!this->_internal_country_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.GetCatalogRequest.country_code");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_country_code(), target);
  }

  // string version_token = 3;
  if (!this->_internal_version_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_token().data(), static_cast<int>(this->_internal_version_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.GetCatalogRequest.version_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:explore_sites.GetCatalogRequest)
  return target;
}

size_t GetCatalogRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:explore_sites.GetCatalogRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country_code = 2;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // string version_token = 3;
  if (!this->_internal_version_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCatalogRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetCatalogRequest*>(
      &from));
}

void GetCatalogRequest::MergeFrom(const GetCatalogRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:explore_sites.GetCatalogRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_country_code().empty()) {
    _internal_set_country_code(from._internal_country_code());
  }
  if (!from._internal_version_token().empty()) {
    _internal_set_version_token(from._internal_version_token());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetCatalogRequest::CopyFrom(const GetCatalogRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:explore_sites.GetCatalogRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCatalogRequest::IsInitialized() const {
  return true;
}

void GetCatalogRequest::InternalSwap(GetCatalogRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_token_, lhs_arena,
      &other->version_token_, rhs_arena
  );
}

std::string GetCatalogRequest::GetTypeName() const {
  return "explore_sites.GetCatalogRequest";
}


// ===================================================================

class GetCatalogResponse::_Internal {
 public:
  static const ::explore_sites::Catalog& catalog(const GetCatalogResponse* msg);
};

const ::explore_sites::Catalog&
GetCatalogResponse::_Internal::catalog(const GetCatalogResponse* msg) {
  return *msg->catalog_;
}
GetCatalogResponse::GetCatalogResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:explore_sites.GetCatalogResponse)
}
GetCatalogResponse::GetCatalogResponse(const GetCatalogResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  country_code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    country_code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_code().empty()) {
    country_code_.Set(from._internal_country_code(), 
      GetArenaForAllocation());
  }
  version_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version_token().empty()) {
    version_token_.Set(from._internal_version_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_catalog()) {
    catalog_ = new ::explore_sites::Catalog(*from.catalog_);
  } else {
    catalog_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:explore_sites.GetCatalogResponse)
}

inline void GetCatalogResponse::SharedCtor() {
country_code_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  country_code_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
catalog_ = nullptr;
}

GetCatalogResponse::~GetCatalogResponse() {
  // @@protoc_insertion_point(destructor:explore_sites.GetCatalogResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCatalogResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  country_code_.Destroy();
  version_token_.Destroy();
  if (this != internal_default_instance()) delete catalog_;
}

void GetCatalogResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCatalogResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:explore_sites.GetCatalogResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  country_code_.ClearToEmpty();
  version_token_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && catalog_ != nullptr) {
    delete catalog_;
  }
  catalog_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* GetCatalogResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .explore_sites.Catalog catalog = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_catalog(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string country_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_country_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string version_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCatalogResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:explore_sites.GetCatalogResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .explore_sites.Catalog catalog = 1;
  if (this->_internal_has_catalog()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::catalog(this),
        _Internal::catalog(this).GetCachedSize(), target, stream);
  }

  // string country_code = 3;
  if (!this->_internal_country_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_code().data(), static_cast<int>(this->_internal_country_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.GetCatalogResponse.country_code");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_country_code(), target);
  }

  // string version_token = 4;
  if (!this->_internal_version_token().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version_token().data(), static_cast<int>(this->_internal_version_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "explore_sites.GetCatalogResponse.version_token");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:explore_sites.GetCatalogResponse)
  return target;
}

size_t GetCatalogResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:explore_sites.GetCatalogResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string country_code = 3;
  if (!this->_internal_country_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_code());
  }

  // string version_token = 4;
  if (!this->_internal_version_token().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version_token());
  }

  // .explore_sites.Catalog catalog = 1;
  if (this->_internal_has_catalog()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *catalog_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCatalogResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetCatalogResponse*>(
      &from));
}

void GetCatalogResponse::MergeFrom(const GetCatalogResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:explore_sites.GetCatalogResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_country_code().empty()) {
    _internal_set_country_code(from._internal_country_code());
  }
  if (!from._internal_version_token().empty()) {
    _internal_set_version_token(from._internal_version_token());
  }
  if (from._internal_has_catalog()) {
    _internal_mutable_catalog()->::explore_sites::Catalog::MergeFrom(from._internal_catalog());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetCatalogResponse::CopyFrom(const GetCatalogResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:explore_sites.GetCatalogResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCatalogResponse::IsInitialized() const {
  return true;
}

void GetCatalogResponse::InternalSwap(GetCatalogResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &country_code_, lhs_arena,
      &other->country_code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_token_, lhs_arena,
      &other->version_token_, rhs_arena
  );
  swap(catalog_, other->catalog_);
}

std::string GetCatalogResponse::GetTypeName() const {
  return "explore_sites.GetCatalogResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace explore_sites
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::explore_sites::Catalog*
Arena::CreateMaybeMessage< ::explore_sites::Catalog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::explore_sites::Catalog >(arena);
}
template<> PROTOBUF_NOINLINE ::explore_sites::Category*
Arena::CreateMaybeMessage< ::explore_sites::Category >(Arena* arena) {
  return Arena::CreateMessageInternal< ::explore_sites::Category >(arena);
}
template<> PROTOBUF_NOINLINE ::explore_sites::Site*
Arena::CreateMaybeMessage< ::explore_sites::Site >(Arena* arena) {
  return Arena::CreateMessageInternal< ::explore_sites::Site >(arena);
}
template<> PROTOBUF_NOINLINE ::explore_sites::GetCatalogRequest*
Arena::CreateMaybeMessage< ::explore_sites::GetCatalogRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::explore_sites::GetCatalogRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::explore_sites::GetCatalogResponse*
Arena::CreateMaybeMessage< ::explore_sites::GetCatalogResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::explore_sites::GetCatalogResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
