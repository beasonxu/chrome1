-keep class java.util.function.BiConsumer
-keep class java.util.function.BiFunction
-keep class java.util.function.Consumer
-keep class java.util.function.Function
-keep class j$.util.Iterator { *; }
-keep class j$.util.Map$Entry { *; }
-keep class j$.util.Map { *; }
-keep class j$.util.Iterator$-CC {
    void $default$forEachRemaining(java.util.Iterator, j$.util.function.Consumer);
}
-keep class j$.util.Map$-CC {
    java.lang.Object $default$compute(java.util.Map, java.lang.Object, j$.util.function.BiFunction);
    java.lang.Object $default$computeIfAbsent(java.util.Map, java.lang.Object, j$.util.function.Function);
    java.lang.Object $default$computeIfPresent(java.util.Map, java.lang.Object, j$.util.function.BiFunction);
    void $default$forEach(java.util.Map, j$.util.function.BiConsumer);
    java.lang.Object $default$merge(java.util.Map, java.lang.Object, java.lang.Object, j$.util.function.BiFunction);
    java.lang.Object $default$putIfAbsent(java.util.Map, java.lang.Object, java.lang.Object);
    boolean $default$remove(java.util.Map, java.lang.Object, java.lang.Object);
    java.lang.Object $default$replace(java.util.Map, java.lang.Object, java.lang.Object);
    boolean $default$replace(java.util.Map, java.lang.Object, java.lang.Object, java.lang.Object);
    void $default$replaceAll(java.util.Map, j$.util.function.BiFunction);
}
-keep class j$.util.Optional {
    j$.util.Optional empty();
    java.lang.Object get();
    boolean isPresent();
    j$.util.Optional of(java.lang.Object);
}
-keep class j$.util.function.BiConsumer$VivifiedWrapper {
    j$.util.function.BiConsumer convert(java.util.function.BiConsumer);
}
-keep class j$.util.function.BiConsumer
-keep class j$.util.function.BiFunction$VivifiedWrapper {
    j$.util.function.BiFunction convert(java.util.function.BiFunction);
}
-keep class j$.util.function.BiFunction
-keep class j$.util.function.Consumer$VivifiedWrapper {
    j$.util.function.Consumer convert(java.util.function.Consumer);
}
-keep class j$.util.function.Consumer {
    void accept(java.lang.Object);
}
-keep class j$.util.function.Function$VivifiedWrapper {
    j$.util.function.Function convert(java.util.function.Function);
}
-keep class j$.util.function.Function
