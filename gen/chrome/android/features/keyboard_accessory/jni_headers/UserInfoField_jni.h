// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/keyboard_accessory/data/UserInfoField

#ifndef org_chromium_chrome_browser_keyboard_accessory_data_UserInfoField_JNI
#define org_chromium_chrome_browser_keyboard_accessory_data_UserInfoField_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField[];
const char kClassPath_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField[] =
    "org/chromium/chrome/browser/keyboard_accessory/data/UserInfoField";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(nullptr);
#ifndef org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz_defined
#define org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz_defined
inline jclass org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField,
      &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getDisplayText(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_UserInfoField_getDisplayText(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getDisplayText",
          "()Ljava/lang/String;",
          &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getDisplayText);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getTextToFill(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_UserInfoField_getTextToFill(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTextToFill",
          "()Ljava/lang/String;",
          &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getTextToFill);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getA11yDescription(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_UserInfoField_getA11yDescription(JNIEnv* env,
    const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getA11yDescription",
          "()Ljava/lang/String;",
          &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getA11yDescription);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getId(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_UserInfoField_getId(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getId",
          "()Ljava/lang/String;",
          &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_getId);

  jstring ret =
      static_cast<jstring>(env->CallObjectMethod(obj.obj(),
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_isSelectable(nullptr);
static jboolean Java_UserInfoField_isSelectable(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isSelectable",
          "()Z",
          &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_isSelectable);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_isObfuscated(nullptr);
static jboolean Java_UserInfoField_isObfuscated(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "isObfuscated",
          "()Z",
          &g_org_chromium_chrome_browser_keyboard_1accessory_data_UserInfoField_isObfuscated);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_keyboard_accessory_data_UserInfoField_JNI
