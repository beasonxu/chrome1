// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/vr/VrModuleProvider

#ifndef org_chromium_chrome_browser_vr_VrModuleProvider_JNI
#define org_chromium_chrome_browser_vr_VrModuleProvider_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_vr_VrModuleProvider[];
const char kClassPath_org_chromium_chrome_browser_vr_VrModuleProvider[] =
    "org/chromium/chrome/browser/vr/VrModuleProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_vr_VrModuleProvider_clazz(nullptr);
#ifndef org_chromium_chrome_browser_vr_VrModuleProvider_clazz_defined
#define org_chromium_chrome_browser_vr_VrModuleProvider_clazz_defined
inline jclass org_chromium_chrome_browser_vr_VrModuleProvider_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_vr_VrModuleProvider, "vr",
      &g_org_chromium_chrome_browser_vr_VrModuleProvider_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace vr {

static void JNI_VrModuleProvider_RegisterJni(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MhxC9zA0(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_VrModuleProvider_RegisterJni(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mmw1DU8y(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrModuleProvider,
    jobject caller,
    jboolean success) {
  VrModuleProvider* native = reinterpret_cast<VrModuleProvider*>(nativeVrModuleProvider);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnInstalledModule");
  return native->OnInstalledModule(env, base::android::JavaParamRef<jobject>(env, caller), success);
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_vr_VrModuleProvider_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VrModuleProvider_create(JNIEnv* env, jlong
    nativeVrModuleProvider) {
  jclass clazz = org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/vr/VrModuleProvider;",
          &g_org_chromium_chrome_browser_vr_VrModuleProvider_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeVrModuleProvider);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrModuleProvider_isModuleInstalled(nullptr);
static jboolean Java_VrModuleProvider_isModuleInstalled(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isModuleInstalled",
          "()Z",
          &g_org_chromium_chrome_browser_vr_VrModuleProvider_isModuleInstalled);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrModuleProvider_onNativeDestroy(nullptr);
static void Java_VrModuleProvider_onNativeDestroy(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroy",
          "()V",
          &g_org_chromium_chrome_browser_vr_VrModuleProvider_onNativeDestroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrModuleProvider_installModule(nullptr);
static void Java_VrModuleProvider_installModule(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& tab) {
  jclass clazz = org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrModuleProvider_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "installModule",
          "(Lorg/chromium/chrome/browser/tab/Tab;)V",
          &g_org_chromium_chrome_browser_vr_VrModuleProvider_installModule);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, tab.obj());
}

}  // namespace vr

#endif  // org_chromium_chrome_browser_vr_VrModuleProvider_JNI
