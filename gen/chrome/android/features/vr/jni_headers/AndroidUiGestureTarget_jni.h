// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/vr/AndroidUiGestureTarget

#ifndef org_chromium_chrome_browser_vr_AndroidUiGestureTarget_JNI
#define org_chromium_chrome_browser_vr_AndroidUiGestureTarget_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_vr_AndroidUiGestureTarget[];
const char kClassPath_org_chromium_chrome_browser_vr_AndroidUiGestureTarget[] =
    "org/chromium/chrome/browser/vr/AndroidUiGestureTarget";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(nullptr);
#ifndef org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz_defined
#define org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz_defined
inline jclass org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_vr_AndroidUiGestureTarget, "vr",
      &g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace vr {

static jlong JNI_AndroidUiGestureTarget_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jfloat scaleFactor,
    jfloat scrollRatio,
    jint touchSlop);

JNI_GENERATOR_EXPORT jlong Java_J_N_Mk5j7W4J(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jfloat scaleFactor,
    jfloat scrollRatio,
    jint touchSlop) {
  return JNI_AndroidUiGestureTarget_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      scaleFactor, scrollRatio, touchSlop);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_inject(nullptr);
static void Java_AndroidUiGestureTarget_inject(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper action,
    jlong timeInMs) {
  jclass clazz = org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "inject",
          "(IJ)V",
          &g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_inject);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(action), timeInMs);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_setPointer(nullptr);
static void Java_AndroidUiGestureTarget_setPointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper x,
    JniIntWrapper y) {
  jclass clazz = org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setPointer",
          "(II)V",
          &g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_setPointer);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(x), as_jint(y));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_setDelayedEvent(nullptr);
static void Java_AndroidUiGestureTarget_setDelayedEvent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper x,
    JniIntWrapper y,
    JniIntWrapper action,
    jlong timeInMs,
    JniIntWrapper delayMs) {
  jclass clazz = org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setDelayedEvent",
          "(IIIJI)V",
          &g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_setDelayedEvent);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(x), as_jint(y), as_jint(action), timeInMs,
              as_jint(delayMs));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_getNativeObject(nullptr);
static jlong Java_AndroidUiGestureTarget_getNativeObject(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_AndroidUiGestureTarget_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativeObject",
          "()J",
          &g_org_chromium_chrome_browser_vr_AndroidUiGestureTarget_getNativeObject);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace vr

#endif  // org_chromium_chrome_browser_vr_AndroidUiGestureTarget_JNI
