// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/vr/VrShellDelegate

#ifndef org_chromium_chrome_browser_vr_VrShellDelegate_JNI
#define org_chromium_chrome_browser_vr_VrShellDelegate_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_vr_VrShellDelegate[];
const char kClassPath_org_chromium_chrome_browser_vr_VrShellDelegate[] =
    "org/chromium/chrome/browser/vr/VrShellDelegate";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_vr_VrShellDelegate_clazz(nullptr);
#ifndef org_chromium_chrome_browser_vr_VrShellDelegate_clazz_defined
#define org_chromium_chrome_browser_vr_VrShellDelegate_clazz_defined
inline jclass org_chromium_chrome_browser_vr_VrShellDelegate_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_vr_VrShellDelegate,
      "vr", &g_org_chromium_chrome_browser_vr_VrShellDelegate_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace vr {

static jlong JNI_VrShellDelegate_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_M7uQy4b6(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_VrShellDelegate_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_VrShellDelegate_OnLibraryAvailable(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_M5BNAVgK(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_VrShellDelegate_OnLibraryAvailable(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MXq5KpR_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller,
    jboolean result) {
  VrShellDelegate* native = reinterpret_cast<VrShellDelegate*>(nativeVrShellDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetPresentResult");
  return native->SetPresentResult(env, base::android::JavaParamRef<jobject>(env, caller), result);
}

JNI_GENERATOR_EXPORT void Java_J_N_MTSox2k6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller) {
  VrShellDelegate* native = reinterpret_cast<VrShellDelegate*>(nativeVrShellDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPause");
  return native->OnPause(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MwPjVrWz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller) {
  VrShellDelegate* native = reinterpret_cast<VrShellDelegate*>(nativeVrShellDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnResume");
  return native->OnResume(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M72yrhTB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrShellDelegate,
    jobject caller) {
  VrShellDelegate* native = reinterpret_cast<VrShellDelegate*>(nativeVrShellDelegate);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_VrShellDelegate_RegisterVrAssetsComponent(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_Mb9hqS1F(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_VrShellDelegate_RegisterVrAssetsComponent(env);
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_vr_VrShellDelegate_getInstance(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VrShellDelegate_getInstance(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getInstance",
          "()Lorg/chromium/chrome/browser/vr/VrShellDelegate;",
          &g_org_chromium_chrome_browser_vr_VrShellDelegate_getInstance);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrShellDelegate_presentRequested(nullptr);
static void Java_VrShellDelegate_presentRequested(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "presentRequested",
          "()V",
          &g_org_chromium_chrome_browser_vr_VrShellDelegate_presentRequested);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrShellDelegate_exitWebVRPresent(nullptr);
static void Java_VrShellDelegate_exitWebVRPresent(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "exitWebVRPresent",
          "()V",
          &g_org_chromium_chrome_browser_vr_VrShellDelegate_exitWebVRPresent);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrShellDelegate_getNativePointer(nullptr);
static jlong Java_VrShellDelegate_getNativePointer(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrShellDelegate_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePointer",
          "()J",
          &g_org_chromium_chrome_browser_vr_VrShellDelegate_getNativePointer);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

}  // namespace vr

#endif  // org_chromium_chrome_browser_vr_VrShellDelegate_JNI
