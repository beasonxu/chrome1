// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/vr/VrInputConnection

#ifndef org_chromium_chrome_browser_vr_VrInputConnection_JNI
#define org_chromium_chrome_browser_vr_VrInputConnection_JNI

#include <jni.h>

#include "../../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_vr_VrInputConnection[];
const char kClassPath_org_chromium_chrome_browser_vr_VrInputConnection[] =
    "org/chromium/chrome/browser/vr/VrInputConnection";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_vr_VrInputConnection_clazz(nullptr);
#ifndef org_chromium_chrome_browser_vr_VrInputConnection_clazz_defined
#define org_chromium_chrome_browser_vr_VrInputConnection_clazz_defined
inline jclass org_chromium_chrome_browser_vr_VrInputConnection_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_vr_VrInputConnection, "vr",
      &g_org_chromium_chrome_browser_vr_VrInputConnection_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace vr {

JNI_GENERATOR_EXPORT void Java_J_N_MQhox5h_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeVrInputConnection,
    jobject caller,
    jstring text) {
  VrInputConnection* native = reinterpret_cast<VrInputConnection*>(nativeVrInputConnection);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTextState");
  return native->UpdateTextState(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, text));
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_vr_VrInputConnection_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_VrInputConnection_create(JNIEnv* env, jlong
    nativeVrInputConnection,
    const base::android::JavaRef<jobject>& contents) {
  jclass clazz = org_chromium_chrome_browser_vr_VrInputConnection_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_vr_VrInputConnection_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/content_public/browser/WebContents;)Lorg/chromium/chrome/browser/vr/VrInputConnection;",
          &g_org_chromium_chrome_browser_vr_VrInputConnection_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeVrInputConnection, contents.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrInputConnection_requestTextState(nullptr);
static void Java_VrInputConnection_requestTextState(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_vr_VrInputConnection_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrInputConnection_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "requestTextState",
          "()V",
          &g_org_chromium_chrome_browser_vr_VrInputConnection_requestTextState);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrInputConnection_onKeyboardEdit(nullptr);
static void Java_VrInputConnection_onKeyboardEdit(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobjectArray>& edits) {
  jclass clazz = org_chromium_chrome_browser_vr_VrInputConnection_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrInputConnection_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onKeyboardEdit",
          "([Lorg/chromium/chrome/browser/vr/keyboard/TextEditAction;)V",
          &g_org_chromium_chrome_browser_vr_VrInputConnection_onKeyboardEdit);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, edits.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_vr_VrInputConnection_submitInput(nullptr);
static void Java_VrInputConnection_submitInput(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_vr_VrInputConnection_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_vr_VrInputConnection_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "submitInput",
          "()V",
          &g_org_chromium_chrome_browser_vr_VrInputConnection_submitInput);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace vr

#endif  // org_chromium_chrome_browser_vr_VrInputConnection_JNI
