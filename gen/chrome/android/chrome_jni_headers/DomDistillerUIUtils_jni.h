// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/dom_distiller/DomDistillerUIUtils

#ifndef org_chromium_chrome_browser_dom_distiller_DomDistillerUIUtils_JNI
#define org_chromium_chrome_browser_dom_distiller_DomDistillerUIUtils_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils[];
const char kClassPath_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils[] =
    "org/chromium/chrome/browser/dom_distiller/DomDistillerUIUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz(nullptr);
#ifndef org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz_defined
#define org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz_defined
inline jclass org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils,
      &g_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace dom_distiller {
namespace android {


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_openSettings(nullptr);
static void Java_DomDistillerUIUtils_openSettings(JNIEnv* env, const
    base::android::JavaRef<jobject>& webContents) {
  jclass clazz = org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "openSettings",
          "(Lorg/chromium/content_public/browser/WebContents;)V",
          &g_org_chromium_chrome_browser_dom_1distiller_DomDistillerUIUtils_openSettings);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, webContents.obj());
}

}  // namespace android
}  // namespace dom_distiller

#endif  // org_chromium_chrome_browser_dom_distiller_DomDistillerUIUtils_JNI
