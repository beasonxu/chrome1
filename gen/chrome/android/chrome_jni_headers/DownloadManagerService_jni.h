// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadManagerService

#ifndef org_chromium_chrome_browser_download_DownloadManagerService_JNI
#define org_chromium_chrome_browser_download_DownloadManagerService_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_DownloadManagerService[];
const char kClassPath_org_chromium_chrome_browser_download_DownloadManagerService[] =
    "org/chromium/chrome/browser/download/DownloadManagerService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_DownloadManagerService_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_DownloadManagerService_clazz_defined
#define org_chromium_chrome_browser_download_DownloadManagerService_clazz_defined
inline jclass org_chromium_chrome_browser_download_DownloadManagerService_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_DownloadManagerService,
      &g_org_chromium_chrome_browser_download_DownloadManagerService_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jboolean JNI_DownloadManagerService_IsSupportedMimeType(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& mimeType);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M4t0L845(
    JNIEnv* env,
    jclass jcaller,
    jstring mimeType) {
  return JNI_DownloadManagerService_IsSupportedMimeType(env,
      base::android::JavaParamRef<jstring>(env, mimeType));
}

static jint JNI_DownloadManagerService_GetAutoResumptionLimit(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_M3NaDnJv(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_DownloadManagerService_GetAutoResumptionLimit(env);
}

static jlong JNI_DownloadManagerService_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jboolean isProfileAdded);

JNI_GENERATOR_EXPORT jlong Java_J_N_MeJ_00024lv4P(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jboolean isProfileAdded) {
  return JNI_DownloadManagerService_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      isProfileAdded);
}

JNI_GENERATOR_EXPORT void Java_J_N_M3D9bHLw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey,
    jint source) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "OpenDownload");
  return native->OpenDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey), source);
}

JNI_GENERATOR_EXPORT void Java_J_N_MieiRHrs(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey,
    jboolean hasUserGesture) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "ResumeDownload");
  return native->ResumeDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey), hasUserGesture);
}

JNI_GENERATOR_EXPORT void Java_J_N_MrbVtlld(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey,
    jboolean hasUserGesture) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "RetryDownload");
  return native->RetryDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey), hasUserGesture);
}

JNI_GENERATOR_EXPORT void Java_J_N_MV30ev0v(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelDownload");
  return native->CancelDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_MmztvsiA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "PauseDownload");
  return native->PauseDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_M8Q_1hBf_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveDownload");
  return native->RemoveDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_MbUQtFGf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jstring targetName,
    jobject callback,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "RenameDownload");
  return native->RenameDownload(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jstring>(env, targetName),
      base::android::JavaParamRef<jobject>(env, callback), base::android::JavaParamRef<jobject>(env,
      profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_M0Cf1c3Z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetAllDownloads");
  return native->GetAllDownloads(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQ35Y_00024D_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckForExternallyRemovedDownloads");
  return native->CheckForExternallyRemovedDownloads(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2cL0nU9(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring downloadGuid,
    jobject profileKey) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateLastAccessTime");
  return native->UpdateLastAccessTime(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, downloadGuid),
      base::android::JavaParamRef<jobject>(env, profileKey));
}

JNI_GENERATOR_EXPORT void Java_J_N_MFfdOo0Y(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jobject profile) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnProfileAdded");
  return native->OnProfileAdded(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, profile));
}

JNI_GENERATOR_EXPORT void Java_J_N_MKJzUTj3_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeDownloadManagerService,
    jobject caller,
    jstring url,
    jstring guid,
    jstring targetPath) {
  DownloadManagerService* native =
      reinterpret_cast<DownloadManagerService*>(nativeDownloadManagerService);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreateInterruptedDownloadForTest");
  return native->CreateInterruptedDownloadForTest(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, guid), base::android::JavaParamRef<jstring>(env,
      targetPath));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_handleOMADownload(nullptr);
static void Java_DownloadManagerService_handleOMADownload(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& download,
    jlong systemDownloadId) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "handleOMADownload",
          "(Lorg/chromium/chrome/browser/download/DownloadItem;J)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_handleOMADownload);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, download.obj(), systemDownloadId);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_openDownloadsPage(nullptr);
static void Java_DownloadManagerService_openDownloadsPage(JNIEnv* env, const
    base::android::JavaRef<jobject>& otrProfileID,
    JniIntWrapper source) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "openDownloadsPage",
          "(Lorg/chromium/chrome/browser/profiles/OTRProfileID;I)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_openDownloadsPage);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, otrProfileID.obj(), as_jint(source));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_onResumptionFailed(nullptr);
static void Java_DownloadManagerService_onResumptionFailed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& downloadGuid) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onResumptionFailed",
          "(Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_onResumptionFailed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, downloadGuid.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_createDownloadItemList(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_DownloadManagerService_createDownloadItemList(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "createDownloadItemList",
          "()Ljava/util/List;",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_createDownloadItemList);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_addDownloadItemToList(nullptr);
static void Java_DownloadManagerService_addDownloadItemToList(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& list,
    const base::android::JavaRef<jobject>& item) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addDownloadItemToList",
          "(Ljava/util/List;Lorg/chromium/chrome/browser/download/DownloadItem;)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_addDownloadItemToList);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, list.obj(), item.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_onAllDownloadsRetrieved(nullptr);
static void Java_DownloadManagerService_onAllDownloadsRetrieved(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& list,
    const base::android::JavaRef<jobject>& profileKey) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onAllDownloadsRetrieved",
          "(Ljava/util/List;Lorg/chromium/chrome/browser/profiles/ProfileKey;)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_onAllDownloadsRetrieved);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, list.obj(), profileKey.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemCreated(nullptr);
static void Java_DownloadManagerService_onDownloadItemCreated(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& item) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onDownloadItemCreated",
          "(Lorg/chromium/chrome/browser/download/DownloadItem;)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemCreated);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, item.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemUpdated(nullptr);
static void Java_DownloadManagerService_onDownloadItemUpdated(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& item) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onDownloadItemUpdated",
          "(Lorg/chromium/chrome/browser/download/DownloadItem;)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemUpdated);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, item.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemRemoved(nullptr);
static void Java_DownloadManagerService_onDownloadItemRemoved(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& guid,
    const base::android::JavaRef<jobject>& otrProfileID) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onDownloadItemRemoved",
          "(Ljava/lang/String;Lorg/chromium/chrome/browser/profiles/OTRProfileID;)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemRemoved);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, guid.obj(), otrProfileID.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_openDownloadItem(nullptr);
static void Java_DownloadManagerService_openDownloadItem(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& downloadItem,
    JniIntWrapper source) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "openDownloadItem",
          "(Lorg/chromium/chrome/browser/download/DownloadItem;I)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_openDownloadItem);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, downloadItem.obj(), as_jint(source));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemCanceled(nullptr);
static void Java_DownloadManagerService_onDownloadItemCanceled(JNIEnv* env, const
    base::android::JavaRef<jobject>& item,
    jboolean isExternalStorageMissing) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadManagerService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadManagerService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onDownloadItemCanceled",
          "(Lorg/chromium/chrome/browser/download/DownloadItem;Z)V",
          &g_org_chromium_chrome_browser_download_DownloadManagerService_onDownloadItemCanceled);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, item.obj(), isExternalStorageMissing);
}

#endif  // org_chromium_chrome_browser_download_DownloadManagerService_JNI
