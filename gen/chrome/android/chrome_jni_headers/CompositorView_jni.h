// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/CompositorView

#ifndef org_chromium_chrome_browser_compositor_CompositorView_JNI
#define org_chromium_chrome_browser_compositor_CompositorView_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_compositor_CompositorView[];
const char kClassPath_org_chromium_chrome_browser_compositor_CompositorView[] =
    "org/chromium/chrome/browser/compositor/CompositorView";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_compositor_CompositorView_clazz(nullptr);
#ifndef org_chromium_chrome_browser_compositor_CompositorView_clazz_defined
#define org_chromium_chrome_browser_compositor_CompositorView_clazz_defined
inline jclass org_chromium_chrome_browser_compositor_CompositorView_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_compositor_CompositorView,
      &g_org_chromium_chrome_browser_compositor_CompositorView_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_CompositorView_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jboolean lowMemDevice,
    const base::android::JavaParamRef<jobject>& windowAndroid,
    const base::android::JavaParamRef<jobject>& tabContentManager);

JNI_GENERATOR_EXPORT jlong Java_J_N_M1onz6N_00024(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jboolean lowMemDevice,
    jobject windowAndroid,
    jobject tabContentManager) {
  return JNI_CompositorView_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      lowMemDevice, base::android::JavaParamRef<jobject>(env, windowAndroid),
      base::android::JavaParamRef<jobject>(env, tabContentManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_MsBICFNS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MKvVEaSX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetResourceManager", NULL);
  return native->GetResourceManager(env, base::android::JavaParamRef<jobject>(env,
      caller)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MGPC4Ktv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceCreated");
  return native->SurfaceCreated(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MyANQhkH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceDestroyed");
  return native->SurfaceDestroyed(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MH1eqy7s(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jint format,
    jint width,
    jint height,
    jboolean backedBySurfaceTexture,
    jobject surface) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SurfaceChanged");
  return native->SurfaceChanged(env, base::android::JavaParamRef<jobject>(env, caller), format,
      width, height, backedBySurfaceTexture, base::android::JavaParamRef<jobject>(env, surface));
}

JNI_GENERATOR_EXPORT void Java_J_N_MzYzRqF3(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jobject webContents,
    jint width,
    jint height) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPhysicalBackingSizeChanged");
  return native->OnPhysicalBackingSizeChanged(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, webContents), width, height);
}

JNI_GENERATOR_EXPORT void Java_J_N_MI_00024giMjY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jobject webContents,
    jboolean controlsResizeView) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnControlsResizeViewChanged");
  return native->OnControlsResizeViewChanged(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents), controlsResizeView);
}

JNI_GENERATOR_EXPORT void Java_J_N_MGbjFlrB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jobject webContents,
    jint x,
    jint y,
    jint width,
    jint height) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "NotifyVirtualKeyboardOverlayRect");
  return native->NotifyVirtualKeyboardOverlayRect(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, webContents), x, y, width, height);
}

JNI_GENERATOR_EXPORT void Java_J_N_MPzbdzfI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "FinalizeLayers");
  return native->FinalizeLayers(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_1Nkznfe(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetNeedsComposite");
  return native->SetNeedsComposite(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mjz8vYEz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetLayoutBounds");
  return native->SetLayoutBounds(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M_00024Spxfoj(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jboolean enabled) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetOverlayVideoMode");
  return native->SetOverlayVideoMode(env, base::android::JavaParamRef<jobject>(env, caller),
      enabled);
}

JNI_GENERATOR_EXPORT void Java_J_N_MfNGeyza(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jboolean enabled) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetOverlayImmersiveArMode");
  return native->SetOverlayImmersiveArMode(env, base::android::JavaParamRef<jobject>(env, caller),
      enabled);
}

JNI_GENERATOR_EXPORT void Java_J_N_MPdbXv3F(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jobject sceneLayer) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetSceneLayer");
  return native->SetSceneLayer(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, sceneLayer));
}

JNI_GENERATOR_EXPORT void Java_J_N_M0hIhbxf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller,
    jobject window) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCompositorWindow");
  return native->SetCompositorWindow(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, window));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mlw_1qgLA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "CacheBackBufferForCurrentSurface");
  return native->CacheBackBufferForCurrentSurface(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MVesqb5U(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "EvictCachedBackBuffer");
  return native->EvictCachedBackBuffer(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MefOJ2yP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnTabChanged");
  return native->OnTabChanged(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mszb0mNw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jobject caller) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "PreserveChildSurfaceControls");
  return native->PreserveChildSurfaceControls(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MsdzyWED(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCompositorView,
    jboolean enabled) {
  CompositorView* native = reinterpret_cast<CompositorView*>(nativeCompositorView);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDidSwapBuffersCallbackEnabled");
  return native->SetDidSwapBuffersCallbackEnabled(env, enabled);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_CompositorView_onCompositorLayout(nullptr);
static void Java_CompositorView_onCompositorLayout(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_compositor_CompositorView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_CompositorView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onCompositorLayout",
          "()V",
          &g_org_chromium_chrome_browser_compositor_CompositorView_onCompositorLayout);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_CompositorView_recreateSurface(nullptr);
static void Java_CompositorView_recreateSurface(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_compositor_CompositorView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_CompositorView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "recreateSurface",
          "()V",
          &g_org_chromium_chrome_browser_compositor_CompositorView_recreateSurface);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_CompositorView_didSwapFrame(nullptr);
static void Java_CompositorView_didSwapFrame(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, JniIntWrapper pendingFrameCount) {
  jclass clazz = org_chromium_chrome_browser_compositor_CompositorView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_CompositorView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didSwapFrame",
          "(I)V",
          &g_org_chromium_chrome_browser_compositor_CompositorView_didSwapFrame);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(pendingFrameCount));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_CompositorView_didSwapBuffers(nullptr);
static void Java_CompositorView_didSwapBuffers(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, jboolean swappedCurrentSize) {
  jclass clazz = org_chromium_chrome_browser_compositor_CompositorView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_CompositorView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "didSwapBuffers",
          "(Z)V",
          &g_org_chromium_chrome_browser_compositor_CompositorView_didSwapBuffers);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, swappedCurrentSize);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_CompositorView_notifyWillUseSurfaceControl(nullptr);
static void Java_CompositorView_notifyWillUseSurfaceControl(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_compositor_CompositorView_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_CompositorView_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyWillUseSurfaceControl",
          "()V",
          &g_org_chromium_chrome_browser_compositor_CompositorView_notifyWillUseSurfaceControl);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

}  // namespace android

#endif  // org_chromium_chrome_browser_compositor_CompositorView_JNI
