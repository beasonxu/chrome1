// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/browsing_data/BrowsingDataBridge

#ifndef org_chromium_chrome_browser_browsing_data_BrowsingDataBridge_JNI
#define org_chromium_chrome_browser_browsing_data_BrowsingDataBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge[];
const char kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge[] =
    "org/chromium/chrome/browser/browsing_data/BrowsingDataBridge";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback[];
const char
    kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback[]
    = "org/chromium/chrome/browser/browsing_data/BrowsingDataBridge$ImportantSitesCallback";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener[];
const char
    kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener[]
    =
    "org/chromium/chrome/browser/browsing_data/BrowsingDataBridge$OtherFormsOfBrowsingHistoryListener";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz_defined
#define org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz_defined
inline jclass org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge,
      &g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz(nullptr);
#ifndef org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz_defined
#define org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz_defined
inline jclass
    org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback,
      &g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz(nullptr);
#ifndef org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz_defined
#define org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz_defined
inline jclass
    org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener,
      &g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_BrowsingDataBridge_ClearBrowsingData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jintArray>& dataTypes,
    jint timePeriod,
    const base::android::JavaParamRef<jobjectArray>& excludedDomains,
    const base::android::JavaParamRef<jintArray>& excludedDomainReasons,
    const base::android::JavaParamRef<jobjectArray>& ignoredDomains,
    const base::android::JavaParamRef<jintArray>& ignoredDomainReasons);

JNI_GENERATOR_EXPORT void Java_J_N_McYsV35Z(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject profile,
    jintArray dataTypes,
    jint timePeriod,
    jobjectArray excludedDomains,
    jintArray excludedDomainReasons,
    jobjectArray ignoredDomains,
    jintArray ignoredDomainReasons) {
  return JNI_BrowsingDataBridge_ClearBrowsingData(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jintArray>(env, dataTypes), timePeriod,
      base::android::JavaParamRef<jobjectArray>(env, excludedDomains),
      base::android::JavaParamRef<jintArray>(env, excludedDomainReasons),
      base::android::JavaParamRef<jobjectArray>(env, ignoredDomains),
      base::android::JavaParamRef<jintArray>(env, ignoredDomainReasons));
}

static void JNI_BrowsingDataBridge_ClearSameSiteNoneData(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MsjqGJh5(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject profile,
    jobject callback) {
  return JNI_BrowsingDataBridge_ClearSameSiteNoneData(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_BrowsingDataBridge_RequestInfoAboutOtherFormsOfBrowsingHistory(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    const base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jobject>& listener);

JNI_GENERATOR_EXPORT void Java_J_N_MxCHuwXz(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jobject profile,
    jobject listener) {
  return JNI_BrowsingDataBridge_RequestInfoAboutOtherFormsOfBrowsingHistory(env,
      base::android::JavaParamRef<jobject>(env, caller), base::android::JavaParamRef<jobject>(env,
      profile), base::android::JavaParamRef<jobject>(env, listener));
}

static void JNI_BrowsingDataBridge_FetchImportantSites(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MCILE93S(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jobject callback) {
  return JNI_BrowsingDataBridge_FetchImportantSites(env, base::android::JavaParamRef<jobject>(env,
      profile), base::android::JavaParamRef<jobject>(env, callback));
}

static jint JNI_BrowsingDataBridge_GetMaxImportantSites(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_Mz7sCzLM(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowsingDataBridge_GetMaxImportantSites(env);
}

static void JNI_BrowsingDataBridge_MarkOriginAsImportantForTesting(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& origin);

JNI_GENERATOR_EXPORT void Java_J_N_MJWslCT0_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jstring origin) {
  return JNI_BrowsingDataBridge_MarkOriginAsImportantForTesting(env,
      base::android::JavaParamRef<jobject>(env, profile), base::android::JavaParamRef<jstring>(env,
      origin));
}

static jboolean JNI_BrowsingDataBridge_GetBrowsingDataDeletionPreference(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jint dataType,
    jint clearBrowsingDataTab);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MK1rP8DI(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint dataType,
    jint clearBrowsingDataTab) {
  return JNI_BrowsingDataBridge_GetBrowsingDataDeletionPreference(env,
      base::android::JavaParamRef<jobject>(env, caller), dataType, clearBrowsingDataTab);
}

static void JNI_BrowsingDataBridge_SetBrowsingDataDeletionPreference(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jint dataType,
    jint clearBrowsingDataTab,
    jboolean value);

JNI_GENERATOR_EXPORT void Java_J_N_MBI7g3zY(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint dataType,
    jint clearBrowsingDataTab,
    jboolean value) {
  return JNI_BrowsingDataBridge_SetBrowsingDataDeletionPreference(env,
      base::android::JavaParamRef<jobject>(env, caller), dataType, clearBrowsingDataTab, value);
}

static jint JNI_BrowsingDataBridge_GetBrowsingDataDeletionTimePeriod(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jint clearBrowsingDataTab);

JNI_GENERATOR_EXPORT jint Java_J_N_MWrAQRuo(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint clearBrowsingDataTab) {
  return JNI_BrowsingDataBridge_GetBrowsingDataDeletionTimePeriod(env,
      base::android::JavaParamRef<jobject>(env, caller), clearBrowsingDataTab);
}

static void JNI_BrowsingDataBridge_SetBrowsingDataDeletionTimePeriod(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jint clearBrowsingDataTab,
    jint timePeriod);

JNI_GENERATOR_EXPORT void Java_J_N_MyZiGmx0(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint clearBrowsingDataTab,
    jint timePeriod) {
  return JNI_BrowsingDataBridge_SetBrowsingDataDeletionTimePeriod(env,
      base::android::JavaParamRef<jobject>(env, caller), clearBrowsingDataTab, timePeriod);
}

static jint JNI_BrowsingDataBridge_GetLastClearBrowsingDataTab(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jint Java_J_N_MD5TSIMJ(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_BrowsingDataBridge_GetLastClearBrowsingDataTab(env,
      base::android::JavaParamRef<jobject>(env, caller));
}

static void JNI_BrowsingDataBridge_SetLastClearBrowsingDataTab(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller,
    jint lastTab);

JNI_GENERATOR_EXPORT void Java_J_N_MrfS11o2(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint lastTab) {
  return JNI_BrowsingDataBridge_SetLastClearBrowsingDataTab(env,
      base::android::JavaParamRef<jobject>(env, caller), lastTab);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_onImportantRegisterableDomainsReady(nullptr);
static void Java_ImportantSitesCallback_onImportantRegisterableDomainsReady(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobjectArray>& domains,
    const base::android::JavaRef<jobjectArray>& exampleOrigins,
    const base::android::JavaRef<jintArray>& importantReasons,
    jboolean dialogDisabled) {
  jclass clazz =
      org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onImportantRegisterableDomainsReady",
          "([Ljava/lang/String;[Ljava/lang/String;[IZ)V",
&g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024ImportantSitesCallback_onImportantRegisterableDomainsReady);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, domains.obj(), exampleOrigins.obj(), importantReasons.obj(),
              dialogDisabled);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_enableDialogAboutOtherFormsOfBrowsingHistory(nullptr);
static void
    Java_OtherFormsOfBrowsingHistoryListener_enableDialogAboutOtherFormsOfBrowsingHistory(JNIEnv*
    env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "enableDialogAboutOtherFormsOfBrowsingHistory",
          "()V",
&g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_00024OtherFormsOfBrowsingHistoryListener_enableDialogAboutOtherFormsOfBrowsingHistory);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_browsingDataCleared(nullptr);
static void Java_BrowsingDataBridge_browsingDataCleared(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "browsingDataCleared",
          "()V",
          &g_org_chromium_chrome_browser_browsing_1data_BrowsingDataBridge_browsingDataCleared);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_browsing_data_BrowsingDataBridge_JNI
