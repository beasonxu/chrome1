// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feedback/ScreenshotTask

#ifndef org_chromium_chrome_browser_feedback_ScreenshotTask_JNI
#define org_chromium_chrome_browser_feedback_ScreenshotTask_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_feedback_ScreenshotTask[];
const char kClassPath_org_chromium_chrome_browser_feedback_ScreenshotTask[] =
    "org/chromium/chrome/browser/feedback/ScreenshotTask";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_feedback_ScreenshotTask_clazz(nullptr);
#ifndef org_chromium_chrome_browser_feedback_ScreenshotTask_clazz_defined
#define org_chromium_chrome_browser_feedback_ScreenshotTask_clazz_defined
inline jclass org_chromium_chrome_browser_feedback_ScreenshotTask_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_feedback_ScreenshotTask,
      &g_org_chromium_chrome_browser_feedback_ScreenshotTask_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace chrome {
namespace android {

static void JNI_ScreenshotTask_GrabWindowSnapshotAsync(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& callback,
    const base::android::JavaParamRef<jobject>& window,
    jint width,
    jint height);

JNI_GENERATOR_EXPORT void Java_J_N_MJ03E235(
    JNIEnv* env,
    jclass jcaller,
    jobject callback,
    jobject window,
    jint width,
    jint height) {
  return JNI_ScreenshotTask_GrabWindowSnapshotAsync(env, base::android::JavaParamRef<jobject>(env,
      callback), base::android::JavaParamRef<jobject>(env, window), width, height);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_feedback_ScreenshotTask_onBytesReceived(nullptr);
static void Java_ScreenshotTask_onBytesReceived(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jbyteArray>& pngBytes) {
  jclass clazz = org_chromium_chrome_browser_feedback_ScreenshotTask_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_feedback_ScreenshotTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onBytesReceived",
          "([B)V",
          &g_org_chromium_chrome_browser_feedback_ScreenshotTask_onBytesReceived);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, pngBytes.obj());
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_feedback_ScreenshotTask_JNI
