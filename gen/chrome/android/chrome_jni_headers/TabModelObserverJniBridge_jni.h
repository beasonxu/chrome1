// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/tabmodel/TabModelObserverJniBridge

#ifndef org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_JNI
#define org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge[];
const char kClassPath_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge[] =
    "org/chromium/chrome/browser/tabmodel/TabModelObserverJniBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz_defined
#define org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz_defined
inline jclass org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge,
      &g_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_M15BMjns(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab,
    jint type,
    jint lastId) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidSelectTab");
  return native->DidSelectTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), type, lastId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MSSvav7n(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab,
    jboolean animate) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "WillCloseTab");
  return native->WillCloseTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), animate);
}

JNI_GENERATOR_EXPORT void Java_J_N_MHr_00024s7jo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jint tabId,
    jboolean incognito) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFinishingTabClosure");
  return native->OnFinishingTabClosure(env, base::android::JavaParamRef<jobject>(env, caller),
      tabId, incognito);
}

JNI_GENERATOR_EXPORT void Java_J_N_MNLupLtx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobjectArray tabs) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnFinishingMultipleTabClosure");
  return native->OnFinishingMultipleTabClosure(env, base::android::JavaParamRef<jobject>(env,
      caller), base::android::JavaParamRef<jobjectArray>(env, tabs));
}

JNI_GENERATOR_EXPORT void Java_J_N_MMKCgOHG(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab,
    jint type) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "WillAddTab");
  return native->WillAddTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), type);
}

JNI_GENERATOR_EXPORT void Java_J_N_M7iC4IGa(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab,
    jint type) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidAddTab");
  return native->DidAddTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), type);
}

JNI_GENERATOR_EXPORT void Java_J_N_MMKEWgan(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab,
    jint newIndex,
    jint curIndex) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "DidMoveTab");
  return native->DidMoveTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), newIndex, curIndex);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJ8c7fEV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TabPendingClosure");
  return native->TabPendingClosure(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab));
}

JNI_GENERATOR_EXPORT void Java_J_N_MkEswtJX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TabClosureUndone");
  return native->TabClosureUndone(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab));
}

JNI_GENERATOR_EXPORT void Java_J_N_MRzpb9vm(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TabClosureCommitted");
  return native->TabClosureCommitted(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab));
}

JNI_GENERATOR_EXPORT void Java_J_N_M8YIOTao(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobjectArray tabs) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "AllTabsPendingClosure");
  return native->AllTabsPendingClosure(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobjectArray>(env, tabs));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2XM7FhU(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "AllTabsClosureCommitted");
  return native->AllTabsClosureCommitted(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M9V3veZz(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabModelObserverJniBridge,
    jobject caller,
    jobject tab) {
  TabModelObserverJniBridge* native =
      reinterpret_cast<TabModelObserverJniBridge*>(nativeTabModelObserverJniBridge);
  CHECK_NATIVE_PTR(env, jcaller, native, "TabRemoved");
  return native->TabRemoved(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_TabModelObserverJniBridge_create(JNIEnv* env,
    jlong nativeTabModelObserverJniBridge,
    const base::android::JavaRef<jobject>& tabModel) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/chrome/browser/tabmodel/TabModel;)Lorg/chromium/chrome/browser/tabmodel/TabModelObserverJniBridge;",
          &g_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeTabModelObserverJniBridge, tabModel.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_detachFromTabModel(nullptr);
static void Java_TabModelObserverJniBridge_detachFromTabModel(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "detachFromTabModel",
          "()V",
          &g_org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_detachFromTabModel);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_tabmodel_TabModelObserverJniBridge_JNI
