// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/ReaderModeInfoBar

#ifndef org_chromium_chrome_browser_infobar_ReaderModeInfoBar_JNI
#define org_chromium_chrome_browser_infobar_ReaderModeInfoBar_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_infobar_ReaderModeInfoBar[];
const char kClassPath_org_chromium_chrome_browser_infobar_ReaderModeInfoBar[] =
    "org/chromium/chrome/browser/infobar/ReaderModeInfoBar";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz(nullptr);
#ifndef org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz_defined
#define org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz_defined
inline jclass org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_infobar_ReaderModeInfoBar,
      &g_org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_ReaderModeInfoBar_Create(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    tab);

JNI_GENERATOR_EXPORT void Java_J_N_MqhmiFry(
    JNIEnv* env,
    jclass jcaller,
    jobject tab) {
  return JNI_ReaderModeInfoBar_Create(env, base::android::JavaParamRef<jobject>(env, tab));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MTkhOevD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeReaderModeInfoBar,
    jobject caller) {
  ReaderModeInfoBar* native = reinterpret_cast<ReaderModeInfoBar*>(nativeReaderModeInfoBar);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetTab", NULL);
  return native->GetTab(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_infobar_ReaderModeInfoBar_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ReaderModeInfoBar_create(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_infobar_ReaderModeInfoBar_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "()Lorg/chromium/chrome/browser/infobar/ReaderModeInfoBar;",
          &g_org_chromium_chrome_browser_infobar_ReaderModeInfoBar_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_chrome_browser_infobar_ReaderModeInfoBar_JNI
