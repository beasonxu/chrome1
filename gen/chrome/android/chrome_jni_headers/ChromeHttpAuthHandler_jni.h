// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/login/ChromeHttpAuthHandler

#ifndef org_chromium_chrome_browser_login_ChromeHttpAuthHandler_JNI
#define org_chromium_chrome_browser_login_ChromeHttpAuthHandler_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_login_ChromeHttpAuthHandler[];
const char kClassPath_org_chromium_chrome_browser_login_ChromeHttpAuthHandler[] =
    "org/chromium/chrome/browser/login/ChromeHttpAuthHandler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(nullptr);
#ifndef org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz_defined
#define org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz_defined
inline jclass org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_login_ChromeHttpAuthHandler,
      &g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MAMBiVB_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeChromeHttpAuthHandler,
    jobject caller,
    jstring username,
    jstring password) {
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetAuth");
  return native->SetAuth(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, username), base::android::JavaParamRef<jstring>(env,
      password));
}

JNI_GENERATOR_EXPORT void Java_J_N_MbTC7yfl(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeChromeHttpAuthHandler,
    jobject caller) {
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "CancelAuth");
  return native->CancelAuth(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MDNVFLnS(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeChromeHttpAuthHandler,
    jobject caller) {
  ChromeHttpAuthHandler* native =
      reinterpret_cast<ChromeHttpAuthHandler*>(nativeChromeHttpAuthHandler);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetMessageBody", NULL);
  return native->GetMessageBody(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ChromeHttpAuthHandler_create(JNIEnv* env,
    jlong nativeChromeHttpAuthHandler) {
  jclass clazz = org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/chrome/browser/login/ChromeHttpAuthHandler;",
          &g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeChromeHttpAuthHandler);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_showDialog(nullptr);
static void Java_ChromeHttpAuthHandler_showDialog(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& tab,
    const base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showDialog",
          "(Lorg/chromium/chrome/browser/tab/Tab;Lorg/chromium/ui/base/WindowAndroid;)V",
          &g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_showDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, tab.obj(), windowAndroid.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_closeDialog(nullptr);
static void Java_ChromeHttpAuthHandler_closeDialog(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "closeDialog",
          "()V",
          &g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_closeDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_onNativeDestroyed(nullptr);
static void Java_ChromeHttpAuthHandler_onNativeDestroyed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onNativeDestroyed",
          "()V",
          &g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_onNativeDestroyed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_onAutofillDataAvailable(nullptr);
static void Java_ChromeHttpAuthHandler_onAutofillDataAvailable(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& username,
    const base::android::JavaRef<jstring>& password) {
  jclass clazz = org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_login_ChromeHttpAuthHandler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onAutofillDataAvailable",
          "(Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_login_ChromeHttpAuthHandler_onAutofillDataAvailable);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, username.obj(), password.obj());
}

#endif  // org_chromium_chrome_browser_login_ChromeHttpAuthHandler_JNI
