// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/offlinepages/BackgroundSchedulerBridge

#ifndef org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_JNI
#define org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge[];
const char kClassPath_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge[] =
    "org/chromium/chrome/browser/offlinepages/BackgroundSchedulerBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz_defined
#define org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz_defined
inline jclass org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge,
      &g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace offline_pages {
namespace android {

static jboolean JNI_BackgroundSchedulerBridge_StartScheduledProcessing(JNIEnv* env, jboolean
    powerConnected,
    jint batteryPercentage,
    jint netConnectionType,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MrvK6_00024zt(
    JNIEnv* env,
    jclass jcaller,
    jboolean powerConnected,
    jint batteryPercentage,
    jint netConnectionType,
    jobject callback) {
  return JNI_BackgroundSchedulerBridge_StartScheduledProcessing(env, powerConnected,
      batteryPercentage, netConnectionType, base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_BackgroundSchedulerBridge_StopScheduledProcessing(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MMBt6JJr(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BackgroundSchedulerBridge_StopScheduledProcessing(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_schedule(nullptr);
static void Java_BackgroundSchedulerBridge_schedule(JNIEnv* env, const
    base::android::JavaRef<jobject>& triggerConditions) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "schedule",
          "(Lorg/chromium/chrome/browser/offlinepages/TriggerConditions;)V",
          &g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_schedule);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, triggerConditions.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_backupSchedule(nullptr);
static void Java_BackgroundSchedulerBridge_backupSchedule(JNIEnv* env, const
    base::android::JavaRef<jobject>& triggerConditions,
    jlong delayInSeconds) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "backupSchedule",
          "(Lorg/chromium/chrome/browser/offlinepages/TriggerConditions;J)V",
          &g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_backupSchedule);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, triggerConditions.obj(), delayInSeconds);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_unschedule(nullptr);
static void Java_BackgroundSchedulerBridge_unschedule(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "unschedule",
          "()V",
          &g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_unschedule);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_getPowerConditions(nullptr);
static jboolean Java_BackgroundSchedulerBridge_getPowerConditions(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getPowerConditions",
          "()Z",
          &g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_getPowerConditions);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_getBatteryConditions(nullptr);
static jint Java_BackgroundSchedulerBridge_getBatteryConditions(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getBatteryConditions",
          "()I",
&g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_getBatteryConditions);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_getNetworkConditions(nullptr);
static jint Java_BackgroundSchedulerBridge_getNetworkConditions(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getNetworkConditions",
          "()I",
&g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_getNetworkConditions);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_createTriggerConditions(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_BackgroundSchedulerBridge_createTriggerConditions(JNIEnv* env, jboolean
    requirePowerConnected,
    JniIntWrapper minimumBatteryPercentage,
    jboolean requireUnmeteredNetwork) {
  jclass clazz = org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createTriggerConditions",
          "(ZIZ)Lorg/chromium/chrome/browser/offlinepages/TriggerConditions;",
&g_org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_createTriggerConditions);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, requirePowerConnected, as_jint(minimumBatteryPercentage),
              requireUnmeteredNetwork);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_BackgroundSchedulerBridge_JNI
