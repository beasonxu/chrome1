// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/explore_sites/ExploreSitesBridge

#ifndef org_chromium_chrome_browser_explore_sites_ExploreSitesBridge_JNI
#define org_chromium_chrome_browser_explore_sites_ExploreSitesBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge[];
const char kClassPath_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge[] =
    "org/chromium/chrome/browser/explore_sites/ExploreSitesBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz_defined
#define org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz_defined
inline jclass org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge,
      &g_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace explore_sites {

static jint JNI_ExploreSitesBridge_GetVariation(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_MwBQ_000240Eq(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_ExploreSitesBridge_GetVariation(env);
}

static jint JNI_ExploreSitesBridge_GetDenseVariation(JNIEnv* env);

JNI_GENERATOR_EXPORT jint Java_J_N_M81abqfZ(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_ExploreSitesBridge_GetDenseVariation(env);
}

static void JNI_ExploreSitesBridge_GetIcon(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    profile,
    jint siteID,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MLeky4k9(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jint siteID,
    jobject callback) {
  return JNI_ExploreSitesBridge_GetIcon(env, base::android::JavaParamRef<jobject>(env, profile),
      siteID, base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_ExploreSitesBridge_UpdateCatalogFromNetwork(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    jboolean isImmediateFetch,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MYfYpI3c(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jboolean isImmediateFetch,
    jobject callback) {
  return JNI_ExploreSitesBridge_UpdateCatalogFromNetwork(env,
      base::android::JavaParamRef<jobject>(env, profile), isImmediateFetch,
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_ExploreSitesBridge_GetSummaryImage(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    jint pixelSize,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_Mz5zXINc(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jint pixelSize,
    jobject callback) {
  return JNI_ExploreSitesBridge_GetSummaryImage(env, base::android::JavaParamRef<jobject>(env,
      profile), pixelSize, base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_ExploreSitesBridge_BlockSite(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT void Java_J_N_MJLsMSPT(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jstring url) {
  return JNI_ExploreSitesBridge_BlockSite(env, base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, url));
}

static void JNI_ExploreSitesBridge_RecordClick(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& url,
    jint type);

JNI_GENERATOR_EXPORT void Java_J_N_M3SRRqtf(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jstring url,
    jint type) {
  return JNI_ExploreSitesBridge_RecordClick(env, base::android::JavaParamRef<jobject>(env, profile),
      base::android::JavaParamRef<jstring>(env, url), type);
}

static void JNI_ExploreSitesBridge_GetCatalog(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    jint source,
    const base::android::JavaParamRef<jobject>& result,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MdXzcxSm(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jint source,
    jobject result,
    jobject callback) {
  return JNI_ExploreSitesBridge_GetCatalog(env, base::android::JavaParamRef<jobject>(env, profile),
      source, base::android::JavaParamRef<jobject>(env, result),
      base::android::JavaParamRef<jobject>(env, callback));
}

static void JNI_ExploreSitesBridge_InitializeCatalog(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    jint source);

JNI_GENERATOR_EXPORT void Java_J_N_Mr5wBIg_1(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jint source) {
  return JNI_ExploreSitesBridge_InitializeCatalog(env, base::android::JavaParamRef<jobject>(env,
      profile), source);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_scheduleDailyTask(nullptr);
static void Java_ExploreSitesBridge_scheduleDailyTask(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "scheduleDailyTask",
          "()V",
          &g_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_scheduleDailyTask);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_getScaleFactorFromDevice(nullptr);
static jfloat Java_ExploreSitesBridge_getScaleFactorFromDevice(JNIEnv* env) {
  jclass clazz = org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getScaleFactorFromDevice",
          "()F",
&g_org_chromium_chrome_browser_explore_1sites_ExploreSitesBridge_getScaleFactorFromDevice);

  jfloat ret =
      env->CallStaticFloatMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace explore_sites

#endif  // org_chromium_chrome_browser_explore_sites_ExploreSitesBridge_JNI
