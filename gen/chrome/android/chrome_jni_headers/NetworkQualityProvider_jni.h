// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/net/nqe/NetworkQualityProvider

#ifndef org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_JNI
#define org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider[];
const char kClassPath_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider[] =
    "org/chromium/chrome/browser/net/nqe/NetworkQualityProvider";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz(nullptr);
#ifndef org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz_defined
#define org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz_defined
inline jclass org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider,
      &g_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_NetworkQualityProvider_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_M0KGRuJY(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_NetworkQualityProvider_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_onEffectiveConnectionTypeChanged(nullptr);
static void Java_NetworkQualityProvider_onEffectiveConnectionTypeChanged(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper effectiveConnectionType) {
  jclass clazz = org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onEffectiveConnectionTypeChanged",
          "(I)V",
&g_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_onEffectiveConnectionTypeChanged);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(effectiveConnectionType));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_onRTTOrThroughputEstimatesComputed(nullptr);
static void Java_NetworkQualityProvider_onRTTOrThroughputEstimatesComputed(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong httpRTTMillis,
    jlong transportRTTMillis,
    JniIntWrapper downstreamThroughputKbps) {
  jclass clazz = org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onRTTOrThroughputEstimatesComputed",
          "(JJI)V",
&g_org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_onRTTOrThroughputEstimatesComputed);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, httpRTTMillis, transportRTTMillis,
              as_jint(downstreamThroughputKbps));
}

#endif  // org_chromium_chrome_browser_net_nqe_NetworkQualityProvider_JNI
