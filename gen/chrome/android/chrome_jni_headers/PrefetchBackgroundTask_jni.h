// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/offlinepages/prefetch/PrefetchBackgroundTask

#ifndef org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_JNI
#define org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask[];
const char kClassPath_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask[] =
    "org/chromium/chrome/browser/offlinepages/prefetch/PrefetchBackgroundTask";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz(nullptr);
#ifndef org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz_defined
#define org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz_defined
inline jclass org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask,
      &g_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace offline_pages {
namespace prefetch {

static jboolean JNI_PrefetchBackgroundTask_StartPrefetchTask(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M_1yiIXuu(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_PrefetchBackgroundTask_StartPrefetchTask(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MgpkLR_1Z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefetchBackgroundTaskAndroid,
    jobject caller) {
  PrefetchBackgroundTaskAndroid* native =
      reinterpret_cast<PrefetchBackgroundTaskAndroid*>(nativePrefetchBackgroundTaskAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnStopTask", false);
  return native->OnStopTask(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_M2m8iSZh_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefetchBackgroundTaskAndroid,
    jobject caller,
    jint rescheduleType) {
  PrefetchBackgroundTaskAndroid* native =
      reinterpret_cast<PrefetchBackgroundTaskAndroid*>(nativePrefetchBackgroundTaskAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetTaskReschedulingForTesting");
  return native->SetTaskReschedulingForTesting(env, base::android::JavaParamRef<jobject>(env,
      caller), rescheduleType);
}

JNI_GENERATOR_EXPORT void Java_J_N_MFEqJ7Qg_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefetchBackgroundTaskAndroid,
    jobject caller) {
  PrefetchBackgroundTaskAndroid* native =
      reinterpret_cast<PrefetchBackgroundTaskAndroid*>(nativePrefetchBackgroundTaskAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SignalTaskFinishedForTesting");
  return native->SignalTaskFinishedForTesting(env, base::android::JavaParamRef<jobject>(env,
      caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_setNativeTask(nullptr);
static void Java_PrefetchBackgroundTask_setNativeTask(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jlong nativeTask) {
  jclass clazz =
      org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setNativeTask",
          "(J)V",
&g_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_setNativeTask);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, nativeTask);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_doneProcessing(nullptr);
static void Java_PrefetchBackgroundTask_doneProcessing(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean needsReschedule) {
  jclass clazz =
      org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "doneProcessing",
          "(Z)V",
&g_org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_doneProcessing);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, needsReschedule);
}

}  // namespace prefetch
}  // namespace offline_pages

#endif  // org_chromium_chrome_browser_offlinepages_prefetch_PrefetchBackgroundTask_JNI
