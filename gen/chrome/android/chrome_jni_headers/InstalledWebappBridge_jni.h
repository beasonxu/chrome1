// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappBridge

#ifndef org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_JNI
#define org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge[];
const char
    kClassPath_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge[]
    = "org/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz_defined
#define org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz_defined
inline jclass
    org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge,
      &g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_InstalledWebappBridge_NotifyPermissionsChange(JNIEnv* env, jlong provider,
    jint type);

JNI_GENERATOR_EXPORT void Java_J_N_MPWzS9sk(
    JNIEnv* env,
    jclass jcaller,
    jlong provider,
    jint type) {
  return JNI_InstalledWebappBridge_NotifyPermissionsChange(env, provider, type);
}

static void JNI_InstalledWebappBridge_RunPermissionCallback(JNIEnv* env, jlong callback,
    jint settingValue);

JNI_GENERATOR_EXPORT void Java_J_N_MO5rIsWk(
    JNIEnv* env,
    jclass jcaller,
    jlong callback,
    jint settingValue) {
  return JNI_InstalledWebappBridge_RunPermissionCallback(env, callback, settingValue);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_setInstalledWebappProvider(nullptr);
static void Java_InstalledWebappBridge_setInstalledWebappProvider(JNIEnv* env, jlong provider) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "setInstalledWebappProvider",
          "(J)V",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_setInstalledWebappProvider);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, provider);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getPermissions(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_InstalledWebappBridge_getPermissions(JNIEnv* env, JniIntWrapper type) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getPermissions",
"(I)[Lorg/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappBridge$Permission;",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getPermissions);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(type)));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getPermission(nullptr);
static jint Java_InstalledWebappBridge_getPermission(JNIEnv* env, JniIntWrapper type,
    const base::android::JavaRef<jstring>& origin) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env),
          0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getPermission",
          "(ILjava/lang/String;)I",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getPermission);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, as_jint(type), origin.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getOriginFromPermission(nullptr);
static base::android::ScopedJavaLocalRef<jstring>
    Java_InstalledWebappBridge_getOriginFromPermission(JNIEnv* env, const
    base::android::JavaRef<jobject>& permission) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env),
          NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getOriginFromPermission",
"(Lorg/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappBridge$Permission;)Ljava/lang/String;",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getOriginFromPermission);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, permission.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getSettingFromPermission(nullptr);
static jint Java_InstalledWebappBridge_getSettingFromPermission(JNIEnv* env, const
    base::android::JavaRef<jobject>& permission) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env),
          0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getSettingFromPermission",
"(Lorg/chromium/chrome/browser/browserservices/permissiondelegation/InstalledWebappBridge$Permission;)I",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_getSettingFromPermission);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id, permission.obj());
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_decidePermission(nullptr);
static void Java_InstalledWebappBridge_decidePermission(JNIEnv* env, JniIntWrapper type,
    const base::android::JavaRef<jstring>& originUrl,
    const base::android::JavaRef<jstring>& lastCommittedUrl,
    jlong callback) {
  jclass clazz =
      org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "decidePermission",
          "(ILjava/lang/String;Ljava/lang/String;J)V",
&g_org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_decidePermission);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(type), originUrl.obj(), lastCommittedUrl.obj(),
              callback);
}

#endif  // org_chromium_chrome_browser_browserservices_permissiondelegation_InstalledWebappBridge_JNI
