// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/autofill/CardUnmaskBridge

#ifndef org_chromium_chrome_browser_autofill_CardUnmaskBridge_JNI
#define org_chromium_chrome_browser_autofill_CardUnmaskBridge_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_autofill_CardUnmaskBridge[];
const char kClassPath_org_chromium_chrome_browser_autofill_CardUnmaskBridge[] =
    "org/chromium/chrome/browser/autofill/CardUnmaskBridge";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(nullptr);
#ifndef org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz_defined
#define org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz_defined
inline jclass org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_autofill_CardUnmaskBridge,
      &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace autofill {

JNI_GENERATOR_EXPORT void Java_J_N_Mek0Fv7c(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jobject caller) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PromptDismissed");
  return native->PromptDismissed(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MRcUBmjo(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jobject caller,
    jstring userResponse) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CheckUserInputValidity", false);
  return native->CheckUserInputValidity(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, userResponse));
}

JNI_GENERATOR_EXPORT void Java_J_N_McBOMUil(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jobject caller,
    jstring cvc,
    jstring month,
    jstring year,
    jboolean enableFidoAuth) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUserInput");
  return native->OnUserInput(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, cvc), base::android::JavaParamRef<jstring>(env,
      month), base::android::JavaParamRef<jstring>(env, year), enableFidoAuth);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mxa_00024aTDN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jobject caller) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNewCardLinkClicked");
  return native->OnNewCardLinkClicked(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jint Java_J_N_Mu0etYO0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeCardUnmaskPromptViewAndroid,
    jobject caller) {
  CardUnmaskPromptViewAndroid* native =
      reinterpret_cast<CardUnmaskPromptViewAndroid*>(nativeCardUnmaskPromptViewAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetExpectedCvcLength", 0);
  return native->GetExpectedCvcLength(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_CardUnmaskBridge_create(JNIEnv* env, jlong
    nativeUnmaskPrompt,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& instructions,
    const base::android::JavaRef<jstring>& confirmButtonLabel,
    JniIntWrapper cvcIconId,
    JniIntWrapper googlePayIconId,
    jboolean isCardLocal,
    jboolean shouldRequestExpirationDate,
    jboolean defaultToStoringLocally,
    jboolean shouldOfferWebauthn,
    jboolean defaultUseScreenlockChecked,
    jlong successMessageDurationMilliseconds,
    const base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLjava/lang/String;Ljava/lang/String;Ljava/lang/String;IIZZZZZJLorg/chromium/ui/base/WindowAndroid;)Lorg/chromium/chrome/browser/autofill/CardUnmaskBridge;",
          &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeUnmaskPrompt, title.obj(), instructions.obj(),
              confirmButtonLabel.obj(), as_jint(cvcIconId), as_jint(googlePayIconId), isCardLocal,
              shouldRequestExpirationDate, defaultToStoringLocally, shouldOfferWebauthn,
              defaultUseScreenlockChecked, successMessageDurationMilliseconds, windowAndroid.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_show(nullptr);
static void Java_CardUnmaskBridge_show(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "show",
          "(Lorg/chromium/ui/base/WindowAndroid;)V",
          &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_show);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, windowAndroid.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_update(nullptr);
static void Java_CardUnmaskBridge_update(JNIEnv* env, const base::android::JavaRef<jobject>& obj,
    const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& instructions,
    jboolean shouldRequestExpirationDate) {
  jclass clazz = org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "update",
          "(Ljava/lang/String;Ljava/lang/String;Z)V",
          &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_update);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, title.obj(), instructions.obj(),
              shouldRequestExpirationDate);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_dismiss(nullptr);
static void Java_CardUnmaskBridge_dismiss(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "dismiss",
          "()V",
          &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_dismiss);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_disableAndWaitForVerification(nullptr);
static void Java_CardUnmaskBridge_disableAndWaitForVerification(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "disableAndWaitForVerification",
          "()V",
          &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_disableAndWaitForVerification);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_verificationFinished(nullptr);
static void Java_CardUnmaskBridge_verificationFinished(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& errorMessage,
    jboolean allowRetry) {
  jclass clazz = org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_autofill_CardUnmaskBridge_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "verificationFinished",
          "(Ljava/lang/String;Z)V",
          &g_org_chromium_chrome_browser_autofill_CardUnmaskBridge_verificationFinished);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, errorMessage.obj(), allowRetry);
}

}  // namespace autofill

#endif  // org_chromium_chrome_browser_autofill_CardUnmaskBridge_JNI
