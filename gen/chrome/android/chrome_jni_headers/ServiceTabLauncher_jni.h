// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ServiceTabLauncher

#ifndef org_chromium_chrome_browser_ServiceTabLauncher_JNI
#define org_chromium_chrome_browser_ServiceTabLauncher_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_ServiceTabLauncher[];
const char kClassPath_org_chromium_chrome_browser_ServiceTabLauncher[] =
    "org/chromium/chrome/browser/ServiceTabLauncher";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ServiceTabLauncher_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ServiceTabLauncher_clazz_defined
#define org_chromium_chrome_browser_ServiceTabLauncher_clazz_defined
inline jclass org_chromium_chrome_browser_ServiceTabLauncher_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_chrome_browser_ServiceTabLauncher,
      &g_org_chromium_chrome_browser_ServiceTabLauncher_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_ServiceTabLauncher_OnWebContentsForRequestAvailable(JNIEnv* env, jint requestId,
    const base::android::JavaParamRef<jobject>& webContents);

JNI_GENERATOR_EXPORT void Java_J_N_MMtVSAe3(
    JNIEnv* env,
    jclass jcaller,
    jint requestId,
    jobject webContents) {
  return JNI_ServiceTabLauncher_OnWebContentsForRequestAvailable(env, requestId,
      base::android::JavaParamRef<jobject>(env, webContents));
}


static std::atomic<jmethodID> g_org_chromium_chrome_browser_ServiceTabLauncher_launchTab(nullptr);
static void Java_ServiceTabLauncher_launchTab(JNIEnv* env, JniIntWrapper requestId,
    jboolean incognito,
    const base::android::JavaRef<jobject>& url,
    JniIntWrapper disposition,
    const base::android::JavaRef<jstring>& referrerUrl,
    JniIntWrapper referrerPolicy,
    const base::android::JavaRef<jstring>& extraHeaders,
    const base::android::JavaRef<jobject>& postData) {
  jclass clazz = org_chromium_chrome_browser_ServiceTabLauncher_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ServiceTabLauncher_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "launchTab",
"(IZLorg/chromium/url/GURL;ILjava/lang/String;ILjava/lang/String;Lorg/chromium/content_public/common/ResourceRequestBody;)V",
          &g_org_chromium_chrome_browser_ServiceTabLauncher_launchTab);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(requestId), incognito, url.obj(),
              as_jint(disposition), referrerUrl.obj(), as_jint(referrerPolicy), extraHeaders.obj(),
              postData.obj());
}

#endif  // org_chromium_chrome_browser_ServiceTabLauncher_JNI
