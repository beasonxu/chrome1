// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/ntp/ForeignSessionHelper

#ifndef org_chromium_chrome_browser_ntp_ForeignSessionHelper_JNI
#define org_chromium_chrome_browser_ntp_ForeignSessionHelper_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_ntp_ForeignSessionHelper[];
const char kClassPath_org_chromium_chrome_browser_ntp_ForeignSessionHelper[] =
    "org/chromium/chrome/browser/ntp/ForeignSessionHelper";

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback[];
const char
    kClassPath_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback[] =
    "org/chromium/chrome/browser/ntp/ForeignSessionHelper$ForeignSessionCallback";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz_defined
#define org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz_defined
inline jclass org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_ntp_ForeignSessionHelper,
      &g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz);
}
#endif
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz(nullptr);
#ifndef org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz_defined
#define org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz_defined
inline jclass
    org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback,
      &g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_ForeignSessionHelper_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    profile);

JNI_GENERATOR_EXPORT jlong Java_J_N_MpwfXr6h(
    JNIEnv* env,
    jclass jcaller,
    jobject profile) {
  return JNI_ForeignSessionHelper_Init(env, base::android::JavaParamRef<jobject>(env, profile));
}

JNI_GENERATOR_EXPORT void Java_J_N_MHB2z4_00024M(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MWH8i2u_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsTabSyncEnabled", false);
  return native->IsTabSyncEnabled(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mwf_000248a3o(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "TriggerSessionSync");
  return native->TriggerSessionSync(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MiRrgRsD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper,
    jobject callback) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetOnForeignSessionCallback");
  return native->SetOnForeignSessionCallback(env, base::android::JavaParamRef<jobject>(env,
      callback));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MrEqlTFQ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper,
    jobject resultSessions) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetForeignSessions", false);
  return native->GetForeignSessions(env, base::android::JavaParamRef<jobject>(env, resultSessions));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MRO3CB0d(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper,
    jobject tab,
    jstring sessionTag,
    jint tabId,
    jint disposition) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "OpenForeignSessionTab", false);
  return native->OpenForeignSessionTab(env, base::android::JavaParamRef<jobject>(env, tab),
      base::android::JavaParamRef<jstring>(env, sessionTag), tabId, disposition);
}

JNI_GENERATOR_EXPORT void Java_J_N_MKRVXtGV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper,
    jstring sessionTag) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "DeleteForeignSession");
  return native->DeleteForeignSession(env, base::android::JavaParamRef<jstring>(env, sessionTag));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mq_1fLm3S(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeForeignSessionHelper,
    jboolean enabled) {
  ForeignSessionHelper* native =
      reinterpret_cast<ForeignSessionHelper*>(nativeForeignSessionHelper);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetInvalidationsForSessionsEnabled");
  return native->SetInvalidationsForSessionsEnabled(env, enabled);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_onUpdated(nullptr);
static void Java_ForeignSessionCallback_onUpdated(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz =
      org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onUpdated",
          "()V",
&g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_00024ForeignSessionCallback_onUpdated);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_pushSession(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ForeignSessionHelper_pushSession(JNIEnv* env,
    const base::android::JavaRef<jobject>& sessions,
    const base::android::JavaRef<jstring>& tag,
    const base::android::JavaRef<jstring>& name,
    JniIntWrapper deviceType,
    jlong modifiedTime) {
  jclass clazz = org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "pushSession",
"(Ljava/util/List;Ljava/lang/String;Ljava/lang/String;IJ)Lorg/chromium/chrome/browser/ntp/ForeignSessionHelper$ForeignSession;",
          &g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_pushSession);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, sessions.obj(), tag.obj(), name.obj(), as_jint(deviceType),
              modifiedTime);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_pushWindow(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_ForeignSessionHelper_pushWindow(JNIEnv* env,
    const base::android::JavaRef<jobject>& session,
    jlong timestamp,
    JniIntWrapper sessionId) {
  jclass clazz = org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "pushWindow",
"(Lorg/chromium/chrome/browser/ntp/ForeignSessionHelper$ForeignSession;JI)Lorg/chromium/chrome/browser/ntp/ForeignSessionHelper$ForeignSessionWindow;",
          &g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_pushWindow);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, session.obj(), timestamp, as_jint(sessionId));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_pushTab(nullptr);
static void Java_ForeignSessionHelper_pushTab(JNIEnv* env, const base::android::JavaRef<jobject>&
    window,
    const base::android::JavaRef<jobject>& url,
    const base::android::JavaRef<jstring>& title,
    jlong timestamp,
    JniIntWrapper sessionId) {
  jclass clazz = org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_ntp_ForeignSessionHelper_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "pushTab",
"(Lorg/chromium/chrome/browser/ntp/ForeignSessionHelper$ForeignSessionWindow;Lorg/chromium/url/GURL;Ljava/lang/String;JI)V",
          &g_org_chromium_chrome_browser_ntp_ForeignSessionHelper_pushTab);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, window.obj(), url.obj(), title.obj(), timestamp,
              as_jint(sessionId));
}

#endif  // org_chromium_chrome_browser_ntp_ForeignSessionHelper_JNI
