// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/feedback/ConnectivityChecker

#ifndef org_chromium_chrome_browser_feedback_ConnectivityChecker_JNI
#define org_chromium_chrome_browser_feedback_ConnectivityChecker_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_feedback_ConnectivityChecker[];
const char kClassPath_org_chromium_chrome_browser_feedback_ConnectivityChecker[] =
    "org/chromium/chrome/browser/feedback/ConnectivityChecker";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz(nullptr);
#ifndef org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz_defined
#define org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz_defined
inline jclass org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_feedback_ConnectivityChecker,
      &g_org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace chrome {
namespace android {

static void JNI_ConnectivityChecker_CheckConnectivity(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& profile,
    const base::android::JavaParamRef<jstring>& url,
    jlong timeoutMs,
    const base::android::JavaParamRef<jobject>& callback);

JNI_GENERATOR_EXPORT void Java_J_N_MvuVYy8Q(
    JNIEnv* env,
    jclass jcaller,
    jobject profile,
    jstring url,
    jlong timeoutMs,
    jobject callback) {
  return JNI_ConnectivityChecker_CheckConnectivity(env, base::android::JavaParamRef<jobject>(env,
      profile), base::android::JavaParamRef<jstring>(env, url), timeoutMs,
      base::android::JavaParamRef<jobject>(env, callback));
}

static jboolean JNI_ConnectivityChecker_IsUrlValid(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MGhgrVHC(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  return JNI_ConnectivityChecker_IsUrlValid(env, base::android::JavaParamRef<jstring>(env, url));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_feedback_ConnectivityChecker_executeCallback(nullptr);
static void Java_ConnectivityChecker_executeCallback(JNIEnv* env, const
    base::android::JavaRef<jobject>& callback,
    JniIntWrapper result) {
  jclass clazz = org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_feedback_ConnectivityChecker_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "executeCallback",
          "(Ljava/lang/Object;I)V",
          &g_org_chromium_chrome_browser_feedback_ConnectivityChecker_executeCallback);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, callback.obj(), as_jint(result));
}

}  // namespace android
}  // namespace chrome

#endif  // org_chromium_chrome_browser_feedback_ConnectivityChecker_JNI
