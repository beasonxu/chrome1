// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/infobar/InfoBarContainer

#ifndef org_chromium_chrome_browser_infobar_InfoBarContainer_JNI
#define org_chromium_chrome_browser_infobar_InfoBarContainer_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_infobar_InfoBarContainer[];
const char kClassPath_org_chromium_chrome_browser_infobar_InfoBarContainer[] =
    "org/chromium/chrome/browser/infobar/InfoBarContainer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(nullptr);
#ifndef org_chromium_chrome_browser_infobar_InfoBarContainer_clazz_defined
#define org_chromium_chrome_browser_infobar_InfoBarContainer_clazz_defined
inline jclass org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_infobar_InfoBarContainer,
      &g_org_chromium_chrome_browser_infobar_InfoBarContainer_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jlong JNI_InfoBarContainer_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MQNiH_00024D1(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_InfoBarContainer_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mb3PR8J_00024(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInfoBarContainerAndroid,
    jobject caller,
    jobject webContents) {
  InfoBarContainerAndroid* native =
      reinterpret_cast<InfoBarContainerAndroid*>(nativeInfoBarContainerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetWebContents");
  return native->SetWebContents(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, webContents));
}

JNI_GENERATOR_EXPORT void Java_J_N_MUX1cETi(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeInfoBarContainerAndroid,
    jobject caller) {
  InfoBarContainerAndroid* native =
      reinterpret_cast<InfoBarContainerAndroid*>(nativeInfoBarContainerAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env, base::android::JavaParamRef<jobject>(env, caller));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_infobar_InfoBarContainer_addInfoBar(nullptr);
static void Java_InfoBarContainer_addInfoBar(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& infoBar) {
  jclass clazz = org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addInfoBar",
          "(Lorg/chromium/components/infobars/InfoBar;)V",
          &g_org_chromium_chrome_browser_infobar_InfoBarContainer_addInfoBar);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, infoBar.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_infobar_InfoBarContainer_hasInfoBars(nullptr);
static jboolean Java_InfoBarContainer_hasInfoBars(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "hasInfoBars",
          "()Z",
          &g_org_chromium_chrome_browser_infobar_InfoBarContainer_hasInfoBars);

  jboolean ret =
      env->CallBooleanMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_infobar_InfoBarContainer_getTopInfoBarIdentifier(nullptr);
static jint Java_InfoBarContainer_getTopInfoBarIdentifier(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_infobar_InfoBarContainer_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getTopInfoBarIdentifier",
          "()I",
          &g_org_chromium_chrome_browser_infobar_InfoBarContainer_getTopInfoBarIdentifier);

  jint ret =
      env->CallIntMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

#endif  // org_chromium_chrome_browser_infobar_InfoBarContainer_JNI
