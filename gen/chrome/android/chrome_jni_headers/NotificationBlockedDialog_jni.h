// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/permissions/NotificationBlockedDialog

#ifndef org_chromium_chrome_browser_permissions_NotificationBlockedDialog_JNI
#define org_chromium_chrome_browser_permissions_NotificationBlockedDialog_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_permissions_NotificationBlockedDialog[];
const char kClassPath_org_chromium_chrome_browser_permissions_NotificationBlockedDialog[] =
    "org/chromium/chrome/browser/permissions/NotificationBlockedDialog";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(nullptr);
#ifndef org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz_defined
#define org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz_defined
inline jclass org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_permissions_NotificationBlockedDialog,
      &g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MWK1BN6b(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationBlockedDialogController) {
  NotificationBlockedDialogController* native =
      reinterpret_cast<NotificationBlockedDialogController*>(nativeNotificationBlockedDialogController);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnPrimaryButtonClicked");
  return native->OnPrimaryButtonClicked(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MlY43xw2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationBlockedDialogController) {
  NotificationBlockedDialogController* native =
      reinterpret_cast<NotificationBlockedDialogController*>(nativeNotificationBlockedDialogController);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnNegativeButtonClicked");
  return native->OnNegativeButtonClicked(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MffoEjsa(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationBlockedDialogController) {
  NotificationBlockedDialogController* native =
      reinterpret_cast<NotificationBlockedDialogController*>(nativeNotificationBlockedDialogController);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnLearnMoreClicked");
  return native->OnLearnMoreClicked(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mw7abwHJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeNotificationBlockedDialogController) {
  NotificationBlockedDialogController* native =
      reinterpret_cast<NotificationBlockedDialogController*>(nativeNotificationBlockedDialogController);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnDialogDismissed");
  return native->OnDialogDismissed(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_NotificationBlockedDialog_create(JNIEnv* env,
    jlong nativeDialogController,
    const base::android::JavaRef<jobject>& windowAndroid) {
  jclass clazz = org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
"(JLorg/chromium/ui/base/WindowAndroid;)Lorg/chromium/chrome/browser/permissions/NotificationBlockedDialog;",
          &g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeDialogController, windowAndroid.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_show(nullptr);
static void Java_NotificationBlockedDialog_show(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& content,
    const base::android::JavaRef<jstring>& positiveButtonLabel,
    const base::android::JavaRef<jstring>& negativeButtonLabel,
    const base::android::JavaRef<jstring>& learnMoreText) {
  jclass clazz = org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "show",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_show);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, title.obj(), content.obj(), positiveButtonLabel.obj(),
              negativeButtonLabel.obj(), learnMoreText.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_dismissDialog(nullptr);
static void Java_NotificationBlockedDialog_dismissDialog(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "dismissDialog",
          "()V",
          &g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_dismissDialog);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_showSettings(nullptr);
static void Java_NotificationBlockedDialog_showSettings(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_permissions_NotificationBlockedDialog_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "showSettings",
          "()V",
          &g_org_chromium_chrome_browser_permissions_NotificationBlockedDialog_showSettings);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_chrome_browser_permissions_NotificationBlockedDialog_JNI
