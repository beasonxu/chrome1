// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/scene_layer/ContextualSearchSceneLayer

#ifndef org_chromium_chrome_browser_compositor_scene_layer_ContextualSearchSceneLayer_JNI
#define org_chromium_chrome_browser_compositor_scene_layer_ContextualSearchSceneLayer_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer[];
const char
    kClassPath_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer[] =
    "org/chromium/chrome/browser/compositor/scene_layer/ContextualSearchSceneLayer";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz(nullptr);
#ifndef org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz_defined
#define org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz_defined
inline jclass
    org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer,
      &g_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_ContextualSearchSceneLayer_Init(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MPHuAHE_1(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_ContextualSearchSceneLayer_Init(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MFh7xXWg(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextualSearchSceneLayer,
    jobject caller,
    jobject resourceManager) {
  ContextualSearchSceneLayer* native =
      reinterpret_cast<ContextualSearchSceneLayer*>(nativeContextualSearchSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "CreateContextualSearchLayer");
  return native->CreateContextualSearchLayer(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_MhNzVlSH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextualSearchSceneLayer,
    jobject caller,
    jobject contentTree) {
  ContextualSearchSceneLayer* native =
      reinterpret_cast<ContextualSearchSceneLayer*>(nativeContextualSearchSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetContentTree");
  return native->SetContentTree(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, contentTree));
}

JNI_GENERATOR_EXPORT void Java_J_N_MepKCVRL(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextualSearchSceneLayer,
    jobject caller) {
  ContextualSearchSceneLayer* native =
      reinterpret_cast<ContextualSearchSceneLayer*>(nativeContextualSearchSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "HideTree");
  return native->HideTree(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MP4UE9Nn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeContextualSearchSceneLayer,
    jobject caller,
    jint searchBarBackgroundResourceId,
    jint searchBarBackgroundColor,
    jint searchContextResourceId,
    jint searchTermResourceId,
    jint searchCaptionResourceId,
    jint searchBarShadowResourceId,
    jint searchProviderIconResourceId,
    jint quickActionIconResourceId,
    jint dragHandlebarResourceId,
    jint openTabIconResourceId,
    jint closeIconResourceId,
    jint progressBarBackgroundResourceId,
    jint progressBarBackgroundColor,
    jint progressBarResourceId,
    jint progressBarColor,
    jint searchPromoResourceId,
    jfloat dpToPx,
    jfloat layoutWidth,
    jfloat layoutHeight,
    jfloat basePageBrightness,
    jfloat basePageYOffset,
    jobject webContents,
    jboolean searchPromoVisible,
    jfloat searchPromoHeight,
    jfloat searchPromoOpacity,
    jint searchPromoBackgroundColor,
    jint relatedSearchesInContentResourceId,
    jboolean relatedSearchesInContentVisible,
    jfloat relatedSearchesInContentHeight,
    jint relatedSearchesInBarResourceId,
    jboolean relatedSearchesInBarVisible,
    jfloat relatedSearchesInBarHeight,
    jfloat relatedSearchesInBarRedundantPadding,
    jfloat searchPanelX,
    jfloat searchPanelY,
    jfloat searchPanelWidth,
    jfloat searchPanelHeight,
    jfloat searchBarMarginSide,
    jfloat searchBarMarginTop,
    jfloat searchBarHeight,
    jfloat searchContextOpacity,
    jfloat searchTextLayerMinHeight,
    jfloat searchTermOpacity,
    jfloat searchTermCaptionSpacing,
    jfloat searchCaptionAnimationPercentage,
    jboolean searchCaptionVisible,
    jboolean searchBarBorderVisible,
    jfloat searchBarBorderHeight,
    jboolean quickActionIconVisible,
    jboolean thumbnailVisible,
    jstring thumbnailUrl,
    jfloat customImageVisibilityPercentage,
    jint barImageSize,
    jint iconColor,
    jint dragHandlebarColor,
    jfloat closeIconOpacity,
    jboolean isProgressBarVisible,
    jfloat progressBarHeight,
    jfloat progressBarOpacity,
    jfloat progressBarCompletion,
    jboolean touchHighlightVisible,
    jfloat touchHighlightXOffset,
    jfloat toucHighlightWidth,
    jobject profile,
    jint barBackgroundResourceId,
    jint separatorLineColor) {
  ContextualSearchSceneLayer* native =
      reinterpret_cast<ContextualSearchSceneLayer*>(nativeContextualSearchSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateContextualSearchLayer");
  return native->UpdateContextualSearchLayer(env, base::android::JavaParamRef<jobject>(env, caller),
      searchBarBackgroundResourceId, searchBarBackgroundColor, searchContextResourceId,
      searchTermResourceId, searchCaptionResourceId, searchBarShadowResourceId,
      searchProviderIconResourceId, quickActionIconResourceId, dragHandlebarResourceId,
      openTabIconResourceId, closeIconResourceId, progressBarBackgroundResourceId,
      progressBarBackgroundColor, progressBarResourceId, progressBarColor, searchPromoResourceId,
      dpToPx, layoutWidth, layoutHeight, basePageBrightness, basePageYOffset,
      base::android::JavaParamRef<jobject>(env, webContents), searchPromoVisible, searchPromoHeight,
      searchPromoOpacity, searchPromoBackgroundColor, relatedSearchesInContentResourceId,
      relatedSearchesInContentVisible, relatedSearchesInContentHeight,
      relatedSearchesInBarResourceId, relatedSearchesInBarVisible, relatedSearchesInBarHeight,
      relatedSearchesInBarRedundantPadding, searchPanelX, searchPanelY, searchPanelWidth,
      searchPanelHeight, searchBarMarginSide, searchBarMarginTop, searchBarHeight,
      searchContextOpacity, searchTextLayerMinHeight, searchTermOpacity, searchTermCaptionSpacing,
      searchCaptionAnimationPercentage, searchCaptionVisible, searchBarBorderVisible,
      searchBarBorderHeight, quickActionIconVisible, thumbnailVisible,
      base::android::JavaParamRef<jstring>(env, thumbnailUrl), customImageVisibilityPercentage,
      barImageSize, iconColor, dragHandlebarColor, closeIconOpacity, isProgressBarVisible,
      progressBarHeight, progressBarOpacity, progressBarCompletion, touchHighlightVisible,
      touchHighlightXOffset, toucHighlightWidth, base::android::JavaParamRef<jobject>(env, profile),
      barBackgroundResourceId, separatorLineColor);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_onThumbnailFetched(nullptr);
static void Java_ContextualSearchSceneLayer_onThumbnailFetched(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean success) {
  jclass clazz =
      org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onThumbnailFetched",
          "(Z)V",
&g_org_chromium_chrome_browser_compositor_scene_1layer_ContextualSearchSceneLayer_onThumbnailFetched);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, success);
}

}  // namespace android

#endif  // org_chromium_chrome_browser_compositor_scene_layer_ContextualSearchSceneLayer_JNI
