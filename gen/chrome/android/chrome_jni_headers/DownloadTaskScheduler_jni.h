// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/service/DownloadTaskScheduler

#ifndef org_chromium_chrome_browser_download_service_DownloadTaskScheduler_JNI
#define org_chromium_chrome_browser_download_service_DownloadTaskScheduler_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_service_DownloadTaskScheduler[];
const char kClassPath_org_chromium_chrome_browser_download_service_DownloadTaskScheduler[] =
    "org/chromium/chrome/browser/download/service/DownloadTaskScheduler";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz_defined
#define org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz_defined
inline jclass org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz(JNIEnv* env)
    {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_service_DownloadTaskScheduler,
      &g_org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace download {
namespace android {


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_service_DownloadTaskScheduler_scheduleTask(nullptr);
static void Java_DownloadTaskScheduler_scheduleTask(JNIEnv* env, JniIntWrapper taskType,
    jboolean requiresUnmeteredNetwork,
    jboolean requiresCharging,
    JniIntWrapper optimalBatteryPercentage,
    jlong windowStartTimeSeconds,
    jlong windowEndTimeSeconds) {
  jclass clazz = org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "scheduleTask",
          "(IZZIJJ)V",
          &g_org_chromium_chrome_browser_download_service_DownloadTaskScheduler_scheduleTask);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(taskType), requiresUnmeteredNetwork,
              requiresCharging, as_jint(optimalBatteryPercentage), windowStartTimeSeconds,
              windowEndTimeSeconds);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_service_DownloadTaskScheduler_cancelTask(nullptr);
static void Java_DownloadTaskScheduler_cancelTask(JNIEnv* env, JniIntWrapper taskType) {
  jclass clazz = org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_service_DownloadTaskScheduler_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "cancelTask",
          "(I)V",
          &g_org_chromium_chrome_browser_download_service_DownloadTaskScheduler_cancelTask);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, as_jint(taskType));
}

}  // namespace android
}  // namespace download

#endif  // org_chromium_chrome_browser_download_service_DownloadTaskScheduler_JNI
