// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/layouts/content/TabContentManager

#ifndef org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_JNI
#define org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager[];
const char kClassPath_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager[] =
    "org/chromium/chrome/browser/compositor/layouts/content/TabContentManager";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz(nullptr);
#ifndef org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz_defined
#define org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz_defined
inline jclass org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager,
      &g_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_TabContentManager_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller,
    jint defaultCacheSize,
    jint approximationCacheSize,
    jint compressionQueueMaxSize,
    jint writeQueueMaxSize,
    jboolean useApproximationThumbnail,
    jboolean saveJpegThumbnails,
    jdouble jpegAspectRatio);

JNI_GENERATOR_EXPORT jlong Java_J_N_MtRahKHu(
    JNIEnv* env,
    jclass jcaller,
    jobject caller,
    jint defaultCacheSize,
    jint approximationCacheSize,
    jint compressionQueueMaxSize,
    jint writeQueueMaxSize,
    jboolean useApproximationThumbnail,
    jboolean saveJpegThumbnails,
    jdouble jpegAspectRatio) {
  return JNI_TabContentManager_Init(env, base::android::JavaParamRef<jobject>(env, caller),
      defaultCacheSize, approximationCacheSize, compressionQueueMaxSize, writeQueueMaxSize,
      useApproximationThumbnail, saveJpegThumbnails, jpegAspectRatio);
}

JNI_GENERATOR_EXPORT void Java_J_N_MRvrWXuI(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jobject tab,
    jint tabId) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "AttachTab");
  return native->AttachTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), tabId);
}

JNI_GENERATOR_EXPORT void Java_J_N_M6M_1espa(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jobject tab,
    jint tabId) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "DetachTab");
  return native->DetachTab(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), tabId);
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_M6RdXfrR(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jint tabId) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasFullCachedThumbnail", false);
  return native->HasFullCachedThumbnail(env, base::android::JavaParamRef<jobject>(env, caller),
      tabId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MzwUkJbE(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jobject tab,
    jfloat thumbnailScale,
    jboolean writeToCache,
    jdouble aspectRatio,
    jobject callback) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "CaptureThumbnail");
  return native->CaptureThumbnail(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), thumbnailScale, writeToCache, aspectRatio,
      base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MbWClKZF(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jobject tab,
    jobject bitmap,
    jfloat thumbnailScale,
    jdouble aspectRatio) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "CacheTabWithBitmap");
  return native->CacheTabWithBitmap(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tab), base::android::JavaParamRef<jobject>(env,
      bitmap), thumbnailScale, aspectRatio);
}

JNI_GENERATOR_EXPORT void Java_J_N_MO5IR90z(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jint tabId,
    jobject url) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "InvalidateIfChanged");
  return native->InvalidateIfChanged(env, base::android::JavaParamRef<jobject>(env, caller), tabId,
      base::android::JavaParamRef<jobject>(env, url));
}

JNI_GENERATOR_EXPORT void Java_J_N_MZoWkzRr(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jintArray priority,
    jint primaryTabId) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateVisibleIds");
  return native->UpdateVisibleIds(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jintArray>(env, priority), primaryTabId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MZeSR4YP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jint tabId) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveTabThumbnail");
  return native->RemoveTabThumbnail(env, base::android::JavaParamRef<jobject>(env, caller), tabId);
}

JNI_GENERATOR_EXPORT void Java_J_N_MGNfqDdn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jint tabId,
    jdouble aspectRatio,
    jobject callback) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetEtc1TabThumbnail");
  return native->GetEtc1TabThumbnail(env, base::android::JavaParamRef<jobject>(env, caller), tabId,
      aspectRatio, base::android::JavaParamRef<jobject>(env, callback));
}

JNI_GENERATOR_EXPORT void Java_J_N_MX0qRE9j_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller,
    jint timeMs) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetCaptureMinRequestTimeForTesting");
  return native->SetCaptureMinRequestTimeForTesting(env, base::android::JavaParamRef<jobject>(env,
      caller), timeMs);
}

JNI_GENERATOR_EXPORT jint Java_J_N_M9OXyN8v_1ForTesting(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager,
    jobject caller) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPendingReadbacksForTesting", 0);
  return native->GetPendingReadbacksForTesting(env, base::android::JavaParamRef<jobject>(env,
      caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MKivVmLp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabContentManager) {
  TabContentManager* native = reinterpret_cast<TabContentManager*>(nativeTabContentManager);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_getNativePtr(nullptr);
static jlong Java_TabContentManager_getNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz =
      org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "getNativePtr",
          "()J",
          &g_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_getNativePtr);

  jlong ret =
      env->CallLongMethod(obj.obj(),
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_notifyListenersOfThumbnailChange(nullptr);
static void Java_TabContentManager_notifyListenersOfThumbnailChange(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper tabId) {
  jclass clazz =
      org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "notifyListenersOfThumbnailChange",
          "(I)V",
&g_org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_notifyListenersOfThumbnailChange);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(tabId));
}

}  // namespace android

#endif  // org_chromium_chrome_browser_compositor_layouts_content_TabContentManager_JNI
