// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/scene_layer/TabStripSceneLayer

#ifndef org_chromium_chrome_browser_compositor_scene_layer_TabStripSceneLayer_JNI
#define org_chromium_chrome_browser_compositor_scene_layer_TabStripSceneLayer_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_TabStripSceneLayer_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_M8m15MW0(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_TabStripSceneLayer_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MyYEfiIB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jboolean visible) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "BeginBuildingFrame");
  return native->BeginBuildingFrame(env, base::android::JavaParamRef<jobject>(env, caller),
      visible);
}

JNI_GENERATOR_EXPORT void Java_J_N_MAgwm7zv(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "FinishBuildingFrame");
  return native->FinishBuildingFrame(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MtZ2MTu4(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jfloat width,
    jfloat height,
    jfloat yOffset,
    jboolean shouldReadBackground) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTabStripLayer");
  return native->UpdateTabStripLayer(env, base::android::JavaParamRef<jobject>(env, caller), width,
      height, yOffset, shouldReadBackground);
}

JNI_GENERATOR_EXPORT void Java_J_N_MPlUOAh0(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jint color,
    jfloat alpha) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateStripScrim");
  return native->UpdateStripScrim(env, base::android::JavaParamRef<jobject>(env, caller), x, y,
      width, height, color, alpha);
}

JNI_GENERATOR_EXPORT void Java_J_N_M4f9_1_1d6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jint resourceId,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jfloat touchTargetOffset,
    jboolean visible,
    jint tint,
    jfloat buttonAlpha,
    jobject resourceManager) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateNewTabButton");
  return native->UpdateNewTabButton(env, base::android::JavaParamRef<jobject>(env, caller),
      resourceId, x, y, width, height, touchTargetOffset, visible, tint, buttonAlpha,
      base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mbxphj9n(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jint resourceId,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jboolean incognito,
    jboolean visible,
    jobject resourceManager) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateModelSelectorButton");
  return native->UpdateModelSelectorButton(env, base::android::JavaParamRef<jobject>(env, caller),
      resourceId, x, y, width, height, incognito, visible, base::android::JavaParamRef<jobject>(env,
      resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mp3SuRkJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jint resourceId,
    jfloat opacity,
    jobject resourceManager) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTabStripLeftFade");
  return native->UpdateTabStripLeftFade(env, base::android::JavaParamRef<jobject>(env, caller),
      resourceId, opacity, base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_MBpqOf1m(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jint resourceId,
    jfloat opacity,
    jobject resourceManager) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateTabStripRightFade");
  return native->UpdateTabStripRightFade(env, base::android::JavaParamRef<jobject>(env, caller),
      resourceId, opacity, base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_M7UBWx3g(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jint id,
    jint closeResourceId,
    jint handleResourceId,
    jint handleOutlineResourceId,
    jint closeTint,
    jint handleTint,
    jint handleOutlineTint,
    jboolean foreground,
    jboolean closePressed,
    jfloat toolbarWidth,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jfloat contentOffsetX,
    jfloat closeButtonAlpha,
    jboolean isLoading,
    jfloat spinnerRotation,
    jfloat brightness,
    jobject layerTitleCache,
    jobject resourceManager) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "PutStripTabLayer");
  return native->PutStripTabLayer(env, base::android::JavaParamRef<jobject>(env, caller), id,
      closeResourceId, handleResourceId, handleOutlineResourceId, closeTint, handleTint,
      handleOutlineTint, foreground, closePressed, toolbarWidth, x, y, width, height,
      contentOffsetX, closeButtonAlpha, isLoading, spinnerRotation, brightness,
      base::android::JavaParamRef<jobject>(env, layerTitleCache),
      base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mm9evJzJ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabStripSceneLayer,
    jobject caller,
    jobject contentTree) {
  TabStripSceneLayer* native = reinterpret_cast<TabStripSceneLayer*>(nativeTabStripSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetContentTree");
  return native->SetContentTree(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, contentTree));
}


}  // namespace android

#endif  // org_chromium_chrome_browser_compositor_scene_layer_TabStripSceneLayer_JNI
