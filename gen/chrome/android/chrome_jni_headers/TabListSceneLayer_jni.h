// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/compositor/scene_layer/TabListSceneLayer

#ifndef org_chromium_chrome_browser_compositor_scene_layer_TabListSceneLayer_JNI
#define org_chromium_chrome_browser_compositor_scene_layer_TabListSceneLayer_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace android {

static jlong JNI_TabListSceneLayer_Init(JNIEnv* env, const base::android::JavaParamRef<jobject>&
    caller);

JNI_GENERATOR_EXPORT jlong Java_J_N_MwkJn6dB(
    JNIEnv* env,
    jclass jcaller,
    jobject caller) {
  return JNI_TabListSceneLayer_Init(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MQUD003X(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabListSceneLayer,
    jobject caller) {
  TabListSceneLayer* native = reinterpret_cast<TabListSceneLayer*>(nativeTabListSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "BeginBuildingFrame");
  return native->BeginBuildingFrame(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mn9kYrkw(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabListSceneLayer,
    jobject caller) {
  TabListSceneLayer* native = reinterpret_cast<TabListSceneLayer*>(nativeTabListSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "FinishBuildingFrame");
  return native->FinishBuildingFrame(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MxcqGWbf(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabListSceneLayer,
    jobject caller,
    jobject tabContentManager,
    jobject resourceManager) {
  TabListSceneLayer* native = reinterpret_cast<TabListSceneLayer*>(nativeTabListSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetDependencies");
  return native->SetDependencies(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jobject>(env, tabContentManager),
      base::android::JavaParamRef<jobject>(env, resourceManager));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mf2p86oA(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabListSceneLayer,
    jobject caller,
    jint backgroundColor,
    jfloat viewportX,
    jfloat viewportY,
    jfloat viewportWidth,
    jfloat viewportHeight) {
  TabListSceneLayer* native = reinterpret_cast<TabListSceneLayer*>(nativeTabListSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "UpdateLayer");
  return native->UpdateLayer(env, base::android::JavaParamRef<jobject>(env, caller),
      backgroundColor, viewportX, viewportY, viewportWidth, viewportHeight);
}

JNI_GENERATOR_EXPORT void Java_J_N_Mp1Kxnqn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabListSceneLayer,
    jobject caller,
    jint selectedId,
    jintArray ids,
    jboolean useAdditionalIds,
    jint toolbarResourceId,
    jint shadowResourceId,
    jint contourResourceId,
    jint borderResourceId,
    jint borderInnerShadowResourceId,
    jboolean canUseLiveLayer,
    jint tabBackgroundColor,
    jboolean incognito,
    jfloat x,
    jfloat y,
    jfloat width,
    jfloat height,
    jfloat contentWidth,
    jfloat contentHeight,
    jfloat shadowX,
    jfloat shadowY,
    jfloat shadowWidth,
    jfloat shadowHeight,
    jfloat alpha,
    jfloat borderAlpha,
    jfloat borderInnerShadowAlpha,
    jfloat contourAlpha,
    jfloat shadowAlpha,
    jfloat staticToViewBlend,
    jfloat borderScale,
    jfloat saturation,
    jfloat brightness,
    jboolean showToolbar,
    jint defaultThemeColor,
    jint toolbarBackgroundColor,
    jboolean anonymizeToolbar,
    jint toolbarTextBoxResource,
    jint toolbarTextBoxBackgroundColor,
    jfloat toolbarTextBoxAlpha,
    jfloat toolbarYOffset,
    jfloat contentOffset,
    jfloat sideBorderScale,
    jboolean insetVerticalBorder) {
  TabListSceneLayer* native = reinterpret_cast<TabListSceneLayer*>(nativeTabListSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "PutTabLayer");
  return native->PutTabLayer(env, base::android::JavaParamRef<jobject>(env, caller), selectedId,
      base::android::JavaParamRef<jintArray>(env, ids), useAdditionalIds, toolbarResourceId,
      shadowResourceId, contourResourceId, borderResourceId, borderInnerShadowResourceId,
      canUseLiveLayer, tabBackgroundColor, incognito, x, y, width, height, contentWidth,
      contentHeight, shadowX, shadowY, shadowWidth, shadowHeight, alpha, borderAlpha,
      borderInnerShadowAlpha, contourAlpha, shadowAlpha, staticToViewBlend, borderScale, saturation,
      brightness, showToolbar, defaultThemeColor, toolbarBackgroundColor, anonymizeToolbar,
      toolbarTextBoxResource, toolbarTextBoxBackgroundColor, toolbarTextBoxAlpha, toolbarYOffset,
      contentOffset, sideBorderScale, insetVerticalBorder);
}

JNI_GENERATOR_EXPORT void Java_J_N_MdnzXRBb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeTabListSceneLayer,
    jobject caller,
    jint resourceId,
    jfloat alpha,
    jint topOffset) {
  TabListSceneLayer* native = reinterpret_cast<TabListSceneLayer*>(nativeTabListSceneLayer);
  CHECK_NATIVE_PTR(env, jcaller, native, "PutBackgroundLayer");
  return native->PutBackgroundLayer(env, base::android::JavaParamRef<jobject>(env, caller),
      resourceId, alpha, topOffset);
}


}  // namespace android

#endif  // org_chromium_chrome_browser_compositor_scene_layer_TabListSceneLayer_JNI
