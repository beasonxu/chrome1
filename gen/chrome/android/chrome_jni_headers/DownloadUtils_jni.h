// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/download/DownloadUtils

#ifndef org_chromium_chrome_browser_download_DownloadUtils_JNI
#define org_chromium_chrome_browser_download_DownloadUtils_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_download_DownloadUtils[];
const char kClassPath_org_chromium_chrome_browser_download_DownloadUtils[] =
    "org/chromium/chrome/browser/download/DownloadUtils";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_download_DownloadUtils_clazz(nullptr);
#ifndef org_chromium_chrome_browser_download_DownloadUtils_clazz_defined
#define org_chromium_chrome_browser_download_DownloadUtils_clazz_defined
inline jclass org_chromium_chrome_browser_download_DownloadUtils_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_download_DownloadUtils,
      &g_org_chromium_chrome_browser_download_DownloadUtils_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static jint JNI_DownloadUtils_GetResumeMode(JNIEnv* env, const base::android::JavaParamRef<jstring>&
    url,
    jint failState);

JNI_GENERATOR_EXPORT jint Java_J_N_MOENIRAW(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jint failState) {
  return JNI_DownloadUtils_GetResumeMode(env, base::android::JavaParamRef<jstring>(env, url),
      failState);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadUtils_showDownloadManager(nullptr);
static jboolean Java_DownloadUtils_showDownloadManager(JNIEnv* env, const
    base::android::JavaRef<jobject>& activity,
    const base::android::JavaRef<jobject>& tab,
    const base::android::JavaRef<jobject>& otrProfileID,
    JniIntWrapper source,
    jboolean showPrefetchedContent) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadUtils_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "showDownloadManager",
"(Landroid/app/Activity;Lorg/chromium/chrome/browser/tab/Tab;Lorg/chromium/chrome/browser/profiles/OTRProfileID;IZ)Z",
          &g_org_chromium_chrome_browser_download_DownloadUtils_showDownloadManager);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id, activity.obj(), tab.obj(), otrProfileID.obj(),
              as_jint(source), showPrefetchedContent);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadUtils_getUriStringForPath(nullptr);
static base::android::ScopedJavaLocalRef<jstring> Java_DownloadUtils_getUriStringForPath(JNIEnv*
    env, const base::android::JavaRef<jstring>& filePath) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadUtils_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getUriStringForPath",
          "(Ljava/lang/String;)Ljava/lang/String;",
          &g_org_chromium_chrome_browser_download_DownloadUtils_getUriStringForPath);

  jstring ret =
      static_cast<jstring>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, filePath.obj()));
  return base::android::ScopedJavaLocalRef<jstring>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_download_DownloadUtils_openDownload(nullptr);
static void Java_DownloadUtils_openDownload(JNIEnv* env, const base::android::JavaRef<jstring>&
    filePath,
    const base::android::JavaRef<jstring>& mimeType,
    const base::android::JavaRef<jstring>& downloadGuid,
    const base::android::JavaRef<jobject>& otrProfileID,
    const base::android::JavaRef<jstring>& originalUrl,
    const base::android::JavaRef<jstring>& referer,
    JniIntWrapper source) {
  jclass clazz = org_chromium_chrome_browser_download_DownloadUtils_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_download_DownloadUtils_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "openDownload",
"(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lorg/chromium/chrome/browser/profiles/OTRProfileID;Ljava/lang/String;Ljava/lang/String;I)V",
          &g_org_chromium_chrome_browser_download_DownloadUtils_openDownload);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, filePath.obj(), mimeType.obj(), downloadGuid.obj(),
              otrProfileID.obj(), originalUrl.obj(), referer.obj(), as_jint(source));
}

#endif  // org_chromium_chrome_browser_download_DownloadUtils_JNI
