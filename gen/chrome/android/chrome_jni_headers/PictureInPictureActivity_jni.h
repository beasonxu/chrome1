// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/media/PictureInPictureActivity

#ifndef org_chromium_chrome_browser_media_PictureInPictureActivity_JNI
#define org_chromium_chrome_browser_media_PictureInPictureActivity_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_media_PictureInPictureActivity[];
const char kClassPath_org_chromium_chrome_browser_media_PictureInPictureActivity[] =
    "org/chromium/chrome/browser/media/PictureInPictureActivity";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(nullptr);
#ifndef org_chromium_chrome_browser_media_PictureInPictureActivity_clazz_defined
#define org_chromium_chrome_browser_media_PictureInPictureActivity_clazz_defined
inline jclass org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_media_PictureInPictureActivity,
      &g_org_chromium_chrome_browser_media_PictureInPictureActivity_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MjkqYLC6(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid,
    jobject self,
    jobject window) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnActivityStart");
  return native->OnActivityStart(env, base::android::JavaParamRef<jobject>(env, self),
      base::android::JavaParamRef<jobject>(env, window));
}

JNI_GENERATOR_EXPORT void Java_J_N_MrWAWBMN(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "Destroy");
  return native->Destroy(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_M3_00024g8Z3M(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid,
    jboolean toggleOn) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "TogglePlayPause");
  return native->TogglePlayPause(env, toggleOn);
}

JNI_GENERATOR_EXPORT void Java_J_N_MBFQ8411(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "NextTrack");
  return native->NextTrack(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MJCP0RbB(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "PreviousTrack");
  return native->PreviousTrack(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MN8xMwUO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid,
    jboolean toggleOn) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ToggleMicrophone");
  return native->ToggleMicrophone(env, toggleOn);
}

JNI_GENERATOR_EXPORT void Java_J_N_MEGluScb(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid,
    jboolean toggleOn) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ToggleCamera");
  return native->ToggleCamera(env, toggleOn);
}

JNI_GENERATOR_EXPORT void Java_J_N_MX2r0gA2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HangUp");
  return native->HangUp(env);
}

JNI_GENERATOR_EXPORT void Java_J_N_MxJhtvhD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid,
    jobject compositorView) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "CompositorViewCreated");
  return native->CompositorViewCreated(env, base::android::JavaParamRef<jobject>(env,
      compositorView));
}

JNI_GENERATOR_EXPORT void Java_J_N_MLM3OS4j(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid,
    jint width,
    jint height) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnViewSizeChanged");
  return native->OnViewSizeChanged(env, width, height);
}

JNI_GENERATOR_EXPORT void Java_J_N_MCu7CiY_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeOverlayWindowAndroid) {
  OverlayWindowAndroid* native =
      reinterpret_cast<OverlayWindowAndroid*>(nativeOverlayWindowAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnBackToTab");
  return native->OnBackToTab(env);
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_close(nullptr);
static void Java_PictureInPictureActivity_close(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "close",
          "()V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_close);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_updateVideoSize(nullptr);
static void Java_PictureInPictureActivity_updateVideoSize(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper width,
    JniIntWrapper height) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateVideoSize",
          "(II)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_updateVideoSize);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(width), as_jint(height));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_setPlaybackState(nullptr);
static void Java_PictureInPictureActivity_setPlaybackState(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, JniIntWrapper playbackState) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setPlaybackState",
          "(I)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_setPlaybackState);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, as_jint(playbackState));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_setMicrophoneMuted(nullptr);
static void Java_PictureInPictureActivity_setMicrophoneMuted(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean muted) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setMicrophoneMuted",
          "(Z)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_setMicrophoneMuted);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, muted);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_setCameraState(nullptr);
static void Java_PictureInPictureActivity_setCameraState(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, jboolean turnedOn) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setCameraState",
          "(Z)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_setCameraState);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, turnedOn);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_updateVisibleActions(nullptr);
static void Java_PictureInPictureActivity_updateVisibleActions(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jintArray>& actions) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "updateVisibleActions",
          "([I)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_updateVisibleActions);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, actions.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_createActivity(nullptr);
static void Java_PictureInPictureActivity_createActivity(JNIEnv* env, jlong
    nativeOverlayWindowAndroid,
    const base::android::JavaRef<jobject>& initiatorTab,
    JniIntWrapper sourceX,
    JniIntWrapper sourceY,
    JniIntWrapper sourceWidth,
    JniIntWrapper sourceHeight) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "createActivity",
          "(JLjava/lang/Object;IIII)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_createActivity);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, nativeOverlayWindowAndroid, initiatorTab.obj(),
              as_jint(sourceX), as_jint(sourceY), as_jint(sourceWidth), as_jint(sourceHeight));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_media_PictureInPictureActivity_onWindowDestroyed(nullptr);
static void Java_PictureInPictureActivity_onWindowDestroyed(JNIEnv* env, jlong
    nativeOverlayWindowAndroid) {
  jclass clazz = org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_media_PictureInPictureActivity_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "onWindowDestroyed",
          "(J)V",
          &g_org_chromium_chrome_browser_media_PictureInPictureActivity_onWindowDestroyed);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, nativeOverlayWindowAndroid);
}

#endif  // org_chromium_chrome_browser_media_PictureInPictureActivity_JNI
