// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/chrome/browser/notifications/scheduler/DisplayAgent

#ifndef org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_JNI
#define org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_JNI

#include <jni.h>

#include "../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent[];
const char kClassPath_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent[] =
    "org/chromium/chrome/browser/notifications/scheduler/DisplayAgent";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(nullptr);
#ifndef org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz_defined
#define org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz_defined
inline jclass org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent,
      &g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
static void JNI_DisplayAgent_OnUserAction(JNIEnv* env, jint clientType,
    jint actionType,
    const base::android::JavaParamRef<jstring>& guid,
    jint type,
    const base::android::JavaParamRef<jstring>& buttonId);

JNI_GENERATOR_EXPORT void Java_J_N_MJnQd5Zg(
    JNIEnv* env,
    jclass jcaller,
    jint clientType,
    jint actionType,
    jstring guid,
    jint type,
    jstring buttonId) {
  return JNI_DisplayAgent_OnUserAction(env, clientType, actionType,
      base::android::JavaParamRef<jstring>(env, guid), type,
      base::android::JavaParamRef<jstring>(env, buttonId));
}


static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_addButton(nullptr);
static void Java_DisplayAgent_addButton(JNIEnv* env, const base::android::JavaRef<jobject>&
    notificationData,
    const base::android::JavaRef<jstring>& text,
    JniIntWrapper type,
    const base::android::JavaRef<jstring>& id) {
  jclass clazz = org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addButton",
"(Lorg/chromium/chrome/browser/notifications/scheduler/DisplayAgent$NotificationData;Ljava/lang/String;ILjava/lang/String;)V",
          &g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_addButton);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, notificationData.obj(), text.obj(), as_jint(type), id.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_addIcon(nullptr);
static void Java_DisplayAgent_addIcon(JNIEnv* env, const base::android::JavaRef<jobject>&
    notificationData,
    JniIntWrapper type,
    const base::android::JavaRef<jobject>& bitmap,
    JniIntWrapper resourceId) {
  jclass clazz = org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "addIcon",
"(Lorg/chromium/chrome/browser/notifications/scheduler/DisplayAgent$NotificationData;ILandroid/graphics/Bitmap;I)V",
          &g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_addIcon);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, notificationData.obj(), as_jint(type), bitmap.obj(),
              as_jint(resourceId));
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_buildNotificationData(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DisplayAgent_buildNotificationData(JNIEnv*
    env, const base::android::JavaRef<jstring>& title,
    const base::android::JavaRef<jstring>& message) {
  jclass clazz = org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "buildNotificationData",
"(Ljava/lang/String;Ljava/lang/String;)Lorg/chromium/chrome/browser/notifications/scheduler/DisplayAgent$NotificationData;",
&g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_buildNotificationData);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, title.obj(), message.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_buildSystemData(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_DisplayAgent_buildSystemData(JNIEnv* env,
    JniIntWrapper type,
    const base::android::JavaRef<jstring>& guid) {
  jclass clazz = org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "buildSystemData",
"(ILjava/lang/String;)Lorg/chromium/chrome/browser/notifications/scheduler/DisplayAgent$SystemData;",
          &g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_buildSystemData);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, as_jint(type), guid.obj());
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_showNotification(nullptr);
static void Java_DisplayAgent_showNotification(JNIEnv* env, const base::android::JavaRef<jobject>&
    notificationData,
    const base::android::JavaRef<jobject>& systemData) {
  jclass clazz = org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "showNotification",
"(Lorg/chromium/chrome/browser/notifications/scheduler/DisplayAgent$NotificationData;Lorg/chromium/chrome/browser/notifications/scheduler/DisplayAgent$SystemData;)V",
          &g_org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_showNotification);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id, notificationData.obj(), systemData.obj());
}

#endif  // org_chromium_chrome_browser_notifications_scheduler_DisplayAgent_JNI
