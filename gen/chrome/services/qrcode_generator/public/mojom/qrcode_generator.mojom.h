// chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_H_
#define CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared.h"
#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-forward.h"
#include "sandbox/policy/mojom/sandbox.mojom-forward.h"
#include "skia/public/mojom/bitmap.mojom.h"
#include "ui/gfx/geometry/mojom/geometry.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace qrcode_generator {
namespace mojom {

class QRCodeGeneratorServiceProxy;

template <typename ImplRefTraits>
class QRCodeGeneratorServiceStub;

class QRCodeGeneratorServiceRequestValidator;
class QRCodeGeneratorServiceResponseValidator;


class  QRCodeGeneratorService
    : public QRCodeGeneratorServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr auto kServiceSandbox = sandbox::mojom::Sandbox::kUtility;
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = QRCodeGeneratorServiceInterfaceBase;
  using Proxy_ = QRCodeGeneratorServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = QRCodeGeneratorServiceStub<ImplRefTraits>;

  using RequestValidator_ = QRCodeGeneratorServiceRequestValidator;
  using ResponseValidator_ = QRCodeGeneratorServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGenerateQRCodeMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GenerateQRCode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~QRCodeGeneratorService() = default;


  using GenerateQRCodeCallback = base::OnceCallback<void(GenerateQRCodeResponsePtr)>;
  
  virtual void GenerateQRCode(GenerateQRCodeRequestPtr request, GenerateQRCodeCallback callback) = 0;
};



class  QRCodeGeneratorServiceProxy
    : public QRCodeGeneratorService {
 public:
  using InterfaceType = QRCodeGeneratorService;

  explicit QRCodeGeneratorServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GenerateQRCode(GenerateQRCodeRequestPtr request, GenerateQRCodeCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  QRCodeGeneratorServiceStubDispatch {
 public:
  static bool Accept(QRCodeGeneratorService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      QRCodeGeneratorService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<QRCodeGeneratorService>>
class QRCodeGeneratorServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  QRCodeGeneratorServiceStub() = default;
  ~QRCodeGeneratorServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QRCodeGeneratorServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return QRCodeGeneratorServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  QRCodeGeneratorServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  QRCodeGeneratorServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};









class  GenerateQRCodeRequest {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<GenerateQRCodeRequest, T>::value>;
  using DataView = GenerateQRCodeRequestDataView;
  using Data_ = internal::GenerateQRCodeRequest_Data;

  template <typename... Args>
  static GenerateQRCodeRequestPtr New(Args&&... args) {
    return GenerateQRCodeRequestPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static GenerateQRCodeRequestPtr From(const U& u) {
    return mojo::TypeConverter<GenerateQRCodeRequestPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GenerateQRCodeRequest>::Convert(*this);
  }


  GenerateQRCodeRequest();

  GenerateQRCodeRequest(
      const std::string& data,
      bool should_render,
      bool render_dino,
      ModuleStyle render_module_style,
      LocatorStyle render_locator_style);


  ~GenerateQRCodeRequest();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = GenerateQRCodeRequestPtr>
  GenerateQRCodeRequestPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, GenerateQRCodeRequest::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, GenerateQRCodeRequest::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        GenerateQRCodeRequest::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GenerateQRCodeRequest::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::GenerateQRCodeRequest_UnserializedMessageContext<
            UserType, GenerateQRCodeRequest::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<GenerateQRCodeRequest::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return GenerateQRCodeRequest::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::GenerateQRCodeRequest_UnserializedMessageContext<
            UserType, GenerateQRCodeRequest::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<GenerateQRCodeRequest::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string data;
  
  bool should_render;
  
  bool render_dino;
  
  ModuleStyle render_module_style;
  
  LocatorStyle render_locator_style;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, GenerateQRCodeRequest::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, GenerateQRCodeRequest::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, GenerateQRCodeRequest::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, GenerateQRCodeRequest::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class  GenerateQRCodeResponse {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<GenerateQRCodeResponse, T>::value>;
  using DataView = GenerateQRCodeResponseDataView;
  using Data_ = internal::GenerateQRCodeResponse_Data;

  template <typename... Args>
  static GenerateQRCodeResponsePtr New(Args&&... args) {
    return GenerateQRCodeResponsePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static GenerateQRCodeResponsePtr From(const U& u) {
    return mojo::TypeConverter<GenerateQRCodeResponsePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, GenerateQRCodeResponse>::Convert(*this);
  }


  GenerateQRCodeResponse();

  GenerateQRCodeResponse(
      QRCodeGeneratorError error_code,
      const ::SkBitmap& bitmap,
      std::vector<uint8_t> data,
      const ::gfx::Size& data_size);


  ~GenerateQRCodeResponse();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = GenerateQRCodeResponsePtr>
  GenerateQRCodeResponsePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, GenerateQRCodeResponse::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, GenerateQRCodeResponse::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        GenerateQRCodeResponse::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::GenerateQRCodeResponse_UnserializedMessageContext<
            UserType, GenerateQRCodeResponse::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<GenerateQRCodeResponse::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return GenerateQRCodeResponse::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::GenerateQRCodeResponse_UnserializedMessageContext<
            UserType, GenerateQRCodeResponse::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<GenerateQRCodeResponse::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  QRCodeGeneratorError error_code;
  
  ::SkBitmap bitmap;
  
  std::vector<uint8_t> data;
  
  ::gfx::Size data_size;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, GenerateQRCodeResponse::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, GenerateQRCodeResponse::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, GenerateQRCodeResponse::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, GenerateQRCodeResponse::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
GenerateQRCodeRequestPtr GenerateQRCodeRequest::Clone() const {
  return New(
      mojo::Clone(data),
      mojo::Clone(should_render),
      mojo::Clone(render_dino),
      mojo::Clone(render_module_style),
      mojo::Clone(render_locator_style)
  );
}

template <typename T, GenerateQRCodeRequest::EnableIfSame<T>*>
bool GenerateQRCodeRequest::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->data, other_struct.data))
    return false;
  if (!mojo::Equals(this->should_render, other_struct.should_render))
    return false;
  if (!mojo::Equals(this->render_dino, other_struct.render_dino))
    return false;
  if (!mojo::Equals(this->render_module_style, other_struct.render_module_style))
    return false;
  if (!mojo::Equals(this->render_locator_style, other_struct.render_locator_style))
    return false;
  return true;
}

template <typename T, GenerateQRCodeRequest::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.data < rhs.data)
    return true;
  if (rhs.data < lhs.data)
    return false;
  if (lhs.should_render < rhs.should_render)
    return true;
  if (rhs.should_render < lhs.should_render)
    return false;
  if (lhs.render_dino < rhs.render_dino)
    return true;
  if (rhs.render_dino < lhs.render_dino)
    return false;
  if (lhs.render_module_style < rhs.render_module_style)
    return true;
  if (rhs.render_module_style < lhs.render_module_style)
    return false;
  if (lhs.render_locator_style < rhs.render_locator_style)
    return true;
  if (rhs.render_locator_style < lhs.render_locator_style)
    return false;
  return false;
}
template <typename StructPtrType>
GenerateQRCodeResponsePtr GenerateQRCodeResponse::Clone() const {
  return New(
      mojo::Clone(error_code),
      mojo::Clone(bitmap),
      mojo::Clone(data),
      mojo::Clone(data_size)
  );
}

template <typename T, GenerateQRCodeResponse::EnableIfSame<T>*>
bool GenerateQRCodeResponse::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->error_code, other_struct.error_code))
    return false;
  if (!mojo::Equals(this->bitmap, other_struct.bitmap))
    return false;
  if (!mojo::Equals(this->data, other_struct.data))
    return false;
  if (!mojo::Equals(this->data_size, other_struct.data_size))
    return false;
  return true;
}

template <typename T, GenerateQRCodeResponse::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.error_code < rhs.error_code)
    return true;
  if (rhs.error_code < lhs.error_code)
    return false;
  if (lhs.bitmap < rhs.bitmap)
    return true;
  if (rhs.bitmap < lhs.bitmap)
    return false;
  if (lhs.data < rhs.data)
    return true;
  if (rhs.data < lhs.data)
    return false;
  if (lhs.data_size < rhs.data_size)
    return true;
  if (rhs.data_size < lhs.data_size)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace qrcode_generator

namespace mojo {


template <>
struct  StructTraits<::qrcode_generator::mojom::GenerateQRCodeRequest::DataView,
                                         ::qrcode_generator::mojom::GenerateQRCodeRequestPtr> {
  static bool IsNull(const ::qrcode_generator::mojom::GenerateQRCodeRequestPtr& input) { return !input; }
  static void SetToNull(::qrcode_generator::mojom::GenerateQRCodeRequestPtr* output) { output->reset(); }

  static const decltype(::qrcode_generator::mojom::GenerateQRCodeRequest::data)& data(
      const ::qrcode_generator::mojom::GenerateQRCodeRequestPtr& input) {
    return input->data;
  }

  static decltype(::qrcode_generator::mojom::GenerateQRCodeRequest::should_render) should_render(
      const ::qrcode_generator::mojom::GenerateQRCodeRequestPtr& input) {
    return input->should_render;
  }

  static decltype(::qrcode_generator::mojom::GenerateQRCodeRequest::render_dino) render_dino(
      const ::qrcode_generator::mojom::GenerateQRCodeRequestPtr& input) {
    return input->render_dino;
  }

  static decltype(::qrcode_generator::mojom::GenerateQRCodeRequest::render_module_style) render_module_style(
      const ::qrcode_generator::mojom::GenerateQRCodeRequestPtr& input) {
    return input->render_module_style;
  }

  static decltype(::qrcode_generator::mojom::GenerateQRCodeRequest::render_locator_style) render_locator_style(
      const ::qrcode_generator::mojom::GenerateQRCodeRequestPtr& input) {
    return input->render_locator_style;
  }

  static bool Read(::qrcode_generator::mojom::GenerateQRCodeRequest::DataView input, ::qrcode_generator::mojom::GenerateQRCodeRequestPtr* output);
};


template <>
struct  StructTraits<::qrcode_generator::mojom::GenerateQRCodeResponse::DataView,
                                         ::qrcode_generator::mojom::GenerateQRCodeResponsePtr> {
  static bool IsNull(const ::qrcode_generator::mojom::GenerateQRCodeResponsePtr& input) { return !input; }
  static void SetToNull(::qrcode_generator::mojom::GenerateQRCodeResponsePtr* output) { output->reset(); }

  static decltype(::qrcode_generator::mojom::GenerateQRCodeResponse::error_code) error_code(
      const ::qrcode_generator::mojom::GenerateQRCodeResponsePtr& input) {
    return input->error_code;
  }

  static  decltype(::qrcode_generator::mojom::GenerateQRCodeResponse::bitmap)& bitmap(
       ::qrcode_generator::mojom::GenerateQRCodeResponsePtr& input) {
    return input->bitmap;
  }

  static const decltype(::qrcode_generator::mojom::GenerateQRCodeResponse::data)& data(
      const ::qrcode_generator::mojom::GenerateQRCodeResponsePtr& input) {
    return input->data;
  }

  static const decltype(::qrcode_generator::mojom::GenerateQRCodeResponse::data_size)& data_size(
      const ::qrcode_generator::mojom::GenerateQRCodeResponsePtr& input) {
    return input->data_size;
  }

  static bool Read(::qrcode_generator::mojom::GenerateQRCodeResponse::DataView input, ::qrcode_generator::mojom::GenerateQRCodeResponsePtr* output);
};

}  // namespace mojo

#endif  // CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_H_