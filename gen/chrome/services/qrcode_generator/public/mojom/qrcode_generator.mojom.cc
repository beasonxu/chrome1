// chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-params-data.h"
#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-shared-message-ids.h"

#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-import-headers.h"
#include "chrome/services/qrcode_generator/public/mojom/qrcode_generator.mojom-test-utils.h"


#ifndef CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_JUMBO_H_
#define CHROME_SERVICES_QRCODE_GENERATOR_PUBLIC_MOJOM_QRCODE_GENERATOR_MOJOM_JUMBO_H_
#endif



namespace qrcode_generator {
namespace mojom {
GenerateQRCodeRequest::GenerateQRCodeRequest()
    : data(),
      should_render(),
      render_dino(),
      render_module_style(),
      render_locator_style() {}

GenerateQRCodeRequest::GenerateQRCodeRequest(
    const std::string& data_in,
    bool should_render_in,
    bool render_dino_in,
    ModuleStyle render_module_style_in,
    LocatorStyle render_locator_style_in)
    : data(std::move(data_in)),
      should_render(std::move(should_render_in)),
      render_dino(std::move(render_dino_in)),
      render_module_style(std::move(render_module_style_in)),
      render_locator_style(std::move(render_locator_style_in)) {}

GenerateQRCodeRequest::~GenerateQRCodeRequest() = default;
size_t GenerateQRCodeRequest::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->data);
  seed = mojo::internal::Hash(seed, this->should_render);
  seed = mojo::internal::Hash(seed, this->render_dino);
  seed = mojo::internal::Hash(seed, this->render_module_style);
  seed = mojo::internal::Hash(seed, this->render_locator_style);
  return seed;
}

void GenerateQRCodeRequest::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data"), this->data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "should_render"), this->should_render,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_dino"), this->render_dino,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_module_style"), this->render_module_style,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ModuleStyle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_locator_style"), this->render_locator_style,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type LocatorStyle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool GenerateQRCodeRequest::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
GenerateQRCodeResponse::GenerateQRCodeResponse()
    : error_code(),
      bitmap(),
      data(),
      data_size() {}

GenerateQRCodeResponse::GenerateQRCodeResponse(
    QRCodeGeneratorError error_code_in,
    const ::SkBitmap& bitmap_in,
    std::vector<uint8_t> data_in,
    const ::gfx::Size& data_size_in)
    : error_code(std::move(error_code_in)),
      bitmap(std::move(bitmap_in)),
      data(std::move(data_in)),
      data_size(std::move(data_size_in)) {}

GenerateQRCodeResponse::~GenerateQRCodeResponse() = default;

void GenerateQRCodeResponse::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "error_code"), this->error_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type QRCodeGeneratorError>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "bitmap"), this->bitmap,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkBitmap&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data"), this->data,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<uint8_t>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "data_size"), this->data_size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Size&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool GenerateQRCodeResponse::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char QRCodeGeneratorService::Name_[] = "qrcode_generator.mojom.QRCodeGeneratorService";

QRCodeGeneratorService::IPCStableHashFunction QRCodeGeneratorService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kQRCodeGeneratorService_GenerateQRCode_Name: {
      return &QRCodeGeneratorService::GenerateQRCode_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* QRCodeGeneratorService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kQRCodeGeneratorService_GenerateQRCode_Name:
            return "Receive qrcode_generator::mojom::QRCodeGeneratorService::GenerateQRCode";
    }
  } else {
    switch (message.name()) {
      case internal::kQRCodeGeneratorService_GenerateQRCode_Name:
            return "Receive reply qrcode_generator::mojom::QRCodeGeneratorService::GenerateQRCode";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t QRCodeGeneratorService::GenerateQRCode_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)qrcode_generator::mojom::QRCodeGeneratorService::GenerateQRCode");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class QRCodeGeneratorService_GenerateQRCode_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  QRCodeGeneratorService_GenerateQRCode_ForwardToCallback(
      QRCodeGeneratorService::GenerateQRCodeCallback callback
      ) : callback_(std::move(callback)) {
  }

  QRCodeGeneratorService_GenerateQRCode_ForwardToCallback(const QRCodeGeneratorService_GenerateQRCode_ForwardToCallback&) = delete;
  QRCodeGeneratorService_GenerateQRCode_ForwardToCallback& operator=(const QRCodeGeneratorService_GenerateQRCode_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  QRCodeGeneratorService::GenerateQRCodeCallback callback_;
};

QRCodeGeneratorServiceProxy::QRCodeGeneratorServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void QRCodeGeneratorServiceProxy::GenerateQRCode(
    GenerateQRCodeRequestPtr in_request, GenerateQRCodeCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send qrcode_generator::mojom::QRCodeGeneratorService::GenerateQRCode", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("request"), in_request,
                        "<value of type GenerateQRCodeRequestPtr>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kQRCodeGeneratorService_GenerateQRCode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::qrcode_generator::mojom::internal::QRCodeGeneratorService_GenerateQRCode_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->request)::BaseType> request_fragment(
          params.message());
  mojo::internal::Serialize<::qrcode_generator::mojom::GenerateQRCodeRequestDataView>(
      in_request, request_fragment);
  params->request.Set(
      request_fragment.is_null() ? nullptr : request_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->request.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null request in QRCodeGeneratorService.GenerateQRCode request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(QRCodeGeneratorService::Name_);
  message.set_method_name("GenerateQRCode");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new QRCodeGeneratorService_GenerateQRCode_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class QRCodeGeneratorService_GenerateQRCode_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static QRCodeGeneratorService::GenerateQRCodeCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<QRCodeGeneratorService_GenerateQRCode_ProxyToResponder> proxy(
        new QRCodeGeneratorService_GenerateQRCode_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&QRCodeGeneratorService_GenerateQRCode_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~QRCodeGeneratorService_GenerateQRCode_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  QRCodeGeneratorService_GenerateQRCode_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "QRCodeGeneratorService::GenerateQRCodeCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      GenerateQRCodeResponsePtr in_response);
};

bool QRCodeGeneratorService_GenerateQRCode_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data* params =
      reinterpret_cast<
          internal::QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  GenerateQRCodeResponsePtr p_response{};
  QRCodeGeneratorService_GenerateQRCode_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResponse(&p_response))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        QRCodeGeneratorService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_response));
  return true;
}

void QRCodeGeneratorService_GenerateQRCode_ProxyToResponder::Run(
    GenerateQRCodeResponsePtr in_response) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply qrcode_generator::mojom::QRCodeGeneratorService::GenerateQRCode", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("response"), in_response,
                        "<value of type GenerateQRCodeResponsePtr>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kQRCodeGeneratorService_GenerateQRCode_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::qrcode_generator::mojom::internal::QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->response)::BaseType> response_fragment(
          params.message());
  mojo::internal::Serialize<::qrcode_generator::mojom::GenerateQRCodeResponseDataView>(
      in_response, response_fragment);
  params->response.Set(
      response_fragment.is_null() ? nullptr : response_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->response.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null response in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(QRCodeGeneratorService::Name_);
  message.set_method_name("GenerateQRCode");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool QRCodeGeneratorServiceStubDispatch::Accept(
    QRCodeGeneratorService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kQRCodeGeneratorService_GenerateQRCode_Name: {
      break;
    }
  }
  return false;
}

// static
bool QRCodeGeneratorServiceStubDispatch::AcceptWithResponder(
    QRCodeGeneratorService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kQRCodeGeneratorService_GenerateQRCode_Name: {

      internal::QRCodeGeneratorService_GenerateQRCode_Params_Data* params =
          reinterpret_cast<
              internal::QRCodeGeneratorService_GenerateQRCode_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      GenerateQRCodeRequestPtr p_request{};
      QRCodeGeneratorService_GenerateQRCode_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadRequest(&p_request))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            QRCodeGeneratorService::Name_, 0, false);
        return false;
      }
      QRCodeGeneratorService::GenerateQRCodeCallback callback =
          QRCodeGeneratorService_GenerateQRCode_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GenerateQRCode(
std::move(p_request), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kQRCodeGeneratorServiceValidationInfo[] = {
    {&internal::QRCodeGeneratorService_GenerateQRCode_Params_Data::Validate,
     &internal::QRCodeGeneratorService_GenerateQRCode_ResponseParams_Data::Validate},
};

bool QRCodeGeneratorServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::qrcode_generator::mojom::QRCodeGeneratorService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kQRCodeGeneratorServiceValidationInfo);
}

bool QRCodeGeneratorServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::qrcode_generator::mojom::QRCodeGeneratorService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kQRCodeGeneratorServiceValidationInfo);
}


}  // namespace mojom
}  // namespace qrcode_generator


namespace mojo {


// static
bool StructTraits<::qrcode_generator::mojom::GenerateQRCodeRequest::DataView, ::qrcode_generator::mojom::GenerateQRCodeRequestPtr>::Read(
    ::qrcode_generator::mojom::GenerateQRCodeRequest::DataView input,
    ::qrcode_generator::mojom::GenerateQRCodeRequestPtr* output) {
  bool success = true;
  ::qrcode_generator::mojom::GenerateQRCodeRequestPtr result(::qrcode_generator::mojom::GenerateQRCodeRequest::New());
  
      if (success && !input.ReadData(&result->data))
        success = false;
      if (success)
        result->should_render = input.should_render();
      if (success)
        result->render_dino = input.render_dino();
      if (success && !input.ReadRenderModuleStyle(&result->render_module_style))
        success = false;
      if (success && !input.ReadRenderLocatorStyle(&result->render_locator_style))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::qrcode_generator::mojom::GenerateQRCodeResponse::DataView, ::qrcode_generator::mojom::GenerateQRCodeResponsePtr>::Read(
    ::qrcode_generator::mojom::GenerateQRCodeResponse::DataView input,
    ::qrcode_generator::mojom::GenerateQRCodeResponsePtr* output) {
  bool success = true;
  ::qrcode_generator::mojom::GenerateQRCodeResponsePtr result(::qrcode_generator::mojom::GenerateQRCodeResponse::New());
  
      if (success && !input.ReadErrorCode(&result->error_code))
        success = false;
      if (success && !input.ReadBitmap(&result->bitmap))
        success = false;
      if (success && !input.ReadData(&result->data))
        success = false;
      if (success && !input.ReadDataSize(&result->data_size))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace qrcode_generator {
namespace mojom {


void QRCodeGeneratorServiceInterceptorForTesting::GenerateQRCode(GenerateQRCodeRequestPtr request, GenerateQRCodeCallback callback) {
  GetForwardingInterface()->GenerateQRCode(std::move(request), std::move(callback));
}
QRCodeGeneratorServiceAsyncWaiter::QRCodeGeneratorServiceAsyncWaiter(
    QRCodeGeneratorService* proxy) : proxy_(proxy) {}

QRCodeGeneratorServiceAsyncWaiter::~QRCodeGeneratorServiceAsyncWaiter() = default;

void QRCodeGeneratorServiceAsyncWaiter::GenerateQRCode(
    GenerateQRCodeRequestPtr request, GenerateQRCodeResponsePtr* out_response) {
  base::RunLoop loop;
  proxy_->GenerateQRCode(std::move(request),
      base::BindOnce(
          [](base::RunLoop* loop,
             GenerateQRCodeResponsePtr* out_response
,
             GenerateQRCodeResponsePtr response) {*out_response = std::move(response);
            loop->Quit();
          },
          &loop,
          out_response));
  loop.Run();
}





}  // namespace mojom
}  // namespace qrcode_generator


#if defined(__clang__)
#pragma clang diagnostic pop
#endif