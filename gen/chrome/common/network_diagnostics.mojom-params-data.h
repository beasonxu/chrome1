// chrome/common/network_diagnostics.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_NETWORK_DIAGNOSTICS_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_NETWORK_DIAGNOSTICS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {

class ValidationContext;
class  NetworkDiagnostics_RunNetworkDiagnostics_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> failed_url;

 private:
  friend class mojo::internal::MessageFragment<NetworkDiagnostics_RunNetworkDiagnostics_Params_Data>;

  NetworkDiagnostics_RunNetworkDiagnostics_Params_Data();
  ~NetworkDiagnostics_RunNetworkDiagnostics_Params_Data() = delete;
};
static_assert(sizeof(NetworkDiagnostics_RunNetworkDiagnostics_Params_Data) == 16,
              "Bad sizeof(NetworkDiagnostics_RunNetworkDiagnostics_Params_Data)");
class  NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t can_show : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data>;

  NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data();
  ~NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data() = delete;
};
static_assert(sizeof(NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data) == 16,
              "Bad sizeof(NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data)");
class  NetworkDiagnosticsClient_DNSProbeStatus_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<NetworkDiagnosticsClient_DNSProbeStatus_Params_Data>;

  NetworkDiagnosticsClient_DNSProbeStatus_Params_Data();
  ~NetworkDiagnosticsClient_DNSProbeStatus_Params_Data() = delete;
};
static_assert(sizeof(NetworkDiagnosticsClient_DNSProbeStatus_Params_Data) == 16,
              "Bad sizeof(NetworkDiagnosticsClient_DNSProbeStatus_Params_Data)");

}  // namespace internal


class NetworkDiagnostics_RunNetworkDiagnostics_ParamsDataView {
 public:
  NetworkDiagnostics_RunNetworkDiagnostics_ParamsDataView() = default;

  NetworkDiagnostics_RunNetworkDiagnostics_ParamsDataView(
      internal::NetworkDiagnostics_RunNetworkDiagnostics_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFailedUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFailedUrl(UserType* output) {
    
    auto* pointer = data_->failed_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::NetworkDiagnostics_RunNetworkDiagnostics_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_ParamsDataView {
 public:
  NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_ParamsDataView() = default;

  NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_ParamsDataView(
      internal::NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool can_show() const {
    return data_->can_show;
  }
 private:
  internal::NetworkDiagnosticsClient_SetCanShowNetworkDiagnosticsDialog_Params_Data* data_ = nullptr;
};



class NetworkDiagnosticsClient_DNSProbeStatus_ParamsDataView {
 public:
  NetworkDiagnosticsClient_DNSProbeStatus_ParamsDataView() = default;

  NetworkDiagnosticsClient_DNSProbeStatus_ParamsDataView(
      internal::NetworkDiagnosticsClient_DNSProbeStatus_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t status() const {
    return data_->status;
  }
 private:
  internal::NetworkDiagnosticsClient_DNSProbeStatus_Params_Data* data_ = nullptr;
};


inline void NetworkDiagnostics_RunNetworkDiagnostics_ParamsDataView::GetFailedUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->failed_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_NETWORK_DIAGNOSTICS_MOJOM_PARAMS_DATA_H_