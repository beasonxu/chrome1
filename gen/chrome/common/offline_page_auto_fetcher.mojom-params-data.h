// chrome/common/offline_page_auto_fetcher.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_OFFLINE_PAGE_AUTO_FETCHER_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_OFFLINE_PAGE_AUTO_FETCHER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {

class ValidationContext;
class  OfflinePageAutoFetcher_TrySchedule_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t user_requested : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<OfflinePageAutoFetcher_TrySchedule_Params_Data>;

  OfflinePageAutoFetcher_TrySchedule_Params_Data();
  ~OfflinePageAutoFetcher_TrySchedule_Params_Data() = delete;
};
static_assert(sizeof(OfflinePageAutoFetcher_TrySchedule_Params_Data) == 16,
              "Bad sizeof(OfflinePageAutoFetcher_TrySchedule_Params_Data)");
class  OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t out;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data>;

  OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data();
  ~OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data() = delete;
};
static_assert(sizeof(OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data) == 16,
              "Bad sizeof(OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data)");
class  OfflinePageAutoFetcher_CancelSchedule_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<OfflinePageAutoFetcher_CancelSchedule_Params_Data>;

  OfflinePageAutoFetcher_CancelSchedule_Params_Data();
  ~OfflinePageAutoFetcher_CancelSchedule_Params_Data() = delete;
};
static_assert(sizeof(OfflinePageAutoFetcher_CancelSchedule_Params_Data) == 8,
              "Bad sizeof(OfflinePageAutoFetcher_CancelSchedule_Params_Data)");

}  // namespace internal


class OfflinePageAutoFetcher_TrySchedule_ParamsDataView {
 public:
  OfflinePageAutoFetcher_TrySchedule_ParamsDataView() = default;

  OfflinePageAutoFetcher_TrySchedule_ParamsDataView(
      internal::OfflinePageAutoFetcher_TrySchedule_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool user_requested() const {
    return data_->user_requested;
  }
 private:
  internal::OfflinePageAutoFetcher_TrySchedule_Params_Data* data_ = nullptr;
};



class OfflinePageAutoFetcher_TrySchedule_ResponseParamsDataView {
 public:
  OfflinePageAutoFetcher_TrySchedule_ResponseParamsDataView() = default;

  OfflinePageAutoFetcher_TrySchedule_ResponseParamsDataView(
      internal::OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadOut(UserType* output) const {
    auto data_value = data_->out;
    return mojo::internal::Deserialize<::chrome::mojom::OfflinePageAutoFetcherScheduleResult>(
        data_value, output);
  }
  OfflinePageAutoFetcherScheduleResult out() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::chrome::mojom::OfflinePageAutoFetcherScheduleResult>(data_->out));
  }
 private:
  internal::OfflinePageAutoFetcher_TrySchedule_ResponseParams_Data* data_ = nullptr;
};



class OfflinePageAutoFetcher_CancelSchedule_ParamsDataView {
 public:
  OfflinePageAutoFetcher_CancelSchedule_ParamsDataView() = default;

  OfflinePageAutoFetcher_CancelSchedule_ParamsDataView(
      internal::OfflinePageAutoFetcher_CancelSchedule_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::OfflinePageAutoFetcher_CancelSchedule_Params_Data* data_ = nullptr;
};







}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_OFFLINE_PAGE_AUTO_FETCHER_MOJOM_PARAMS_DATA_H_