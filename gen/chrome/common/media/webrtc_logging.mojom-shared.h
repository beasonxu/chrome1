// chrome/common/media/webrtc_logging.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_SHARED_H_
#define CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/common/media/webrtc_logging.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace chrome {
namespace mojom {
class WebRtcLoggingMessageDataView;



}  // namespace mojom
}  // namespace chrome

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::chrome::mojom::WebRtcLoggingMessageDataView> {
  using Data = ::chrome::mojom::internal::WebRtcLoggingMessage_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace chrome {
namespace mojom {
// Interface base classes. They are used for type safety check.
class WebRtcLoggingClientInterfaceBase {};

using WebRtcLoggingClientPtrDataView =
    mojo::InterfacePtrDataView<WebRtcLoggingClientInterfaceBase>;
using WebRtcLoggingClientRequestDataView =
    mojo::InterfaceRequestDataView<WebRtcLoggingClientInterfaceBase>;
using WebRtcLoggingClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebRtcLoggingClientInterfaceBase>;
using WebRtcLoggingClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebRtcLoggingClientInterfaceBase>;
class WebRtcLoggingAgentInterfaceBase {};

using WebRtcLoggingAgentPtrDataView =
    mojo::InterfacePtrDataView<WebRtcLoggingAgentInterfaceBase>;
using WebRtcLoggingAgentRequestDataView =
    mojo::InterfaceRequestDataView<WebRtcLoggingAgentInterfaceBase>;
using WebRtcLoggingAgentAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebRtcLoggingAgentInterfaceBase>;
using WebRtcLoggingAgentAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebRtcLoggingAgentInterfaceBase>;


class WebRtcLoggingMessageDataView {
 public:
  WebRtcLoggingMessageDataView() = default;

  WebRtcLoggingMessageDataView(
      internal::WebRtcLoggingMessage_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimestamp(UserType* output) {
    
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebRtcLoggingMessage_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace chrome

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::chrome::mojom::WebRtcLoggingMessageDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::chrome::mojom::WebRtcLoggingMessageDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::chrome::mojom::internal::WebRtcLoggingMessage_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::timestamp(input)) in_timestamp = Traits::timestamp(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->timestamp)::BaseType> timestamp_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_timestamp, timestamp_fragment);
    fragment->timestamp.Set(
        timestamp_fragment.is_null() ? nullptr : timestamp_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->timestamp.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null timestamp in WebRtcLoggingMessage struct");
    decltype(Traits::data(input)) in_data = Traits::data(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->data)::BaseType> data_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_data, data_fragment);
    fragment->data.Set(
        data_fragment.is_null() ? nullptr : data_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data in WebRtcLoggingMessage struct");
  }

  static bool Deserialize(::chrome::mojom::internal::WebRtcLoggingMessage_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::chrome::mojom::WebRtcLoggingMessageDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace chrome {
namespace mojom {

inline void WebRtcLoggingMessageDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void WebRtcLoggingMessageDataView::GetDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace chrome

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CHROME_COMMON_MEDIA_WEBRTC_LOGGING_MOJOM_SHARED_H_