// chrome/common/mhtml_page_notifier.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MHTML_PAGE_NOTIFIER_MOJOM_H_
#define CHROME_COMMON_MHTML_PAGE_NOTIFIER_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/common/mhtml_page_notifier.mojom-shared.h"
#include "chrome/common/mhtml_page_notifier.mojom-forward.h"
#include "mojo/public/mojom/base/time.mojom.h"
#include "third_party/blink/public/mojom/loader/mhtml_load_result.mojom-forward.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace offline_pages {
namespace mojom {

class MhtmlPageNotifierProxy;

template <typename ImplRefTraits>
class MhtmlPageNotifierStub;

class MhtmlPageNotifierRequestValidator;


class  MhtmlPageNotifier
    : public MhtmlPageNotifierInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = MhtmlPageNotifierInterfaceBase;
  using Proxy_ = MhtmlPageNotifierProxy;

  template <typename ImplRefTraits>
  using Stub_ = MhtmlPageNotifierStub<ImplRefTraits>;

  using RequestValidator_ = MhtmlPageNotifierRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kNotifyMhtmlPageLoadAttemptedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct NotifyMhtmlPageLoadAttempted_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~MhtmlPageNotifier() = default;

  
  virtual void NotifyMhtmlPageLoadAttempted(::blink::mojom::MHTMLLoadResult load_result, const ::GURL& url, ::base::Time date) = 0;
};



class  MhtmlPageNotifierProxy
    : public MhtmlPageNotifier {
 public:
  using InterfaceType = MhtmlPageNotifier;

  explicit MhtmlPageNotifierProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void NotifyMhtmlPageLoadAttempted(::blink::mojom::MHTMLLoadResult load_result, const ::GURL& url, ::base::Time date) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  MhtmlPageNotifierStubDispatch {
 public:
  static bool Accept(MhtmlPageNotifier* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      MhtmlPageNotifier* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<MhtmlPageNotifier>>
class MhtmlPageNotifierStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  MhtmlPageNotifierStub() = default;
  ~MhtmlPageNotifierStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return MhtmlPageNotifierStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return MhtmlPageNotifierStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  MhtmlPageNotifierRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace offline_pages

namespace mojo {

}  // namespace mojo

#endif  // CHROME_COMMON_MHTML_PAGE_NOTIFIER_MOJOM_H_