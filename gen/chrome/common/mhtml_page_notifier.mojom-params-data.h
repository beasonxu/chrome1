// chrome/common/mhtml_page_notifier.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_MHTML_PAGE_NOTIFIER_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_MHTML_PAGE_NOTIFIER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace offline_pages {
namespace mojom {
namespace internal {

class ValidationContext;
class  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t load_result;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> date;

 private:
  friend class mojo::internal::MessageFragment<MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data>;

  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data();
  ~MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data() = delete;
};
static_assert(sizeof(MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data) == 32,
              "Bad sizeof(MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data)");

}  // namespace internal


class MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_ParamsDataView {
 public:
  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_ParamsDataView() = default;

  MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_ParamsDataView(
      internal::MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadLoadResult(UserType* output) const {
    auto data_value = data_->load_result;
    return mojo::internal::Deserialize<::blink::mojom::MHTMLLoadResult>(
        data_value, output);
  }
  ::blink::mojom::MHTMLLoadResult load_result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::MHTMLLoadResult>(data_->load_result));
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetDateDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDate(UserType* output) {
    
    auto* pointer = data_->date.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
 private:
  internal::MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void MhtmlPageNotifier_NotifyMhtmlPageLoadAttempted_ParamsDataView::GetDateDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->date.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace offline_pages

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_MHTML_PAGE_NOTIFIER_MOJOM_PARAMS_DATA_H_