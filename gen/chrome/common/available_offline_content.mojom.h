// chrome/common/available_offline_content.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_H_
#define CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/common/available_offline_content.mojom-shared.h"
#include "chrome/common/available_offline_content.mojom-forward.h"
#include "url/mojom/url.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace chrome {
namespace mojom {

class AvailableOfflineContentProviderProxy;

template <typename ImplRefTraits>
class AvailableOfflineContentProviderStub;

class AvailableOfflineContentProviderRequestValidator;
class AvailableOfflineContentProviderResponseValidator;


class  AvailableOfflineContentProvider
    : public AvailableOfflineContentProviderInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AvailableOfflineContentProviderInterfaceBase;
  using Proxy_ = AvailableOfflineContentProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = AvailableOfflineContentProviderStub<ImplRefTraits>;

  using RequestValidator_ = AvailableOfflineContentProviderRequestValidator;
  using ResponseValidator_ = AvailableOfflineContentProviderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kListMinVersion = 0,
    kLaunchItemMinVersion = 0,
    kLaunchDownloadsPageMinVersion = 0,
    kListVisibilityChangedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct List_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LaunchItem_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LaunchDownloadsPage_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ListVisibilityChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AvailableOfflineContentProvider() = default;


  using ListCallback = base::OnceCallback<void(bool, std::vector<AvailableOfflineContentPtr>)>;
  
  virtual void List(ListCallback callback) = 0;

  
  virtual void LaunchItem(const std::string& item_id, const std::string& name_space) = 0;

  
  virtual void LaunchDownloadsPage(bool open_prefetched_articles_tab) = 0;

  
  virtual void ListVisibilityChanged(bool is_visible) = 0;
};



class  AvailableOfflineContentProviderProxy
    : public AvailableOfflineContentProvider {
 public:
  using InterfaceType = AvailableOfflineContentProvider;

  explicit AvailableOfflineContentProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void List(ListCallback callback) final;
  
  void LaunchItem(const std::string& item_id, const std::string& name_space) final;
  
  void LaunchDownloadsPage(bool open_prefetched_articles_tab) final;
  
  void ListVisibilityChanged(bool is_visible) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  AvailableOfflineContentProviderStubDispatch {
 public:
  static bool Accept(AvailableOfflineContentProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AvailableOfflineContentProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AvailableOfflineContentProvider>>
class AvailableOfflineContentProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AvailableOfflineContentProviderStub() = default;
  ~AvailableOfflineContentProviderStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AvailableOfflineContentProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AvailableOfflineContentProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AvailableOfflineContentProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AvailableOfflineContentProviderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class  AvailableOfflineContent {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<AvailableOfflineContent, T>::value>;
  using DataView = AvailableOfflineContentDataView;
  using Data_ = internal::AvailableOfflineContent_Data;

  template <typename... Args>
  static AvailableOfflineContentPtr New(Args&&... args) {
    return AvailableOfflineContentPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static AvailableOfflineContentPtr From(const U& u) {
    return mojo::TypeConverter<AvailableOfflineContentPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, AvailableOfflineContent>::Convert(*this);
  }


  AvailableOfflineContent();

  AvailableOfflineContent(
      const std::string& id,
      const std::string& name_space,
      const std::string& title,
      const std::string& snippet,
      const std::string& date_modified,
      const std::string& attribution,
      const ::GURL& thumbnail_data_uri,
      const ::GURL& favicon_data_uri,
      AvailableContentType content_type);


  ~AvailableOfflineContent();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = AvailableOfflineContentPtr>
  AvailableOfflineContentPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, AvailableOfflineContent::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, AvailableOfflineContent::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        AvailableOfflineContent::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        AvailableOfflineContent::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::AvailableOfflineContent_UnserializedMessageContext<
            UserType, AvailableOfflineContent::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<AvailableOfflineContent::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return AvailableOfflineContent::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::AvailableOfflineContent_UnserializedMessageContext<
            UserType, AvailableOfflineContent::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<AvailableOfflineContent::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string id;
  
  std::string name_space;
  
  std::string title;
  
  std::string snippet;
  
  std::string date_modified;
  
  std::string attribution;
  
  ::GURL thumbnail_data_uri;
  
  ::GURL favicon_data_uri;
  
  AvailableContentType content_type;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, AvailableOfflineContent::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, AvailableOfflineContent::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, AvailableOfflineContent::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, AvailableOfflineContent::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
AvailableOfflineContentPtr AvailableOfflineContent::Clone() const {
  return New(
      mojo::Clone(id),
      mojo::Clone(name_space),
      mojo::Clone(title),
      mojo::Clone(snippet),
      mojo::Clone(date_modified),
      mojo::Clone(attribution),
      mojo::Clone(thumbnail_data_uri),
      mojo::Clone(favicon_data_uri),
      mojo::Clone(content_type)
  );
}

template <typename T, AvailableOfflineContent::EnableIfSame<T>*>
bool AvailableOfflineContent::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->id, other_struct.id))
    return false;
  if (!mojo::Equals(this->name_space, other_struct.name_space))
    return false;
  if (!mojo::Equals(this->title, other_struct.title))
    return false;
  if (!mojo::Equals(this->snippet, other_struct.snippet))
    return false;
  if (!mojo::Equals(this->date_modified, other_struct.date_modified))
    return false;
  if (!mojo::Equals(this->attribution, other_struct.attribution))
    return false;
  if (!mojo::Equals(this->thumbnail_data_uri, other_struct.thumbnail_data_uri))
    return false;
  if (!mojo::Equals(this->favicon_data_uri, other_struct.favicon_data_uri))
    return false;
  if (!mojo::Equals(this->content_type, other_struct.content_type))
    return false;
  return true;
}

template <typename T, AvailableOfflineContent::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.id < rhs.id)
    return true;
  if (rhs.id < lhs.id)
    return false;
  if (lhs.name_space < rhs.name_space)
    return true;
  if (rhs.name_space < lhs.name_space)
    return false;
  if (lhs.title < rhs.title)
    return true;
  if (rhs.title < lhs.title)
    return false;
  if (lhs.snippet < rhs.snippet)
    return true;
  if (rhs.snippet < lhs.snippet)
    return false;
  if (lhs.date_modified < rhs.date_modified)
    return true;
  if (rhs.date_modified < lhs.date_modified)
    return false;
  if (lhs.attribution < rhs.attribution)
    return true;
  if (rhs.attribution < lhs.attribution)
    return false;
  if (lhs.thumbnail_data_uri < rhs.thumbnail_data_uri)
    return true;
  if (rhs.thumbnail_data_uri < lhs.thumbnail_data_uri)
    return false;
  if (lhs.favicon_data_uri < rhs.favicon_data_uri)
    return true;
  if (rhs.favicon_data_uri < lhs.favicon_data_uri)
    return false;
  if (lhs.content_type < rhs.content_type)
    return true;
  if (rhs.content_type < lhs.content_type)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace chrome

namespace mojo {


template <>
struct  StructTraits<::chrome::mojom::AvailableOfflineContent::DataView,
                                         ::chrome::mojom::AvailableOfflineContentPtr> {
  static bool IsNull(const ::chrome::mojom::AvailableOfflineContentPtr& input) { return !input; }
  static void SetToNull(::chrome::mojom::AvailableOfflineContentPtr* output) { output->reset(); }

  static const decltype(::chrome::mojom::AvailableOfflineContent::id)& id(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->id;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::name_space)& name_space(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->name_space;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::title)& title(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->title;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::snippet)& snippet(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->snippet;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::date_modified)& date_modified(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->date_modified;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::attribution)& attribution(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->attribution;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::thumbnail_data_uri)& thumbnail_data_uri(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->thumbnail_data_uri;
  }

  static const decltype(::chrome::mojom::AvailableOfflineContent::favicon_data_uri)& favicon_data_uri(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->favicon_data_uri;
  }

  static decltype(::chrome::mojom::AvailableOfflineContent::content_type) content_type(
      const ::chrome::mojom::AvailableOfflineContentPtr& input) {
    return input->content_type;
  }

  static bool Read(::chrome::mojom::AvailableOfflineContent::DataView input, ::chrome::mojom::AvailableOfflineContentPtr* output);
};

}  // namespace mojo

#endif  // CHROME_COMMON_AVAILABLE_OFFLINE_CONTENT_MOJOM_H_