// chrome/common/cart/commerce_hints.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_SHARED_H_
#define CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "chrome/common/cart/commerce_hints.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace cart {
namespace mojom {
class ProductDataView;

class HeuristicsDataView;



}  // namespace mojom
}  // namespace cart

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::cart::mojom::ProductDataView> {
  using Data = ::cart::mojom::internal::Product_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::cart::mojom::HeuristicsDataView> {
  using Data = ::cart::mojom::internal::Heuristics_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace cart {
namespace mojom {
// Interface base classes. They are used for type safety check.
class CommerceHintObserverInterfaceBase {};

using CommerceHintObserverPtrDataView =
    mojo::InterfacePtrDataView<CommerceHintObserverInterfaceBase>;
using CommerceHintObserverRequestDataView =
    mojo::InterfaceRequestDataView<CommerceHintObserverInterfaceBase>;
using CommerceHintObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CommerceHintObserverInterfaceBase>;
using CommerceHintObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CommerceHintObserverInterfaceBase>;


class ProductDataView {
 public:
  ProductDataView() = default;

  ProductDataView(
      internal::Product_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetImageUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadImageUrl(UserType* output) {
    
    auto* pointer = data_->image_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetProductIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProductId(UserType* output) {
    
    auto* pointer = data_->product_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::Product_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HeuristicsDataView {
 public:
  HeuristicsDataView() = default;

  HeuristicsDataView(
      internal::Heuristics_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetVersionNumberDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVersionNumber(UserType* output) {
    
    auto* pointer = data_->version_number.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetHintJsonDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHintJsonData(UserType* output) {
    
    auto* pointer = data_->hint_json_data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetGlobalJsonDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGlobalJsonData(UserType* output) {
    
    auto* pointer = data_->global_json_data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::Heuristics_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace cart

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cart::mojom::ProductDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cart::mojom::ProductDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cart::mojom::internal::Product_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::image_url(input)) in_image_url = Traits::image_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->image_url)::BaseType> image_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_image_url, image_url_fragment);
    fragment->image_url.Set(
        image_url_fragment.is_null() ? nullptr : image_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->image_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null image_url in Product struct");
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in Product struct");
    decltype(Traits::product_id(input)) in_product_id = Traits::product_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->product_id)::BaseType> product_id_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_product_id, product_id_fragment);
    fragment->product_id.Set(
        product_id_fragment.is_null() ? nullptr : product_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->product_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null product_id in Product struct");
  }

  static bool Deserialize(::cart::mojom::internal::Product_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cart::mojom::ProductDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::cart::mojom::HeuristicsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::cart::mojom::HeuristicsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::cart::mojom::internal::Heuristics_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::version_number(input)) in_version_number = Traits::version_number(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->version_number)::BaseType> version_number_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_version_number, version_number_fragment);
    fragment->version_number.Set(
        version_number_fragment.is_null() ? nullptr : version_number_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->version_number.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null version_number in Heuristics struct");
    decltype(Traits::hint_json_data(input)) in_hint_json_data = Traits::hint_json_data(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->hint_json_data)::BaseType> hint_json_data_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_hint_json_data, hint_json_data_fragment);
    fragment->hint_json_data.Set(
        hint_json_data_fragment.is_null() ? nullptr : hint_json_data_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->hint_json_data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null hint_json_data in Heuristics struct");
    decltype(Traits::global_json_data(input)) in_global_json_data = Traits::global_json_data(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->global_json_data)::BaseType> global_json_data_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_global_json_data, global_json_data_fragment);
    fragment->global_json_data.Set(
        global_json_data_fragment.is_null() ? nullptr : global_json_data_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->global_json_data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null global_json_data in Heuristics struct");
  }

  static bool Deserialize(::cart::mojom::internal::Heuristics_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::cart::mojom::HeuristicsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace cart {
namespace mojom {

inline void ProductDataView::GetImageUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->image_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void ProductDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void ProductDataView::GetProductIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->product_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void HeuristicsDataView::GetVersionNumberDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->version_number.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void HeuristicsDataView::GetHintJsonDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->hint_json_data.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void HeuristicsDataView::GetGlobalJsonDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->global_json_data.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace cart

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CHROME_COMMON_CART_COMMERCE_HINTS_MOJOM_SHARED_H_