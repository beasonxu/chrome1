// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx_info.proto

#include "crx_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace extensions {
PROTOBUF_CONSTEXPR ClientCRXListInfoRequest::ClientCRXListInfoRequest(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , locale_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientCRXListInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCRXListInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCRXListInfoRequestDefaultTypeInternal() {}
  union {
    ClientCRXListInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCRXListInfoRequestDefaultTypeInternal _ClientCRXListInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage(
    ::_pbi::ConstantInitialized)
  : detail_message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ClientCRXListInfoResponse_UserMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCRXListInfoResponse_UserMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCRXListInfoResponse_UserMessageDefaultTypeInternal() {}
  union {
    ClientCRXListInfoResponse_UserMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCRXListInfoResponse_UserMessageDefaultTypeInternal _ClientCRXListInfoResponse_UserMessage_default_instance_;
PROTOBUF_CONSTEXPR ClientCRXListInfoResponse::ClientCRXListInfoResponse(
    ::_pbi::ConstantInitialized)
  : user_message_(nullptr)
  , verdict_(0)
{}
struct ClientCRXListInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClientCRXListInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClientCRXListInfoResponseDefaultTypeInternal() {}
  union {
    ClientCRXListInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClientCRXListInfoResponseDefaultTypeInternal _ClientCRXListInfoResponse_default_instance_;
}  // namespace extensions
namespace extensions {
bool ClientCRXListInfoResponse_Verdict_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ClientCRXListInfoResponse_Verdict_strings[5] = {};

static const char ClientCRXListInfoResponse_Verdict_names[] =
  "CWS_POLICY_VIOLATION"
  "MALWARE"
  "NOT_IN_BLOCKLIST"
  "POTENTIALLY_UNWANTED"
  "SECURITY_VULNERABILITY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ClientCRXListInfoResponse_Verdict_entries[] = {
  { {ClientCRXListInfoResponse_Verdict_names + 0, 20}, 3 },
  { {ClientCRXListInfoResponse_Verdict_names + 20, 7}, 1 },
  { {ClientCRXListInfoResponse_Verdict_names + 27, 16}, 0 },
  { {ClientCRXListInfoResponse_Verdict_names + 43, 20}, 4 },
  { {ClientCRXListInfoResponse_Verdict_names + 63, 22}, 2 },
};

static const int ClientCRXListInfoResponse_Verdict_entries_by_number[] = {
  2, // 0 -> NOT_IN_BLOCKLIST
  1, // 1 -> MALWARE
  4, // 2 -> SECURITY_VULNERABILITY
  0, // 3 -> CWS_POLICY_VIOLATION
  3, // 4 -> POTENTIALLY_UNWANTED
};

const std::string& ClientCRXListInfoResponse_Verdict_Name(
    ClientCRXListInfoResponse_Verdict value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ClientCRXListInfoResponse_Verdict_entries,
          ClientCRXListInfoResponse_Verdict_entries_by_number,
          5, ClientCRXListInfoResponse_Verdict_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ClientCRXListInfoResponse_Verdict_entries,
      ClientCRXListInfoResponse_Verdict_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ClientCRXListInfoResponse_Verdict_strings[idx].get();
}
bool ClientCRXListInfoResponse_Verdict_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCRXListInfoResponse_Verdict* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ClientCRXListInfoResponse_Verdict_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<ClientCRXListInfoResponse_Verdict>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::NOT_IN_BLOCKLIST;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::MALWARE;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::SECURITY_VULNERABILITY;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::CWS_POLICY_VIOLATION;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::POTENTIALLY_UNWANTED;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::Verdict_MIN;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::Verdict_MAX;
constexpr int ClientCRXListInfoResponse::Verdict_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ClientCRXListInfoRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCRXListInfoRequest>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_locale(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

ClientCRXListInfoRequest::ClientCRXListInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:extensions.ClientCRXListInfoRequest)
}
ClientCRXListInfoRequest::ClientCRXListInfoRequest(const ClientCRXListInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  locale_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    locale_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_locale()) {
    locale_.Set(from._internal_locale(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoRequest)
}

inline void ClientCRXListInfoRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
locale_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  locale_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientCRXListInfoRequest::~ClientCRXListInfoRequest() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCRXListInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  locale_.Destroy();
}

void ClientCRXListInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCRXListInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      locale_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientCRXListInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string locale = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_locale();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCRXListInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extensions.ClientCRXListInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // optional string locale = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_locale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extensions.ClientCRXListInfoRequest)
  return target;
}

size_t ClientCRXListInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoRequest)
  size_t total_size = 0;

  // required string id = 1;
  if (_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string locale = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_locale());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCRXListInfoRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientCRXListInfoRequest*>(
      &from));
}

void ClientCRXListInfoRequest::MergeFrom(const ClientCRXListInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_locale(from._internal_locale());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientCRXListInfoRequest::CopyFrom(const ClientCRXListInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoRequest::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ClientCRXListInfoRequest::InternalSwap(ClientCRXListInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &locale_, lhs_arena,
      &other->locale_, rhs_arena
  );
}

std::string ClientCRXListInfoRequest::GetTypeName() const {
  return "extensions.ClientCRXListInfoRequest";
}


// ===================================================================

class ClientCRXListInfoResponse_UserMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCRXListInfoResponse_UserMessage>()._has_bits_);
  static void set_has_detail_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:extensions.ClientCRXListInfoResponse.UserMessage)
}
ClientCRXListInfoResponse_UserMessage::ClientCRXListInfoResponse_UserMessage(const ClientCRXListInfoResponse_UserMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  detail_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detail_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_detail_message()) {
    detail_message_.Set(from._internal_detail_message(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoResponse.UserMessage)
}

inline void ClientCRXListInfoResponse_UserMessage::SharedCtor() {
detail_message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detail_message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ClientCRXListInfoResponse_UserMessage::~ClientCRXListInfoResponse_UserMessage() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoResponse.UserMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCRXListInfoResponse_UserMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  detail_message_.Destroy();
}

void ClientCRXListInfoResponse_UserMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCRXListInfoResponse_UserMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoResponse.UserMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    detail_message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientCRXListInfoResponse_UserMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string detail_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_detail_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCRXListInfoResponse_UserMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extensions.ClientCRXListInfoResponse.UserMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string detail_message = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_detail_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extensions.ClientCRXListInfoResponse.UserMessage)
  return target;
}

size_t ClientCRXListInfoResponse_UserMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoResponse.UserMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string detail_message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail_message());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCRXListInfoResponse_UserMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientCRXListInfoResponse_UserMessage*>(
      &from));
}

void ClientCRXListInfoResponse_UserMessage::MergeFrom(const ClientCRXListInfoResponse_UserMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoResponse.UserMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_detail_message()) {
    _internal_set_detail_message(from._internal_detail_message());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientCRXListInfoResponse_UserMessage::CopyFrom(const ClientCRXListInfoResponse_UserMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoResponse.UserMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoResponse_UserMessage::IsInitialized() const {
  return true;
}

void ClientCRXListInfoResponse_UserMessage::InternalSwap(ClientCRXListInfoResponse_UserMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detail_message_, lhs_arena,
      &other->detail_message_, rhs_arena
  );
}

std::string ClientCRXListInfoResponse_UserMessage::GetTypeName() const {
  return "extensions.ClientCRXListInfoResponse.UserMessage";
}


// ===================================================================

class ClientCRXListInfoResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ClientCRXListInfoResponse>()._has_bits_);
  static void set_has_verdict(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::extensions::ClientCRXListInfoResponse_UserMessage& user_message(const ClientCRXListInfoResponse* msg);
  static void set_has_user_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::extensions::ClientCRXListInfoResponse_UserMessage&
ClientCRXListInfoResponse::_Internal::user_message(const ClientCRXListInfoResponse* msg) {
  return *msg->user_message_;
}
ClientCRXListInfoResponse::ClientCRXListInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:extensions.ClientCRXListInfoResponse)
}
ClientCRXListInfoResponse::ClientCRXListInfoResponse(const ClientCRXListInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_user_message()) {
    user_message_ = new ::extensions::ClientCRXListInfoResponse_UserMessage(*from.user_message_);
  } else {
    user_message_ = nullptr;
  }
  verdict_ = from.verdict_;
  // @@protoc_insertion_point(copy_constructor:extensions.ClientCRXListInfoResponse)
}

inline void ClientCRXListInfoResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&user_message_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&verdict_) -
    reinterpret_cast<char*>(&user_message_)) + sizeof(verdict_));
}

ClientCRXListInfoResponse::~ClientCRXListInfoResponse() {
  // @@protoc_insertion_point(destructor:extensions.ClientCRXListInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClientCRXListInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_message_;
}

void ClientCRXListInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ClientCRXListInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:extensions.ClientCRXListInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(user_message_ != nullptr);
    user_message_->Clear();
  }
  verdict_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ClientCRXListInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLOCKLIST];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::extensions::ClientCRXListInfoResponse_Verdict_IsValid(val))) {
            _internal_set_verdict(static_cast<::extensions::ClientCRXListInfoResponse_Verdict>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClientCRXListInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:extensions.ClientCRXListInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLOCKLIST];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_verdict(), target);
  }

  // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user_message(this),
        _Internal::user_message(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:extensions.ClientCRXListInfoResponse)
  return target;
}

size_t ClientCRXListInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:extensions.ClientCRXListInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *user_message_);
    }

    // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLOCKLIST];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_verdict());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ClientCRXListInfoResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ClientCRXListInfoResponse*>(
      &from));
}

void ClientCRXListInfoResponse::MergeFrom(const ClientCRXListInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:extensions.ClientCRXListInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_user_message()->::extensions::ClientCRXListInfoResponse_UserMessage::MergeFrom(from._internal_user_message());
    }
    if (cached_has_bits & 0x00000002u) {
      verdict_ = from.verdict_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ClientCRXListInfoResponse::CopyFrom(const ClientCRXListInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:extensions.ClientCRXListInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientCRXListInfoResponse::IsInitialized() const {
  return true;
}

void ClientCRXListInfoResponse::InternalSwap(ClientCRXListInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ClientCRXListInfoResponse, verdict_)
      + sizeof(ClientCRXListInfoResponse::verdict_)
      - PROTOBUF_FIELD_OFFSET(ClientCRXListInfoResponse, user_message_)>(
          reinterpret_cast<char*>(&user_message_),
          reinterpret_cast<char*>(&other->user_message_));
}

std::string ClientCRXListInfoResponse::GetTypeName() const {
  return "extensions.ClientCRXListInfoResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace extensions
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::extensions::ClientCRXListInfoRequest*
Arena::CreateMaybeMessage< ::extensions::ClientCRXListInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extensions::ClientCRXListInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::extensions::ClientCRXListInfoResponse_UserMessage*
Arena::CreateMaybeMessage< ::extensions::ClientCRXListInfoResponse_UserMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extensions::ClientCRXListInfoResponse_UserMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::extensions::ClientCRXListInfoResponse*
Arena::CreateMaybeMessage< ::extensions::ClientCRXListInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::extensions::ClientCRXListInfoResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
