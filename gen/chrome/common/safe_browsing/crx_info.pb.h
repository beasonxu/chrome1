// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crx_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_crx_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_crx_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_crx_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_crx_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace extensions {
class ClientCRXListInfoRequest;
struct ClientCRXListInfoRequestDefaultTypeInternal;
extern ClientCRXListInfoRequestDefaultTypeInternal _ClientCRXListInfoRequest_default_instance_;
class ClientCRXListInfoResponse;
struct ClientCRXListInfoResponseDefaultTypeInternal;
extern ClientCRXListInfoResponseDefaultTypeInternal _ClientCRXListInfoResponse_default_instance_;
class ClientCRXListInfoResponse_UserMessage;
struct ClientCRXListInfoResponse_UserMessageDefaultTypeInternal;
extern ClientCRXListInfoResponse_UserMessageDefaultTypeInternal _ClientCRXListInfoResponse_UserMessage_default_instance_;
}  // namespace extensions
PROTOBUF_NAMESPACE_OPEN
template<> ::extensions::ClientCRXListInfoRequest* Arena::CreateMaybeMessage<::extensions::ClientCRXListInfoRequest>(Arena*);
template<> ::extensions::ClientCRXListInfoResponse* Arena::CreateMaybeMessage<::extensions::ClientCRXListInfoResponse>(Arena*);
template<> ::extensions::ClientCRXListInfoResponse_UserMessage* Arena::CreateMaybeMessage<::extensions::ClientCRXListInfoResponse_UserMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace extensions {

enum ClientCRXListInfoResponse_Verdict : int {
  ClientCRXListInfoResponse_Verdict_NOT_IN_BLOCKLIST = 0,
  ClientCRXListInfoResponse_Verdict_MALWARE = 1,
  ClientCRXListInfoResponse_Verdict_SECURITY_VULNERABILITY = 2,
  ClientCRXListInfoResponse_Verdict_CWS_POLICY_VIOLATION = 3,
  ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED = 4
};
bool ClientCRXListInfoResponse_Verdict_IsValid(int value);
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse_Verdict_Verdict_MIN = ClientCRXListInfoResponse_Verdict_NOT_IN_BLOCKLIST;
constexpr ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse_Verdict_Verdict_MAX = ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED;
constexpr int ClientCRXListInfoResponse_Verdict_Verdict_ARRAYSIZE = ClientCRXListInfoResponse_Verdict_Verdict_MAX + 1;

const std::string& ClientCRXListInfoResponse_Verdict_Name(ClientCRXListInfoResponse_Verdict value);
template<typename T>
inline const std::string& ClientCRXListInfoResponse_Verdict_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientCRXListInfoResponse_Verdict>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientCRXListInfoResponse_Verdict_Name.");
  return ClientCRXListInfoResponse_Verdict_Name(static_cast<ClientCRXListInfoResponse_Verdict>(enum_t_value));
}
bool ClientCRXListInfoResponse_Verdict_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientCRXListInfoResponse_Verdict* value);
// ===================================================================

class ClientCRXListInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.ClientCRXListInfoRequest) */ {
 public:
  inline ClientCRXListInfoRequest() : ClientCRXListInfoRequest(nullptr) {}
  ~ClientCRXListInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR ClientCRXListInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCRXListInfoRequest(const ClientCRXListInfoRequest& from);
  ClientCRXListInfoRequest(ClientCRXListInfoRequest&& from) noexcept
    : ClientCRXListInfoRequest() {
    *this = ::std::move(from);
  }

  inline ClientCRXListInfoRequest& operator=(const ClientCRXListInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCRXListInfoRequest& operator=(ClientCRXListInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientCRXListInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCRXListInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ClientCRXListInfoRequest*>(
               &_ClientCRXListInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientCRXListInfoRequest& a, ClientCRXListInfoRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientCRXListInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCRXListInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCRXListInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCRXListInfoRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientCRXListInfoRequest& from);
  void MergeFrom(const ClientCRXListInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCRXListInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.ClientCRXListInfoRequest";
  }
  protected:
  explicit ClientCRXListInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocaleFieldNumber = 2,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string locale = 2;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  friend struct ::TableStruct_crx_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ClientCRXListInfoResponse_UserMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.ClientCRXListInfoResponse.UserMessage) */ {
 public:
  inline ClientCRXListInfoResponse_UserMessage() : ClientCRXListInfoResponse_UserMessage(nullptr) {}
  ~ClientCRXListInfoResponse_UserMessage() override;
  explicit PROTOBUF_CONSTEXPR ClientCRXListInfoResponse_UserMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCRXListInfoResponse_UserMessage(const ClientCRXListInfoResponse_UserMessage& from);
  ClientCRXListInfoResponse_UserMessage(ClientCRXListInfoResponse_UserMessage&& from) noexcept
    : ClientCRXListInfoResponse_UserMessage() {
    *this = ::std::move(from);
  }

  inline ClientCRXListInfoResponse_UserMessage& operator=(const ClientCRXListInfoResponse_UserMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCRXListInfoResponse_UserMessage& operator=(ClientCRXListInfoResponse_UserMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientCRXListInfoResponse_UserMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCRXListInfoResponse_UserMessage* internal_default_instance() {
    return reinterpret_cast<const ClientCRXListInfoResponse_UserMessage*>(
               &_ClientCRXListInfoResponse_UserMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientCRXListInfoResponse_UserMessage& a, ClientCRXListInfoResponse_UserMessage& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientCRXListInfoResponse_UserMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCRXListInfoResponse_UserMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCRXListInfoResponse_UserMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCRXListInfoResponse_UserMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientCRXListInfoResponse_UserMessage& from);
  void MergeFrom(const ClientCRXListInfoResponse_UserMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCRXListInfoResponse_UserMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.ClientCRXListInfoResponse.UserMessage";
  }
  protected:
  explicit ClientCRXListInfoResponse_UserMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDetailMessageFieldNumber = 1,
  };
  // optional string detail_message = 1;
  bool has_detail_message() const;
  private:
  bool _internal_has_detail_message() const;
  public:
  void clear_detail_message();
  const std::string& detail_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail_message();
  PROTOBUF_NODISCARD std::string* release_detail_message();
  void set_allocated_detail_message(std::string* detail_message);
  private:
  const std::string& _internal_detail_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail_message(const std::string& value);
  std::string* _internal_mutable_detail_message();
  public:

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoResponse.UserMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_message_;
  friend struct ::TableStruct_crx_5finfo_2eproto;
};
// -------------------------------------------------------------------

class ClientCRXListInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:extensions.ClientCRXListInfoResponse) */ {
 public:
  inline ClientCRXListInfoResponse() : ClientCRXListInfoResponse(nullptr) {}
  ~ClientCRXListInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR ClientCRXListInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientCRXListInfoResponse(const ClientCRXListInfoResponse& from);
  ClientCRXListInfoResponse(ClientCRXListInfoResponse&& from) noexcept
    : ClientCRXListInfoResponse() {
    *this = ::std::move(from);
  }

  inline ClientCRXListInfoResponse& operator=(const ClientCRXListInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientCRXListInfoResponse& operator=(ClientCRXListInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientCRXListInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientCRXListInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ClientCRXListInfoResponse*>(
               &_ClientCRXListInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ClientCRXListInfoResponse& a, ClientCRXListInfoResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientCRXListInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientCRXListInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientCRXListInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientCRXListInfoResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientCRXListInfoResponse& from);
  void MergeFrom(const ClientCRXListInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientCRXListInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "extensions.ClientCRXListInfoResponse";
  }
  protected:
  explicit ClientCRXListInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientCRXListInfoResponse_UserMessage UserMessage;

  typedef ClientCRXListInfoResponse_Verdict Verdict;
  static constexpr Verdict NOT_IN_BLOCKLIST =
    ClientCRXListInfoResponse_Verdict_NOT_IN_BLOCKLIST;
  static constexpr Verdict MALWARE =
    ClientCRXListInfoResponse_Verdict_MALWARE;
  static constexpr Verdict SECURITY_VULNERABILITY =
    ClientCRXListInfoResponse_Verdict_SECURITY_VULNERABILITY;
  static constexpr Verdict CWS_POLICY_VIOLATION =
    ClientCRXListInfoResponse_Verdict_CWS_POLICY_VIOLATION;
  static constexpr Verdict POTENTIALLY_UNWANTED =
    ClientCRXListInfoResponse_Verdict_POTENTIALLY_UNWANTED;
  static inline bool Verdict_IsValid(int value) {
    return ClientCRXListInfoResponse_Verdict_IsValid(value);
  }
  static constexpr Verdict Verdict_MIN =
    ClientCRXListInfoResponse_Verdict_Verdict_MIN;
  static constexpr Verdict Verdict_MAX =
    ClientCRXListInfoResponse_Verdict_Verdict_MAX;
  static constexpr int Verdict_ARRAYSIZE =
    ClientCRXListInfoResponse_Verdict_Verdict_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Verdict_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Verdict>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Verdict_Name.");
    return ClientCRXListInfoResponse_Verdict_Name(enum_t_value);
  }
  static inline bool Verdict_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Verdict* value) {
    return ClientCRXListInfoResponse_Verdict_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUserMessageFieldNumber = 2,
    kVerdictFieldNumber = 1,
  };
  // optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
  bool has_user_message() const;
  private:
  bool _internal_has_user_message() const;
  public:
  void clear_user_message();
  const ::extensions::ClientCRXListInfoResponse_UserMessage& user_message() const;
  PROTOBUF_NODISCARD ::extensions::ClientCRXListInfoResponse_UserMessage* release_user_message();
  ::extensions::ClientCRXListInfoResponse_UserMessage* mutable_user_message();
  void set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message);
  private:
  const ::extensions::ClientCRXListInfoResponse_UserMessage& _internal_user_message() const;
  ::extensions::ClientCRXListInfoResponse_UserMessage* _internal_mutable_user_message();
  public:
  void unsafe_arena_set_allocated_user_message(
      ::extensions::ClientCRXListInfoResponse_UserMessage* user_message);
  ::extensions::ClientCRXListInfoResponse_UserMessage* unsafe_arena_release_user_message();

  // optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLOCKLIST];
  bool has_verdict() const;
  private:
  bool _internal_has_verdict() const;
  public:
  void clear_verdict();
  ::extensions::ClientCRXListInfoResponse_Verdict verdict() const;
  void set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value);
  private:
  ::extensions::ClientCRXListInfoResponse_Verdict _internal_verdict() const;
  void _internal_set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value);
  public:

  // @@protoc_insertion_point(class_scope:extensions.ClientCRXListInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::extensions::ClientCRXListInfoResponse_UserMessage* user_message_;
  int verdict_;
  friend struct ::TableStruct_crx_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientCRXListInfoRequest

// required string id = 1;
inline bool ClientCRXListInfoRequest::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientCRXListInfoRequest::has_id() const {
  return _internal_has_id();
}
inline void ClientCRXListInfoRequest::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientCRXListInfoRequest::id() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCRXListInfoRequest::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoRequest.id)
}
inline std::string* ClientCRXListInfoRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoRequest.id)
  return _s;
}
inline const std::string& ClientCRXListInfoRequest::_internal_id() const {
  return id_.Get();
}
inline void ClientCRXListInfoRequest::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientCRXListInfoRequest::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientCRXListInfoRequest::release_id() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoRequest.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCRXListInfoRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoRequest.id)
}

// optional string locale = 2;
inline bool ClientCRXListInfoRequest::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientCRXListInfoRequest::has_locale() const {
  return _internal_has_locale();
}
inline void ClientCRXListInfoRequest::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientCRXListInfoRequest::locale() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoRequest.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCRXListInfoRequest::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoRequest.locale)
}
inline std::string* ClientCRXListInfoRequest::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoRequest.locale)
  return _s;
}
inline const std::string& ClientCRXListInfoRequest::_internal_locale() const {
  return locale_.Get();
}
inline void ClientCRXListInfoRequest::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientCRXListInfoRequest::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000002u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientCRXListInfoRequest::release_locale() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoRequest.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCRXListInfoRequest::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoRequest.locale)
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse_UserMessage

// optional string detail_message = 1;
inline bool ClientCRXListInfoResponse_UserMessage::_internal_has_detail_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientCRXListInfoResponse_UserMessage::has_detail_message() const {
  return _internal_has_detail_message();
}
inline void ClientCRXListInfoResponse_UserMessage::clear_detail_message() {
  detail_message_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientCRXListInfoResponse_UserMessage::detail_message() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  return _internal_detail_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientCRXListInfoResponse_UserMessage::set_detail_message(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 detail_message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}
inline std::string* ClientCRXListInfoResponse_UserMessage::mutable_detail_message() {
  std::string* _s = _internal_mutable_detail_message();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  return _s;
}
inline const std::string& ClientCRXListInfoResponse_UserMessage::_internal_detail_message() const {
  return detail_message_.Get();
}
inline void ClientCRXListInfoResponse_UserMessage::_internal_set_detail_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  detail_message_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientCRXListInfoResponse_UserMessage::_internal_mutable_detail_message() {
  _has_bits_[0] |= 0x00000001u;
  return detail_message_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientCRXListInfoResponse_UserMessage::release_detail_message() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
  if (!_internal_has_detail_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = detail_message_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detail_message_.IsDefault()) {
    detail_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientCRXListInfoResponse_UserMessage::set_allocated_detail_message(std::string* detail_message) {
  if (detail_message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  detail_message_.SetAllocated(detail_message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detail_message_.IsDefault()) {
    detail_message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoResponse.UserMessage.detail_message)
}

// -------------------------------------------------------------------

// ClientCRXListInfoResponse

// optional .extensions.ClientCRXListInfoResponse.Verdict verdict = 1 [default = NOT_IN_BLOCKLIST];
inline bool ClientCRXListInfoResponse::_internal_has_verdict() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientCRXListInfoResponse::has_verdict() const {
  return _internal_has_verdict();
}
inline void ClientCRXListInfoResponse::clear_verdict() {
  verdict_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::extensions::ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::_internal_verdict() const {
  return static_cast< ::extensions::ClientCRXListInfoResponse_Verdict >(verdict_);
}
inline ::extensions::ClientCRXListInfoResponse_Verdict ClientCRXListInfoResponse::verdict() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.verdict)
  return _internal_verdict();
}
inline void ClientCRXListInfoResponse::_internal_set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value) {
  assert(::extensions::ClientCRXListInfoResponse_Verdict_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  verdict_ = value;
}
inline void ClientCRXListInfoResponse::set_verdict(::extensions::ClientCRXListInfoResponse_Verdict value) {
  _internal_set_verdict(value);
  // @@protoc_insertion_point(field_set:extensions.ClientCRXListInfoResponse.verdict)
}

// optional .extensions.ClientCRXListInfoResponse.UserMessage user_message = 2;
inline bool ClientCRXListInfoResponse::_internal_has_user_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || user_message_ != nullptr);
  return value;
}
inline bool ClientCRXListInfoResponse::has_user_message() const {
  return _internal_has_user_message();
}
inline void ClientCRXListInfoResponse::clear_user_message() {
  if (user_message_ != nullptr) user_message_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::extensions::ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse::_internal_user_message() const {
  const ::extensions::ClientCRXListInfoResponse_UserMessage* p = user_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::extensions::ClientCRXListInfoResponse_UserMessage&>(
      ::extensions::_ClientCRXListInfoResponse_UserMessage_default_instance_);
}
inline const ::extensions::ClientCRXListInfoResponse_UserMessage& ClientCRXListInfoResponse::user_message() const {
  // @@protoc_insertion_point(field_get:extensions.ClientCRXListInfoResponse.user_message)
  return _internal_user_message();
}
inline void ClientCRXListInfoResponse::unsafe_arena_set_allocated_user_message(
    ::extensions::ClientCRXListInfoResponse_UserMessage* user_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_message_);
  }
  user_message_ = user_message;
  if (user_message) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:extensions.ClientCRXListInfoResponse.user_message)
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::release_user_message() {
  _has_bits_[0] &= ~0x00000001u;
  ::extensions::ClientCRXListInfoResponse_UserMessage* temp = user_message_;
  user_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::unsafe_arena_release_user_message() {
  // @@protoc_insertion_point(field_release:extensions.ClientCRXListInfoResponse.user_message)
  _has_bits_[0] &= ~0x00000001u;
  ::extensions::ClientCRXListInfoResponse_UserMessage* temp = user_message_;
  user_message_ = nullptr;
  return temp;
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::_internal_mutable_user_message() {
  _has_bits_[0] |= 0x00000001u;
  if (user_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::extensions::ClientCRXListInfoResponse_UserMessage>(GetArenaForAllocation());
    user_message_ = p;
  }
  return user_message_;
}
inline ::extensions::ClientCRXListInfoResponse_UserMessage* ClientCRXListInfoResponse::mutable_user_message() {
  ::extensions::ClientCRXListInfoResponse_UserMessage* _msg = _internal_mutable_user_message();
  // @@protoc_insertion_point(field_mutable:extensions.ClientCRXListInfoResponse.user_message)
  return _msg;
}
inline void ClientCRXListInfoResponse::set_allocated_user_message(::extensions::ClientCRXListInfoResponse_UserMessage* user_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete user_message_;
  }
  if (user_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_message);
    if (message_arena != submessage_arena) {
      user_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_message, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_message_ = user_message;
  // @@protoc_insertion_point(field_set_allocated:extensions.ClientCRXListInfoResponse.user_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace extensions

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::extensions::ClientCRXListInfoResponse_Verdict> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_crx_5finfo_2eproto
