// chrome/common/net_benchmarking.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_NET_BENCHMARKING_MOJOM_PARAMS_DATA_H_
#define CHROME_COMMON_NET_BENCHMARKING_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace chrome {
namespace mojom {
namespace internal {

class ValidationContext;
class  NetBenchmarking_CloseCurrentConnections_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_CloseCurrentConnections_Params_Data>;

  NetBenchmarking_CloseCurrentConnections_Params_Data();
  ~NetBenchmarking_CloseCurrentConnections_Params_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_CloseCurrentConnections_Params_Data) == 8,
              "Bad sizeof(NetBenchmarking_CloseCurrentConnections_Params_Data)");
class  NetBenchmarking_CloseCurrentConnections_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_CloseCurrentConnections_ResponseParams_Data>;

  NetBenchmarking_CloseCurrentConnections_ResponseParams_Data();
  ~NetBenchmarking_CloseCurrentConnections_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_CloseCurrentConnections_ResponseParams_Data) == 8,
              "Bad sizeof(NetBenchmarking_CloseCurrentConnections_ResponseParams_Data)");
class  NetBenchmarking_ClearCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_ClearCache_Params_Data>;

  NetBenchmarking_ClearCache_Params_Data();
  ~NetBenchmarking_ClearCache_Params_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_ClearCache_Params_Data) == 8,
              "Bad sizeof(NetBenchmarking_ClearCache_Params_Data)");
class  NetBenchmarking_ClearCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_ClearCache_ResponseParams_Data>;

  NetBenchmarking_ClearCache_ResponseParams_Data();
  ~NetBenchmarking_ClearCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_ClearCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetBenchmarking_ClearCache_ResponseParams_Data)");
class  NetBenchmarking_ClearHostResolverCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_ClearHostResolverCache_Params_Data>;

  NetBenchmarking_ClearHostResolverCache_Params_Data();
  ~NetBenchmarking_ClearHostResolverCache_Params_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_ClearHostResolverCache_Params_Data) == 8,
              "Bad sizeof(NetBenchmarking_ClearHostResolverCache_Params_Data)");
class  NetBenchmarking_ClearHostResolverCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_ClearHostResolverCache_ResponseParams_Data>;

  NetBenchmarking_ClearHostResolverCache_ResponseParams_Data();
  ~NetBenchmarking_ClearHostResolverCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_ClearHostResolverCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetBenchmarking_ClearHostResolverCache_ResponseParams_Data)");
class  NetBenchmarking_ClearPredictorCache_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_ClearPredictorCache_Params_Data>;

  NetBenchmarking_ClearPredictorCache_Params_Data();
  ~NetBenchmarking_ClearPredictorCache_Params_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_ClearPredictorCache_Params_Data) == 8,
              "Bad sizeof(NetBenchmarking_ClearPredictorCache_Params_Data)");
class  NetBenchmarking_ClearPredictorCache_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NetBenchmarking_ClearPredictorCache_ResponseParams_Data>;

  NetBenchmarking_ClearPredictorCache_ResponseParams_Data();
  ~NetBenchmarking_ClearPredictorCache_ResponseParams_Data() = delete;
};
static_assert(sizeof(NetBenchmarking_ClearPredictorCache_ResponseParams_Data) == 8,
              "Bad sizeof(NetBenchmarking_ClearPredictorCache_ResponseParams_Data)");

}  // namespace internal


class NetBenchmarking_CloseCurrentConnections_ParamsDataView {
 public:
  NetBenchmarking_CloseCurrentConnections_ParamsDataView() = default;

  NetBenchmarking_CloseCurrentConnections_ParamsDataView(
      internal::NetBenchmarking_CloseCurrentConnections_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_CloseCurrentConnections_Params_Data* data_ = nullptr;
};



class NetBenchmarking_CloseCurrentConnections_ResponseParamsDataView {
 public:
  NetBenchmarking_CloseCurrentConnections_ResponseParamsDataView() = default;

  NetBenchmarking_CloseCurrentConnections_ResponseParamsDataView(
      internal::NetBenchmarking_CloseCurrentConnections_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_CloseCurrentConnections_ResponseParams_Data* data_ = nullptr;
};



class NetBenchmarking_ClearCache_ParamsDataView {
 public:
  NetBenchmarking_ClearCache_ParamsDataView() = default;

  NetBenchmarking_ClearCache_ParamsDataView(
      internal::NetBenchmarking_ClearCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_ClearCache_Params_Data* data_ = nullptr;
};



class NetBenchmarking_ClearCache_ResponseParamsDataView {
 public:
  NetBenchmarking_ClearCache_ResponseParamsDataView() = default;

  NetBenchmarking_ClearCache_ResponseParamsDataView(
      internal::NetBenchmarking_ClearCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_ClearCache_ResponseParams_Data* data_ = nullptr;
};



class NetBenchmarking_ClearHostResolverCache_ParamsDataView {
 public:
  NetBenchmarking_ClearHostResolverCache_ParamsDataView() = default;

  NetBenchmarking_ClearHostResolverCache_ParamsDataView(
      internal::NetBenchmarking_ClearHostResolverCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_ClearHostResolverCache_Params_Data* data_ = nullptr;
};



class NetBenchmarking_ClearHostResolverCache_ResponseParamsDataView {
 public:
  NetBenchmarking_ClearHostResolverCache_ResponseParamsDataView() = default;

  NetBenchmarking_ClearHostResolverCache_ResponseParamsDataView(
      internal::NetBenchmarking_ClearHostResolverCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_ClearHostResolverCache_ResponseParams_Data* data_ = nullptr;
};



class NetBenchmarking_ClearPredictorCache_ParamsDataView {
 public:
  NetBenchmarking_ClearPredictorCache_ParamsDataView() = default;

  NetBenchmarking_ClearPredictorCache_ParamsDataView(
      internal::NetBenchmarking_ClearPredictorCache_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_ClearPredictorCache_Params_Data* data_ = nullptr;
};



class NetBenchmarking_ClearPredictorCache_ResponseParamsDataView {
 public:
  NetBenchmarking_ClearPredictorCache_ResponseParamsDataView() = default;

  NetBenchmarking_ClearPredictorCache_ResponseParamsDataView(
      internal::NetBenchmarking_ClearPredictorCache_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NetBenchmarking_ClearPredictorCache_ResponseParams_Data* data_ = nullptr;
};

















}  // namespace mojom
}  // namespace chrome

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CHROME_COMMON_NET_BENCHMARKING_MOJOM_PARAMS_DATA_H_