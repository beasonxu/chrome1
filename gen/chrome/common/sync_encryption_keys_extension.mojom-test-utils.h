// chrome/common/sync_encryption_keys_extension.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CHROME_COMMON_SYNC_ENCRYPTION_KEYS_EXTENSION_MOJOM_TEST_UTILS_H_
#define CHROME_COMMON_SYNC_ENCRYPTION_KEYS_EXTENSION_MOJOM_TEST_UTILS_H_

#include "chrome/common/sync_encryption_keys_extension.mojom.h"


namespace chrome {
namespace mojom {


class  SyncEncryptionKeysExtensionInterceptorForTesting : public SyncEncryptionKeysExtension {
  virtual SyncEncryptionKeysExtension* GetForwardingInterface() = 0;
  void SetEncryptionKeys(const std::string& gaia_id, const std::vector<std::vector<uint8_t>>& encryption_keys, int32_t last_key_version, SetEncryptionKeysCallback callback) override;
  void AddTrustedRecoveryMethod(const std::string& gaia_id, const std::vector<uint8_t>& public_key, int32_t method_type_hint, AddTrustedRecoveryMethodCallback callback) override;
};
class  SyncEncryptionKeysExtensionAsyncWaiter {
 public:
  explicit SyncEncryptionKeysExtensionAsyncWaiter(SyncEncryptionKeysExtension* proxy);

  SyncEncryptionKeysExtensionAsyncWaiter(const SyncEncryptionKeysExtensionAsyncWaiter&) = delete;
  SyncEncryptionKeysExtensionAsyncWaiter& operator=(const SyncEncryptionKeysExtensionAsyncWaiter&) = delete;

  ~SyncEncryptionKeysExtensionAsyncWaiter();
  void SetEncryptionKeys(
      const std::string& gaia_id, const std::vector<std::vector<uint8_t>>& encryption_keys, int32_t last_key_version);
  void AddTrustedRecoveryMethod(
      const std::string& gaia_id, const std::vector<uint8_t>& public_key, int32_t method_type_hint);

 private:
  SyncEncryptionKeysExtension* const proxy_;
};




}  // namespace mojom
}  // namespace chrome

#endif  // CHROME_COMMON_SYNC_ENCRYPTION_KEYS_EXTENSION_MOJOM_TEST_UTILS_H_