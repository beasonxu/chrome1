// content/public/common/alternative_error_page_override_info.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "content/public/common/alternative_error_page_override_info.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "content/public/common/alternative_error_page_override_info.mojom-params-data.h"
#include "content/public/common/alternative_error_page_override_info.mojom-shared-message-ids.h"

#include "content/public/common/alternative_error_page_override_info.mojom-import-headers.h"
#include "content/public/common/alternative_error_page_override_info.mojom-test-utils.h"


#ifndef CONTENT_PUBLIC_COMMON_ALTERNATIVE_ERROR_PAGE_OVERRIDE_INFO_MOJOM_JUMBO_H_
#define CONTENT_PUBLIC_COMMON_ALTERNATIVE_ERROR_PAGE_OVERRIDE_INFO_MOJOM_JUMBO_H_
#endif



namespace content {
namespace mojom {
AlternativeErrorPageOverrideInfo::AlternativeErrorPageOverrideInfo()
    : resource_id(),
      alternative_error_page_params() {}

AlternativeErrorPageOverrideInfo::AlternativeErrorPageOverrideInfo(
    uint32_t resource_id_in,
    ::base::Value::Dict alternative_error_page_params_in)
    : resource_id(std::move(resource_id_in)),
      alternative_error_page_params(std::move(alternative_error_page_params_in)) {}

AlternativeErrorPageOverrideInfo::~AlternativeErrorPageOverrideInfo() = default;

void AlternativeErrorPageOverrideInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "resource_id"), this->resource_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "alternative_error_page_params"), this->alternative_error_page_params,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::Value::Dict>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool AlternativeErrorPageOverrideInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace content


namespace mojo {


// static
bool StructTraits<::content::mojom::AlternativeErrorPageOverrideInfo::DataView, ::content::mojom::AlternativeErrorPageOverrideInfoPtr>::Read(
    ::content::mojom::AlternativeErrorPageOverrideInfo::DataView input,
    ::content::mojom::AlternativeErrorPageOverrideInfoPtr* output) {
  bool success = true;
  ::content::mojom::AlternativeErrorPageOverrideInfoPtr result(::content::mojom::AlternativeErrorPageOverrideInfo::New());
  
      if (success)
        result->resource_id = input.resource_id();
      if (success && !input.ReadAlternativeErrorPageParams(&result->alternative_error_page_params))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace content {
namespace mojom {




}  // namespace mojom
}  // namespace content


#if defined(__clang__)
#pragma clang diagnostic pop
#endif