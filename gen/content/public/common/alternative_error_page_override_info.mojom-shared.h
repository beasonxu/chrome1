// content/public/common/alternative_error_page_override_info.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_PUBLIC_COMMON_ALTERNATIVE_ERROR_PAGE_OVERRIDE_INFO_MOJOM_SHARED_H_
#define CONTENT_PUBLIC_COMMON_ALTERNATIVE_ERROR_PAGE_OVERRIDE_INFO_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/public/common/alternative_error_page_override_info.mojom-shared-internal.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"



#include "base/component_export.h"




namespace content {
namespace mojom {
class AlternativeErrorPageOverrideInfoDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::AlternativeErrorPageOverrideInfoDataView> {
  using Data = ::content::mojom::internal::AlternativeErrorPageOverrideInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {


class AlternativeErrorPageOverrideInfoDataView {
 public:
  AlternativeErrorPageOverrideInfoDataView() = default;

  AlternativeErrorPageOverrideInfoDataView(
      internal::AlternativeErrorPageOverrideInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t resource_id() const {
    return data_->resource_id;
  }
  inline void GetAlternativeErrorPageParamsDataView(
      ::mojo_base::mojom::DictionaryValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAlternativeErrorPageParams(UserType* output) {
    
    auto* pointer = data_->alternative_error_page_params.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::DictionaryValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::AlternativeErrorPageOverrideInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::AlternativeErrorPageOverrideInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::AlternativeErrorPageOverrideInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::AlternativeErrorPageOverrideInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->resource_id = Traits::resource_id(input);
    decltype(Traits::alternative_error_page_params(input)) in_alternative_error_page_params = Traits::alternative_error_page_params(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->alternative_error_page_params)::BaseType> alternative_error_page_params_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::DictionaryValueDataView>(
        in_alternative_error_page_params, alternative_error_page_params_fragment);
    fragment->alternative_error_page_params.Set(
        alternative_error_page_params_fragment.is_null() ? nullptr : alternative_error_page_params_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->alternative_error_page_params.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null alternative_error_page_params in AlternativeErrorPageOverrideInfo struct");
  }

  static bool Deserialize(::content::mojom::internal::AlternativeErrorPageOverrideInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::AlternativeErrorPageOverrideInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {

inline void AlternativeErrorPageOverrideInfoDataView::GetAlternativeErrorPageParamsDataView(
    ::mojo_base::mojom::DictionaryValueDataView* output) {
  auto pointer = data_->alternative_error_page_params.Get();
  *output = ::mojo_base::mojom::DictionaryValueDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace content

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CONTENT_PUBLIC_COMMON_ALTERNATIVE_ERROR_PAGE_OVERRIDE_INFO_MOJOM_SHARED_H_