// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/BrowserAccessibilityState

#ifndef org_chromium_content_browser_accessibility_BrowserAccessibilityState_JNI
#define org_chromium_content_browser_accessibility_BrowserAccessibilityState_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_accessibility_BrowserAccessibilityState[];
const char kClassPath_org_chromium_content_browser_accessibility_BrowserAccessibilityState[] =
    "org/chromium/content/browser/accessibility/BrowserAccessibilityState";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(nullptr);
#ifndef org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz_defined
#define org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz_defined
inline jclass org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(JNIEnv*
    env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_accessibility_BrowserAccessibilityState,
      &g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace content {

static void JNI_BrowserAccessibilityState_OnAnimatorDurationScaleChanged(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MAa7bxOG(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_BrowserAccessibilityState_OnAnimatorDurationScaleChanged(env);
}


static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceEventTypeMask(nullptr);
static jint Java_BrowserAccessibilityState_getAccessibilityServiceEventTypeMask(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAccessibilityServiceEventTypeMask",
          "()I",
&g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceEventTypeMask);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceFeedbackTypeMask(nullptr);
static jint Java_BrowserAccessibilityState_getAccessibilityServiceFeedbackTypeMask(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAccessibilityServiceFeedbackTypeMask",
          "()I",
&g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceFeedbackTypeMask);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceFlagsMask(nullptr);
static jint Java_BrowserAccessibilityState_getAccessibilityServiceFlagsMask(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAccessibilityServiceFlagsMask",
          "()I",
&g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceFlagsMask);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceCapabilitiesMask(nullptr);
static jint Java_BrowserAccessibilityState_getAccessibilityServiceCapabilitiesMask(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAccessibilityServiceCapabilitiesMask",
          "()I",
&g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceCapabilitiesMask);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceIds(nullptr);
static base::android::ScopedJavaLocalRef<jobjectArray>
    Java_BrowserAccessibilityState_getAccessibilityServiceIds(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getAccessibilityServiceIds",
          "()[Ljava/lang/String;",
&g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_getAccessibilityServiceIds);

  jobjectArray ret =
      static_cast<jobjectArray>(env->CallStaticObjectMethod(clazz,
          call_context.base.method_id));
  return base::android::ScopedJavaLocalRef<jobjectArray>(env, ret);
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_registerObservers(nullptr);
static void Java_BrowserAccessibilityState_registerObservers(JNIEnv* env) {
  jclass clazz = org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_content_browser_accessibility_BrowserAccessibilityState_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "registerObservers",
          "()V",
&g_org_chromium_content_browser_accessibility_BrowserAccessibilityState_registerObservers);

     env->CallStaticVoidMethod(clazz,
          call_context.base.method_id);
}

}  // namespace content

#endif  // org_chromium_content_browser_accessibility_BrowserAccessibilityState_JNI
