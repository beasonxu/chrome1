// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/content/browser/accessibility/ViewStructureBuilder

#ifndef org_chromium_content_browser_accessibility_ViewStructureBuilder_JNI
#define org_chromium_content_browser_accessibility_ViewStructureBuilder_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_content_browser_accessibility_ViewStructureBuilder[];
const char kClassPath_org_chromium_content_browser_accessibility_ViewStructureBuilder[] =
    "org/chromium/content/browser/accessibility/ViewStructureBuilder";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(nullptr);
#ifndef org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz_defined
#define org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz_defined
inline jclass org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env,
      kClassPath_org_chromium_content_browser_accessibility_ViewStructureBuilder,
      &g_org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_populateViewStructureNode(nullptr);
static void Java_ViewStructureBuilder_populateViewStructureNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& text,
    jboolean hasSelection,
    JniIntWrapper selStart,
    JniIntWrapper selEnd,
    JniIntWrapper color,
    JniIntWrapper bgcolor,
    jfloat size,
    jboolean bold,
    jboolean italic,
    jboolean underline,
    jboolean lineThrough,
    const base::android::JavaRef<jstring>& className,
    JniIntWrapper childCount) {
  jclass clazz = org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "populateViewStructureNode",
          "(Landroid/view/ViewStructure;Ljava/lang/String;ZIIIIFZZZZLjava/lang/String;I)V",
&g_org_chromium_content_browser_accessibility_ViewStructureBuilder_populateViewStructureNode);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), text.obj(), hasSelection, as_jint(selStart),
              as_jint(selEnd), as_jint(color), as_jint(bgcolor), size, bold, italic, underline,
              lineThrough, className.obj(), as_jint(childCount));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_setViewStructureNodeBounds(nullptr);
static void Java_ViewStructureBuilder_setViewStructureNodeBounds(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    jboolean isRootNode,
    JniIntWrapper parentRelativeLeft,
    JniIntWrapper parentRelativeTop,
    JniIntWrapper width,
    JniIntWrapper height) {
  jclass clazz = org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setViewStructureNodeBounds",
          "(Landroid/view/ViewStructure;ZIIII)V",
&g_org_chromium_content_browser_accessibility_ViewStructureBuilder_setViewStructureNodeBounds);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), isRootNode, as_jint(parentRelativeLeft),
              as_jint(parentRelativeTop), as_jint(width), as_jint(height));
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_setViewStructureNodeHtmlInfo(nullptr);
static void Java_ViewStructureBuilder_setViewStructureNodeHtmlInfo(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jstring>& htmlTag,
    const base::android::JavaRef<jstring>& cssDisplay,
    const base::android::JavaRef<jobjectArray>& htmlAttributes) {
  jclass clazz = org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setViewStructureNodeHtmlInfo",
          "(Landroid/view/ViewStructure;Ljava/lang/String;Ljava/lang/String;[[Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_ViewStructureBuilder_setViewStructureNodeHtmlInfo);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), htmlTag.obj(), cssDisplay.obj(),
              htmlAttributes.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_setViewStructureNodeHtmlMetadata(nullptr);
static void Java_ViewStructureBuilder_setViewStructureNodeHtmlMetadata(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    const base::android::JavaRef<jobjectArray>& metadataStrings) {
  jclass clazz = org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "setViewStructureNodeHtmlMetadata",
          "(Landroid/view/ViewStructure;[Ljava/lang/String;)V",
&g_org_chromium_content_browser_accessibility_ViewStructureBuilder_setViewStructureNodeHtmlMetadata);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj(), metadataStrings.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_commitViewStructureNode(nullptr);
static void Java_ViewStructureBuilder_commitViewStructureNode(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node) {
  jclass clazz = org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "commitViewStructureNode",
          "(Landroid/view/ViewStructure;)V",
&g_org_chromium_content_browser_accessibility_ViewStructureBuilder_commitViewStructureNode);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, node.obj());
}

static std::atomic<jmethodID>
    g_org_chromium_content_browser_accessibility_ViewStructureBuilder_addViewStructureNodeChild(nullptr);
static base::android::ScopedJavaLocalRef<jobject>
    Java_ViewStructureBuilder_addViewStructureNodeChild(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jobject>& node,
    JniIntWrapper index) {
  jclass clazz = org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_content_browser_accessibility_ViewStructureBuilder_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "addViewStructureNodeChild",
          "(Landroid/view/ViewStructure;I)Landroid/view/ViewStructure;",
&g_org_chromium_content_browser_accessibility_ViewStructureBuilder_addViewStructureNodeChild);

  jobject ret =
      env->CallObjectMethod(obj.obj(),
          call_context.base.method_id, node.obj(), as_jint(index));
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

#endif  // org_chromium_content_browser_accessibility_ViewStructureBuilder_JNI
