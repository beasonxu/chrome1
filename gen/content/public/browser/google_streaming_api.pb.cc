// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google_streaming_api.proto

#include "google_streaming_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR SpeechRecognitionEvent::SpeechRecognitionEvent(
    ::_pbi::ConstantInitialized)
  : result_()
  , status_(0)

  , endpoint_(0)
{}
struct SpeechRecognitionEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeechRecognitionEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeechRecognitionEventDefaultTypeInternal() {}
  union {
    SpeechRecognitionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeechRecognitionEventDefaultTypeInternal _SpeechRecognitionEvent_default_instance_;
PROTOBUF_CONSTEXPR SpeechRecognitionResult::SpeechRecognitionResult(
    ::_pbi::ConstantInitialized)
  : alternative_()
  , final_(false)
  , stability_(0){}
struct SpeechRecognitionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeechRecognitionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeechRecognitionResultDefaultTypeInternal() {}
  union {
    SpeechRecognitionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeechRecognitionResultDefaultTypeInternal _SpeechRecognitionResult_default_instance_;
PROTOBUF_CONSTEXPR SpeechRecognitionAlternative::SpeechRecognitionAlternative(
    ::_pbi::ConstantInitialized)
  : transcript_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , confidence_(0){}
struct SpeechRecognitionAlternativeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeechRecognitionAlternativeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeechRecognitionAlternativeDefaultTypeInternal() {}
  union {
    SpeechRecognitionAlternative _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeechRecognitionAlternativeDefaultTypeInternal _SpeechRecognitionAlternative_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {
bool SpeechRecognitionEvent_StatusCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SpeechRecognitionEvent_StatusCode_strings[9] = {};

static const char SpeechRecognitionEvent_StatusCode_names[] =
  "STATUS_ABORTED"
  "STATUS_AUDIO_CAPTURE"
  "STATUS_BAD_GRAMMAR"
  "STATUS_LANGUAGE_NOT_SUPPORTED"
  "STATUS_NETWORK"
  "STATUS_NOT_ALLOWED"
  "STATUS_NO_SPEECH"
  "STATUS_SERVICE_NOT_ALLOWED"
  "STATUS_SUCCESS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SpeechRecognitionEvent_StatusCode_entries[] = {
  { {SpeechRecognitionEvent_StatusCode_names + 0, 14}, 2 },
  { {SpeechRecognitionEvent_StatusCode_names + 14, 20}, 3 },
  { {SpeechRecognitionEvent_StatusCode_names + 34, 18}, 7 },
  { {SpeechRecognitionEvent_StatusCode_names + 52, 29}, 8 },
  { {SpeechRecognitionEvent_StatusCode_names + 81, 14}, 4 },
  { {SpeechRecognitionEvent_StatusCode_names + 95, 18}, 5 },
  { {SpeechRecognitionEvent_StatusCode_names + 113, 16}, 1 },
  { {SpeechRecognitionEvent_StatusCode_names + 129, 26}, 6 },
  { {SpeechRecognitionEvent_StatusCode_names + 155, 14}, 0 },
};

static const int SpeechRecognitionEvent_StatusCode_entries_by_number[] = {
  8, // 0 -> STATUS_SUCCESS
  6, // 1 -> STATUS_NO_SPEECH
  0, // 2 -> STATUS_ABORTED
  1, // 3 -> STATUS_AUDIO_CAPTURE
  4, // 4 -> STATUS_NETWORK
  5, // 5 -> STATUS_NOT_ALLOWED
  7, // 6 -> STATUS_SERVICE_NOT_ALLOWED
  2, // 7 -> STATUS_BAD_GRAMMAR
  3, // 8 -> STATUS_LANGUAGE_NOT_SUPPORTED
};

const std::string& SpeechRecognitionEvent_StatusCode_Name(
    SpeechRecognitionEvent_StatusCode value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SpeechRecognitionEvent_StatusCode_entries,
          SpeechRecognitionEvent_StatusCode_entries_by_number,
          9, SpeechRecognitionEvent_StatusCode_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SpeechRecognitionEvent_StatusCode_entries,
      SpeechRecognitionEvent_StatusCode_entries_by_number,
      9, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SpeechRecognitionEvent_StatusCode_strings[idx].get();
}
bool SpeechRecognitionEvent_StatusCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpeechRecognitionEvent_StatusCode* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SpeechRecognitionEvent_StatusCode_entries, 9, name, &int_value);
  if (success) {
    *value = static_cast<SpeechRecognitionEvent_StatusCode>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_SUCCESS;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_NO_SPEECH;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_ABORTED;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_AUDIO_CAPTURE;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_NETWORK;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_NOT_ALLOWED;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_SERVICE_NOT_ALLOWED;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_BAD_GRAMMAR;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::STATUS_LANGUAGE_NOT_SUPPORTED;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::StatusCode_MIN;
constexpr SpeechRecognitionEvent_StatusCode SpeechRecognitionEvent::StatusCode_MAX;
constexpr int SpeechRecognitionEvent::StatusCode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SpeechRecognitionEvent_EndpointerEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SpeechRecognitionEvent_EndpointerEventType_strings[4] = {};

static const char SpeechRecognitionEvent_EndpointerEventType_names[] =
  "END_OF_AUDIO"
  "END_OF_SPEECH"
  "END_OF_UTTERANCE"
  "START_OF_SPEECH";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SpeechRecognitionEvent_EndpointerEventType_entries[] = {
  { {SpeechRecognitionEvent_EndpointerEventType_names + 0, 12}, 2 },
  { {SpeechRecognitionEvent_EndpointerEventType_names + 12, 13}, 1 },
  { {SpeechRecognitionEvent_EndpointerEventType_names + 25, 16}, 3 },
  { {SpeechRecognitionEvent_EndpointerEventType_names + 41, 15}, 0 },
};

static const int SpeechRecognitionEvent_EndpointerEventType_entries_by_number[] = {
  3, // 0 -> START_OF_SPEECH
  1, // 1 -> END_OF_SPEECH
  0, // 2 -> END_OF_AUDIO
  2, // 3 -> END_OF_UTTERANCE
};

const std::string& SpeechRecognitionEvent_EndpointerEventType_Name(
    SpeechRecognitionEvent_EndpointerEventType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SpeechRecognitionEvent_EndpointerEventType_entries,
          SpeechRecognitionEvent_EndpointerEventType_entries_by_number,
          4, SpeechRecognitionEvent_EndpointerEventType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SpeechRecognitionEvent_EndpointerEventType_entries,
      SpeechRecognitionEvent_EndpointerEventType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SpeechRecognitionEvent_EndpointerEventType_strings[idx].get();
}
bool SpeechRecognitionEvent_EndpointerEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SpeechRecognitionEvent_EndpointerEventType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SpeechRecognitionEvent_EndpointerEventType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SpeechRecognitionEvent_EndpointerEventType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::START_OF_SPEECH;
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::END_OF_SPEECH;
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::END_OF_AUDIO;
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::END_OF_UTTERANCE;
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::EndpointerEventType_MIN;
constexpr SpeechRecognitionEvent_EndpointerEventType SpeechRecognitionEvent::EndpointerEventType_MAX;
constexpr int SpeechRecognitionEvent::EndpointerEventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SpeechRecognitionEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeechRecognitionEvent>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_endpoint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpeechRecognitionEvent::SpeechRecognitionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  result_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.SpeechRecognitionEvent)
}
SpeechRecognitionEvent::SpeechRecognitionEvent(const SpeechRecognitionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      result_(from.result_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&endpoint_) -
    reinterpret_cast<char*>(&status_)) + sizeof(endpoint_));
  // @@protoc_insertion_point(copy_constructor:content.proto.SpeechRecognitionEvent)
}

inline void SpeechRecognitionEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&endpoint_) -
    reinterpret_cast<char*>(&status_)) + sizeof(endpoint_));
}

SpeechRecognitionEvent::~SpeechRecognitionEvent() {
  // @@protoc_insertion_point(destructor:content.proto.SpeechRecognitionEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeechRecognitionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeechRecognitionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.SpeechRecognitionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endpoint_) -
        reinterpret_cast<char*>(&status_)) + sizeof(endpoint_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpeechRecognitionEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .content.proto.SpeechRecognitionEvent.StatusCode status = 1 [default = STATUS_SUCCESS];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::SpeechRecognitionEvent_StatusCode_IsValid(val))) {
            _internal_set_status(static_cast<::content::proto::SpeechRecognitionEvent_StatusCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.SpeechRecognitionResult result = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_result(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .content.proto.SpeechRecognitionEvent.EndpointerEventType endpoint = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::SpeechRecognitionEvent_EndpointerEventType_IsValid(val))) {
            _internal_set_endpoint(static_cast<::content::proto::SpeechRecognitionEvent_EndpointerEventType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.SpeechRecognitionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .content.proto.SpeechRecognitionEvent.StatusCode status = 1 [default = STATUS_SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // repeated .content.proto.SpeechRecognitionResult result = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_result_size()); i < n; i++) {
    const auto& repfield = this->_internal_result(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .content.proto.SpeechRecognitionEvent.EndpointerEventType endpoint = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_endpoint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.SpeechRecognitionEvent)
  return target;
}

size_t SpeechRecognitionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.SpeechRecognitionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.SpeechRecognitionResult result = 2;
  total_size += 1UL * this->_internal_result_size();
  for (const auto& msg : this->result_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .content.proto.SpeechRecognitionEvent.StatusCode status = 1 [default = STATUS_SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
    }

    // optional .content.proto.SpeechRecognitionEvent.EndpointerEventType endpoint = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_endpoint());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionEvent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpeechRecognitionEvent*>(
      &from));
}

void SpeechRecognitionEvent::MergeFrom(const SpeechRecognitionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.SpeechRecognitionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      endpoint_ = from.endpoint_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpeechRecognitionEvent::CopyFrom(const SpeechRecognitionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.SpeechRecognitionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionEvent::IsInitialized() const {
  return true;
}

void SpeechRecognitionEvent::InternalSwap(SpeechRecognitionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  result_.InternalSwap(&other->result_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeechRecognitionEvent, endpoint_)
      + sizeof(SpeechRecognitionEvent::endpoint_)
      - PROTOBUF_FIELD_OFFSET(SpeechRecognitionEvent, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

std::string SpeechRecognitionEvent::GetTypeName() const {
  return "content.proto.SpeechRecognitionEvent";
}


// ===================================================================

class SpeechRecognitionResult::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeechRecognitionResult>()._has_bits_);
  static void set_has_final(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_stability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpeechRecognitionResult::SpeechRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  alternative_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.SpeechRecognitionResult)
}
SpeechRecognitionResult::SpeechRecognitionResult(const SpeechRecognitionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      alternative_(from.alternative_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&final_, &from.final_,
    static_cast<size_t>(reinterpret_cast<char*>(&stability_) -
    reinterpret_cast<char*>(&final_)) + sizeof(stability_));
  // @@protoc_insertion_point(copy_constructor:content.proto.SpeechRecognitionResult)
}

inline void SpeechRecognitionResult::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&final_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stability_) -
    reinterpret_cast<char*>(&final_)) + sizeof(stability_));
}

SpeechRecognitionResult::~SpeechRecognitionResult() {
  // @@protoc_insertion_point(destructor:content.proto.SpeechRecognitionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeechRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SpeechRecognitionResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.SpeechRecognitionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alternative_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&final_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&stability_) -
        reinterpret_cast<char*>(&final_)) + sizeof(stability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpeechRecognitionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content.proto.SpeechRecognitionAlternative alternative = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alternative(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool final = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_final(&has_bits);
          final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float stability = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_stability(&has_bits);
          stability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.SpeechRecognitionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.proto.SpeechRecognitionAlternative alternative = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_alternative_size()); i < n; i++) {
    const auto& repfield = this->_internal_alternative(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool final = 2 [default = false];
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_final(), target);
  }

  // optional float stability = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_stability(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.SpeechRecognitionResult)
  return target;
}

size_t SpeechRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.SpeechRecognitionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.SpeechRecognitionAlternative alternative = 1;
  total_size += 1UL * this->_internal_alternative_size();
  for (const auto& msg : this->alternative_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool final = 2 [default = false];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional float stability = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionResult::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpeechRecognitionResult*>(
      &from));
}

void SpeechRecognitionResult::MergeFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.SpeechRecognitionResult)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  alternative_.MergeFrom(from.alternative_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      final_ = from.final_;
    }
    if (cached_has_bits & 0x00000002u) {
      stability_ = from.stability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpeechRecognitionResult::CopyFrom(const SpeechRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.SpeechRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionResult::IsInitialized() const {
  return true;
}

void SpeechRecognitionResult::InternalSwap(SpeechRecognitionResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  alternative_.InternalSwap(&other->alternative_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpeechRecognitionResult, stability_)
      + sizeof(SpeechRecognitionResult::stability_)
      - PROTOBUF_FIELD_OFFSET(SpeechRecognitionResult, final_)>(
          reinterpret_cast<char*>(&final_),
          reinterpret_cast<char*>(&other->final_));
}

std::string SpeechRecognitionResult::GetTypeName() const {
  return "content.proto.SpeechRecognitionResult";
}


// ===================================================================

class SpeechRecognitionAlternative::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeechRecognitionAlternative>()._has_bits_);
  static void set_has_transcript(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SpeechRecognitionAlternative::SpeechRecognitionAlternative(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.SpeechRecognitionAlternative)
}
SpeechRecognitionAlternative::SpeechRecognitionAlternative(const SpeechRecognitionAlternative& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  transcript_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transcript_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_transcript()) {
    transcript_.Set(from._internal_transcript(), 
      GetArenaForAllocation());
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:content.proto.SpeechRecognitionAlternative)
}

inline void SpeechRecognitionAlternative::SharedCtor() {
transcript_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transcript_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
confidence_ = 0;
}

SpeechRecognitionAlternative::~SpeechRecognitionAlternative() {
  // @@protoc_insertion_point(destructor:content.proto.SpeechRecognitionAlternative)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeechRecognitionAlternative::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transcript_.Destroy();
}

void SpeechRecognitionAlternative::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SpeechRecognitionAlternative::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.SpeechRecognitionAlternative)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    transcript_.ClearNonDefaultToEmpty();
  }
  confidence_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpeechRecognitionAlternative::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string transcript = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_transcript();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float confidence = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpeechRecognitionAlternative::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.SpeechRecognitionAlternative)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string transcript = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transcript(), target);
  }

  // optional float confidence = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.SpeechRecognitionAlternative)
  return target;
}

size_t SpeechRecognitionAlternative::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.SpeechRecognitionAlternative)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string transcript = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_transcript());
    }

    // optional float confidence = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeechRecognitionAlternative::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpeechRecognitionAlternative*>(
      &from));
}

void SpeechRecognitionAlternative::MergeFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.SpeechRecognitionAlternative)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_transcript(from._internal_transcript());
    }
    if (cached_has_bits & 0x00000002u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpeechRecognitionAlternative::CopyFrom(const SpeechRecognitionAlternative& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.SpeechRecognitionAlternative)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeechRecognitionAlternative::IsInitialized() const {
  return true;
}

void SpeechRecognitionAlternative::InternalSwap(SpeechRecognitionAlternative* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &transcript_, lhs_arena,
      &other->transcript_, rhs_arena
  );
  swap(confidence_, other->confidence_);
}

std::string SpeechRecognitionAlternative::GetTypeName() const {
  return "content.proto.SpeechRecognitionAlternative";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::SpeechRecognitionEvent*
Arena::CreateMaybeMessage< ::content::proto::SpeechRecognitionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::SpeechRecognitionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::SpeechRecognitionResult*
Arena::CreateMaybeMessage< ::content::proto::SpeechRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::SpeechRecognitionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::SpeechRecognitionAlternative*
Arena::CreateMaybeMessage< ::content::proto::SpeechRecognitionAlternative >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::SpeechRecognitionAlternative >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
