// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cache_storage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_cache_5fstorage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_cache_5fstorage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_cache_5fstorage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_cache_5fstorage_2eproto {
  static const uint32_t offsets[];
};
namespace content {
namespace proto {
class CacheHeaderMap;
struct CacheHeaderMapDefaultTypeInternal;
extern CacheHeaderMapDefaultTypeInternal _CacheHeaderMap_default_instance_;
class CacheMetadata;
struct CacheMetadataDefaultTypeInternal;
extern CacheMetadataDefaultTypeInternal _CacheMetadata_default_instance_;
class CacheRequest;
struct CacheRequestDefaultTypeInternal;
extern CacheRequestDefaultTypeInternal _CacheRequest_default_instance_;
class CacheResponse;
struct CacheResponseDefaultTypeInternal;
extern CacheResponseDefaultTypeInternal _CacheResponse_default_instance_;
class CacheStorageIndex;
struct CacheStorageIndexDefaultTypeInternal;
extern CacheStorageIndexDefaultTypeInternal _CacheStorageIndex_default_instance_;
class CacheStorageIndex_Cache;
struct CacheStorageIndex_CacheDefaultTypeInternal;
extern CacheStorageIndex_CacheDefaultTypeInternal _CacheStorageIndex_Cache_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::CacheHeaderMap* Arena::CreateMaybeMessage<::content::proto::CacheHeaderMap>(Arena*);
template<> ::content::proto::CacheMetadata* Arena::CreateMaybeMessage<::content::proto::CacheMetadata>(Arena*);
template<> ::content::proto::CacheRequest* Arena::CreateMaybeMessage<::content::proto::CacheRequest>(Arena*);
template<> ::content::proto::CacheResponse* Arena::CreateMaybeMessage<::content::proto::CacheResponse>(Arena*);
template<> ::content::proto::CacheStorageIndex* Arena::CreateMaybeMessage<::content::proto::CacheStorageIndex>(Arena*);
template<> ::content::proto::CacheStorageIndex_Cache* Arena::CreateMaybeMessage<::content::proto::CacheStorageIndex_Cache>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

enum CacheResponse_ResponseType : int {
  CacheResponse_ResponseType_BASIC_TYPE = 0,
  CacheResponse_ResponseType_CORS_TYPE = 1,
  CacheResponse_ResponseType_DEFAULT_TYPE = 2,
  CacheResponse_ResponseType_ERROR_TYPE = 3,
  CacheResponse_ResponseType_OPAQUE_TYPE = 4,
  CacheResponse_ResponseType_OPAQUE_REDIRECT_TYPE = 5
};
bool CacheResponse_ResponseType_IsValid(int value);
constexpr CacheResponse_ResponseType CacheResponse_ResponseType_ResponseType_MIN = CacheResponse_ResponseType_BASIC_TYPE;
constexpr CacheResponse_ResponseType CacheResponse_ResponseType_ResponseType_MAX = CacheResponse_ResponseType_OPAQUE_REDIRECT_TYPE;
constexpr int CacheResponse_ResponseType_ResponseType_ARRAYSIZE = CacheResponse_ResponseType_ResponseType_MAX + 1;

const std::string& CacheResponse_ResponseType_Name(CacheResponse_ResponseType value);
template<typename T>
inline const std::string& CacheResponse_ResponseType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CacheResponse_ResponseType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CacheResponse_ResponseType_Name.");
  return CacheResponse_ResponseType_Name(static_cast<CacheResponse_ResponseType>(enum_t_value));
}
bool CacheResponse_ResponseType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CacheResponse_ResponseType* value);
// ===================================================================

class CacheStorageIndex_Cache final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheStorageIndex.Cache) */ {
 public:
  inline CacheStorageIndex_Cache() : CacheStorageIndex_Cache(nullptr) {}
  ~CacheStorageIndex_Cache() override;
  explicit PROTOBUF_CONSTEXPR CacheStorageIndex_Cache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheStorageIndex_Cache(const CacheStorageIndex_Cache& from);
  CacheStorageIndex_Cache(CacheStorageIndex_Cache&& from) noexcept
    : CacheStorageIndex_Cache() {
    *this = ::std::move(from);
  }

  inline CacheStorageIndex_Cache& operator=(const CacheStorageIndex_Cache& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheStorageIndex_Cache& operator=(CacheStorageIndex_Cache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CacheStorageIndex_Cache& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheStorageIndex_Cache* internal_default_instance() {
    return reinterpret_cast<const CacheStorageIndex_Cache*>(
               &_CacheStorageIndex_Cache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CacheStorageIndex_Cache& a, CacheStorageIndex_Cache& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CacheStorageIndex_Cache* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheStorageIndex_Cache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheStorageIndex_Cache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheStorageIndex_Cache>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CacheStorageIndex_Cache& from);
  void MergeFrom(const CacheStorageIndex_Cache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheStorageIndex_Cache* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CacheStorageIndex.Cache";
  }
  protected:
  explicit CacheStorageIndex_Cache(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCacheDirFieldNumber = 2,
    kPaddingKeyFieldNumber = 4,
    kSizeFieldNumber = 3,
    kPaddingFieldNumber = 5,
    kPaddingVersionFieldNumber = 6,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string cache_dir = 2;
  bool has_cache_dir() const;
  private:
  bool _internal_has_cache_dir() const;
  public:
  void clear_cache_dir();
  const std::string& cache_dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cache_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cache_dir();
  PROTOBUF_NODISCARD std::string* release_cache_dir();
  void set_allocated_cache_dir(std::string* cache_dir);
  private:
  const std::string& _internal_cache_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cache_dir(const std::string& value);
  std::string* _internal_mutable_cache_dir();
  public:

  // optional string padding_key = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_padding_key() const;
  private:
  bool _internal_has_padding_key() const;
  public:
  PROTOBUF_DEPRECATED void clear_padding_key();
  PROTOBUF_DEPRECATED const std::string& padding_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_padding_key(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_padding_key();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_padding_key();
  PROTOBUF_DEPRECATED void set_allocated_padding_key(std::string* padding_key);
  private:
  const std::string& _internal_padding_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_padding_key(const std::string& value);
  std::string* _internal_mutable_padding_key();
  public:

  // optional int64 size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  int64_t size() const;
  void set_size(int64_t value);
  private:
  int64_t _internal_size() const;
  void _internal_set_size(int64_t value);
  public:

  // optional int64 padding = 5;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  int64_t padding() const;
  void set_padding(int64_t value);
  private:
  int64_t _internal_padding() const;
  void _internal_set_padding(int64_t value);
  public:

  // optional int32 padding_version = 6;
  bool has_padding_version() const;
  private:
  bool _internal_has_padding_version() const;
  public:
  void clear_padding_version();
  int32_t padding_version() const;
  void set_padding_version(int32_t value);
  private:
  int32_t _internal_padding_version() const;
  void _internal_set_padding_version(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.CacheStorageIndex.Cache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cache_dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr padding_key_;
  int64_t size_;
  int64_t padding_;
  int32_t padding_version_;
  friend struct ::TableStruct_cache_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CacheStorageIndex final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheStorageIndex) */ {
 public:
  inline CacheStorageIndex() : CacheStorageIndex(nullptr) {}
  ~CacheStorageIndex() override;
  explicit PROTOBUF_CONSTEXPR CacheStorageIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheStorageIndex(const CacheStorageIndex& from);
  CacheStorageIndex(CacheStorageIndex&& from) noexcept
    : CacheStorageIndex() {
    *this = ::std::move(from);
  }

  inline CacheStorageIndex& operator=(const CacheStorageIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheStorageIndex& operator=(CacheStorageIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CacheStorageIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheStorageIndex* internal_default_instance() {
    return reinterpret_cast<const CacheStorageIndex*>(
               &_CacheStorageIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CacheStorageIndex& a, CacheStorageIndex& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CacheStorageIndex* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheStorageIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheStorageIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheStorageIndex>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CacheStorageIndex& from);
  void MergeFrom(const CacheStorageIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheStorageIndex* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CacheStorageIndex";
  }
  protected:
  explicit CacheStorageIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CacheStorageIndex_Cache Cache;

  // accessors -------------------------------------------------------

  enum : int {
    kCacheFieldNumber = 1,
    kOriginFieldNumber = 2,
    kStorageKeyFieldNumber = 3,
  };
  // repeated .content.proto.CacheStorageIndex.Cache cache = 1;
  int cache_size() const;
  private:
  int _internal_cache_size() const;
  public:
  void clear_cache();
  ::content::proto::CacheStorageIndex_Cache* mutable_cache(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >*
      mutable_cache();
  private:
  const ::content::proto::CacheStorageIndex_Cache& _internal_cache(int index) const;
  ::content::proto::CacheStorageIndex_Cache* _internal_add_cache();
  public:
  const ::content::proto::CacheStorageIndex_Cache& cache(int index) const;
  ::content::proto::CacheStorageIndex_Cache* add_cache();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >&
      cache() const;

  // optional string origin = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  PROTOBUF_DEPRECATED void clear_origin();
  PROTOBUF_DEPRECATED const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_origin(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_origin();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_origin();
  PROTOBUF_DEPRECATED void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // optional string storage_key = 3;
  bool has_storage_key() const;
  private:
  bool _internal_has_storage_key() const;
  public:
  void clear_storage_key();
  const std::string& storage_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_key();
  PROTOBUF_NODISCARD std::string* release_storage_key();
  void set_allocated_storage_key(std::string* storage_key);
  private:
  const std::string& _internal_storage_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_key(const std::string& value);
  std::string* _internal_mutable_storage_key();
  public:

  // @@protoc_insertion_point(class_scope:content.proto.CacheStorageIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache > cache_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_key_;
  friend struct ::TableStruct_cache_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CacheHeaderMap final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheHeaderMap) */ {
 public:
  inline CacheHeaderMap() : CacheHeaderMap(nullptr) {}
  ~CacheHeaderMap() override;
  explicit PROTOBUF_CONSTEXPR CacheHeaderMap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheHeaderMap(const CacheHeaderMap& from);
  CacheHeaderMap(CacheHeaderMap&& from) noexcept
    : CacheHeaderMap() {
    *this = ::std::move(from);
  }

  inline CacheHeaderMap& operator=(const CacheHeaderMap& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheHeaderMap& operator=(CacheHeaderMap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CacheHeaderMap& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheHeaderMap* internal_default_instance() {
    return reinterpret_cast<const CacheHeaderMap*>(
               &_CacheHeaderMap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CacheHeaderMap& a, CacheHeaderMap& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CacheHeaderMap* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheHeaderMap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheHeaderMap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheHeaderMap>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CacheHeaderMap& from);
  void MergeFrom(const CacheHeaderMap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheHeaderMap* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CacheHeaderMap";
  }
  protected:
  explicit CacheHeaderMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:content.proto.CacheHeaderMap)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  friend struct ::TableStruct_cache_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CacheRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheRequest) */ {
 public:
  inline CacheRequest() : CacheRequest(nullptr) {}
  ~CacheRequest() override;
  explicit PROTOBUF_CONSTEXPR CacheRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheRequest(const CacheRequest& from);
  CacheRequest(CacheRequest&& from) noexcept
    : CacheRequest() {
    *this = ::std::move(from);
  }

  inline CacheRequest& operator=(const CacheRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheRequest& operator=(CacheRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CacheRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheRequest* internal_default_instance() {
    return reinterpret_cast<const CacheRequest*>(
               &_CacheRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CacheRequest& a, CacheRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CacheRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CacheRequest& from);
  void MergeFrom(const CacheRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CacheRequest";
  }
  protected:
  explicit CacheRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 2,
    kMethodFieldNumber = 1,
  };
  // repeated .content.proto.CacheHeaderMap headers = 2;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::content::proto::CacheHeaderMap* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
      mutable_headers();
  private:
  const ::content::proto::CacheHeaderMap& _internal_headers(int index) const;
  ::content::proto::CacheHeaderMap* _internal_add_headers();
  public:
  const ::content::proto::CacheHeaderMap& headers(int index) const;
  ::content::proto::CacheHeaderMap* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
      headers() const;

  // required string method = 1;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // @@protoc_insertion_point(class_scope:content.proto.CacheRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  friend struct ::TableStruct_cache_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CacheResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheResponse) */ {
 public:
  inline CacheResponse() : CacheResponse(nullptr) {}
  ~CacheResponse() override;
  explicit PROTOBUF_CONSTEXPR CacheResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheResponse(const CacheResponse& from);
  CacheResponse(CacheResponse&& from) noexcept
    : CacheResponse() {
    *this = ::std::move(from);
  }

  inline CacheResponse& operator=(const CacheResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheResponse& operator=(CacheResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CacheResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheResponse* internal_default_instance() {
    return reinterpret_cast<const CacheResponse*>(
               &_CacheResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CacheResponse& a, CacheResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CacheResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CacheResponse& from);
  void MergeFrom(const CacheResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CacheResponse";
  }
  protected:
  explicit CacheResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CacheResponse_ResponseType ResponseType;
  static constexpr ResponseType BASIC_TYPE =
    CacheResponse_ResponseType_BASIC_TYPE;
  static constexpr ResponseType CORS_TYPE =
    CacheResponse_ResponseType_CORS_TYPE;
  static constexpr ResponseType DEFAULT_TYPE =
    CacheResponse_ResponseType_DEFAULT_TYPE;
  static constexpr ResponseType ERROR_TYPE =
    CacheResponse_ResponseType_ERROR_TYPE;
  static constexpr ResponseType OPAQUE_TYPE =
    CacheResponse_ResponseType_OPAQUE_TYPE;
  static constexpr ResponseType OPAQUE_REDIRECT_TYPE =
    CacheResponse_ResponseType_OPAQUE_REDIRECT_TYPE;
  static inline bool ResponseType_IsValid(int value) {
    return CacheResponse_ResponseType_IsValid(value);
  }
  static constexpr ResponseType ResponseType_MIN =
    CacheResponse_ResponseType_ResponseType_MIN;
  static constexpr ResponseType ResponseType_MAX =
    CacheResponse_ResponseType_ResponseType_MAX;
  static constexpr int ResponseType_ARRAYSIZE =
    CacheResponse_ResponseType_ResponseType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ResponseType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ResponseType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ResponseType_Name.");
    return CacheResponse_ResponseType_Name(enum_t_value);
  }
  static inline bool ResponseType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ResponseType* value) {
    return CacheResponse_ResponseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 4,
    kCorsExposedHeaderNamesFieldNumber = 7,
    kUrlListFieldNumber = 8,
    kStatusTextFieldNumber = 2,
    kUrlFieldNumber = 5,
    kAlpnNegotiatedProtocolFieldNumber = 11,
    kMimeTypeFieldNumber = 13,
    kRequestMethodFieldNumber = 14,
    kStatusCodeFieldNumber = 1,
    kResponseTypeFieldNumber = 3,
    kResponseTimeFieldNumber = 6,
    kConnectionInfoFieldNumber = 10,
    kLoadedWithCredentialsFieldNumber = 9,
    kWasFetchedViaSpdyFieldNumber = 12,
    kRequestIncludeCredentialsFieldNumber = 17,
    kPaddingFieldNumber = 15,
    kSideDataPaddingFieldNumber = 16,
  };
  // repeated .content.proto.CacheHeaderMap headers = 4;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::content::proto::CacheHeaderMap* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
      mutable_headers();
  private:
  const ::content::proto::CacheHeaderMap& _internal_headers(int index) const;
  ::content::proto::CacheHeaderMap* _internal_add_headers();
  public:
  const ::content::proto::CacheHeaderMap& headers(int index) const;
  ::content::proto::CacheHeaderMap* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
      headers() const;

  // repeated string cors_exposed_header_names = 7;
  int cors_exposed_header_names_size() const;
  private:
  int _internal_cors_exposed_header_names_size() const;
  public:
  void clear_cors_exposed_header_names();
  const std::string& cors_exposed_header_names(int index) const;
  std::string* mutable_cors_exposed_header_names(int index);
  void set_cors_exposed_header_names(int index, const std::string& value);
  void set_cors_exposed_header_names(int index, std::string&& value);
  void set_cors_exposed_header_names(int index, const char* value);
  void set_cors_exposed_header_names(int index, const char* value, size_t size);
  std::string* add_cors_exposed_header_names();
  void add_cors_exposed_header_names(const std::string& value);
  void add_cors_exposed_header_names(std::string&& value);
  void add_cors_exposed_header_names(const char* value);
  void add_cors_exposed_header_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cors_exposed_header_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cors_exposed_header_names();
  private:
  const std::string& _internal_cors_exposed_header_names(int index) const;
  std::string* _internal_add_cors_exposed_header_names();
  public:

  // repeated string url_list = 8;
  int url_list_size() const;
  private:
  int _internal_url_list_size() const;
  public:
  void clear_url_list();
  const std::string& url_list(int index) const;
  std::string* mutable_url_list(int index);
  void set_url_list(int index, const std::string& value);
  void set_url_list(int index, std::string&& value);
  void set_url_list(int index, const char* value);
  void set_url_list(int index, const char* value, size_t size);
  std::string* add_url_list();
  void add_url_list(const std::string& value);
  void add_url_list(std::string&& value);
  void add_url_list(const char* value);
  void add_url_list(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& url_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_url_list();
  private:
  const std::string& _internal_url_list(int index) const;
  std::string* _internal_add_url_list();
  public:

  // required string status_text = 2;
  bool has_status_text() const;
  private:
  bool _internal_has_status_text() const;
  public:
  void clear_status_text();
  const std::string& status_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_text();
  PROTOBUF_NODISCARD std::string* release_status_text();
  void set_allocated_status_text(std::string* status_text);
  private:
  const std::string& _internal_status_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_text(const std::string& value);
  std::string* _internal_mutable_status_text();
  public:

  // optional string url = 5 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  PROTOBUF_DEPRECATED void clear_url();
  PROTOBUF_DEPRECATED const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_url(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_url();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_url();
  PROTOBUF_DEPRECATED void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string alpn_negotiated_protocol = 11;
  bool has_alpn_negotiated_protocol() const;
  private:
  bool _internal_has_alpn_negotiated_protocol() const;
  public:
  void clear_alpn_negotiated_protocol();
  const std::string& alpn_negotiated_protocol() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alpn_negotiated_protocol(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alpn_negotiated_protocol();
  PROTOBUF_NODISCARD std::string* release_alpn_negotiated_protocol();
  void set_allocated_alpn_negotiated_protocol(std::string* alpn_negotiated_protocol);
  private:
  const std::string& _internal_alpn_negotiated_protocol() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alpn_negotiated_protocol(const std::string& value);
  std::string* _internal_mutable_alpn_negotiated_protocol();
  public:

  // optional string mime_type = 13;
  bool has_mime_type() const;
  private:
  bool _internal_has_mime_type() const;
  public:
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // optional string request_method = 14;
  bool has_request_method() const;
  private:
  bool _internal_has_request_method() const;
  public:
  void clear_request_method();
  const std::string& request_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_method();
  PROTOBUF_NODISCARD std::string* release_request_method();
  void set_allocated_request_method(std::string* request_method);
  private:
  const std::string& _internal_request_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_method(const std::string& value);
  std::string* _internal_mutable_request_method();
  public:

  // required int32 status_code = 1;
  bool has_status_code() const;
  private:
  bool _internal_has_status_code() const;
  public:
  void clear_status_code();
  int32_t status_code() const;
  void set_status_code(int32_t value);
  private:
  int32_t _internal_status_code() const;
  void _internal_set_status_code(int32_t value);
  public:

  // required .content.proto.CacheResponse.ResponseType response_type = 3;
  bool has_response_type() const;
  private:
  bool _internal_has_response_type() const;
  public:
  void clear_response_type();
  ::content::proto::CacheResponse_ResponseType response_type() const;
  void set_response_type(::content::proto::CacheResponse_ResponseType value);
  private:
  ::content::proto::CacheResponse_ResponseType _internal_response_type() const;
  void _internal_set_response_type(::content::proto::CacheResponse_ResponseType value);
  public:

  // optional int64 response_time = 6;
  bool has_response_time() const;
  private:
  bool _internal_has_response_time() const;
  public:
  void clear_response_time();
  int64_t response_time() const;
  void set_response_time(int64_t value);
  private:
  int64_t _internal_response_time() const;
  void _internal_set_response_time(int64_t value);
  public:

  // optional int32 connection_info = 10;
  bool has_connection_info() const;
  private:
  bool _internal_has_connection_info() const;
  public:
  void clear_connection_info();
  int32_t connection_info() const;
  void set_connection_info(int32_t value);
  private:
  int32_t _internal_connection_info() const;
  void _internal_set_connection_info(int32_t value);
  public:

  // optional bool loaded_with_credentials = 9 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_loaded_with_credentials() const;
  private:
  bool _internal_has_loaded_with_credentials() const;
  public:
  PROTOBUF_DEPRECATED void clear_loaded_with_credentials();
  PROTOBUF_DEPRECATED bool loaded_with_credentials() const;
  PROTOBUF_DEPRECATED void set_loaded_with_credentials(bool value);
  private:
  bool _internal_loaded_with_credentials() const;
  void _internal_set_loaded_with_credentials(bool value);
  public:

  // optional bool was_fetched_via_spdy = 12;
  bool has_was_fetched_via_spdy() const;
  private:
  bool _internal_has_was_fetched_via_spdy() const;
  public:
  void clear_was_fetched_via_spdy();
  bool was_fetched_via_spdy() const;
  void set_was_fetched_via_spdy(bool value);
  private:
  bool _internal_was_fetched_via_spdy() const;
  void _internal_set_was_fetched_via_spdy(bool value);
  public:

  // optional bool request_include_credentials = 17;
  bool has_request_include_credentials() const;
  private:
  bool _internal_has_request_include_credentials() const;
  public:
  void clear_request_include_credentials();
  bool request_include_credentials() const;
  void set_request_include_credentials(bool value);
  private:
  bool _internal_request_include_credentials() const;
  void _internal_set_request_include_credentials(bool value);
  public:

  // optional int64 padding = 15;
  bool has_padding() const;
  private:
  bool _internal_has_padding() const;
  public:
  void clear_padding();
  int64_t padding() const;
  void set_padding(int64_t value);
  private:
  int64_t _internal_padding() const;
  void _internal_set_padding(int64_t value);
  public:

  // optional int64 side_data_padding = 16;
  bool has_side_data_padding() const;
  private:
  bool _internal_has_side_data_padding() const;
  public:
  void clear_side_data_padding();
  int64_t side_data_padding() const;
  void set_side_data_padding(int64_t value);
  private:
  int64_t _internal_side_data_padding() const;
  void _internal_set_side_data_padding(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.CacheResponse)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap > headers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cors_exposed_header_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> url_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alpn_negotiated_protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_method_;
  int32_t status_code_;
  int response_type_;
  int64_t response_time_;
  int32_t connection_info_;
  bool loaded_with_credentials_;
  bool was_fetched_via_spdy_;
  bool request_include_credentials_;
  int64_t padding_;
  int64_t side_data_padding_;
  friend struct ::TableStruct_cache_5fstorage_2eproto;
};
// -------------------------------------------------------------------

class CacheMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.CacheMetadata) */ {
 public:
  inline CacheMetadata() : CacheMetadata(nullptr) {}
  ~CacheMetadata() override;
  explicit PROTOBUF_CONSTEXPR CacheMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CacheMetadata(const CacheMetadata& from);
  CacheMetadata(CacheMetadata&& from) noexcept
    : CacheMetadata() {
    *this = ::std::move(from);
  }

  inline CacheMetadata& operator=(const CacheMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CacheMetadata& operator=(CacheMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CacheMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CacheMetadata* internal_default_instance() {
    return reinterpret_cast<const CacheMetadata*>(
               &_CacheMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CacheMetadata& a, CacheMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(CacheMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CacheMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CacheMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CacheMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CacheMetadata& from);
  void MergeFrom(const CacheMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CacheMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.CacheMetadata";
  }
  protected:
  explicit CacheMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
    kEntryTimeFieldNumber = 3,
  };
  // required .content.proto.CacheRequest request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::content::proto::CacheRequest& request() const;
  PROTOBUF_NODISCARD ::content::proto::CacheRequest* release_request();
  ::content::proto::CacheRequest* mutable_request();
  void set_allocated_request(::content::proto::CacheRequest* request);
  private:
  const ::content::proto::CacheRequest& _internal_request() const;
  ::content::proto::CacheRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::content::proto::CacheRequest* request);
  ::content::proto::CacheRequest* unsafe_arena_release_request();

  // required .content.proto.CacheResponse response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::content::proto::CacheResponse& response() const;
  PROTOBUF_NODISCARD ::content::proto::CacheResponse* release_response();
  ::content::proto::CacheResponse* mutable_response();
  void set_allocated_response(::content::proto::CacheResponse* response);
  private:
  const ::content::proto::CacheResponse& _internal_response() const;
  ::content::proto::CacheResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::content::proto::CacheResponse* response);
  ::content::proto::CacheResponse* unsafe_arena_release_response();

  // optional int64 entry_time = 3;
  bool has_entry_time() const;
  private:
  bool _internal_has_entry_time() const;
  public:
  void clear_entry_time();
  int64_t entry_time() const;
  void set_entry_time(int64_t value);
  private:
  int64_t _internal_entry_time() const;
  void _internal_set_entry_time(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.CacheMetadata)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::content::proto::CacheRequest* request_;
  ::content::proto::CacheResponse* response_;
  int64_t entry_time_;
  friend struct ::TableStruct_cache_5fstorage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CacheStorageIndex_Cache

// required string name = 1;
inline bool CacheStorageIndex_Cache::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheStorageIndex_Cache::has_name() const {
  return _internal_has_name();
}
inline void CacheStorageIndex_Cache::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacheStorageIndex_Cache::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheStorageIndex_Cache::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.name)
}
inline std::string* CacheStorageIndex_Cache::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.Cache.name)
  return _s;
}
inline const std::string& CacheStorageIndex_Cache::_internal_name() const {
  return name_.Get();
}
inline void CacheStorageIndex_Cache::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheStorageIndex_Cache::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheStorageIndex_Cache::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.Cache.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheStorageIndex_Cache::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.Cache.name)
}

// optional string cache_dir = 2;
inline bool CacheStorageIndex_Cache::_internal_has_cache_dir() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheStorageIndex_Cache::has_cache_dir() const {
  return _internal_has_cache_dir();
}
inline void CacheStorageIndex_Cache::clear_cache_dir() {
  cache_dir_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CacheStorageIndex_Cache::cache_dir() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.cache_dir)
  return _internal_cache_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheStorageIndex_Cache::set_cache_dir(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 cache_dir_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.cache_dir)
}
inline std::string* CacheStorageIndex_Cache::mutable_cache_dir() {
  std::string* _s = _internal_mutable_cache_dir();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.Cache.cache_dir)
  return _s;
}
inline const std::string& CacheStorageIndex_Cache::_internal_cache_dir() const {
  return cache_dir_.Get();
}
inline void CacheStorageIndex_Cache::_internal_set_cache_dir(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  cache_dir_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheStorageIndex_Cache::_internal_mutable_cache_dir() {
  _has_bits_[0] |= 0x00000002u;
  return cache_dir_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheStorageIndex_Cache::release_cache_dir() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.Cache.cache_dir)
  if (!_internal_has_cache_dir()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = cache_dir_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_dir_.IsDefault()) {
    cache_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheStorageIndex_Cache::set_allocated_cache_dir(std::string* cache_dir) {
  if (cache_dir != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cache_dir_.SetAllocated(cache_dir, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cache_dir_.IsDefault()) {
    cache_dir_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.Cache.cache_dir)
}

// optional int64 size = 3;
inline bool CacheStorageIndex_Cache::_internal_has_size() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CacheStorageIndex_Cache::has_size() const {
  return _internal_has_size();
}
inline void CacheStorageIndex_Cache::clear_size() {
  size_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t CacheStorageIndex_Cache::_internal_size() const {
  return size_;
}
inline int64_t CacheStorageIndex_Cache::size() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.size)
  return _internal_size();
}
inline void CacheStorageIndex_Cache::_internal_set_size(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  size_ = value;
}
inline void CacheStorageIndex_Cache::set_size(int64_t value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.size)
}

// optional string padding_key = 4 [deprecated = true];
inline bool CacheStorageIndex_Cache::_internal_has_padding_key() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CacheStorageIndex_Cache::has_padding_key() const {
  return _internal_has_padding_key();
}
inline void CacheStorageIndex_Cache::clear_padding_key() {
  padding_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CacheStorageIndex_Cache::padding_key() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.padding_key)
  return _internal_padding_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheStorageIndex_Cache::set_padding_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 padding_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.padding_key)
}
inline std::string* CacheStorageIndex_Cache::mutable_padding_key() {
  std::string* _s = _internal_mutable_padding_key();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.Cache.padding_key)
  return _s;
}
inline const std::string& CacheStorageIndex_Cache::_internal_padding_key() const {
  return padding_key_.Get();
}
inline void CacheStorageIndex_Cache::_internal_set_padding_key(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  padding_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheStorageIndex_Cache::_internal_mutable_padding_key() {
  _has_bits_[0] |= 0x00000004u;
  return padding_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheStorageIndex_Cache::release_padding_key() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.Cache.padding_key)
  if (!_internal_has_padding_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = padding_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_key_.IsDefault()) {
    padding_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheStorageIndex_Cache::set_allocated_padding_key(std::string* padding_key) {
  if (padding_key != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  padding_key_.SetAllocated(padding_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (padding_key_.IsDefault()) {
    padding_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.Cache.padding_key)
}

// optional int64 padding = 5;
inline bool CacheStorageIndex_Cache::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CacheStorageIndex_Cache::has_padding() const {
  return _internal_has_padding();
}
inline void CacheStorageIndex_Cache::clear_padding() {
  padding_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t CacheStorageIndex_Cache::_internal_padding() const {
  return padding_;
}
inline int64_t CacheStorageIndex_Cache::padding() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.padding)
  return _internal_padding();
}
inline void CacheStorageIndex_Cache::_internal_set_padding(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  padding_ = value;
}
inline void CacheStorageIndex_Cache::set_padding(int64_t value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.padding)
}

// optional int32 padding_version = 6;
inline bool CacheStorageIndex_Cache::_internal_has_padding_version() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CacheStorageIndex_Cache::has_padding_version() const {
  return _internal_has_padding_version();
}
inline void CacheStorageIndex_Cache::clear_padding_version() {
  padding_version_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CacheStorageIndex_Cache::_internal_padding_version() const {
  return padding_version_;
}
inline int32_t CacheStorageIndex_Cache::padding_version() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.Cache.padding_version)
  return _internal_padding_version();
}
inline void CacheStorageIndex_Cache::_internal_set_padding_version(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  padding_version_ = value;
}
inline void CacheStorageIndex_Cache::set_padding_version(int32_t value) {
  _internal_set_padding_version(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.Cache.padding_version)
}

// -------------------------------------------------------------------

// CacheStorageIndex

// repeated .content.proto.CacheStorageIndex.Cache cache = 1;
inline int CacheStorageIndex::_internal_cache_size() const {
  return cache_.size();
}
inline int CacheStorageIndex::cache_size() const {
  return _internal_cache_size();
}
inline void CacheStorageIndex::clear_cache() {
  cache_.Clear();
}
inline ::content::proto::CacheStorageIndex_Cache* CacheStorageIndex::mutable_cache(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.cache)
  return cache_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >*
CacheStorageIndex::mutable_cache() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheStorageIndex.cache)
  return &cache_;
}
inline const ::content::proto::CacheStorageIndex_Cache& CacheStorageIndex::_internal_cache(int index) const {
  return cache_.Get(index);
}
inline const ::content::proto::CacheStorageIndex_Cache& CacheStorageIndex::cache(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.cache)
  return _internal_cache(index);
}
inline ::content::proto::CacheStorageIndex_Cache* CacheStorageIndex::_internal_add_cache() {
  return cache_.Add();
}
inline ::content::proto::CacheStorageIndex_Cache* CacheStorageIndex::add_cache() {
  ::content::proto::CacheStorageIndex_Cache* _add = _internal_add_cache();
  // @@protoc_insertion_point(field_add:content.proto.CacheStorageIndex.cache)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheStorageIndex_Cache >&
CacheStorageIndex::cache() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheStorageIndex.cache)
  return cache_;
}

// optional string origin = 2 [deprecated = true];
inline bool CacheStorageIndex::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheStorageIndex::has_origin() const {
  return _internal_has_origin();
}
inline void CacheStorageIndex::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacheStorageIndex::origin() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheStorageIndex::set_origin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.origin)
}
inline std::string* CacheStorageIndex::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.origin)
  return _s;
}
inline const std::string& CacheStorageIndex::_internal_origin() const {
  return origin_.Get();
}
inline void CacheStorageIndex::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheStorageIndex::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  return origin_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheStorageIndex::release_origin() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheStorageIndex::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.origin)
}

// optional string storage_key = 3;
inline bool CacheStorageIndex::_internal_has_storage_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheStorageIndex::has_storage_key() const {
  return _internal_has_storage_key();
}
inline void CacheStorageIndex::clear_storage_key() {
  storage_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CacheStorageIndex::storage_key() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheStorageIndex.storage_key)
  return _internal_storage_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheStorageIndex::set_storage_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 storage_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheStorageIndex.storage_key)
}
inline std::string* CacheStorageIndex::mutable_storage_key() {
  std::string* _s = _internal_mutable_storage_key();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheStorageIndex.storage_key)
  return _s;
}
inline const std::string& CacheStorageIndex::_internal_storage_key() const {
  return storage_key_.Get();
}
inline void CacheStorageIndex::_internal_set_storage_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  storage_key_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheStorageIndex::_internal_mutable_storage_key() {
  _has_bits_[0] |= 0x00000002u;
  return storage_key_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheStorageIndex::release_storage_key() {
  // @@protoc_insertion_point(field_release:content.proto.CacheStorageIndex.storage_key)
  if (!_internal_has_storage_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = storage_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (storage_key_.IsDefault()) {
    storage_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheStorageIndex::set_allocated_storage_key(std::string* storage_key) {
  if (storage_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  storage_key_.SetAllocated(storage_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (storage_key_.IsDefault()) {
    storage_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheStorageIndex.storage_key)
}

// -------------------------------------------------------------------

// CacheHeaderMap

// required string name = 1;
inline bool CacheHeaderMap::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheHeaderMap::has_name() const {
  return _internal_has_name();
}
inline void CacheHeaderMap::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacheHeaderMap::name() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheHeaderMap.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheHeaderMap::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheHeaderMap.name)
}
inline std::string* CacheHeaderMap::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheHeaderMap.name)
  return _s;
}
inline const std::string& CacheHeaderMap::_internal_name() const {
  return name_.Get();
}
inline void CacheHeaderMap::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheHeaderMap::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheHeaderMap::release_name() {
  // @@protoc_insertion_point(field_release:content.proto.CacheHeaderMap.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheHeaderMap::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheHeaderMap.name)
}

// required string value = 2;
inline bool CacheHeaderMap::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheHeaderMap::has_value() const {
  return _internal_has_value();
}
inline void CacheHeaderMap::clear_value() {
  value_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CacheHeaderMap::value() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheHeaderMap.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheHeaderMap::set_value(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheHeaderMap.value)
}
inline std::string* CacheHeaderMap::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheHeaderMap.value)
  return _s;
}
inline const std::string& CacheHeaderMap::_internal_value() const {
  return value_.Get();
}
inline void CacheHeaderMap::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheHeaderMap::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheHeaderMap::release_value() {
  // @@protoc_insertion_point(field_release:content.proto.CacheHeaderMap.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = value_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheHeaderMap::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault()) {
    value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheHeaderMap.value)
}

// -------------------------------------------------------------------

// CacheRequest

// required string method = 1;
inline bool CacheRequest::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheRequest::has_method() const {
  return _internal_has_method();
}
inline void CacheRequest::clear_method() {
  method_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacheRequest::method() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheRequest.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheRequest::set_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheRequest.method)
}
inline std::string* CacheRequest::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheRequest.method)
  return _s;
}
inline const std::string& CacheRequest::_internal_method() const {
  return method_.Get();
}
inline void CacheRequest::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheRequest::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000001u;
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheRequest::release_method() {
  // @@protoc_insertion_point(field_release:content.proto.CacheRequest.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheRequest::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheRequest.method)
}

// repeated .content.proto.CacheHeaderMap headers = 2;
inline int CacheRequest::_internal_headers_size() const {
  return headers_.size();
}
inline int CacheRequest::headers_size() const {
  return _internal_headers_size();
}
inline void CacheRequest::clear_headers() {
  headers_.Clear();
}
inline ::content::proto::CacheHeaderMap* CacheRequest::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheRequest.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
CacheRequest::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheRequest.headers)
  return &headers_;
}
inline const ::content::proto::CacheHeaderMap& CacheRequest::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::content::proto::CacheHeaderMap& CacheRequest::headers(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheRequest.headers)
  return _internal_headers(index);
}
inline ::content::proto::CacheHeaderMap* CacheRequest::_internal_add_headers() {
  return headers_.Add();
}
inline ::content::proto::CacheHeaderMap* CacheRequest::add_headers() {
  ::content::proto::CacheHeaderMap* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:content.proto.CacheRequest.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
CacheRequest::headers() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheRequest.headers)
  return headers_;
}

// -------------------------------------------------------------------

// CacheResponse

// required int32 status_code = 1;
inline bool CacheResponse::_internal_has_status_code() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool CacheResponse::has_status_code() const {
  return _internal_has_status_code();
}
inline void CacheResponse::clear_status_code() {
  status_code_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t CacheResponse::_internal_status_code() const {
  return status_code_;
}
inline int32_t CacheResponse::status_code() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.status_code)
  return _internal_status_code();
}
inline void CacheResponse::_internal_set_status_code(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  status_code_ = value;
}
inline void CacheResponse::set_status_code(int32_t value) {
  _internal_set_status_code(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.status_code)
}

// required string status_text = 2;
inline bool CacheResponse::_internal_has_status_text() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool CacheResponse::has_status_text() const {
  return _internal_has_status_text();
}
inline void CacheResponse::clear_status_text() {
  status_text_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CacheResponse::status_text() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.status_text)
  return _internal_status_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheResponse::set_status_text(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 status_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.status_text)
}
inline std::string* CacheResponse::mutable_status_text() {
  std::string* _s = _internal_mutable_status_text();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.status_text)
  return _s;
}
inline const std::string& CacheResponse::_internal_status_text() const {
  return status_text_.Get();
}
inline void CacheResponse::_internal_set_status_text(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  status_text_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheResponse::_internal_mutable_status_text() {
  _has_bits_[0] |= 0x00000001u;
  return status_text_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheResponse::release_status_text() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.status_text)
  if (!_internal_has_status_text()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = status_text_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault()) {
    status_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheResponse::set_allocated_status_text(std::string* status_text) {
  if (status_text != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  status_text_.SetAllocated(status_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_text_.IsDefault()) {
    status_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.status_text)
}

// required .content.proto.CacheResponse.ResponseType response_type = 3;
inline bool CacheResponse::_internal_has_response_type() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool CacheResponse::has_response_type() const {
  return _internal_has_response_type();
}
inline void CacheResponse::clear_response_type() {
  response_type_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::content::proto::CacheResponse_ResponseType CacheResponse::_internal_response_type() const {
  return static_cast< ::content::proto::CacheResponse_ResponseType >(response_type_);
}
inline ::content::proto::CacheResponse_ResponseType CacheResponse::response_type() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.response_type)
  return _internal_response_type();
}
inline void CacheResponse::_internal_set_response_type(::content::proto::CacheResponse_ResponseType value) {
  assert(::content::proto::CacheResponse_ResponseType_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  response_type_ = value;
}
inline void CacheResponse::set_response_type(::content::proto::CacheResponse_ResponseType value) {
  _internal_set_response_type(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.response_type)
}

// repeated .content.proto.CacheHeaderMap headers = 4;
inline int CacheResponse::_internal_headers_size() const {
  return headers_.size();
}
inline int CacheResponse::headers_size() const {
  return _internal_headers_size();
}
inline void CacheResponse::clear_headers() {
  headers_.Clear();
}
inline ::content::proto::CacheHeaderMap* CacheResponse::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >*
CacheResponse::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheResponse.headers)
  return &headers_;
}
inline const ::content::proto::CacheHeaderMap& CacheResponse::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::content::proto::CacheHeaderMap& CacheResponse::headers(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.headers)
  return _internal_headers(index);
}
inline ::content::proto::CacheHeaderMap* CacheResponse::_internal_add_headers() {
  return headers_.Add();
}
inline ::content::proto::CacheHeaderMap* CacheResponse::add_headers() {
  ::content::proto::CacheHeaderMap* _add = _internal_add_headers();
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.headers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::proto::CacheHeaderMap >&
CacheResponse::headers() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheResponse.headers)
  return headers_;
}

// optional string url = 5 [deprecated = true];
inline bool CacheResponse::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool CacheResponse::has_url() const {
  return _internal_has_url();
}
inline void CacheResponse::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CacheResponse::url() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheResponse::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.url)
}
inline std::string* CacheResponse::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.url)
  return _s;
}
inline const std::string& CacheResponse::_internal_url() const {
  return url_.Get();
}
inline void CacheResponse::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheResponse::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000002u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheResponse::release_url() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheResponse::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.url)
}

// optional int64 response_time = 6;
inline bool CacheResponse::_internal_has_response_time() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool CacheResponse::has_response_time() const {
  return _internal_has_response_time();
}
inline void CacheResponse::clear_response_time() {
  response_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000080u;
}
inline int64_t CacheResponse::_internal_response_time() const {
  return response_time_;
}
inline int64_t CacheResponse::response_time() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.response_time)
  return _internal_response_time();
}
inline void CacheResponse::_internal_set_response_time(int64_t value) {
  _has_bits_[0] |= 0x00000080u;
  response_time_ = value;
}
inline void CacheResponse::set_response_time(int64_t value) {
  _internal_set_response_time(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.response_time)
}

// repeated string cors_exposed_header_names = 7;
inline int CacheResponse::_internal_cors_exposed_header_names_size() const {
  return cors_exposed_header_names_.size();
}
inline int CacheResponse::cors_exposed_header_names_size() const {
  return _internal_cors_exposed_header_names_size();
}
inline void CacheResponse::clear_cors_exposed_header_names() {
  cors_exposed_header_names_.Clear();
}
inline std::string* CacheResponse::add_cors_exposed_header_names() {
  std::string* _s = _internal_add_cors_exposed_header_names();
  // @@protoc_insertion_point(field_add_mutable:content.proto.CacheResponse.cors_exposed_header_names)
  return _s;
}
inline const std::string& CacheResponse::_internal_cors_exposed_header_names(int index) const {
  return cors_exposed_header_names_.Get(index);
}
inline const std::string& CacheResponse::cors_exposed_header_names(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.cors_exposed_header_names)
  return _internal_cors_exposed_header_names(index);
}
inline std::string* CacheResponse::mutable_cors_exposed_header_names(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.cors_exposed_header_names)
  return cors_exposed_header_names_.Mutable(index);
}
inline void CacheResponse::set_cors_exposed_header_names(int index, const std::string& value) {
  cors_exposed_header_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::set_cors_exposed_header_names(int index, std::string&& value) {
  cors_exposed_header_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::set_cors_exposed_header_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cors_exposed_header_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::set_cors_exposed_header_names(int index, const char* value, size_t size) {
  cors_exposed_header_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheResponse.cors_exposed_header_names)
}
inline std::string* CacheResponse::_internal_add_cors_exposed_header_names() {
  return cors_exposed_header_names_.Add();
}
inline void CacheResponse::add_cors_exposed_header_names(const std::string& value) {
  cors_exposed_header_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::add_cors_exposed_header_names(std::string&& value) {
  cors_exposed_header_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::add_cors_exposed_header_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cors_exposed_header_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.proto.CacheResponse.cors_exposed_header_names)
}
inline void CacheResponse::add_cors_exposed_header_names(const char* value, size_t size) {
  cors_exposed_header_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.proto.CacheResponse.cors_exposed_header_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CacheResponse::cors_exposed_header_names() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheResponse.cors_exposed_header_names)
  return cors_exposed_header_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CacheResponse::mutable_cors_exposed_header_names() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheResponse.cors_exposed_header_names)
  return &cors_exposed_header_names_;
}

// repeated string url_list = 8;
inline int CacheResponse::_internal_url_list_size() const {
  return url_list_.size();
}
inline int CacheResponse::url_list_size() const {
  return _internal_url_list_size();
}
inline void CacheResponse::clear_url_list() {
  url_list_.Clear();
}
inline std::string* CacheResponse::add_url_list() {
  std::string* _s = _internal_add_url_list();
  // @@protoc_insertion_point(field_add_mutable:content.proto.CacheResponse.url_list)
  return _s;
}
inline const std::string& CacheResponse::_internal_url_list(int index) const {
  return url_list_.Get(index);
}
inline const std::string& CacheResponse::url_list(int index) const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.url_list)
  return _internal_url_list(index);
}
inline std::string* CacheResponse::mutable_url_list(int index) {
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.url_list)
  return url_list_.Mutable(index);
}
inline void CacheResponse::set_url_list(int index, const std::string& value) {
  url_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::set_url_list(int index, std::string&& value) {
  url_list_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::set_url_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::set_url_list(int index, const char* value, size_t size) {
  url_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.proto.CacheResponse.url_list)
}
inline std::string* CacheResponse::_internal_add_url_list() {
  return url_list_.Add();
}
inline void CacheResponse::add_url_list(const std::string& value) {
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::add_url_list(std::string&& value) {
  url_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::add_url_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  url_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.proto.CacheResponse.url_list)
}
inline void CacheResponse::add_url_list(const char* value, size_t size) {
  url_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.proto.CacheResponse.url_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CacheResponse::url_list() const {
  // @@protoc_insertion_point(field_list:content.proto.CacheResponse.url_list)
  return url_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CacheResponse::mutable_url_list() {
  // @@protoc_insertion_point(field_mutable_list:content.proto.CacheResponse.url_list)
  return &url_list_;
}

// optional bool loaded_with_credentials = 9 [deprecated = true];
inline bool CacheResponse::_internal_has_loaded_with_credentials() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool CacheResponse::has_loaded_with_credentials() const {
  return _internal_has_loaded_with_credentials();
}
inline void CacheResponse::clear_loaded_with_credentials() {
  loaded_with_credentials_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool CacheResponse::_internal_loaded_with_credentials() const {
  return loaded_with_credentials_;
}
inline bool CacheResponse::loaded_with_credentials() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.loaded_with_credentials)
  return _internal_loaded_with_credentials();
}
inline void CacheResponse::_internal_set_loaded_with_credentials(bool value) {
  _has_bits_[0] |= 0x00000200u;
  loaded_with_credentials_ = value;
}
inline void CacheResponse::set_loaded_with_credentials(bool value) {
  _internal_set_loaded_with_credentials(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.loaded_with_credentials)
}

// optional int32 connection_info = 10;
inline bool CacheResponse::_internal_has_connection_info() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool CacheResponse::has_connection_info() const {
  return _internal_has_connection_info();
}
inline void CacheResponse::clear_connection_info() {
  connection_info_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline int32_t CacheResponse::_internal_connection_info() const {
  return connection_info_;
}
inline int32_t CacheResponse::connection_info() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.connection_info)
  return _internal_connection_info();
}
inline void CacheResponse::_internal_set_connection_info(int32_t value) {
  _has_bits_[0] |= 0x00000100u;
  connection_info_ = value;
}
inline void CacheResponse::set_connection_info(int32_t value) {
  _internal_set_connection_info(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.connection_info)
}

// optional string alpn_negotiated_protocol = 11;
inline bool CacheResponse::_internal_has_alpn_negotiated_protocol() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CacheResponse::has_alpn_negotiated_protocol() const {
  return _internal_has_alpn_negotiated_protocol();
}
inline void CacheResponse::clear_alpn_negotiated_protocol() {
  alpn_negotiated_protocol_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CacheResponse::alpn_negotiated_protocol() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.alpn_negotiated_protocol)
  return _internal_alpn_negotiated_protocol();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheResponse::set_alpn_negotiated_protocol(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 alpn_negotiated_protocol_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.alpn_negotiated_protocol)
}
inline std::string* CacheResponse::mutable_alpn_negotiated_protocol() {
  std::string* _s = _internal_mutable_alpn_negotiated_protocol();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.alpn_negotiated_protocol)
  return _s;
}
inline const std::string& CacheResponse::_internal_alpn_negotiated_protocol() const {
  return alpn_negotiated_protocol_.Get();
}
inline void CacheResponse::_internal_set_alpn_negotiated_protocol(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  alpn_negotiated_protocol_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheResponse::_internal_mutable_alpn_negotiated_protocol() {
  _has_bits_[0] |= 0x00000004u;
  return alpn_negotiated_protocol_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheResponse::release_alpn_negotiated_protocol() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.alpn_negotiated_protocol)
  if (!_internal_has_alpn_negotiated_protocol()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = alpn_negotiated_protocol_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alpn_negotiated_protocol_.IsDefault()) {
    alpn_negotiated_protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheResponse::set_allocated_alpn_negotiated_protocol(std::string* alpn_negotiated_protocol) {
  if (alpn_negotiated_protocol != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alpn_negotiated_protocol_.SetAllocated(alpn_negotiated_protocol, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (alpn_negotiated_protocol_.IsDefault()) {
    alpn_negotiated_protocol_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.alpn_negotiated_protocol)
}

// optional bool was_fetched_via_spdy = 12;
inline bool CacheResponse::_internal_has_was_fetched_via_spdy() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool CacheResponse::has_was_fetched_via_spdy() const {
  return _internal_has_was_fetched_via_spdy();
}
inline void CacheResponse::clear_was_fetched_via_spdy() {
  was_fetched_via_spdy_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool CacheResponse::_internal_was_fetched_via_spdy() const {
  return was_fetched_via_spdy_;
}
inline bool CacheResponse::was_fetched_via_spdy() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.was_fetched_via_spdy)
  return _internal_was_fetched_via_spdy();
}
inline void CacheResponse::_internal_set_was_fetched_via_spdy(bool value) {
  _has_bits_[0] |= 0x00000400u;
  was_fetched_via_spdy_ = value;
}
inline void CacheResponse::set_was_fetched_via_spdy(bool value) {
  _internal_set_was_fetched_via_spdy(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.was_fetched_via_spdy)
}

// optional string mime_type = 13;
inline bool CacheResponse::_internal_has_mime_type() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool CacheResponse::has_mime_type() const {
  return _internal_has_mime_type();
}
inline void CacheResponse::clear_mime_type() {
  mime_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CacheResponse::mime_type() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheResponse::set_mime_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.mime_type)
}
inline std::string* CacheResponse::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.mime_type)
  return _s;
}
inline const std::string& CacheResponse::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void CacheResponse::_internal_set_mime_type(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheResponse::_internal_mutable_mime_type() {
  _has_bits_[0] |= 0x00000008u;
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheResponse::release_mime_type() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.mime_type)
  if (!_internal_has_mime_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = mime_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheResponse::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.mime_type)
}

// optional string request_method = 14;
inline bool CacheResponse::_internal_has_request_method() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool CacheResponse::has_request_method() const {
  return _internal_has_request_method();
}
inline void CacheResponse::clear_request_method() {
  request_method_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CacheResponse::request_method() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.request_method)
  return _internal_request_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CacheResponse::set_request_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 request_method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.request_method)
}
inline std::string* CacheResponse::mutable_request_method() {
  std::string* _s = _internal_mutable_request_method();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheResponse.request_method)
  return _s;
}
inline const std::string& CacheResponse::_internal_request_method() const {
  return request_method_.Get();
}
inline void CacheResponse::_internal_set_request_method(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  request_method_.Set(value, GetArenaForAllocation());
}
inline std::string* CacheResponse::_internal_mutable_request_method() {
  _has_bits_[0] |= 0x00000010u;
  return request_method_.Mutable(GetArenaForAllocation());
}
inline std::string* CacheResponse::release_request_method() {
  // @@protoc_insertion_point(field_release:content.proto.CacheResponse.request_method)
  if (!_internal_has_request_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = request_method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_method_.IsDefault()) {
    request_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void CacheResponse::set_allocated_request_method(std::string* request_method) {
  if (request_method != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  request_method_.SetAllocated(request_method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_method_.IsDefault()) {
    request_method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheResponse.request_method)
}

// optional int64 padding = 15;
inline bool CacheResponse::_internal_has_padding() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool CacheResponse::has_padding() const {
  return _internal_has_padding();
}
inline void CacheResponse::clear_padding() {
  padding_ = int64_t{0};
  _has_bits_[0] &= ~0x00001000u;
}
inline int64_t CacheResponse::_internal_padding() const {
  return padding_;
}
inline int64_t CacheResponse::padding() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.padding)
  return _internal_padding();
}
inline void CacheResponse::_internal_set_padding(int64_t value) {
  _has_bits_[0] |= 0x00001000u;
  padding_ = value;
}
inline void CacheResponse::set_padding(int64_t value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.padding)
}

// optional int64 side_data_padding = 16;
inline bool CacheResponse::_internal_has_side_data_padding() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool CacheResponse::has_side_data_padding() const {
  return _internal_has_side_data_padding();
}
inline void CacheResponse::clear_side_data_padding() {
  side_data_padding_ = int64_t{0};
  _has_bits_[0] &= ~0x00002000u;
}
inline int64_t CacheResponse::_internal_side_data_padding() const {
  return side_data_padding_;
}
inline int64_t CacheResponse::side_data_padding() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.side_data_padding)
  return _internal_side_data_padding();
}
inline void CacheResponse::_internal_set_side_data_padding(int64_t value) {
  _has_bits_[0] |= 0x00002000u;
  side_data_padding_ = value;
}
inline void CacheResponse::set_side_data_padding(int64_t value) {
  _internal_set_side_data_padding(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.side_data_padding)
}

// optional bool request_include_credentials = 17;
inline bool CacheResponse::_internal_has_request_include_credentials() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool CacheResponse::has_request_include_credentials() const {
  return _internal_has_request_include_credentials();
}
inline void CacheResponse::clear_request_include_credentials() {
  request_include_credentials_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool CacheResponse::_internal_request_include_credentials() const {
  return request_include_credentials_;
}
inline bool CacheResponse::request_include_credentials() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheResponse.request_include_credentials)
  return _internal_request_include_credentials();
}
inline void CacheResponse::_internal_set_request_include_credentials(bool value) {
  _has_bits_[0] |= 0x00000800u;
  request_include_credentials_ = value;
}
inline void CacheResponse::set_request_include_credentials(bool value) {
  _internal_set_request_include_credentials(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheResponse.request_include_credentials)
}

// -------------------------------------------------------------------

// CacheMetadata

// required .content.proto.CacheRequest request = 1;
inline bool CacheMetadata::_internal_has_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || request_ != nullptr);
  return value;
}
inline bool CacheMetadata::has_request() const {
  return _internal_has_request();
}
inline void CacheMetadata::clear_request() {
  if (request_ != nullptr) request_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::content::proto::CacheRequest& CacheMetadata::_internal_request() const {
  const ::content::proto::CacheRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::proto::CacheRequest&>(
      ::content::proto::_CacheRequest_default_instance_);
}
inline const ::content::proto::CacheRequest& CacheMetadata::request() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheMetadata.request)
  return _internal_request();
}
inline void CacheMetadata::unsafe_arena_set_allocated_request(
    ::content::proto::CacheRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.proto.CacheMetadata.request)
}
inline ::content::proto::CacheRequest* CacheMetadata::release_request() {
  _has_bits_[0] &= ~0x00000001u;
  ::content::proto::CacheRequest* temp = request_;
  request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::proto::CacheRequest* CacheMetadata::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:content.proto.CacheMetadata.request)
  _has_bits_[0] &= ~0x00000001u;
  ::content::proto::CacheRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::content::proto::CacheRequest* CacheMetadata::_internal_mutable_request() {
  _has_bits_[0] |= 0x00000001u;
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::CacheRequest>(GetArenaForAllocation());
    request_ = p;
  }
  return request_;
}
inline ::content::proto::CacheRequest* CacheMetadata::mutable_request() {
  ::content::proto::CacheRequest* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheMetadata.request)
  return _msg;
}
inline void CacheMetadata::set_allocated_request(::content::proto::CacheRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheMetadata.request)
}

// required .content.proto.CacheResponse response = 2;
inline bool CacheMetadata::_internal_has_response() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || response_ != nullptr);
  return value;
}
inline bool CacheMetadata::has_response() const {
  return _internal_has_response();
}
inline void CacheMetadata::clear_response() {
  if (response_ != nullptr) response_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::content::proto::CacheResponse& CacheMetadata::_internal_response() const {
  const ::content::proto::CacheResponse* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::proto::CacheResponse&>(
      ::content::proto::_CacheResponse_default_instance_);
}
inline const ::content::proto::CacheResponse& CacheMetadata::response() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheMetadata.response)
  return _internal_response();
}
inline void CacheMetadata::unsafe_arena_set_allocated_response(
    ::content::proto::CacheResponse* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.proto.CacheMetadata.response)
}
inline ::content::proto::CacheResponse* CacheMetadata::release_response() {
  _has_bits_[0] &= ~0x00000002u;
  ::content::proto::CacheResponse* temp = response_;
  response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::proto::CacheResponse* CacheMetadata::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:content.proto.CacheMetadata.response)
  _has_bits_[0] &= ~0x00000002u;
  ::content::proto::CacheResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::content::proto::CacheResponse* CacheMetadata::_internal_mutable_response() {
  _has_bits_[0] |= 0x00000002u;
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::CacheResponse>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::content::proto::CacheResponse* CacheMetadata::mutable_response() {
  ::content::proto::CacheResponse* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:content.proto.CacheMetadata.response)
  return _msg;
}
inline void CacheMetadata::set_allocated_response(::content::proto::CacheResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:content.proto.CacheMetadata.response)
}

// optional int64 entry_time = 3;
inline bool CacheMetadata::_internal_has_entry_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool CacheMetadata::has_entry_time() const {
  return _internal_has_entry_time();
}
inline void CacheMetadata::clear_entry_time() {
  entry_time_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t CacheMetadata::_internal_entry_time() const {
  return entry_time_;
}
inline int64_t CacheMetadata::entry_time() const {
  // @@protoc_insertion_point(field_get:content.proto.CacheMetadata.entry_time)
  return _internal_entry_time();
}
inline void CacheMetadata::_internal_set_entry_time(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  entry_time_ = value;
}
inline void CacheMetadata::set_entry_time(int64_t value) {
  _internal_set_entry_time(value);
  // @@protoc_insertion_point(field_set:content.proto.CacheMetadata.entry_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::proto::CacheResponse_ResponseType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_cache_5fstorage_2eproto
