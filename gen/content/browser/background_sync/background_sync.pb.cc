// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_sync.proto

#include "background_sync.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
PROTOBUF_CONSTEXPR PeriodicSyncOptions::PeriodicSyncOptions(
    ::_pbi::ConstantInitialized)
  : min_interval_(int64_t{0}){}
struct PeriodicSyncOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PeriodicSyncOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PeriodicSyncOptionsDefaultTypeInternal() {}
  union {
    PeriodicSyncOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PeriodicSyncOptionsDefaultTypeInternal _PeriodicSyncOptions_default_instance_;
PROTOBUF_CONSTEXPR BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto(
    ::_pbi::ConstantInitialized)
  : tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , periodic_sync_options_(nullptr)
  , delay_until_(int64_t{0})
  , num_attempts_(0)
  , max_attempts_(0){}
struct BackgroundSyncRegistrationProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundSyncRegistrationProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundSyncRegistrationProtoDefaultTypeInternal() {}
  union {
    BackgroundSyncRegistrationProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundSyncRegistrationProtoDefaultTypeInternal _BackgroundSyncRegistrationProto_default_instance_;
PROTOBUF_CONSTEXPR BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto(
    ::_pbi::ConstantInitialized)
  : registration_()
  , origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BackgroundSyncRegistrationsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundSyncRegistrationsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundSyncRegistrationsProtoDefaultTypeInternal() {}
  union {
    BackgroundSyncRegistrationsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundSyncRegistrationsProtoDefaultTypeInternal _BackgroundSyncRegistrationsProto_default_instance_;
}  // namespace content
namespace content {
bool SyncNetworkState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> SyncNetworkState_strings[3] = {};

static const char SyncNetworkState_names[] =
  "NETWORK_STATE_ANY"
  "NETWORK_STATE_AVOID_CELLULAR"
  "NETWORK_STATE_ONLINE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SyncNetworkState_entries[] = {
  { {SyncNetworkState_names + 0, 17}, 0 },
  { {SyncNetworkState_names + 17, 28}, 1 },
  { {SyncNetworkState_names + 45, 20}, 2 },
};

static const int SyncNetworkState_entries_by_number[] = {
  0, // 0 -> NETWORK_STATE_ANY
  1, // 1 -> NETWORK_STATE_AVOID_CELLULAR
  2, // 2 -> NETWORK_STATE_ONLINE
};

const std::string& SyncNetworkState_Name(
    SyncNetworkState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SyncNetworkState_entries,
          SyncNetworkState_entries_by_number,
          3, SyncNetworkState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SyncNetworkState_entries,
      SyncNetworkState_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     SyncNetworkState_strings[idx].get();
}
bool SyncNetworkState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SyncNetworkState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SyncNetworkState_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SyncNetworkState>(int_value);
  }
  return success;
}

// ===================================================================

class PeriodicSyncOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<PeriodicSyncOptions>()._has_bits_);
  static void set_has_min_interval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PeriodicSyncOptions::PeriodicSyncOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.PeriodicSyncOptions)
}
PeriodicSyncOptions::PeriodicSyncOptions(const PeriodicSyncOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  min_interval_ = from.min_interval_;
  // @@protoc_insertion_point(copy_constructor:content.PeriodicSyncOptions)
}

inline void PeriodicSyncOptions::SharedCtor() {
min_interval_ = int64_t{0};
}

PeriodicSyncOptions::~PeriodicSyncOptions() {
  // @@protoc_insertion_point(destructor:content.PeriodicSyncOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PeriodicSyncOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PeriodicSyncOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PeriodicSyncOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:content.PeriodicSyncOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  min_interval_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PeriodicSyncOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 min_interval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_min_interval(&has_bits);
          min_interval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PeriodicSyncOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.PeriodicSyncOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 min_interval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_min_interval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.PeriodicSyncOptions)
  return target;
}

size_t PeriodicSyncOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.PeriodicSyncOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 min_interval = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_min_interval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeriodicSyncOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PeriodicSyncOptions*>(
      &from));
}

void PeriodicSyncOptions::MergeFrom(const PeriodicSyncOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.PeriodicSyncOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_min_interval()) {
    _internal_set_min_interval(from._internal_min_interval());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PeriodicSyncOptions::CopyFrom(const PeriodicSyncOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.PeriodicSyncOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeriodicSyncOptions::IsInitialized() const {
  return true;
}

void PeriodicSyncOptions::InternalSwap(PeriodicSyncOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_interval_, other->min_interval_);
}

std::string PeriodicSyncOptions::GetTypeName() const {
  return "content.PeriodicSyncOptions";
}


// ===================================================================

class BackgroundSyncRegistrationProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundSyncRegistrationProto>()._has_bits_);
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_num_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_delay_until(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::content::PeriodicSyncOptions& periodic_sync_options(const BackgroundSyncRegistrationProto* msg);
  static void set_has_periodic_sync_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_max_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

const ::content::PeriodicSyncOptions&
BackgroundSyncRegistrationProto::_Internal::periodic_sync_options(const BackgroundSyncRegistrationProto* msg) {
  return *msg->periodic_sync_options_;
}
BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.BackgroundSyncRegistrationProto)
}
BackgroundSyncRegistrationProto::BackgroundSyncRegistrationProto(const BackgroundSyncRegistrationProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(from._internal_tag(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_periodic_sync_options()) {
    periodic_sync_options_ = new ::content::PeriodicSyncOptions(*from.periodic_sync_options_);
  } else {
    periodic_sync_options_ = nullptr;
  }
  ::memcpy(&delay_until_, &from.delay_until_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_attempts_) -
    reinterpret_cast<char*>(&delay_until_)) + sizeof(max_attempts_));
  // @@protoc_insertion_point(copy_constructor:content.BackgroundSyncRegistrationProto)
}

inline void BackgroundSyncRegistrationProto::SharedCtor() {
tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&periodic_sync_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_attempts_) -
    reinterpret_cast<char*>(&periodic_sync_options_)) + sizeof(max_attempts_));
}

BackgroundSyncRegistrationProto::~BackgroundSyncRegistrationProto() {
  // @@protoc_insertion_point(destructor:content.BackgroundSyncRegistrationProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundSyncRegistrationProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.Destroy();
  if (this != internal_default_instance()) delete periodic_sync_options_;
}

void BackgroundSyncRegistrationProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundSyncRegistrationProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.BackgroundSyncRegistrationProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(periodic_sync_options_ != nullptr);
      periodic_sync_options_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&delay_until_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_attempts_) -
        reinterpret_cast<char*>(&delay_until_)) + sizeof(max_attempts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundSyncRegistrationProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 num_attempts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_attempts(&has_bits);
          num_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int64 delay_until = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_delay_until(&has_bits);
          delay_until_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_periodic_sync_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 max_attempts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_max_attempts(&has_bits);
          max_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundSyncRegistrationProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.BackgroundSyncRegistrationProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_tag(), target);
  }

  // required int32 num_attempts = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_attempts(), target);
  }

  // required int64 delay_until = 8;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_delay_until(), target);
  }

  // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::periodic_sync_options(this),
        _Internal::periodic_sync_options(this).GetCachedSize(), target, stream);
  }

  // optional int32 max_attempts = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_max_attempts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.BackgroundSyncRegistrationProto)
  return target;
}

size_t BackgroundSyncRegistrationProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:content.BackgroundSyncRegistrationProto)
  size_t total_size = 0;

  if (_internal_has_tag()) {
    // required string tag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  if (_internal_has_delay_until()) {
    // required int64 delay_until = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_delay_until());
  }

  if (_internal_has_num_attempts()) {
    // required int32 num_attempts = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_attempts());
  }

  return total_size;
}
size_t BackgroundSyncRegistrationProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.BackgroundSyncRegistrationProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string tag = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());

    // required int64 delay_until = 8;
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_delay_until());

    // required int32 num_attempts = 7;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_attempts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *periodic_sync_options_);
  }

  // optional int32 max_attempts = 10;
  if (cached_has_bits & 0x00000010u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_attempts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundSyncRegistrationProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundSyncRegistrationProto*>(
      &from));
}

void BackgroundSyncRegistrationProto::MergeFrom(const BackgroundSyncRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.BackgroundSyncRegistrationProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_periodic_sync_options()->::content::PeriodicSyncOptions::MergeFrom(from._internal_periodic_sync_options());
    }
    if (cached_has_bits & 0x00000004u) {
      delay_until_ = from.delay_until_;
    }
    if (cached_has_bits & 0x00000008u) {
      num_attempts_ = from.num_attempts_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_attempts_ = from.max_attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundSyncRegistrationProto::CopyFrom(const BackgroundSyncRegistrationProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.BackgroundSyncRegistrationProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundSyncRegistrationProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BackgroundSyncRegistrationProto::InternalSwap(BackgroundSyncRegistrationProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundSyncRegistrationProto, max_attempts_)
      + sizeof(BackgroundSyncRegistrationProto::max_attempts_)
      - PROTOBUF_FIELD_OFFSET(BackgroundSyncRegistrationProto, periodic_sync_options_)>(
          reinterpret_cast<char*>(&periodic_sync_options_),
          reinterpret_cast<char*>(&other->periodic_sync_options_));
}

std::string BackgroundSyncRegistrationProto::GetTypeName() const {
  return "content.BackgroundSyncRegistrationProto";
}


// ===================================================================

class BackgroundSyncRegistrationsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundSyncRegistrationsProto>()._has_bits_);
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  registration_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.BackgroundSyncRegistrationsProto)
}
BackgroundSyncRegistrationsProto::BackgroundSyncRegistrationsProto(const BackgroundSyncRegistrationsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      registration_(from.registration_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.BackgroundSyncRegistrationsProto)
}

inline void BackgroundSyncRegistrationsProto::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BackgroundSyncRegistrationsProto::~BackgroundSyncRegistrationsProto() {
  // @@protoc_insertion_point(destructor:content.BackgroundSyncRegistrationsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundSyncRegistrationsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.Destroy();
}

void BackgroundSyncRegistrationsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundSyncRegistrationsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.BackgroundSyncRegistrationsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registration_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    origin_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundSyncRegistrationsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content.BackgroundSyncRegistrationProto registration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_registration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // required string origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundSyncRegistrationsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.BackgroundSyncRegistrationsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_registration_size()); i < n; i++) {
    const auto& repfield = this->_internal_registration(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // required string origin = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_origin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.BackgroundSyncRegistrationsProto)
  return target;
}

size_t BackgroundSyncRegistrationsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.BackgroundSyncRegistrationsProto)
  size_t total_size = 0;

  // required string origin = 3;
  if (_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_origin());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  total_size += 1UL * this->_internal_registration_size();
  for (const auto& msg : this->registration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundSyncRegistrationsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundSyncRegistrationsProto*>(
      &from));
}

void BackgroundSyncRegistrationsProto::MergeFrom(const BackgroundSyncRegistrationsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.BackgroundSyncRegistrationsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  registration_.MergeFrom(from.registration_);
  if (from._internal_has_origin()) {
    _internal_set_origin(from._internal_origin());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundSyncRegistrationsProto::CopyFrom(const BackgroundSyncRegistrationsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.BackgroundSyncRegistrationsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundSyncRegistrationsProto::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(registration_))
    return false;
  return true;
}

void BackgroundSyncRegistrationsProto::InternalSwap(BackgroundSyncRegistrationsProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  registration_.InternalSwap(&other->registration_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
}

std::string BackgroundSyncRegistrationsProto::GetTypeName() const {
  return "content.BackgroundSyncRegistrationsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::PeriodicSyncOptions*
Arena::CreateMaybeMessage< ::content::PeriodicSyncOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::PeriodicSyncOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::content::BackgroundSyncRegistrationProto*
Arena::CreateMaybeMessage< ::content::BackgroundSyncRegistrationProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::BackgroundSyncRegistrationProto >(arena);
}
template<> PROTOBUF_NOINLINE ::content::BackgroundSyncRegistrationsProto*
Arena::CreateMaybeMessage< ::content::BackgroundSyncRegistrationsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::BackgroundSyncRegistrationsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
