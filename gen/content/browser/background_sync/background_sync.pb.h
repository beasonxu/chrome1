// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_sync.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_background_5fsync_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_background_5fsync_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_background_5fsync_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_background_5fsync_2eproto {
  static const uint32_t offsets[];
};
namespace content {
class BackgroundSyncRegistrationProto;
struct BackgroundSyncRegistrationProtoDefaultTypeInternal;
extern BackgroundSyncRegistrationProtoDefaultTypeInternal _BackgroundSyncRegistrationProto_default_instance_;
class BackgroundSyncRegistrationsProto;
struct BackgroundSyncRegistrationsProtoDefaultTypeInternal;
extern BackgroundSyncRegistrationsProtoDefaultTypeInternal _BackgroundSyncRegistrationsProto_default_instance_;
class PeriodicSyncOptions;
struct PeriodicSyncOptionsDefaultTypeInternal;
extern PeriodicSyncOptionsDefaultTypeInternal _PeriodicSyncOptions_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::BackgroundSyncRegistrationProto* Arena::CreateMaybeMessage<::content::BackgroundSyncRegistrationProto>(Arena*);
template<> ::content::BackgroundSyncRegistrationsProto* Arena::CreateMaybeMessage<::content::BackgroundSyncRegistrationsProto>(Arena*);
template<> ::content::PeriodicSyncOptions* Arena::CreateMaybeMessage<::content::PeriodicSyncOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

enum SyncNetworkState : int {
  NETWORK_STATE_ANY = 0,
  NETWORK_STATE_AVOID_CELLULAR = 1,
  NETWORK_STATE_ONLINE = 2
};
bool SyncNetworkState_IsValid(int value);
constexpr SyncNetworkState SyncNetworkState_MIN = NETWORK_STATE_ANY;
constexpr SyncNetworkState SyncNetworkState_MAX = NETWORK_STATE_ONLINE;
constexpr int SyncNetworkState_ARRAYSIZE = SyncNetworkState_MAX + 1;

const std::string& SyncNetworkState_Name(SyncNetworkState value);
template<typename T>
inline const std::string& SyncNetworkState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SyncNetworkState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SyncNetworkState_Name.");
  return SyncNetworkState_Name(static_cast<SyncNetworkState>(enum_t_value));
}
bool SyncNetworkState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SyncNetworkState* value);
// ===================================================================

class PeriodicSyncOptions final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.PeriodicSyncOptions) */ {
 public:
  inline PeriodicSyncOptions() : PeriodicSyncOptions(nullptr) {}
  ~PeriodicSyncOptions() override;
  explicit PROTOBUF_CONSTEXPR PeriodicSyncOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PeriodicSyncOptions(const PeriodicSyncOptions& from);
  PeriodicSyncOptions(PeriodicSyncOptions&& from) noexcept
    : PeriodicSyncOptions() {
    *this = ::std::move(from);
  }

  inline PeriodicSyncOptions& operator=(const PeriodicSyncOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeriodicSyncOptions& operator=(PeriodicSyncOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PeriodicSyncOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const PeriodicSyncOptions* internal_default_instance() {
    return reinterpret_cast<const PeriodicSyncOptions*>(
               &_PeriodicSyncOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PeriodicSyncOptions& a, PeriodicSyncOptions& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PeriodicSyncOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PeriodicSyncOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PeriodicSyncOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PeriodicSyncOptions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PeriodicSyncOptions& from);
  void MergeFrom(const PeriodicSyncOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PeriodicSyncOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.PeriodicSyncOptions";
  }
  protected:
  explicit PeriodicSyncOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinIntervalFieldNumber = 1,
  };
  // optional int64 min_interval = 1;
  bool has_min_interval() const;
  private:
  bool _internal_has_min_interval() const;
  public:
  void clear_min_interval();
  int64_t min_interval() const;
  void set_min_interval(int64_t value);
  private:
  int64_t _internal_min_interval() const;
  void _internal_set_min_interval(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.PeriodicSyncOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t min_interval_;
  friend struct ::TableStruct_background_5fsync_2eproto;
};
// -------------------------------------------------------------------

class BackgroundSyncRegistrationProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.BackgroundSyncRegistrationProto) */ {
 public:
  inline BackgroundSyncRegistrationProto() : BackgroundSyncRegistrationProto(nullptr) {}
  ~BackgroundSyncRegistrationProto() override;
  explicit PROTOBUF_CONSTEXPR BackgroundSyncRegistrationProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundSyncRegistrationProto(const BackgroundSyncRegistrationProto& from);
  BackgroundSyncRegistrationProto(BackgroundSyncRegistrationProto&& from) noexcept
    : BackgroundSyncRegistrationProto() {
    *this = ::std::move(from);
  }

  inline BackgroundSyncRegistrationProto& operator=(const BackgroundSyncRegistrationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundSyncRegistrationProto& operator=(BackgroundSyncRegistrationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundSyncRegistrationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundSyncRegistrationProto* internal_default_instance() {
    return reinterpret_cast<const BackgroundSyncRegistrationProto*>(
               &_BackgroundSyncRegistrationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackgroundSyncRegistrationProto& a, BackgroundSyncRegistrationProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundSyncRegistrationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundSyncRegistrationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundSyncRegistrationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundSyncRegistrationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundSyncRegistrationProto& from);
  void MergeFrom(const BackgroundSyncRegistrationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundSyncRegistrationProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.BackgroundSyncRegistrationProto";
  }
  protected:
  explicit BackgroundSyncRegistrationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 2,
    kPeriodicSyncOptionsFieldNumber = 9,
    kDelayUntilFieldNumber = 8,
    kNumAttemptsFieldNumber = 7,
    kMaxAttemptsFieldNumber = 10,
  };
  // required string tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const std::string& tag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* tag);
  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(const std::string& value);
  std::string* _internal_mutable_tag();
  public:

  // optional .content.PeriodicSyncOptions periodic_sync_options = 9;
  bool has_periodic_sync_options() const;
  private:
  bool _internal_has_periodic_sync_options() const;
  public:
  void clear_periodic_sync_options();
  const ::content::PeriodicSyncOptions& periodic_sync_options() const;
  PROTOBUF_NODISCARD ::content::PeriodicSyncOptions* release_periodic_sync_options();
  ::content::PeriodicSyncOptions* mutable_periodic_sync_options();
  void set_allocated_periodic_sync_options(::content::PeriodicSyncOptions* periodic_sync_options);
  private:
  const ::content::PeriodicSyncOptions& _internal_periodic_sync_options() const;
  ::content::PeriodicSyncOptions* _internal_mutable_periodic_sync_options();
  public:
  void unsafe_arena_set_allocated_periodic_sync_options(
      ::content::PeriodicSyncOptions* periodic_sync_options);
  ::content::PeriodicSyncOptions* unsafe_arena_release_periodic_sync_options();

  // required int64 delay_until = 8;
  bool has_delay_until() const;
  private:
  bool _internal_has_delay_until() const;
  public:
  void clear_delay_until();
  int64_t delay_until() const;
  void set_delay_until(int64_t value);
  private:
  int64_t _internal_delay_until() const;
  void _internal_set_delay_until(int64_t value);
  public:

  // required int32 num_attempts = 7;
  bool has_num_attempts() const;
  private:
  bool _internal_has_num_attempts() const;
  public:
  void clear_num_attempts();
  int32_t num_attempts() const;
  void set_num_attempts(int32_t value);
  private:
  int32_t _internal_num_attempts() const;
  void _internal_set_num_attempts(int32_t value);
  public:

  // optional int32 max_attempts = 10;
  bool has_max_attempts() const;
  private:
  bool _internal_has_max_attempts() const;
  public:
  void clear_max_attempts();
  int32_t max_attempts() const;
  void set_max_attempts(int32_t value);
  private:
  int32_t _internal_max_attempts() const;
  void _internal_set_max_attempts(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.BackgroundSyncRegistrationProto)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
  ::content::PeriodicSyncOptions* periodic_sync_options_;
  int64_t delay_until_;
  int32_t num_attempts_;
  int32_t max_attempts_;
  friend struct ::TableStruct_background_5fsync_2eproto;
};
// -------------------------------------------------------------------

class BackgroundSyncRegistrationsProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.BackgroundSyncRegistrationsProto) */ {
 public:
  inline BackgroundSyncRegistrationsProto() : BackgroundSyncRegistrationsProto(nullptr) {}
  ~BackgroundSyncRegistrationsProto() override;
  explicit PROTOBUF_CONSTEXPR BackgroundSyncRegistrationsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundSyncRegistrationsProto(const BackgroundSyncRegistrationsProto& from);
  BackgroundSyncRegistrationsProto(BackgroundSyncRegistrationsProto&& from) noexcept
    : BackgroundSyncRegistrationsProto() {
    *this = ::std::move(from);
  }

  inline BackgroundSyncRegistrationsProto& operator=(const BackgroundSyncRegistrationsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundSyncRegistrationsProto& operator=(BackgroundSyncRegistrationsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundSyncRegistrationsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundSyncRegistrationsProto* internal_default_instance() {
    return reinterpret_cast<const BackgroundSyncRegistrationsProto*>(
               &_BackgroundSyncRegistrationsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BackgroundSyncRegistrationsProto& a, BackgroundSyncRegistrationsProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundSyncRegistrationsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundSyncRegistrationsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundSyncRegistrationsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundSyncRegistrationsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundSyncRegistrationsProto& from);
  void MergeFrom(const BackgroundSyncRegistrationsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundSyncRegistrationsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.BackgroundSyncRegistrationsProto";
  }
  protected:
  explicit BackgroundSyncRegistrationsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegistrationFieldNumber = 1,
    kOriginFieldNumber = 3,
  };
  // repeated .content.BackgroundSyncRegistrationProto registration = 1;
  int registration_size() const;
  private:
  int _internal_registration_size() const;
  public:
  void clear_registration();
  ::content::BackgroundSyncRegistrationProto* mutable_registration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >*
      mutable_registration();
  private:
  const ::content::BackgroundSyncRegistrationProto& _internal_registration(int index) const;
  ::content::BackgroundSyncRegistrationProto* _internal_add_registration();
  public:
  const ::content::BackgroundSyncRegistrationProto& registration(int index) const;
  ::content::BackgroundSyncRegistrationProto* add_registration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >&
      registration() const;

  // required string origin = 3;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // @@protoc_insertion_point(class_scope:content.BackgroundSyncRegistrationsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto > registration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  friend struct ::TableStruct_background_5fsync_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PeriodicSyncOptions

// optional int64 min_interval = 1;
inline bool PeriodicSyncOptions::_internal_has_min_interval() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeriodicSyncOptions::has_min_interval() const {
  return _internal_has_min_interval();
}
inline void PeriodicSyncOptions::clear_min_interval() {
  min_interval_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t PeriodicSyncOptions::_internal_min_interval() const {
  return min_interval_;
}
inline int64_t PeriodicSyncOptions::min_interval() const {
  // @@protoc_insertion_point(field_get:content.PeriodicSyncOptions.min_interval)
  return _internal_min_interval();
}
inline void PeriodicSyncOptions::_internal_set_min_interval(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  min_interval_ = value;
}
inline void PeriodicSyncOptions::set_min_interval(int64_t value) {
  _internal_set_min_interval(value);
  // @@protoc_insertion_point(field_set:content.PeriodicSyncOptions.min_interval)
}

// -------------------------------------------------------------------

// BackgroundSyncRegistrationProto

// required string tag = 2;
inline bool BackgroundSyncRegistrationProto::_internal_has_tag() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BackgroundSyncRegistrationProto::has_tag() const {
  return _internal_has_tag();
}
inline void BackgroundSyncRegistrationProto::clear_tag() {
  tag_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundSyncRegistrationProto::tag() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.tag)
  return _internal_tag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackgroundSyncRegistrationProto::set_tag(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.tag)
}
inline std::string* BackgroundSyncRegistrationProto::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationProto.tag)
  return _s;
}
inline const std::string& BackgroundSyncRegistrationProto::_internal_tag() const {
  return tag_.Get();
}
inline void BackgroundSyncRegistrationProto::_internal_set_tag(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_.Set(value, GetArenaForAllocation());
}
inline std::string* BackgroundSyncRegistrationProto::_internal_mutable_tag() {
  _has_bits_[0] |= 0x00000001u;
  return tag_.Mutable(GetArenaForAllocation());
}
inline std::string* BackgroundSyncRegistrationProto::release_tag() {
  // @@protoc_insertion_point(field_release:content.BackgroundSyncRegistrationProto.tag)
  if (!_internal_has_tag()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BackgroundSyncRegistrationProto::set_allocated_tag(std::string* tag) {
  if (tag != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_.SetAllocated(tag, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_.IsDefault()) {
    tag_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.BackgroundSyncRegistrationProto.tag)
}

// required int32 num_attempts = 7;
inline bool BackgroundSyncRegistrationProto::_internal_has_num_attempts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BackgroundSyncRegistrationProto::has_num_attempts() const {
  return _internal_has_num_attempts();
}
inline void BackgroundSyncRegistrationProto::clear_num_attempts() {
  num_attempts_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t BackgroundSyncRegistrationProto::_internal_num_attempts() const {
  return num_attempts_;
}
inline int32_t BackgroundSyncRegistrationProto::num_attempts() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.num_attempts)
  return _internal_num_attempts();
}
inline void BackgroundSyncRegistrationProto::_internal_set_num_attempts(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  num_attempts_ = value;
}
inline void BackgroundSyncRegistrationProto::set_num_attempts(int32_t value) {
  _internal_set_num_attempts(value);
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.num_attempts)
}

// required int64 delay_until = 8;
inline bool BackgroundSyncRegistrationProto::_internal_has_delay_until() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BackgroundSyncRegistrationProto::has_delay_until() const {
  return _internal_has_delay_until();
}
inline void BackgroundSyncRegistrationProto::clear_delay_until() {
  delay_until_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t BackgroundSyncRegistrationProto::_internal_delay_until() const {
  return delay_until_;
}
inline int64_t BackgroundSyncRegistrationProto::delay_until() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.delay_until)
  return _internal_delay_until();
}
inline void BackgroundSyncRegistrationProto::_internal_set_delay_until(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  delay_until_ = value;
}
inline void BackgroundSyncRegistrationProto::set_delay_until(int64_t value) {
  _internal_set_delay_until(value);
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.delay_until)
}

// optional .content.PeriodicSyncOptions periodic_sync_options = 9;
inline bool BackgroundSyncRegistrationProto::_internal_has_periodic_sync_options() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || periodic_sync_options_ != nullptr);
  return value;
}
inline bool BackgroundSyncRegistrationProto::has_periodic_sync_options() const {
  return _internal_has_periodic_sync_options();
}
inline void BackgroundSyncRegistrationProto::clear_periodic_sync_options() {
  if (periodic_sync_options_ != nullptr) periodic_sync_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::content::PeriodicSyncOptions& BackgroundSyncRegistrationProto::_internal_periodic_sync_options() const {
  const ::content::PeriodicSyncOptions* p = periodic_sync_options_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::PeriodicSyncOptions&>(
      ::content::_PeriodicSyncOptions_default_instance_);
}
inline const ::content::PeriodicSyncOptions& BackgroundSyncRegistrationProto::periodic_sync_options() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.periodic_sync_options)
  return _internal_periodic_sync_options();
}
inline void BackgroundSyncRegistrationProto::unsafe_arena_set_allocated_periodic_sync_options(
    ::content::PeriodicSyncOptions* periodic_sync_options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(periodic_sync_options_);
  }
  periodic_sync_options_ = periodic_sync_options;
  if (periodic_sync_options) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.BackgroundSyncRegistrationProto.periodic_sync_options)
}
inline ::content::PeriodicSyncOptions* BackgroundSyncRegistrationProto::release_periodic_sync_options() {
  _has_bits_[0] &= ~0x00000002u;
  ::content::PeriodicSyncOptions* temp = periodic_sync_options_;
  periodic_sync_options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::PeriodicSyncOptions* BackgroundSyncRegistrationProto::unsafe_arena_release_periodic_sync_options() {
  // @@protoc_insertion_point(field_release:content.BackgroundSyncRegistrationProto.periodic_sync_options)
  _has_bits_[0] &= ~0x00000002u;
  ::content::PeriodicSyncOptions* temp = periodic_sync_options_;
  periodic_sync_options_ = nullptr;
  return temp;
}
inline ::content::PeriodicSyncOptions* BackgroundSyncRegistrationProto::_internal_mutable_periodic_sync_options() {
  _has_bits_[0] |= 0x00000002u;
  if (periodic_sync_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::PeriodicSyncOptions>(GetArenaForAllocation());
    periodic_sync_options_ = p;
  }
  return periodic_sync_options_;
}
inline ::content::PeriodicSyncOptions* BackgroundSyncRegistrationProto::mutable_periodic_sync_options() {
  ::content::PeriodicSyncOptions* _msg = _internal_mutable_periodic_sync_options();
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationProto.periodic_sync_options)
  return _msg;
}
inline void BackgroundSyncRegistrationProto::set_allocated_periodic_sync_options(::content::PeriodicSyncOptions* periodic_sync_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete periodic_sync_options_;
  }
  if (periodic_sync_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(periodic_sync_options);
    if (message_arena != submessage_arena) {
      periodic_sync_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, periodic_sync_options, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  periodic_sync_options_ = periodic_sync_options;
  // @@protoc_insertion_point(field_set_allocated:content.BackgroundSyncRegistrationProto.periodic_sync_options)
}

// optional int32 max_attempts = 10;
inline bool BackgroundSyncRegistrationProto::_internal_has_max_attempts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BackgroundSyncRegistrationProto::has_max_attempts() const {
  return _internal_has_max_attempts();
}
inline void BackgroundSyncRegistrationProto::clear_max_attempts() {
  max_attempts_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t BackgroundSyncRegistrationProto::_internal_max_attempts() const {
  return max_attempts_;
}
inline int32_t BackgroundSyncRegistrationProto::max_attempts() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationProto.max_attempts)
  return _internal_max_attempts();
}
inline void BackgroundSyncRegistrationProto::_internal_set_max_attempts(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  max_attempts_ = value;
}
inline void BackgroundSyncRegistrationProto::set_max_attempts(int32_t value) {
  _internal_set_max_attempts(value);
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationProto.max_attempts)
}

// -------------------------------------------------------------------

// BackgroundSyncRegistrationsProto

// repeated .content.BackgroundSyncRegistrationProto registration = 1;
inline int BackgroundSyncRegistrationsProto::_internal_registration_size() const {
  return registration_.size();
}
inline int BackgroundSyncRegistrationsProto::registration_size() const {
  return _internal_registration_size();
}
inline void BackgroundSyncRegistrationsProto::clear_registration() {
  registration_.Clear();
}
inline ::content::BackgroundSyncRegistrationProto* BackgroundSyncRegistrationsProto::mutable_registration(int index) {
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationsProto.registration)
  return registration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >*
BackgroundSyncRegistrationsProto::mutable_registration() {
  // @@protoc_insertion_point(field_mutable_list:content.BackgroundSyncRegistrationsProto.registration)
  return &registration_;
}
inline const ::content::BackgroundSyncRegistrationProto& BackgroundSyncRegistrationsProto::_internal_registration(int index) const {
  return registration_.Get(index);
}
inline const ::content::BackgroundSyncRegistrationProto& BackgroundSyncRegistrationsProto::registration(int index) const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationsProto.registration)
  return _internal_registration(index);
}
inline ::content::BackgroundSyncRegistrationProto* BackgroundSyncRegistrationsProto::_internal_add_registration() {
  return registration_.Add();
}
inline ::content::BackgroundSyncRegistrationProto* BackgroundSyncRegistrationsProto::add_registration() {
  ::content::BackgroundSyncRegistrationProto* _add = _internal_add_registration();
  // @@protoc_insertion_point(field_add:content.BackgroundSyncRegistrationsProto.registration)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::BackgroundSyncRegistrationProto >&
BackgroundSyncRegistrationsProto::registration() const {
  // @@protoc_insertion_point(field_list:content.BackgroundSyncRegistrationsProto.registration)
  return registration_;
}

// required string origin = 3;
inline bool BackgroundSyncRegistrationsProto::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BackgroundSyncRegistrationsProto::has_origin() const {
  return _internal_has_origin();
}
inline void BackgroundSyncRegistrationsProto::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundSyncRegistrationsProto::origin() const {
  // @@protoc_insertion_point(field_get:content.BackgroundSyncRegistrationsProto.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackgroundSyncRegistrationsProto::set_origin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.BackgroundSyncRegistrationsProto.origin)
}
inline std::string* BackgroundSyncRegistrationsProto::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:content.BackgroundSyncRegistrationsProto.origin)
  return _s;
}
inline const std::string& BackgroundSyncRegistrationsProto::_internal_origin() const {
  return origin_.Get();
}
inline void BackgroundSyncRegistrationsProto::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(value, GetArenaForAllocation());
}
inline std::string* BackgroundSyncRegistrationsProto::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  return origin_.Mutable(GetArenaForAllocation());
}
inline std::string* BackgroundSyncRegistrationsProto::release_origin() {
  // @@protoc_insertion_point(field_release:content.BackgroundSyncRegistrationsProto.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BackgroundSyncRegistrationsProto::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.BackgroundSyncRegistrationsProto.origin)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::SyncNetworkState> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_background_5fsync_2eproto
