// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: embedder_download_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_embedder_5fdownload_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_embedder_5fdownload_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_embedder_5fdownload_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_embedder_5fdownload_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace content {
namespace proto {
class EmbedderDownloadData;
struct EmbedderDownloadDataDefaultTypeInternal;
extern EmbedderDownloadDataDefaultTypeInternal _EmbedderDownloadData_default_instance_;
class StoragePartitionConfig;
struct StoragePartitionConfigDefaultTypeInternal;
extern StoragePartitionConfigDefaultTypeInternal _StoragePartitionConfig_default_instance_;
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::proto::EmbedderDownloadData* Arena::CreateMaybeMessage<::content::proto::EmbedderDownloadData>(Arena*);
template<> ::content::proto::StoragePartitionConfig* Arena::CreateMaybeMessage<::content::proto::StoragePartitionConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace proto {

enum StoragePartitionConfig_FallbackMode : int {
  StoragePartitionConfig_FallbackMode_kNone = 0,
  StoragePartitionConfig_FallbackMode_kPartitionOnDisk = 1,
  StoragePartitionConfig_FallbackMode_kPartitionInMemory = 2
};
bool StoragePartitionConfig_FallbackMode_IsValid(int value);
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig_FallbackMode_FallbackMode_MIN = StoragePartitionConfig_FallbackMode_kNone;
constexpr StoragePartitionConfig_FallbackMode StoragePartitionConfig_FallbackMode_FallbackMode_MAX = StoragePartitionConfig_FallbackMode_kPartitionInMemory;
constexpr int StoragePartitionConfig_FallbackMode_FallbackMode_ARRAYSIZE = StoragePartitionConfig_FallbackMode_FallbackMode_MAX + 1;

const std::string& StoragePartitionConfig_FallbackMode_Name(StoragePartitionConfig_FallbackMode value);
template<typename T>
inline const std::string& StoragePartitionConfig_FallbackMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, StoragePartitionConfig_FallbackMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function StoragePartitionConfig_FallbackMode_Name.");
  return StoragePartitionConfig_FallbackMode_Name(static_cast<StoragePartitionConfig_FallbackMode>(enum_t_value));
}
bool StoragePartitionConfig_FallbackMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoragePartitionConfig_FallbackMode* value);
// ===================================================================

class EmbedderDownloadData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.EmbedderDownloadData) */ {
 public:
  inline EmbedderDownloadData() : EmbedderDownloadData(nullptr) {}
  ~EmbedderDownloadData() override;
  explicit PROTOBUF_CONSTEXPR EmbedderDownloadData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EmbedderDownloadData(const EmbedderDownloadData& from);
  EmbedderDownloadData(EmbedderDownloadData&& from) noexcept
    : EmbedderDownloadData() {
    *this = ::std::move(from);
  }

  inline EmbedderDownloadData& operator=(const EmbedderDownloadData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmbedderDownloadData& operator=(EmbedderDownloadData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EmbedderDownloadData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EmbedderDownloadData* internal_default_instance() {
    return reinterpret_cast<const EmbedderDownloadData*>(
               &_EmbedderDownloadData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EmbedderDownloadData& a, EmbedderDownloadData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EmbedderDownloadData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmbedderDownloadData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EmbedderDownloadData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EmbedderDownloadData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EmbedderDownloadData& from);
  void MergeFrom(const EmbedderDownloadData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmbedderDownloadData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.EmbedderDownloadData";
  }
  protected:
  explicit EmbedderDownloadData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStoragePartitionConfigFieldNumber = 1,
  };
  // optional .content.proto.StoragePartitionConfig storage_partition_config = 1;
  bool has_storage_partition_config() const;
  private:
  bool _internal_has_storage_partition_config() const;
  public:
  void clear_storage_partition_config();
  const ::content::proto::StoragePartitionConfig& storage_partition_config() const;
  PROTOBUF_NODISCARD ::content::proto::StoragePartitionConfig* release_storage_partition_config();
  ::content::proto::StoragePartitionConfig* mutable_storage_partition_config();
  void set_allocated_storage_partition_config(::content::proto::StoragePartitionConfig* storage_partition_config);
  private:
  const ::content::proto::StoragePartitionConfig& _internal_storage_partition_config() const;
  ::content::proto::StoragePartitionConfig* _internal_mutable_storage_partition_config();
  public:
  void unsafe_arena_set_allocated_storage_partition_config(
      ::content::proto::StoragePartitionConfig* storage_partition_config);
  ::content::proto::StoragePartitionConfig* unsafe_arena_release_storage_partition_config();

  // @@protoc_insertion_point(class_scope:content.proto.EmbedderDownloadData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::content::proto::StoragePartitionConfig* storage_partition_config_;
  friend struct ::TableStruct_embedder_5fdownload_5fdata_2eproto;
};
// -------------------------------------------------------------------

class StoragePartitionConfig final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.proto.StoragePartitionConfig) */ {
 public:
  inline StoragePartitionConfig() : StoragePartitionConfig(nullptr) {}
  ~StoragePartitionConfig() override;
  explicit PROTOBUF_CONSTEXPR StoragePartitionConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoragePartitionConfig(const StoragePartitionConfig& from);
  StoragePartitionConfig(StoragePartitionConfig&& from) noexcept
    : StoragePartitionConfig() {
    *this = ::std::move(from);
  }

  inline StoragePartitionConfig& operator=(const StoragePartitionConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoragePartitionConfig& operator=(StoragePartitionConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StoragePartitionConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoragePartitionConfig* internal_default_instance() {
    return reinterpret_cast<const StoragePartitionConfig*>(
               &_StoragePartitionConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StoragePartitionConfig& a, StoragePartitionConfig& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StoragePartitionConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoragePartitionConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoragePartitionConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoragePartitionConfig>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StoragePartitionConfig& from);
  void MergeFrom(const StoragePartitionConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoragePartitionConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.proto.StoragePartitionConfig";
  }
  protected:
  explicit StoragePartitionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef StoragePartitionConfig_FallbackMode FallbackMode;
  static constexpr FallbackMode kNone =
    StoragePartitionConfig_FallbackMode_kNone;
  static constexpr FallbackMode kPartitionOnDisk =
    StoragePartitionConfig_FallbackMode_kPartitionOnDisk;
  static constexpr FallbackMode kPartitionInMemory =
    StoragePartitionConfig_FallbackMode_kPartitionInMemory;
  static inline bool FallbackMode_IsValid(int value) {
    return StoragePartitionConfig_FallbackMode_IsValid(value);
  }
  static constexpr FallbackMode FallbackMode_MIN =
    StoragePartitionConfig_FallbackMode_FallbackMode_MIN;
  static constexpr FallbackMode FallbackMode_MAX =
    StoragePartitionConfig_FallbackMode_FallbackMode_MAX;
  static constexpr int FallbackMode_ARRAYSIZE =
    StoragePartitionConfig_FallbackMode_FallbackMode_ARRAYSIZE;
  template<typename T>
  static inline const std::string& FallbackMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FallbackMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FallbackMode_Name.");
    return StoragePartitionConfig_FallbackMode_Name(enum_t_value);
  }
  static inline bool FallbackMode_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      FallbackMode* value) {
    return StoragePartitionConfig_FallbackMode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPartitionDomainFieldNumber = 1,
    kPartitionNameFieldNumber = 2,
    kInMemoryFieldNumber = 3,
    kFallbackModeFieldNumber = 4,
  };
  // required string partition_domain = 1;
  bool has_partition_domain() const;
  private:
  bool _internal_has_partition_domain() const;
  public:
  void clear_partition_domain();
  const std::string& partition_domain() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_domain(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_domain();
  PROTOBUF_NODISCARD std::string* release_partition_domain();
  void set_allocated_partition_domain(std::string* partition_domain);
  private:
  const std::string& _internal_partition_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_domain(const std::string& value);
  std::string* _internal_mutable_partition_domain();
  public:

  // required string partition_name = 2;
  bool has_partition_name() const;
  private:
  bool _internal_has_partition_name() const;
  public:
  void clear_partition_name();
  const std::string& partition_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_partition_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_partition_name();
  PROTOBUF_NODISCARD std::string* release_partition_name();
  void set_allocated_partition_name(std::string* partition_name);
  private:
  const std::string& _internal_partition_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_partition_name(const std::string& value);
  std::string* _internal_mutable_partition_name();
  public:

  // required bool in_memory = 3;
  bool has_in_memory() const;
  private:
  bool _internal_has_in_memory() const;
  public:
  void clear_in_memory();
  bool in_memory() const;
  void set_in_memory(bool value);
  private:
  bool _internal_in_memory() const;
  void _internal_set_in_memory(bool value);
  public:

  // required .content.proto.StoragePartitionConfig.FallbackMode fallback_mode = 4;
  bool has_fallback_mode() const;
  private:
  bool _internal_has_fallback_mode() const;
  public:
  void clear_fallback_mode();
  ::content::proto::StoragePartitionConfig_FallbackMode fallback_mode() const;
  void set_fallback_mode(::content::proto::StoragePartitionConfig_FallbackMode value);
  private:
  ::content::proto::StoragePartitionConfig_FallbackMode _internal_fallback_mode() const;
  void _internal_set_fallback_mode(::content::proto::StoragePartitionConfig_FallbackMode value);
  public:

  // @@protoc_insertion_point(class_scope:content.proto.StoragePartitionConfig)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_domain_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr partition_name_;
  bool in_memory_;
  int fallback_mode_;
  friend struct ::TableStruct_embedder_5fdownload_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EmbedderDownloadData

// optional .content.proto.StoragePartitionConfig storage_partition_config = 1;
inline bool EmbedderDownloadData::_internal_has_storage_partition_config() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || storage_partition_config_ != nullptr);
  return value;
}
inline bool EmbedderDownloadData::has_storage_partition_config() const {
  return _internal_has_storage_partition_config();
}
inline void EmbedderDownloadData::clear_storage_partition_config() {
  if (storage_partition_config_ != nullptr) storage_partition_config_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::content::proto::StoragePartitionConfig& EmbedderDownloadData::_internal_storage_partition_config() const {
  const ::content::proto::StoragePartitionConfig* p = storage_partition_config_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::proto::StoragePartitionConfig&>(
      ::content::proto::_StoragePartitionConfig_default_instance_);
}
inline const ::content::proto::StoragePartitionConfig& EmbedderDownloadData::storage_partition_config() const {
  // @@protoc_insertion_point(field_get:content.proto.EmbedderDownloadData.storage_partition_config)
  return _internal_storage_partition_config();
}
inline void EmbedderDownloadData::unsafe_arena_set_allocated_storage_partition_config(
    ::content::proto::StoragePartitionConfig* storage_partition_config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(storage_partition_config_);
  }
  storage_partition_config_ = storage_partition_config;
  if (storage_partition_config) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.proto.EmbedderDownloadData.storage_partition_config)
}
inline ::content::proto::StoragePartitionConfig* EmbedderDownloadData::release_storage_partition_config() {
  _has_bits_[0] &= ~0x00000001u;
  ::content::proto::StoragePartitionConfig* temp = storage_partition_config_;
  storage_partition_config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::proto::StoragePartitionConfig* EmbedderDownloadData::unsafe_arena_release_storage_partition_config() {
  // @@protoc_insertion_point(field_release:content.proto.EmbedderDownloadData.storage_partition_config)
  _has_bits_[0] &= ~0x00000001u;
  ::content::proto::StoragePartitionConfig* temp = storage_partition_config_;
  storage_partition_config_ = nullptr;
  return temp;
}
inline ::content::proto::StoragePartitionConfig* EmbedderDownloadData::_internal_mutable_storage_partition_config() {
  _has_bits_[0] |= 0x00000001u;
  if (storage_partition_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::proto::StoragePartitionConfig>(GetArenaForAllocation());
    storage_partition_config_ = p;
  }
  return storage_partition_config_;
}
inline ::content::proto::StoragePartitionConfig* EmbedderDownloadData::mutable_storage_partition_config() {
  ::content::proto::StoragePartitionConfig* _msg = _internal_mutable_storage_partition_config();
  // @@protoc_insertion_point(field_mutable:content.proto.EmbedderDownloadData.storage_partition_config)
  return _msg;
}
inline void EmbedderDownloadData::set_allocated_storage_partition_config(::content::proto::StoragePartitionConfig* storage_partition_config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete storage_partition_config_;
  }
  if (storage_partition_config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(storage_partition_config);
    if (message_arena != submessage_arena) {
      storage_partition_config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, storage_partition_config, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  storage_partition_config_ = storage_partition_config;
  // @@protoc_insertion_point(field_set_allocated:content.proto.EmbedderDownloadData.storage_partition_config)
}

// -------------------------------------------------------------------

// StoragePartitionConfig

// required string partition_domain = 1;
inline bool StoragePartitionConfig::_internal_has_partition_domain() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoragePartitionConfig::has_partition_domain() const {
  return _internal_has_partition_domain();
}
inline void StoragePartitionConfig::clear_partition_domain() {
  partition_domain_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoragePartitionConfig::partition_domain() const {
  // @@protoc_insertion_point(field_get:content.proto.StoragePartitionConfig.partition_domain)
  return _internal_partition_domain();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoragePartitionConfig::set_partition_domain(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 partition_domain_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.StoragePartitionConfig.partition_domain)
}
inline std::string* StoragePartitionConfig::mutable_partition_domain() {
  std::string* _s = _internal_mutable_partition_domain();
  // @@protoc_insertion_point(field_mutable:content.proto.StoragePartitionConfig.partition_domain)
  return _s;
}
inline const std::string& StoragePartitionConfig::_internal_partition_domain() const {
  return partition_domain_.Get();
}
inline void StoragePartitionConfig::_internal_set_partition_domain(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  partition_domain_.Set(value, GetArenaForAllocation());
}
inline std::string* StoragePartitionConfig::_internal_mutable_partition_domain() {
  _has_bits_[0] |= 0x00000001u;
  return partition_domain_.Mutable(GetArenaForAllocation());
}
inline std::string* StoragePartitionConfig::release_partition_domain() {
  // @@protoc_insertion_point(field_release:content.proto.StoragePartitionConfig.partition_domain)
  if (!_internal_has_partition_domain()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = partition_domain_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partition_domain_.IsDefault()) {
    partition_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoragePartitionConfig::set_allocated_partition_domain(std::string* partition_domain) {
  if (partition_domain != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  partition_domain_.SetAllocated(partition_domain, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partition_domain_.IsDefault()) {
    partition_domain_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.StoragePartitionConfig.partition_domain)
}

// required string partition_name = 2;
inline bool StoragePartitionConfig::_internal_has_partition_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoragePartitionConfig::has_partition_name() const {
  return _internal_has_partition_name();
}
inline void StoragePartitionConfig::clear_partition_name() {
  partition_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoragePartitionConfig::partition_name() const {
  // @@protoc_insertion_point(field_get:content.proto.StoragePartitionConfig.partition_name)
  return _internal_partition_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoragePartitionConfig::set_partition_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 partition_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.proto.StoragePartitionConfig.partition_name)
}
inline std::string* StoragePartitionConfig::mutable_partition_name() {
  std::string* _s = _internal_mutable_partition_name();
  // @@protoc_insertion_point(field_mutable:content.proto.StoragePartitionConfig.partition_name)
  return _s;
}
inline const std::string& StoragePartitionConfig::_internal_partition_name() const {
  return partition_name_.Get();
}
inline void StoragePartitionConfig::_internal_set_partition_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  partition_name_.Set(value, GetArenaForAllocation());
}
inline std::string* StoragePartitionConfig::_internal_mutable_partition_name() {
  _has_bits_[0] |= 0x00000002u;
  return partition_name_.Mutable(GetArenaForAllocation());
}
inline std::string* StoragePartitionConfig::release_partition_name() {
  // @@protoc_insertion_point(field_release:content.proto.StoragePartitionConfig.partition_name)
  if (!_internal_has_partition_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = partition_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partition_name_.IsDefault()) {
    partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoragePartitionConfig::set_allocated_partition_name(std::string* partition_name) {
  if (partition_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  partition_name_.SetAllocated(partition_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (partition_name_.IsDefault()) {
    partition_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.proto.StoragePartitionConfig.partition_name)
}

// required bool in_memory = 3;
inline bool StoragePartitionConfig::_internal_has_in_memory() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StoragePartitionConfig::has_in_memory() const {
  return _internal_has_in_memory();
}
inline void StoragePartitionConfig::clear_in_memory() {
  in_memory_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool StoragePartitionConfig::_internal_in_memory() const {
  return in_memory_;
}
inline bool StoragePartitionConfig::in_memory() const {
  // @@protoc_insertion_point(field_get:content.proto.StoragePartitionConfig.in_memory)
  return _internal_in_memory();
}
inline void StoragePartitionConfig::_internal_set_in_memory(bool value) {
  _has_bits_[0] |= 0x00000004u;
  in_memory_ = value;
}
inline void StoragePartitionConfig::set_in_memory(bool value) {
  _internal_set_in_memory(value);
  // @@protoc_insertion_point(field_set:content.proto.StoragePartitionConfig.in_memory)
}

// required .content.proto.StoragePartitionConfig.FallbackMode fallback_mode = 4;
inline bool StoragePartitionConfig::_internal_has_fallback_mode() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StoragePartitionConfig::has_fallback_mode() const {
  return _internal_has_fallback_mode();
}
inline void StoragePartitionConfig::clear_fallback_mode() {
  fallback_mode_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::content::proto::StoragePartitionConfig_FallbackMode StoragePartitionConfig::_internal_fallback_mode() const {
  return static_cast< ::content::proto::StoragePartitionConfig_FallbackMode >(fallback_mode_);
}
inline ::content::proto::StoragePartitionConfig_FallbackMode StoragePartitionConfig::fallback_mode() const {
  // @@protoc_insertion_point(field_get:content.proto.StoragePartitionConfig.fallback_mode)
  return _internal_fallback_mode();
}
inline void StoragePartitionConfig::_internal_set_fallback_mode(::content::proto::StoragePartitionConfig_FallbackMode value) {
  assert(::content::proto::StoragePartitionConfig_FallbackMode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  fallback_mode_ = value;
}
inline void StoragePartitionConfig::set_fallback_mode(::content::proto::StoragePartitionConfig_FallbackMode value) {
  _internal_set_fallback_mode(value);
  // @@protoc_insertion_point(field_set:content.proto.StoragePartitionConfig.fallback_mode)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::proto::StoragePartitionConfig_FallbackMode> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_embedder_5fdownload_5fdata_2eproto
