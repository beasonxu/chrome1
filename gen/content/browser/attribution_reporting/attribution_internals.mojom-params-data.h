// content/browser/attribution_reporting/attribution_internals.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_ATTRIBUTION_REPORTING_ATTRIBUTION_INTERNALS_MOJOM_PARAMS_DATA_H_
#define CONTENT_BROWSER_ATTRIBUTION_REPORTING_ATTRIBUTION_INTERNALS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace attribution_internals {
namespace mojom {
namespace internal {

class ValidationContext;
class  Observer_OnSourcesChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Observer_OnSourcesChanged_Params_Data>;

  Observer_OnSourcesChanged_Params_Data();
  ~Observer_OnSourcesChanged_Params_Data() = delete;
};
static_assert(sizeof(Observer_OnSourcesChanged_Params_Data) == 8,
              "Bad sizeof(Observer_OnSourcesChanged_Params_Data)");
class  Observer_OnReportsChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t report_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Observer_OnReportsChanged_Params_Data>;

  Observer_OnReportsChanged_Params_Data();
  ~Observer_OnReportsChanged_Params_Data() = delete;
};
static_assert(sizeof(Observer_OnReportsChanged_Params_Data) == 16,
              "Bad sizeof(Observer_OnReportsChanged_Params_Data)");
class  Observer_OnSourceRejectedOrDeactivated_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebUISource_Data> source;

 private:
  friend class mojo::internal::MessageFragment<Observer_OnSourceRejectedOrDeactivated_Params_Data>;

  Observer_OnSourceRejectedOrDeactivated_Params_Data();
  ~Observer_OnSourceRejectedOrDeactivated_Params_Data() = delete;
};
static_assert(sizeof(Observer_OnSourceRejectedOrDeactivated_Params_Data) == 16,
              "Bad sizeof(Observer_OnSourceRejectedOrDeactivated_Params_Data)");
class  Observer_OnReportSent_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebUIReport_Data> report;

 private:
  friend class mojo::internal::MessageFragment<Observer_OnReportSent_Params_Data>;

  Observer_OnReportSent_Params_Data();
  ~Observer_OnReportSent_Params_Data() = delete;
};
static_assert(sizeof(Observer_OnReportSent_Params_Data) == 16,
              "Bad sizeof(Observer_OnReportSent_Params_Data)");
class  Observer_OnReportDropped_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebUIReport_Data> report;

 private:
  friend class mojo::internal::MessageFragment<Observer_OnReportDropped_Params_Data>;

  Observer_OnReportDropped_Params_Data();
  ~Observer_OnReportDropped_Params_Data() = delete;
};
static_assert(sizeof(Observer_OnReportDropped_Params_Data) == 16,
              "Bad sizeof(Observer_OnReportDropped_Params_Data)");
class  Observer_OnTriggerHandled_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebUITrigger_Data> trigger;

 private:
  friend class mojo::internal::MessageFragment<Observer_OnTriggerHandled_Params_Data>;

  Observer_OnTriggerHandled_Params_Data();
  ~Observer_OnTriggerHandled_Params_Data() = delete;
};
static_assert(sizeof(Observer_OnTriggerHandled_Params_Data) == 16,
              "Bad sizeof(Observer_OnTriggerHandled_Params_Data)");
class  Handler_IsAttributionReportingEnabled_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Handler_IsAttributionReportingEnabled_Params_Data>;

  Handler_IsAttributionReportingEnabled_Params_Data();
  ~Handler_IsAttributionReportingEnabled_Params_Data() = delete;
};
static_assert(sizeof(Handler_IsAttributionReportingEnabled_Params_Data) == 8,
              "Bad sizeof(Handler_IsAttributionReportingEnabled_Params_Data)");
class  Handler_IsAttributionReportingEnabled_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t enabled : 1;
  uint8_t debug_mode : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<Handler_IsAttributionReportingEnabled_ResponseParams_Data>;

  Handler_IsAttributionReportingEnabled_ResponseParams_Data();
  ~Handler_IsAttributionReportingEnabled_ResponseParams_Data() = delete;
};
static_assert(sizeof(Handler_IsAttributionReportingEnabled_ResponseParams_Data) == 16,
              "Bad sizeof(Handler_IsAttributionReportingEnabled_ResponseParams_Data)");
class  Handler_GetActiveSources_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Handler_GetActiveSources_Params_Data>;

  Handler_GetActiveSources_Params_Data();
  ~Handler_GetActiveSources_Params_Data() = delete;
};
static_assert(sizeof(Handler_GetActiveSources_Params_Data) == 8,
              "Bad sizeof(Handler_GetActiveSources_Params_Data)");
class  Handler_GetActiveSources_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebUISource_Data>>> sources;

 private:
  friend class mojo::internal::MessageFragment<Handler_GetActiveSources_ResponseParams_Data>;

  Handler_GetActiveSources_ResponseParams_Data();
  ~Handler_GetActiveSources_ResponseParams_Data() = delete;
};
static_assert(sizeof(Handler_GetActiveSources_ResponseParams_Data) == 16,
              "Bad sizeof(Handler_GetActiveSources_ResponseParams_Data)");
class  Handler_GetReports_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t report_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Handler_GetReports_Params_Data>;

  Handler_GetReports_Params_Data();
  ~Handler_GetReports_Params_Data() = delete;
};
static_assert(sizeof(Handler_GetReports_Params_Data) == 16,
              "Bad sizeof(Handler_GetReports_Params_Data)");
class  Handler_GetReports_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebUIReport_Data>>> reports;

 private:
  friend class mojo::internal::MessageFragment<Handler_GetReports_ResponseParams_Data>;

  Handler_GetReports_ResponseParams_Data();
  ~Handler_GetReports_ResponseParams_Data() = delete;
};
static_assert(sizeof(Handler_GetReports_ResponseParams_Data) == 16,
              "Bad sizeof(Handler_GetReports_ResponseParams_Data)");
class  Handler_SendReports_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<internal::ReportID_Data>> ids;

 private:
  friend class mojo::internal::MessageFragment<Handler_SendReports_Params_Data>;

  Handler_SendReports_Params_Data();
  ~Handler_SendReports_Params_Data() = delete;
};
static_assert(sizeof(Handler_SendReports_Params_Data) == 16,
              "Bad sizeof(Handler_SendReports_Params_Data)");
class  Handler_SendReports_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Handler_SendReports_ResponseParams_Data>;

  Handler_SendReports_ResponseParams_Data();
  ~Handler_SendReports_ResponseParams_Data() = delete;
};
static_assert(sizeof(Handler_SendReports_ResponseParams_Data) == 8,
              "Bad sizeof(Handler_SendReports_ResponseParams_Data)");
class  Handler_ClearStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Handler_ClearStorage_Params_Data>;

  Handler_ClearStorage_Params_Data();
  ~Handler_ClearStorage_Params_Data() = delete;
};
static_assert(sizeof(Handler_ClearStorage_Params_Data) == 8,
              "Bad sizeof(Handler_ClearStorage_Params_Data)");
class  Handler_ClearStorage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Handler_ClearStorage_ResponseParams_Data>;

  Handler_ClearStorage_ResponseParams_Data();
  ~Handler_ClearStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(Handler_ClearStorage_ResponseParams_Data) == 8,
              "Bad sizeof(Handler_ClearStorage_ResponseParams_Data)");
class  Handler_AddObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  friend class mojo::internal::MessageFragment<Handler_AddObserver_Params_Data>;

  Handler_AddObserver_Params_Data();
  ~Handler_AddObserver_Params_Data() = delete;
};
static_assert(sizeof(Handler_AddObserver_Params_Data) == 16,
              "Bad sizeof(Handler_AddObserver_Params_Data)");
class  Handler_AddObserver_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<Handler_AddObserver_ResponseParams_Data>;

  Handler_AddObserver_ResponseParams_Data();
  ~Handler_AddObserver_ResponseParams_Data() = delete;
};
static_assert(sizeof(Handler_AddObserver_ResponseParams_Data) == 16,
              "Bad sizeof(Handler_AddObserver_ResponseParams_Data)");

}  // namespace internal


class Observer_OnSourcesChanged_ParamsDataView {
 public:
  Observer_OnSourcesChanged_ParamsDataView() = default;

  Observer_OnSourcesChanged_ParamsDataView(
      internal::Observer_OnSourcesChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Observer_OnSourcesChanged_Params_Data* data_ = nullptr;
};



class Observer_OnReportsChanged_ParamsDataView {
 public:
  Observer_OnReportsChanged_ParamsDataView() = default;

  Observer_OnReportsChanged_ParamsDataView(
      internal::Observer_OnReportsChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReportType(UserType* output) const {
    auto data_value = data_->report_type;
    return mojo::internal::Deserialize<::attribution_internals::mojom::ReportType>(
        data_value, output);
  }
  ReportType report_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::attribution_internals::mojom::ReportType>(data_->report_type));
  }
 private:
  internal::Observer_OnReportsChanged_Params_Data* data_ = nullptr;
};



class Observer_OnSourceRejectedOrDeactivated_ParamsDataView {
 public:
  Observer_OnSourceRejectedOrDeactivated_ParamsDataView() = default;

  Observer_OnSourceRejectedOrDeactivated_ParamsDataView(
      internal::Observer_OnSourceRejectedOrDeactivated_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSourceDataView(
      WebUISourceDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSource(UserType* output) {
    
    auto* pointer = data_->source.Get();
    return mojo::internal::Deserialize<::attribution_internals::mojom::WebUISourceDataView>(
        pointer, output, message_);
  }
 private:
  internal::Observer_OnSourceRejectedOrDeactivated_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Observer_OnReportSent_ParamsDataView {
 public:
  Observer_OnReportSent_ParamsDataView() = default;

  Observer_OnReportSent_ParamsDataView(
      internal::Observer_OnReportSent_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportDataView(
      WebUIReportDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReport(UserType* output) {
    
    auto* pointer = data_->report.Get();
    return mojo::internal::Deserialize<::attribution_internals::mojom::WebUIReportDataView>(
        pointer, output, message_);
  }
 private:
  internal::Observer_OnReportSent_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Observer_OnReportDropped_ParamsDataView {
 public:
  Observer_OnReportDropped_ParamsDataView() = default;

  Observer_OnReportDropped_ParamsDataView(
      internal::Observer_OnReportDropped_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportDataView(
      WebUIReportDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReport(UserType* output) {
    
    auto* pointer = data_->report.Get();
    return mojo::internal::Deserialize<::attribution_internals::mojom::WebUIReportDataView>(
        pointer, output, message_);
  }
 private:
  internal::Observer_OnReportDropped_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Observer_OnTriggerHandled_ParamsDataView {
 public:
  Observer_OnTriggerHandled_ParamsDataView() = default;

  Observer_OnTriggerHandled_ParamsDataView(
      internal::Observer_OnTriggerHandled_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTriggerDataView(
      WebUITriggerDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrigger(UserType* output) {
    
    auto* pointer = data_->trigger.Get();
    return mojo::internal::Deserialize<::attribution_internals::mojom::WebUITriggerDataView>(
        pointer, output, message_);
  }
 private:
  internal::Observer_OnTriggerHandled_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Handler_IsAttributionReportingEnabled_ParamsDataView {
 public:
  Handler_IsAttributionReportingEnabled_ParamsDataView() = default;

  Handler_IsAttributionReportingEnabled_ParamsDataView(
      internal::Handler_IsAttributionReportingEnabled_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Handler_IsAttributionReportingEnabled_Params_Data* data_ = nullptr;
};



class Handler_IsAttributionReportingEnabled_ResponseParamsDataView {
 public:
  Handler_IsAttributionReportingEnabled_ResponseParamsDataView() = default;

  Handler_IsAttributionReportingEnabled_ResponseParamsDataView(
      internal::Handler_IsAttributionReportingEnabled_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool enabled() const {
    return data_->enabled;
  }
  bool debug_mode() const {
    return data_->debug_mode;
  }
 private:
  internal::Handler_IsAttributionReportingEnabled_ResponseParams_Data* data_ = nullptr;
};



class Handler_GetActiveSources_ParamsDataView {
 public:
  Handler_GetActiveSources_ParamsDataView() = default;

  Handler_GetActiveSources_ParamsDataView(
      internal::Handler_GetActiveSources_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Handler_GetActiveSources_Params_Data* data_ = nullptr;
};



class Handler_GetActiveSources_ResponseParamsDataView {
 public:
  Handler_GetActiveSources_ResponseParamsDataView() = default;

  Handler_GetActiveSources_ResponseParamsDataView(
      internal::Handler_GetActiveSources_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSourcesDataView(
      mojo::ArrayDataView<WebUISourceDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSources(UserType* output) {
    
    auto* pointer = data_->sources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::attribution_internals::mojom::WebUISourceDataView>>(
        pointer, output, message_);
  }
 private:
  internal::Handler_GetActiveSources_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Handler_GetReports_ParamsDataView {
 public:
  Handler_GetReports_ParamsDataView() = default;

  Handler_GetReports_ParamsDataView(
      internal::Handler_GetReports_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReportType(UserType* output) const {
    auto data_value = data_->report_type;
    return mojo::internal::Deserialize<::attribution_internals::mojom::ReportType>(
        data_value, output);
  }
  ReportType report_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::attribution_internals::mojom::ReportType>(data_->report_type));
  }
 private:
  internal::Handler_GetReports_Params_Data* data_ = nullptr;
};



class Handler_GetReports_ResponseParamsDataView {
 public:
  Handler_GetReports_ResponseParamsDataView() = default;

  Handler_GetReports_ResponseParamsDataView(
      internal::Handler_GetReports_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReportsDataView(
      mojo::ArrayDataView<WebUIReportDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReports(UserType* output) {
    
    auto* pointer = data_->reports.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::attribution_internals::mojom::WebUIReportDataView>>(
        pointer, output, message_);
  }
 private:
  internal::Handler_GetReports_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Handler_SendReports_ParamsDataView {
 public:
  Handler_SendReports_ParamsDataView() = default;

  Handler_SendReports_ParamsDataView(
      internal::Handler_SendReports_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdsDataView(
      mojo::ArrayDataView<ReportIDDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIds(UserType* output) {
    
    auto* pointer = data_->ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::attribution_internals::mojom::ReportIDDataView>>(
        pointer, output, message_);
  }
 private:
  internal::Handler_SendReports_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Handler_SendReports_ResponseParamsDataView {
 public:
  Handler_SendReports_ResponseParamsDataView() = default;

  Handler_SendReports_ResponseParamsDataView(
      internal::Handler_SendReports_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Handler_SendReports_ResponseParams_Data* data_ = nullptr;
};



class Handler_ClearStorage_ParamsDataView {
 public:
  Handler_ClearStorage_ParamsDataView() = default;

  Handler_ClearStorage_ParamsDataView(
      internal::Handler_ClearStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Handler_ClearStorage_Params_Data* data_ = nullptr;
};



class Handler_ClearStorage_ResponseParamsDataView {
 public:
  Handler_ClearStorage_ResponseParamsDataView() = default;

  Handler_ClearStorage_ResponseParamsDataView(
      internal::Handler_ClearStorage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Handler_ClearStorage_ResponseParams_Data* data_ = nullptr;
};



class Handler_AddObserver_ParamsDataView {
 public:
  Handler_AddObserver_ParamsDataView() = default;

  Handler_AddObserver_ParamsDataView(
      internal::Handler_AddObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::attribution_internals::mojom::ObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Handler_AddObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Handler_AddObserver_ResponseParamsDataView {
 public:
  Handler_AddObserver_ResponseParamsDataView() = default;

  Handler_AddObserver_ResponseParamsDataView(
      internal::Handler_AddObserver_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::Handler_AddObserver_ResponseParams_Data* data_ = nullptr;
};






inline void Observer_OnSourceRejectedOrDeactivated_ParamsDataView::GetSourceDataView(
    WebUISourceDataView* output) {
  auto pointer = data_->source.Get();
  *output = WebUISourceDataView(pointer, message_);
}


inline void Observer_OnReportSent_ParamsDataView::GetReportDataView(
    WebUIReportDataView* output) {
  auto pointer = data_->report.Get();
  *output = WebUIReportDataView(pointer, message_);
}


inline void Observer_OnReportDropped_ParamsDataView::GetReportDataView(
    WebUIReportDataView* output) {
  auto pointer = data_->report.Get();
  *output = WebUIReportDataView(pointer, message_);
}


inline void Observer_OnTriggerHandled_ParamsDataView::GetTriggerDataView(
    WebUITriggerDataView* output) {
  auto pointer = data_->trigger.Get();
  *output = WebUITriggerDataView(pointer, message_);
}








inline void Handler_GetActiveSources_ResponseParamsDataView::GetSourcesDataView(
    mojo::ArrayDataView<WebUISourceDataView>* output) {
  auto pointer = data_->sources.Get();
  *output = mojo::ArrayDataView<WebUISourceDataView>(pointer, message_);
}




inline void Handler_GetReports_ResponseParamsDataView::GetReportsDataView(
    mojo::ArrayDataView<WebUIReportDataView>* output) {
  auto pointer = data_->reports.Get();
  *output = mojo::ArrayDataView<WebUIReportDataView>(pointer, message_);
}


inline void Handler_SendReports_ParamsDataView::GetIdsDataView(
    mojo::ArrayDataView<ReportIDDataView>* output) {
  auto pointer = data_->ids.Get();
  *output = mojo::ArrayDataView<ReportIDDataView>(pointer, message_);
}











}  // namespace mojom
}  // namespace attribution_internals

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CONTENT_BROWSER_ATTRIBUTION_REPORTING_ATTRIBUTION_INTERNALS_MOJOM_PARAMS_DATA_H_