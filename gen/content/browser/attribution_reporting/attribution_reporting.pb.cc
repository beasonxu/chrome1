// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: attribution_reporting.proto

#include "attribution_reporting.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR AttributionAggregationKey::AttributionAggregationKey(
    ::_pbi::ConstantInitialized)
  : high_bits_(uint64_t{0u})
  , low_bits_(uint64_t{0u}){}
struct AttributionAggregationKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionAggregationKeyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionAggregationKeyDefaultTypeInternal() {}
  union {
    AttributionAggregationKey _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionAggregationKeyDefaultTypeInternal _AttributionAggregationKey_default_instance_;
PROTOBUF_CONSTEXPR AttributionAggregatableSource_KeysEntry_DoNotUse::AttributionAggregatableSource_KeysEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributionAggregatableSource_KeysEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionAggregatableSource_KeysEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionAggregatableSource_KeysEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributionAggregatableSource_KeysEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionAggregatableSource_KeysEntry_DoNotUseDefaultTypeInternal _AttributionAggregatableSource_KeysEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributionAggregatableSource::AttributionAggregatableSource(
    ::_pbi::ConstantInitialized)
  : keys_(){}
struct AttributionAggregatableSourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionAggregatableSourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionAggregatableSourceDefaultTypeInternal() {}
  union {
    AttributionAggregatableSource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionAggregatableSourceDefaultTypeInternal _AttributionAggregatableSource_default_instance_;
PROTOBUF_CONSTEXPR AttributionFilterValues::AttributionFilterValues(
    ::_pbi::ConstantInitialized)
  : values_(){}
struct AttributionFilterValuesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionFilterValuesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionFilterValuesDefaultTypeInternal() {}
  union {
    AttributionFilterValues _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionFilterValuesDefaultTypeInternal _AttributionFilterValues_default_instance_;
PROTOBUF_CONSTEXPR AttributionFilterData_FilterValuesEntry_DoNotUse::AttributionFilterData_FilterValuesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AttributionFilterData_FilterValuesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionFilterData_FilterValuesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionFilterData_FilterValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AttributionFilterData_FilterValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionFilterData_FilterValuesEntry_DoNotUseDefaultTypeInternal _AttributionFilterData_FilterValuesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AttributionFilterData::AttributionFilterData(
    ::_pbi::ConstantInitialized)
  : filter_values_(){}
struct AttributionFilterDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttributionFilterDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttributionFilterDataDefaultTypeInternal() {}
  union {
    AttributionFilterData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttributionFilterDataDefaultTypeInternal _AttributionFilterData_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {

// ===================================================================

class AttributionAggregationKey::_Internal {
 public:
  using HasBits = decltype(std::declval<AttributionAggregationKey>()._has_bits_);
  static void set_has_high_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_low_bits(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AttributionAggregationKey::AttributionAggregationKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AttributionAggregationKey)
}
AttributionAggregationKey::AttributionAggregationKey(const AttributionAggregationKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&high_bits_, &from.high_bits_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_bits_) -
    reinterpret_cast<char*>(&high_bits_)) + sizeof(low_bits_));
  // @@protoc_insertion_point(copy_constructor:content.proto.AttributionAggregationKey)
}

inline void AttributionAggregationKey::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&high_bits_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_bits_) -
    reinterpret_cast<char*>(&high_bits_)) + sizeof(low_bits_));
}

AttributionAggregationKey::~AttributionAggregationKey() {
  // @@protoc_insertion_point(destructor:content.proto.AttributionAggregationKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributionAggregationKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AttributionAggregationKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributionAggregationKey::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AttributionAggregationKey)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&high_bits_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&low_bits_) -
        reinterpret_cast<char*>(&high_bits_)) + sizeof(low_bits_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AttributionAggregationKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 high_bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_high_bits(&has_bits);
          high_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 low_bits = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_low_bits(&has_bits);
          low_bits_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributionAggregationKey::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AttributionAggregationKey)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 high_bits = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_high_bits(), target);
  }

  // optional uint64 low_bits = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_low_bits(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AttributionAggregationKey)
  return target;
}

size_t AttributionAggregationKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AttributionAggregationKey)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 high_bits = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_high_bits());
    }

    // optional uint64 low_bits = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_low_bits());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributionAggregationKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AttributionAggregationKey*>(
      &from));
}

void AttributionAggregationKey::MergeFrom(const AttributionAggregationKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AttributionAggregationKey)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      high_bits_ = from.high_bits_;
    }
    if (cached_has_bits & 0x00000002u) {
      low_bits_ = from.low_bits_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AttributionAggregationKey::CopyFrom(const AttributionAggregationKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AttributionAggregationKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributionAggregationKey::IsInitialized() const {
  return true;
}

void AttributionAggregationKey::InternalSwap(AttributionAggregationKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AttributionAggregationKey, low_bits_)
      + sizeof(AttributionAggregationKey::low_bits_)
      - PROTOBUF_FIELD_OFFSET(AttributionAggregationKey, high_bits_)>(
          reinterpret_cast<char*>(&high_bits_),
          reinterpret_cast<char*>(&other->high_bits_));
}

std::string AttributionAggregationKey::GetTypeName() const {
  return "content.proto.AttributionAggregationKey";
}


// ===================================================================

AttributionAggregatableSource_KeysEntry_DoNotUse::AttributionAggregatableSource_KeysEntry_DoNotUse() {}
AttributionAggregatableSource_KeysEntry_DoNotUse::AttributionAggregatableSource_KeysEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributionAggregatableSource_KeysEntry_DoNotUse::MergeFrom(const AttributionAggregatableSource_KeysEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class AttributionAggregatableSource::_Internal {
 public:
};

AttributionAggregatableSource::AttributionAggregatableSource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  keys_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AttributionAggregatableSource)
}
AttributionAggregatableSource::AttributionAggregatableSource(const AttributionAggregatableSource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  keys_.MergeFrom(from.keys_);
  // @@protoc_insertion_point(copy_constructor:content.proto.AttributionAggregatableSource)
}

inline void AttributionAggregatableSource::SharedCtor() {
}

AttributionAggregatableSource::~AttributionAggregatableSource() {
  // @@protoc_insertion_point(destructor:content.proto.AttributionAggregatableSource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributionAggregatableSource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  keys_.Destruct();
}

void AttributionAggregatableSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributionAggregatableSource::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AttributionAggregatableSource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AttributionAggregatableSource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .content.proto.AttributionAggregationKey> keys = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&keys_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributionAggregatableSource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AttributionAggregatableSource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .content.proto.AttributionAggregationKey> keys = 1;
  if (!this->_internal_keys().empty()) {
    using MapType = ::_pb::Map<std::string, ::content::proto::AttributionAggregationKey>;
    using WireHelper = AttributionAggregatableSource_KeysEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_keys();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AttributionAggregatableSource)
  return target;
}

size_t AttributionAggregatableSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AttributionAggregatableSource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .content.proto.AttributionAggregationKey> keys = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_keys_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionAggregationKey >::const_iterator
      it = this->_internal_keys().begin();
      it != this->_internal_keys().end(); ++it) {
    total_size += AttributionAggregatableSource_KeysEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributionAggregatableSource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AttributionAggregatableSource*>(
      &from));
}

void AttributionAggregatableSource::MergeFrom(const AttributionAggregatableSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AttributionAggregatableSource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AttributionAggregatableSource::CopyFrom(const AttributionAggregatableSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AttributionAggregatableSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributionAggregatableSource::IsInitialized() const {
  return true;
}

void AttributionAggregatableSource::InternalSwap(AttributionAggregatableSource* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  keys_.InternalSwap(&other->keys_);
}

std::string AttributionAggregatableSource::GetTypeName() const {
  return "content.proto.AttributionAggregatableSource";
}


// ===================================================================

class AttributionFilterValues::_Internal {
 public:
};

AttributionFilterValues::AttributionFilterValues(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AttributionFilterValues)
}
AttributionFilterValues::AttributionFilterValues(const AttributionFilterValues& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.proto.AttributionFilterValues)
}

inline void AttributionFilterValues::SharedCtor() {
}

AttributionFilterValues::~AttributionFilterValues() {
  // @@protoc_insertion_point(destructor:content.proto.AttributionFilterValues)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributionFilterValues::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AttributionFilterValues::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributionFilterValues::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AttributionFilterValues)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AttributionFilterValues::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributionFilterValues::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AttributionFilterValues)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AttributionFilterValues)
  return target;
}

size_t AttributionFilterValues::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AttributionFilterValues)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(values_.size());
  for (int i = 0, n = values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      values_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributionFilterValues::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AttributionFilterValues*>(
      &from));
}

void AttributionFilterValues::MergeFrom(const AttributionFilterValues& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AttributionFilterValues)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AttributionFilterValues::CopyFrom(const AttributionFilterValues& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AttributionFilterValues)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributionFilterValues::IsInitialized() const {
  return true;
}

void AttributionFilterValues::InternalSwap(AttributionFilterValues* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string AttributionFilterValues::GetTypeName() const {
  return "content.proto.AttributionFilterValues";
}


// ===================================================================

AttributionFilterData_FilterValuesEntry_DoNotUse::AttributionFilterData_FilterValuesEntry_DoNotUse() {}
AttributionFilterData_FilterValuesEntry_DoNotUse::AttributionFilterData_FilterValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AttributionFilterData_FilterValuesEntry_DoNotUse::MergeFrom(const AttributionFilterData_FilterValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class AttributionFilterData::_Internal {
 public:
};

AttributionFilterData::AttributionFilterData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  filter_values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.AttributionFilterData)
}
AttributionFilterData::AttributionFilterData(const AttributionFilterData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  filter_values_.MergeFrom(from.filter_values_);
  // @@protoc_insertion_point(copy_constructor:content.proto.AttributionFilterData)
}

inline void AttributionFilterData::SharedCtor() {
}

AttributionFilterData::~AttributionFilterData() {
  // @@protoc_insertion_point(destructor:content.proto.AttributionFilterData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttributionFilterData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filter_values_.Destruct();
}

void AttributionFilterData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AttributionFilterData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.AttributionFilterData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filter_values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AttributionFilterData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .content.proto.AttributionFilterValues> filter_values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&filter_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttributionFilterData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.AttributionFilterData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .content.proto.AttributionFilterValues> filter_values = 1;
  if (!this->_internal_filter_values().empty()) {
    using MapType = ::_pb::Map<std::string, ::content::proto::AttributionFilterValues>;
    using WireHelper = AttributionFilterData_FilterValuesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_filter_values();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.AttributionFilterData)
  return target;
}

size_t AttributionFilterData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.AttributionFilterData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .content.proto.AttributionFilterValues> filter_values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_filter_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::content::proto::AttributionFilterValues >::const_iterator
      it = this->_internal_filter_values().begin();
      it != this->_internal_filter_values().end(); ++it) {
    total_size += AttributionFilterData_FilterValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AttributionFilterData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AttributionFilterData*>(
      &from));
}

void AttributionFilterData::MergeFrom(const AttributionFilterData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.AttributionFilterData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filter_values_.MergeFrom(from.filter_values_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AttributionFilterData::CopyFrom(const AttributionFilterData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.AttributionFilterData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttributionFilterData::IsInitialized() const {
  return true;
}

void AttributionFilterData::InternalSwap(AttributionFilterData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filter_values_.InternalSwap(&other->filter_values_);
}

std::string AttributionFilterData::GetTypeName() const {
  return "content.proto.AttributionFilterData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::AttributionAggregationKey*
Arena::CreateMaybeMessage< ::content::proto::AttributionAggregationKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AttributionAggregationKey >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AttributionAggregatableSource_KeysEntry_DoNotUse*
Arena::CreateMaybeMessage< ::content::proto::AttributionAggregatableSource_KeysEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AttributionAggregatableSource_KeysEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AttributionAggregatableSource*
Arena::CreateMaybeMessage< ::content::proto::AttributionAggregatableSource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AttributionAggregatableSource >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AttributionFilterValues*
Arena::CreateMaybeMessage< ::content::proto::AttributionFilterValues >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AttributionFilterValues >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AttributionFilterData_FilterValuesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::content::proto::AttributionFilterData_FilterValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AttributionFilterData_FilterValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::AttributionFilterData*
Arena::CreateMaybeMessage< ::content::proto::AttributionFilterData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::AttributionFilterData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
