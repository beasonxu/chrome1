// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_system_access.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_file_5fsystem_5faccess_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_file_5fsystem_5faccess_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_file_5fsystem_5faccess_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_file_5fsystem_5faccess_2eproto {
  static const uint32_t offsets[];
};
namespace content {
class FileSystemAccessHandleData;
struct FileSystemAccessHandleDataDefaultTypeInternal;
extern FileSystemAccessHandleDataDefaultTypeInternal _FileSystemAccessHandleData_default_instance_;
class LocalFileData;
struct LocalFileDataDefaultTypeInternal;
extern LocalFileDataDefaultTypeInternal _LocalFileData_default_instance_;
class SandboxedFileData;
struct SandboxedFileDataDefaultTypeInternal;
extern SandboxedFileDataDefaultTypeInternal _SandboxedFileData_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::FileSystemAccessHandleData* Arena::CreateMaybeMessage<::content::FileSystemAccessHandleData>(Arena*);
template<> ::content::LocalFileData* Arena::CreateMaybeMessage<::content::LocalFileData>(Arena*);
template<> ::content::SandboxedFileData* Arena::CreateMaybeMessage<::content::SandboxedFileData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

enum FileSystemAccessHandleData_HandleType : int {
  FileSystemAccessHandleData_HandleType_kFile = 0,
  FileSystemAccessHandleData_HandleType_kDirectory = 1
};
bool FileSystemAccessHandleData_HandleType_IsValid(int value);
constexpr FileSystemAccessHandleData_HandleType FileSystemAccessHandleData_HandleType_HandleType_MIN = FileSystemAccessHandleData_HandleType_kFile;
constexpr FileSystemAccessHandleData_HandleType FileSystemAccessHandleData_HandleType_HandleType_MAX = FileSystemAccessHandleData_HandleType_kDirectory;
constexpr int FileSystemAccessHandleData_HandleType_HandleType_ARRAYSIZE = FileSystemAccessHandleData_HandleType_HandleType_MAX + 1;

const std::string& FileSystemAccessHandleData_HandleType_Name(FileSystemAccessHandleData_HandleType value);
template<typename T>
inline const std::string& FileSystemAccessHandleData_HandleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileSystemAccessHandleData_HandleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileSystemAccessHandleData_HandleType_Name.");
  return FileSystemAccessHandleData_HandleType_Name(static_cast<FileSystemAccessHandleData_HandleType>(enum_t_value));
}
bool FileSystemAccessHandleData_HandleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileSystemAccessHandleData_HandleType* value);
// ===================================================================

class LocalFileData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.LocalFileData) */ {
 public:
  inline LocalFileData() : LocalFileData(nullptr) {}
  ~LocalFileData() override;
  explicit PROTOBUF_CONSTEXPR LocalFileData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalFileData(const LocalFileData& from);
  LocalFileData(LocalFileData&& from) noexcept
    : LocalFileData() {
    *this = ::std::move(from);
  }

  inline LocalFileData& operator=(const LocalFileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalFileData& operator=(LocalFileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalFileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalFileData* internal_default_instance() {
    return reinterpret_cast<const LocalFileData*>(
               &_LocalFileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LocalFileData& a, LocalFileData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(LocalFileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalFileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalFileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalFileData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalFileData& from);
  void MergeFrom(const LocalFileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalFileData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.LocalFileData";
  }
  protected:
  explicit LocalFileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootPathFieldNumber = 1,
    kRelativePathFieldNumber = 2,
  };
  // required bytes root_path = 1;
  bool has_root_path() const;
  private:
  bool _internal_has_root_path() const;
  public:
  void clear_root_path();
  const std::string& root_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_root_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_root_path();
  PROTOBUF_NODISCARD std::string* release_root_path();
  void set_allocated_root_path(std::string* root_path);
  private:
  const std::string& _internal_root_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_root_path(const std::string& value);
  std::string* _internal_mutable_root_path();
  public:

  // required bytes relative_path = 2;
  bool has_relative_path() const;
  private:
  bool _internal_has_relative_path() const;
  public:
  void clear_relative_path();
  const std::string& relative_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_relative_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_relative_path();
  PROTOBUF_NODISCARD std::string* release_relative_path();
  void set_allocated_relative_path(std::string* relative_path);
  private:
  const std::string& _internal_relative_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_relative_path(const std::string& value);
  std::string* _internal_mutable_relative_path();
  public:

  // @@protoc_insertion_point(class_scope:content.LocalFileData)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr root_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relative_path_;
  friend struct ::TableStruct_file_5fsystem_5faccess_2eproto;
};
// -------------------------------------------------------------------

class SandboxedFileData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.SandboxedFileData) */ {
 public:
  inline SandboxedFileData() : SandboxedFileData(nullptr) {}
  ~SandboxedFileData() override;
  explicit PROTOBUF_CONSTEXPR SandboxedFileData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SandboxedFileData(const SandboxedFileData& from);
  SandboxedFileData(SandboxedFileData&& from) noexcept
    : SandboxedFileData() {
    *this = ::std::move(from);
  }

  inline SandboxedFileData& operator=(const SandboxedFileData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SandboxedFileData& operator=(SandboxedFileData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SandboxedFileData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SandboxedFileData* internal_default_instance() {
    return reinterpret_cast<const SandboxedFileData*>(
               &_SandboxedFileData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SandboxedFileData& a, SandboxedFileData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SandboxedFileData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SandboxedFileData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SandboxedFileData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SandboxedFileData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SandboxedFileData& from);
  void MergeFrom(const SandboxedFileData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SandboxedFileData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.SandboxedFileData";
  }
  protected:
  explicit SandboxedFileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVirtualPathFieldNumber = 1,
    kBucketIdFieldNumber = 2,
  };
  // required bytes virtual_path = 1;
  bool has_virtual_path() const;
  private:
  bool _internal_has_virtual_path() const;
  public:
  void clear_virtual_path();
  const std::string& virtual_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_virtual_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_virtual_path();
  PROTOBUF_NODISCARD std::string* release_virtual_path();
  void set_allocated_virtual_path(std::string* virtual_path);
  private:
  const std::string& _internal_virtual_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_virtual_path(const std::string& value);
  std::string* _internal_mutable_virtual_path();
  public:

  // optional int64 bucket_id = 2;
  bool has_bucket_id() const;
  private:
  bool _internal_has_bucket_id() const;
  public:
  void clear_bucket_id();
  int64_t bucket_id() const;
  void set_bucket_id(int64_t value);
  private:
  int64_t _internal_bucket_id() const;
  void _internal_set_bucket_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.SandboxedFileData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr virtual_path_;
  int64_t bucket_id_;
  friend struct ::TableStruct_file_5fsystem_5faccess_2eproto;
};
// -------------------------------------------------------------------

class FileSystemAccessHandleData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.FileSystemAccessHandleData) */ {
 public:
  inline FileSystemAccessHandleData() : FileSystemAccessHandleData(nullptr) {}
  ~FileSystemAccessHandleData() override;
  explicit PROTOBUF_CONSTEXPR FileSystemAccessHandleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileSystemAccessHandleData(const FileSystemAccessHandleData& from);
  FileSystemAccessHandleData(FileSystemAccessHandleData&& from) noexcept
    : FileSystemAccessHandleData() {
    *this = ::std::move(from);
  }

  inline FileSystemAccessHandleData& operator=(const FileSystemAccessHandleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileSystemAccessHandleData& operator=(FileSystemAccessHandleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FileSystemAccessHandleData& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kSandboxed = 2,
    kLocal = 3,
    kExternal = 4,
    DATA_NOT_SET = 0,
  };

  static inline const FileSystemAccessHandleData* internal_default_instance() {
    return reinterpret_cast<const FileSystemAccessHandleData*>(
               &_FileSystemAccessHandleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileSystemAccessHandleData& a, FileSystemAccessHandleData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FileSystemAccessHandleData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileSystemAccessHandleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FileSystemAccessHandleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FileSystemAccessHandleData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FileSystemAccessHandleData& from);
  void MergeFrom(const FileSystemAccessHandleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FileSystemAccessHandleData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.FileSystemAccessHandleData";
  }
  protected:
  explicit FileSystemAccessHandleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FileSystemAccessHandleData_HandleType HandleType;
  static constexpr HandleType kFile =
    FileSystemAccessHandleData_HandleType_kFile;
  static constexpr HandleType kDirectory =
    FileSystemAccessHandleData_HandleType_kDirectory;
  static inline bool HandleType_IsValid(int value) {
    return FileSystemAccessHandleData_HandleType_IsValid(value);
  }
  static constexpr HandleType HandleType_MIN =
    FileSystemAccessHandleData_HandleType_HandleType_MIN;
  static constexpr HandleType HandleType_MAX =
    FileSystemAccessHandleData_HandleType_HandleType_MAX;
  static constexpr int HandleType_ARRAYSIZE =
    FileSystemAccessHandleData_HandleType_HandleType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& HandleType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, HandleType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function HandleType_Name.");
    return FileSystemAccessHandleData_HandleType_Name(enum_t_value);
  }
  static inline bool HandleType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      HandleType* value) {
    return FileSystemAccessHandleData_HandleType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kHandleTypeFieldNumber = 1,
    kSandboxedFieldNumber = 2,
    kLocalFieldNumber = 3,
    kExternalFieldNumber = 4,
  };
  // required .content.FileSystemAccessHandleData.HandleType handle_type = 1;
  bool has_handle_type() const;
  private:
  bool _internal_has_handle_type() const;
  public:
  void clear_handle_type();
  ::content::FileSystemAccessHandleData_HandleType handle_type() const;
  void set_handle_type(::content::FileSystemAccessHandleData_HandleType value);
  private:
  ::content::FileSystemAccessHandleData_HandleType _internal_handle_type() const;
  void _internal_set_handle_type(::content::FileSystemAccessHandleData_HandleType value);
  public:

  // .content.SandboxedFileData sandboxed = 2;
  bool has_sandboxed() const;
  private:
  bool _internal_has_sandboxed() const;
  public:
  void clear_sandboxed();
  const ::content::SandboxedFileData& sandboxed() const;
  PROTOBUF_NODISCARD ::content::SandboxedFileData* release_sandboxed();
  ::content::SandboxedFileData* mutable_sandboxed();
  void set_allocated_sandboxed(::content::SandboxedFileData* sandboxed);
  private:
  const ::content::SandboxedFileData& _internal_sandboxed() const;
  ::content::SandboxedFileData* _internal_mutable_sandboxed();
  public:
  void unsafe_arena_set_allocated_sandboxed(
      ::content::SandboxedFileData* sandboxed);
  ::content::SandboxedFileData* unsafe_arena_release_sandboxed();

  // .content.LocalFileData local = 3;
  bool has_local() const;
  private:
  bool _internal_has_local() const;
  public:
  void clear_local();
  const ::content::LocalFileData& local() const;
  PROTOBUF_NODISCARD ::content::LocalFileData* release_local();
  ::content::LocalFileData* mutable_local();
  void set_allocated_local(::content::LocalFileData* local);
  private:
  const ::content::LocalFileData& _internal_local() const;
  ::content::LocalFileData* _internal_mutable_local();
  public:
  void unsafe_arena_set_allocated_local(
      ::content::LocalFileData* local);
  ::content::LocalFileData* unsafe_arena_release_local();

  // .content.LocalFileData external = 4;
  bool has_external() const;
  private:
  bool _internal_has_external() const;
  public:
  void clear_external();
  const ::content::LocalFileData& external() const;
  PROTOBUF_NODISCARD ::content::LocalFileData* release_external();
  ::content::LocalFileData* mutable_external();
  void set_allocated_external(::content::LocalFileData* external);
  private:
  const ::content::LocalFileData& _internal_external() const;
  ::content::LocalFileData* _internal_mutable_external();
  public:
  void unsafe_arena_set_allocated_external(
      ::content::LocalFileData* external);
  ::content::LocalFileData* unsafe_arena_release_external();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:content.FileSystemAccessHandleData)
 private:
  class _Internal;
  void set_has_sandboxed();
  void set_has_local();
  void set_has_external();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int handle_type_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::content::SandboxedFileData* sandboxed_;
    ::content::LocalFileData* local_;
    ::content::LocalFileData* external_;
  } data_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_file_5fsystem_5faccess_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LocalFileData

// required bytes root_path = 1;
inline bool LocalFileData::_internal_has_root_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LocalFileData::has_root_path() const {
  return _internal_has_root_path();
}
inline void LocalFileData::clear_root_path() {
  root_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LocalFileData::root_path() const {
  // @@protoc_insertion_point(field_get:content.LocalFileData.root_path)
  return _internal_root_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalFileData::set_root_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 root_path_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LocalFileData.root_path)
}
inline std::string* LocalFileData::mutable_root_path() {
  std::string* _s = _internal_mutable_root_path();
  // @@protoc_insertion_point(field_mutable:content.LocalFileData.root_path)
  return _s;
}
inline const std::string& LocalFileData::_internal_root_path() const {
  return root_path_.Get();
}
inline void LocalFileData::_internal_set_root_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  root_path_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalFileData::_internal_mutable_root_path() {
  _has_bits_[0] |= 0x00000001u;
  return root_path_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalFileData::release_root_path() {
  // @@protoc_insertion_point(field_release:content.LocalFileData.root_path)
  if (!_internal_has_root_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = root_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (root_path_.IsDefault()) {
    root_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalFileData::set_allocated_root_path(std::string* root_path) {
  if (root_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  root_path_.SetAllocated(root_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (root_path_.IsDefault()) {
    root_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LocalFileData.root_path)
}

// required bytes relative_path = 2;
inline bool LocalFileData::_internal_has_relative_path() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LocalFileData::has_relative_path() const {
  return _internal_has_relative_path();
}
inline void LocalFileData::clear_relative_path() {
  relative_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LocalFileData::relative_path() const {
  // @@protoc_insertion_point(field_get:content.LocalFileData.relative_path)
  return _internal_relative_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocalFileData::set_relative_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 relative_path_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.LocalFileData.relative_path)
}
inline std::string* LocalFileData::mutable_relative_path() {
  std::string* _s = _internal_mutable_relative_path();
  // @@protoc_insertion_point(field_mutable:content.LocalFileData.relative_path)
  return _s;
}
inline const std::string& LocalFileData::_internal_relative_path() const {
  return relative_path_.Get();
}
inline void LocalFileData::_internal_set_relative_path(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  relative_path_.Set(value, GetArenaForAllocation());
}
inline std::string* LocalFileData::_internal_mutable_relative_path() {
  _has_bits_[0] |= 0x00000002u;
  return relative_path_.Mutable(GetArenaForAllocation());
}
inline std::string* LocalFileData::release_relative_path() {
  // @@protoc_insertion_point(field_release:content.LocalFileData.relative_path)
  if (!_internal_has_relative_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = relative_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_path_.IsDefault()) {
    relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LocalFileData::set_allocated_relative_path(std::string* relative_path) {
  if (relative_path != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  relative_path_.SetAllocated(relative_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (relative_path_.IsDefault()) {
    relative_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.LocalFileData.relative_path)
}

// -------------------------------------------------------------------

// SandboxedFileData

// required bytes virtual_path = 1;
inline bool SandboxedFileData::_internal_has_virtual_path() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SandboxedFileData::has_virtual_path() const {
  return _internal_has_virtual_path();
}
inline void SandboxedFileData::clear_virtual_path() {
  virtual_path_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SandboxedFileData::virtual_path() const {
  // @@protoc_insertion_point(field_get:content.SandboxedFileData.virtual_path)
  return _internal_virtual_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SandboxedFileData::set_virtual_path(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 virtual_path_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.SandboxedFileData.virtual_path)
}
inline std::string* SandboxedFileData::mutable_virtual_path() {
  std::string* _s = _internal_mutable_virtual_path();
  // @@protoc_insertion_point(field_mutable:content.SandboxedFileData.virtual_path)
  return _s;
}
inline const std::string& SandboxedFileData::_internal_virtual_path() const {
  return virtual_path_.Get();
}
inline void SandboxedFileData::_internal_set_virtual_path(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  virtual_path_.Set(value, GetArenaForAllocation());
}
inline std::string* SandboxedFileData::_internal_mutable_virtual_path() {
  _has_bits_[0] |= 0x00000001u;
  return virtual_path_.Mutable(GetArenaForAllocation());
}
inline std::string* SandboxedFileData::release_virtual_path() {
  // @@protoc_insertion_point(field_release:content.SandboxedFileData.virtual_path)
  if (!_internal_has_virtual_path()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = virtual_path_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (virtual_path_.IsDefault()) {
    virtual_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void SandboxedFileData::set_allocated_virtual_path(std::string* virtual_path) {
  if (virtual_path != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  virtual_path_.SetAllocated(virtual_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (virtual_path_.IsDefault()) {
    virtual_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.SandboxedFileData.virtual_path)
}

// optional int64 bucket_id = 2;
inline bool SandboxedFileData::_internal_has_bucket_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SandboxedFileData::has_bucket_id() const {
  return _internal_has_bucket_id();
}
inline void SandboxedFileData::clear_bucket_id() {
  bucket_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t SandboxedFileData::_internal_bucket_id() const {
  return bucket_id_;
}
inline int64_t SandboxedFileData::bucket_id() const {
  // @@protoc_insertion_point(field_get:content.SandboxedFileData.bucket_id)
  return _internal_bucket_id();
}
inline void SandboxedFileData::_internal_set_bucket_id(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  bucket_id_ = value;
}
inline void SandboxedFileData::set_bucket_id(int64_t value) {
  _internal_set_bucket_id(value);
  // @@protoc_insertion_point(field_set:content.SandboxedFileData.bucket_id)
}

// -------------------------------------------------------------------

// FileSystemAccessHandleData

// required .content.FileSystemAccessHandleData.HandleType handle_type = 1;
inline bool FileSystemAccessHandleData::_internal_has_handle_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FileSystemAccessHandleData::has_handle_type() const {
  return _internal_has_handle_type();
}
inline void FileSystemAccessHandleData::clear_handle_type() {
  handle_type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::content::FileSystemAccessHandleData_HandleType FileSystemAccessHandleData::_internal_handle_type() const {
  return static_cast< ::content::FileSystemAccessHandleData_HandleType >(handle_type_);
}
inline ::content::FileSystemAccessHandleData_HandleType FileSystemAccessHandleData::handle_type() const {
  // @@protoc_insertion_point(field_get:content.FileSystemAccessHandleData.handle_type)
  return _internal_handle_type();
}
inline void FileSystemAccessHandleData::_internal_set_handle_type(::content::FileSystemAccessHandleData_HandleType value) {
  assert(::content::FileSystemAccessHandleData_HandleType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  handle_type_ = value;
}
inline void FileSystemAccessHandleData::set_handle_type(::content::FileSystemAccessHandleData_HandleType value) {
  _internal_set_handle_type(value);
  // @@protoc_insertion_point(field_set:content.FileSystemAccessHandleData.handle_type)
}

// .content.SandboxedFileData sandboxed = 2;
inline bool FileSystemAccessHandleData::_internal_has_sandboxed() const {
  return data_case() == kSandboxed;
}
inline bool FileSystemAccessHandleData::has_sandboxed() const {
  return _internal_has_sandboxed();
}
inline void FileSystemAccessHandleData::set_has_sandboxed() {
  _oneof_case_[0] = kSandboxed;
}
inline void FileSystemAccessHandleData::clear_sandboxed() {
  if (_internal_has_sandboxed()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.sandboxed_;
    }
    clear_has_data();
  }
}
inline ::content::SandboxedFileData* FileSystemAccessHandleData::release_sandboxed() {
  // @@protoc_insertion_point(field_release:content.FileSystemAccessHandleData.sandboxed)
  if (_internal_has_sandboxed()) {
    clear_has_data();
    ::content::SandboxedFileData* temp = data_.sandboxed_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.sandboxed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::SandboxedFileData& FileSystemAccessHandleData::_internal_sandboxed() const {
  return _internal_has_sandboxed()
      ? *data_.sandboxed_
      : reinterpret_cast< ::content::SandboxedFileData&>(::content::_SandboxedFileData_default_instance_);
}
inline const ::content::SandboxedFileData& FileSystemAccessHandleData::sandboxed() const {
  // @@protoc_insertion_point(field_get:content.FileSystemAccessHandleData.sandboxed)
  return _internal_sandboxed();
}
inline ::content::SandboxedFileData* FileSystemAccessHandleData::unsafe_arena_release_sandboxed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.FileSystemAccessHandleData.sandboxed)
  if (_internal_has_sandboxed()) {
    clear_has_data();
    ::content::SandboxedFileData* temp = data_.sandboxed_;
    data_.sandboxed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemAccessHandleData::unsafe_arena_set_allocated_sandboxed(::content::SandboxedFileData* sandboxed) {
  clear_data();
  if (sandboxed) {
    set_has_sandboxed();
    data_.sandboxed_ = sandboxed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.FileSystemAccessHandleData.sandboxed)
}
inline ::content::SandboxedFileData* FileSystemAccessHandleData::_internal_mutable_sandboxed() {
  if (!_internal_has_sandboxed()) {
    clear_data();
    set_has_sandboxed();
    data_.sandboxed_ = CreateMaybeMessage< ::content::SandboxedFileData >(GetArenaForAllocation());
  }
  return data_.sandboxed_;
}
inline ::content::SandboxedFileData* FileSystemAccessHandleData::mutable_sandboxed() {
  ::content::SandboxedFileData* _msg = _internal_mutable_sandboxed();
  // @@protoc_insertion_point(field_mutable:content.FileSystemAccessHandleData.sandboxed)
  return _msg;
}

// .content.LocalFileData local = 3;
inline bool FileSystemAccessHandleData::_internal_has_local() const {
  return data_case() == kLocal;
}
inline bool FileSystemAccessHandleData::has_local() const {
  return _internal_has_local();
}
inline void FileSystemAccessHandleData::set_has_local() {
  _oneof_case_[0] = kLocal;
}
inline void FileSystemAccessHandleData::clear_local() {
  if (_internal_has_local()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.local_;
    }
    clear_has_data();
  }
}
inline ::content::LocalFileData* FileSystemAccessHandleData::release_local() {
  // @@protoc_insertion_point(field_release:content.FileSystemAccessHandleData.local)
  if (_internal_has_local()) {
    clear_has_data();
    ::content::LocalFileData* temp = data_.local_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LocalFileData& FileSystemAccessHandleData::_internal_local() const {
  return _internal_has_local()
      ? *data_.local_
      : reinterpret_cast< ::content::LocalFileData&>(::content::_LocalFileData_default_instance_);
}
inline const ::content::LocalFileData& FileSystemAccessHandleData::local() const {
  // @@protoc_insertion_point(field_get:content.FileSystemAccessHandleData.local)
  return _internal_local();
}
inline ::content::LocalFileData* FileSystemAccessHandleData::unsafe_arena_release_local() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.FileSystemAccessHandleData.local)
  if (_internal_has_local()) {
    clear_has_data();
    ::content::LocalFileData* temp = data_.local_;
    data_.local_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemAccessHandleData::unsafe_arena_set_allocated_local(::content::LocalFileData* local) {
  clear_data();
  if (local) {
    set_has_local();
    data_.local_ = local;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.FileSystemAccessHandleData.local)
}
inline ::content::LocalFileData* FileSystemAccessHandleData::_internal_mutable_local() {
  if (!_internal_has_local()) {
    clear_data();
    set_has_local();
    data_.local_ = CreateMaybeMessage< ::content::LocalFileData >(GetArenaForAllocation());
  }
  return data_.local_;
}
inline ::content::LocalFileData* FileSystemAccessHandleData::mutable_local() {
  ::content::LocalFileData* _msg = _internal_mutable_local();
  // @@protoc_insertion_point(field_mutable:content.FileSystemAccessHandleData.local)
  return _msg;
}

// .content.LocalFileData external = 4;
inline bool FileSystemAccessHandleData::_internal_has_external() const {
  return data_case() == kExternal;
}
inline bool FileSystemAccessHandleData::has_external() const {
  return _internal_has_external();
}
inline void FileSystemAccessHandleData::set_has_external() {
  _oneof_case_[0] = kExternal;
}
inline void FileSystemAccessHandleData::clear_external() {
  if (_internal_has_external()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.external_;
    }
    clear_has_data();
  }
}
inline ::content::LocalFileData* FileSystemAccessHandleData::release_external() {
  // @@protoc_insertion_point(field_release:content.FileSystemAccessHandleData.external)
  if (_internal_has_external()) {
    clear_has_data();
    ::content::LocalFileData* temp = data_.external_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.external_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::content::LocalFileData& FileSystemAccessHandleData::_internal_external() const {
  return _internal_has_external()
      ? *data_.external_
      : reinterpret_cast< ::content::LocalFileData&>(::content::_LocalFileData_default_instance_);
}
inline const ::content::LocalFileData& FileSystemAccessHandleData::external() const {
  // @@protoc_insertion_point(field_get:content.FileSystemAccessHandleData.external)
  return _internal_external();
}
inline ::content::LocalFileData* FileSystemAccessHandleData::unsafe_arena_release_external() {
  // @@protoc_insertion_point(field_unsafe_arena_release:content.FileSystemAccessHandleData.external)
  if (_internal_has_external()) {
    clear_has_data();
    ::content::LocalFileData* temp = data_.external_;
    data_.external_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void FileSystemAccessHandleData::unsafe_arena_set_allocated_external(::content::LocalFileData* external) {
  clear_data();
  if (external) {
    set_has_external();
    data_.external_ = external;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.FileSystemAccessHandleData.external)
}
inline ::content::LocalFileData* FileSystemAccessHandleData::_internal_mutable_external() {
  if (!_internal_has_external()) {
    clear_data();
    set_has_external();
    data_.external_ = CreateMaybeMessage< ::content::LocalFileData >(GetArenaForAllocation());
  }
  return data_.external_;
}
inline ::content::LocalFileData* FileSystemAccessHandleData::mutable_external() {
  ::content::LocalFileData* _msg = _internal_mutable_external();
  // @@protoc_insertion_point(field_mutable:content.FileSystemAccessHandleData.external)
  return _msg;
}

inline bool FileSystemAccessHandleData::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void FileSystemAccessHandleData::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline FileSystemAccessHandleData::DataCase FileSystemAccessHandleData::data_case() const {
  return FileSystemAccessHandleData::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::FileSystemAccessHandleData_HandleType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_file_5fsystem_5faccess_2eproto
