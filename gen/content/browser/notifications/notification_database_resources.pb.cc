// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_database_resources.proto

#include "notification_database_resources.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
PROTOBUF_CONSTEXPR NotificationDatabaseResourcesProto::NotificationDatabaseResourcesProto(
    ::_pbi::ConstantInitialized)
  : action_icons_()
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notification_icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , badge_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct NotificationDatabaseResourcesProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDatabaseResourcesProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDatabaseResourcesProtoDefaultTypeInternal() {}
  union {
    NotificationDatabaseResourcesProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDatabaseResourcesProtoDefaultTypeInternal _NotificationDatabaseResourcesProto_default_instance_;
}  // namespace content
namespace content {

// ===================================================================

class NotificationDatabaseResourcesProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationDatabaseResourcesProto>()._has_bits_);
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_notification_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_badge(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

NotificationDatabaseResourcesProto::NotificationDatabaseResourcesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  action_icons_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.NotificationDatabaseResourcesProto)
}
NotificationDatabaseResourcesProto::NotificationDatabaseResourcesProto(const NotificationDatabaseResourcesProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      action_icons_(from.action_icons_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  notification_icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notification_icon()) {
    notification_icon_.Set(from._internal_notification_icon(), 
      GetArenaForAllocation());
  }
  badge_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    badge_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_badge()) {
    badge_.Set(from._internal_badge(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.NotificationDatabaseResourcesProto)
}

inline void NotificationDatabaseResourcesProto::SharedCtor() {
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notification_icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
badge_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  badge_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NotificationDatabaseResourcesProto::~NotificationDatabaseResourcesProto() {
  // @@protoc_insertion_point(destructor:content.NotificationDatabaseResourcesProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationDatabaseResourcesProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  image_.Destroy();
  notification_icon_.Destroy();
  badge_.Destroy();
}

void NotificationDatabaseResourcesProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationDatabaseResourcesProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.NotificationDatabaseResourcesProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_icons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      image_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      notification_icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      badge_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NotificationDatabaseResourcesProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes notification_icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_notification_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes badge = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_badge();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes action_icons = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_action_icons();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationDatabaseResourcesProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.NotificationDatabaseResourcesProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes image = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // optional bytes notification_icon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_notification_icon(), target);
  }

  // optional bytes badge = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_badge(), target);
  }

  // repeated bytes action_icons = 4;
  for (int i = 0, n = this->_internal_action_icons_size(); i < n; i++) {
    const auto& s = this->_internal_action_icons(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.NotificationDatabaseResourcesProto)
  return target;
}

size_t NotificationDatabaseResourcesProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.NotificationDatabaseResourcesProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes action_icons = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(action_icons_.size());
  for (int i = 0, n = action_icons_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      action_icons_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes image = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_image());
    }

    // optional bytes notification_icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_notification_icon());
    }

    // optional bytes badge = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_badge());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationDatabaseResourcesProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NotificationDatabaseResourcesProto*>(
      &from));
}

void NotificationDatabaseResourcesProto::MergeFrom(const NotificationDatabaseResourcesProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.NotificationDatabaseResourcesProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  action_icons_.MergeFrom(from.action_icons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_image(from._internal_image());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_notification_icon(from._internal_notification_icon());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_badge(from._internal_badge());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NotificationDatabaseResourcesProto::CopyFrom(const NotificationDatabaseResourcesProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.NotificationDatabaseResourcesProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseResourcesProto::IsInitialized() const {
  return true;
}

void NotificationDatabaseResourcesProto::InternalSwap(NotificationDatabaseResourcesProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  action_icons_.InternalSwap(&other->action_icons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &notification_icon_, lhs_arena,
      &other->notification_icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &badge_, lhs_arena,
      &other->badge_, rhs_arena
  );
}

std::string NotificationDatabaseResourcesProto::GetTypeName() const {
  return "content.NotificationDatabaseResourcesProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::NotificationDatabaseResourcesProto*
Arena::CreateMaybeMessage< ::content::NotificationDatabaseResourcesProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::NotificationDatabaseResourcesProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
