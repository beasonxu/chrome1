// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_database_resources.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_notification_5fdatabase_5fresources_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_notification_5fdatabase_5fresources_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_notification_5fdatabase_5fresources_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_notification_5fdatabase_5fresources_2eproto {
  static const uint32_t offsets[];
};
namespace content {
class NotificationDatabaseResourcesProto;
struct NotificationDatabaseResourcesProtoDefaultTypeInternal;
extern NotificationDatabaseResourcesProtoDefaultTypeInternal _NotificationDatabaseResourcesProto_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::NotificationDatabaseResourcesProto* Arena::CreateMaybeMessage<::content::NotificationDatabaseResourcesProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

// ===================================================================

class NotificationDatabaseResourcesProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.NotificationDatabaseResourcesProto) */ {
 public:
  inline NotificationDatabaseResourcesProto() : NotificationDatabaseResourcesProto(nullptr) {}
  ~NotificationDatabaseResourcesProto() override;
  explicit PROTOBUF_CONSTEXPR NotificationDatabaseResourcesProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationDatabaseResourcesProto(const NotificationDatabaseResourcesProto& from);
  NotificationDatabaseResourcesProto(NotificationDatabaseResourcesProto&& from) noexcept
    : NotificationDatabaseResourcesProto() {
    *this = ::std::move(from);
  }

  inline NotificationDatabaseResourcesProto& operator=(const NotificationDatabaseResourcesProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationDatabaseResourcesProto& operator=(NotificationDatabaseResourcesProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const NotificationDatabaseResourcesProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationDatabaseResourcesProto* internal_default_instance() {
    return reinterpret_cast<const NotificationDatabaseResourcesProto*>(
               &_NotificationDatabaseResourcesProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationDatabaseResourcesProto& a, NotificationDatabaseResourcesProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(NotificationDatabaseResourcesProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationDatabaseResourcesProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationDatabaseResourcesProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationDatabaseResourcesProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const NotificationDatabaseResourcesProto& from);
  void MergeFrom(const NotificationDatabaseResourcesProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NotificationDatabaseResourcesProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.NotificationDatabaseResourcesProto";
  }
  protected:
  explicit NotificationDatabaseResourcesProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIconsFieldNumber = 4,
    kImageFieldNumber = 1,
    kNotificationIconFieldNumber = 2,
    kBadgeFieldNumber = 3,
  };
  // repeated bytes action_icons = 4;
  int action_icons_size() const;
  private:
  int _internal_action_icons_size() const;
  public:
  void clear_action_icons();
  const std::string& action_icons(int index) const;
  std::string* mutable_action_icons(int index);
  void set_action_icons(int index, const std::string& value);
  void set_action_icons(int index, std::string&& value);
  void set_action_icons(int index, const char* value);
  void set_action_icons(int index, const void* value, size_t size);
  std::string* add_action_icons();
  void add_action_icons(const std::string& value);
  void add_action_icons(std::string&& value);
  void add_action_icons(const char* value);
  void add_action_icons(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& action_icons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_action_icons();
  private:
  const std::string& _internal_action_icons(int index) const;
  std::string* _internal_add_action_icons();
  public:

  // optional bytes image = 1;
  bool has_image() const;
  private:
  bool _internal_has_image() const;
  public:
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // optional bytes notification_icon = 2;
  bool has_notification_icon() const;
  private:
  bool _internal_has_notification_icon() const;
  public:
  void clear_notification_icon();
  const std::string& notification_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_icon();
  PROTOBUF_NODISCARD std::string* release_notification_icon();
  void set_allocated_notification_icon(std::string* notification_icon);
  private:
  const std::string& _internal_notification_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_icon(const std::string& value);
  std::string* _internal_mutable_notification_icon();
  public:

  // optional bytes badge = 3;
  bool has_badge() const;
  private:
  bool _internal_has_badge() const;
  public:
  void clear_badge();
  const std::string& badge() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_badge(ArgT0&& arg0, ArgT... args);
  std::string* mutable_badge();
  PROTOBUF_NODISCARD std::string* release_badge();
  void set_allocated_badge(std::string* badge);
  private:
  const std::string& _internal_badge() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_badge(const std::string& value);
  std::string* _internal_mutable_badge();
  public:

  // @@protoc_insertion_point(class_scope:content.NotificationDatabaseResourcesProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> action_icons_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr badge_;
  friend struct ::TableStruct_notification_5fdatabase_5fresources_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationDatabaseResourcesProto

// optional bytes image = 1;
inline bool NotificationDatabaseResourcesProto::_internal_has_image() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NotificationDatabaseResourcesProto::has_image() const {
  return _internal_has_image();
}
inline void NotificationDatabaseResourcesProto::clear_image() {
  image_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& NotificationDatabaseResourcesProto::image() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseResourcesProto.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationDatabaseResourcesProto::set_image(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseResourcesProto.image)
}
inline std::string* NotificationDatabaseResourcesProto::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseResourcesProto.image)
  return _s;
}
inline const std::string& NotificationDatabaseResourcesProto::_internal_image() const {
  return image_.Get();
}
inline void NotificationDatabaseResourcesProto::_internal_set_image(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationDatabaseResourcesProto::_internal_mutable_image() {
  _has_bits_[0] |= 0x00000001u;
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationDatabaseResourcesProto::release_image() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseResourcesProto.image)
  if (!_internal_has_image()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = image_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationDatabaseResourcesProto::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseResourcesProto.image)
}

// optional bytes notification_icon = 2;
inline bool NotificationDatabaseResourcesProto::_internal_has_notification_icon() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NotificationDatabaseResourcesProto::has_notification_icon() const {
  return _internal_has_notification_icon();
}
inline void NotificationDatabaseResourcesProto::clear_notification_icon() {
  notification_icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& NotificationDatabaseResourcesProto::notification_icon() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseResourcesProto.notification_icon)
  return _internal_notification_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationDatabaseResourcesProto::set_notification_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 notification_icon_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseResourcesProto.notification_icon)
}
inline std::string* NotificationDatabaseResourcesProto::mutable_notification_icon() {
  std::string* _s = _internal_mutable_notification_icon();
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseResourcesProto.notification_icon)
  return _s;
}
inline const std::string& NotificationDatabaseResourcesProto::_internal_notification_icon() const {
  return notification_icon_.Get();
}
inline void NotificationDatabaseResourcesProto::_internal_set_notification_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  notification_icon_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationDatabaseResourcesProto::_internal_mutable_notification_icon() {
  _has_bits_[0] |= 0x00000002u;
  return notification_icon_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationDatabaseResourcesProto::release_notification_icon() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseResourcesProto.notification_icon)
  if (!_internal_has_notification_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = notification_icon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notification_icon_.IsDefault()) {
    notification_icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationDatabaseResourcesProto::set_allocated_notification_icon(std::string* notification_icon) {
  if (notification_icon != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  notification_icon_.SetAllocated(notification_icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notification_icon_.IsDefault()) {
    notification_icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseResourcesProto.notification_icon)
}

// optional bytes badge = 3;
inline bool NotificationDatabaseResourcesProto::_internal_has_badge() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NotificationDatabaseResourcesProto::has_badge() const {
  return _internal_has_badge();
}
inline void NotificationDatabaseResourcesProto::clear_badge() {
  badge_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& NotificationDatabaseResourcesProto::badge() const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseResourcesProto.badge)
  return _internal_badge();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationDatabaseResourcesProto::set_badge(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 badge_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseResourcesProto.badge)
}
inline std::string* NotificationDatabaseResourcesProto::mutable_badge() {
  std::string* _s = _internal_mutable_badge();
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseResourcesProto.badge)
  return _s;
}
inline const std::string& NotificationDatabaseResourcesProto::_internal_badge() const {
  return badge_.Get();
}
inline void NotificationDatabaseResourcesProto::_internal_set_badge(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  badge_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationDatabaseResourcesProto::_internal_mutable_badge() {
  _has_bits_[0] |= 0x00000004u;
  return badge_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationDatabaseResourcesProto::release_badge() {
  // @@protoc_insertion_point(field_release:content.NotificationDatabaseResourcesProto.badge)
  if (!_internal_has_badge()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = badge_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (badge_.IsDefault()) {
    badge_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void NotificationDatabaseResourcesProto::set_allocated_badge(std::string* badge) {
  if (badge != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  badge_.SetAllocated(badge, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (badge_.IsDefault()) {
    badge_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.NotificationDatabaseResourcesProto.badge)
}

// repeated bytes action_icons = 4;
inline int NotificationDatabaseResourcesProto::_internal_action_icons_size() const {
  return action_icons_.size();
}
inline int NotificationDatabaseResourcesProto::action_icons_size() const {
  return _internal_action_icons_size();
}
inline void NotificationDatabaseResourcesProto::clear_action_icons() {
  action_icons_.Clear();
}
inline std::string* NotificationDatabaseResourcesProto::add_action_icons() {
  std::string* _s = _internal_add_action_icons();
  // @@protoc_insertion_point(field_add_mutable:content.NotificationDatabaseResourcesProto.action_icons)
  return _s;
}
inline const std::string& NotificationDatabaseResourcesProto::_internal_action_icons(int index) const {
  return action_icons_.Get(index);
}
inline const std::string& NotificationDatabaseResourcesProto::action_icons(int index) const {
  // @@protoc_insertion_point(field_get:content.NotificationDatabaseResourcesProto.action_icons)
  return _internal_action_icons(index);
}
inline std::string* NotificationDatabaseResourcesProto::mutable_action_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.NotificationDatabaseResourcesProto.action_icons)
  return action_icons_.Mutable(index);
}
inline void NotificationDatabaseResourcesProto::set_action_icons(int index, const std::string& value) {
  action_icons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseResourcesProto.action_icons)
}
inline void NotificationDatabaseResourcesProto::set_action_icons(int index, std::string&& value) {
  action_icons_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:content.NotificationDatabaseResourcesProto.action_icons)
}
inline void NotificationDatabaseResourcesProto::set_action_icons(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  action_icons_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:content.NotificationDatabaseResourcesProto.action_icons)
}
inline void NotificationDatabaseResourcesProto::set_action_icons(int index, const void* value, size_t size) {
  action_icons_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:content.NotificationDatabaseResourcesProto.action_icons)
}
inline std::string* NotificationDatabaseResourcesProto::_internal_add_action_icons() {
  return action_icons_.Add();
}
inline void NotificationDatabaseResourcesProto::add_action_icons(const std::string& value) {
  action_icons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:content.NotificationDatabaseResourcesProto.action_icons)
}
inline void NotificationDatabaseResourcesProto::add_action_icons(std::string&& value) {
  action_icons_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:content.NotificationDatabaseResourcesProto.action_icons)
}
inline void NotificationDatabaseResourcesProto::add_action_icons(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  action_icons_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:content.NotificationDatabaseResourcesProto.action_icons)
}
inline void NotificationDatabaseResourcesProto::add_action_icons(const void* value, size_t size) {
  action_icons_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:content.NotificationDatabaseResourcesProto.action_icons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NotificationDatabaseResourcesProto::action_icons() const {
  // @@protoc_insertion_point(field_list:content.NotificationDatabaseResourcesProto.action_icons)
  return action_icons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NotificationDatabaseResourcesProto::mutable_action_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.NotificationDatabaseResourcesProto.action_icons)
  return &action_icons_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_notification_5fdatabase_5fresources_2eproto
