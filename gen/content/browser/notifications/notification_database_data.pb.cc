// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notification_database_data.proto

#include "notification_database_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
PROTOBUF_CONSTEXPR NotificationDatabaseDataProto_NotificationAction::NotificationDatabaseDataProto_NotificationAction(
    ::_pbi::ConstantInitialized)
  : action_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , placeholder_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct NotificationDatabaseDataProto_NotificationActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDatabaseDataProto_NotificationActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDatabaseDataProto_NotificationActionDefaultTypeInternal() {}
  union {
    NotificationDatabaseDataProto_NotificationAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDatabaseDataProto_NotificationActionDefaultTypeInternal _NotificationDatabaseDataProto_NotificationAction_default_instance_;
PROTOBUF_CONSTEXPR NotificationDatabaseDataProto_NotificationData::NotificationDatabaseDataProto_NotificationData(
    ::_pbi::ConstantInitialized)
  : vibration_pattern_()
  , _vibration_pattern_cached_byte_size_(0)
  , actions_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , lang_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , body_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , badge_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , direction_(0)

  , renotify_(false)
  , silent_(false)
  , require_interaction_(false)
  , timestamp_(int64_t{0})
  , show_trigger_timestamp_(int64_t{0}){}
struct NotificationDatabaseDataProto_NotificationDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDatabaseDataProto_NotificationDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDatabaseDataProto_NotificationDataDefaultTypeInternal() {}
  union {
    NotificationDatabaseDataProto_NotificationData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDatabaseDataProto_NotificationDataDefaultTypeInternal _NotificationDatabaseDataProto_NotificationData_default_instance_;
PROTOBUF_CONSTEXPR NotificationDatabaseDataProto::NotificationDatabaseDataProto(
    ::_pbi::ConstantInitialized)
  : origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notification_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notification_data_(nullptr)
  , persistent_notification_id_(int64_t{0})
  , service_worker_registration_id_(int64_t{0})
  , num_clicks_(0)
  , num_action_button_clicks_(0)
  , creation_time_millis_(int64_t{0})
  , time_until_first_click_millis_(int64_t{0})
  , time_until_last_click_millis_(int64_t{0})
  , time_until_close_millis_(int64_t{0})
  , replaced_existing_notification_(false)
  , has_triggered_(false)
  , is_shown_by_browser_(false)
  , closed_reason_(0)
{}
struct NotificationDatabaseDataProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NotificationDatabaseDataProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NotificationDatabaseDataProtoDefaultTypeInternal() {}
  union {
    NotificationDatabaseDataProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotificationDatabaseDataProtoDefaultTypeInternal _NotificationDatabaseDataProto_default_instance_;
}  // namespace content
namespace content {
bool NotificationDatabaseDataProto_NotificationAction_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NotificationDatabaseDataProto_NotificationAction_Type_strings[2] = {};

static const char NotificationDatabaseDataProto_NotificationAction_Type_names[] =
  "BUTTON"
  "TEXT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NotificationDatabaseDataProto_NotificationAction_Type_entries[] = {
  { {NotificationDatabaseDataProto_NotificationAction_Type_names + 0, 6}, 0 },
  { {NotificationDatabaseDataProto_NotificationAction_Type_names + 6, 4}, 1 },
};

static const int NotificationDatabaseDataProto_NotificationAction_Type_entries_by_number[] = {
  0, // 0 -> BUTTON
  1, // 1 -> TEXT
};

const std::string& NotificationDatabaseDataProto_NotificationAction_Type_Name(
    NotificationDatabaseDataProto_NotificationAction_Type value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NotificationDatabaseDataProto_NotificationAction_Type_entries,
          NotificationDatabaseDataProto_NotificationAction_Type_entries_by_number,
          2, NotificationDatabaseDataProto_NotificationAction_Type_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NotificationDatabaseDataProto_NotificationAction_Type_entries,
      NotificationDatabaseDataProto_NotificationAction_Type_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NotificationDatabaseDataProto_NotificationAction_Type_strings[idx].get();
}
bool NotificationDatabaseDataProto_NotificationAction_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationDatabaseDataProto_NotificationAction_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NotificationDatabaseDataProto_NotificationAction_Type_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<NotificationDatabaseDataProto_NotificationAction_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction::BUTTON;
constexpr NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction::TEXT;
constexpr NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction::Type_MIN;
constexpr NotificationDatabaseDataProto_NotificationAction_Type NotificationDatabaseDataProto_NotificationAction::Type_MAX;
constexpr int NotificationDatabaseDataProto_NotificationAction::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool NotificationDatabaseDataProto_NotificationData_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NotificationDatabaseDataProto_NotificationData_Direction_strings[3] = {};

static const char NotificationDatabaseDataProto_NotificationData_Direction_names[] =
  "AUTO"
  "LEFT_TO_RIGHT"
  "RIGHT_TO_LEFT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NotificationDatabaseDataProto_NotificationData_Direction_entries[] = {
  { {NotificationDatabaseDataProto_NotificationData_Direction_names + 0, 4}, 2 },
  { {NotificationDatabaseDataProto_NotificationData_Direction_names + 4, 13}, 0 },
  { {NotificationDatabaseDataProto_NotificationData_Direction_names + 17, 13}, 1 },
};

static const int NotificationDatabaseDataProto_NotificationData_Direction_entries_by_number[] = {
  1, // 0 -> LEFT_TO_RIGHT
  2, // 1 -> RIGHT_TO_LEFT
  0, // 2 -> AUTO
};

const std::string& NotificationDatabaseDataProto_NotificationData_Direction_Name(
    NotificationDatabaseDataProto_NotificationData_Direction value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NotificationDatabaseDataProto_NotificationData_Direction_entries,
          NotificationDatabaseDataProto_NotificationData_Direction_entries_by_number,
          3, NotificationDatabaseDataProto_NotificationData_Direction_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NotificationDatabaseDataProto_NotificationData_Direction_entries,
      NotificationDatabaseDataProto_NotificationData_Direction_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NotificationDatabaseDataProto_NotificationData_Direction_strings[idx].get();
}
bool NotificationDatabaseDataProto_NotificationData_Direction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationDatabaseDataProto_NotificationData_Direction* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NotificationDatabaseDataProto_NotificationData_Direction_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NotificationDatabaseDataProto_NotificationData_Direction>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::LEFT_TO_RIGHT;
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::RIGHT_TO_LEFT;
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::AUTO;
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::Direction_MIN;
constexpr NotificationDatabaseDataProto_NotificationData_Direction NotificationDatabaseDataProto_NotificationData::Direction_MAX;
constexpr int NotificationDatabaseDataProto_NotificationData::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool NotificationDatabaseDataProto_ClosedReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> NotificationDatabaseDataProto_ClosedReason_strings[3] = {};

static const char NotificationDatabaseDataProto_ClosedReason_names[] =
  "DEVELOPER"
  "UNKNOWN"
  "USER";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry NotificationDatabaseDataProto_ClosedReason_entries[] = {
  { {NotificationDatabaseDataProto_ClosedReason_names + 0, 9}, 1 },
  { {NotificationDatabaseDataProto_ClosedReason_names + 9, 7}, 2 },
  { {NotificationDatabaseDataProto_ClosedReason_names + 16, 4}, 0 },
};

static const int NotificationDatabaseDataProto_ClosedReason_entries_by_number[] = {
  2, // 0 -> USER
  0, // 1 -> DEVELOPER
  1, // 2 -> UNKNOWN
};

const std::string& NotificationDatabaseDataProto_ClosedReason_Name(
    NotificationDatabaseDataProto_ClosedReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          NotificationDatabaseDataProto_ClosedReason_entries,
          NotificationDatabaseDataProto_ClosedReason_entries_by_number,
          3, NotificationDatabaseDataProto_ClosedReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      NotificationDatabaseDataProto_ClosedReason_entries,
      NotificationDatabaseDataProto_ClosedReason_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     NotificationDatabaseDataProto_ClosedReason_strings[idx].get();
}
bool NotificationDatabaseDataProto_ClosedReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationDatabaseDataProto_ClosedReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      NotificationDatabaseDataProto_ClosedReason_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<NotificationDatabaseDataProto_ClosedReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto::USER;
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto::DEVELOPER;
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto::UNKNOWN;
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto::ClosedReason_MIN;
constexpr NotificationDatabaseDataProto_ClosedReason NotificationDatabaseDataProto::ClosedReason_MAX;
constexpr int NotificationDatabaseDataProto::ClosedReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class NotificationDatabaseDataProto_NotificationAction::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationDatabaseDataProto_NotificationAction>()._has_bits_);
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

NotificationDatabaseDataProto_NotificationAction::NotificationDatabaseDataProto_NotificationAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.NotificationDatabaseDataProto.NotificationAction)
}
NotificationDatabaseDataProto_NotificationAction::NotificationDatabaseDataProto_NotificationAction(const NotificationDatabaseDataProto_NotificationAction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_action()) {
    action_.Set(from._internal_action(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  placeholder_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    placeholder_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_placeholder()) {
    placeholder_.Set(from._internal_placeholder(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:content.NotificationDatabaseDataProto.NotificationAction)
}

inline void NotificationDatabaseDataProto_NotificationAction::SharedCtor() {
action_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
placeholder_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  placeholder_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

NotificationDatabaseDataProto_NotificationAction::~NotificationDatabaseDataProto_NotificationAction() {
  // @@protoc_insertion_point(destructor:content.NotificationDatabaseDataProto.NotificationAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationDatabaseDataProto_NotificationAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.Destroy();
  title_.Destroy();
  icon_.Destroy();
  placeholder_.Destroy();
}

void NotificationDatabaseDataProto_NotificationAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationDatabaseDataProto_NotificationAction::Clear() {
// @@protoc_insertion_point(message_clear_start:content.NotificationDatabaseDataProto.NotificationAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      action_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      placeholder_.ClearNonDefaultToEmpty();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NotificationDatabaseDataProto_NotificationAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string action = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.NotificationDatabaseDataProto.NotificationAction.Type type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::NotificationDatabaseDataProto_NotificationAction_Type_IsValid(val))) {
            _internal_set_type(static_cast<::content::NotificationDatabaseDataProto_NotificationAction_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string placeholder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_placeholder();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationDatabaseDataProto_NotificationAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.NotificationDatabaseDataProto.NotificationAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string action = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional string icon = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_icon(), target);
  }

  // optional .content.NotificationDatabaseDataProto.NotificationAction.Type type = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_type(), target);
  }

  // optional string placeholder = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_placeholder(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.NotificationDatabaseDataProto.NotificationAction)
  return target;
}

size_t NotificationDatabaseDataProto_NotificationAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.NotificationDatabaseDataProto.NotificationAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string action = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_action());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string icon = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional string placeholder = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_placeholder());
    }

    // optional .content.NotificationDatabaseDataProto.NotificationAction.Type type = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationDatabaseDataProto_NotificationAction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NotificationDatabaseDataProto_NotificationAction*>(
      &from));
}

void NotificationDatabaseDataProto_NotificationAction::MergeFrom(const NotificationDatabaseDataProto_NotificationAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.NotificationDatabaseDataProto.NotificationAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_action(from._internal_action());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_placeholder(from._internal_placeholder());
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NotificationDatabaseDataProto_NotificationAction::CopyFrom(const NotificationDatabaseDataProto_NotificationAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.NotificationDatabaseDataProto.NotificationAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseDataProto_NotificationAction::IsInitialized() const {
  return true;
}

void NotificationDatabaseDataProto_NotificationAction::InternalSwap(NotificationDatabaseDataProto_NotificationAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &placeholder_, lhs_arena,
      &other->placeholder_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string NotificationDatabaseDataProto_NotificationAction::GetTypeName() const {
  return "content.NotificationDatabaseDataProto.NotificationAction";
}


// ===================================================================

class NotificationDatabaseDataProto_NotificationData::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationDatabaseDataProto_NotificationData>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_direction(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_lang(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_image(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_badge(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_renotify(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_silent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_require_interaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_show_trigger_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

NotificationDatabaseDataProto_NotificationData::NotificationDatabaseDataProto_NotificationData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  vibration_pattern_(arena),
  actions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.NotificationDatabaseDataProto.NotificationData)
}
NotificationDatabaseDataProto_NotificationData::NotificationDatabaseDataProto_NotificationData(const NotificationDatabaseDataProto_NotificationData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      vibration_pattern_(from.vibration_pattern_),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  lang_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    lang_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_lang()) {
    lang_.Set(from._internal_lang(), 
      GetArenaForAllocation());
  }
  body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    body_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_body()) {
    body_.Set(from._internal_body(), 
      GetArenaForAllocation());
  }
  tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag()) {
    tag_.Set(from._internal_tag(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_data()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  badge_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    badge_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_badge()) {
    badge_.Set(from._internal_badge(), 
      GetArenaForAllocation());
  }
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_image()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  ::memcpy(&direction_, &from.direction_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_trigger_timestamp_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(show_trigger_timestamp_));
  // @@protoc_insertion_point(copy_constructor:content.NotificationDatabaseDataProto.NotificationData)
}

inline void NotificationDatabaseDataProto_NotificationData::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
lang_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  lang_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
body_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  body_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
badge_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  badge_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&direction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&show_trigger_timestamp_) -
    reinterpret_cast<char*>(&direction_)) + sizeof(show_trigger_timestamp_));
}

NotificationDatabaseDataProto_NotificationData::~NotificationDatabaseDataProto_NotificationData() {
  // @@protoc_insertion_point(destructor:content.NotificationDatabaseDataProto.NotificationData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationDatabaseDataProto_NotificationData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  lang_.Destroy();
  body_.Destroy();
  tag_.Destroy();
  icon_.Destroy();
  data_.Destroy();
  badge_.Destroy();
  image_.Destroy();
}

void NotificationDatabaseDataProto_NotificationData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationDatabaseDataProto_NotificationData::Clear() {
// @@protoc_insertion_point(message_clear_start:content.NotificationDatabaseDataProto.NotificationData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vibration_pattern_.Clear();
  actions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lang_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      icon_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      data_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      badge_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      image_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&direction_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&show_trigger_timestamp_) -
        reinterpret_cast<char*>(&direction_)) + sizeof(show_trigger_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NotificationDatabaseDataProto_NotificationData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::NotificationDatabaseDataProto_NotificationData_Direction_IsValid(val))) {
            _internal_set_direction(static_cast<::content::NotificationDatabaseDataProto_NotificationData_Direction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string lang = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lang();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string body = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string tag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string icon = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool silent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_silent(&has_bits);
          silent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 vibration_pattern = 9 [packed = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_vibration_pattern(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_vibration_pattern(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool require_interaction = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_require_interaction(&has_bits);
          require_interaction_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool renotify = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_renotify(&has_bits);
          renotify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string badge = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_badge();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string image = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 show_trigger_timestamp = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _Internal::set_has_show_trigger_timestamp(&has_bits);
          show_trigger_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationDatabaseDataProto_NotificationData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.NotificationDatabaseDataProto.NotificationData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // optional string lang = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lang(), target);
  }

  // optional string body = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // optional string tag = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tag(), target);
  }

  // optional string icon = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_icon(), target);
  }

  // optional bool silent = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_silent(), target);
  }

  // optional bytes data = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_data(), target);
  }

  // repeated int32 vibration_pattern = 9 [packed = true];
  {
    int byte_size = _vibration_pattern_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_vibration_pattern(), byte_size, target);
    }
  }

  // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_actions_size()); i < n; i++) {
    const auto& repfield = this->_internal_actions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool require_interaction = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_require_interaction(), target);
  }

  // optional int64 timestamp = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_timestamp(), target);
  }

  // optional bool renotify = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_renotify(), target);
  }

  // optional string badge = 14;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_badge(), target);
  }

  // optional string image = 15;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_image(), target);
  }

  // optional int64 show_trigger_timestamp = 16;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_show_trigger_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.NotificationDatabaseDataProto.NotificationData)
  return target;
}

size_t NotificationDatabaseDataProto_NotificationData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.NotificationDatabaseDataProto.NotificationData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 vibration_pattern = 9 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->vibration_pattern_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _vibration_pattern_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .content.NotificationDatabaseDataProto.NotificationAction actions = 10;
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional string lang = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lang());
    }

    // optional string body = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_body());
    }

    // optional string tag = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_tag());
    }

    // optional string icon = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_icon());
    }

    // optional bytes data = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_data());
    }

    // optional string badge = 14;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_badge());
    }

    // optional string image = 15;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_image());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional .content.NotificationDatabaseDataProto.NotificationData.Direction direction = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_direction());
    }

    // optional bool renotify = 13;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool silent = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool require_interaction = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional int64 timestamp = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
    }

    // optional int64 show_trigger_timestamp = 16;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::Int64Size(
          this->_internal_show_trigger_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationDatabaseDataProto_NotificationData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NotificationDatabaseDataProto_NotificationData*>(
      &from));
}

void NotificationDatabaseDataProto_NotificationData::MergeFrom(const NotificationDatabaseDataProto_NotificationData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.NotificationDatabaseDataProto.NotificationData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vibration_pattern_.MergeFrom(from.vibration_pattern_);
  actions_.MergeFrom(from.actions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lang(from._internal_lang());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_tag(from._internal_tag());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_icon(from._internal_icon());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_badge(from._internal_badge());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_image(from._internal_image());
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      direction_ = from.direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      renotify_ = from.renotify_;
    }
    if (cached_has_bits & 0x00000400u) {
      silent_ = from.silent_;
    }
    if (cached_has_bits & 0x00000800u) {
      require_interaction_ = from.require_interaction_;
    }
    if (cached_has_bits & 0x00001000u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      show_trigger_timestamp_ = from.show_trigger_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NotificationDatabaseDataProto_NotificationData::CopyFrom(const NotificationDatabaseDataProto_NotificationData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.NotificationDatabaseDataProto.NotificationData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseDataProto_NotificationData::IsInitialized() const {
  return true;
}

void NotificationDatabaseDataProto_NotificationData::InternalSwap(NotificationDatabaseDataProto_NotificationData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  vibration_pattern_.InternalSwap(&other->vibration_pattern_);
  actions_.InternalSwap(&other->actions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &lang_, lhs_arena,
      &other->lang_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &body_, lhs_arena,
      &other->body_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &badge_, lhs_arena,
      &other->badge_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationDatabaseDataProto_NotificationData, show_trigger_timestamp_)
      + sizeof(NotificationDatabaseDataProto_NotificationData::show_trigger_timestamp_)
      - PROTOBUF_FIELD_OFFSET(NotificationDatabaseDataProto_NotificationData, direction_)>(
          reinterpret_cast<char*>(&direction_),
          reinterpret_cast<char*>(&other->direction_));
}

std::string NotificationDatabaseDataProto_NotificationData::GetTypeName() const {
  return "content.NotificationDatabaseDataProto.NotificationData";
}


// ===================================================================

class NotificationDatabaseDataProto::_Internal {
 public:
  using HasBits = decltype(std::declval<NotificationDatabaseDataProto>()._has_bits_);
  static void set_has_persistent_notification_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_notification_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_service_worker_registration_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_replaced_existing_notification(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_num_clicks(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_action_button_clicks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_creation_time_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_time_until_first_click_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_time_until_last_click_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_time_until_close_millis(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_closed_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::content::NotificationDatabaseDataProto_NotificationData& notification_data(const NotificationDatabaseDataProto* msg);
  static void set_has_notification_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_has_triggered(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_is_shown_by_browser(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
};

const ::content::NotificationDatabaseDataProto_NotificationData&
NotificationDatabaseDataProto::_Internal::notification_data(const NotificationDatabaseDataProto* msg) {
  return *msg->notification_data_;
}
NotificationDatabaseDataProto::NotificationDatabaseDataProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.NotificationDatabaseDataProto)
}
NotificationDatabaseDataProto::NotificationDatabaseDataProto(const NotificationDatabaseDataProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  notification_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_notification_id()) {
    notification_id_.Set(from._internal_notification_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_notification_data()) {
    notification_data_ = new ::content::NotificationDatabaseDataProto_NotificationData(*from.notification_data_);
  } else {
    notification_data_ = nullptr;
  }
  ::memcpy(&persistent_notification_id_, &from.persistent_notification_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&closed_reason_) -
    reinterpret_cast<char*>(&persistent_notification_id_)) + sizeof(closed_reason_));
  // @@protoc_insertion_point(copy_constructor:content.NotificationDatabaseDataProto)
}

inline void NotificationDatabaseDataProto::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notification_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&notification_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&closed_reason_) -
    reinterpret_cast<char*>(&notification_data_)) + sizeof(closed_reason_));
}

NotificationDatabaseDataProto::~NotificationDatabaseDataProto() {
  // @@protoc_insertion_point(destructor:content.NotificationDatabaseDataProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NotificationDatabaseDataProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.Destroy();
  notification_id_.Destroy();
  if (this != internal_default_instance()) delete notification_data_;
}

void NotificationDatabaseDataProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NotificationDatabaseDataProto::Clear() {
// @@protoc_insertion_point(message_clear_start:content.NotificationDatabaseDataProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      notification_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(notification_data_ != nullptr);
      notification_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&persistent_notification_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_time_millis_) -
        reinterpret_cast<char*>(&persistent_notification_id_)) + sizeof(creation_time_millis_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&time_until_first_click_millis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&closed_reason_) -
        reinterpret_cast<char*>(&time_until_first_click_millis_)) + sizeof(closed_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NotificationDatabaseDataProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 persistent_notification_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_persistent_notification_id(&has_bits);
          persistent_notification_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 service_worker_registration_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_service_worker_registration_id(&has_bits);
          service_worker_registration_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_notification_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string notification_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_notification_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool replaced_existing_notification = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_replaced_existing_notification(&has_bits);
          replaced_existing_notification_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_clicks = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_num_clicks(&has_bits);
          num_clicks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_action_button_clicks = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_num_action_button_clicks(&has_bits);
          num_action_button_clicks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 creation_time_millis = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _Internal::set_has_creation_time_millis(&has_bits);
          creation_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_until_first_click_millis = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_time_until_first_click_millis(&has_bits);
          time_until_first_click_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_until_last_click_millis = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _Internal::set_has_time_until_last_click_millis(&has_bits);
          time_until_last_click_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 time_until_close_millis = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_time_until_close_millis(&has_bits);
          time_until_close_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.NotificationDatabaseDataProto.ClosedReason closed_reason = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::NotificationDatabaseDataProto_ClosedReason_IsValid(val))) {
            _internal_set_closed_reason(static_cast<::content::NotificationDatabaseDataProto_ClosedReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional bool has_triggered = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _Internal::set_has_has_triggered(&has_bits);
          has_triggered_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool is_shown_by_browser = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _Internal::set_has_is_shown_by_browser(&has_bits);
          is_shown_by_browser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NotificationDatabaseDataProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.NotificationDatabaseDataProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 persistent_notification_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_persistent_notification_id(), target);
  }

  // optional string origin = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // optional int64 service_worker_registration_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_service_worker_registration_id(), target);
  }

  // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::notification_data(this),
        _Internal::notification_data(this).GetCachedSize(), target, stream);
  }

  // optional string notification_id = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_notification_id(), target);
  }

  // optional bool replaced_existing_notification = 6;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_replaced_existing_notification(), target);
  }

  // optional int32 num_clicks = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_clicks(), target);
  }

  // optional int32 num_action_button_clicks = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_num_action_button_clicks(), target);
  }

  // optional int64 creation_time_millis = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_creation_time_millis(), target);
  }

  // optional int64 time_until_first_click_millis = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_time_until_first_click_millis(), target);
  }

  // optional int64 time_until_last_click_millis = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_time_until_last_click_millis(), target);
  }

  // optional int64 time_until_close_millis = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_time_until_close_millis(), target);
  }

  // optional .content.NotificationDatabaseDataProto.ClosedReason closed_reason = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      13, this->_internal_closed_reason(), target);
  }

  // optional bool has_triggered = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_has_triggered(), target);
  }

  // optional bool is_shown_by_browser = 15;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_is_shown_by_browser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.NotificationDatabaseDataProto)
  return target;
}

size_t NotificationDatabaseDataProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.NotificationDatabaseDataProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string origin = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional string notification_id = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_notification_id());
    }

    // optional .content.NotificationDatabaseDataProto.NotificationData notification_data = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *notification_data_);
    }

    // optional int64 persistent_notification_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_persistent_notification_id());
    }

    // optional int64 service_worker_registration_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_service_worker_registration_id());
    }

    // optional int32 num_clicks = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_clicks());
    }

    // optional int32 num_action_button_clicks = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_action_button_clicks());
    }

    // optional int64 creation_time_millis = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_time_millis());
    }

  }
  if (cached_has_bits & 0x00007f00u) {
    // optional int64 time_until_first_click_millis = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_until_first_click_millis());
    }

    // optional int64 time_until_last_click_millis = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_until_last_click_millis());
    }

    // optional int64 time_until_close_millis = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time_until_close_millis());
    }

    // optional bool replaced_existing_notification = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool has_triggered = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional bool is_shown_by_browser = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional .content.NotificationDatabaseDataProto.ClosedReason closed_reason = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_closed_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NotificationDatabaseDataProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NotificationDatabaseDataProto*>(
      &from));
}

void NotificationDatabaseDataProto::MergeFrom(const NotificationDatabaseDataProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.NotificationDatabaseDataProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_notification_id(from._internal_notification_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_notification_data()->::content::NotificationDatabaseDataProto_NotificationData::MergeFrom(from._internal_notification_data());
    }
    if (cached_has_bits & 0x00000008u) {
      persistent_notification_id_ = from.persistent_notification_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      service_worker_registration_id_ = from.service_worker_registration_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_clicks_ = from.num_clicks_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_action_button_clicks_ = from.num_action_button_clicks_;
    }
    if (cached_has_bits & 0x00000080u) {
      creation_time_millis_ = from.creation_time_millis_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      time_until_first_click_millis_ = from.time_until_first_click_millis_;
    }
    if (cached_has_bits & 0x00000200u) {
      time_until_last_click_millis_ = from.time_until_last_click_millis_;
    }
    if (cached_has_bits & 0x00000400u) {
      time_until_close_millis_ = from.time_until_close_millis_;
    }
    if (cached_has_bits & 0x00000800u) {
      replaced_existing_notification_ = from.replaced_existing_notification_;
    }
    if (cached_has_bits & 0x00001000u) {
      has_triggered_ = from.has_triggered_;
    }
    if (cached_has_bits & 0x00002000u) {
      is_shown_by_browser_ = from.is_shown_by_browser_;
    }
    if (cached_has_bits & 0x00004000u) {
      closed_reason_ = from.closed_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NotificationDatabaseDataProto::CopyFrom(const NotificationDatabaseDataProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.NotificationDatabaseDataProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotificationDatabaseDataProto::IsInitialized() const {
  return true;
}

void NotificationDatabaseDataProto::InternalSwap(NotificationDatabaseDataProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &notification_id_, lhs_arena,
      &other->notification_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NotificationDatabaseDataProto, closed_reason_)
      + sizeof(NotificationDatabaseDataProto::closed_reason_)
      - PROTOBUF_FIELD_OFFSET(NotificationDatabaseDataProto, notification_data_)>(
          reinterpret_cast<char*>(&notification_data_),
          reinterpret_cast<char*>(&other->notification_data_));
}

std::string NotificationDatabaseDataProto::GetTypeName() const {
  return "content.NotificationDatabaseDataProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::NotificationDatabaseDataProto_NotificationAction*
Arena::CreateMaybeMessage< ::content::NotificationDatabaseDataProto_NotificationAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::NotificationDatabaseDataProto_NotificationAction >(arena);
}
template<> PROTOBUF_NOINLINE ::content::NotificationDatabaseDataProto_NotificationData*
Arena::CreateMaybeMessage< ::content::NotificationDatabaseDataProto_NotificationData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::NotificationDatabaseDataProto_NotificationData >(arena);
}
template<> PROTOBUF_NOINLINE ::content::NotificationDatabaseDataProto*
Arena::CreateMaybeMessage< ::content::NotificationDatabaseDataProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::NotificationDatabaseDataProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
