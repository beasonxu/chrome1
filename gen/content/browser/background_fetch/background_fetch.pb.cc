// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: background_fetch.proto

#include "background_fetch.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR BackgroundFetchRegistration::BackgroundFetchRegistration(
    ::_pbi::ConstantInitialized)
  : unique_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , developer_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , upload_total_(uint64_t{0u})
  , uploaded_(uint64_t{0u})
  , download_total_(uint64_t{0u})
  , downloaded_(uint64_t{0u})
  , result_(0)

  , failure_reason_(0)
{}
struct BackgroundFetchRegistrationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchRegistrationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchRegistrationDefaultTypeInternal() {}
  union {
    BackgroundFetchRegistration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchRegistrationDefaultTypeInternal _BackgroundFetchRegistration_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchOptions_ImageResource_Size::BackgroundFetchOptions_ImageResource_Size(
    ::_pbi::ConstantInitialized)
  : width_(0)
  , height_(0){}
struct BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal() {}
  union {
    BackgroundFetchOptions_ImageResource_Size _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchOptions_ImageResource_SizeDefaultTypeInternal _BackgroundFetchOptions_ImageResource_Size_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchOptions_ImageResource::BackgroundFetchOptions_ImageResource(
    ::_pbi::ConstantInitialized)
  : sizes_()
  , purpose_()
  , src_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BackgroundFetchOptions_ImageResourceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchOptions_ImageResourceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchOptions_ImageResourceDefaultTypeInternal() {}
  union {
    BackgroundFetchOptions_ImageResource _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchOptions_ImageResourceDefaultTypeInternal _BackgroundFetchOptions_ImageResource_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchOptions::BackgroundFetchOptions(
    ::_pbi::ConstantInitialized)
  : icons_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_total_(uint64_t{0u}){}
struct BackgroundFetchOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchOptionsDefaultTypeInternal() {}
  union {
    BackgroundFetchOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchOptionsDefaultTypeInternal _BackgroundFetchOptions_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchMetadata::BackgroundFetchMetadata(
    ::_pbi::ConstantInitialized)
  : origin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , isolation_info_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , registration_(nullptr)
  , options_(nullptr)
  , creation_microseconds_since_unix_epoch_(int64_t{0})
  , num_fetches_(0){}
struct BackgroundFetchMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchMetadataDefaultTypeInternal() {}
  union {
    BackgroundFetchMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchMetadataDefaultTypeInternal _BackgroundFetchMetadata_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchUIOptions::BackgroundFetchUIOptions(
    ::_pbi::ConstantInitialized)
  : title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , icon_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BackgroundFetchUIOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchUIOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchUIOptionsDefaultTypeInternal() {}
  union {
    BackgroundFetchUIOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchUIOptionsDefaultTypeInternal _BackgroundFetchUIOptions_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchPendingRequest::BackgroundFetchPendingRequest(
    ::_pbi::ConstantInitialized)
  : unique_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serialized_request_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_body_size_(uint64_t{0u})
  , request_index_(0){}
struct BackgroundFetchPendingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchPendingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchPendingRequestDefaultTypeInternal() {}
  union {
    BackgroundFetchPendingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchPendingRequestDefaultTypeInternal _BackgroundFetchPendingRequest_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchActiveRequest::BackgroundFetchActiveRequest(
    ::_pbi::ConstantInitialized)
  : unique_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serialized_request_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_body_size_(uint64_t{0u})
  , request_index_(0){}
struct BackgroundFetchActiveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchActiveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchActiveRequestDefaultTypeInternal() {}
  union {
    BackgroundFetchActiveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchActiveRequestDefaultTypeInternal _BackgroundFetchActiveRequest_default_instance_;
PROTOBUF_CONSTEXPR BackgroundFetchCompletedRequest::BackgroundFetchCompletedRequest(
    ::_pbi::ConstantInitialized)
  : unique_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , serialized_request_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , download_guid_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_index_(0)
  , failure_reason_(0)
{}
struct BackgroundFetchCompletedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BackgroundFetchCompletedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BackgroundFetchCompletedRequestDefaultTypeInternal() {}
  union {
    BackgroundFetchCompletedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BackgroundFetchCompletedRequestDefaultTypeInternal _BackgroundFetchCompletedRequest_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {
bool BackgroundFetchRegistration_BackgroundFetchResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchRegistration_BackgroundFetchResult_strings[3] = {};

static const char BackgroundFetchRegistration_BackgroundFetchResult_names[] =
  "FAILURE"
  "SUCCESS"
  "UNSET";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchRegistration_BackgroundFetchResult_entries[] = {
  { {BackgroundFetchRegistration_BackgroundFetchResult_names + 0, 7}, 1 },
  { {BackgroundFetchRegistration_BackgroundFetchResult_names + 7, 7}, 2 },
  { {BackgroundFetchRegistration_BackgroundFetchResult_names + 14, 5}, 0 },
};

static const int BackgroundFetchRegistration_BackgroundFetchResult_entries_by_number[] = {
  2, // 0 -> UNSET
  0, // 1 -> FAILURE
  1, // 2 -> SUCCESS
};

const std::string& BackgroundFetchRegistration_BackgroundFetchResult_Name(
    BackgroundFetchRegistration_BackgroundFetchResult value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchRegistration_BackgroundFetchResult_entries,
          BackgroundFetchRegistration_BackgroundFetchResult_entries_by_number,
          3, BackgroundFetchRegistration_BackgroundFetchResult_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchRegistration_BackgroundFetchResult_entries,
      BackgroundFetchRegistration_BackgroundFetchResult_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchRegistration_BackgroundFetchResult_strings[idx].get();
}
bool BackgroundFetchRegistration_BackgroundFetchResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundFetchRegistration_BackgroundFetchResult* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchRegistration_BackgroundFetchResult_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchRegistration_BackgroundFetchResult>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::UNSET;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::FAILURE;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::SUCCESS;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::BackgroundFetchResult_MIN;
constexpr BackgroundFetchRegistration_BackgroundFetchResult BackgroundFetchRegistration::BackgroundFetchResult_MAX;
constexpr int BackgroundFetchRegistration::BackgroundFetchResult_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchRegistration_BackgroundFetchFailureReason_strings[8] = {};

static const char BackgroundFetchRegistration_BackgroundFetchFailureReason_names[] =
  "BAD_STATUS"
  "CANCELLED_BY_DEVELOPER"
  "CANCELLED_FROM_UI"
  "DOWNLOAD_TOTAL_EXCEEDED"
  "FETCH_ERROR"
  "NONE"
  "QUOTA_EXCEEDED"
  "SERVICE_WORKER_UNAVAILABLE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchRegistration_BackgroundFetchFailureReason_entries[] = {
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 0, 10}, 3 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 10, 22}, 2 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 32, 17}, 1 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 49, 23}, 7 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 72, 11}, 4 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 83, 4}, 0 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 87, 14}, 6 },
  { {BackgroundFetchRegistration_BackgroundFetchFailureReason_names + 101, 26}, 5 },
};

static const int BackgroundFetchRegistration_BackgroundFetchFailureReason_entries_by_number[] = {
  5, // 0 -> NONE
  2, // 1 -> CANCELLED_FROM_UI
  1, // 2 -> CANCELLED_BY_DEVELOPER
  0, // 3 -> BAD_STATUS
  4, // 4 -> FETCH_ERROR
  7, // 5 -> SERVICE_WORKER_UNAVAILABLE
  6, // 6 -> QUOTA_EXCEEDED
  3, // 7 -> DOWNLOAD_TOTAL_EXCEEDED
};

const std::string& BackgroundFetchRegistration_BackgroundFetchFailureReason_Name(
    BackgroundFetchRegistration_BackgroundFetchFailureReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchRegistration_BackgroundFetchFailureReason_entries,
          BackgroundFetchRegistration_BackgroundFetchFailureReason_entries_by_number,
          8, BackgroundFetchRegistration_BackgroundFetchFailureReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchRegistration_BackgroundFetchFailureReason_entries,
      BackgroundFetchRegistration_BackgroundFetchFailureReason_entries_by_number,
      8, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchRegistration_BackgroundFetchFailureReason_strings[idx].get();
}
bool BackgroundFetchRegistration_BackgroundFetchFailureReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundFetchRegistration_BackgroundFetchFailureReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchRegistration_BackgroundFetchFailureReason_entries, 8, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchRegistration_BackgroundFetchFailureReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::NONE;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::CANCELLED_FROM_UI;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::CANCELLED_BY_DEVELOPER;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::BAD_STATUS;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::FETCH_ERROR;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::SERVICE_WORKER_UNAVAILABLE;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::QUOTA_EXCEEDED;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::DOWNLOAD_TOTAL_EXCEEDED;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::BackgroundFetchFailureReason_MIN;
constexpr BackgroundFetchRegistration_BackgroundFetchFailureReason BackgroundFetchRegistration::BackgroundFetchFailureReason_MAX;
constexpr int BackgroundFetchRegistration::BackgroundFetchFailureReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BackgroundFetchOptions_ImageResource_Purpose_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchOptions_ImageResource_Purpose_strings[3] = {};

static const char BackgroundFetchOptions_ImageResource_Purpose_names[] =
  "ANY"
  "MASKABLE"
  "MONOCHROME";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchOptions_ImageResource_Purpose_entries[] = {
  { {BackgroundFetchOptions_ImageResource_Purpose_names + 0, 3}, 1 },
  { {BackgroundFetchOptions_ImageResource_Purpose_names + 3, 8}, 3 },
  { {BackgroundFetchOptions_ImageResource_Purpose_names + 11, 10}, 2 },
};

static const int BackgroundFetchOptions_ImageResource_Purpose_entries_by_number[] = {
  0, // 1 -> ANY
  2, // 2 -> MONOCHROME
  1, // 3 -> MASKABLE
};

const std::string& BackgroundFetchOptions_ImageResource_Purpose_Name(
    BackgroundFetchOptions_ImageResource_Purpose value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchOptions_ImageResource_Purpose_entries,
          BackgroundFetchOptions_ImageResource_Purpose_entries_by_number,
          3, BackgroundFetchOptions_ImageResource_Purpose_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchOptions_ImageResource_Purpose_entries,
      BackgroundFetchOptions_ImageResource_Purpose_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchOptions_ImageResource_Purpose_strings[idx].get();
}
bool BackgroundFetchOptions_ImageResource_Purpose_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundFetchOptions_ImageResource_Purpose* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchOptions_ImageResource_Purpose_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchOptions_ImageResource_Purpose>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::ANY;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::MONOCHROME;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::MASKABLE;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::Purpose_MIN;
constexpr BackgroundFetchOptions_ImageResource_Purpose BackgroundFetchOptions_ImageResource::Purpose_MAX;
constexpr int BackgroundFetchOptions_ImageResource::Purpose_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool BackgroundFetchStorageVersion_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> BackgroundFetchStorageVersion_strings[4] = {};

static const char BackgroundFetchStorageVersion_names[] =
  "SV_CURRENT"
  "SV_ERROR"
  "SV_UNINITIALIZED"
  "SV_UNIQUE_CACHE_KEYS";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry BackgroundFetchStorageVersion_entries[] = {
  { {BackgroundFetchStorageVersion_names + 0, 10}, 2 },
  { {BackgroundFetchStorageVersion_names + 10, 8}, -1 },
  { {BackgroundFetchStorageVersion_names + 18, 16}, 0 },
  { {BackgroundFetchStorageVersion_names + 34, 20}, 1 },
};

static const int BackgroundFetchStorageVersion_entries_by_number[] = {
  1, // -1 -> SV_ERROR
  2, // 0 -> SV_UNINITIALIZED
  3, // 1 -> SV_UNIQUE_CACHE_KEYS
  0, // 2 -> SV_CURRENT
};

const std::string& BackgroundFetchStorageVersion_Name(
    BackgroundFetchStorageVersion value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          BackgroundFetchStorageVersion_entries,
          BackgroundFetchStorageVersion_entries_by_number,
          4, BackgroundFetchStorageVersion_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      BackgroundFetchStorageVersion_entries,
      BackgroundFetchStorageVersion_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     BackgroundFetchStorageVersion_strings[idx].get();
}
bool BackgroundFetchStorageVersion_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundFetchStorageVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      BackgroundFetchStorageVersion_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<BackgroundFetchStorageVersion>(int_value);
  }
  return success;
}

// ===================================================================

class BackgroundFetchRegistration::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchRegistration>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_developer_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_upload_total(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_uploaded(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_download_total(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_downloaded(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_result(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_failure_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

BackgroundFetchRegistration::BackgroundFetchRegistration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchRegistration)
}
BackgroundFetchRegistration::BackgroundFetchRegistration(const BackgroundFetchRegistration& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_id()) {
    unique_id_.Set(from._internal_unique_id(), 
      GetArenaForAllocation());
  }
  developer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    developer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_developer_id()) {
    developer_id_.Set(from._internal_developer_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&upload_total_, &from.upload_total_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_reason_) -
    reinterpret_cast<char*>(&upload_total_)) + sizeof(failure_reason_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchRegistration)
}

inline void BackgroundFetchRegistration::SharedCtor() {
unique_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
developer_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  developer_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&upload_total_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failure_reason_) -
    reinterpret_cast<char*>(&upload_total_)) + sizeof(failure_reason_));
}

BackgroundFetchRegistration::~BackgroundFetchRegistration() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchRegistration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchRegistration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unique_id_.Destroy();
  developer_id_.Destroy();
}

void BackgroundFetchRegistration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchRegistration::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchRegistration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      developer_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&upload_total_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_reason_) -
        reinterpret_cast<char*>(&upload_total_)) + sizeof(failure_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchRegistration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes developer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_developer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 upload_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_upload_total(&has_bits);
          upload_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 uploaded = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_uploaded(&has_bits);
          uploaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 download_total = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_download_total(&has_bits);
          download_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 downloaded = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_downloaded(&has_bits);
          downloaded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchRegistration_BackgroundFetchResult_IsValid(val))) {
            _internal_set_result(static_cast<::content::proto::BackgroundFetchRegistration_BackgroundFetchResult>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(val))) {
            _internal_set_failure_reason(static_cast<::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchRegistration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchRegistration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_id(), target);
  }

  // optional bytes developer_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_developer_id(), target);
  }

  // optional uint64 upload_total = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_upload_total(), target);
  }

  // optional uint64 uploaded = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_uploaded(), target);
  }

  // optional uint64 download_total = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_download_total(), target);
  }

  // optional uint64 downloaded = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_downloaded(), target);
  }

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_result(), target);
  }

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_failure_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchRegistration)
  return target;
}

size_t BackgroundFetchRegistration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchRegistration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_id());
    }

    // optional bytes developer_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_developer_id());
    }

    // optional uint64 upload_total = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_upload_total());
    }

    // optional uint64 uploaded = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uploaded());
    }

    // optional uint64 download_total = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_download_total());
    }

    // optional uint64 downloaded = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_downloaded());
    }

    // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchResult result = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_result());
    }

    // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_failure_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchRegistration::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchRegistration*>(
      &from));
}

void BackgroundFetchRegistration::MergeFrom(const BackgroundFetchRegistration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchRegistration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_id(from._internal_unique_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_developer_id(from._internal_developer_id());
    }
    if (cached_has_bits & 0x00000004u) {
      upload_total_ = from.upload_total_;
    }
    if (cached_has_bits & 0x00000008u) {
      uploaded_ = from.uploaded_;
    }
    if (cached_has_bits & 0x00000010u) {
      download_total_ = from.download_total_;
    }
    if (cached_has_bits & 0x00000020u) {
      downloaded_ = from.downloaded_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      failure_reason_ = from.failure_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchRegistration::CopyFrom(const BackgroundFetchRegistration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchRegistration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchRegistration::IsInitialized() const {
  return true;
}

void BackgroundFetchRegistration::InternalSwap(BackgroundFetchRegistration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &unique_id_, lhs_arena,
      &other->unique_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &developer_id_, lhs_arena,
      &other->developer_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundFetchRegistration, failure_reason_)
      + sizeof(BackgroundFetchRegistration::failure_reason_)
      - PROTOBUF_FIELD_OFFSET(BackgroundFetchRegistration, upload_total_)>(
          reinterpret_cast<char*>(&upload_total_),
          reinterpret_cast<char*>(&other->upload_total_));
}

std::string BackgroundFetchRegistration::GetTypeName() const {
  return "content.proto.BackgroundFetchRegistration";
}


// ===================================================================

class BackgroundFetchOptions_ImageResource_Size::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchOptions_ImageResource_Size>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchOptions_ImageResource_Size::BackgroundFetchOptions_ImageResource_Size(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchOptions.ImageResource.Size)
}
BackgroundFetchOptions_ImageResource_Size::BackgroundFetchOptions_ImageResource_Size(const BackgroundFetchOptions_ImageResource_Size& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchOptions.ImageResource.Size)
}

inline void BackgroundFetchOptions_ImageResource_Size::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

BackgroundFetchOptions_ImageResource_Size::~BackgroundFetchOptions_ImageResource_Size() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchOptions.ImageResource.Size)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchOptions_ImageResource_Size::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BackgroundFetchOptions_ImageResource_Size::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchOptions_ImageResource_Size::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchOptions_ImageResource_Size::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchOptions_ImageResource_Size::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width(), target);
  }

  // optional int32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchOptions.ImageResource.Size)
  return target;
}

size_t BackgroundFetchOptions_ImageResource_Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
    }

    // optional int32 height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchOptions_ImageResource_Size::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchOptions_ImageResource_Size*>(
      &from));
}

void BackgroundFetchOptions_ImageResource_Size::MergeFrom(const BackgroundFetchOptions_ImageResource_Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchOptions_ImageResource_Size::CopyFrom(const BackgroundFetchOptions_ImageResource_Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchOptions.ImageResource.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchOptions_ImageResource_Size::IsInitialized() const {
  return true;
}

void BackgroundFetchOptions_ImageResource_Size::InternalSwap(BackgroundFetchOptions_ImageResource_Size* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundFetchOptions_ImageResource_Size, height_)
      + sizeof(BackgroundFetchOptions_ImageResource_Size::height_)
      - PROTOBUF_FIELD_OFFSET(BackgroundFetchOptions_ImageResource_Size, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

std::string BackgroundFetchOptions_ImageResource_Size::GetTypeName() const {
  return "content.proto.BackgroundFetchOptions.ImageResource.Size";
}


// ===================================================================

class BackgroundFetchOptions_ImageResource::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchOptions_ImageResource>()._has_bits_);
  static void set_has_src(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchOptions_ImageResource::BackgroundFetchOptions_ImageResource(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  sizes_(arena),
  purpose_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchOptions.ImageResource)
}
BackgroundFetchOptions_ImageResource::BackgroundFetchOptions_ImageResource(const BackgroundFetchOptions_ImageResource& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      sizes_(from.sizes_),
      purpose_(from.purpose_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  src_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    src_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_src()) {
    src_.Set(from._internal_src(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_type()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchOptions.ImageResource)
}

inline void BackgroundFetchOptions_ImageResource::SharedCtor() {
src_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  src_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BackgroundFetchOptions_ImageResource::~BackgroundFetchOptions_ImageResource() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchOptions.ImageResource)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchOptions_ImageResource::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  src_.Destroy();
  type_.Destroy();
}

void BackgroundFetchOptions_ImageResource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchOptions_ImageResource::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchOptions.ImageResource)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sizes_.Clear();
  purpose_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      src_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchOptions_ImageResource::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string src = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_src();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sizes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bytes type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid(val))) {
              _internal_add_purpose(static_cast<::content::proto::BackgroundFetchOptions_ImageResource_Purpose>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<32>(ptr));
        } else if (static_cast<uint8_t>(tag) == 34) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_purpose(), ptr, ctx, ::content::proto::BackgroundFetchOptions_ImageResource_Purpose_IsValid, &_internal_metadata_, 4);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchOptions_ImageResource::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchOptions.ImageResource)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string src = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_src(), target);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_sizes_size()); i < n; i++) {
    const auto& repfield = this->_internal_sizes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bytes type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_type(), target);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
  for (int i = 0, n = this->_internal_purpose_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_purpose(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchOptions.ImageResource)
  return target;
}

size_t BackgroundFetchOptions_ImageResource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchOptions.ImageResource)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Size sizes = 2;
  total_size += 1UL * this->_internal_sizes_size();
  for (const auto& msg : this->sizes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource.Purpose purpose = 4;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_purpose_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_purpose(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string src = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_src());
    }

    // optional bytes type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchOptions_ImageResource::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchOptions_ImageResource*>(
      &from));
}

void BackgroundFetchOptions_ImageResource::MergeFrom(const BackgroundFetchOptions_ImageResource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchOptions.ImageResource)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  sizes_.MergeFrom(from.sizes_);
  purpose_.MergeFrom(from.purpose_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_src(from._internal_src());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_type(from._internal_type());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchOptions_ImageResource::CopyFrom(const BackgroundFetchOptions_ImageResource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchOptions.ImageResource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchOptions_ImageResource::IsInitialized() const {
  return true;
}

void BackgroundFetchOptions_ImageResource::InternalSwap(BackgroundFetchOptions_ImageResource* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sizes_.InternalSwap(&other->sizes_);
  purpose_.InternalSwap(&other->purpose_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &src_, lhs_arena,
      &other->src_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
}

std::string BackgroundFetchOptions_ImageResource::GetTypeName() const {
  return "content.proto.BackgroundFetchOptions.ImageResource";
}


// ===================================================================

class BackgroundFetchOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchOptions>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_download_total(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchOptions::BackgroundFetchOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  icons_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchOptions)
}
BackgroundFetchOptions::BackgroundFetchOptions(const BackgroundFetchOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      icons_(from.icons_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  download_total_ = from.download_total_;
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchOptions)
}

inline void BackgroundFetchOptions::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_total_ = uint64_t{0u};
}

BackgroundFetchOptions::~BackgroundFetchOptions() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
}

void BackgroundFetchOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  icons_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    title_.ClearNonDefaultToEmpty();
  }
  download_total_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_icons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional uint64 download_total = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_download_total(&has_bits);
          download_total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_icons_size()); i < n; i++) {
    const auto& repfield = this->_internal_icons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional uint64 download_total = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_download_total(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchOptions)
  return target;
}

size_t BackgroundFetchOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.BackgroundFetchOptions.ImageResource icons = 2;
  total_size += 1UL * this->_internal_icons_size();
  for (const auto& msg : this->icons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional uint64 download_total = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_download_total());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchOptions*>(
      &from));
}

void BackgroundFetchOptions::MergeFrom(const BackgroundFetchOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  icons_.MergeFrom(from.icons_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      download_total_ = from.download_total_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchOptions::CopyFrom(const BackgroundFetchOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchOptions::IsInitialized() const {
  return true;
}

void BackgroundFetchOptions::InternalSwap(BackgroundFetchOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  icons_.InternalSwap(&other->icons_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  swap(download_total_, other->download_total_);
}

std::string BackgroundFetchOptions::GetTypeName() const {
  return "content.proto.BackgroundFetchOptions";
}


// ===================================================================

class BackgroundFetchMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchMetadata>()._has_bits_);
  static void set_has_creation_microseconds_since_unix_epoch(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_origin(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::content::proto::BackgroundFetchRegistration& registration(const BackgroundFetchMetadata* msg);
  static void set_has_registration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::content::proto::BackgroundFetchOptions& options(const BackgroundFetchMetadata* msg);
  static void set_has_options(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_num_fetches(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_isolation_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::content::proto::BackgroundFetchRegistration&
BackgroundFetchMetadata::_Internal::registration(const BackgroundFetchMetadata* msg) {
  return *msg->registration_;
}
const ::content::proto::BackgroundFetchOptions&
BackgroundFetchMetadata::_Internal::options(const BackgroundFetchMetadata* msg) {
  return *msg->options_;
}
BackgroundFetchMetadata::BackgroundFetchMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchMetadata)
}
BackgroundFetchMetadata::BackgroundFetchMetadata(const BackgroundFetchMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  origin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    origin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_origin()) {
    origin_.Set(from._internal_origin(), 
      GetArenaForAllocation());
  }
  isolation_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    isolation_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_isolation_info()) {
    isolation_info_.Set(from._internal_isolation_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_registration()) {
    registration_ = new ::content::proto::BackgroundFetchRegistration(*from.registration_);
  } else {
    registration_ = nullptr;
  }
  if (from._internal_has_options()) {
    options_ = new ::content::proto::BackgroundFetchOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  ::memcpy(&creation_microseconds_since_unix_epoch_, &from.creation_microseconds_since_unix_epoch_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_fetches_) -
    reinterpret_cast<char*>(&creation_microseconds_since_unix_epoch_)) + sizeof(num_fetches_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchMetadata)
}

inline void BackgroundFetchMetadata::SharedCtor() {
origin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  origin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
isolation_info_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  isolation_info_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&registration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_fetches_) -
    reinterpret_cast<char*>(&registration_)) + sizeof(num_fetches_));
}

BackgroundFetchMetadata::~BackgroundFetchMetadata() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  origin_.Destroy();
  isolation_info_.Destroy();
  if (this != internal_default_instance()) delete registration_;
  if (this != internal_default_instance()) delete options_;
}

void BackgroundFetchMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      origin_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      isolation_info_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(registration_ != nullptr);
      registration_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(options_ != nullptr);
      options_->Clear();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&creation_microseconds_since_unix_epoch_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_fetches_) -
        reinterpret_cast<char*>(&creation_microseconds_since_unix_epoch_)) + sizeof(num_fetches_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 creation_microseconds_since_unix_epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_creation_microseconds_since_unix_epoch(&has_bits);
          creation_microseconds_since_unix_epoch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string origin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_origin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration registration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_registration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 num_fetches = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_num_fetches(&has_bits);
          num_fetches_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string isolation_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_isolation_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 creation_microseconds_since_unix_epoch = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_creation_microseconds_since_unix_epoch(), target);
  }

  // optional string origin = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_origin(), target);
  }

  // optional .content.proto.BackgroundFetchRegistration registration = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::registration(this),
        _Internal::registration(this).GetCachedSize(), target, stream);
  }

  // optional .content.proto.BackgroundFetchOptions options = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // optional int32 num_fetches = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_fetches(), target);
  }

  // optional string isolation_info = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_isolation_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchMetadata)
  return target;
}

size_t BackgroundFetchMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string origin = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_origin());
    }

    // optional string isolation_info = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_isolation_info());
    }

    // optional .content.proto.BackgroundFetchRegistration registration = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *registration_);
    }

    // optional .content.proto.BackgroundFetchOptions options = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_);
    }

    // optional int64 creation_microseconds_since_unix_epoch = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_microseconds_since_unix_epoch());
    }

    // optional int32 num_fetches = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_fetches());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchMetadata*>(
      &from));
}

void BackgroundFetchMetadata::MergeFrom(const BackgroundFetchMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_origin(from._internal_origin());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_isolation_info(from._internal_isolation_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_registration()->::content::proto::BackgroundFetchRegistration::MergeFrom(from._internal_registration());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_options()->::content::proto::BackgroundFetchOptions::MergeFrom(from._internal_options());
    }
    if (cached_has_bits & 0x00000010u) {
      creation_microseconds_since_unix_epoch_ = from.creation_microseconds_since_unix_epoch_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_fetches_ = from.num_fetches_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchMetadata::CopyFrom(const BackgroundFetchMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchMetadata::IsInitialized() const {
  return true;
}

void BackgroundFetchMetadata::InternalSwap(BackgroundFetchMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &origin_, lhs_arena,
      &other->origin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &isolation_info_, lhs_arena,
      &other->isolation_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundFetchMetadata, num_fetches_)
      + sizeof(BackgroundFetchMetadata::num_fetches_)
      - PROTOBUF_FIELD_OFFSET(BackgroundFetchMetadata, registration_)>(
          reinterpret_cast<char*>(&registration_),
          reinterpret_cast<char*>(&other->registration_));
}

std::string BackgroundFetchMetadata::GetTypeName() const {
  return "content.proto.BackgroundFetchMetadata";
}


// ===================================================================

class BackgroundFetchUIOptions::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchUIOptions>()._has_bits_);
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_icon(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

BackgroundFetchUIOptions::BackgroundFetchUIOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchUIOptions)
}
BackgroundFetchUIOptions::BackgroundFetchUIOptions(const BackgroundFetchUIOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  icon_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    icon_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_icon()) {
    icon_.Set(from._internal_icon(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchUIOptions)
}

inline void BackgroundFetchUIOptions::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
icon_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  icon_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BackgroundFetchUIOptions::~BackgroundFetchUIOptions() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchUIOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchUIOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  icon_.Destroy();
}

void BackgroundFetchUIOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchUIOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchUIOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      icon_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchUIOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string title = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes icon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_icon();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchUIOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchUIOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string title = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // optional bytes icon = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_icon(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchUIOptions)
  return target;
}

size_t BackgroundFetchUIOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchUIOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string title = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional bytes icon = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_icon());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchUIOptions::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchUIOptions*>(
      &from));
}

void BackgroundFetchUIOptions::MergeFrom(const BackgroundFetchUIOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchUIOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_icon(from._internal_icon());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchUIOptions::CopyFrom(const BackgroundFetchUIOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchUIOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchUIOptions::IsInitialized() const {
  return true;
}

void BackgroundFetchUIOptions::InternalSwap(BackgroundFetchUIOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &icon_, lhs_arena,
      &other->icon_, rhs_arena
  );
}

std::string BackgroundFetchUIOptions::GetTypeName() const {
  return "content.proto.BackgroundFetchUIOptions";
}


// ===================================================================

class BackgroundFetchPendingRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchPendingRequest>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_request_body_size(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BackgroundFetchPendingRequest::BackgroundFetchPendingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchPendingRequest)
}
BackgroundFetchPendingRequest::BackgroundFetchPendingRequest(const BackgroundFetchPendingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_id()) {
    unique_id_.Set(from._internal_unique_id(), 
      GetArenaForAllocation());
  }
  serialized_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_request()) {
    serialized_request_.Set(from._internal_serialized_request(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_body_size_, &from.request_body_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_index_) -
    reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchPendingRequest)
}

inline void BackgroundFetchPendingRequest::SharedCtor() {
unique_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_request_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_request_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_body_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_index_) -
    reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
}

BackgroundFetchPendingRequest::~BackgroundFetchPendingRequest() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchPendingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchPendingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unique_id_.Destroy();
  serialized_request_.Destroy();
}

void BackgroundFetchPendingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchPendingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchPendingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_request_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&request_body_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_index_) -
        reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchPendingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_index(&has_bits);
          request_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serialized_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serialized_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 request_body_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_request_body_size(&has_bits);
          request_body_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchPendingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchPendingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_id(), target);
  }

  // optional int32 request_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_index(), target);
  }

  // optional string serialized_request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serialized_request(), target);
  }

  // optional uint64 request_body_size = 5;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_request_body_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchPendingRequest)
  return target;
}

size_t BackgroundFetchPendingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchPendingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_id());
    }

    // optional string serialized_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialized_request());
    }

    // optional uint64 request_body_size = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_body_size());
    }

    // optional int32 request_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchPendingRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchPendingRequest*>(
      &from));
}

void BackgroundFetchPendingRequest::MergeFrom(const BackgroundFetchPendingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchPendingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_id(from._internal_unique_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_request(from._internal_serialized_request());
    }
    if (cached_has_bits & 0x00000004u) {
      request_body_size_ = from.request_body_size_;
    }
    if (cached_has_bits & 0x00000008u) {
      request_index_ = from.request_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchPendingRequest::CopyFrom(const BackgroundFetchPendingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchPendingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchPendingRequest::IsInitialized() const {
  return true;
}

void BackgroundFetchPendingRequest::InternalSwap(BackgroundFetchPendingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &unique_id_, lhs_arena,
      &other->unique_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serialized_request_, lhs_arena,
      &other->serialized_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundFetchPendingRequest, request_index_)
      + sizeof(BackgroundFetchPendingRequest::request_index_)
      - PROTOBUF_FIELD_OFFSET(BackgroundFetchPendingRequest, request_body_size_)>(
          reinterpret_cast<char*>(&request_body_size_),
          reinterpret_cast<char*>(&other->request_body_size_));
}

std::string BackgroundFetchPendingRequest::GetTypeName() const {
  return "content.proto.BackgroundFetchPendingRequest";
}


// ===================================================================

class BackgroundFetchActiveRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchActiveRequest>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_index(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_request_body_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

BackgroundFetchActiveRequest::BackgroundFetchActiveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchActiveRequest)
}
BackgroundFetchActiveRequest::BackgroundFetchActiveRequest(const BackgroundFetchActiveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_id()) {
    unique_id_.Set(from._internal_unique_id(), 
      GetArenaForAllocation());
  }
  serialized_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_request()) {
    serialized_request_.Set(from._internal_serialized_request(), 
      GetArenaForAllocation());
  }
  download_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    download_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_download_guid()) {
    download_guid_.Set(from._internal_download_guid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_body_size_, &from.request_body_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&request_index_) -
    reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchActiveRequest)
}

inline void BackgroundFetchActiveRequest::SharedCtor() {
unique_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_request_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_request_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  download_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_body_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&request_index_) -
    reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
}

BackgroundFetchActiveRequest::~BackgroundFetchActiveRequest() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchActiveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchActiveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unique_id_.Destroy();
  serialized_request_.Destroy();
  download_guid_.Destroy();
}

void BackgroundFetchActiveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchActiveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchActiveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_request_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      download_guid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&request_body_size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&request_index_) -
        reinterpret_cast<char*>(&request_body_size_)) + sizeof(request_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchActiveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_index(&has_bits);
          request_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serialized_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serialized_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string download_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_download_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 request_body_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_request_body_size(&has_bits);
          request_body_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchActiveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchActiveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_id(), target);
  }

  // optional int32 request_index = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_index(), target);
  }

  // optional string serialized_request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serialized_request(), target);
  }

  // optional string download_guid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_download_guid(), target);
  }

  // optional uint64 request_body_size = 6;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_request_body_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchActiveRequest)
  return target;
}

size_t BackgroundFetchActiveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchActiveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_id());
    }

    // optional string serialized_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialized_request());
    }

    // optional string download_guid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_download_guid());
    }

    // optional uint64 request_body_size = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_request_body_size());
    }

    // optional int32 request_index = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_index());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchActiveRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchActiveRequest*>(
      &from));
}

void BackgroundFetchActiveRequest::MergeFrom(const BackgroundFetchActiveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchActiveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_id(from._internal_unique_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_request(from._internal_serialized_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_download_guid(from._internal_download_guid());
    }
    if (cached_has_bits & 0x00000008u) {
      request_body_size_ = from.request_body_size_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_index_ = from.request_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchActiveRequest::CopyFrom(const BackgroundFetchActiveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchActiveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchActiveRequest::IsInitialized() const {
  return true;
}

void BackgroundFetchActiveRequest::InternalSwap(BackgroundFetchActiveRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &unique_id_, lhs_arena,
      &other->unique_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serialized_request_, lhs_arena,
      &other->serialized_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &download_guid_, lhs_arena,
      &other->download_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundFetchActiveRequest, request_index_)
      + sizeof(BackgroundFetchActiveRequest::request_index_)
      - PROTOBUF_FIELD_OFFSET(BackgroundFetchActiveRequest, request_body_size_)>(
          reinterpret_cast<char*>(&request_body_size_),
          reinterpret_cast<char*>(&other->request_body_size_));
}

std::string BackgroundFetchActiveRequest::GetTypeName() const {
  return "content.proto.BackgroundFetchActiveRequest";
}


// ===================================================================

class BackgroundFetchCompletedRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BackgroundFetchCompletedRequest>()._has_bits_);
  static void set_has_unique_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_request_index(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_download_guid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_failure_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

BackgroundFetchCompletedRequest::BackgroundFetchCompletedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.BackgroundFetchCompletedRequest)
}
BackgroundFetchCompletedRequest::BackgroundFetchCompletedRequest(const BackgroundFetchCompletedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  unique_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_id()) {
    unique_id_.Set(from._internal_unique_id(), 
      GetArenaForAllocation());
  }
  serialized_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_request()) {
    serialized_request_.Set(from._internal_serialized_request(), 
      GetArenaForAllocation());
  }
  download_guid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    download_guid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_download_guid()) {
    download_guid_.Set(from._internal_download_guid(), 
      GetArenaForAllocation());
  }
  ::memcpy(&request_index_, &from.request_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&failure_reason_) -
    reinterpret_cast<char*>(&request_index_)) + sizeof(failure_reason_));
  // @@protoc_insertion_point(copy_constructor:content.proto.BackgroundFetchCompletedRequest)
}

inline void BackgroundFetchCompletedRequest::SharedCtor() {
unique_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serialized_request_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_request_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
download_guid_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  download_guid_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&request_index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&failure_reason_) -
    reinterpret_cast<char*>(&request_index_)) + sizeof(failure_reason_));
}

BackgroundFetchCompletedRequest::~BackgroundFetchCompletedRequest() {
  // @@protoc_insertion_point(destructor:content.proto.BackgroundFetchCompletedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BackgroundFetchCompletedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  unique_id_.Destroy();
  serialized_request_.Destroy();
  download_guid_.Destroy();
}

void BackgroundFetchCompletedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BackgroundFetchCompletedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.BackgroundFetchCompletedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      unique_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      serialized_request_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      download_guid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&request_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&failure_reason_) -
        reinterpret_cast<char*>(&request_index_)) + sizeof(failure_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* BackgroundFetchCompletedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string unique_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_unique_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 request_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_request_index(&has_bits);
          request_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string serialized_request = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_serialized_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string download_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_download_guid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason_IsValid(val))) {
            _internal_set_failure_reason(static_cast<::content::proto::BackgroundFetchRegistration_BackgroundFetchFailureReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BackgroundFetchCompletedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.BackgroundFetchCompletedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string unique_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_unique_id(), target);
  }

  // optional int32 request_index = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_request_index(), target);
  }

  // optional string serialized_request = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_serialized_request(), target);
  }

  // optional string download_guid = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_download_guid(), target);
  }

  // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_failure_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.BackgroundFetchCompletedRequest)
  return target;
}

size_t BackgroundFetchCompletedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.BackgroundFetchCompletedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string unique_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_id());
    }

    // optional string serialized_request = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_serialized_request());
    }

    // optional string download_guid = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_download_guid());
    }

    // optional int32 request_index = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_request_index());
    }

    // optional .content.proto.BackgroundFetchRegistration.BackgroundFetchFailureReason failure_reason = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_failure_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BackgroundFetchCompletedRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const BackgroundFetchCompletedRequest*>(
      &from));
}

void BackgroundFetchCompletedRequest::MergeFrom(const BackgroundFetchCompletedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.BackgroundFetchCompletedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_unique_id(from._internal_unique_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_serialized_request(from._internal_serialized_request());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_download_guid(from._internal_download_guid());
    }
    if (cached_has_bits & 0x00000008u) {
      request_index_ = from.request_index_;
    }
    if (cached_has_bits & 0x00000010u) {
      failure_reason_ = from.failure_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void BackgroundFetchCompletedRequest::CopyFrom(const BackgroundFetchCompletedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.BackgroundFetchCompletedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BackgroundFetchCompletedRequest::IsInitialized() const {
  return true;
}

void BackgroundFetchCompletedRequest::InternalSwap(BackgroundFetchCompletedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &unique_id_, lhs_arena,
      &other->unique_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serialized_request_, lhs_arena,
      &other->serialized_request_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &download_guid_, lhs_arena,
      &other->download_guid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BackgroundFetchCompletedRequest, failure_reason_)
      + sizeof(BackgroundFetchCompletedRequest::failure_reason_)
      - PROTOBUF_FIELD_OFFSET(BackgroundFetchCompletedRequest, request_index_)>(
          reinterpret_cast<char*>(&request_index_),
          reinterpret_cast<char*>(&other->request_index_));
}

std::string BackgroundFetchCompletedRequest::GetTypeName() const {
  return "content.proto.BackgroundFetchCompletedRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchRegistration*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchRegistration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchRegistration >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchOptions_ImageResource_Size*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchOptions_ImageResource_Size >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchOptions_ImageResource_Size >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchOptions_ImageResource*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchOptions_ImageResource >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchOptions_ImageResource >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchOptions*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchMetadata*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchUIOptions*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchUIOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchUIOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchPendingRequest*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchPendingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchPendingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchActiveRequest*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchActiveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchActiveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::BackgroundFetchCompletedRequest*
Arena::CreateMaybeMessage< ::content::proto::BackgroundFetchCompletedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::BackgroundFetchCompletedRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
