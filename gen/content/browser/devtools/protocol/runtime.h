// This file is generated by TypeBuilder_h.template.

// Copyright (c) 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef content_protocol_Runtime_h
#define content_protocol_Runtime_h

#include "content/common/content_export.h"
#include "content/browser/devtools/protocol/protocol.h"
// For each imported domain we generate a ValueConversions struct instead of a full domain definition
// and include Domain::API version from there.

namespace content {
namespace protocol {
namespace Runtime {
using ScriptId = String;
class WebDriverValue;
using RemoteObjectId = String;
using UnserializableValue = String;
class RemoteObject;
class CustomPreview;
class ObjectPreview;
class PropertyPreview;
class EntryPreview;
using Timestamp = double;
class CallFrame;
class StackTrace;
using UniqueDebuggerId = String;
class StackTraceId;

// ------------- Forward and enum declarations.

namespace ConsoleAPICalled {
namespace TypeEnum {
CONTENT_EXPORT extern const char* Log;
CONTENT_EXPORT extern const char* Debug;
CONTENT_EXPORT extern const char* Info;
CONTENT_EXPORT extern const char* Error;
CONTENT_EXPORT extern const char* Warning;
CONTENT_EXPORT extern const char* Dir;
CONTENT_EXPORT extern const char* Dirxml;
CONTENT_EXPORT extern const char* Table;
CONTENT_EXPORT extern const char* Trace;
CONTENT_EXPORT extern const char* Clear;
CONTENT_EXPORT extern const char* StartGroup;
CONTENT_EXPORT extern const char* StartGroupCollapsed;
CONTENT_EXPORT extern const char* EndGroup;
CONTENT_EXPORT extern const char* Assert;
CONTENT_EXPORT extern const char* Profile;
CONTENT_EXPORT extern const char* ProfileEnd;
CONTENT_EXPORT extern const char* Count;
CONTENT_EXPORT extern const char* TimeEnd;
} // TypeEnum
} // ConsoleAPICalled

// ------------- Type and builder declarations.

class CONTENT_EXPORT WebDriverValue : public ::crdtp::ProtocolObject<WebDriverValue> {
public:
    ~WebDriverValue() override { }

    struct CONTENT_EXPORT TypeEnum {
        static const char* Undefined;
        static const char* Null;
        static const char* String;
        static const char* Number;
        static const char* Boolean;
        static const char* Bigint;
        static const char* Regexp;
        static const char* Date;
        static const char* Symbol;
        static const char* Array;
        static const char* Object;
        static const char* Function;
        static const char* Map;
        static const char* Set;
        static const char* Weakmap;
        static const char* Weakset;
        static const char* Error;
        static const char* Proxy;
        static const char* Promise;
        static const char* Typedarray;
        static const char* Arraybuffer;
        static const char* Node;
        static const char* Window;
    }; // TypeEnum

    String GetType() { return m_type; }
    void SetType(const String& value) { m_type = value; }

    bool HasValue() { return m_value.isJust(); }
    protocol::Value* GetValue(protocol::Value* defaultValue) { return m_value.isJust() ? m_value.fromJust() : defaultValue; }
    void SetValue(std::unique_ptr<protocol::Value> value) { m_value = std::move(value); }

    bool HasObjectId() { return m_objectId.isJust(); }
    String GetObjectId(const String& defaultValue) { return m_objectId.isJust() ? m_objectId.fromJust() : defaultValue; }
    void SetObjectId(const String& value) { m_objectId = value; }

    template<int STATE>
    class WebDriverValueBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            TypeSet = 1 << 1,
            AllFieldsSet = (TypeSet | 0)};


        WebDriverValueBuilder<STATE | TypeSet>& SetType(const String& value)
        {
            static_assert(!(STATE & TypeSet), "property type should not be set yet");
            m_result->SetType(value);
            return castState<TypeSet>();
        }

        WebDriverValueBuilder<STATE>& SetValue(std::unique_ptr<protocol::Value> value)
        {
            m_result->SetValue(std::move(value));
            return *this;
        }

        WebDriverValueBuilder<STATE>& SetObjectId(const String& value)
        {
            m_result->SetObjectId(value);
            return *this;
        }

        std::unique_ptr<WebDriverValue> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class WebDriverValue;
        WebDriverValueBuilder() : m_result(new WebDriverValue()) { }

        template<int STEP> WebDriverValueBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<WebDriverValueBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::WebDriverValue> m_result;
    };

    static WebDriverValueBuilder<0> Create()
    {
        return WebDriverValueBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    WebDriverValue()
    {
    }

    String m_type;
    Maybe<protocol::Value> m_value;
    Maybe<String> m_objectId;
};


class CONTENT_EXPORT RemoteObject : public ::crdtp::ProtocolObject<RemoteObject> {
public:
    ~RemoteObject() override { }

    struct CONTENT_EXPORT TypeEnum {
        static const char* Object;
        static const char* Function;
        static const char* Undefined;
        static const char* String;
        static const char* Number;
        static const char* Boolean;
        static const char* Symbol;
        static const char* Bigint;
    }; // TypeEnum

    String GetType() { return m_type; }
    void SetType(const String& value) { m_type = value; }

    struct CONTENT_EXPORT SubtypeEnum {
        static const char* Array;
        static const char* Null;
        static const char* Node;
        static const char* Regexp;
        static const char* Date;
        static const char* Map;
        static const char* Set;
        static const char* Weakmap;
        static const char* Weakset;
        static const char* Iterator;
        static const char* Generator;
        static const char* Error;
        static const char* Proxy;
        static const char* Promise;
        static const char* Typedarray;
        static const char* Arraybuffer;
        static const char* Dataview;
        static const char* Webassemblymemory;
        static const char* Wasmvalue;
    }; // SubtypeEnum

    bool HasSubtype() { return m_subtype.isJust(); }
    String GetSubtype(const String& defaultValue) { return m_subtype.isJust() ? m_subtype.fromJust() : defaultValue; }
    void SetSubtype(const String& value) { m_subtype = value; }

    bool HasClassName() { return m_className.isJust(); }
    String GetClassName(const String& defaultValue) { return m_className.isJust() ? m_className.fromJust() : defaultValue; }
    void SetClassName(const String& value) { m_className = value; }

    bool HasValue() { return m_value.isJust(); }
    protocol::Value* GetValue(protocol::Value* defaultValue) { return m_value.isJust() ? m_value.fromJust() : defaultValue; }
    void SetValue(std::unique_ptr<protocol::Value> value) { m_value = std::move(value); }

    bool HasUnserializableValue() { return m_unserializableValue.isJust(); }
    String GetUnserializableValue(const String& defaultValue) { return m_unserializableValue.isJust() ? m_unserializableValue.fromJust() : defaultValue; }
    void SetUnserializableValue(const String& value) { m_unserializableValue = value; }

    bool HasDescription() { return m_description.isJust(); }
    String GetDescription(const String& defaultValue) { return m_description.isJust() ? m_description.fromJust() : defaultValue; }
    void SetDescription(const String& value) { m_description = value; }

    bool HasWebDriverValue() { return m_webDriverValue.isJust(); }
    protocol::Runtime::WebDriverValue* GetWebDriverValue(protocol::Runtime::WebDriverValue* defaultValue) { return m_webDriverValue.isJust() ? m_webDriverValue.fromJust() : defaultValue; }
    void SetWebDriverValue(std::unique_ptr<protocol::Runtime::WebDriverValue> value) { m_webDriverValue = std::move(value); }

    bool HasObjectId() { return m_objectId.isJust(); }
    String GetObjectId(const String& defaultValue) { return m_objectId.isJust() ? m_objectId.fromJust() : defaultValue; }
    void SetObjectId(const String& value) { m_objectId = value; }

    bool HasPreview() { return m_preview.isJust(); }
    protocol::Runtime::ObjectPreview* GetPreview(protocol::Runtime::ObjectPreview* defaultValue) { return m_preview.isJust() ? m_preview.fromJust() : defaultValue; }
    void SetPreview(std::unique_ptr<protocol::Runtime::ObjectPreview> value) { m_preview = std::move(value); }

    bool HasCustomPreview() { return m_customPreview.isJust(); }
    protocol::Runtime::CustomPreview* GetCustomPreview(protocol::Runtime::CustomPreview* defaultValue) { return m_customPreview.isJust() ? m_customPreview.fromJust() : defaultValue; }
    void SetCustomPreview(std::unique_ptr<protocol::Runtime::CustomPreview> value) { m_customPreview = std::move(value); }

    template<int STATE>
    class RemoteObjectBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            TypeSet = 1 << 1,
            AllFieldsSet = (TypeSet | 0)};


        RemoteObjectBuilder<STATE | TypeSet>& SetType(const String& value)
        {
            static_assert(!(STATE & TypeSet), "property type should not be set yet");
            m_result->SetType(value);
            return castState<TypeSet>();
        }

        RemoteObjectBuilder<STATE>& SetSubtype(const String& value)
        {
            m_result->SetSubtype(value);
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetClassName(const String& value)
        {
            m_result->SetClassName(value);
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetValue(std::unique_ptr<protocol::Value> value)
        {
            m_result->SetValue(std::move(value));
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetUnserializableValue(const String& value)
        {
            m_result->SetUnserializableValue(value);
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetDescription(const String& value)
        {
            m_result->SetDescription(value);
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetWebDriverValue(std::unique_ptr<protocol::Runtime::WebDriverValue> value)
        {
            m_result->SetWebDriverValue(std::move(value));
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetObjectId(const String& value)
        {
            m_result->SetObjectId(value);
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetPreview(std::unique_ptr<protocol::Runtime::ObjectPreview> value)
        {
            m_result->SetPreview(std::move(value));
            return *this;
        }

        RemoteObjectBuilder<STATE>& SetCustomPreview(std::unique_ptr<protocol::Runtime::CustomPreview> value)
        {
            m_result->SetCustomPreview(std::move(value));
            return *this;
        }

        std::unique_ptr<RemoteObject> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class RemoteObject;
        RemoteObjectBuilder() : m_result(new RemoteObject()) { }

        template<int STEP> RemoteObjectBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<RemoteObjectBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::RemoteObject> m_result;
    };

    static RemoteObjectBuilder<0> Create()
    {
        return RemoteObjectBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    RemoteObject()
    {
    }

    String m_type;
    Maybe<String> m_subtype;
    Maybe<String> m_className;
    Maybe<protocol::Value> m_value;
    Maybe<String> m_unserializableValue;
    Maybe<String> m_description;
    Maybe<protocol::Runtime::WebDriverValue> m_webDriverValue;
    Maybe<String> m_objectId;
    Maybe<protocol::Runtime::ObjectPreview> m_preview;
    Maybe<protocol::Runtime::CustomPreview> m_customPreview;
};


class CONTENT_EXPORT CustomPreview : public ::crdtp::ProtocolObject<CustomPreview> {
public:
    ~CustomPreview() override { }

    String GetHeader() { return m_header; }
    void SetHeader(const String& value) { m_header = value; }

    bool HasBodyGetterId() { return m_bodyGetterId.isJust(); }
    String GetBodyGetterId(const String& defaultValue) { return m_bodyGetterId.isJust() ? m_bodyGetterId.fromJust() : defaultValue; }
    void SetBodyGetterId(const String& value) { m_bodyGetterId = value; }

    template<int STATE>
    class CustomPreviewBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            HeaderSet = 1 << 1,
            AllFieldsSet = (HeaderSet | 0)};


        CustomPreviewBuilder<STATE | HeaderSet>& SetHeader(const String& value)
        {
            static_assert(!(STATE & HeaderSet), "property header should not be set yet");
            m_result->SetHeader(value);
            return castState<HeaderSet>();
        }

        CustomPreviewBuilder<STATE>& SetBodyGetterId(const String& value)
        {
            m_result->SetBodyGetterId(value);
            return *this;
        }

        std::unique_ptr<CustomPreview> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class CustomPreview;
        CustomPreviewBuilder() : m_result(new CustomPreview()) { }

        template<int STEP> CustomPreviewBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<CustomPreviewBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::CustomPreview> m_result;
    };

    static CustomPreviewBuilder<0> Create()
    {
        return CustomPreviewBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    CustomPreview()
    {
    }

    String m_header;
    Maybe<String> m_bodyGetterId;
};


class CONTENT_EXPORT ObjectPreview : public ::crdtp::ProtocolObject<ObjectPreview> {
public:
    ~ObjectPreview() override { }

    struct CONTENT_EXPORT TypeEnum {
        static const char* Object;
        static const char* Function;
        static const char* Undefined;
        static const char* String;
        static const char* Number;
        static const char* Boolean;
        static const char* Symbol;
        static const char* Bigint;
    }; // TypeEnum

    String GetType() { return m_type; }
    void SetType(const String& value) { m_type = value; }

    struct CONTENT_EXPORT SubtypeEnum {
        static const char* Array;
        static const char* Null;
        static const char* Node;
        static const char* Regexp;
        static const char* Date;
        static const char* Map;
        static const char* Set;
        static const char* Weakmap;
        static const char* Weakset;
        static const char* Iterator;
        static const char* Generator;
        static const char* Error;
        static const char* Proxy;
        static const char* Promise;
        static const char* Typedarray;
        static const char* Arraybuffer;
        static const char* Dataview;
        static const char* Webassemblymemory;
        static const char* Wasmvalue;
    }; // SubtypeEnum

    bool HasSubtype() { return m_subtype.isJust(); }
    String GetSubtype(const String& defaultValue) { return m_subtype.isJust() ? m_subtype.fromJust() : defaultValue; }
    void SetSubtype(const String& value) { m_subtype = value; }

    bool HasDescription() { return m_description.isJust(); }
    String GetDescription(const String& defaultValue) { return m_description.isJust() ? m_description.fromJust() : defaultValue; }
    void SetDescription(const String& value) { m_description = value; }

    bool GetOverflow() { return m_overflow; }
    void SetOverflow(bool value) { m_overflow = value; }

    protocol::Array<protocol::Runtime::PropertyPreview>* GetProperties() { return m_properties.get(); }
    void SetProperties(std::unique_ptr<protocol::Array<protocol::Runtime::PropertyPreview>> value) { m_properties = std::move(value); }

    bool HasEntries() { return m_entries.isJust(); }
    protocol::Array<protocol::Runtime::EntryPreview>* GetEntries(protocol::Array<protocol::Runtime::EntryPreview>* defaultValue) { return m_entries.isJust() ? m_entries.fromJust() : defaultValue; }
    void SetEntries(std::unique_ptr<protocol::Array<protocol::Runtime::EntryPreview>> value) { m_entries = std::move(value); }

    template<int STATE>
    class ObjectPreviewBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            TypeSet = 1 << 1,
            OverflowSet = 1 << 2,
            PropertiesSet = 1 << 3,
            AllFieldsSet = (TypeSet | OverflowSet | PropertiesSet | 0)};


        ObjectPreviewBuilder<STATE | TypeSet>& SetType(const String& value)
        {
            static_assert(!(STATE & TypeSet), "property type should not be set yet");
            m_result->SetType(value);
            return castState<TypeSet>();
        }

        ObjectPreviewBuilder<STATE>& SetSubtype(const String& value)
        {
            m_result->SetSubtype(value);
            return *this;
        }

        ObjectPreviewBuilder<STATE>& SetDescription(const String& value)
        {
            m_result->SetDescription(value);
            return *this;
        }

        ObjectPreviewBuilder<STATE | OverflowSet>& SetOverflow(bool value)
        {
            static_assert(!(STATE & OverflowSet), "property overflow should not be set yet");
            m_result->SetOverflow(value);
            return castState<OverflowSet>();
        }

        ObjectPreviewBuilder<STATE | PropertiesSet>& SetProperties(std::unique_ptr<protocol::Array<protocol::Runtime::PropertyPreview>> value)
        {
            static_assert(!(STATE & PropertiesSet), "property properties should not be set yet");
            m_result->SetProperties(std::move(value));
            return castState<PropertiesSet>();
        }

        ObjectPreviewBuilder<STATE>& SetEntries(std::unique_ptr<protocol::Array<protocol::Runtime::EntryPreview>> value)
        {
            m_result->SetEntries(std::move(value));
            return *this;
        }

        std::unique_ptr<ObjectPreview> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class ObjectPreview;
        ObjectPreviewBuilder() : m_result(new ObjectPreview()) { }

        template<int STEP> ObjectPreviewBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<ObjectPreviewBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::ObjectPreview> m_result;
    };

    static ObjectPreviewBuilder<0> Create()
    {
        return ObjectPreviewBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    ObjectPreview()
    {
          m_overflow = false;
    }

    String m_type;
    Maybe<String> m_subtype;
    Maybe<String> m_description;
    bool m_overflow;
    std::unique_ptr<protocol::Array<protocol::Runtime::PropertyPreview>> m_properties;
    Maybe<protocol::Array<protocol::Runtime::EntryPreview>> m_entries;
};


class CONTENT_EXPORT PropertyPreview : public ::crdtp::ProtocolObject<PropertyPreview> {
public:
    ~PropertyPreview() override { }

    String GetName() { return m_name; }
    void SetName(const String& value) { m_name = value; }

    struct CONTENT_EXPORT TypeEnum {
        static const char* Object;
        static const char* Function;
        static const char* Undefined;
        static const char* String;
        static const char* Number;
        static const char* Boolean;
        static const char* Symbol;
        static const char* Accessor;
        static const char* Bigint;
    }; // TypeEnum

    String GetType() { return m_type; }
    void SetType(const String& value) { m_type = value; }

    bool HasValue() { return m_value.isJust(); }
    String GetValue(const String& defaultValue) { return m_value.isJust() ? m_value.fromJust() : defaultValue; }
    void SetValue(const String& value) { m_value = value; }

    bool HasValuePreview() { return m_valuePreview.isJust(); }
    protocol::Runtime::ObjectPreview* GetValuePreview(protocol::Runtime::ObjectPreview* defaultValue) { return m_valuePreview.isJust() ? m_valuePreview.fromJust() : defaultValue; }
    void SetValuePreview(std::unique_ptr<protocol::Runtime::ObjectPreview> value) { m_valuePreview = std::move(value); }

    struct CONTENT_EXPORT SubtypeEnum {
        static const char* Array;
        static const char* Null;
        static const char* Node;
        static const char* Regexp;
        static const char* Date;
        static const char* Map;
        static const char* Set;
        static const char* Weakmap;
        static const char* Weakset;
        static const char* Iterator;
        static const char* Generator;
        static const char* Error;
        static const char* Proxy;
        static const char* Promise;
        static const char* Typedarray;
        static const char* Arraybuffer;
        static const char* Dataview;
        static const char* Webassemblymemory;
        static const char* Wasmvalue;
    }; // SubtypeEnum

    bool HasSubtype() { return m_subtype.isJust(); }
    String GetSubtype(const String& defaultValue) { return m_subtype.isJust() ? m_subtype.fromJust() : defaultValue; }
    void SetSubtype(const String& value) { m_subtype = value; }

    template<int STATE>
    class PropertyPreviewBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            NameSet = 1 << 1,
            TypeSet = 1 << 2,
            AllFieldsSet = (NameSet | TypeSet | 0)};


        PropertyPreviewBuilder<STATE | NameSet>& SetName(const String& value)
        {
            static_assert(!(STATE & NameSet), "property name should not be set yet");
            m_result->SetName(value);
            return castState<NameSet>();
        }

        PropertyPreviewBuilder<STATE | TypeSet>& SetType(const String& value)
        {
            static_assert(!(STATE & TypeSet), "property type should not be set yet");
            m_result->SetType(value);
            return castState<TypeSet>();
        }

        PropertyPreviewBuilder<STATE>& SetValue(const String& value)
        {
            m_result->SetValue(value);
            return *this;
        }

        PropertyPreviewBuilder<STATE>& SetValuePreview(std::unique_ptr<protocol::Runtime::ObjectPreview> value)
        {
            m_result->SetValuePreview(std::move(value));
            return *this;
        }

        PropertyPreviewBuilder<STATE>& SetSubtype(const String& value)
        {
            m_result->SetSubtype(value);
            return *this;
        }

        std::unique_ptr<PropertyPreview> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class PropertyPreview;
        PropertyPreviewBuilder() : m_result(new PropertyPreview()) { }

        template<int STEP> PropertyPreviewBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<PropertyPreviewBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::PropertyPreview> m_result;
    };

    static PropertyPreviewBuilder<0> Create()
    {
        return PropertyPreviewBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    PropertyPreview()
    {
    }

    String m_name;
    String m_type;
    Maybe<String> m_value;
    Maybe<protocol::Runtime::ObjectPreview> m_valuePreview;
    Maybe<String> m_subtype;
};


class CONTENT_EXPORT EntryPreview : public ::crdtp::ProtocolObject<EntryPreview> {
public:
    ~EntryPreview() override { }

    bool HasKey() { return m_key.isJust(); }
    protocol::Runtime::ObjectPreview* GetKey(protocol::Runtime::ObjectPreview* defaultValue) { return m_key.isJust() ? m_key.fromJust() : defaultValue; }
    void SetKey(std::unique_ptr<protocol::Runtime::ObjectPreview> value) { m_key = std::move(value); }

    protocol::Runtime::ObjectPreview* GetValue() { return m_value.get(); }
    void SetValue(std::unique_ptr<protocol::Runtime::ObjectPreview> value) { m_value = std::move(value); }

    template<int STATE>
    class EntryPreviewBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            ValueSet = 1 << 1,
            AllFieldsSet = (ValueSet | 0)};


        EntryPreviewBuilder<STATE>& SetKey(std::unique_ptr<protocol::Runtime::ObjectPreview> value)
        {
            m_result->SetKey(std::move(value));
            return *this;
        }

        EntryPreviewBuilder<STATE | ValueSet>& SetValue(std::unique_ptr<protocol::Runtime::ObjectPreview> value)
        {
            static_assert(!(STATE & ValueSet), "property value should not be set yet");
            m_result->SetValue(std::move(value));
            return castState<ValueSet>();
        }

        std::unique_ptr<EntryPreview> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class EntryPreview;
        EntryPreviewBuilder() : m_result(new EntryPreview()) { }

        template<int STEP> EntryPreviewBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<EntryPreviewBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::EntryPreview> m_result;
    };

    static EntryPreviewBuilder<0> Create()
    {
        return EntryPreviewBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    EntryPreview()
    {
    }

    Maybe<protocol::Runtime::ObjectPreview> m_key;
    std::unique_ptr<protocol::Runtime::ObjectPreview> m_value;
};


class CONTENT_EXPORT CallFrame : public ::crdtp::ProtocolObject<CallFrame> {
public:
    ~CallFrame() override { }

    String GetFunctionName() { return m_functionName; }
    void SetFunctionName(const String& value) { m_functionName = value; }

    String GetScriptId() { return m_scriptId; }
    void SetScriptId(const String& value) { m_scriptId = value; }

    String GetUrl() { return m_url; }
    void SetUrl(const String& value) { m_url = value; }

    int GetLineNumber() { return m_lineNumber; }
    void SetLineNumber(int value) { m_lineNumber = value; }

    int GetColumnNumber() { return m_columnNumber; }
    void SetColumnNumber(int value) { m_columnNumber = value; }

    template<int STATE>
    class CallFrameBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            FunctionNameSet = 1 << 1,
            ScriptIdSet = 1 << 2,
            UrlSet = 1 << 3,
            LineNumberSet = 1 << 4,
            ColumnNumberSet = 1 << 5,
            AllFieldsSet = (FunctionNameSet | ScriptIdSet | UrlSet | LineNumberSet | ColumnNumberSet | 0)};


        CallFrameBuilder<STATE | FunctionNameSet>& SetFunctionName(const String& value)
        {
            static_assert(!(STATE & FunctionNameSet), "property functionName should not be set yet");
            m_result->SetFunctionName(value);
            return castState<FunctionNameSet>();
        }

        CallFrameBuilder<STATE | ScriptIdSet>& SetScriptId(const String& value)
        {
            static_assert(!(STATE & ScriptIdSet), "property scriptId should not be set yet");
            m_result->SetScriptId(value);
            return castState<ScriptIdSet>();
        }

        CallFrameBuilder<STATE | UrlSet>& SetUrl(const String& value)
        {
            static_assert(!(STATE & UrlSet), "property url should not be set yet");
            m_result->SetUrl(value);
            return castState<UrlSet>();
        }

        CallFrameBuilder<STATE | LineNumberSet>& SetLineNumber(int value)
        {
            static_assert(!(STATE & LineNumberSet), "property lineNumber should not be set yet");
            m_result->SetLineNumber(value);
            return castState<LineNumberSet>();
        }

        CallFrameBuilder<STATE | ColumnNumberSet>& SetColumnNumber(int value)
        {
            static_assert(!(STATE & ColumnNumberSet), "property columnNumber should not be set yet");
            m_result->SetColumnNumber(value);
            return castState<ColumnNumberSet>();
        }

        std::unique_ptr<CallFrame> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class CallFrame;
        CallFrameBuilder() : m_result(new CallFrame()) { }

        template<int STEP> CallFrameBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<CallFrameBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::CallFrame> m_result;
    };

    static CallFrameBuilder<0> Create()
    {
        return CallFrameBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    CallFrame()
    {
          m_lineNumber = 0;
          m_columnNumber = 0;
    }

    String m_functionName;
    String m_scriptId;
    String m_url;
    int m_lineNumber;
    int m_columnNumber;
};


class CONTENT_EXPORT StackTrace : public ::crdtp::ProtocolObject<StackTrace> {
public:
    ~StackTrace() override { }

    bool HasDescription() { return m_description.isJust(); }
    String GetDescription(const String& defaultValue) { return m_description.isJust() ? m_description.fromJust() : defaultValue; }
    void SetDescription(const String& value) { m_description = value; }

    protocol::Array<protocol::Runtime::CallFrame>* GetCallFrames() { return m_callFrames.get(); }
    void SetCallFrames(std::unique_ptr<protocol::Array<protocol::Runtime::CallFrame>> value) { m_callFrames = std::move(value); }

    bool HasParent() { return m_parent.isJust(); }
    protocol::Runtime::StackTrace* GetParent(protocol::Runtime::StackTrace* defaultValue) { return m_parent.isJust() ? m_parent.fromJust() : defaultValue; }
    void SetParent(std::unique_ptr<protocol::Runtime::StackTrace> value) { m_parent = std::move(value); }

    bool HasParentId() { return m_parentId.isJust(); }
    protocol::Runtime::StackTraceId* GetParentId(protocol::Runtime::StackTraceId* defaultValue) { return m_parentId.isJust() ? m_parentId.fromJust() : defaultValue; }
    void SetParentId(std::unique_ptr<protocol::Runtime::StackTraceId> value) { m_parentId = std::move(value); }

    template<int STATE>
    class StackTraceBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            CallFramesSet = 1 << 1,
            AllFieldsSet = (CallFramesSet | 0)};


        StackTraceBuilder<STATE>& SetDescription(const String& value)
        {
            m_result->SetDescription(value);
            return *this;
        }

        StackTraceBuilder<STATE | CallFramesSet>& SetCallFrames(std::unique_ptr<protocol::Array<protocol::Runtime::CallFrame>> value)
        {
            static_assert(!(STATE & CallFramesSet), "property callFrames should not be set yet");
            m_result->SetCallFrames(std::move(value));
            return castState<CallFramesSet>();
        }

        StackTraceBuilder<STATE>& SetParent(std::unique_ptr<protocol::Runtime::StackTrace> value)
        {
            m_result->SetParent(std::move(value));
            return *this;
        }

        StackTraceBuilder<STATE>& SetParentId(std::unique_ptr<protocol::Runtime::StackTraceId> value)
        {
            m_result->SetParentId(std::move(value));
            return *this;
        }

        std::unique_ptr<StackTrace> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class StackTrace;
        StackTraceBuilder() : m_result(new StackTrace()) { }

        template<int STEP> StackTraceBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<StackTraceBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::StackTrace> m_result;
    };

    static StackTraceBuilder<0> Create()
    {
        return StackTraceBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    StackTrace()
    {
    }

    Maybe<String> m_description;
    std::unique_ptr<protocol::Array<protocol::Runtime::CallFrame>> m_callFrames;
    Maybe<protocol::Runtime::StackTrace> m_parent;
    Maybe<protocol::Runtime::StackTraceId> m_parentId;
};


class CONTENT_EXPORT StackTraceId : public ::crdtp::ProtocolObject<StackTraceId> {
public:
    ~StackTraceId() override { }

    String GetId() { return m_id; }
    void SetId(const String& value) { m_id = value; }

    bool HasDebuggerId() { return m_debuggerId.isJust(); }
    String GetDebuggerId(const String& defaultValue) { return m_debuggerId.isJust() ? m_debuggerId.fromJust() : defaultValue; }
    void SetDebuggerId(const String& value) { m_debuggerId = value; }

    template<int STATE>
    class StackTraceIdBuilder {
    public:
        enum {
            NoFieldsSet = 0,
            IdSet = 1 << 1,
            AllFieldsSet = (IdSet | 0)};


        StackTraceIdBuilder<STATE | IdSet>& SetId(const String& value)
        {
            static_assert(!(STATE & IdSet), "property id should not be set yet");
            m_result->SetId(value);
            return castState<IdSet>();
        }

        StackTraceIdBuilder<STATE>& SetDebuggerId(const String& value)
        {
            m_result->SetDebuggerId(value);
            return *this;
        }

        std::unique_ptr<StackTraceId> Build()
        {
            static_assert(STATE == AllFieldsSet, "state should be AllFieldsSet");
            return std::move(m_result);
        }

    private:
        friend class StackTraceId;
        StackTraceIdBuilder() : m_result(new StackTraceId()) { }

        template<int STEP> StackTraceIdBuilder<STATE | STEP>& castState()
        {
            return *reinterpret_cast<StackTraceIdBuilder<STATE | STEP>*>(this);
        }

        std::unique_ptr<protocol::Runtime::StackTraceId> m_result;
    };

    static StackTraceIdBuilder<0> Create()
    {
        return StackTraceIdBuilder<0>();
    }

private:
    DECLARE_SERIALIZATION_SUPPORT();

    StackTraceId()
    {
    }

    String m_id;
    Maybe<String> m_debuggerId;
};


// ------------- Backend interface.

class CONTENT_EXPORT Backend {
public:
    virtual ~Backend() { }


    virtual DispatchResponse Disable()
    {
        return DispatchResponse::Success();
    }
};

// ------------- Frontend interface.

class CONTENT_EXPORT Frontend {
public:
  explicit Frontend(FrontendChannel* frontend_channel) : frontend_channel_(frontend_channel) {}

  void flush();
  void sendRawNotification(std::unique_ptr<Serializable>);
 private:
  FrontendChannel* frontend_channel_;
};

// ------------- Dispatcher.

class CONTENT_EXPORT Dispatcher {
public:
    static void wire(UberDispatcher*, Backend*);

private:
    Dispatcher() { }
};

// ------------- Metainfo.

class CONTENT_EXPORT Metainfo {
public:
    using BackendClass = Backend;
    using FrontendClass = Frontend;
    using DispatcherClass = Dispatcher;
    static const char domainName[];
    static const char commandPrefix[];
    static const char version[];
};

} // namespace Runtime
} // namespace content
} // namespace protocol

#endif // !defined(content_protocol_Runtime_h)
