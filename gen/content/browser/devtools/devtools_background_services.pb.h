// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: devtools_background_services.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_devtools_5fbackground_5fservices_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_devtools_5fbackground_5fservices_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_devtools_5fbackground_5fservices_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_devtools_5fbackground_5fservices_2eproto {
  static const uint32_t offsets[];
};
namespace content {
namespace devtools {
namespace proto {
class BackgroundServiceEvent;
struct BackgroundServiceEventDefaultTypeInternal;
extern BackgroundServiceEventDefaultTypeInternal _BackgroundServiceEvent_default_instance_;
class BackgroundServiceEvent_EventMetadataEntry_DoNotUse;
struct BackgroundServiceEvent_EventMetadataEntry_DoNotUseDefaultTypeInternal;
extern BackgroundServiceEvent_EventMetadataEntry_DoNotUseDefaultTypeInternal _BackgroundServiceEvent_EventMetadataEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace devtools
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::devtools::proto::BackgroundServiceEvent* Arena::CreateMaybeMessage<::content::devtools::proto::BackgroundServiceEvent>(Arena*);
template<> ::content::devtools::proto::BackgroundServiceEvent_EventMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::content::devtools::proto::BackgroundServiceEvent_EventMetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {
namespace devtools {
namespace proto {

enum BackgroundService : int {
  UNKNOWN = 0,
  TEST_BACKGROUND_SERVICE = 1,
  BACKGROUND_FETCH = 2,
  BACKGROUND_SYNC = 3,
  PUSH_MESSAGING = 4,
  NOTIFICATIONS = 5,
  PAYMENT_HANDLER = 6,
  PERIODIC_BACKGROUND_SYNC = 7,
  COUNT = 8
};
bool BackgroundService_IsValid(int value);
constexpr BackgroundService BackgroundService_MIN = UNKNOWN;
constexpr BackgroundService BackgroundService_MAX = COUNT;
constexpr int BackgroundService_ARRAYSIZE = BackgroundService_MAX + 1;

const std::string& BackgroundService_Name(BackgroundService value);
template<typename T>
inline const std::string& BackgroundService_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BackgroundService>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BackgroundService_Name.");
  return BackgroundService_Name(static_cast<BackgroundService>(enum_t_value));
}
bool BackgroundService_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BackgroundService* value);
// ===================================================================

class BackgroundServiceEvent_EventMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<BackgroundServiceEvent_EventMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<BackgroundServiceEvent_EventMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  BackgroundServiceEvent_EventMetadataEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BackgroundServiceEvent_EventMetadataEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BackgroundServiceEvent_EventMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BackgroundServiceEvent_EventMetadataEntry_DoNotUse& other);
  static const BackgroundServiceEvent_EventMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BackgroundServiceEvent_EventMetadataEntry_DoNotUse*>(&_BackgroundServiceEvent_EventMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_devtools_5fbackground_5fservices_2eproto;
};

// -------------------------------------------------------------------

class BackgroundServiceEvent final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.devtools.proto.BackgroundServiceEvent) */ {
 public:
  inline BackgroundServiceEvent() : BackgroundServiceEvent(nullptr) {}
  ~BackgroundServiceEvent() override;
  explicit PROTOBUF_CONSTEXPR BackgroundServiceEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BackgroundServiceEvent(const BackgroundServiceEvent& from);
  BackgroundServiceEvent(BackgroundServiceEvent&& from) noexcept
    : BackgroundServiceEvent() {
    *this = ::std::move(from);
  }

  inline BackgroundServiceEvent& operator=(const BackgroundServiceEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline BackgroundServiceEvent& operator=(BackgroundServiceEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BackgroundServiceEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const BackgroundServiceEvent* internal_default_instance() {
    return reinterpret_cast<const BackgroundServiceEvent*>(
               &_BackgroundServiceEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BackgroundServiceEvent& a, BackgroundServiceEvent& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BackgroundServiceEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BackgroundServiceEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BackgroundServiceEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BackgroundServiceEvent>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BackgroundServiceEvent& from);
  void MergeFrom(const BackgroundServiceEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BackgroundServiceEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.devtools.proto.BackgroundServiceEvent";
  }
  protected:
  explicit BackgroundServiceEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEventMetadataFieldNumber = 7,
    kOriginFieldNumber = 2,
    kEventNameFieldNumber = 5,
    kInstanceIdFieldNumber = 6,
    kTimestampFieldNumber = 1,
    kServiceWorkerRegistrationIdFieldNumber = 3,
    kBackgroundServiceFieldNumber = 4,
  };
  // map<string, string> event_metadata = 7;
  int event_metadata_size() const;
  private:
  int _internal_event_metadata_size() const;
  public:
  void clear_event_metadata();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_event_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_event_metadata();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      event_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_event_metadata();

  // optional string origin = 2;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const std::string& origin() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_origin(ArgT0&& arg0, ArgT... args);
  std::string* mutable_origin();
  PROTOBUF_NODISCARD std::string* release_origin();
  void set_allocated_origin(std::string* origin);
  private:
  const std::string& _internal_origin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_origin(const std::string& value);
  std::string* _internal_mutable_origin();
  public:

  // optional string event_name = 5;
  bool has_event_name() const;
  private:
  bool _internal_has_event_name() const;
  public:
  void clear_event_name();
  const std::string& event_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event_name();
  PROTOBUF_NODISCARD std::string* release_event_name();
  void set_allocated_event_name(std::string* event_name);
  private:
  const std::string& _internal_event_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_name(const std::string& value);
  std::string* _internal_mutable_event_name();
  public:

  // optional string instance_id = 6;
  bool has_instance_id() const;
  private:
  bool _internal_has_instance_id() const;
  public:
  void clear_instance_id();
  const std::string& instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instance_id();
  PROTOBUF_NODISCARD std::string* release_instance_id();
  void set_allocated_instance_id(std::string* instance_id);
  private:
  const std::string& _internal_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instance_id(const std::string& value);
  std::string* _internal_mutable_instance_id();
  public:

  // optional int64 timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // optional int64 service_worker_registration_id = 3;
  bool has_service_worker_registration_id() const;
  private:
  bool _internal_has_service_worker_registration_id() const;
  public:
  void clear_service_worker_registration_id();
  int64_t service_worker_registration_id() const;
  void set_service_worker_registration_id(int64_t value);
  private:
  int64_t _internal_service_worker_registration_id() const;
  void _internal_set_service_worker_registration_id(int64_t value);
  public:

  // optional .content.devtools.proto.BackgroundService background_service = 4;
  bool has_background_service() const;
  private:
  bool _internal_has_background_service() const;
  public:
  void clear_background_service();
  ::content::devtools::proto::BackgroundService background_service() const;
  void set_background_service(::content::devtools::proto::BackgroundService value);
  private:
  ::content::devtools::proto::BackgroundService _internal_background_service() const;
  void _internal_set_background_service(::content::devtools::proto::BackgroundService value);
  public:

  // @@protoc_insertion_point(class_scope:content.devtools.proto.BackgroundServiceEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      BackgroundServiceEvent_EventMetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> event_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr origin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instance_id_;
  int64_t timestamp_;
  int64_t service_worker_registration_id_;
  int background_service_;
  friend struct ::TableStruct_devtools_5fbackground_5fservices_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// BackgroundServiceEvent

// optional int64 timestamp = 1;
inline bool BackgroundServiceEvent::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BackgroundServiceEvent::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void BackgroundServiceEvent::clear_timestamp() {
  timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000008u;
}
inline int64_t BackgroundServiceEvent::_internal_timestamp() const {
  return timestamp_;
}
inline int64_t BackgroundServiceEvent::timestamp() const {
  // @@protoc_insertion_point(field_get:content.devtools.proto.BackgroundServiceEvent.timestamp)
  return _internal_timestamp();
}
inline void BackgroundServiceEvent::_internal_set_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000008u;
  timestamp_ = value;
}
inline void BackgroundServiceEvent::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:content.devtools.proto.BackgroundServiceEvent.timestamp)
}

// optional string origin = 2;
inline bool BackgroundServiceEvent::_internal_has_origin() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BackgroundServiceEvent::has_origin() const {
  return _internal_has_origin();
}
inline void BackgroundServiceEvent::clear_origin() {
  origin_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BackgroundServiceEvent::origin() const {
  // @@protoc_insertion_point(field_get:content.devtools.proto.BackgroundServiceEvent.origin)
  return _internal_origin();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackgroundServiceEvent::set_origin(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 origin_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.devtools.proto.BackgroundServiceEvent.origin)
}
inline std::string* BackgroundServiceEvent::mutable_origin() {
  std::string* _s = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:content.devtools.proto.BackgroundServiceEvent.origin)
  return _s;
}
inline const std::string& BackgroundServiceEvent::_internal_origin() const {
  return origin_.Get();
}
inline void BackgroundServiceEvent::_internal_set_origin(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  origin_.Set(value, GetArenaForAllocation());
}
inline std::string* BackgroundServiceEvent::_internal_mutable_origin() {
  _has_bits_[0] |= 0x00000001u;
  return origin_.Mutable(GetArenaForAllocation());
}
inline std::string* BackgroundServiceEvent::release_origin() {
  // @@protoc_insertion_point(field_release:content.devtools.proto.BackgroundServiceEvent.origin)
  if (!_internal_has_origin()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = origin_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BackgroundServiceEvent::set_allocated_origin(std::string* origin) {
  if (origin != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  origin_.SetAllocated(origin, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (origin_.IsDefault()) {
    origin_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.devtools.proto.BackgroundServiceEvent.origin)
}

// optional int64 service_worker_registration_id = 3;
inline bool BackgroundServiceEvent::_internal_has_service_worker_registration_id() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BackgroundServiceEvent::has_service_worker_registration_id() const {
  return _internal_has_service_worker_registration_id();
}
inline void BackgroundServiceEvent::clear_service_worker_registration_id() {
  service_worker_registration_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t BackgroundServiceEvent::_internal_service_worker_registration_id() const {
  return service_worker_registration_id_;
}
inline int64_t BackgroundServiceEvent::service_worker_registration_id() const {
  // @@protoc_insertion_point(field_get:content.devtools.proto.BackgroundServiceEvent.service_worker_registration_id)
  return _internal_service_worker_registration_id();
}
inline void BackgroundServiceEvent::_internal_set_service_worker_registration_id(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  service_worker_registration_id_ = value;
}
inline void BackgroundServiceEvent::set_service_worker_registration_id(int64_t value) {
  _internal_set_service_worker_registration_id(value);
  // @@protoc_insertion_point(field_set:content.devtools.proto.BackgroundServiceEvent.service_worker_registration_id)
}

// optional .content.devtools.proto.BackgroundService background_service = 4;
inline bool BackgroundServiceEvent::_internal_has_background_service() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BackgroundServiceEvent::has_background_service() const {
  return _internal_has_background_service();
}
inline void BackgroundServiceEvent::clear_background_service() {
  background_service_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::content::devtools::proto::BackgroundService BackgroundServiceEvent::_internal_background_service() const {
  return static_cast< ::content::devtools::proto::BackgroundService >(background_service_);
}
inline ::content::devtools::proto::BackgroundService BackgroundServiceEvent::background_service() const {
  // @@protoc_insertion_point(field_get:content.devtools.proto.BackgroundServiceEvent.background_service)
  return _internal_background_service();
}
inline void BackgroundServiceEvent::_internal_set_background_service(::content::devtools::proto::BackgroundService value) {
  assert(::content::devtools::proto::BackgroundService_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  background_service_ = value;
}
inline void BackgroundServiceEvent::set_background_service(::content::devtools::proto::BackgroundService value) {
  _internal_set_background_service(value);
  // @@protoc_insertion_point(field_set:content.devtools.proto.BackgroundServiceEvent.background_service)
}

// optional string event_name = 5;
inline bool BackgroundServiceEvent::_internal_has_event_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BackgroundServiceEvent::has_event_name() const {
  return _internal_has_event_name();
}
inline void BackgroundServiceEvent::clear_event_name() {
  event_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BackgroundServiceEvent::event_name() const {
  // @@protoc_insertion_point(field_get:content.devtools.proto.BackgroundServiceEvent.event_name)
  return _internal_event_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackgroundServiceEvent::set_event_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 event_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.devtools.proto.BackgroundServiceEvent.event_name)
}
inline std::string* BackgroundServiceEvent::mutable_event_name() {
  std::string* _s = _internal_mutable_event_name();
  // @@protoc_insertion_point(field_mutable:content.devtools.proto.BackgroundServiceEvent.event_name)
  return _s;
}
inline const std::string& BackgroundServiceEvent::_internal_event_name() const {
  return event_name_.Get();
}
inline void BackgroundServiceEvent::_internal_set_event_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  event_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BackgroundServiceEvent::_internal_mutable_event_name() {
  _has_bits_[0] |= 0x00000002u;
  return event_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BackgroundServiceEvent::release_event_name() {
  // @@protoc_insertion_point(field_release:content.devtools.proto.BackgroundServiceEvent.event_name)
  if (!_internal_has_event_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = event_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_name_.IsDefault()) {
    event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BackgroundServiceEvent::set_allocated_event_name(std::string* event_name) {
  if (event_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  event_name_.SetAllocated(event_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_name_.IsDefault()) {
    event_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.devtools.proto.BackgroundServiceEvent.event_name)
}

// optional string instance_id = 6;
inline bool BackgroundServiceEvent::_internal_has_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BackgroundServiceEvent::has_instance_id() const {
  return _internal_has_instance_id();
}
inline void BackgroundServiceEvent::clear_instance_id() {
  instance_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BackgroundServiceEvent::instance_id() const {
  // @@protoc_insertion_point(field_get:content.devtools.proto.BackgroundServiceEvent.instance_id)
  return _internal_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BackgroundServiceEvent::set_instance_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.devtools.proto.BackgroundServiceEvent.instance_id)
}
inline std::string* BackgroundServiceEvent::mutable_instance_id() {
  std::string* _s = _internal_mutable_instance_id();
  // @@protoc_insertion_point(field_mutable:content.devtools.proto.BackgroundServiceEvent.instance_id)
  return _s;
}
inline const std::string& BackgroundServiceEvent::_internal_instance_id() const {
  return instance_id_.Get();
}
inline void BackgroundServiceEvent::_internal_set_instance_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BackgroundServiceEvent::_internal_mutable_instance_id() {
  _has_bits_[0] |= 0x00000004u;
  return instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* BackgroundServiceEvent::release_instance_id() {
  // @@protoc_insertion_point(field_release:content.devtools.proto.BackgroundServiceEvent.instance_id)
  if (!_internal_has_instance_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = instance_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_id_.IsDefault()) {
    instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BackgroundServiceEvent::set_allocated_instance_id(std::string* instance_id) {
  if (instance_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  instance_id_.SetAllocated(instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instance_id_.IsDefault()) {
    instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.devtools.proto.BackgroundServiceEvent.instance_id)
}

// map<string, string> event_metadata = 7;
inline int BackgroundServiceEvent::_internal_event_metadata_size() const {
  return event_metadata_.size();
}
inline int BackgroundServiceEvent::event_metadata_size() const {
  return _internal_event_metadata_size();
}
inline void BackgroundServiceEvent::clear_event_metadata() {
  event_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BackgroundServiceEvent::_internal_event_metadata() const {
  return event_metadata_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
BackgroundServiceEvent::event_metadata() const {
  // @@protoc_insertion_point(field_map:content.devtools.proto.BackgroundServiceEvent.event_metadata)
  return _internal_event_metadata();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BackgroundServiceEvent::_internal_mutable_event_metadata() {
  return event_metadata_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
BackgroundServiceEvent::mutable_event_metadata() {
  // @@protoc_insertion_point(field_mutable_map:content.devtools.proto.BackgroundServiceEvent.event_metadata)
  return _internal_mutable_event_metadata();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace devtools
}  // namespace content

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::content::devtools::proto::BackgroundService> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_devtools_5fbackground_5fservices_2eproto
