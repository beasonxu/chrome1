// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: private_aggregation_budgets.proto

#include "private_aggregation_budgets.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
namespace proto {
PROTOBUF_CONSTEXPR PrivateAggregationBudgetPerHour::PrivateAggregationBudgetPerHour(
    ::_pbi::ConstantInitialized)
  : hour_start_timestamp_(int64_t{0})
  , budget_used_(0){}
struct PrivateAggregationBudgetPerHourDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateAggregationBudgetPerHourDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateAggregationBudgetPerHourDefaultTypeInternal() {}
  union {
    PrivateAggregationBudgetPerHour _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateAggregationBudgetPerHourDefaultTypeInternal _PrivateAggregationBudgetPerHour_default_instance_;
PROTOBUF_CONSTEXPR PrivateAggregationBudgets::PrivateAggregationBudgets(
    ::_pbi::ConstantInitialized)
  : fledge_budgets_()
  , shared_storage_budgets_(){}
struct PrivateAggregationBudgetsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PrivateAggregationBudgetsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PrivateAggregationBudgetsDefaultTypeInternal() {}
  union {
    PrivateAggregationBudgets _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PrivateAggregationBudgetsDefaultTypeInternal _PrivateAggregationBudgets_default_instance_;
}  // namespace proto
}  // namespace content
namespace content {
namespace proto {

// ===================================================================

class PrivateAggregationBudgetPerHour::_Internal {
 public:
};

PrivateAggregationBudgetPerHour::PrivateAggregationBudgetPerHour(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.PrivateAggregationBudgetPerHour)
}
PrivateAggregationBudgetPerHour::PrivateAggregationBudgetPerHour(const PrivateAggregationBudgetPerHour& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&hour_start_timestamp_, &from.hour_start_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&budget_used_) -
    reinterpret_cast<char*>(&hour_start_timestamp_)) + sizeof(budget_used_));
  // @@protoc_insertion_point(copy_constructor:content.proto.PrivateAggregationBudgetPerHour)
}

inline void PrivateAggregationBudgetPerHour::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hour_start_timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&budget_used_) -
    reinterpret_cast<char*>(&hour_start_timestamp_)) + sizeof(budget_used_));
}

PrivateAggregationBudgetPerHour::~PrivateAggregationBudgetPerHour() {
  // @@protoc_insertion_point(destructor:content.proto.PrivateAggregationBudgetPerHour)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateAggregationBudgetPerHour::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrivateAggregationBudgetPerHour::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateAggregationBudgetPerHour::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.PrivateAggregationBudgetPerHour)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&hour_start_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&budget_used_) -
      reinterpret_cast<char*>(&hour_start_timestamp_)) + sizeof(budget_used_));
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateAggregationBudgetPerHour::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 hour_start_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          hour_start_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 budget_used = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          budget_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateAggregationBudgetPerHour::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.PrivateAggregationBudgetPerHour)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 hour_start_timestamp = 1;
  if (this->_internal_hour_start_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_hour_start_timestamp(), target);
  }

  // int32 budget_used = 2;
  if (this->_internal_budget_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_budget_used(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.PrivateAggregationBudgetPerHour)
  return target;
}

size_t PrivateAggregationBudgetPerHour::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.PrivateAggregationBudgetPerHour)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 hour_start_timestamp = 1;
  if (this->_internal_hour_start_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_hour_start_timestamp());
  }

  // int32 budget_used = 2;
  if (this->_internal_budget_used() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_budget_used());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateAggregationBudgetPerHour::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateAggregationBudgetPerHour*>(
      &from));
}

void PrivateAggregationBudgetPerHour::MergeFrom(const PrivateAggregationBudgetPerHour& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.PrivateAggregationBudgetPerHour)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hour_start_timestamp() != 0) {
    _internal_set_hour_start_timestamp(from._internal_hour_start_timestamp());
  }
  if (from._internal_budget_used() != 0) {
    _internal_set_budget_used(from._internal_budget_used());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateAggregationBudgetPerHour::CopyFrom(const PrivateAggregationBudgetPerHour& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.PrivateAggregationBudgetPerHour)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateAggregationBudgetPerHour::IsInitialized() const {
  return true;
}

void PrivateAggregationBudgetPerHour::InternalSwap(PrivateAggregationBudgetPerHour* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrivateAggregationBudgetPerHour, budget_used_)
      + sizeof(PrivateAggregationBudgetPerHour::budget_used_)
      - PROTOBUF_FIELD_OFFSET(PrivateAggregationBudgetPerHour, hour_start_timestamp_)>(
          reinterpret_cast<char*>(&hour_start_timestamp_),
          reinterpret_cast<char*>(&other->hour_start_timestamp_));
}

std::string PrivateAggregationBudgetPerHour::GetTypeName() const {
  return "content.proto.PrivateAggregationBudgetPerHour";
}


// ===================================================================

class PrivateAggregationBudgets::_Internal {
 public:
};

PrivateAggregationBudgets::PrivateAggregationBudgets(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  fledge_budgets_(arena),
  shared_storage_budgets_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.proto.PrivateAggregationBudgets)
}
PrivateAggregationBudgets::PrivateAggregationBudgets(const PrivateAggregationBudgets& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      fledge_budgets_(from.fledge_budgets_),
      shared_storage_budgets_(from.shared_storage_budgets_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:content.proto.PrivateAggregationBudgets)
}

inline void PrivateAggregationBudgets::SharedCtor() {
}

PrivateAggregationBudgets::~PrivateAggregationBudgets() {
  // @@protoc_insertion_point(destructor:content.proto.PrivateAggregationBudgets)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PrivateAggregationBudgets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrivateAggregationBudgets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrivateAggregationBudgets::Clear() {
// @@protoc_insertion_point(message_clear_start:content.proto.PrivateAggregationBudgets)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fledge_budgets_.Clear();
  shared_storage_budgets_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PrivateAggregationBudgets::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content.proto.PrivateAggregationBudgetPerHour fledge_budgets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fledge_budgets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .content.proto.PrivateAggregationBudgetPerHour shared_storage_budgets = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shared_storage_budgets(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrivateAggregationBudgets::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.proto.PrivateAggregationBudgets)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.proto.PrivateAggregationBudgetPerHour fledge_budgets = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fledge_budgets_size()); i < n; i++) {
    const auto& repfield = this->_internal_fledge_budgets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .content.proto.PrivateAggregationBudgetPerHour shared_storage_budgets = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shared_storage_budgets_size()); i < n; i++) {
    const auto& repfield = this->_internal_shared_storage_budgets(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.proto.PrivateAggregationBudgets)
  return target;
}

size_t PrivateAggregationBudgets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.proto.PrivateAggregationBudgets)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.proto.PrivateAggregationBudgetPerHour fledge_budgets = 1;
  total_size += 1UL * this->_internal_fledge_budgets_size();
  for (const auto& msg : this->fledge_budgets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .content.proto.PrivateAggregationBudgetPerHour shared_storage_budgets = 2;
  total_size += 1UL * this->_internal_shared_storage_budgets_size();
  for (const auto& msg : this->shared_storage_budgets_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PrivateAggregationBudgets::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PrivateAggregationBudgets*>(
      &from));
}

void PrivateAggregationBudgets::MergeFrom(const PrivateAggregationBudgets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.proto.PrivateAggregationBudgets)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fledge_budgets_.MergeFrom(from.fledge_budgets_);
  shared_storage_budgets_.MergeFrom(from.shared_storage_budgets_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PrivateAggregationBudgets::CopyFrom(const PrivateAggregationBudgets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.proto.PrivateAggregationBudgets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrivateAggregationBudgets::IsInitialized() const {
  return true;
}

void PrivateAggregationBudgets::InternalSwap(PrivateAggregationBudgets* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fledge_budgets_.InternalSwap(&other->fledge_budgets_);
  shared_storage_budgets_.InternalSwap(&other->shared_storage_budgets_);
}

std::string PrivateAggregationBudgets::GetTypeName() const {
  return "content.proto.PrivateAggregationBudgets";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::proto::PrivateAggregationBudgetPerHour*
Arena::CreateMaybeMessage< ::content::proto::PrivateAggregationBudgetPerHour >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::PrivateAggregationBudgetPerHour >(arena);
}
template<> PROTOBUF_NOINLINE ::content::proto::PrivateAggregationBudgets*
Arena::CreateMaybeMessage< ::content::proto::PrivateAggregationBudgets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::proto::PrivateAggregationBudgets >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
