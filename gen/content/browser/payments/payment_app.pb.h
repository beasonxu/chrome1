// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment_app.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_payment_5fapp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_payment_5fapp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_payment_5fapp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_payment_5fapp_2eproto {
  static const uint32_t offsets[];
};
namespace content {
class ImageSizeProto;
struct ImageSizeProtoDefaultTypeInternal;
extern ImageSizeProtoDefaultTypeInternal _ImageSizeProto_default_instance_;
class StoredPaymentAppProto;
struct StoredPaymentAppProtoDefaultTypeInternal;
extern StoredPaymentAppProtoDefaultTypeInternal _StoredPaymentAppProto_default_instance_;
class StoredPaymentInstrumentImageObject;
struct StoredPaymentInstrumentImageObjectDefaultTypeInternal;
extern StoredPaymentInstrumentImageObjectDefaultTypeInternal _StoredPaymentInstrumentImageObject_default_instance_;
class StoredPaymentInstrumentKeyInfoProto;
struct StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal;
extern StoredPaymentInstrumentKeyInfoProtoDefaultTypeInternal _StoredPaymentInstrumentKeyInfoProto_default_instance_;
class StoredPaymentInstrumentProto;
struct StoredPaymentInstrumentProtoDefaultTypeInternal;
extern StoredPaymentInstrumentProtoDefaultTypeInternal _StoredPaymentInstrumentProto_default_instance_;
class StoredRelatedApplicationProto;
struct StoredRelatedApplicationProtoDefaultTypeInternal;
extern StoredRelatedApplicationProtoDefaultTypeInternal _StoredRelatedApplicationProto_default_instance_;
class SupportedDelegationsProto;
struct SupportedDelegationsProtoDefaultTypeInternal;
extern SupportedDelegationsProtoDefaultTypeInternal _SupportedDelegationsProto_default_instance_;
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> ::content::ImageSizeProto* Arena::CreateMaybeMessage<::content::ImageSizeProto>(Arena*);
template<> ::content::StoredPaymentAppProto* Arena::CreateMaybeMessage<::content::StoredPaymentAppProto>(Arena*);
template<> ::content::StoredPaymentInstrumentImageObject* Arena::CreateMaybeMessage<::content::StoredPaymentInstrumentImageObject>(Arena*);
template<> ::content::StoredPaymentInstrumentKeyInfoProto* Arena::CreateMaybeMessage<::content::StoredPaymentInstrumentKeyInfoProto>(Arena*);
template<> ::content::StoredPaymentInstrumentProto* Arena::CreateMaybeMessage<::content::StoredPaymentInstrumentProto>(Arena*);
template<> ::content::StoredRelatedApplicationProto* Arena::CreateMaybeMessage<::content::StoredRelatedApplicationProto>(Arena*);
template<> ::content::SupportedDelegationsProto* Arena::CreateMaybeMessage<::content::SupportedDelegationsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace content {

// ===================================================================

class StoredPaymentInstrumentKeyInfoProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentInstrumentKeyInfoProto) */ {
 public:
  inline StoredPaymentInstrumentKeyInfoProto() : StoredPaymentInstrumentKeyInfoProto(nullptr) {}
  ~StoredPaymentInstrumentKeyInfoProto() override;
  explicit PROTOBUF_CONSTEXPR StoredPaymentInstrumentKeyInfoProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoredPaymentInstrumentKeyInfoProto(const StoredPaymentInstrumentKeyInfoProto& from);
  StoredPaymentInstrumentKeyInfoProto(StoredPaymentInstrumentKeyInfoProto&& from) noexcept
    : StoredPaymentInstrumentKeyInfoProto() {
    *this = ::std::move(from);
  }

  inline StoredPaymentInstrumentKeyInfoProto& operator=(const StoredPaymentInstrumentKeyInfoProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentInstrumentKeyInfoProto& operator=(StoredPaymentInstrumentKeyInfoProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StoredPaymentInstrumentKeyInfoProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoredPaymentInstrumentKeyInfoProto* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentInstrumentKeyInfoProto*>(
               &_StoredPaymentInstrumentKeyInfoProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StoredPaymentInstrumentKeyInfoProto& a, StoredPaymentInstrumentKeyInfoProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StoredPaymentInstrumentKeyInfoProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredPaymentInstrumentKeyInfoProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoredPaymentInstrumentKeyInfoProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoredPaymentInstrumentKeyInfoProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StoredPaymentInstrumentKeyInfoProto& from);
  void MergeFrom(const StoredPaymentInstrumentKeyInfoProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentInstrumentKeyInfoProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentInstrumentKeyInfoProto";
  }
  protected:
  explicit StoredPaymentInstrumentKeyInfoProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kInsertionOrderFieldNumber = 1,
  };
  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional uint64 insertion_order = 1;
  bool has_insertion_order() const;
  private:
  bool _internal_has_insertion_order() const;
  public:
  void clear_insertion_order();
  uint64_t insertion_order() const;
  void set_insertion_order(uint64_t value);
  private:
  uint64_t _internal_insertion_order() const;
  void _internal_set_insertion_order(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.StoredPaymentInstrumentKeyInfoProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  uint64_t insertion_order_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class ImageSizeProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.ImageSizeProto) */ {
 public:
  inline ImageSizeProto() : ImageSizeProto(nullptr) {}
  ~ImageSizeProto() override;
  explicit PROTOBUF_CONSTEXPR ImageSizeProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImageSizeProto(const ImageSizeProto& from);
  ImageSizeProto(ImageSizeProto&& from) noexcept
    : ImageSizeProto() {
    *this = ::std::move(from);
  }

  inline ImageSizeProto& operator=(const ImageSizeProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImageSizeProto& operator=(ImageSizeProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ImageSizeProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImageSizeProto* internal_default_instance() {
    return reinterpret_cast<const ImageSizeProto*>(
               &_ImageSizeProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ImageSizeProto& a, ImageSizeProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ImageSizeProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImageSizeProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImageSizeProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImageSizeProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ImageSizeProto& from);
  void MergeFrom(const ImageSizeProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ImageSizeProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.ImageSizeProto";
  }
  protected:
  explicit ImageSizeProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // optional uint64 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  uint64_t width() const;
  void set_width(uint64_t value);
  private:
  uint64_t _internal_width() const;
  void _internal_set_width(uint64_t value);
  public:

  // optional uint64 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  uint64_t height() const;
  void set_height(uint64_t value);
  private:
  uint64_t _internal_height() const;
  void _internal_set_height(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.ImageSizeProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t width_;
  uint64_t height_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredPaymentInstrumentImageObject final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentInstrumentImageObject) */ {
 public:
  inline StoredPaymentInstrumentImageObject() : StoredPaymentInstrumentImageObject(nullptr) {}
  ~StoredPaymentInstrumentImageObject() override;
  explicit PROTOBUF_CONSTEXPR StoredPaymentInstrumentImageObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoredPaymentInstrumentImageObject(const StoredPaymentInstrumentImageObject& from);
  StoredPaymentInstrumentImageObject(StoredPaymentInstrumentImageObject&& from) noexcept
    : StoredPaymentInstrumentImageObject() {
    *this = ::std::move(from);
  }

  inline StoredPaymentInstrumentImageObject& operator=(const StoredPaymentInstrumentImageObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentInstrumentImageObject& operator=(StoredPaymentInstrumentImageObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StoredPaymentInstrumentImageObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoredPaymentInstrumentImageObject* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentInstrumentImageObject*>(
               &_StoredPaymentInstrumentImageObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StoredPaymentInstrumentImageObject& a, StoredPaymentInstrumentImageObject& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StoredPaymentInstrumentImageObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredPaymentInstrumentImageObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoredPaymentInstrumentImageObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoredPaymentInstrumentImageObject>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StoredPaymentInstrumentImageObject& from);
  void MergeFrom(const StoredPaymentInstrumentImageObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentInstrumentImageObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentInstrumentImageObject";
  }
  protected:
  explicit StoredPaymentInstrumentImageObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSizesFieldNumber = 3,
    kSrcFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .content.ImageSizeProto sizes = 3;
  int sizes_size() const;
  private:
  int _internal_sizes_size() const;
  public:
  void clear_sizes();
  ::content::ImageSizeProto* mutable_sizes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >*
      mutable_sizes();
  private:
  const ::content::ImageSizeProto& _internal_sizes(int index) const;
  ::content::ImageSizeProto* _internal_add_sizes();
  public:
  const ::content::ImageSizeProto& sizes(int index) const;
  ::content::ImageSizeProto* add_sizes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >&
      sizes() const;

  // optional string src = 1;
  bool has_src() const;
  private:
  bool _internal_has_src() const;
  public:
  void clear_src();
  const std::string& src() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_src(ArgT0&& arg0, ArgT... args);
  std::string* mutable_src();
  PROTOBUF_NODISCARD std::string* release_src();
  void set_allocated_src(std::string* src);
  private:
  const std::string& _internal_src() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_src(const std::string& value);
  std::string* _internal_mutable_src();
  public:

  // optional string type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:content.StoredPaymentInstrumentImageObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto > sizes_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr src_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredPaymentInstrumentProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentInstrumentProto) */ {
 public:
  inline StoredPaymentInstrumentProto() : StoredPaymentInstrumentProto(nullptr) {}
  ~StoredPaymentInstrumentProto() override;
  explicit PROTOBUF_CONSTEXPR StoredPaymentInstrumentProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoredPaymentInstrumentProto(const StoredPaymentInstrumentProto& from);
  StoredPaymentInstrumentProto(StoredPaymentInstrumentProto&& from) noexcept
    : StoredPaymentInstrumentProto() {
    *this = ::std::move(from);
  }

  inline StoredPaymentInstrumentProto& operator=(const StoredPaymentInstrumentProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentInstrumentProto& operator=(StoredPaymentInstrumentProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StoredPaymentInstrumentProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoredPaymentInstrumentProto* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentInstrumentProto*>(
               &_StoredPaymentInstrumentProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StoredPaymentInstrumentProto& a, StoredPaymentInstrumentProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StoredPaymentInstrumentProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredPaymentInstrumentProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoredPaymentInstrumentProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoredPaymentInstrumentProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StoredPaymentInstrumentProto& from);
  void MergeFrom(const StoredPaymentInstrumentProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentInstrumentProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentInstrumentProto";
  }
  protected:
  explicit StoredPaymentInstrumentProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIconsFieldNumber = 6,
    kSupportedCardNetworksFieldNumber = 8,
    kInstrumentKeyFieldNumber = 2,
    kNameFieldNumber = 3,
    kMethodFieldNumber = 4,
    kStringifiedCapabilitiesFieldNumber = 5,
    kDecodedInstrumentIconFieldNumber = 7,
    kRegistrationIdFieldNumber = 1,
  };
  // repeated .content.StoredPaymentInstrumentImageObject icons = 6;
  int icons_size() const;
  private:
  int _internal_icons_size() const;
  public:
  void clear_icons();
  ::content::StoredPaymentInstrumentImageObject* mutable_icons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >*
      mutable_icons();
  private:
  const ::content::StoredPaymentInstrumentImageObject& _internal_icons(int index) const;
  ::content::StoredPaymentInstrumentImageObject* _internal_add_icons();
  public:
  const ::content::StoredPaymentInstrumentImageObject& icons(int index) const;
  ::content::StoredPaymentInstrumentImageObject* add_icons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >&
      icons() const;

  // repeated int32 supported_card_networks = 8;
  int supported_card_networks_size() const;
  private:
  int _internal_supported_card_networks_size() const;
  public:
  void clear_supported_card_networks();
  private:
  int32_t _internal_supported_card_networks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_supported_card_networks() const;
  void _internal_add_supported_card_networks(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_supported_card_networks();
  public:
  int32_t supported_card_networks(int index) const;
  void set_supported_card_networks(int index, int32_t value);
  void add_supported_card_networks(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      supported_card_networks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_supported_card_networks();

  // optional string instrument_key = 2;
  bool has_instrument_key() const;
  private:
  bool _internal_has_instrument_key() const;
  public:
  void clear_instrument_key();
  const std::string& instrument_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_instrument_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_instrument_key();
  PROTOBUF_NODISCARD std::string* release_instrument_key();
  void set_allocated_instrument_key(std::string* instrument_key);
  private:
  const std::string& _internal_instrument_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_key(const std::string& value);
  std::string* _internal_mutable_instrument_key();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string method = 4;
  bool has_method() const;
  private:
  bool _internal_has_method() const;
  public:
  void clear_method();
  const std::string& method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_method();
  PROTOBUF_NODISCARD std::string* release_method();
  void set_allocated_method(std::string* method);
  private:
  const std::string& _internal_method() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_method(const std::string& value);
  std::string* _internal_mutable_method();
  public:

  // optional string stringified_capabilities = 5;
  bool has_stringified_capabilities() const;
  private:
  bool _internal_has_stringified_capabilities() const;
  public:
  void clear_stringified_capabilities();
  const std::string& stringified_capabilities() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stringified_capabilities(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stringified_capabilities();
  PROTOBUF_NODISCARD std::string* release_stringified_capabilities();
  void set_allocated_stringified_capabilities(std::string* stringified_capabilities);
  private:
  const std::string& _internal_stringified_capabilities() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stringified_capabilities(const std::string& value);
  std::string* _internal_mutable_stringified_capabilities();
  public:

  // optional string decoded_instrument_icon = 7;
  bool has_decoded_instrument_icon() const;
  private:
  bool _internal_has_decoded_instrument_icon() const;
  public:
  void clear_decoded_instrument_icon();
  const std::string& decoded_instrument_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decoded_instrument_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decoded_instrument_icon();
  PROTOBUF_NODISCARD std::string* release_decoded_instrument_icon();
  void set_allocated_decoded_instrument_icon(std::string* decoded_instrument_icon);
  private:
  const std::string& _internal_decoded_instrument_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decoded_instrument_icon(const std::string& value);
  std::string* _internal_mutable_decoded_instrument_icon();
  public:

  // optional int64 registration_id = 1;
  bool has_registration_id() const;
  private:
  bool _internal_has_registration_id() const;
  public:
  void clear_registration_id();
  int64_t registration_id() const;
  void set_registration_id(int64_t value);
  private:
  int64_t _internal_registration_id() const;
  void _internal_set_registration_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:content.StoredPaymentInstrumentProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject > icons_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > supported_card_networks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr instrument_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stringified_capabilities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decoded_instrument_icon_;
  int64_t registration_id_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredRelatedApplicationProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredRelatedApplicationProto) */ {
 public:
  inline StoredRelatedApplicationProto() : StoredRelatedApplicationProto(nullptr) {}
  ~StoredRelatedApplicationProto() override;
  explicit PROTOBUF_CONSTEXPR StoredRelatedApplicationProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoredRelatedApplicationProto(const StoredRelatedApplicationProto& from);
  StoredRelatedApplicationProto(StoredRelatedApplicationProto&& from) noexcept
    : StoredRelatedApplicationProto() {
    *this = ::std::move(from);
  }

  inline StoredRelatedApplicationProto& operator=(const StoredRelatedApplicationProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredRelatedApplicationProto& operator=(StoredRelatedApplicationProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StoredRelatedApplicationProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoredRelatedApplicationProto* internal_default_instance() {
    return reinterpret_cast<const StoredRelatedApplicationProto*>(
               &_StoredRelatedApplicationProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StoredRelatedApplicationProto& a, StoredRelatedApplicationProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StoredRelatedApplicationProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredRelatedApplicationProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoredRelatedApplicationProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoredRelatedApplicationProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StoredRelatedApplicationProto& from);
  void MergeFrom(const StoredRelatedApplicationProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredRelatedApplicationProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredRelatedApplicationProto";
  }
  protected:
  explicit StoredRelatedApplicationProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 1,
    kIdFieldNumber = 2,
  };
  // optional string platform = 1;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // optional string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:content.StoredRelatedApplicationProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class SupportedDelegationsProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.SupportedDelegationsProto) */ {
 public:
  inline SupportedDelegationsProto() : SupportedDelegationsProto(nullptr) {}
  ~SupportedDelegationsProto() override;
  explicit PROTOBUF_CONSTEXPR SupportedDelegationsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SupportedDelegationsProto(const SupportedDelegationsProto& from);
  SupportedDelegationsProto(SupportedDelegationsProto&& from) noexcept
    : SupportedDelegationsProto() {
    *this = ::std::move(from);
  }

  inline SupportedDelegationsProto& operator=(const SupportedDelegationsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline SupportedDelegationsProto& operator=(SupportedDelegationsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SupportedDelegationsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const SupportedDelegationsProto* internal_default_instance() {
    return reinterpret_cast<const SupportedDelegationsProto*>(
               &_SupportedDelegationsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SupportedDelegationsProto& a, SupportedDelegationsProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(SupportedDelegationsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SupportedDelegationsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SupportedDelegationsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SupportedDelegationsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SupportedDelegationsProto& from);
  void MergeFrom(const SupportedDelegationsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportedDelegationsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.SupportedDelegationsProto";
  }
  protected:
  explicit SupportedDelegationsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShippingAddressFieldNumber = 1,
    kPayerNameFieldNumber = 2,
    kPayerPhoneFieldNumber = 3,
    kPayerEmailFieldNumber = 4,
  };
  // optional bool shipping_address = 1;
  bool has_shipping_address() const;
  private:
  bool _internal_has_shipping_address() const;
  public:
  void clear_shipping_address();
  bool shipping_address() const;
  void set_shipping_address(bool value);
  private:
  bool _internal_shipping_address() const;
  void _internal_set_shipping_address(bool value);
  public:

  // optional bool payer_name = 2;
  bool has_payer_name() const;
  private:
  bool _internal_has_payer_name() const;
  public:
  void clear_payer_name();
  bool payer_name() const;
  void set_payer_name(bool value);
  private:
  bool _internal_payer_name() const;
  void _internal_set_payer_name(bool value);
  public:

  // optional bool payer_phone = 3;
  bool has_payer_phone() const;
  private:
  bool _internal_has_payer_phone() const;
  public:
  void clear_payer_phone();
  bool payer_phone() const;
  void set_payer_phone(bool value);
  private:
  bool _internal_payer_phone() const;
  void _internal_set_payer_phone(bool value);
  public:

  // optional bool payer_email = 4;
  bool has_payer_email() const;
  private:
  bool _internal_has_payer_email() const;
  public:
  void clear_payer_email();
  bool payer_email() const;
  void set_payer_email(bool value);
  private:
  bool _internal_payer_email() const;
  void _internal_set_payer_email(bool value);
  public:

  // @@protoc_insertion_point(class_scope:content.SupportedDelegationsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  bool shipping_address_;
  bool payer_name_;
  bool payer_phone_;
  bool payer_email_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// -------------------------------------------------------------------

class StoredPaymentAppProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:content.StoredPaymentAppProto) */ {
 public:
  inline StoredPaymentAppProto() : StoredPaymentAppProto(nullptr) {}
  ~StoredPaymentAppProto() override;
  explicit PROTOBUF_CONSTEXPR StoredPaymentAppProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StoredPaymentAppProto(const StoredPaymentAppProto& from);
  StoredPaymentAppProto(StoredPaymentAppProto&& from) noexcept
    : StoredPaymentAppProto() {
    *this = ::std::move(from);
  }

  inline StoredPaymentAppProto& operator=(const StoredPaymentAppProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline StoredPaymentAppProto& operator=(StoredPaymentAppProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StoredPaymentAppProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const StoredPaymentAppProto* internal_default_instance() {
    return reinterpret_cast<const StoredPaymentAppProto*>(
               &_StoredPaymentAppProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(StoredPaymentAppProto& a, StoredPaymentAppProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StoredPaymentAppProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StoredPaymentAppProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StoredPaymentAppProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StoredPaymentAppProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StoredPaymentAppProto& from);
  void MergeFrom(const StoredPaymentAppProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StoredPaymentAppProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "content.StoredPaymentAppProto";
  }
  protected:
  explicit StoredPaymentAppProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelatedApplicationsFieldNumber = 6,
    kScopeFieldNumber = 2,
    kNameFieldNumber = 3,
    kIconFieldNumber = 4,
    kUserHintFieldNumber = 7,
    kSupportedDelegationsFieldNumber = 8,
    kRegistrationIdFieldNumber = 1,
    kPreferRelatedApplicationsFieldNumber = 5,
  };
  // repeated .content.StoredRelatedApplicationProto related_applications = 6;
  int related_applications_size() const;
  private:
  int _internal_related_applications_size() const;
  public:
  void clear_related_applications();
  ::content::StoredRelatedApplicationProto* mutable_related_applications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >*
      mutable_related_applications();
  private:
  const ::content::StoredRelatedApplicationProto& _internal_related_applications(int index) const;
  ::content::StoredRelatedApplicationProto* _internal_add_related_applications();
  public:
  const ::content::StoredRelatedApplicationProto& related_applications(int index) const;
  ::content::StoredRelatedApplicationProto* add_related_applications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >&
      related_applications() const;

  // optional string scope = 2;
  bool has_scope() const;
  private:
  bool _internal_has_scope() const;
  public:
  void clear_scope();
  const std::string& scope() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scope(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scope();
  PROTOBUF_NODISCARD std::string* release_scope();
  void set_allocated_scope(std::string* scope);
  private:
  const std::string& _internal_scope() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scope(const std::string& value);
  std::string* _internal_mutable_scope();
  public:

  // optional string name = 3;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string icon = 4;
  bool has_icon() const;
  private:
  bool _internal_has_icon() const;
  public:
  void clear_icon();
  const std::string& icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_icon();
  PROTOBUF_NODISCARD std::string* release_icon();
  void set_allocated_icon(std::string* icon);
  private:
  const std::string& _internal_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon(const std::string& value);
  std::string* _internal_mutable_icon();
  public:

  // optional string user_hint = 7;
  bool has_user_hint() const;
  private:
  bool _internal_has_user_hint() const;
  public:
  void clear_user_hint();
  const std::string& user_hint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_hint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_hint();
  PROTOBUF_NODISCARD std::string* release_user_hint();
  void set_allocated_user_hint(std::string* user_hint);
  private:
  const std::string& _internal_user_hint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_hint(const std::string& value);
  std::string* _internal_mutable_user_hint();
  public:

  // optional .content.SupportedDelegationsProto supported_delegations = 8;
  bool has_supported_delegations() const;
  private:
  bool _internal_has_supported_delegations() const;
  public:
  void clear_supported_delegations();
  const ::content::SupportedDelegationsProto& supported_delegations() const;
  PROTOBUF_NODISCARD ::content::SupportedDelegationsProto* release_supported_delegations();
  ::content::SupportedDelegationsProto* mutable_supported_delegations();
  void set_allocated_supported_delegations(::content::SupportedDelegationsProto* supported_delegations);
  private:
  const ::content::SupportedDelegationsProto& _internal_supported_delegations() const;
  ::content::SupportedDelegationsProto* _internal_mutable_supported_delegations();
  public:
  void unsafe_arena_set_allocated_supported_delegations(
      ::content::SupportedDelegationsProto* supported_delegations);
  ::content::SupportedDelegationsProto* unsafe_arena_release_supported_delegations();

  // optional int64 registration_id = 1;
  bool has_registration_id() const;
  private:
  bool _internal_has_registration_id() const;
  public:
  void clear_registration_id();
  int64_t registration_id() const;
  void set_registration_id(int64_t value);
  private:
  int64_t _internal_registration_id() const;
  void _internal_set_registration_id(int64_t value);
  public:

  // optional bool prefer_related_applications = 5;
  bool has_prefer_related_applications() const;
  private:
  bool _internal_has_prefer_related_applications() const;
  public:
  void clear_prefer_related_applications();
  bool prefer_related_applications() const;
  void set_prefer_related_applications(bool value);
  private:
  bool _internal_prefer_related_applications() const;
  void _internal_set_prefer_related_applications(bool value);
  public:

  // @@protoc_insertion_point(class_scope:content.StoredPaymentAppProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto > related_applications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scope_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_hint_;
  ::content::SupportedDelegationsProto* supported_delegations_;
  int64_t registration_id_;
  bool prefer_related_applications_;
  friend struct ::TableStruct_payment_5fapp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StoredPaymentInstrumentKeyInfoProto

// optional uint64 insertion_order = 1;
inline bool StoredPaymentInstrumentKeyInfoProto::_internal_has_insertion_order() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentKeyInfoProto::has_insertion_order() const {
  return _internal_has_insertion_order();
}
inline void StoredPaymentInstrumentKeyInfoProto::clear_insertion_order() {
  insertion_order_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t StoredPaymentInstrumentKeyInfoProto::_internal_insertion_order() const {
  return insertion_order_;
}
inline uint64_t StoredPaymentInstrumentKeyInfoProto::insertion_order() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentKeyInfoProto.insertion_order)
  return _internal_insertion_order();
}
inline void StoredPaymentInstrumentKeyInfoProto::_internal_set_insertion_order(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  insertion_order_ = value;
}
inline void StoredPaymentInstrumentKeyInfoProto::set_insertion_order(uint64_t value) {
  _internal_set_insertion_order(value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentKeyInfoProto.insertion_order)
}

// optional string key = 2;
inline bool StoredPaymentInstrumentKeyInfoProto::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentKeyInfoProto::has_key() const {
  return _internal_has_key();
}
inline void StoredPaymentInstrumentKeyInfoProto::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentInstrumentKeyInfoProto::key() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentKeyInfoProto.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentKeyInfoProto::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentKeyInfoProto.key)
}
inline std::string* StoredPaymentInstrumentKeyInfoProto::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentKeyInfoProto.key)
  return _s;
}
inline const std::string& StoredPaymentInstrumentKeyInfoProto::_internal_key() const {
  return key_.Get();
}
inline void StoredPaymentInstrumentKeyInfoProto::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentKeyInfoProto::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentKeyInfoProto::release_key() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentKeyInfoProto.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentKeyInfoProto::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentKeyInfoProto.key)
}

// -------------------------------------------------------------------

// ImageSizeProto

// optional uint64 width = 1;
inline bool ImageSizeProto::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ImageSizeProto::has_width() const {
  return _internal_has_width();
}
inline void ImageSizeProto::clear_width() {
  width_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t ImageSizeProto::_internal_width() const {
  return width_;
}
inline uint64_t ImageSizeProto::width() const {
  // @@protoc_insertion_point(field_get:content.ImageSizeProto.width)
  return _internal_width();
}
inline void ImageSizeProto::_internal_set_width(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void ImageSizeProto::set_width(uint64_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:content.ImageSizeProto.width)
}

// optional uint64 height = 2;
inline bool ImageSizeProto::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ImageSizeProto::has_height() const {
  return _internal_has_height();
}
inline void ImageSizeProto::clear_height() {
  height_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t ImageSizeProto::_internal_height() const {
  return height_;
}
inline uint64_t ImageSizeProto::height() const {
  // @@protoc_insertion_point(field_get:content.ImageSizeProto.height)
  return _internal_height();
}
inline void ImageSizeProto::_internal_set_height(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void ImageSizeProto::set_height(uint64_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:content.ImageSizeProto.height)
}

// -------------------------------------------------------------------

// StoredPaymentInstrumentImageObject

// optional string src = 1;
inline bool StoredPaymentInstrumentImageObject::_internal_has_src() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentImageObject::has_src() const {
  return _internal_has_src();
}
inline void StoredPaymentInstrumentImageObject::clear_src() {
  src_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentInstrumentImageObject::src() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentImageObject.src)
  return _internal_src();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentImageObject::set_src(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 src_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentImageObject.src)
}
inline std::string* StoredPaymentInstrumentImageObject::mutable_src() {
  std::string* _s = _internal_mutable_src();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentImageObject.src)
  return _s;
}
inline const std::string& StoredPaymentInstrumentImageObject::_internal_src() const {
  return src_.Get();
}
inline void StoredPaymentInstrumentImageObject::_internal_set_src(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  src_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentImageObject::_internal_mutable_src() {
  _has_bits_[0] |= 0x00000001u;
  return src_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentImageObject::release_src() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentImageObject.src)
  if (!_internal_has_src()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = src_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (src_.IsDefault()) {
    src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentImageObject::set_allocated_src(std::string* src) {
  if (src != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  src_.SetAllocated(src, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (src_.IsDefault()) {
    src_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentImageObject.src)
}

// optional string type = 2;
inline bool StoredPaymentInstrumentImageObject::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentImageObject::has_type() const {
  return _internal_has_type();
}
inline void StoredPaymentInstrumentImageObject::clear_type() {
  type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredPaymentInstrumentImageObject::type() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentImageObject.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentImageObject::set_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentImageObject.type)
}
inline std::string* StoredPaymentInstrumentImageObject::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentImageObject.type)
  return _s;
}
inline const std::string& StoredPaymentInstrumentImageObject::_internal_type() const {
  return type_.Get();
}
inline void StoredPaymentInstrumentImageObject::_internal_set_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentImageObject::_internal_mutable_type() {
  _has_bits_[0] |= 0x00000002u;
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentImageObject::release_type() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentImageObject.type)
  if (!_internal_has_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentImageObject::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentImageObject.type)
}

// repeated .content.ImageSizeProto sizes = 3;
inline int StoredPaymentInstrumentImageObject::_internal_sizes_size() const {
  return sizes_.size();
}
inline int StoredPaymentInstrumentImageObject::sizes_size() const {
  return _internal_sizes_size();
}
inline void StoredPaymentInstrumentImageObject::clear_sizes() {
  sizes_.Clear();
}
inline ::content::ImageSizeProto* StoredPaymentInstrumentImageObject::mutable_sizes(int index) {
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentImageObject.sizes)
  return sizes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >*
StoredPaymentInstrumentImageObject::mutable_sizes() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentInstrumentImageObject.sizes)
  return &sizes_;
}
inline const ::content::ImageSizeProto& StoredPaymentInstrumentImageObject::_internal_sizes(int index) const {
  return sizes_.Get(index);
}
inline const ::content::ImageSizeProto& StoredPaymentInstrumentImageObject::sizes(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentImageObject.sizes)
  return _internal_sizes(index);
}
inline ::content::ImageSizeProto* StoredPaymentInstrumentImageObject::_internal_add_sizes() {
  return sizes_.Add();
}
inline ::content::ImageSizeProto* StoredPaymentInstrumentImageObject::add_sizes() {
  ::content::ImageSizeProto* _add = _internal_add_sizes();
  // @@protoc_insertion_point(field_add:content.StoredPaymentInstrumentImageObject.sizes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::ImageSizeProto >&
StoredPaymentInstrumentImageObject::sizes() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentInstrumentImageObject.sizes)
  return sizes_;
}

// -------------------------------------------------------------------

// StoredPaymentInstrumentProto

// optional int64 registration_id = 1;
inline bool StoredPaymentInstrumentProto::_internal_has_registration_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentProto::has_registration_id() const {
  return _internal_has_registration_id();
}
inline void StoredPaymentInstrumentProto::clear_registration_id() {
  registration_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t StoredPaymentInstrumentProto::_internal_registration_id() const {
  return registration_id_;
}
inline int64_t StoredPaymentInstrumentProto::registration_id() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.registration_id)
  return _internal_registration_id();
}
inline void StoredPaymentInstrumentProto::_internal_set_registration_id(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  registration_id_ = value;
}
inline void StoredPaymentInstrumentProto::set_registration_id(int64_t value) {
  _internal_set_registration_id(value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.registration_id)
}

// optional string instrument_key = 2;
inline bool StoredPaymentInstrumentProto::_internal_has_instrument_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentProto::has_instrument_key() const {
  return _internal_has_instrument_key();
}
inline void StoredPaymentInstrumentProto::clear_instrument_key() {
  instrument_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentInstrumentProto::instrument_key() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.instrument_key)
  return _internal_instrument_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentProto::set_instrument_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 instrument_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.instrument_key)
}
inline std::string* StoredPaymentInstrumentProto::mutable_instrument_key() {
  std::string* _s = _internal_mutable_instrument_key();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.instrument_key)
  return _s;
}
inline const std::string& StoredPaymentInstrumentProto::_internal_instrument_key() const {
  return instrument_key_.Get();
}
inline void StoredPaymentInstrumentProto::_internal_set_instrument_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  instrument_key_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::_internal_mutable_instrument_key() {
  _has_bits_[0] |= 0x00000001u;
  return instrument_key_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::release_instrument_key() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.instrument_key)
  if (!_internal_has_instrument_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = instrument_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_key_.IsDefault()) {
    instrument_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentProto::set_allocated_instrument_key(std::string* instrument_key) {
  if (instrument_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  instrument_key_.SetAllocated(instrument_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (instrument_key_.IsDefault()) {
    instrument_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.instrument_key)
}

// optional string name = 3;
inline bool StoredPaymentInstrumentProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentProto::has_name() const {
  return _internal_has_name();
}
inline void StoredPaymentInstrumentProto::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredPaymentInstrumentProto::name() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.name)
}
inline std::string* StoredPaymentInstrumentProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.name)
  return _s;
}
inline const std::string& StoredPaymentInstrumentProto::_internal_name() const {
  return name_.Get();
}
inline void StoredPaymentInstrumentProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::release_name() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.name)
}

// optional string method = 4;
inline bool StoredPaymentInstrumentProto::_internal_has_method() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentProto::has_method() const {
  return _internal_has_method();
}
inline void StoredPaymentInstrumentProto::clear_method() {
  method_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StoredPaymentInstrumentProto::method() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.method)
  return _internal_method();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentProto::set_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 method_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.method)
}
inline std::string* StoredPaymentInstrumentProto::mutable_method() {
  std::string* _s = _internal_mutable_method();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.method)
  return _s;
}
inline const std::string& StoredPaymentInstrumentProto::_internal_method() const {
  return method_.Get();
}
inline void StoredPaymentInstrumentProto::_internal_set_method(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  method_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::_internal_mutable_method() {
  _has_bits_[0] |= 0x00000004u;
  return method_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::release_method() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.method)
  if (!_internal_has_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = method_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentProto::set_allocated_method(std::string* method) {
  if (method != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  method_.SetAllocated(method, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (method_.IsDefault()) {
    method_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.method)
}

// optional string stringified_capabilities = 5;
inline bool StoredPaymentInstrumentProto::_internal_has_stringified_capabilities() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentProto::has_stringified_capabilities() const {
  return _internal_has_stringified_capabilities();
}
inline void StoredPaymentInstrumentProto::clear_stringified_capabilities() {
  stringified_capabilities_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StoredPaymentInstrumentProto::stringified_capabilities() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.stringified_capabilities)
  return _internal_stringified_capabilities();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentProto::set_stringified_capabilities(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 stringified_capabilities_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.stringified_capabilities)
}
inline std::string* StoredPaymentInstrumentProto::mutable_stringified_capabilities() {
  std::string* _s = _internal_mutable_stringified_capabilities();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.stringified_capabilities)
  return _s;
}
inline const std::string& StoredPaymentInstrumentProto::_internal_stringified_capabilities() const {
  return stringified_capabilities_.Get();
}
inline void StoredPaymentInstrumentProto::_internal_set_stringified_capabilities(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  stringified_capabilities_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::_internal_mutable_stringified_capabilities() {
  _has_bits_[0] |= 0x00000008u;
  return stringified_capabilities_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::release_stringified_capabilities() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.stringified_capabilities)
  if (!_internal_has_stringified_capabilities()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = stringified_capabilities_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringified_capabilities_.IsDefault()) {
    stringified_capabilities_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentProto::set_allocated_stringified_capabilities(std::string* stringified_capabilities) {
  if (stringified_capabilities != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  stringified_capabilities_.SetAllocated(stringified_capabilities, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (stringified_capabilities_.IsDefault()) {
    stringified_capabilities_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.stringified_capabilities)
}

// repeated .content.StoredPaymentInstrumentImageObject icons = 6;
inline int StoredPaymentInstrumentProto::_internal_icons_size() const {
  return icons_.size();
}
inline int StoredPaymentInstrumentProto::icons_size() const {
  return _internal_icons_size();
}
inline void StoredPaymentInstrumentProto::clear_icons() {
  icons_.Clear();
}
inline ::content::StoredPaymentInstrumentImageObject* StoredPaymentInstrumentProto::mutable_icons(int index) {
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.icons)
  return icons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >*
StoredPaymentInstrumentProto::mutable_icons() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentInstrumentProto.icons)
  return &icons_;
}
inline const ::content::StoredPaymentInstrumentImageObject& StoredPaymentInstrumentProto::_internal_icons(int index) const {
  return icons_.Get(index);
}
inline const ::content::StoredPaymentInstrumentImageObject& StoredPaymentInstrumentProto::icons(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.icons)
  return _internal_icons(index);
}
inline ::content::StoredPaymentInstrumentImageObject* StoredPaymentInstrumentProto::_internal_add_icons() {
  return icons_.Add();
}
inline ::content::StoredPaymentInstrumentImageObject* StoredPaymentInstrumentProto::add_icons() {
  ::content::StoredPaymentInstrumentImageObject* _add = _internal_add_icons();
  // @@protoc_insertion_point(field_add:content.StoredPaymentInstrumentProto.icons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredPaymentInstrumentImageObject >&
StoredPaymentInstrumentProto::icons() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentInstrumentProto.icons)
  return icons_;
}

// optional string decoded_instrument_icon = 7;
inline bool StoredPaymentInstrumentProto::_internal_has_decoded_instrument_icon() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool StoredPaymentInstrumentProto::has_decoded_instrument_icon() const {
  return _internal_has_decoded_instrument_icon();
}
inline void StoredPaymentInstrumentProto::clear_decoded_instrument_icon() {
  decoded_instrument_icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& StoredPaymentInstrumentProto::decoded_instrument_icon() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
  return _internal_decoded_instrument_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentInstrumentProto::set_decoded_instrument_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 decoded_instrument_icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}
inline std::string* StoredPaymentInstrumentProto::mutable_decoded_instrument_icon() {
  std::string* _s = _internal_mutable_decoded_instrument_icon();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
  return _s;
}
inline const std::string& StoredPaymentInstrumentProto::_internal_decoded_instrument_icon() const {
  return decoded_instrument_icon_.Get();
}
inline void StoredPaymentInstrumentProto::_internal_set_decoded_instrument_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  decoded_instrument_icon_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::_internal_mutable_decoded_instrument_icon() {
  _has_bits_[0] |= 0x00000010u;
  return decoded_instrument_icon_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentInstrumentProto::release_decoded_instrument_icon() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
  if (!_internal_has_decoded_instrument_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = decoded_instrument_icon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (decoded_instrument_icon_.IsDefault()) {
    decoded_instrument_icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentInstrumentProto::set_allocated_decoded_instrument_icon(std::string* decoded_instrument_icon) {
  if (decoded_instrument_icon != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  decoded_instrument_icon_.SetAllocated(decoded_instrument_icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (decoded_instrument_icon_.IsDefault()) {
    decoded_instrument_icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentInstrumentProto.decoded_instrument_icon)
}

// repeated int32 supported_card_networks = 8;
inline int StoredPaymentInstrumentProto::_internal_supported_card_networks_size() const {
  return supported_card_networks_.size();
}
inline int StoredPaymentInstrumentProto::supported_card_networks_size() const {
  return _internal_supported_card_networks_size();
}
inline void StoredPaymentInstrumentProto::clear_supported_card_networks() {
  supported_card_networks_.Clear();
}
inline int32_t StoredPaymentInstrumentProto::_internal_supported_card_networks(int index) const {
  return supported_card_networks_.Get(index);
}
inline int32_t StoredPaymentInstrumentProto::supported_card_networks(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentInstrumentProto.supported_card_networks)
  return _internal_supported_card_networks(index);
}
inline void StoredPaymentInstrumentProto::set_supported_card_networks(int index, int32_t value) {
  supported_card_networks_.Set(index, value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentInstrumentProto.supported_card_networks)
}
inline void StoredPaymentInstrumentProto::_internal_add_supported_card_networks(int32_t value) {
  supported_card_networks_.Add(value);
}
inline void StoredPaymentInstrumentProto::add_supported_card_networks(int32_t value) {
  _internal_add_supported_card_networks(value);
  // @@protoc_insertion_point(field_add:content.StoredPaymentInstrumentProto.supported_card_networks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StoredPaymentInstrumentProto::_internal_supported_card_networks() const {
  return supported_card_networks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
StoredPaymentInstrumentProto::supported_card_networks() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentInstrumentProto.supported_card_networks)
  return _internal_supported_card_networks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StoredPaymentInstrumentProto::_internal_mutable_supported_card_networks() {
  return &supported_card_networks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
StoredPaymentInstrumentProto::mutable_supported_card_networks() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentInstrumentProto.supported_card_networks)
  return _internal_mutable_supported_card_networks();
}

// -------------------------------------------------------------------

// StoredRelatedApplicationProto

// optional string platform = 1;
inline bool StoredRelatedApplicationProto::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoredRelatedApplicationProto::has_platform() const {
  return _internal_has_platform();
}
inline void StoredRelatedApplicationProto::clear_platform() {
  platform_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredRelatedApplicationProto::platform() const {
  // @@protoc_insertion_point(field_get:content.StoredRelatedApplicationProto.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredRelatedApplicationProto::set_platform(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredRelatedApplicationProto.platform)
}
inline std::string* StoredRelatedApplicationProto::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:content.StoredRelatedApplicationProto.platform)
  return _s;
}
inline const std::string& StoredRelatedApplicationProto::_internal_platform() const {
  return platform_.Get();
}
inline void StoredRelatedApplicationProto::_internal_set_platform(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  platform_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredRelatedApplicationProto::_internal_mutable_platform() {
  _has_bits_[0] |= 0x00000001u;
  return platform_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredRelatedApplicationProto::release_platform() {
  // @@protoc_insertion_point(field_release:content.StoredRelatedApplicationProto.platform)
  if (!_internal_has_platform()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = platform_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_.IsDefault()) {
    platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredRelatedApplicationProto::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_.IsDefault()) {
    platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredRelatedApplicationProto.platform)
}

// optional string id = 2;
inline bool StoredRelatedApplicationProto::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoredRelatedApplicationProto::has_id() const {
  return _internal_has_id();
}
inline void StoredRelatedApplicationProto::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredRelatedApplicationProto::id() const {
  // @@protoc_insertion_point(field_get:content.StoredRelatedApplicationProto.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredRelatedApplicationProto::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredRelatedApplicationProto.id)
}
inline std::string* StoredRelatedApplicationProto::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:content.StoredRelatedApplicationProto.id)
  return _s;
}
inline const std::string& StoredRelatedApplicationProto::_internal_id() const {
  return id_.Get();
}
inline void StoredRelatedApplicationProto::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredRelatedApplicationProto::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredRelatedApplicationProto::release_id() {
  // @@protoc_insertion_point(field_release:content.StoredRelatedApplicationProto.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredRelatedApplicationProto::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredRelatedApplicationProto.id)
}

// -------------------------------------------------------------------

// SupportedDelegationsProto

// optional bool shipping_address = 1;
inline bool SupportedDelegationsProto::_internal_has_shipping_address() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SupportedDelegationsProto::has_shipping_address() const {
  return _internal_has_shipping_address();
}
inline void SupportedDelegationsProto::clear_shipping_address() {
  shipping_address_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool SupportedDelegationsProto::_internal_shipping_address() const {
  return shipping_address_;
}
inline bool SupportedDelegationsProto::shipping_address() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.shipping_address)
  return _internal_shipping_address();
}
inline void SupportedDelegationsProto::_internal_set_shipping_address(bool value) {
  _has_bits_[0] |= 0x00000001u;
  shipping_address_ = value;
}
inline void SupportedDelegationsProto::set_shipping_address(bool value) {
  _internal_set_shipping_address(value);
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.shipping_address)
}

// optional bool payer_name = 2;
inline bool SupportedDelegationsProto::_internal_has_payer_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SupportedDelegationsProto::has_payer_name() const {
  return _internal_has_payer_name();
}
inline void SupportedDelegationsProto::clear_payer_name() {
  payer_name_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool SupportedDelegationsProto::_internal_payer_name() const {
  return payer_name_;
}
inline bool SupportedDelegationsProto::payer_name() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.payer_name)
  return _internal_payer_name();
}
inline void SupportedDelegationsProto::_internal_set_payer_name(bool value) {
  _has_bits_[0] |= 0x00000002u;
  payer_name_ = value;
}
inline void SupportedDelegationsProto::set_payer_name(bool value) {
  _internal_set_payer_name(value);
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.payer_name)
}

// optional bool payer_phone = 3;
inline bool SupportedDelegationsProto::_internal_has_payer_phone() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SupportedDelegationsProto::has_payer_phone() const {
  return _internal_has_payer_phone();
}
inline void SupportedDelegationsProto::clear_payer_phone() {
  payer_phone_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool SupportedDelegationsProto::_internal_payer_phone() const {
  return payer_phone_;
}
inline bool SupportedDelegationsProto::payer_phone() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.payer_phone)
  return _internal_payer_phone();
}
inline void SupportedDelegationsProto::_internal_set_payer_phone(bool value) {
  _has_bits_[0] |= 0x00000004u;
  payer_phone_ = value;
}
inline void SupportedDelegationsProto::set_payer_phone(bool value) {
  _internal_set_payer_phone(value);
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.payer_phone)
}

// optional bool payer_email = 4;
inline bool SupportedDelegationsProto::_internal_has_payer_email() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool SupportedDelegationsProto::has_payer_email() const {
  return _internal_has_payer_email();
}
inline void SupportedDelegationsProto::clear_payer_email() {
  payer_email_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool SupportedDelegationsProto::_internal_payer_email() const {
  return payer_email_;
}
inline bool SupportedDelegationsProto::payer_email() const {
  // @@protoc_insertion_point(field_get:content.SupportedDelegationsProto.payer_email)
  return _internal_payer_email();
}
inline void SupportedDelegationsProto::_internal_set_payer_email(bool value) {
  _has_bits_[0] |= 0x00000008u;
  payer_email_ = value;
}
inline void SupportedDelegationsProto::set_payer_email(bool value) {
  _internal_set_payer_email(value);
  // @@protoc_insertion_point(field_set:content.SupportedDelegationsProto.payer_email)
}

// -------------------------------------------------------------------

// StoredPaymentAppProto

// optional int64 registration_id = 1;
inline bool StoredPaymentAppProto::_internal_has_registration_id() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool StoredPaymentAppProto::has_registration_id() const {
  return _internal_has_registration_id();
}
inline void StoredPaymentAppProto::clear_registration_id() {
  registration_id_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t StoredPaymentAppProto::_internal_registration_id() const {
  return registration_id_;
}
inline int64_t StoredPaymentAppProto::registration_id() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.registration_id)
  return _internal_registration_id();
}
inline void StoredPaymentAppProto::_internal_set_registration_id(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  registration_id_ = value;
}
inline void StoredPaymentAppProto::set_registration_id(int64_t value) {
  _internal_set_registration_id(value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.registration_id)
}

// optional string scope = 2;
inline bool StoredPaymentAppProto::_internal_has_scope() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StoredPaymentAppProto::has_scope() const {
  return _internal_has_scope();
}
inline void StoredPaymentAppProto::clear_scope() {
  scope_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StoredPaymentAppProto::scope() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.scope)
  return _internal_scope();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentAppProto::set_scope(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 scope_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.scope)
}
inline std::string* StoredPaymentAppProto::mutable_scope() {
  std::string* _s = _internal_mutable_scope();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.scope)
  return _s;
}
inline const std::string& StoredPaymentAppProto::_internal_scope() const {
  return scope_.Get();
}
inline void StoredPaymentAppProto::_internal_set_scope(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  scope_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::_internal_mutable_scope() {
  _has_bits_[0] |= 0x00000001u;
  return scope_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::release_scope() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.scope)
  if (!_internal_has_scope()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = scope_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scope_.IsDefault()) {
    scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentAppProto::set_allocated_scope(std::string* scope) {
  if (scope != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  scope_.SetAllocated(scope, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (scope_.IsDefault()) {
    scope_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.scope)
}

// optional string name = 3;
inline bool StoredPaymentAppProto::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StoredPaymentAppProto::has_name() const {
  return _internal_has_name();
}
inline void StoredPaymentAppProto::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StoredPaymentAppProto::name() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentAppProto::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.name)
}
inline std::string* StoredPaymentAppProto::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.name)
  return _s;
}
inline const std::string& StoredPaymentAppProto::_internal_name() const {
  return name_.Get();
}
inline void StoredPaymentAppProto::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::release_name() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentAppProto::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.name)
}

// optional string icon = 4;
inline bool StoredPaymentAppProto::_internal_has_icon() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool StoredPaymentAppProto::has_icon() const {
  return _internal_has_icon();
}
inline void StoredPaymentAppProto::clear_icon() {
  icon_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StoredPaymentAppProto::icon() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.icon)
  return _internal_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentAppProto::set_icon(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 icon_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.icon)
}
inline std::string* StoredPaymentAppProto::mutable_icon() {
  std::string* _s = _internal_mutable_icon();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.icon)
  return _s;
}
inline const std::string& StoredPaymentAppProto::_internal_icon() const {
  return icon_.Get();
}
inline void StoredPaymentAppProto::_internal_set_icon(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  icon_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::_internal_mutable_icon() {
  _has_bits_[0] |= 0x00000004u;
  return icon_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::release_icon() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.icon)
  if (!_internal_has_icon()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = icon_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentAppProto::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  icon_.SetAllocated(icon, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (icon_.IsDefault()) {
    icon_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.icon)
}

// optional bool prefer_related_applications = 5;
inline bool StoredPaymentAppProto::_internal_has_prefer_related_applications() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool StoredPaymentAppProto::has_prefer_related_applications() const {
  return _internal_has_prefer_related_applications();
}
inline void StoredPaymentAppProto::clear_prefer_related_applications() {
  prefer_related_applications_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool StoredPaymentAppProto::_internal_prefer_related_applications() const {
  return prefer_related_applications_;
}
inline bool StoredPaymentAppProto::prefer_related_applications() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.prefer_related_applications)
  return _internal_prefer_related_applications();
}
inline void StoredPaymentAppProto::_internal_set_prefer_related_applications(bool value) {
  _has_bits_[0] |= 0x00000040u;
  prefer_related_applications_ = value;
}
inline void StoredPaymentAppProto::set_prefer_related_applications(bool value) {
  _internal_set_prefer_related_applications(value);
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.prefer_related_applications)
}

// repeated .content.StoredRelatedApplicationProto related_applications = 6;
inline int StoredPaymentAppProto::_internal_related_applications_size() const {
  return related_applications_.size();
}
inline int StoredPaymentAppProto::related_applications_size() const {
  return _internal_related_applications_size();
}
inline void StoredPaymentAppProto::clear_related_applications() {
  related_applications_.Clear();
}
inline ::content::StoredRelatedApplicationProto* StoredPaymentAppProto::mutable_related_applications(int index) {
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.related_applications)
  return related_applications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >*
StoredPaymentAppProto::mutable_related_applications() {
  // @@protoc_insertion_point(field_mutable_list:content.StoredPaymentAppProto.related_applications)
  return &related_applications_;
}
inline const ::content::StoredRelatedApplicationProto& StoredPaymentAppProto::_internal_related_applications(int index) const {
  return related_applications_.Get(index);
}
inline const ::content::StoredRelatedApplicationProto& StoredPaymentAppProto::related_applications(int index) const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.related_applications)
  return _internal_related_applications(index);
}
inline ::content::StoredRelatedApplicationProto* StoredPaymentAppProto::_internal_add_related_applications() {
  return related_applications_.Add();
}
inline ::content::StoredRelatedApplicationProto* StoredPaymentAppProto::add_related_applications() {
  ::content::StoredRelatedApplicationProto* _add = _internal_add_related_applications();
  // @@protoc_insertion_point(field_add:content.StoredPaymentAppProto.related_applications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::content::StoredRelatedApplicationProto >&
StoredPaymentAppProto::related_applications() const {
  // @@protoc_insertion_point(field_list:content.StoredPaymentAppProto.related_applications)
  return related_applications_;
}

// optional string user_hint = 7;
inline bool StoredPaymentAppProto::_internal_has_user_hint() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool StoredPaymentAppProto::has_user_hint() const {
  return _internal_has_user_hint();
}
inline void StoredPaymentAppProto::clear_user_hint() {
  user_hint_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& StoredPaymentAppProto::user_hint() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.user_hint)
  return _internal_user_hint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StoredPaymentAppProto::set_user_hint(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 user_hint_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:content.StoredPaymentAppProto.user_hint)
}
inline std::string* StoredPaymentAppProto::mutable_user_hint() {
  std::string* _s = _internal_mutable_user_hint();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.user_hint)
  return _s;
}
inline const std::string& StoredPaymentAppProto::_internal_user_hint() const {
  return user_hint_.Get();
}
inline void StoredPaymentAppProto::_internal_set_user_hint(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  user_hint_.Set(value, GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::_internal_mutable_user_hint() {
  _has_bits_[0] |= 0x00000008u;
  return user_hint_.Mutable(GetArenaForAllocation());
}
inline std::string* StoredPaymentAppProto::release_user_hint() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.user_hint)
  if (!_internal_has_user_hint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = user_hint_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_hint_.IsDefault()) {
    user_hint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void StoredPaymentAppProto::set_allocated_user_hint(std::string* user_hint) {
  if (user_hint != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  user_hint_.SetAllocated(user_hint, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_hint_.IsDefault()) {
    user_hint_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.user_hint)
}

// optional .content.SupportedDelegationsProto supported_delegations = 8;
inline bool StoredPaymentAppProto::_internal_has_supported_delegations() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || supported_delegations_ != nullptr);
  return value;
}
inline bool StoredPaymentAppProto::has_supported_delegations() const {
  return _internal_has_supported_delegations();
}
inline void StoredPaymentAppProto::clear_supported_delegations() {
  if (supported_delegations_ != nullptr) supported_delegations_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::content::SupportedDelegationsProto& StoredPaymentAppProto::_internal_supported_delegations() const {
  const ::content::SupportedDelegationsProto* p = supported_delegations_;
  return p != nullptr ? *p : reinterpret_cast<const ::content::SupportedDelegationsProto&>(
      ::content::_SupportedDelegationsProto_default_instance_);
}
inline const ::content::SupportedDelegationsProto& StoredPaymentAppProto::supported_delegations() const {
  // @@protoc_insertion_point(field_get:content.StoredPaymentAppProto.supported_delegations)
  return _internal_supported_delegations();
}
inline void StoredPaymentAppProto::unsafe_arena_set_allocated_supported_delegations(
    ::content::SupportedDelegationsProto* supported_delegations) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(supported_delegations_);
  }
  supported_delegations_ = supported_delegations;
  if (supported_delegations) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:content.StoredPaymentAppProto.supported_delegations)
}
inline ::content::SupportedDelegationsProto* StoredPaymentAppProto::release_supported_delegations() {
  _has_bits_[0] &= ~0x00000010u;
  ::content::SupportedDelegationsProto* temp = supported_delegations_;
  supported_delegations_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::content::SupportedDelegationsProto* StoredPaymentAppProto::unsafe_arena_release_supported_delegations() {
  // @@protoc_insertion_point(field_release:content.StoredPaymentAppProto.supported_delegations)
  _has_bits_[0] &= ~0x00000010u;
  ::content::SupportedDelegationsProto* temp = supported_delegations_;
  supported_delegations_ = nullptr;
  return temp;
}
inline ::content::SupportedDelegationsProto* StoredPaymentAppProto::_internal_mutable_supported_delegations() {
  _has_bits_[0] |= 0x00000010u;
  if (supported_delegations_ == nullptr) {
    auto* p = CreateMaybeMessage<::content::SupportedDelegationsProto>(GetArenaForAllocation());
    supported_delegations_ = p;
  }
  return supported_delegations_;
}
inline ::content::SupportedDelegationsProto* StoredPaymentAppProto::mutable_supported_delegations() {
  ::content::SupportedDelegationsProto* _msg = _internal_mutable_supported_delegations();
  // @@protoc_insertion_point(field_mutable:content.StoredPaymentAppProto.supported_delegations)
  return _msg;
}
inline void StoredPaymentAppProto::set_allocated_supported_delegations(::content::SupportedDelegationsProto* supported_delegations) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete supported_delegations_;
  }
  if (supported_delegations) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(supported_delegations);
    if (message_arena != submessage_arena) {
      supported_delegations = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, supported_delegations, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  supported_delegations_ = supported_delegations;
  // @@protoc_insertion_point(field_set_allocated:content.StoredPaymentAppProto.supported_delegations)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace content

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_payment_5fapp_2eproto
