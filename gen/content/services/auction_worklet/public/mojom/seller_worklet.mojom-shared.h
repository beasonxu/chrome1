// content/services/auction_worklet/public/mojom/seller_worklet.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_SELLER_WORKLET_MOJOM_SHARED_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_SELLER_WORKLET_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/services/auction_worklet/public/mojom/seller_worklet.mojom-shared-internal.h"
#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace auction_worklet {
namespace mojom {
class ComponentAuctionModifiedBidParamsDataView;

class ComponentAuctionReportResultParamsDataView;

class ComponentAuctionOtherSellerDataView;


}  // namespace mojom
}  // namespace auction_worklet

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::auction_worklet::mojom::ComponentAuctionModifiedBidParamsDataView> {
  using Data = ::auction_worklet::mojom::internal::ComponentAuctionModifiedBidParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::auction_worklet::mojom::ComponentAuctionReportResultParamsDataView> {
  using Data = ::auction_worklet::mojom::internal::ComponentAuctionReportResultParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::auction_worklet::mojom::ComponentAuctionOtherSellerDataView> {
  using Data = ::auction_worklet::mojom::internal::ComponentAuctionOtherSeller_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace auction_worklet {
namespace mojom {
// Interface base classes. They are used for type safety check.
class SellerWorkletInterfaceBase {};

using SellerWorkletPtrDataView =
    mojo::InterfacePtrDataView<SellerWorkletInterfaceBase>;
using SellerWorkletRequestDataView =
    mojo::InterfaceRequestDataView<SellerWorkletInterfaceBase>;
using SellerWorkletAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SellerWorkletInterfaceBase>;
using SellerWorkletAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SellerWorkletInterfaceBase>;


class ComponentAuctionModifiedBidParamsDataView {
 public:
  ComponentAuctionModifiedBidParamsDataView() = default;

  ComponentAuctionModifiedBidParamsDataView(
      internal::ComponentAuctionModifiedBidParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAd(UserType* output) {
    
    auto* pointer = data_->ad.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  double bid() const {
    return data_->bid;
  }
  bool has_bid() const {
    return data_->has_bid;
  }
 private:
  internal::ComponentAuctionModifiedBidParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ComponentAuctionReportResultParamsDataView {
 public:
  ComponentAuctionReportResultParamsDataView() = default;

  ComponentAuctionReportResultParamsDataView(
      internal::ComponentAuctionReportResultParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTopLevelSellerSignalsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTopLevelSellerSignals(UserType* output) {
    
    auto* pointer = data_->top_level_seller_signals.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  double modified_bid() const {
    return data_->modified_bid;
  }
  bool has_modified_bid() const {
    return data_->has_modified_bid;
  }
 private:
  internal::ComponentAuctionReportResultParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ComponentAuctionOtherSellerDataView {
 public:
  using Tag = internal::ComponentAuctionOtherSeller_Data::ComponentAuctionOtherSeller_Tag;

  ComponentAuctionOtherSellerDataView() = default;

  ComponentAuctionOtherSellerDataView(
      internal::ComponentAuctionOtherSeller_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_top_level_seller() const { return data_->tag == Tag::kTopLevelSeller; }
  inline void GetTopLevelSellerDataView(
      ::url::mojom::OriginDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadTopLevelSeller(UserType* output) const {
    
    CHECK(is_top_level_seller());
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        data_->data.f_top_level_seller.Get(), output, message_);
  }
  bool is_component_seller() const { return data_->tag == Tag::kComponentSeller; }
  inline void GetComponentSellerDataView(
      ::url::mojom::OriginDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadComponentSeller(UserType* output) const {
    
    CHECK(is_component_seller());
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        data_->data.f_component_seller.Get(), output, message_);
  }

 private:
  internal::ComponentAuctionOtherSeller_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace auction_worklet

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::ComponentAuctionModifiedBidParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::auction_worklet::mojom::ComponentAuctionModifiedBidParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::auction_worklet::mojom::internal::ComponentAuctionModifiedBidParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::ad(input)) in_ad = Traits::ad(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad)::BaseType> ad_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_ad, ad_fragment);
    fragment->ad.Set(
        ad_fragment.is_null() ? nullptr : ad_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ad.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ad in ComponentAuctionModifiedBidParams struct");
    fragment->bid = Traits::bid(input);
    fragment->has_bid = Traits::has_bid(input);
  }

  static bool Deserialize(::auction_worklet::mojom::internal::ComponentAuctionModifiedBidParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::ComponentAuctionModifiedBidParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::ComponentAuctionReportResultParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::auction_worklet::mojom::ComponentAuctionReportResultParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::auction_worklet::mojom::internal::ComponentAuctionReportResultParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::top_level_seller_signals(input)) in_top_level_seller_signals = Traits::top_level_seller_signals(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->top_level_seller_signals)::BaseType> top_level_seller_signals_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_top_level_seller_signals, top_level_seller_signals_fragment);
    fragment->top_level_seller_signals.Set(
        top_level_seller_signals_fragment.is_null() ? nullptr : top_level_seller_signals_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->top_level_seller_signals.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null top_level_seller_signals in ComponentAuctionReportResultParams struct");
    fragment->modified_bid = Traits::modified_bid(input);
    fragment->has_modified_bid = Traits::has_modified_bid(input);
  }

  static bool Deserialize(::auction_worklet::mojom::internal::ComponentAuctionReportResultParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::ComponentAuctionReportResultParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::ComponentAuctionOtherSellerDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::auction_worklet::mojom::ComponentAuctionOtherSellerDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::auction_worklet::mojom::internal::ComponentAuctionOtherSeller_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::auction_worklet::mojom::ComponentAuctionOtherSellerDataView::Tag::kTopLevelSeller: {
        decltype(Traits::top_level_seller(input))
            in_top_level_seller = Traits::top_level_seller(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_top_level_seller)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::url::mojom::OriginDataView>(
            in_top_level_seller, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null top_level_seller in ComponentAuctionOtherSeller union");
        fragment->data.f_top_level_seller.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::auction_worklet::mojom::ComponentAuctionOtherSellerDataView::Tag::kComponentSeller: {
        decltype(Traits::component_seller(input))
            in_component_seller = Traits::component_seller(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_component_seller)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::url::mojom::OriginDataView>(
            in_component_seller, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null component_seller in ComponentAuctionOtherSeller union");
        fragment->data.f_component_seller.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::auction_worklet::mojom::internal::ComponentAuctionOtherSeller_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::ComponentAuctionOtherSellerDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace auction_worklet {
namespace mojom {

inline void ComponentAuctionModifiedBidParamsDataView::GetAdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ad.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ComponentAuctionReportResultParamsDataView::GetTopLevelSellerSignalsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->top_level_seller_signals.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void ComponentAuctionOtherSellerDataView::GetTopLevelSellerDataView(
    ::url::mojom::OriginDataView* output) const {
  CHECK(is_top_level_seller());
  *output = ::url::mojom::OriginDataView(data_->data.f_top_level_seller.Get(), message_);
}
inline void ComponentAuctionOtherSellerDataView::GetComponentSellerDataView(
    ::url::mojom::OriginDataView* output) const {
  CHECK(is_component_seller());
  *output = ::url::mojom::OriginDataView(data_->data.f_component_seller.Get(), message_);
}


}  // namespace mojom
}  // namespace auction_worklet

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_SELLER_WORKLET_MOJOM_SHARED_H_