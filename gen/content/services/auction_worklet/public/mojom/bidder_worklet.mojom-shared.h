// content/services/auction_worklet/public/mojom/bidder_worklet.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_SHARED_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/services/auction_worklet/public/mojom/bidder_worklet.mojom-shared-internal.h"
#include "content/services/auction_worklet/public/mojom/private_aggregation_request.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/url_loader_factory.mojom-shared.h"
#include "third_party/blink/public/mojom/devtools/devtools_agent.mojom-shared.h"
#include "third_party/blink/public/mojom/interest_group/interest_group_types.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "base/component_export.h"




namespace auction_worklet {
namespace mojom {
class PreviousWinDataView;

class BidderWorkletNonSharedParamsDataView;

class BiddingBrowserSignalsDataView;

class BidderWorkletBidDataView;



}  // namespace mojom
}  // namespace auction_worklet

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::auction_worklet::mojom::PreviousWinDataView> {
  using Data = ::auction_worklet::mojom::internal::PreviousWin_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::auction_worklet::mojom::BidderWorkletNonSharedParamsDataView> {
  using Data = ::auction_worklet::mojom::internal::BidderWorkletNonSharedParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::auction_worklet::mojom::BiddingBrowserSignalsDataView> {
  using Data = ::auction_worklet::mojom::internal::BiddingBrowserSignals_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::auction_worklet::mojom::BidderWorkletBidDataView> {
  using Data = ::auction_worklet::mojom::internal::BidderWorkletBid_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace auction_worklet {
namespace mojom {
// Interface base classes. They are used for type safety check.
class BidderWorkletInterfaceBase {};

using BidderWorkletPtrDataView =
    mojo::InterfacePtrDataView<BidderWorkletInterfaceBase>;
using BidderWorkletRequestDataView =
    mojo::InterfaceRequestDataView<BidderWorkletInterfaceBase>;
using BidderWorkletAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<BidderWorkletInterfaceBase>;
using BidderWorkletAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<BidderWorkletInterfaceBase>;


class PreviousWinDataView {
 public:
  PreviousWinDataView() = default;

  PreviousWinDataView(
      internal::PreviousWin_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimeDataView(
      ::mojo_base::mojom::TimeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTime(UserType* output) {
    
    auto* pointer = data_->time.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDataView>(
        pointer, output, message_);
  }
  inline void GetAdJsonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdJson(UserType* output) {
    
    auto* pointer = data_->ad_json.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::PreviousWin_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BidderWorkletNonSharedParamsDataView {
 public:
  BidderWorkletNonSharedParamsDataView() = default;

  BidderWorkletNonSharedParamsDataView(
      internal::BidderWorkletNonSharedParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadExecutionMode(UserType* output) const {
    auto data_value = data_->execution_mode;
    return mojo::internal::Deserialize<::blink::mojom::InterestGroup_ExecutionMode>(
        data_value, output);
  }
  ::blink::mojom::InterestGroup_ExecutionMode execution_mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::InterestGroup_ExecutionMode>(data_->execution_mode));
  }
  inline void GetDailyUpdateUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDailyUpdateUrl(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::url::mojom::UrlDataView, UserType>(),
    "Attempting to read the optional `daily_update_url` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDailyUpdateUrl` instead "
    "of `ReadDailyUpdateUrl if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->daily_update_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetTrustedBiddingSignalsKeysDataView(
      mojo::ArrayDataView<mojo::StringDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTrustedBiddingSignalsKeys(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<mojo::StringDataView>, UserType>(),
    "Attempting to read the optional `trusted_bidding_signals_keys` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTrustedBiddingSignalsKeys` instead "
    "of `ReadTrustedBiddingSignalsKeys if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->trusted_bidding_signals_keys.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::StringDataView>>(
        pointer, output, message_);
  }
  inline void GetUserBiddingSignalsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUserBiddingSignals(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `user_bidding_signals` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadUserBiddingSignals` instead "
    "of `ReadUserBiddingSignals if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->user_bidding_signals.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetAdsDataView(
      mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAds(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>, UserType>(),
    "Attempting to read the optional `ads` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAds` instead "
    "of `ReadAds if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->ads.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>>(
        pointer, output, message_);
  }
  inline void GetAdComponentsDataView(
      mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdComponents(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>, UserType>(),
    "Attempting to read the optional `ad_components` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAdComponents` instead "
    "of `ReadAdComponents if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->ad_components.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>>(
        pointer, output, message_);
  }
 private:
  internal::BidderWorkletNonSharedParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BiddingBrowserSignalsDataView {
 public:
  BiddingBrowserSignalsDataView() = default;

  BiddingBrowserSignalsDataView(
      internal::BiddingBrowserSignals_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t join_count() const {
    return data_->join_count;
  }
  int32_t bid_count() const {
    return data_->bid_count;
  }
  inline void GetPrevWinsDataView(
      mojo::ArrayDataView<PreviousWinDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrevWins(UserType* output) {
    
    auto* pointer = data_->prev_wins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::auction_worklet::mojom::PreviousWinDataView>>(
        pointer, output, message_);
  }
 private:
  internal::BiddingBrowserSignals_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class BidderWorkletBidDataView {
 public:
  BidderWorkletBidDataView() = default;

  BidderWorkletBidDataView(
      internal::BidderWorkletBid_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAd(UserType* output) {
    
    auto* pointer = data_->ad.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  double bid() const {
    return data_->bid;
  }
  inline void GetRenderUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRenderUrl(UserType* output) {
    
    auto* pointer = data_->render_url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetAdComponentsDataView(
      mojo::ArrayDataView<::url::mojom::UrlDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdComponents(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::ArrayDataView<::url::mojom::UrlDataView>, UserType>(),
    "Attempting to read the optional `ad_components` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadAdComponents` instead "
    "of `ReadAdComponents if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->ad_components.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        pointer, output, message_);
  }
  inline void GetBidDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBidDuration(UserType* output) {
    
    auto* pointer = data_->bid_duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::BidderWorkletBid_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace auction_worklet

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::PreviousWinDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::auction_worklet::mojom::PreviousWinDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::auction_worklet::mojom::internal::PreviousWin_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::time(input)) in_time = Traits::time(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->time)::BaseType> time_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDataView>(
        in_time, time_fragment);
    fragment->time.Set(
        time_fragment.is_null() ? nullptr : time_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->time.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null time in PreviousWin struct");
    decltype(Traits::ad_json(input)) in_ad_json = Traits::ad_json(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad_json)::BaseType> ad_json_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_ad_json, ad_json_fragment);
    fragment->ad_json.Set(
        ad_json_fragment.is_null() ? nullptr : ad_json_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ad_json.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ad_json in PreviousWin struct");
  }

  static bool Deserialize(::auction_worklet::mojom::internal::PreviousWin_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::PreviousWinDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::BidderWorkletNonSharedParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::auction_worklet::mojom::BidderWorkletNonSharedParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::auction_worklet::mojom::internal::BidderWorkletNonSharedParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in BidderWorkletNonSharedParams struct");
    mojo::internal::Serialize<::blink::mojom::InterestGroup_ExecutionMode>(
        Traits::execution_mode(input), &fragment->execution_mode);
    decltype(Traits::daily_update_url(input)) in_daily_update_url = Traits::daily_update_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->daily_update_url)::BaseType> daily_update_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_daily_update_url, daily_update_url_fragment);
    fragment->daily_update_url.Set(
        daily_update_url_fragment.is_null() ? nullptr : daily_update_url_fragment.data());
    decltype(Traits::trusted_bidding_signals_keys(input)) in_trusted_bidding_signals_keys = Traits::trusted_bidding_signals_keys(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->trusted_bidding_signals_keys)::BaseType>
        trusted_bidding_signals_keys_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams trusted_bidding_signals_keys_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
        in_trusted_bidding_signals_keys, trusted_bidding_signals_keys_fragment, &trusted_bidding_signals_keys_validate_params);
    fragment->trusted_bidding_signals_keys.Set(
        trusted_bidding_signals_keys_fragment.is_null() ? nullptr : trusted_bidding_signals_keys_fragment.data());
    decltype(Traits::user_bidding_signals(input)) in_user_bidding_signals = Traits::user_bidding_signals(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->user_bidding_signals)::BaseType> user_bidding_signals_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_user_bidding_signals, user_bidding_signals_fragment);
    fragment->user_bidding_signals.Set(
        user_bidding_signals_fragment.is_null() ? nullptr : user_bidding_signals_fragment.data());
    decltype(Traits::ads(input)) in_ads = Traits::ads(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ads)::BaseType>
        ads_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams ads_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>>(
        in_ads, ads_fragment, &ads_validate_params);
    fragment->ads.Set(
        ads_fragment.is_null() ? nullptr : ads_fragment.data());
    decltype(Traits::ad_components(input)) in_ad_components = Traits::ad_components(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad_components)::BaseType>
        ad_components_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams ad_components_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>>(
        in_ad_components, ad_components_fragment, &ad_components_validate_params);
    fragment->ad_components.Set(
        ad_components_fragment.is_null() ? nullptr : ad_components_fragment.data());
  }

  static bool Deserialize(::auction_worklet::mojom::internal::BidderWorkletNonSharedParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::BidderWorkletNonSharedParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::BiddingBrowserSignalsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::auction_worklet::mojom::BiddingBrowserSignalsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::auction_worklet::mojom::internal::BiddingBrowserSignals_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->join_count = Traits::join_count(input);
    fragment->bid_count = Traits::bid_count(input);
    decltype(Traits::prev_wins(input)) in_prev_wins = Traits::prev_wins(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->prev_wins)::BaseType>
        prev_wins_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams prev_wins_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::auction_worklet::mojom::PreviousWinDataView>>(
        in_prev_wins, prev_wins_fragment, &prev_wins_validate_params);
    fragment->prev_wins.Set(
        prev_wins_fragment.is_null() ? nullptr : prev_wins_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->prev_wins.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null prev_wins in BiddingBrowserSignals struct");
  }

  static bool Deserialize(::auction_worklet::mojom::internal::BiddingBrowserSignals_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::BiddingBrowserSignalsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::auction_worklet::mojom::BidderWorkletBidDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::auction_worklet::mojom::BidderWorkletBidDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::auction_worklet::mojom::internal::BidderWorkletBid_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::ad(input)) in_ad = Traits::ad(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad)::BaseType> ad_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_ad, ad_fragment);
    fragment->ad.Set(
        ad_fragment.is_null() ? nullptr : ad_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ad.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ad in BidderWorkletBid struct");
    fragment->bid = Traits::bid(input);
    decltype(Traits::render_url(input)) in_render_url = Traits::render_url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->render_url)::BaseType> render_url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_render_url, render_url_fragment);
    fragment->render_url.Set(
        render_url_fragment.is_null() ? nullptr : render_url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->render_url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null render_url in BidderWorkletBid struct");
    decltype(Traits::ad_components(input)) in_ad_components = Traits::ad_components(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ad_components)::BaseType>
        ad_components_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams ad_components_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
        in_ad_components, ad_components_fragment, &ad_components_validate_params);
    fragment->ad_components.Set(
        ad_components_fragment.is_null() ? nullptr : ad_components_fragment.data());
    decltype(Traits::bid_duration(input)) in_bid_duration = Traits::bid_duration(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bid_duration)::BaseType> bid_duration_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_bid_duration, bid_duration_fragment);
    fragment->bid_duration.Set(
        bid_duration_fragment.is_null() ? nullptr : bid_duration_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bid_duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bid_duration in BidderWorkletBid struct");
  }

  static bool Deserialize(::auction_worklet::mojom::internal::BidderWorkletBid_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::auction_worklet::mojom::BidderWorkletBidDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace auction_worklet {
namespace mojom {

inline void PreviousWinDataView::GetTimeDataView(
    ::mojo_base::mojom::TimeDataView* output) {
  auto pointer = data_->time.Get();
  *output = ::mojo_base::mojom::TimeDataView(pointer, message_);
}
inline void PreviousWinDataView::GetAdJsonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ad_json.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void BidderWorkletNonSharedParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorkletNonSharedParamsDataView::GetDailyUpdateUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->daily_update_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BidderWorkletNonSharedParamsDataView::GetTrustedBiddingSignalsKeysDataView(
    mojo::ArrayDataView<mojo::StringDataView>* output) {
  auto pointer = data_->trusted_bidding_signals_keys.Get();
  *output = mojo::ArrayDataView<mojo::StringDataView>(pointer, message_);
}
inline void BidderWorkletNonSharedParamsDataView::GetUserBiddingSignalsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->user_bidding_signals.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorkletNonSharedParamsDataView::GetAdsDataView(
    mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>* output) {
  auto pointer = data_->ads.Get();
  *output = mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>(pointer, message_);
}
inline void BidderWorkletNonSharedParamsDataView::GetAdComponentsDataView(
    mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>* output) {
  auto pointer = data_->ad_components.Get();
  *output = mojo::ArrayDataView<::blink::mojom::InterestGroupAdDataView>(pointer, message_);
}


inline void BiddingBrowserSignalsDataView::GetPrevWinsDataView(
    mojo::ArrayDataView<PreviousWinDataView>* output) {
  auto pointer = data_->prev_wins.Get();
  *output = mojo::ArrayDataView<PreviousWinDataView>(pointer, message_);
}


inline void BidderWorkletBidDataView::GetAdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->ad.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void BidderWorkletBidDataView::GetRenderUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->render_url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void BidderWorkletBidDataView::GetAdComponentsDataView(
    mojo::ArrayDataView<::url::mojom::UrlDataView>* output) {
  auto pointer = data_->ad_components.Get();
  *output = mojo::ArrayDataView<::url::mojom::UrlDataView>(pointer, message_);
}
inline void BidderWorkletBidDataView::GetBidDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->bid_duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace auction_worklet

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_BIDDER_WORKLET_MOJOM_SHARED_H_