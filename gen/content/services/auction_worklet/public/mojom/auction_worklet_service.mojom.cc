// content/services/auction_worklet/public/mojom/auction_worklet_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "content/services/auction_worklet/public/mojom/auction_worklet_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "content/services/auction_worklet/public/mojom/auction_worklet_service.mojom-params-data.h"
#include "content/services/auction_worklet/public/mojom/auction_worklet_service.mojom-shared-message-ids.h"

#include "content/services/auction_worklet/public/mojom/auction_worklet_service.mojom-import-headers.h"
#include "content/services/auction_worklet/public/mojom/auction_worklet_service.mojom-test-utils.h"


#ifndef CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_AUCTION_WORKLET_SERVICE_MOJOM_JUMBO_H_
#define CONTENT_SERVICES_AUCTION_WORKLET_PUBLIC_MOJOM_AUCTION_WORKLET_SERVICE_MOJOM_JUMBO_H_
#endif



namespace auction_worklet {
namespace mojom {
BrowserSignals::BrowserSignals()
    : top_frame_origin(),
      seller() {}

BrowserSignals::BrowserSignals(
    const ::url::Origin& top_frame_origin_in,
    const ::url::Origin& seller_in)
    : top_frame_origin(std::move(top_frame_origin_in)),
      seller(std::move(seller_in)) {}

BrowserSignals::~BrowserSignals() = default;

void BrowserSignals::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "top_frame_origin"), this->top_frame_origin,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::url::Origin&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "seller"), this->seller,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::url::Origin&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BrowserSignals::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char AuctionWorkletService::Name_[] = "auction_worklet.mojom.AuctionWorkletService";

AuctionWorkletService::IPCStableHashFunction AuctionWorkletService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAuctionWorkletService_LoadBidderWorklet_Name: {
      return &AuctionWorkletService::LoadBidderWorklet_Sym::IPCStableHash;
    }
    case internal::kAuctionWorkletService_LoadSellerWorklet_Name: {
      return &AuctionWorkletService::LoadSellerWorklet_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AuctionWorkletService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAuctionWorkletService_LoadBidderWorklet_Name:
            return "Receive auction_worklet::mojom::AuctionWorkletService::LoadBidderWorklet";
      case internal::kAuctionWorkletService_LoadSellerWorklet_Name:
            return "Receive auction_worklet::mojom::AuctionWorkletService::LoadSellerWorklet";
    }
  } else {
    switch (message.name()) {
      case internal::kAuctionWorkletService_LoadBidderWorklet_Name:
            return "Receive reply auction_worklet::mojom::AuctionWorkletService::LoadBidderWorklet";
      case internal::kAuctionWorkletService_LoadSellerWorklet_Name:
            return "Receive reply auction_worklet::mojom::AuctionWorkletService::LoadSellerWorklet";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AuctionWorkletService::LoadBidderWorklet_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)auction_worklet::mojom::AuctionWorkletService::LoadBidderWorklet");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AuctionWorkletService::LoadSellerWorklet_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)auction_worklet::mojom::AuctionWorkletService::LoadSellerWorklet");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AuctionWorkletServiceProxy::AuctionWorkletServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AuctionWorkletServiceProxy::LoadBidderWorklet(
    ::mojo::PendingReceiver<::auction_worklet::mojom::BidderWorklet> in_bidder_worklet, bool in_pause_for_debugger_on_start, ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> in_url_loader_factory, const ::GURL& in_script_source_url, const absl::optional<::GURL>& in_wasm_helper_url, const absl::optional<::GURL>& in_trusted_bidding_signals_url, const ::url::Origin& in_top_window_origin, bool in_has_experiment_group_id, uint16_t in_experiment_group_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send auction_worklet::mojom::AuctionWorkletService::LoadBidderWorklet", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bidder_worklet"), in_bidder_worklet,
                        "<value of type ::mojo::PendingReceiver<::auction_worklet::mojom::BidderWorklet>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("pause_for_debugger_on_start"), in_pause_for_debugger_on_start,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url_loader_factory"), in_url_loader_factory,
                        "<value of type ::mojo::PendingRemote<::network::mojom::URLLoaderFactory>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("script_source_url"), in_script_source_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("wasm_helper_url"), in_wasm_helper_url,
                        "<value of type const absl::optional<::GURL>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("trusted_bidding_signals_url"), in_trusted_bidding_signals_url,
                        "<value of type const absl::optional<::GURL>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_window_origin"), in_top_window_origin,
                        "<value of type const ::url::Origin&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("has_experiment_group_id"), in_has_experiment_group_id,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("experiment_group_id"), in_experiment_group_id,
                        "<value of type uint16_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAuctionWorkletService_LoadBidderWorklet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::auction_worklet::mojom::internal::AuctionWorkletService_LoadBidderWorklet_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::auction_worklet::mojom::BidderWorkletInterfaceBase>>(
      in_bidder_worklet, &params->bidder_worklet, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->bidder_worklet),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid bidder_worklet in AuctionWorkletService.LoadBidderWorklet request");
  params->pause_for_debugger_on_start = in_pause_for_debugger_on_start;
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
      in_url_loader_factory, &params->url_loader_factory, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->url_loader_factory),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid url_loader_factory in AuctionWorkletService.LoadBidderWorklet request");
  mojo::internal::MessageFragment<
      typename decltype(params->script_source_url)::BaseType> script_source_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_script_source_url, script_source_url_fragment);
  params->script_source_url.Set(
      script_source_url_fragment.is_null() ? nullptr : script_source_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->script_source_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null script_source_url in AuctionWorkletService.LoadBidderWorklet request");
  mojo::internal::MessageFragment<
      typename decltype(params->wasm_helper_url)::BaseType> wasm_helper_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_wasm_helper_url, wasm_helper_url_fragment);
  params->wasm_helper_url.Set(
      wasm_helper_url_fragment.is_null() ? nullptr : wasm_helper_url_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->trusted_bidding_signals_url)::BaseType> trusted_bidding_signals_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_trusted_bidding_signals_url, trusted_bidding_signals_url_fragment);
  params->trusted_bidding_signals_url.Set(
      trusted_bidding_signals_url_fragment.is_null() ? nullptr : trusted_bidding_signals_url_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->top_window_origin)::BaseType> top_window_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_window_origin, top_window_origin_fragment);
  params->top_window_origin.Set(
      top_window_origin_fragment.is_null() ? nullptr : top_window_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_window_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_window_origin in AuctionWorkletService.LoadBidderWorklet request");
  params->has_experiment_group_id = in_has_experiment_group_id;
  params->experiment_group_id = in_experiment_group_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AuctionWorkletService::Name_);
  message.set_method_name("LoadBidderWorklet");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AuctionWorkletServiceProxy::LoadSellerWorklet(
    ::mojo::PendingReceiver<::auction_worklet::mojom::SellerWorklet> in_seller_worklet, bool in_pause_for_debugger_on_start, ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> in_url_loader_factory, const ::GURL& in_script_source_url, const absl::optional<::GURL>& in_trusted_scoring_signals_url, const ::url::Origin& in_top_window_origin, bool in_has_experiment_group_id, uint16_t in_experiment_group_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send auction_worklet::mojom::AuctionWorkletService::LoadSellerWorklet", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("seller_worklet"), in_seller_worklet,
                        "<value of type ::mojo::PendingReceiver<::auction_worklet::mojom::SellerWorklet>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("pause_for_debugger_on_start"), in_pause_for_debugger_on_start,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url_loader_factory"), in_url_loader_factory,
                        "<value of type ::mojo::PendingRemote<::network::mojom::URLLoaderFactory>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("script_source_url"), in_script_source_url,
                        "<value of type const ::GURL&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("trusted_scoring_signals_url"), in_trusted_scoring_signals_url,
                        "<value of type const absl::optional<::GURL>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("top_window_origin"), in_top_window_origin,
                        "<value of type const ::url::Origin&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("has_experiment_group_id"), in_has_experiment_group_id,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("experiment_group_id"), in_experiment_group_id,
                        "<value of type uint16_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAuctionWorkletService_LoadSellerWorklet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::auction_worklet::mojom::internal::AuctionWorkletService_LoadSellerWorklet_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::auction_worklet::mojom::SellerWorkletInterfaceBase>>(
      in_seller_worklet, &params->seller_worklet, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->seller_worklet),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid seller_worklet in AuctionWorkletService.LoadSellerWorklet request");
  params->pause_for_debugger_on_start = in_pause_for_debugger_on_start;
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
      in_url_loader_factory, &params->url_loader_factory, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->url_loader_factory),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid url_loader_factory in AuctionWorkletService.LoadSellerWorklet request");
  mojo::internal::MessageFragment<
      typename decltype(params->script_source_url)::BaseType> script_source_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_script_source_url, script_source_url_fragment);
  params->script_source_url.Set(
      script_source_url_fragment.is_null() ? nullptr : script_source_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->script_source_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null script_source_url in AuctionWorkletService.LoadSellerWorklet request");
  mojo::internal::MessageFragment<
      typename decltype(params->trusted_scoring_signals_url)::BaseType> trusted_scoring_signals_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_trusted_scoring_signals_url, trusted_scoring_signals_url_fragment);
  params->trusted_scoring_signals_url.Set(
      trusted_scoring_signals_url_fragment.is_null() ? nullptr : trusted_scoring_signals_url_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->top_window_origin)::BaseType> top_window_origin_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::OriginDataView>(
      in_top_window_origin, top_window_origin_fragment);
  params->top_window_origin.Set(
      top_window_origin_fragment.is_null() ? nullptr : top_window_origin_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->top_window_origin.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null top_window_origin in AuctionWorkletService.LoadSellerWorklet request");
  params->has_experiment_group_id = in_has_experiment_group_id;
  params->experiment_group_id = in_experiment_group_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AuctionWorkletService::Name_);
  message.set_method_name("LoadSellerWorklet");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AuctionWorkletServiceStubDispatch::Accept(
    AuctionWorkletService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAuctionWorkletService_LoadBidderWorklet_Name: {

      DCHECK(message->is_serialized());
      internal::AuctionWorkletService_LoadBidderWorklet_Params_Data* params =
          reinterpret_cast<internal::AuctionWorkletService_LoadBidderWorklet_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::auction_worklet::mojom::BidderWorklet> p_bidder_worklet{};
      bool p_pause_for_debugger_on_start{};
      ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> p_url_loader_factory{};
      ::GURL p_script_source_url{};
      absl::optional<::GURL> p_wasm_helper_url{};
      absl::optional<::GURL> p_trusted_bidding_signals_url{};
      ::url::Origin p_top_window_origin{};
      bool p_has_experiment_group_id{};
      uint16_t p_experiment_group_id{};
      AuctionWorkletService_LoadBidderWorklet_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_bidder_worklet =
            input_data_view.TakeBidderWorklet<decltype(p_bidder_worklet)>();
      }
      if (success)
        p_pause_for_debugger_on_start = input_data_view.pause_for_debugger_on_start();
      if (success) {
        p_url_loader_factory =
            input_data_view.TakeUrlLoaderFactory<decltype(p_url_loader_factory)>();
      }
      if (success && !input_data_view.ReadScriptSourceUrl(&p_script_source_url))
        success = false;
      if (success && !input_data_view.ReadWasmHelperUrl(&p_wasm_helper_url))
        success = false;
      if (success && !input_data_view.ReadTrustedBiddingSignalsUrl(&p_trusted_bidding_signals_url))
        success = false;
      if (success && !input_data_view.ReadTopWindowOrigin(&p_top_window_origin))
        success = false;
      if (success)
        p_has_experiment_group_id = input_data_view.has_experiment_group_id();
      if (success)
        p_experiment_group_id = input_data_view.experiment_group_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AuctionWorkletService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LoadBidderWorklet(
std::move(p_bidder_worklet), 
std::move(p_pause_for_debugger_on_start), 
std::move(p_url_loader_factory), 
std::move(p_script_source_url), 
std::move(p_wasm_helper_url), 
std::move(p_trusted_bidding_signals_url), 
std::move(p_top_window_origin), 
std::move(p_has_experiment_group_id), 
std::move(p_experiment_group_id));
      return true;
    }
    case internal::kAuctionWorkletService_LoadSellerWorklet_Name: {

      DCHECK(message->is_serialized());
      internal::AuctionWorkletService_LoadSellerWorklet_Params_Data* params =
          reinterpret_cast<internal::AuctionWorkletService_LoadSellerWorklet_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::auction_worklet::mojom::SellerWorklet> p_seller_worklet{};
      bool p_pause_for_debugger_on_start{};
      ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> p_url_loader_factory{};
      ::GURL p_script_source_url{};
      absl::optional<::GURL> p_trusted_scoring_signals_url{};
      ::url::Origin p_top_window_origin{};
      bool p_has_experiment_group_id{};
      uint16_t p_experiment_group_id{};
      AuctionWorkletService_LoadSellerWorklet_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_seller_worklet =
            input_data_view.TakeSellerWorklet<decltype(p_seller_worklet)>();
      }
      if (success)
        p_pause_for_debugger_on_start = input_data_view.pause_for_debugger_on_start();
      if (success) {
        p_url_loader_factory =
            input_data_view.TakeUrlLoaderFactory<decltype(p_url_loader_factory)>();
      }
      if (success && !input_data_view.ReadScriptSourceUrl(&p_script_source_url))
        success = false;
      if (success && !input_data_view.ReadTrustedScoringSignalsUrl(&p_trusted_scoring_signals_url))
        success = false;
      if (success && !input_data_view.ReadTopWindowOrigin(&p_top_window_origin))
        success = false;
      if (success)
        p_has_experiment_group_id = input_data_view.has_experiment_group_id();
      if (success)
        p_experiment_group_id = input_data_view.experiment_group_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AuctionWorkletService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LoadSellerWorklet(
std::move(p_seller_worklet), 
std::move(p_pause_for_debugger_on_start), 
std::move(p_url_loader_factory), 
std::move(p_script_source_url), 
std::move(p_trusted_scoring_signals_url), 
std::move(p_top_window_origin), 
std::move(p_has_experiment_group_id), 
std::move(p_experiment_group_id));
      return true;
    }
  }
  return false;
}

// static
bool AuctionWorkletServiceStubDispatch::AcceptWithResponder(
    AuctionWorkletService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAuctionWorkletService_LoadBidderWorklet_Name: {
      break;
    }
    case internal::kAuctionWorkletService_LoadSellerWorklet_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAuctionWorkletServiceValidationInfo[] = {
    {&internal::AuctionWorkletService_LoadBidderWorklet_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AuctionWorkletService_LoadSellerWorklet_Params_Data::Validate,
     nullptr /* no response */},
};

bool AuctionWorkletServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::auction_worklet::mojom::AuctionWorkletService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAuctionWorkletServiceValidationInfo);
}



}  // namespace mojom
}  // namespace auction_worklet


namespace mojo {


// static
bool StructTraits<::auction_worklet::mojom::BrowserSignals::DataView, ::auction_worklet::mojom::BrowserSignalsPtr>::Read(
    ::auction_worklet::mojom::BrowserSignals::DataView input,
    ::auction_worklet::mojom::BrowserSignalsPtr* output) {
  bool success = true;
  ::auction_worklet::mojom::BrowserSignalsPtr result(::auction_worklet::mojom::BrowserSignals::New());
  
      if (success && !input.ReadTopFrameOrigin(&result->top_frame_origin))
        success = false;
      if (success && !input.ReadSeller(&result->seller))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace auction_worklet {
namespace mojom {


void AuctionWorkletServiceInterceptorForTesting::LoadBidderWorklet(::mojo::PendingReceiver<::auction_worklet::mojom::BidderWorklet> bidder_worklet, bool pause_for_debugger_on_start, ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> url_loader_factory, const ::GURL& script_source_url, const absl::optional<::GURL>& wasm_helper_url, const absl::optional<::GURL>& trusted_bidding_signals_url, const ::url::Origin& top_window_origin, bool has_experiment_group_id, uint16_t experiment_group_id) {
  GetForwardingInterface()->LoadBidderWorklet(std::move(bidder_worklet), std::move(pause_for_debugger_on_start), std::move(url_loader_factory), std::move(script_source_url), std::move(wasm_helper_url), std::move(trusted_bidding_signals_url), std::move(top_window_origin), std::move(has_experiment_group_id), std::move(experiment_group_id));
}
void AuctionWorkletServiceInterceptorForTesting::LoadSellerWorklet(::mojo::PendingReceiver<::auction_worklet::mojom::SellerWorklet> seller_worklet, bool pause_for_debugger_on_start, ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> url_loader_factory, const ::GURL& script_source_url, const absl::optional<::GURL>& trusted_scoring_signals_url, const ::url::Origin& top_window_origin, bool has_experiment_group_id, uint16_t experiment_group_id) {
  GetForwardingInterface()->LoadSellerWorklet(std::move(seller_worklet), std::move(pause_for_debugger_on_start), std::move(url_loader_factory), std::move(script_source_url), std::move(trusted_scoring_signals_url), std::move(top_window_origin), std::move(has_experiment_group_id), std::move(experiment_group_id));
}
AuctionWorkletServiceAsyncWaiter::AuctionWorkletServiceAsyncWaiter(
    AuctionWorkletService* proxy) : proxy_(proxy) {}

AuctionWorkletServiceAsyncWaiter::~AuctionWorkletServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace auction_worklet


#if defined(__clang__)
#pragma clang diagnostic pop
#endif