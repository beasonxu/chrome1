// content/common/shared_storage_worklet_service.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_SHARED_STORAGE_WORKLET_SERVICE_MOJOM_TEST_UTILS_H_
#define CONTENT_COMMON_SHARED_STORAGE_WORKLET_SERVICE_MOJOM_TEST_UTILS_H_

#include "content/common/shared_storage_worklet_service.mojom.h"
#include "content/common/content_export.h"


namespace shared_storage_worklet {
namespace mojom {


class CONTENT_EXPORT SharedStorageWorkletServiceClientInterceptorForTesting : public SharedStorageWorkletServiceClient {
  virtual SharedStorageWorkletServiceClient* GetForwardingInterface() = 0;
  void SharedStorageSet(const ::std::u16string& key, const ::std::u16string& value, bool ignore_if_present, SharedStorageSetCallback callback) override;
  void SharedStorageAppend(const ::std::u16string& key, const ::std::u16string& value, SharedStorageAppendCallback callback) override;
  void SharedStorageDelete(const ::std::u16string& key, SharedStorageDeleteCallback callback) override;
  void SharedStorageClear(SharedStorageClearCallback callback) override;
  void SharedStorageGet(const ::std::u16string& key, SharedStorageGetCallback callback) override;
  void SharedStorageKeys(::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> listener) override;
  void SharedStorageEntries(::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> listener) override;
  void SharedStorageLength(SharedStorageLengthCallback callback) override;
  void ConsoleLog(const std::string& message) override;
};
class CONTENT_EXPORT SharedStorageWorkletServiceClientAsyncWaiter {
 public:
  explicit SharedStorageWorkletServiceClientAsyncWaiter(SharedStorageWorkletServiceClient* proxy);

  SharedStorageWorkletServiceClientAsyncWaiter(const SharedStorageWorkletServiceClientAsyncWaiter&) = delete;
  SharedStorageWorkletServiceClientAsyncWaiter& operator=(const SharedStorageWorkletServiceClientAsyncWaiter&) = delete;

  ~SharedStorageWorkletServiceClientAsyncWaiter();
  void SharedStorageSet(
      const ::std::u16string& key, const ::std::u16string& value, bool ignore_if_present, bool* out_success, std::string* out_error_message);
  void SharedStorageAppend(
      const ::std::u16string& key, const ::std::u16string& value, bool* out_success, std::string* out_error_message);
  void SharedStorageDelete(
      const ::std::u16string& key, bool* out_success, std::string* out_error_message);
  void SharedStorageClear(
      bool* out_success, std::string* out_error_message);
  void SharedStorageGet(
      const ::std::u16string& key, SharedStorageGetStatus* out_status, std::string* out_error_message, ::std::u16string* out_value);
  void SharedStorageLength(
      bool* out_success, std::string* out_error_message, uint32_t* out_length);

 private:
  SharedStorageWorkletServiceClient* const proxy_;
};


class CONTENT_EXPORT SharedStorageWorkletServiceInterceptorForTesting : public SharedStorageWorkletService {
  virtual SharedStorageWorkletService* GetForwardingInterface() = 0;
  void BindSharedStorageWorkletServiceClient(::mojo::PendingAssociatedRemote<SharedStorageWorkletServiceClient> client) override;
  void AddModule(::mojo::PendingRemote<::network::mojom::URLLoaderFactory> url_loader_factory, const ::GURL& script_source_url, AddModuleCallback callback) override;
  void RunURLSelectionOperation(const std::string& name, const std::vector<::GURL>& urls, const std::vector<uint8_t>& serialized_data, RunURLSelectionOperationCallback callback) override;
  void RunOperation(const std::string& name, const std::vector<uint8_t>& serialized_data, RunOperationCallback callback) override;
};
class CONTENT_EXPORT SharedStorageWorkletServiceAsyncWaiter {
 public:
  explicit SharedStorageWorkletServiceAsyncWaiter(SharedStorageWorkletService* proxy);

  SharedStorageWorkletServiceAsyncWaiter(const SharedStorageWorkletServiceAsyncWaiter&) = delete;
  SharedStorageWorkletServiceAsyncWaiter& operator=(const SharedStorageWorkletServiceAsyncWaiter&) = delete;

  ~SharedStorageWorkletServiceAsyncWaiter();
  void AddModule(
      ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> url_loader_factory, const ::GURL& script_source_url, bool* out_success, std::string* out_error_message);
  void RunURLSelectionOperation(
      const std::string& name, const std::vector<::GURL>& urls, const std::vector<uint8_t>& serialized_data, bool* out_success, std::string* out_error_message, uint32_t* out_index);
  void RunOperation(
      const std::string& name, const std::vector<uint8_t>& serialized_data, bool* out_success, std::string* out_error_message);

 private:
  SharedStorageWorkletService* const proxy_;
};




}  // namespace mojom
}  // namespace shared_storage_worklet

#endif  // CONTENT_COMMON_SHARED_STORAGE_WORKLET_SERVICE_MOJOM_TEST_UTILS_H_