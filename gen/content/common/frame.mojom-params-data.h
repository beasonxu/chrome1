// content/common/frame.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_FRAME_MOJOM_PARAMS_DATA_H_
#define CONTENT_COMMON_FRAME_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace content {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHTMLSerializerHandler_DidReceiveData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> data_buffer;

 private:
  friend class mojo::internal::MessageFragment<FrameHTMLSerializerHandler_DidReceiveData_Params_Data>;

  FrameHTMLSerializerHandler_DidReceiveData_Params_Data();
  ~FrameHTMLSerializerHandler_DidReceiveData_Params_Data() = delete;
};
static_assert(sizeof(FrameHTMLSerializerHandler_DidReceiveData_Params_Data) == 16,
              "Bad sizeof(FrameHTMLSerializerHandler_DidReceiveData_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHTMLSerializerHandler_Done_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameHTMLSerializerHandler_Done_Params_Data>;

  FrameHTMLSerializerHandler_Done_Params_Data();
  ~FrameHTMLSerializerHandler_Done_Params_Data() = delete;
};
static_assert(sizeof(FrameHTMLSerializerHandler_Done_Params_Data) == 8,
              "Bad sizeof(FrameHTMLSerializerHandler_Done_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_CommitSameDocumentNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::CommonNavigationParams_Data> common_params;
  mojo::internal::Pointer<::blink::mojom::internal::CommitNavigationParams_Data> request_params;

 private:
  friend class mojo::internal::MessageFragment<Frame_CommitSameDocumentNavigation_Params_Data>;

  Frame_CommitSameDocumentNavigation_Params_Data();
  ~Frame_CommitSameDocumentNavigation_Params_Data() = delete;
};
static_assert(sizeof(Frame_CommitSameDocumentNavigation_Params_Data) == 24,
              "Bad sizeof(Frame_CommitSameDocumentNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_CommitSameDocumentNavigation_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t commit_result;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Frame_CommitSameDocumentNavigation_ResponseParams_Data>;

  Frame_CommitSameDocumentNavigation_ResponseParams_Data();
  ~Frame_CommitSameDocumentNavigation_ResponseParams_Data() = delete;
};
static_assert(sizeof(Frame_CommitSameDocumentNavigation_ResponseParams_Data) == 16,
              "Bad sizeof(Frame_CommitSameDocumentNavigation_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_UpdateSubresourceLoaderFactories_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::URLLoaderFactoryBundle_Data> subresource_loader_factories;

 private:
  friend class mojo::internal::MessageFragment<Frame_UpdateSubresourceLoaderFactories_Params_Data>;

  Frame_UpdateSubresourceLoaderFactories_Params_Data();
  ~Frame_UpdateSubresourceLoaderFactories_Params_Data() = delete;
};
static_assert(sizeof(Frame_UpdateSubresourceLoaderFactories_Params_Data) == 16,
              "Bad sizeof(Frame_UpdateSubresourceLoaderFactories_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_SetWantErrorMessageStackTrace_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Frame_SetWantErrorMessageStackTrace_Params_Data>;

  Frame_SetWantErrorMessageStackTrace_Params_Data();
  ~Frame_SetWantErrorMessageStackTrace_Params_Data() = delete;
};
static_assert(sizeof(Frame_SetWantErrorMessageStackTrace_Params_Data) == 8,
              "Bad sizeof(Frame_SetWantErrorMessageStackTrace_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_Unload_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_loading : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> new_remote_frame_replication_state;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> new_remote_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromBrowser_Data> new_remote_frame_interfaces;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteMainFrameInterfaces_Data> new_remote_main_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<Frame_Unload_Params_Data>;

  Frame_Unload_Params_Data();
  ~Frame_Unload_Params_Data() = delete;
};
static_assert(sizeof(Frame_Unload_Params_Data) == 48,
              "Bad sizeof(Frame_Unload_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_Delete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t intention;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Frame_Delete_Params_Data>;

  Frame_Delete_Params_Data();
  ~Frame_Delete_Params_Data() = delete;
};
static_assert(sizeof(Frame_Delete_Params_Data) == 16,
              "Bad sizeof(Frame_Delete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_UndoCommitNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_loading : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::blink::mojom::internal::FrameReplicationState_Data> new_remote_frame_replication_state;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameToken_Data> new_remote_frame_token;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteFrameInterfacesFromBrowser_Data> new_remote_frame_interfaces;
  mojo::internal::Pointer<::blink::mojom::internal::RemoteMainFrameInterfaces_Data> new_remote_main_frame_interfaces;

 private:
  friend class mojo::internal::MessageFragment<Frame_UndoCommitNavigation_Params_Data>;

  Frame_UndoCommitNavigation_Params_Data();
  ~Frame_UndoCommitNavigation_Params_Data() = delete;
};
static_assert(sizeof(Frame_UndoCommitNavigation_Params_Data) == 48,
              "Bad sizeof(Frame_UndoCommitNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_BlockRequests_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Frame_BlockRequests_Params_Data>;

  Frame_BlockRequests_Params_Data();
  ~Frame_BlockRequests_Params_Data() = delete;
};
static_assert(sizeof(Frame_BlockRequests_Params_Data) == 8,
              "Bad sizeof(Frame_BlockRequests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_ResumeBlockedRequests_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Frame_ResumeBlockedRequests_Params_Data>;

  Frame_ResumeBlockedRequests_Params_Data();
  ~Frame_ResumeBlockedRequests_Params_Data() = delete;
};
static_assert(sizeof(Frame_ResumeBlockedRequests_Params_Data) == 8,
              "Bad sizeof(Frame_ResumeBlockedRequests_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_GetInterfaceProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data interfaces;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Frame_GetInterfaceProvider_Params_Data>;

  Frame_GetInterfaceProvider_Params_Data();
  ~Frame_GetInterfaceProvider_Params_Data() = delete;
};
static_assert(sizeof(Frame_GetInterfaceProvider_Params_Data) == 16,
              "Bad sizeof(Frame_GetInterfaceProvider_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_SnapshotAccessibilityTree_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SnapshotAccessibilityTreeParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<Frame_SnapshotAccessibilityTree_Params_Data>;

  Frame_SnapshotAccessibilityTree_Params_Data();
  ~Frame_SnapshotAccessibilityTree_Params_Data() = delete;
};
static_assert(sizeof(Frame_SnapshotAccessibilityTree_Params_Data) == 16,
              "Bad sizeof(Frame_SnapshotAccessibilityTree_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_SnapshotAccessibilityTree_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::ax::mojom::internal::AXTreeUpdate_Data> snapshot;

 private:
  friend class mojo::internal::MessageFragment<Frame_SnapshotAccessibilityTree_ResponseParams_Data>;

  Frame_SnapshotAccessibilityTree_ResponseParams_Data();
  ~Frame_SnapshotAccessibilityTree_ResponseParams_Data() = delete;
};
static_assert(sizeof(Frame_SnapshotAccessibilityTree_ResponseParams_Data) == 16,
              "Bad sizeof(Frame_SnapshotAccessibilityTree_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_SnapshotAndDistillAXTree_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<Frame_SnapshotAndDistillAXTree_Params_Data>;

  Frame_SnapshotAndDistillAXTree_Params_Data();
  ~Frame_SnapshotAndDistillAXTree_Params_Data() = delete;
};
static_assert(sizeof(Frame_SnapshotAndDistillAXTree_Params_Data) == 8,
              "Bad sizeof(Frame_SnapshotAndDistillAXTree_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_SnapshotAndDistillAXTree_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::ax::mojom::internal::AXTreeUpdate_Data> snapshot;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> content_node_ids;

 private:
  friend class mojo::internal::MessageFragment<Frame_SnapshotAndDistillAXTree_ResponseParams_Data>;

  Frame_SnapshotAndDistillAXTree_ResponseParams_Data();
  ~Frame_SnapshotAndDistillAXTree_ResponseParams_Data() = delete;
};
static_assert(sizeof(Frame_SnapshotAndDistillAXTree_ResponseParams_Data) == 24,
              "Bad sizeof(Frame_SnapshotAndDistillAXTree_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) Frame_GetSerializedHtmlWithLocalLinks_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Map_Data<mojo::internal::Pointer<::url::mojom::internal::Url_Data>, mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data>>> url_map;
  mojo::internal::Pointer<mojo::internal::Map_Data<::blink::mojom::internal::FrameToken_Data, mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data>>> frame_token_map;
  uint8_t save_with_empty_url : 1;
  uint8_t pad2_[3];
  mojo::internal::Interface_Data handler_remote;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Frame_GetSerializedHtmlWithLocalLinks_Params_Data>;

  Frame_GetSerializedHtmlWithLocalLinks_Params_Data();
  ~Frame_GetSerializedHtmlWithLocalLinks_Params_Data() = delete;
};
static_assert(sizeof(Frame_GetSerializedHtmlWithLocalLinks_Params_Data) == 40,
              "Bad sizeof(Frame_GetSerializedHtmlWithLocalLinks_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameBindingsControl_AllowBindings_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t enabled_bindings_flags;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameBindingsControl_AllowBindings_Params_Data>;

  FrameBindingsControl_AllowBindings_Params_Data();
  ~FrameBindingsControl_AllowBindings_Params_Data() = delete;
};
static_assert(sizeof(FrameBindingsControl_AllowBindings_Params_Data) == 16,
              "Bad sizeof(FrameBindingsControl_AllowBindings_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameBindingsControl_EnableMojoJsBindings_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::ExtraMojoJsFeatures_Data> features;

 private:
  friend class mojo::internal::MessageFragment<FrameBindingsControl_EnableMojoJsBindings_Params_Data>;

  FrameBindingsControl_EnableMojoJsBindings_Params_Data();
  ~FrameBindingsControl_EnableMojoJsBindings_Params_Data() = delete;
};
static_assert(sizeof(FrameBindingsControl_EnableMojoJsBindings_Params_Data) == 16,
              "Bad sizeof(FrameBindingsControl_EnableMojoJsBindings_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data broker;

 private:
  friend class mojo::internal::MessageFragment<FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data>;

  FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data();
  ~FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data() = delete;
};
static_assert(sizeof(FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data) == 16,
              "Bad sizeof(FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameBindingsControl_BindWebUI_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::AssociatedEndpointHandle_Data receiver;
  mojo::internal::AssociatedInterface_Data remote;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameBindingsControl_BindWebUI_Params_Data>;

  FrameBindingsControl_BindWebUI_Params_Data();
  ~FrameBindingsControl_BindWebUI_Params_Data() = delete;
};
static_assert(sizeof(FrameBindingsControl_BindWebUI_Params_Data) == 24,
              "Bad sizeof(FrameBindingsControl_BindWebUI_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data>;

  NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data();
  ~NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data() = delete;
};
static_assert(sizeof(NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data) == 8,
              "Bad sizeof(NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreateNewWindow_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::CreateNewWindowParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_CreateNewWindow_Params_Data>;

  FrameHost_CreateNewWindow_Params_Data();
  ~FrameHost_CreateNewWindow_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_CreateNewWindow_Params_Data) == 16,
              "Bad sizeof(FrameHost_CreateNewWindow_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreateNewWindow_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::CreateNewWindowReply_Data> reply;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_CreateNewWindow_ResponseParams_Data>;

  FrameHost_CreateNewWindow_ResponseParams_Data();
  ~FrameHost_CreateNewWindow_ResponseParams_Data() = delete;
};
static_assert(sizeof(FrameHost_CreateNewWindow_ResponseParams_Data) == 24,
              "Bad sizeof(FrameHost_CreateNewWindow_ResponseParams_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CreateChildFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t child_routing_id;
  mojo::internal::AssociatedInterface_Data frame;
  mojo::internal::Handle_Data browser_interface_broker;
  mojo::internal::Pointer<::blink::mojom::internal::PolicyContainerBindParams_Data> policy_container_bind_params;
  mojo::internal::AssociatedEndpointHandle_Data associated_interface_provider;
  int32_t scope;
  mojo::internal::Pointer<mojo::internal::String_Data> frame_name;
  mojo::internal::Pointer<mojo::internal::String_Data> frame_unique_name;
  uint8_t is_created_by_script : 1;
  uint8_t pad8_[3];
  int32_t child_frame_owner_element_type;
  mojo::internal::Pointer<::blink::mojom::internal::FramePolicy_Data> frame_policy;
  mojo::internal::Pointer<::blink::mojom::internal::FrameOwnerProperties_Data> frame_owner_properties;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_CreateChildFrame_Params_Data>;

  FrameHost_CreateChildFrame_Params_Data();
  ~FrameHost_CreateChildFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_CreateChildFrame_Params_Data) == 80,
              "Bad sizeof(FrameHost_CreateChildFrame_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidCommitProvisionalLoad_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitProvisionalLoadParams_Data> params;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitProvisionalLoadInterfaceParams_Data> interface_params;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_DidCommitProvisionalLoad_Params_Data>;

  FrameHost_DidCommitProvisionalLoad_Params_Data();
  ~FrameHost_DidCommitProvisionalLoad_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidCommitProvisionalLoad_Params_Data) == 24,
              "Bad sizeof(FrameHost_DidCommitProvisionalLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidCommitSameDocumentNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitProvisionalLoadParams_Data> params;
  mojo::internal::Pointer<::content::mojom::internal::DidCommitSameDocumentNavigationParams_Data> same_document_params;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_DidCommitSameDocumentNavigation_Params_Data>;

  FrameHost_DidCommitSameDocumentNavigation_Params_Data();
  ~FrameHost_DidCommitSameDocumentNavigation_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidCommitSameDocumentNavigation_Params_Data) == 24,
              "Bad sizeof(FrameHost_DidCommitSameDocumentNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidOpenDocumentInputStream_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_DidOpenDocumentInputStream_Params_Data>;

  FrameHost_DidOpenDocumentInputStream_Params_Data();
  ~FrameHost_DidOpenDocumentInputStream_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidOpenDocumentInputStream_Params_Data) == 16,
              "Bad sizeof(FrameHost_DidOpenDocumentInputStream_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_BeginNavigation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::CommonNavigationParams_Data> common_params;
  mojo::internal::Pointer<::blink::mojom::internal::BeginNavigationParams_Data> begin_params;
  mojo::internal::Interface_Data blob_url_token;
  mojo::internal::AssociatedInterface_Data navigation_client;
  mojo::internal::Interface_Data initiator_policy_container_keep_alive_handle;
  mojo::internal::Handle_Data renderer_cancellation_listener;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameHost_BeginNavigation_Params_Data>;

  FrameHost_BeginNavigation_Params_Data();
  ~FrameHost_BeginNavigation_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_BeginNavigation_Params_Data) == 56,
              "Bad sizeof(FrameHost_BeginNavigation_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_SubresourceResponseStarted_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::SchemeHostPort_Data> final_response_url;
  uint32_t cert_status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FrameHost_SubresourceResponseStarted_Params_Data>;

  FrameHost_SubresourceResponseStarted_Params_Data();
  ~FrameHost_SubresourceResponseStarted_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_SubresourceResponseStarted_Params_Data) == 24,
              "Bad sizeof(FrameHost_SubresourceResponseStarted_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_ResourceLoadComplete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::ResourceLoadInfo_Data> url_load_info;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_ResourceLoadComplete_Params_Data>;

  FrameHost_ResourceLoadComplete_Params_Data();
  ~FrameHost_ResourceLoadComplete_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_ResourceLoadComplete_Params_Data) == 16,
              "Bad sizeof(FrameHost_ResourceLoadComplete_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidChangeName_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> unique_name;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_DidChangeName_Params_Data>;

  FrameHost_DidChangeName_Params_Data();
  ~FrameHost_DidChangeName_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidChangeName_Params_Data) == 24,
              "Bad sizeof(FrameHost_DidChangeName_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_CancelInitialHistoryLoad_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_CancelInitialHistoryLoad_Params_Data>;

  FrameHost_CancelInitialHistoryLoad_Params_Data();
  ~FrameHost_CancelInitialHistoryLoad_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_CancelInitialHistoryLoad_Params_Data) == 8,
              "Bad sizeof(FrameHost_CancelInitialHistoryLoad_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_UpdateEncoding_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> encoding_name;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_UpdateEncoding_Params_Data>;

  FrameHost_UpdateEncoding_Params_Data();
  ~FrameHost_UpdateEncoding_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_UpdateEncoding_Params_Data) == 16,
              "Bad sizeof(FrameHost_UpdateEncoding_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_UpdateUserGestureCarryoverInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_UpdateUserGestureCarryoverInfo_Params_Data>;

  FrameHost_UpdateUserGestureCarryoverInfo_Params_Data();
  ~FrameHost_UpdateUserGestureCarryoverInfo_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_UpdateUserGestureCarryoverInfo_Params_Data) == 8,
              "Bad sizeof(FrameHost_UpdateUserGestureCarryoverInfo_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_UpdateState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::content::mojom::internal::PageState_Data> state;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_UpdateState_Params_Data>;

  FrameHost_UpdateState_Params_Data();
  ~FrameHost_UpdateState_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_UpdateState_Params_Data) == 16,
              "Bad sizeof(FrameHost_UpdateState_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_OpenURL_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::OpenURLParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_OpenURL_Params_Data>;

  FrameHost_OpenURL_Params_Data();
  ~FrameHost_OpenURL_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_OpenURL_Params_Data) == 16,
              "Bad sizeof(FrameHost_OpenURL_Params_Data)");
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) FrameHost_DidStopLoading_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<FrameHost_DidStopLoading_Params_Data>;

  FrameHost_DidStopLoading_Params_Data();
  ~FrameHost_DidStopLoading_Params_Data() = delete;
};
static_assert(sizeof(FrameHost_DidStopLoading_Params_Data) == 8,
              "Bad sizeof(FrameHost_DidStopLoading_Params_Data)");

}  // namespace internal


class FrameHTMLSerializerHandler_DidReceiveData_ParamsDataView {
 public:
  FrameHTMLSerializerHandler_DidReceiveData_ParamsDataView() = default;

  FrameHTMLSerializerHandler_DidReceiveData_ParamsDataView(
      internal::FrameHTMLSerializerHandler_DidReceiveData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataBufferDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDataBuffer(UserType* output) {
    
    auto* pointer = data_->data_buffer.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHTMLSerializerHandler_DidReceiveData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHTMLSerializerHandler_Done_ParamsDataView {
 public:
  FrameHTMLSerializerHandler_Done_ParamsDataView() = default;

  FrameHTMLSerializerHandler_Done_ParamsDataView(
      internal::FrameHTMLSerializerHandler_Done_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameHTMLSerializerHandler_Done_Params_Data* data_ = nullptr;
};



class Frame_CommitSameDocumentNavigation_ParamsDataView {
 public:
  Frame_CommitSameDocumentNavigation_ParamsDataView() = default;

  Frame_CommitSameDocumentNavigation_ParamsDataView(
      internal::Frame_CommitSameDocumentNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCommonParamsDataView(
      ::blink::mojom::CommonNavigationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCommonParams(UserType* output) {
    
    auto* pointer = data_->common_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::CommonNavigationParamsDataView>(
        pointer, output, message_);
  }
  inline void GetRequestParamsDataView(
      ::blink::mojom::CommitNavigationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestParams(UserType* output) {
    
    auto* pointer = data_->request_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::CommitNavigationParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::Frame_CommitSameDocumentNavigation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_CommitSameDocumentNavigation_ResponseParamsDataView {
 public:
  Frame_CommitSameDocumentNavigation_ResponseParamsDataView() = default;

  Frame_CommitSameDocumentNavigation_ResponseParamsDataView(
      internal::Frame_CommitSameDocumentNavigation_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadCommitResult(UserType* output) const {
    auto data_value = data_->commit_result;
    return mojo::internal::Deserialize<::blink::mojom::CommitResult>(
        data_value, output);
  }
  ::blink::mojom::CommitResult commit_result() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::CommitResult>(data_->commit_result));
  }
 private:
  internal::Frame_CommitSameDocumentNavigation_ResponseParams_Data* data_ = nullptr;
};



class Frame_UpdateSubresourceLoaderFactories_ParamsDataView {
 public:
  Frame_UpdateSubresourceLoaderFactories_ParamsDataView() = default;

  Frame_UpdateSubresourceLoaderFactories_ParamsDataView(
      internal::Frame_UpdateSubresourceLoaderFactories_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSubresourceLoaderFactoriesDataView(
      ::blink::mojom::URLLoaderFactoryBundleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubresourceLoaderFactories(UserType* output) {
    
    auto* pointer = data_->subresource_loader_factories.Get();
    return mojo::internal::Deserialize<::blink::mojom::URLLoaderFactoryBundleDataView>(
        pointer, output, message_);
  }
 private:
  internal::Frame_UpdateSubresourceLoaderFactories_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_SetWantErrorMessageStackTrace_ParamsDataView {
 public:
  Frame_SetWantErrorMessageStackTrace_ParamsDataView() = default;

  Frame_SetWantErrorMessageStackTrace_ParamsDataView(
      internal::Frame_SetWantErrorMessageStackTrace_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_SetWantErrorMessageStackTrace_Params_Data* data_ = nullptr;
};



class Frame_Unload_ParamsDataView {
 public:
  Frame_Unload_ParamsDataView() = default;

  Frame_Unload_ParamsDataView(
      internal::Frame_Unload_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool is_loading() const {
    return data_->is_loading;
  }
  inline void GetNewRemoteFrameReplicationStateDataView(
      ::blink::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteFrameReplicationState(UserType* output) {
    
    auto* pointer = data_->new_remote_frame_replication_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameReplicationStateDataView>(
        pointer, output, message_);
  }
  inline void GetNewRemoteFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteFrameToken(UserType* output) {
    
    auto* pointer = data_->new_remote_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetNewRemoteFrameInterfacesDataView(
      ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->new_remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromBrowserDataView>(
        pointer, output, message_);
  }
  inline void GetNewRemoteMainFrameInterfacesDataView(
      ::blink::mojom::RemoteMainFrameInterfacesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteMainFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->new_remote_main_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteMainFrameInterfacesDataView>(
        pointer, output, message_);
  }
 private:
  internal::Frame_Unload_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_Delete_ParamsDataView {
 public:
  Frame_Delete_ParamsDataView() = default;

  Frame_Delete_ParamsDataView(
      internal::Frame_Delete_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadIntention(UserType* output) const {
    auto data_value = data_->intention;
    return mojo::internal::Deserialize<::content::mojom::FrameDeleteIntention>(
        data_value, output);
  }
  FrameDeleteIntention intention() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::FrameDeleteIntention>(data_->intention));
  }
 private:
  internal::Frame_Delete_Params_Data* data_ = nullptr;
};



class Frame_UndoCommitNavigation_ParamsDataView {
 public:
  Frame_UndoCommitNavigation_ParamsDataView() = default;

  Frame_UndoCommitNavigation_ParamsDataView(
      internal::Frame_UndoCommitNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool is_loading() const {
    return data_->is_loading;
  }
  inline void GetNewRemoteFrameReplicationStateDataView(
      ::blink::mojom::FrameReplicationStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteFrameReplicationState(UserType* output) {
    
    auto* pointer = data_->new_remote_frame_replication_state.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameReplicationStateDataView>(
        pointer, output, message_);
  }
  inline void GetNewRemoteFrameTokenDataView(
      ::blink::mojom::RemoteFrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteFrameToken(UserType* output) {
    
    auto* pointer = data_->new_remote_frame_token.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameTokenDataView>(
        pointer, output, message_);
  }
  inline void GetNewRemoteFrameInterfacesDataView(
      ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->new_remote_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteFrameInterfacesFromBrowserDataView>(
        pointer, output, message_);
  }
  inline void GetNewRemoteMainFrameInterfacesDataView(
      ::blink::mojom::RemoteMainFrameInterfacesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewRemoteMainFrameInterfaces(UserType* output) {
    
    auto* pointer = data_->new_remote_main_frame_interfaces.Get();
    return mojo::internal::Deserialize<::blink::mojom::RemoteMainFrameInterfacesDataView>(
        pointer, output, message_);
  }
 private:
  internal::Frame_UndoCommitNavigation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_BlockRequests_ParamsDataView {
 public:
  Frame_BlockRequests_ParamsDataView() = default;

  Frame_BlockRequests_ParamsDataView(
      internal::Frame_BlockRequests_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_BlockRequests_Params_Data* data_ = nullptr;
};



class Frame_ResumeBlockedRequests_ParamsDataView {
 public:
  Frame_ResumeBlockedRequests_ParamsDataView() = default;

  Frame_ResumeBlockedRequests_ParamsDataView(
      internal::Frame_ResumeBlockedRequests_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_ResumeBlockedRequests_Params_Data* data_ = nullptr;
};



class Frame_GetInterfaceProvider_ParamsDataView {
 public:
  Frame_GetInterfaceProvider_ParamsDataView() = default;

  Frame_GetInterfaceProvider_ParamsDataView(
      internal::Frame_GetInterfaceProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeInterfaces() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::service_manager::mojom::InterfaceProviderInterfaceBase>>(
            &data_->interfaces, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Frame_GetInterfaceProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_SnapshotAccessibilityTree_ParamsDataView {
 public:
  Frame_SnapshotAccessibilityTree_ParamsDataView() = default;

  Frame_SnapshotAccessibilityTree_ParamsDataView(
      internal::Frame_SnapshotAccessibilityTree_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      SnapshotAccessibilityTreeParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::SnapshotAccessibilityTreeParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::Frame_SnapshotAccessibilityTree_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_SnapshotAccessibilityTree_ResponseParamsDataView {
 public:
  Frame_SnapshotAccessibilityTree_ResponseParamsDataView() = default;

  Frame_SnapshotAccessibilityTree_ResponseParamsDataView(
      internal::Frame_SnapshotAccessibilityTree_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSnapshotDataView(
      ::ax::mojom::AXTreeUpdateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSnapshot(UserType* output) {
    
    auto* pointer = data_->snapshot.Get();
    return mojo::internal::Deserialize<::ax::mojom::AXTreeUpdateDataView>(
        pointer, output, message_);
  }
 private:
  internal::Frame_SnapshotAccessibilityTree_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_SnapshotAndDistillAXTree_ParamsDataView {
 public:
  Frame_SnapshotAndDistillAXTree_ParamsDataView() = default;

  Frame_SnapshotAndDistillAXTree_ParamsDataView(
      internal::Frame_SnapshotAndDistillAXTree_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::Frame_SnapshotAndDistillAXTree_Params_Data* data_ = nullptr;
};



class Frame_SnapshotAndDistillAXTree_ResponseParamsDataView {
 public:
  Frame_SnapshotAndDistillAXTree_ResponseParamsDataView() = default;

  Frame_SnapshotAndDistillAXTree_ResponseParamsDataView(
      internal::Frame_SnapshotAndDistillAXTree_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSnapshotDataView(
      ::ax::mojom::AXTreeUpdateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSnapshot(UserType* output) {
    
    auto* pointer = data_->snapshot.Get();
    return mojo::internal::Deserialize<::ax::mojom::AXTreeUpdateDataView>(
        pointer, output, message_);
  }
  inline void GetContentNodeIdsDataView(
      mojo::ArrayDataView<int32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContentNodeIds(UserType* output) {
    
    auto* pointer = data_->content_node_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int32_t>>(
        pointer, output, message_);
  }
 private:
  internal::Frame_SnapshotAndDistillAXTree_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Frame_GetSerializedHtmlWithLocalLinks_ParamsDataView {
 public:
  Frame_GetSerializedHtmlWithLocalLinks_ParamsDataView() = default;

  Frame_GetSerializedHtmlWithLocalLinks_ParamsDataView(
      internal::Frame_GetSerializedHtmlWithLocalLinks_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlMapDataView(
      mojo::MapDataView<::url::mojom::UrlDataView, ::mojo_base::mojom::FilePathDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrlMap(UserType* output) {
    
    auto* pointer = data_->url_map.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::url::mojom::UrlDataView, ::mojo_base::mojom::FilePathDataView>>(
        pointer, output, message_);
  }
  inline void GetFrameTokenMapDataView(
      mojo::MapDataView<::blink::mojom::FrameTokenDataView, ::mojo_base::mojom::FilePathDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameTokenMap(UserType* output) {
    
    auto* pointer = data_->frame_token_map.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::blink::mojom::FrameTokenDataView, ::mojo_base::mojom::FilePathDataView>>(
        pointer, output, message_);
  }
  bool save_with_empty_url() const {
    return data_->save_with_empty_url;
  }
  template <typename UserType>
  UserType TakeHandlerRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::content::mojom::FrameHTMLSerializerHandlerInterfaceBase>>(
            &data_->handler_remote, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::Frame_GetSerializedHtmlWithLocalLinks_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameBindingsControl_AllowBindings_ParamsDataView {
 public:
  FrameBindingsControl_AllowBindings_ParamsDataView() = default;

  FrameBindingsControl_AllowBindings_ParamsDataView(
      internal::FrameBindingsControl_AllowBindings_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t enabled_bindings_flags() const {
    return data_->enabled_bindings_flags;
  }
 private:
  internal::FrameBindingsControl_AllowBindings_Params_Data* data_ = nullptr;
};



class FrameBindingsControl_EnableMojoJsBindings_ParamsDataView {
 public:
  FrameBindingsControl_EnableMojoJsBindings_ParamsDataView() = default;

  FrameBindingsControl_EnableMojoJsBindings_ParamsDataView(
      internal::FrameBindingsControl_EnableMojoJsBindings_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFeaturesDataView(
      ::content::mojom::ExtraMojoJsFeaturesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFeatures(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::content::mojom::ExtraMojoJsFeaturesDataView, UserType>(),
    "Attempting to read the optional `features` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFeatures` instead "
    "of `ReadFeatures if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->features.Get();
    return mojo::internal::Deserialize<::content::mojom::ExtraMojoJsFeaturesDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameBindingsControl_EnableMojoJsBindings_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameBindingsControl_EnableMojoJsBindingsWithBroker_ParamsDataView {
 public:
  FrameBindingsControl_EnableMojoJsBindingsWithBroker_ParamsDataView() = default;

  FrameBindingsControl_EnableMojoJsBindingsWithBroker_ParamsDataView(
      internal::FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeBroker() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
            &data_->broker, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameBindingsControl_EnableMojoJsBindingsWithBroker_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameBindingsControl_BindWebUI_ParamsDataView {
 public:
  FrameBindingsControl_BindWebUI_ParamsDataView() = default;

  FrameBindingsControl_BindWebUI_ParamsDataView(
      internal::FrameBindingsControl_BindWebUI_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::WebUIAssociatedRequestDataView>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeRemote() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::WebUIHostAssociatedPtrInfoDataView>(
            &data_->remote, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameBindingsControl_BindWebUI_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class NavigationRendererCancellationListener_RendererCancellationWindowEnded_ParamsDataView {
 public:
  NavigationRendererCancellationListener_RendererCancellationWindowEnded_ParamsDataView() = default;

  NavigationRendererCancellationListener_RendererCancellationWindowEnded_ParamsDataView(
      internal::NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::NavigationRendererCancellationListener_RendererCancellationWindowEnded_Params_Data* data_ = nullptr;
};



class FrameHost_CreateNewWindow_ParamsDataView {
 public:
  FrameHost_CreateNewWindow_ParamsDataView() = default;

  FrameHost_CreateNewWindow_ParamsDataView(
      internal::FrameHost_CreateNewWindow_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      CreateNewWindowParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::CreateNewWindowParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_CreateNewWindow_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_CreateNewWindow_ResponseParamsDataView {
 public:
  FrameHost_CreateNewWindow_ResponseParamsDataView() = default;

  FrameHost_CreateNewWindow_ResponseParamsDataView(
      internal::FrameHost_CreateNewWindow_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::content::mojom::CreateNewWindowStatus>(
        data_value, output);
  }
  CreateNewWindowStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::CreateNewWindowStatus>(data_->status));
  }
  inline void GetReplyDataView(
      CreateNewWindowReplyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReply(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::content::mojom::CreateNewWindowReplyDataView, UserType>(),
    "Attempting to read the optional `reply` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReply` instead "
    "of `ReadReply if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reply.Get();
    return mojo::internal::Deserialize<::content::mojom::CreateNewWindowReplyDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_CreateNewWindow_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_CreateChildFrame_ParamsDataView {
 public:
  FrameHost_CreateChildFrame_ParamsDataView() = default;

  FrameHost_CreateChildFrame_ParamsDataView(
      internal::FrameHost_CreateChildFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t child_routing_id() const {
    return data_->child_routing_id;
  }
  template <typename UserType>
  UserType TakeFrame() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::FrameAssociatedPtrInfoDataView>(
            &data_->frame, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeBrowserInterfaceBroker() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::BrowserInterfaceBrokerInterfaceBase>>(
            &data_->browser_interface_broker, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetPolicyContainerBindParamsDataView(
      ::blink::mojom::PolicyContainerBindParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyContainerBindParams(UserType* output) {
    
    auto* pointer = data_->policy_container_bind_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::PolicyContainerBindParamsDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeAssociatedInterfaceProvider() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::blink::mojom::AssociatedInterfaceProviderAssociatedRequestDataView>(
            &data_->associated_interface_provider, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadScope(UserType* output) const {
    auto data_value = data_->scope;
    return mojo::internal::Deserialize<::blink::mojom::TreeScopeType>(
        data_value, output);
  }
  ::blink::mojom::TreeScopeType scope() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::blink::mojom::TreeScopeType>(data_->scope));
  }
  inline void GetFrameNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameName(UserType* output) {
    
    auto* pointer = data_->frame_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFrameUniqueNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameUniqueName(UserType* output) {
    
    auto* pointer = data_->frame_unique_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool is_created_by_script() const {
    return data_->is_created_by_script;
  }
  inline void GetFramePolicyDataView(
      ::blink::mojom::FramePolicyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFramePolicy(UserType* output) {
    
    auto* pointer = data_->frame_policy.Get();
    return mojo::internal::Deserialize<::blink::mojom::FramePolicyDataView>(
        pointer, output, message_);
  }
  inline void GetFrameOwnerPropertiesDataView(
      ::blink::mojom::FrameOwnerPropertiesDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameOwnerProperties(UserType* output) {
    
    auto* pointer = data_->frame_owner_properties.Get();
    return mojo::internal::Deserialize<::blink::mojom::FrameOwnerPropertiesDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadChildFrameOwnerElementType(UserType* output) const {
    auto data_value = data_->child_frame_owner_element_type;
    return mojo::internal::Deserialize<::content::mojom::ChildFrameOwnerElementType>(
        data_value, output);
  }
  ChildFrameOwnerElementType child_frame_owner_element_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::ChildFrameOwnerElementType>(data_->child_frame_owner_element_type));
  }
 private:
  internal::FrameHost_CreateChildFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_DidCommitProvisionalLoad_ParamsDataView {
 public:
  FrameHost_DidCommitProvisionalLoad_ParamsDataView() = default;

  FrameHost_DidCommitProvisionalLoad_ParamsDataView(
      internal::FrameHost_DidCommitProvisionalLoad_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::content::mojom::DidCommitProvisionalLoadParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitProvisionalLoadParamsDataView>(
        pointer, output, message_);
  }
  inline void GetInterfaceParamsDataView(
      ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInterfaceParams(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView, UserType>(),
    "Attempting to read the optional `interface_params` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInterfaceParams` instead "
    "of `ReadInterfaceParams if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->interface_params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_DidCommitProvisionalLoad_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_DidCommitSameDocumentNavigation_ParamsDataView {
 public:
  FrameHost_DidCommitSameDocumentNavigation_ParamsDataView() = default;

  FrameHost_DidCommitSameDocumentNavigation_ParamsDataView(
      internal::FrameHost_DidCommitSameDocumentNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::content::mojom::DidCommitProvisionalLoadParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitProvisionalLoadParamsDataView>(
        pointer, output, message_);
  }
  inline void GetSameDocumentParamsDataView(
      ::content::mojom::DidCommitSameDocumentNavigationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSameDocumentParams(UserType* output) {
    
    auto* pointer = data_->same_document_params.Get();
    return mojo::internal::Deserialize<::content::mojom::DidCommitSameDocumentNavigationParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_DidCommitSameDocumentNavigation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_DidOpenDocumentInputStream_ParamsDataView {
 public:
  FrameHost_DidOpenDocumentInputStream_ParamsDataView() = default;

  FrameHost_DidOpenDocumentInputStream_ParamsDataView(
      internal::FrameHost_DidOpenDocumentInputStream_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_DidOpenDocumentInputStream_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_BeginNavigation_ParamsDataView {
 public:
  FrameHost_BeginNavigation_ParamsDataView() = default;

  FrameHost_BeginNavigation_ParamsDataView(
      internal::FrameHost_BeginNavigation_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCommonParamsDataView(
      ::blink::mojom::CommonNavigationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCommonParams(UserType* output) {
    
    auto* pointer = data_->common_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::CommonNavigationParamsDataView>(
        pointer, output, message_);
  }
  inline void GetBeginParamsDataView(
      ::blink::mojom::BeginNavigationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBeginParams(UserType* output) {
    
    auto* pointer = data_->begin_params.Get();
    return mojo::internal::Deserialize<::blink::mojom::BeginNavigationParamsDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeBlobUrlToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::BlobURLTokenInterfaceBase>>(
            &data_->blob_url_token, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeNavigationClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::content::mojom::NavigationClientAssociatedPtrInfoDataView>(
            &data_->navigation_client, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeInitiatorPolicyContainerKeepAliveHandle() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::PolicyContainerHostKeepAliveHandleInterfaceBase>>(
            &data_->initiator_policy_container_keep_alive_handle, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeRendererCancellationListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::content::mojom::NavigationRendererCancellationListenerInterfaceBase>>(
            &data_->renderer_cancellation_listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FrameHost_BeginNavigation_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_SubresourceResponseStarted_ParamsDataView {
 public:
  FrameHost_SubresourceResponseStarted_ParamsDataView() = default;

  FrameHost_SubresourceResponseStarted_ParamsDataView(
      internal::FrameHost_SubresourceResponseStarted_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFinalResponseUrlDataView(
      ::url::mojom::SchemeHostPortDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFinalResponseUrl(UserType* output) {
    
    auto* pointer = data_->final_response_url.Get();
    return mojo::internal::Deserialize<::url::mojom::SchemeHostPortDataView>(
        pointer, output, message_);
  }
  uint32_t cert_status() const {
    return data_->cert_status;
  }
 private:
  internal::FrameHost_SubresourceResponseStarted_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_ResourceLoadComplete_ParamsDataView {
 public:
  FrameHost_ResourceLoadComplete_ParamsDataView() = default;

  FrameHost_ResourceLoadComplete_ParamsDataView(
      internal::FrameHost_ResourceLoadComplete_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlLoadInfoDataView(
      ::blink::mojom::ResourceLoadInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrlLoadInfo(UserType* output) {
    
    auto* pointer = data_->url_load_info.Get();
    return mojo::internal::Deserialize<::blink::mojom::ResourceLoadInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_ResourceLoadComplete_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_DidChangeName_ParamsDataView {
 public:
  FrameHost_DidChangeName_ParamsDataView() = default;

  FrameHost_DidChangeName_ParamsDataView(
      internal::FrameHost_DidChangeName_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetUniqueNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUniqueName(UserType* output) {
    
    auto* pointer = data_->unique_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_DidChangeName_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_CancelInitialHistoryLoad_ParamsDataView {
 public:
  FrameHost_CancelInitialHistoryLoad_ParamsDataView() = default;

  FrameHost_CancelInitialHistoryLoad_ParamsDataView(
      internal::FrameHost_CancelInitialHistoryLoad_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameHost_CancelInitialHistoryLoad_Params_Data* data_ = nullptr;
};



class FrameHost_UpdateEncoding_ParamsDataView {
 public:
  FrameHost_UpdateEncoding_ParamsDataView() = default;

  FrameHost_UpdateEncoding_ParamsDataView(
      internal::FrameHost_UpdateEncoding_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEncodingNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEncodingName(UserType* output) {
    
    auto* pointer = data_->encoding_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_UpdateEncoding_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_UpdateUserGestureCarryoverInfo_ParamsDataView {
 public:
  FrameHost_UpdateUserGestureCarryoverInfo_ParamsDataView() = default;

  FrameHost_UpdateUserGestureCarryoverInfo_ParamsDataView(
      internal::FrameHost_UpdateUserGestureCarryoverInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameHost_UpdateUserGestureCarryoverInfo_Params_Data* data_ = nullptr;
};



class FrameHost_UpdateState_ParamsDataView {
 public:
  FrameHost_UpdateState_ParamsDataView() = default;

  FrameHost_UpdateState_ParamsDataView(
      internal::FrameHost_UpdateState_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStateDataView(
      ::content::mojom::PageStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) {
    
    auto* pointer = data_->state.Get();
    return mojo::internal::Deserialize<::content::mojom::PageStateDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_UpdateState_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_OpenURL_ParamsDataView {
 public:
  FrameHost_OpenURL_ParamsDataView() = default;

  FrameHost_OpenURL_ParamsDataView(
      internal::FrameHost_OpenURL_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      ::blink::mojom::OpenURLParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::blink::mojom::OpenURLParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameHost_OpenURL_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameHost_DidStopLoading_ParamsDataView {
 public:
  FrameHost_DidStopLoading_ParamsDataView() = default;

  FrameHost_DidStopLoading_ParamsDataView(
      internal::FrameHost_DidStopLoading_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::FrameHost_DidStopLoading_Params_Data* data_ = nullptr;
};


inline void FrameHTMLSerializerHandler_DidReceiveData_ParamsDataView::GetDataBufferDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data_buffer.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void Frame_CommitSameDocumentNavigation_ParamsDataView::GetCommonParamsDataView(
    ::blink::mojom::CommonNavigationParamsDataView* output) {
  auto pointer = data_->common_params.Get();
  *output = ::blink::mojom::CommonNavigationParamsDataView(pointer, message_);
}
inline void Frame_CommitSameDocumentNavigation_ParamsDataView::GetRequestParamsDataView(
    ::blink::mojom::CommitNavigationParamsDataView* output) {
  auto pointer = data_->request_params.Get();
  *output = ::blink::mojom::CommitNavigationParamsDataView(pointer, message_);
}




inline void Frame_UpdateSubresourceLoaderFactories_ParamsDataView::GetSubresourceLoaderFactoriesDataView(
    ::blink::mojom::URLLoaderFactoryBundleDataView* output) {
  auto pointer = data_->subresource_loader_factories.Get();
  *output = ::blink::mojom::URLLoaderFactoryBundleDataView(pointer, message_);
}




inline void Frame_Unload_ParamsDataView::GetNewRemoteFrameReplicationStateDataView(
    ::blink::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->new_remote_frame_replication_state.Get();
  *output = ::blink::mojom::FrameReplicationStateDataView(pointer, message_);
}
inline void Frame_Unload_ParamsDataView::GetNewRemoteFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->new_remote_frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void Frame_Unload_ParamsDataView::GetNewRemoteFrameInterfacesDataView(
    ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView* output) {
  auto pointer = data_->new_remote_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView(pointer, message_);
}
inline void Frame_Unload_ParamsDataView::GetNewRemoteMainFrameInterfacesDataView(
    ::blink::mojom::RemoteMainFrameInterfacesDataView* output) {
  auto pointer = data_->new_remote_main_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteMainFrameInterfacesDataView(pointer, message_);
}




inline void Frame_UndoCommitNavigation_ParamsDataView::GetNewRemoteFrameReplicationStateDataView(
    ::blink::mojom::FrameReplicationStateDataView* output) {
  auto pointer = data_->new_remote_frame_replication_state.Get();
  *output = ::blink::mojom::FrameReplicationStateDataView(pointer, message_);
}
inline void Frame_UndoCommitNavigation_ParamsDataView::GetNewRemoteFrameTokenDataView(
    ::blink::mojom::RemoteFrameTokenDataView* output) {
  auto pointer = data_->new_remote_frame_token.Get();
  *output = ::blink::mojom::RemoteFrameTokenDataView(pointer, message_);
}
inline void Frame_UndoCommitNavigation_ParamsDataView::GetNewRemoteFrameInterfacesDataView(
    ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView* output) {
  auto pointer = data_->new_remote_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteFrameInterfacesFromBrowserDataView(pointer, message_);
}
inline void Frame_UndoCommitNavigation_ParamsDataView::GetNewRemoteMainFrameInterfacesDataView(
    ::blink::mojom::RemoteMainFrameInterfacesDataView* output) {
  auto pointer = data_->new_remote_main_frame_interfaces.Get();
  *output = ::blink::mojom::RemoteMainFrameInterfacesDataView(pointer, message_);
}








inline void Frame_SnapshotAccessibilityTree_ParamsDataView::GetParamsDataView(
    SnapshotAccessibilityTreeParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = SnapshotAccessibilityTreeParamsDataView(pointer, message_);
}


inline void Frame_SnapshotAccessibilityTree_ResponseParamsDataView::GetSnapshotDataView(
    ::ax::mojom::AXTreeUpdateDataView* output) {
  auto pointer = data_->snapshot.Get();
  *output = ::ax::mojom::AXTreeUpdateDataView(pointer, message_);
}




inline void Frame_SnapshotAndDistillAXTree_ResponseParamsDataView::GetSnapshotDataView(
    ::ax::mojom::AXTreeUpdateDataView* output) {
  auto pointer = data_->snapshot.Get();
  *output = ::ax::mojom::AXTreeUpdateDataView(pointer, message_);
}
inline void Frame_SnapshotAndDistillAXTree_ResponseParamsDataView::GetContentNodeIdsDataView(
    mojo::ArrayDataView<int32_t>* output) {
  auto pointer = data_->content_node_ids.Get();
  *output = mojo::ArrayDataView<int32_t>(pointer, message_);
}


inline void Frame_GetSerializedHtmlWithLocalLinks_ParamsDataView::GetUrlMapDataView(
    mojo::MapDataView<::url::mojom::UrlDataView, ::mojo_base::mojom::FilePathDataView>* output) {
  auto pointer = data_->url_map.Get();
  *output = mojo::MapDataView<::url::mojom::UrlDataView, ::mojo_base::mojom::FilePathDataView>(pointer, message_);
}
inline void Frame_GetSerializedHtmlWithLocalLinks_ParamsDataView::GetFrameTokenMapDataView(
    mojo::MapDataView<::blink::mojom::FrameTokenDataView, ::mojo_base::mojom::FilePathDataView>* output) {
  auto pointer = data_->frame_token_map.Get();
  *output = mojo::MapDataView<::blink::mojom::FrameTokenDataView, ::mojo_base::mojom::FilePathDataView>(pointer, message_);
}




inline void FrameBindingsControl_EnableMojoJsBindings_ParamsDataView::GetFeaturesDataView(
    ::content::mojom::ExtraMojoJsFeaturesDataView* output) {
  auto pointer = data_->features.Get();
  *output = ::content::mojom::ExtraMojoJsFeaturesDataView(pointer, message_);
}








inline void FrameHost_CreateNewWindow_ParamsDataView::GetParamsDataView(
    CreateNewWindowParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = CreateNewWindowParamsDataView(pointer, message_);
}


inline void FrameHost_CreateNewWindow_ResponseParamsDataView::GetReplyDataView(
    CreateNewWindowReplyDataView* output) {
  auto pointer = data_->reply.Get();
  *output = CreateNewWindowReplyDataView(pointer, message_);
}


inline void FrameHost_CreateChildFrame_ParamsDataView::GetPolicyContainerBindParamsDataView(
    ::blink::mojom::PolicyContainerBindParamsDataView* output) {
  auto pointer = data_->policy_container_bind_params.Get();
  *output = ::blink::mojom::PolicyContainerBindParamsDataView(pointer, message_);
}
inline void FrameHost_CreateChildFrame_ParamsDataView::GetFrameNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->frame_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FrameHost_CreateChildFrame_ParamsDataView::GetFrameUniqueNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->frame_unique_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FrameHost_CreateChildFrame_ParamsDataView::GetFramePolicyDataView(
    ::blink::mojom::FramePolicyDataView* output) {
  auto pointer = data_->frame_policy.Get();
  *output = ::blink::mojom::FramePolicyDataView(pointer, message_);
}
inline void FrameHost_CreateChildFrame_ParamsDataView::GetFrameOwnerPropertiesDataView(
    ::blink::mojom::FrameOwnerPropertiesDataView* output) {
  auto pointer = data_->frame_owner_properties.Get();
  *output = ::blink::mojom::FrameOwnerPropertiesDataView(pointer, message_);
}


inline void FrameHost_DidCommitProvisionalLoad_ParamsDataView::GetParamsDataView(
    ::content::mojom::DidCommitProvisionalLoadParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::content::mojom::DidCommitProvisionalLoadParamsDataView(pointer, message_);
}
inline void FrameHost_DidCommitProvisionalLoad_ParamsDataView::GetInterfaceParamsDataView(
    ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView* output) {
  auto pointer = data_->interface_params.Get();
  *output = ::content::mojom::DidCommitProvisionalLoadInterfaceParamsDataView(pointer, message_);
}


inline void FrameHost_DidCommitSameDocumentNavigation_ParamsDataView::GetParamsDataView(
    ::content::mojom::DidCommitProvisionalLoadParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::content::mojom::DidCommitProvisionalLoadParamsDataView(pointer, message_);
}
inline void FrameHost_DidCommitSameDocumentNavigation_ParamsDataView::GetSameDocumentParamsDataView(
    ::content::mojom::DidCommitSameDocumentNavigationParamsDataView* output) {
  auto pointer = data_->same_document_params.Get();
  *output = ::content::mojom::DidCommitSameDocumentNavigationParamsDataView(pointer, message_);
}


inline void FrameHost_DidOpenDocumentInputStream_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}


inline void FrameHost_BeginNavigation_ParamsDataView::GetCommonParamsDataView(
    ::blink::mojom::CommonNavigationParamsDataView* output) {
  auto pointer = data_->common_params.Get();
  *output = ::blink::mojom::CommonNavigationParamsDataView(pointer, message_);
}
inline void FrameHost_BeginNavigation_ParamsDataView::GetBeginParamsDataView(
    ::blink::mojom::BeginNavigationParamsDataView* output) {
  auto pointer = data_->begin_params.Get();
  *output = ::blink::mojom::BeginNavigationParamsDataView(pointer, message_);
}


inline void FrameHost_SubresourceResponseStarted_ParamsDataView::GetFinalResponseUrlDataView(
    ::url::mojom::SchemeHostPortDataView* output) {
  auto pointer = data_->final_response_url.Get();
  *output = ::url::mojom::SchemeHostPortDataView(pointer, message_);
}


inline void FrameHost_ResourceLoadComplete_ParamsDataView::GetUrlLoadInfoDataView(
    ::blink::mojom::ResourceLoadInfoDataView* output) {
  auto pointer = data_->url_load_info.Get();
  *output = ::blink::mojom::ResourceLoadInfoDataView(pointer, message_);
}


inline void FrameHost_DidChangeName_ParamsDataView::GetNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FrameHost_DidChangeName_ParamsDataView::GetUniqueNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->unique_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void FrameHost_UpdateEncoding_ParamsDataView::GetEncodingNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->encoding_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void FrameHost_UpdateState_ParamsDataView::GetStateDataView(
    ::content::mojom::PageStateDataView* output) {
  auto pointer = data_->state.Get();
  *output = ::content::mojom::PageStateDataView(pointer, message_);
}


inline void FrameHost_OpenURL_ParamsDataView::GetParamsDataView(
    ::blink::mojom::OpenURLParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::blink::mojom::OpenURLParamsDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace content

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // CONTENT_COMMON_FRAME_MOJOM_PARAMS_DATA_H_