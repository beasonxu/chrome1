// content/common/renderer.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "content/common/renderer.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "content/common/renderer.mojom-params-data.h"
namespace content {
namespace mojom {

static NOINLINE const char* RenderProcessBackgroundStateToStringHelper(RenderProcessBackgroundState value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case RenderProcessBackgroundState::kForegrounded:
      return "kForegrounded";
    case RenderProcessBackgroundState::kBackgrounded:
      return "kBackgrounded";
    default:
      return nullptr;
  }
}

std::string RenderProcessBackgroundStateToString(RenderProcessBackgroundState value) {
  const char *str = RenderProcessBackgroundStateToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown RenderProcessBackgroundState value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, RenderProcessBackgroundState value) {
  return os << RenderProcessBackgroundStateToString(value);
}

static NOINLINE const char* RenderProcessVisibleStateToStringHelper(RenderProcessVisibleState value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case RenderProcessVisibleState::kVisible:
      return "kVisible";
    case RenderProcessVisibleState::kHidden:
      return "kHidden";
    default:
      return nullptr;
  }
}

std::string RenderProcessVisibleStateToString(RenderProcessVisibleState value) {
  const char *str = RenderProcessVisibleStateToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown RenderProcessVisibleState value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, RenderProcessVisibleState value) {
  return os << RenderProcessVisibleStateToString(value);
}

namespace internal {


// static
bool UpdateScrollbarThemeParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const UpdateScrollbarThemeParams_Data* object =
      static_cast<const UpdateScrollbarThemeParams_Data*>(data);


  if (!::content::mojom::internal::ScrollerStyle_Data
        ::Validate(object->preferred_scroller_style, validation_context))
    return false;

  return true;
}

UpdateScrollbarThemeParams_Data::UpdateScrollbarThemeParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool UpdateSystemColorInfoParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const UpdateSystemColorInfoParams_Data* object =
      static_cast<const UpdateSystemColorInfoParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->colors, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams colors_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::content::mojom::internal::SystemThemeColor_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->colors, validation_context,
                                         &colors_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->light_colors, 4, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams light_colors_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::color::mojom::internal::RendererColorId_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->light_colors, validation_context,
                                         &light_colors_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->dark_colors, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams dark_colors_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::color::mojom::internal::RendererColorId_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->dark_colors, validation_context,
                                         &dark_colors_validate_params)) {
    return false;
  }

  return true;
}

UpdateSystemColorInfoParams_Data::UpdateSystemColorInfoParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_CreateAgentSchedulingGroup_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_CreateAgentSchedulingGroup_Params_Data* object =
      static_cast<const Renderer_CreateAgentSchedulingGroup_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->bootstrap, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->bootstrap,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->broker_remote, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->broker_remote,
                                                 validation_context)) {
    return false;
  }

  return true;
}

Renderer_CreateAgentSchedulingGroup_Params_Data::Renderer_CreateAgentSchedulingGroup_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_CreateAssociatedAgentSchedulingGroup_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_CreateAssociatedAgentSchedulingGroup_Params_Data* object =
      static_cast<const Renderer_CreateAssociatedAgentSchedulingGroup_Params_Data*>(data);

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->agent_scheduling_group, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->agent_scheduling_group,
                                                 validation_context)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->broker_remote, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->broker_remote,
                                                 validation_context)) {
    return false;
  }

  return true;
}

Renderer_CreateAssociatedAgentSchedulingGroup_Params_Data::Renderer_CreateAssociatedAgentSchedulingGroup_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_OnNetworkConnectionChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_OnNetworkConnectionChanged_Params_Data* object =
      static_cast<const Renderer_OnNetworkConnectionChanged_Params_Data*>(data);


  if (!::content::mojom::internal::NetworkConnectionType_Data
        ::Validate(object->connection_type, validation_context))
    return false;

  return true;
}

Renderer_OnNetworkConnectionChanged_Params_Data::Renderer_OnNetworkConnectionChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_OnNetworkQualityChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 40, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_OnNetworkQualityChanged_Params_Data* object =
      static_cast<const Renderer_OnNetworkQualityChanged_Params_Data*>(data);


  if (!::network::mojom::internal::EffectiveConnectionType_Data
        ::Validate(object->effective_connection_type, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->http_rtt, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->http_rtt, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->transport_rtt, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->transport_rtt, validation_context))
    return false;

  return true;
}

Renderer_OnNetworkQualityChanged_Params_Data::Renderer_OnNetworkQualityChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_SetWebKitSharedTimersSuspended_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_SetWebKitSharedTimersSuspended_Params_Data* object =
      static_cast<const Renderer_SetWebKitSharedTimersSuspended_Params_Data*>(data);

  return true;
}

Renderer_SetWebKitSharedTimersSuspended_Params_Data::Renderer_SetWebKitSharedTimersSuspended_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_UpdateScrollbarTheme_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_UpdateScrollbarTheme_Params_Data* object =
      static_cast<const Renderer_UpdateScrollbarTheme_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->params, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->params, validation_context))
    return false;

  return true;
}

Renderer_UpdateScrollbarTheme_Params_Data::Renderer_UpdateScrollbarTheme_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_OnSystemColorsChanged_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_OnSystemColorsChanged_Params_Data* object =
      static_cast<const Renderer_OnSystemColorsChanged_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->highlight_text_color, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams highlight_text_color_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->highlight_text_color, validation_context,
                                         &highlight_text_color_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->highlight_color, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams highlight_color_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->highlight_color, validation_context,
                                         &highlight_color_validate_params)) {
    return false;
  }

  return true;
}

Renderer_OnSystemColorsChanged_Params_Data::Renderer_OnSystemColorsChanged_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_UpdateSystemColorInfo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_UpdateSystemColorInfo_Params_Data* object =
      static_cast<const Renderer_UpdateSystemColorInfo_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->params, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->params, validation_context))
    return false;

  return true;
}

Renderer_UpdateSystemColorInfo_Params_Data::Renderer_UpdateSystemColorInfo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_PurgePluginListCache_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_PurgePluginListCache_Params_Data* object =
      static_cast<const Renderer_PurgePluginListCache_Params_Data*>(data);

  return true;
}

Renderer_PurgePluginListCache_Params_Data::Renderer_PurgePluginListCache_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_SetProcessState_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_SetProcessState_Params_Data* object =
      static_cast<const Renderer_SetProcessState_Params_Data*>(data);


  if (!::content::mojom::internal::RenderProcessBackgroundState_Data
        ::Validate(object->background_state, validation_context))
    return false;


  if (!::content::mojom::internal::RenderProcessVisibleState_Data
        ::Validate(object->visible_state, validation_context))
    return false;

  return true;
}

Renderer_SetProcessState_Params_Data::Renderer_SetProcessState_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_SetIsLockedToSite_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_SetIsLockedToSite_Params_Data* object =
      static_cast<const Renderer_SetIsLockedToSite_Params_Data*>(data);

  return true;
}

Renderer_SetIsLockedToSite_Params_Data::Renderer_SetIsLockedToSite_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_SetIsCrossOriginIsolated_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_SetIsCrossOriginIsolated_Params_Data* object =
      static_cast<const Renderer_SetIsCrossOriginIsolated_Params_Data*>(data);

  return true;
}

Renderer_SetIsCrossOriginIsolated_Params_Data::Renderer_SetIsCrossOriginIsolated_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_SetIsIsolatedApplication_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_SetIsIsolatedApplication_Params_Data* object =
      static_cast<const Renderer_SetIsIsolatedApplication_Params_Data*>(data);

  return true;
}

Renderer_SetIsIsolatedApplication_Params_Data::Renderer_SetIsIsolatedApplication_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool Renderer_InitializeRenderer_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 48, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const Renderer_InitializeRenderer_Params_Data* object =
      static_cast<const Renderer_InitializeRenderer_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->user_agent, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams user_agent_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->user_agent, validation_context,
                                         &user_agent_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->full_user_agent, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams full_user_agent_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->full_user_agent, validation_context,
                                         &full_user_agent_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->reduced_user_agent, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams reduced_user_agent_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->reduced_user_agent, validation_context,
                                         &reduced_user_agent_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->metadata, 4, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->metadata, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->cors_exempt_header_list, 5, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams cors_exempt_header_list_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  if (!mojo::internal::ValidateContainer(object->cors_exempt_header_list, validation_context,
                                         &cors_exempt_header_list_validate_params)) {
    return false;
  }

  return true;
}

Renderer_InitializeRenderer_Params_Data::Renderer_InitializeRenderer_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace content

namespace perfetto {

// static
void TraceFormatTraits<::content::mojom::RenderProcessBackgroundState>::WriteIntoTrace(
   perfetto::TracedValue context, ::content::mojom::RenderProcessBackgroundState value) {
  return std::move(context).WriteString(::content::mojom::RenderProcessBackgroundStateToString(value));
}

} // namespace perfetto

namespace perfetto {

// static
void TraceFormatTraits<::content::mojom::RenderProcessVisibleState>::WriteIntoTrace(
   perfetto::TracedValue context, ::content::mojom::RenderProcessVisibleState value) {
  return std::move(context).WriteString(::content::mojom::RenderProcessVisibleStateToString(value));
}

} // namespace perfetto