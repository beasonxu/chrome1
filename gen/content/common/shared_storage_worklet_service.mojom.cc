// content/common/shared_storage_worklet_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "content/common/shared_storage_worklet_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "content/common/shared_storage_worklet_service.mojom-params-data.h"
#include "content/common/shared_storage_worklet_service.mojom-shared-message-ids.h"

#include "content/common/shared_storage_worklet_service.mojom-import-headers.h"
#include "content/common/shared_storage_worklet_service.mojom-test-utils.h"


#ifndef CONTENT_COMMON_SHARED_STORAGE_WORKLET_SERVICE_MOJOM_JUMBO_H_
#define CONTENT_COMMON_SHARED_STORAGE_WORKLET_SERVICE_MOJOM_JUMBO_H_
#endif



namespace shared_storage_worklet {
namespace mojom {
const char SharedStorageWorkletServiceClient::Name_[] = "shared_storage_worklet.mojom.SharedStorageWorkletServiceClient";

SharedStorageWorkletServiceClient::IPCStableHashFunction SharedStorageWorkletServiceClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageSet_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageAppend_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageDelete_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageClear_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageGet_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageKeys_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageKeys_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageEntries_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageEntries_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name: {
      return &SharedStorageWorkletServiceClient::SharedStorageLength_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletServiceClient_ConsoleLog_Name: {
      return &SharedStorageWorkletServiceClient::ConsoleLog_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SharedStorageWorkletServiceClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageSet";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageAppend";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageDelete";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageClear";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageGet";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageKeys_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageKeys";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageEntries_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageEntries";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageLength";
      case internal::kSharedStorageWorkletServiceClient_ConsoleLog_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::ConsoleLog";
    }
  } else {
    switch (message.name()) {
      case internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageSet";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageAppend";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageDelete";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageClear";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageGet";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageKeys_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageKeys";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageEntries_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageEntries";
      case internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageLength";
      case internal::kSharedStorageWorkletServiceClient_ConsoleLog_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::ConsoleLog";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SharedStorageWorkletServiceClient::SharedStorageSet_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageSet");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageAppend_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageAppend");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageDelete_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageDelete");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageClear_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageClear");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageGet_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageGet");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageKeys_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageKeys");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageEntries_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageEntries");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::SharedStorageLength_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageLength");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletServiceClient::ConsoleLog_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::ConsoleLog");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback(
      SharedStorageWorkletServiceClient::SharedStorageSetCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback(const SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback&) = delete;
  SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback& operator=(const SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletServiceClient::SharedStorageSetCallback callback_;
};

class SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback(
      SharedStorageWorkletServiceClient::SharedStorageAppendCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback(const SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback&) = delete;
  SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback& operator=(const SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletServiceClient::SharedStorageAppendCallback callback_;
};

class SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback(
      SharedStorageWorkletServiceClient::SharedStorageDeleteCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback(const SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback&) = delete;
  SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback& operator=(const SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletServiceClient::SharedStorageDeleteCallback callback_;
};

class SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback(
      SharedStorageWorkletServiceClient::SharedStorageClearCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback(const SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback&) = delete;
  SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback& operator=(const SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletServiceClient::SharedStorageClearCallback callback_;
};

class SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback(
      SharedStorageWorkletServiceClient::SharedStorageGetCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback(const SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback&) = delete;
  SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback& operator=(const SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletServiceClient::SharedStorageGetCallback callback_;
};

class SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback(
      SharedStorageWorkletServiceClient::SharedStorageLengthCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback(const SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback&) = delete;
  SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback& operator=(const SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletServiceClient::SharedStorageLengthCallback callback_;
};

SharedStorageWorkletServiceClientProxy::SharedStorageWorkletServiceClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SharedStorageWorkletServiceClientProxy::SharedStorageSet(
    const ::std::u16string& in_key, const ::std::u16string& in_value, bool in_ignore_if_present, SharedStorageSetCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageSet", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key"), in_key,
                        "<value of type const ::std::u16string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type const ::std::u16string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("ignore_if_present"), in_ignore_if_present,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageSet_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SharedStorageKeyArgumentDataView>(
      in_key, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in SharedStorageWorkletServiceClient.SharedStorageSet request");
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SharedStorageValueArgumentDataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in SharedStorageWorkletServiceClient.SharedStorageSet request");
  params->ignore_if_present = in_ignore_if_present;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageSet");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceClientProxy::SharedStorageAppend(
    const ::std::u16string& in_key, const ::std::u16string& in_value, SharedStorageAppendCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageAppend", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key"), in_key,
                        "<value of type const ::std::u16string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type const ::std::u16string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageAppend_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SharedStorageKeyArgumentDataView>(
      in_key, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in SharedStorageWorkletServiceClient.SharedStorageAppend request");
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SharedStorageValueArgumentDataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in SharedStorageWorkletServiceClient.SharedStorageAppend request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageAppend");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceClientProxy::SharedStorageDelete(
    const ::std::u16string& in_key, SharedStorageDeleteCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageDelete", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key"), in_key,
                        "<value of type const ::std::u16string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageDelete_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SharedStorageKeyArgumentDataView>(
      in_key, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in SharedStorageWorkletServiceClient.SharedStorageDelete request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageDelete");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceClientProxy::SharedStorageClear(
    SharedStorageClearCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageClear");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageClear_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageClear");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceClientProxy::SharedStorageGet(
    const ::std::u16string& in_key, SharedStorageGetCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageGet", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key"), in_key,
                        "<value of type const ::std::u16string&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageGet_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::SharedStorageKeyArgumentDataView>(
      in_key, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in SharedStorageWorkletServiceClient.SharedStorageGet request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageGet");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceClientProxy::SharedStorageKeys(
    ::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> in_listener) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageKeys", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("listener"), in_listener,
                        "<value of type ::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageKeys_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageKeys_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::shared_storage_worklet::mojom::SharedStorageEntriesListenerInterfaceBase>>(
      in_listener, &params->listener, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->listener),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid listener in SharedStorageWorkletServiceClient.SharedStorageKeys request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageKeys");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SharedStorageWorkletServiceClientProxy::SharedStorageEntries(
    ::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> in_listener) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageEntries", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("listener"), in_listener,
                        "<value of type ::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageEntries_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageEntries_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::shared_storage_worklet::mojom::SharedStorageEntriesListenerInterfaceBase>>(
      in_listener, &params->listener, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->listener),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid listener in SharedStorageWorkletServiceClient.SharedStorageEntries request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageEntries");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SharedStorageWorkletServiceClientProxy::SharedStorageLength(
    SharedStorageLengthCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageLength");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageLength_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageLength");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceClientProxy::ConsoleLog(
    const std::string& in_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::ConsoleLog", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("message"), in_message,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_ConsoleLog_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_ConsoleLog_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->message)::BaseType> message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_message, message_fragment);
  params->message.Set(
      message_fragment.is_null() ? nullptr : message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null message in SharedStorageWorkletServiceClient.ConsoleLog request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("ConsoleLog");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletServiceClient::SharedStorageSetCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder> proxy(
        new SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletServiceClient::SharedStorageSetCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message);
};

bool SharedStorageWorkletServiceClient_SharedStorageSet_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletServiceClient_SharedStorageSet_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletServiceClient_SharedStorageSet_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  SharedStorageWorkletServiceClient_SharedStorageSet_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletServiceClient::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message));
  return true;
}

void SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageSet", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageSet_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageSet");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletServiceClient::SharedStorageAppendCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder> proxy(
        new SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletServiceClient::SharedStorageAppendCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message);
};

bool SharedStorageWorkletServiceClient_SharedStorageAppend_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletServiceClient_SharedStorageAppend_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletServiceClient_SharedStorageAppend_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  SharedStorageWorkletServiceClient_SharedStorageAppend_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletServiceClient::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message));
  return true;
}

void SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageAppend", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageAppend_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageAppend");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletServiceClient::SharedStorageDeleteCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder> proxy(
        new SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletServiceClient::SharedStorageDeleteCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message);
};

bool SharedStorageWorkletServiceClient_SharedStorageDelete_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletServiceClient_SharedStorageDelete_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletServiceClient_SharedStorageDelete_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  SharedStorageWorkletServiceClient_SharedStorageDelete_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletServiceClient::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message));
  return true;
}

void SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageDelete", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageDelete_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageDelete");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletServiceClient::SharedStorageClearCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder> proxy(
        new SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletServiceClient::SharedStorageClearCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message);
};

bool SharedStorageWorkletServiceClient_SharedStorageClear_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletServiceClient_SharedStorageClear_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletServiceClient_SharedStorageClear_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  SharedStorageWorkletServiceClient_SharedStorageClear_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletServiceClient::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message));
  return true;
}

void SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageClear", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageClear_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageClear");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletServiceClient::SharedStorageGetCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder> proxy(
        new SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletServiceClient::SharedStorageGetCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      SharedStorageGetStatus in_status, const std::string& in_error_message, const ::std::u16string& in_value);
};

bool SharedStorageWorkletServiceClient_SharedStorageGet_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletServiceClient_SharedStorageGet_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletServiceClient_SharedStorageGet_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  SharedStorageGetStatus p_status{};
  std::string p_error_message{};
  ::std::u16string p_value{};
  SharedStorageWorkletServiceClient_SharedStorageGet_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStatus(&p_status))
    success = false;
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (success && !input_data_view.ReadValue(&p_value))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletServiceClient::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_status), 
std::move(p_error_message), 
std::move(p_value));
  return true;
}

void SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder::Run(
    SharedStorageGetStatus in_status, const std::string& in_error_message, const ::std::u16string& in_value) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageGet", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("status"), in_status,
                        "<value of type SharedStorageGetStatus>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("value"), in_value,
                        "<value of type const ::std::u16string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageGet_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::shared_storage_worklet::mojom::SharedStorageGetStatus>(
      in_status, &params->status);
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");
  mojo::internal::MessageFragment<
      typename decltype(params->value)::BaseType> value_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_value, value_fragment);
  params->value.Set(
      value_fragment.is_null() ? nullptr : value_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->value.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null value in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageGet");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletServiceClient::SharedStorageLengthCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder> proxy(
        new SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletServiceClient::SharedStorageLengthCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message, uint32_t in_length);
};

bool SharedStorageWorkletServiceClient_SharedStorageLength_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletServiceClient_SharedStorageLength_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletServiceClient_SharedStorageLength_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  uint32_t p_length{};
  SharedStorageWorkletServiceClient_SharedStorageLength_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (success)
    p_length = input_data_view.length();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletServiceClient::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message), 
std::move(p_length));
  return true;
}

void SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message, uint32_t in_length) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::SharedStorageLength", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("length"), in_length,
                        "<value of type uint32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletServiceClient_SharedStorageLength_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");
  params->length = in_length;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletServiceClient::Name_);
  message.set_method_name("SharedStorageLength");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SharedStorageWorkletServiceClientStubDispatch::Accept(
    SharedStorageWorkletServiceClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageKeys_Name: {

      DCHECK(message->is_serialized());
      internal::SharedStorageWorkletServiceClient_SharedStorageKeys_Params_Data* params =
          reinterpret_cast<internal::SharedStorageWorkletServiceClient_SharedStorageKeys_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> p_listener{};
      SharedStorageWorkletServiceClient_SharedStorageKeys_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_listener =
            input_data_view.TakeListener<decltype(p_listener)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageKeys(
std::move(p_listener));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageEntries_Name: {

      DCHECK(message->is_serialized());
      internal::SharedStorageWorkletServiceClient_SharedStorageEntries_Params_Data* params =
          reinterpret_cast<internal::SharedStorageWorkletServiceClient_SharedStorageEntries_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> p_listener{};
      SharedStorageWorkletServiceClient_SharedStorageEntries_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_listener =
            input_data_view.TakeListener<decltype(p_listener)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 6, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageEntries(
std::move(p_listener));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_ConsoleLog_Name: {

      DCHECK(message->is_serialized());
      internal::SharedStorageWorkletServiceClient_ConsoleLog_Params_Data* params =
          reinterpret_cast<internal::SharedStorageWorkletServiceClient_ConsoleLog_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_message{};
      SharedStorageWorkletServiceClient_ConsoleLog_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadMessage(&p_message))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ConsoleLog(
std::move(p_message));
      return true;
    }
  }
  return false;
}

// static
bool SharedStorageWorkletServiceClientStubDispatch::AcceptWithResponder(
    SharedStorageWorkletServiceClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSharedStorageWorkletServiceClient_SharedStorageSet_Name: {

      internal::SharedStorageWorkletServiceClient_SharedStorageSet_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletServiceClient_SharedStorageSet_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::std::u16string p_key{};
      ::std::u16string p_value{};
      bool p_ignore_if_present{};
      SharedStorageWorkletServiceClient_SharedStorageSet_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKey(&p_key))
        success = false;
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (success)
        p_ignore_if_present = input_data_view.ignore_if_present();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 0, false);
        return false;
      }
      SharedStorageWorkletServiceClient::SharedStorageSetCallback callback =
          SharedStorageWorkletServiceClient_SharedStorageSet_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageSet(
std::move(p_key), 
std::move(p_value), 
std::move(p_ignore_if_present), std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageAppend_Name: {

      internal::SharedStorageWorkletServiceClient_SharedStorageAppend_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletServiceClient_SharedStorageAppend_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::std::u16string p_key{};
      ::std::u16string p_value{};
      SharedStorageWorkletServiceClient_SharedStorageAppend_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKey(&p_key))
        success = false;
      if (success && !input_data_view.ReadValue(&p_value))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 1, false);
        return false;
      }
      SharedStorageWorkletServiceClient::SharedStorageAppendCallback callback =
          SharedStorageWorkletServiceClient_SharedStorageAppend_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageAppend(
std::move(p_key), 
std::move(p_value), std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageDelete_Name: {

      internal::SharedStorageWorkletServiceClient_SharedStorageDelete_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletServiceClient_SharedStorageDelete_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::std::u16string p_key{};
      SharedStorageWorkletServiceClient_SharedStorageDelete_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKey(&p_key))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 2, false);
        return false;
      }
      SharedStorageWorkletServiceClient::SharedStorageDeleteCallback callback =
          SharedStorageWorkletServiceClient_SharedStorageDelete_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageDelete(
std::move(p_key), std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageClear_Name: {

      internal::SharedStorageWorkletServiceClient_SharedStorageClear_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletServiceClient_SharedStorageClear_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SharedStorageWorkletServiceClient_SharedStorageClear_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 3, false);
        return false;
      }
      SharedStorageWorkletServiceClient::SharedStorageClearCallback callback =
          SharedStorageWorkletServiceClient_SharedStorageClear_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageClear(std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageGet_Name: {

      internal::SharedStorageWorkletServiceClient_SharedStorageGet_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletServiceClient_SharedStorageGet_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::std::u16string p_key{};
      SharedStorageWorkletServiceClient_SharedStorageGet_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadKey(&p_key))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 4, false);
        return false;
      }
      SharedStorageWorkletServiceClient::SharedStorageGetCallback callback =
          SharedStorageWorkletServiceClient_SharedStorageGet_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageGet(
std::move(p_key), std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageKeys_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageEntries_Name: {
      break;
    }
    case internal::kSharedStorageWorkletServiceClient_SharedStorageLength_Name: {

      internal::SharedStorageWorkletServiceClient_SharedStorageLength_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletServiceClient_SharedStorageLength_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      SharedStorageWorkletServiceClient_SharedStorageLength_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletServiceClient::Name_, 7, false);
        return false;
      }
      SharedStorageWorkletServiceClient::SharedStorageLengthCallback callback =
          SharedStorageWorkletServiceClient_SharedStorageLength_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SharedStorageLength(std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletServiceClient_ConsoleLog_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSharedStorageWorkletServiceClientValidationInfo[] = {
    {&internal::SharedStorageWorkletServiceClient_SharedStorageSet_Params_Data::Validate,
     &internal::SharedStorageWorkletServiceClient_SharedStorageSet_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageAppend_Params_Data::Validate,
     &internal::SharedStorageWorkletServiceClient_SharedStorageAppend_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageDelete_Params_Data::Validate,
     &internal::SharedStorageWorkletServiceClient_SharedStorageDelete_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageClear_Params_Data::Validate,
     &internal::SharedStorageWorkletServiceClient_SharedStorageClear_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageGet_Params_Data::Validate,
     &internal::SharedStorageWorkletServiceClient_SharedStorageGet_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageKeys_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageEntries_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SharedStorageWorkletServiceClient_SharedStorageLength_Params_Data::Validate,
     &internal::SharedStorageWorkletServiceClient_SharedStorageLength_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletServiceClient_ConsoleLog_Params_Data::Validate,
     nullptr /* no response */},
};

bool SharedStorageWorkletServiceClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSharedStorageWorkletServiceClientValidationInfo);
}

bool SharedStorageWorkletServiceClientResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::shared_storage_worklet::mojom::SharedStorageWorkletServiceClient::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kSharedStorageWorkletServiceClientValidationInfo);
}
const char SharedStorageWorkletService::Name_[] = "shared_storage_worklet.mojom.SharedStorageWorkletService";

SharedStorageWorkletService::IPCStableHashFunction SharedStorageWorkletService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kSharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Name: {
      return &SharedStorageWorkletService::BindSharedStorageWorkletServiceClient_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletService_AddModule_Name: {
      return &SharedStorageWorkletService::AddModule_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name: {
      return &SharedStorageWorkletService::RunURLSelectionOperation_Sym::IPCStableHash;
    }
    case internal::kSharedStorageWorkletService_RunOperation_Name: {
      return &SharedStorageWorkletService::RunOperation_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* SharedStorageWorkletService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kSharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletService::BindSharedStorageWorkletServiceClient";
      case internal::kSharedStorageWorkletService_AddModule_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletService::AddModule";
      case internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletService::RunURLSelectionOperation";
      case internal::kSharedStorageWorkletService_RunOperation_Name:
            return "Receive shared_storage_worklet::mojom::SharedStorageWorkletService::RunOperation";
    }
  } else {
    switch (message.name()) {
      case internal::kSharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletService::BindSharedStorageWorkletServiceClient";
      case internal::kSharedStorageWorkletService_AddModule_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletService::AddModule";
      case internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletService::RunURLSelectionOperation";
      case internal::kSharedStorageWorkletService_RunOperation_Name:
            return "Receive reply shared_storage_worklet::mojom::SharedStorageWorkletService::RunOperation";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t SharedStorageWorkletService::BindSharedStorageWorkletServiceClient_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletService::BindSharedStorageWorkletServiceClient");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletService::AddModule_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletService::AddModule");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletService::RunURLSelectionOperation_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletService::RunURLSelectionOperation");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t SharedStorageWorkletService::RunOperation_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)shared_storage_worklet::mojom::SharedStorageWorkletService::RunOperation");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class SharedStorageWorkletService_AddModule_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletService_AddModule_ForwardToCallback(
      SharedStorageWorkletService::AddModuleCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletService_AddModule_ForwardToCallback(const SharedStorageWorkletService_AddModule_ForwardToCallback&) = delete;
  SharedStorageWorkletService_AddModule_ForwardToCallback& operator=(const SharedStorageWorkletService_AddModule_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletService::AddModuleCallback callback_;
};

class SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback(
      SharedStorageWorkletService::RunURLSelectionOperationCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback(const SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback&) = delete;
  SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback& operator=(const SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletService::RunURLSelectionOperationCallback callback_;
};

class SharedStorageWorkletService_RunOperation_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  SharedStorageWorkletService_RunOperation_ForwardToCallback(
      SharedStorageWorkletService::RunOperationCallback callback
      ) : callback_(std::move(callback)) {
  }

  SharedStorageWorkletService_RunOperation_ForwardToCallback(const SharedStorageWorkletService_RunOperation_ForwardToCallback&) = delete;
  SharedStorageWorkletService_RunOperation_ForwardToCallback& operator=(const SharedStorageWorkletService_RunOperation_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  SharedStorageWorkletService::RunOperationCallback callback_;
};

SharedStorageWorkletServiceProxy::SharedStorageWorkletServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void SharedStorageWorkletServiceProxy::BindSharedStorageWorkletServiceClient(
    ::mojo::PendingAssociatedRemote<SharedStorageWorkletServiceClient> in_client) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletService::BindSharedStorageWorkletServiceClient", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client"), in_client,
                        "<value of type ::mojo::PendingAssociatedRemote<SharedStorageWorkletServiceClient>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::shared_storage_worklet::mojom::SharedStorageWorkletServiceClientAssociatedPtrInfoDataView>(
      in_client, &params->client, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_INTERFACE_ID,
      "invalid client in SharedStorageWorkletService.BindSharedStorageWorkletServiceClient request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("BindSharedStorageWorkletServiceClient");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void SharedStorageWorkletServiceProxy::AddModule(
    ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> in_url_loader_factory, const ::GURL& in_script_source_url, AddModuleCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletService::AddModule", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("url_loader_factory"), in_url_loader_factory,
                        "<value of type ::mojo::PendingRemote<::network::mojom::URLLoaderFactory>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("script_source_url"), in_script_source_url,
                        "<value of type const ::GURL&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_AddModule_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_AddModule_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::network::mojom::URLLoaderFactoryInterfaceBase>>(
      in_url_loader_factory, &params->url_loader_factory, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->url_loader_factory),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid url_loader_factory in SharedStorageWorkletService.AddModule request");
  mojo::internal::MessageFragment<
      typename decltype(params->script_source_url)::BaseType> script_source_url_fragment(
          params.message());
  mojo::internal::Serialize<::url::mojom::UrlDataView>(
      in_script_source_url, script_source_url_fragment);
  params->script_source_url.Set(
      script_source_url_fragment.is_null() ? nullptr : script_source_url_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->script_source_url.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null script_source_url in SharedStorageWorkletService.AddModule request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("AddModule");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletService_AddModule_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceProxy::RunURLSelectionOperation(
    const std::string& in_name, const std::vector<::GURL>& in_urls, const std::vector<uint8_t>& in_serialized_data, RunURLSelectionOperationCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletService::RunURLSelectionOperation", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("name"), in_name,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("urls"), in_urls,
                        "<value of type const std::vector<::GURL>&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("serialized_data"), in_serialized_data,
                        "<value of type const std::vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_RunURLSelectionOperation_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->name)::BaseType> name_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_name, name_fragment);
  params->name.Set(
      name_fragment.is_null() ? nullptr : name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null name in SharedStorageWorkletService.RunURLSelectionOperation request");
  mojo::internal::MessageFragment<
      typename decltype(params->urls)::BaseType>
      urls_fragment(params.message());
  const mojo::internal::ContainerValidateParams urls_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::url::mojom::UrlDataView>>(
      in_urls, urls_fragment, &urls_validate_params);
  params->urls.Set(
      urls_fragment.is_null() ? nullptr : urls_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->urls.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null urls in SharedStorageWorkletService.RunURLSelectionOperation request");
  mojo::internal::MessageFragment<
      typename decltype(params->serialized_data)::BaseType>
      serialized_data_fragment(params.message());
  const mojo::internal::ContainerValidateParams serialized_data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_serialized_data, serialized_data_fragment, &serialized_data_validate_params);
  params->serialized_data.Set(
      serialized_data_fragment.is_null() ? nullptr : serialized_data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->serialized_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null serialized_data in SharedStorageWorkletService.RunURLSelectionOperation request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("RunURLSelectionOperation");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void SharedStorageWorkletServiceProxy::RunOperation(
    const std::string& in_name, const std::vector<uint8_t>& in_serialized_data, RunOperationCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send shared_storage_worklet::mojom::SharedStorageWorkletService::RunOperation", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("name"), in_name,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("serialized_data"), in_serialized_data,
                        "<value of type const std::vector<uint8_t>&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_RunOperation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_RunOperation_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->name)::BaseType> name_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_name, name_fragment);
  params->name.Set(
      name_fragment.is_null() ? nullptr : name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null name in SharedStorageWorkletService.RunOperation request");
  mojo::internal::MessageFragment<
      typename decltype(params->serialized_data)::BaseType>
      serialized_data_fragment(params.message());
  const mojo::internal::ContainerValidateParams serialized_data_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<uint8_t>>(
      in_serialized_data, serialized_data_fragment, &serialized_data_validate_params);
  params->serialized_data.Set(
      serialized_data_fragment.is_null() ? nullptr : serialized_data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->serialized_data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null serialized_data in SharedStorageWorkletService.RunOperation request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("RunOperation");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new SharedStorageWorkletService_RunOperation_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class SharedStorageWorkletService_AddModule_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletService::AddModuleCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletService_AddModule_ProxyToResponder> proxy(
        new SharedStorageWorkletService_AddModule_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletService_AddModule_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletService_AddModule_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletService_AddModule_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletService::AddModuleCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message);
};

bool SharedStorageWorkletService_AddModule_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletService_AddModule_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletService_AddModule_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  SharedStorageWorkletService_AddModule_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletService::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message));
  return true;
}

void SharedStorageWorkletService_AddModule_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletService::AddModule", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_AddModule_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_AddModule_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("AddModule");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletService::RunURLSelectionOperationCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder> proxy(
        new SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletService::RunURLSelectionOperationCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message, uint32_t in_index);
};

bool SharedStorageWorkletService_RunURLSelectionOperation_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletService_RunURLSelectionOperation_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletService_RunURLSelectionOperation_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  uint32_t p_index{};
  SharedStorageWorkletService_RunURLSelectionOperation_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (success)
    p_index = input_data_view.index();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletService::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message), 
std::move(p_index));
  return true;
}

void SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message, uint32_t in_index) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletService::RunURLSelectionOperation", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("index"), in_index,
                        "<value of type uint32_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_RunURLSelectionOperation_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");
  params->index = in_index;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("RunURLSelectionOperation");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class SharedStorageWorkletService_RunOperation_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static SharedStorageWorkletService::RunOperationCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<SharedStorageWorkletService_RunOperation_ProxyToResponder> proxy(
        new SharedStorageWorkletService_RunOperation_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&SharedStorageWorkletService_RunOperation_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~SharedStorageWorkletService_RunOperation_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  SharedStorageWorkletService_RunOperation_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "SharedStorageWorkletService::RunOperationCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const std::string& in_error_message);
};

bool SharedStorageWorkletService_RunOperation_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::SharedStorageWorkletService_RunOperation_ResponseParams_Data* params =
      reinterpret_cast<
          internal::SharedStorageWorkletService_RunOperation_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  std::string p_error_message{};
  SharedStorageWorkletService_RunOperation_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        SharedStorageWorkletService::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_error_message));
  return true;
}

void SharedStorageWorkletService_RunOperation_ProxyToResponder::Run(
    bool in_success, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply shared_storage_worklet::mojom::SharedStorageWorkletService::RunOperation", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kSharedStorageWorkletService_RunOperation_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::shared_storage_worklet::mojom::internal::SharedStorageWorkletService_RunOperation_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(SharedStorageWorkletService::Name_);
  message.set_method_name("RunOperation");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool SharedStorageWorkletServiceStubDispatch::Accept(
    SharedStorageWorkletService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kSharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Name: {

      DCHECK(message->is_serialized());
      internal::SharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Params_Data* params =
          reinterpret_cast<internal::SharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingAssociatedRemote<SharedStorageWorkletServiceClient> p_client{};
      SharedStorageWorkletService_BindSharedStorageWorkletServiceClient_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_client =
            input_data_view.TakeClient<decltype(p_client)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindSharedStorageWorkletServiceClient(
std::move(p_client));
      return true;
    }
    case internal::kSharedStorageWorkletService_AddModule_Name: {
      break;
    }
    case internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name: {
      break;
    }
    case internal::kSharedStorageWorkletService_RunOperation_Name: {
      break;
    }
  }
  return false;
}

// static
bool SharedStorageWorkletServiceStubDispatch::AcceptWithResponder(
    SharedStorageWorkletService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kSharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Name: {
      break;
    }
    case internal::kSharedStorageWorkletService_AddModule_Name: {

      internal::SharedStorageWorkletService_AddModule_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletService_AddModule_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> p_url_loader_factory{};
      ::GURL p_script_source_url{};
      SharedStorageWorkletService_AddModule_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_url_loader_factory =
            input_data_view.TakeUrlLoaderFactory<decltype(p_url_loader_factory)>();
      }
      if (success && !input_data_view.ReadScriptSourceUrl(&p_script_source_url))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletService::Name_, 1, false);
        return false;
      }
      SharedStorageWorkletService::AddModuleCallback callback =
          SharedStorageWorkletService_AddModule_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddModule(
std::move(p_url_loader_factory), 
std::move(p_script_source_url), std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletService_RunURLSelectionOperation_Name: {

      internal::SharedStorageWorkletService_RunURLSelectionOperation_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletService_RunURLSelectionOperation_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_name{};
      std::vector<::GURL> p_urls{};
      std::vector<uint8_t> p_serialized_data{};
      SharedStorageWorkletService_RunURLSelectionOperation_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadName(&p_name))
        success = false;
      if (success && !input_data_view.ReadUrls(&p_urls))
        success = false;
      if (success && !input_data_view.ReadSerializedData(&p_serialized_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletService::Name_, 2, false);
        return false;
      }
      SharedStorageWorkletService::RunURLSelectionOperationCallback callback =
          SharedStorageWorkletService_RunURLSelectionOperation_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RunURLSelectionOperation(
std::move(p_name), 
std::move(p_urls), 
std::move(p_serialized_data), std::move(callback));
      return true;
    }
    case internal::kSharedStorageWorkletService_RunOperation_Name: {

      internal::SharedStorageWorkletService_RunOperation_Params_Data* params =
          reinterpret_cast<
              internal::SharedStorageWorkletService_RunOperation_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_name{};
      std::vector<uint8_t> p_serialized_data{};
      SharedStorageWorkletService_RunOperation_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadName(&p_name))
        success = false;
      if (success && !input_data_view.ReadSerializedData(&p_serialized_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            SharedStorageWorkletService::Name_, 3, false);
        return false;
      }
      SharedStorageWorkletService::RunOperationCallback callback =
          SharedStorageWorkletService_RunOperation_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RunOperation(
std::move(p_name), 
std::move(p_serialized_data), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kSharedStorageWorkletServiceValidationInfo[] = {
    {&internal::SharedStorageWorkletService_BindSharedStorageWorkletServiceClient_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::SharedStorageWorkletService_AddModule_Params_Data::Validate,
     &internal::SharedStorageWorkletService_AddModule_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletService_RunURLSelectionOperation_Params_Data::Validate,
     &internal::SharedStorageWorkletService_RunURLSelectionOperation_ResponseParams_Data::Validate},
    {&internal::SharedStorageWorkletService_RunOperation_Params_Data::Validate,
     &internal::SharedStorageWorkletService_RunOperation_ResponseParams_Data::Validate},
};

bool SharedStorageWorkletServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::shared_storage_worklet::mojom::SharedStorageWorkletService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kSharedStorageWorkletServiceValidationInfo);
}

bool SharedStorageWorkletServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::shared_storage_worklet::mojom::SharedStorageWorkletService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kSharedStorageWorkletServiceValidationInfo);
}


}  // namespace mojom
}  // namespace shared_storage_worklet


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace shared_storage_worklet {
namespace mojom {


void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageSet(const ::std::u16string& key, const ::std::u16string& value, bool ignore_if_present, SharedStorageSetCallback callback) {
  GetForwardingInterface()->SharedStorageSet(std::move(key), std::move(value), std::move(ignore_if_present), std::move(callback));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageAppend(const ::std::u16string& key, const ::std::u16string& value, SharedStorageAppendCallback callback) {
  GetForwardingInterface()->SharedStorageAppend(std::move(key), std::move(value), std::move(callback));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageDelete(const ::std::u16string& key, SharedStorageDeleteCallback callback) {
  GetForwardingInterface()->SharedStorageDelete(std::move(key), std::move(callback));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageClear(SharedStorageClearCallback callback) {
  GetForwardingInterface()->SharedStorageClear(std::move(callback));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageGet(const ::std::u16string& key, SharedStorageGetCallback callback) {
  GetForwardingInterface()->SharedStorageGet(std::move(key), std::move(callback));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageKeys(::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> listener) {
  GetForwardingInterface()->SharedStorageKeys(std::move(listener));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageEntries(::mojo::PendingRemote<::shared_storage_worklet::mojom::SharedStorageEntriesListener> listener) {
  GetForwardingInterface()->SharedStorageEntries(std::move(listener));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::SharedStorageLength(SharedStorageLengthCallback callback) {
  GetForwardingInterface()->SharedStorageLength(std::move(callback));
}
void SharedStorageWorkletServiceClientInterceptorForTesting::ConsoleLog(const std::string& message) {
  GetForwardingInterface()->ConsoleLog(std::move(message));
}
SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageWorkletServiceClientAsyncWaiter(
    SharedStorageWorkletServiceClient* proxy) : proxy_(proxy) {}

SharedStorageWorkletServiceClientAsyncWaiter::~SharedStorageWorkletServiceClientAsyncWaiter() = default;

void SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageSet(
    const ::std::u16string& key, const ::std::u16string& value, bool ignore_if_present, bool* out_success, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->SharedStorageSet(std::move(key),std::move(value),std::move(ignore_if_present),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             bool success,
             const std::string& error_message) {*out_success = std::move(success);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message));
  loop.Run();
}
void SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageAppend(
    const ::std::u16string& key, const ::std::u16string& value, bool* out_success, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->SharedStorageAppend(std::move(key),std::move(value),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             bool success,
             const std::string& error_message) {*out_success = std::move(success);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message));
  loop.Run();
}
void SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageDelete(
    const ::std::u16string& key, bool* out_success, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->SharedStorageDelete(std::move(key),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             bool success,
             const std::string& error_message) {*out_success = std::move(success);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message));
  loop.Run();
}
void SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageClear(
    bool* out_success, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->SharedStorageClear(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             bool success,
             const std::string& error_message) {*out_success = std::move(success);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message));
  loop.Run();
}
void SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageGet(
    const ::std::u16string& key, SharedStorageGetStatus* out_status, std::string* out_error_message, ::std::u16string* out_value) {
  base::RunLoop loop;
  proxy_->SharedStorageGet(std::move(key),
      base::BindOnce(
          [](base::RunLoop* loop,
             SharedStorageGetStatus* out_status
,
             std::string* out_error_message
,
             ::std::u16string* out_value
,
             SharedStorageGetStatus status,
             const std::string& error_message,
             const ::std::u16string& value) {*out_status = std::move(status);*out_error_message = std::move(error_message);*out_value = std::move(value);
            loop->Quit();
          },
          &loop,
          out_status,
          out_error_message,
          out_value));
  loop.Run();
}
void SharedStorageWorkletServiceClientAsyncWaiter::SharedStorageLength(
    bool* out_success, std::string* out_error_message, uint32_t* out_length) {
  base::RunLoop loop;
  proxy_->SharedStorageLength(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             uint32_t* out_length
,
             bool success,
             const std::string& error_message,
             uint32_t length) {*out_success = std::move(success);*out_error_message = std::move(error_message);*out_length = std::move(length);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message,
          out_length));
  loop.Run();
}



void SharedStorageWorkletServiceInterceptorForTesting::BindSharedStorageWorkletServiceClient(::mojo::PendingAssociatedRemote<SharedStorageWorkletServiceClient> client) {
  GetForwardingInterface()->BindSharedStorageWorkletServiceClient(std::move(client));
}
void SharedStorageWorkletServiceInterceptorForTesting::AddModule(::mojo::PendingRemote<::network::mojom::URLLoaderFactory> url_loader_factory, const ::GURL& script_source_url, AddModuleCallback callback) {
  GetForwardingInterface()->AddModule(std::move(url_loader_factory), std::move(script_source_url), std::move(callback));
}
void SharedStorageWorkletServiceInterceptorForTesting::RunURLSelectionOperation(const std::string& name, const std::vector<::GURL>& urls, const std::vector<uint8_t>& serialized_data, RunURLSelectionOperationCallback callback) {
  GetForwardingInterface()->RunURLSelectionOperation(std::move(name), std::move(urls), std::move(serialized_data), std::move(callback));
}
void SharedStorageWorkletServiceInterceptorForTesting::RunOperation(const std::string& name, const std::vector<uint8_t>& serialized_data, RunOperationCallback callback) {
  GetForwardingInterface()->RunOperation(std::move(name), std::move(serialized_data), std::move(callback));
}
SharedStorageWorkletServiceAsyncWaiter::SharedStorageWorkletServiceAsyncWaiter(
    SharedStorageWorkletService* proxy) : proxy_(proxy) {}

SharedStorageWorkletServiceAsyncWaiter::~SharedStorageWorkletServiceAsyncWaiter() = default;

void SharedStorageWorkletServiceAsyncWaiter::AddModule(
    ::mojo::PendingRemote<::network::mojom::URLLoaderFactory> url_loader_factory, const ::GURL& script_source_url, bool* out_success, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->AddModule(std::move(url_loader_factory),std::move(script_source_url),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             bool success,
             const std::string& error_message) {*out_success = std::move(success);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message));
  loop.Run();
}
void SharedStorageWorkletServiceAsyncWaiter::RunURLSelectionOperation(
    const std::string& name, const std::vector<::GURL>& urls, const std::vector<uint8_t>& serialized_data, bool* out_success, std::string* out_error_message, uint32_t* out_index) {
  base::RunLoop loop;
  proxy_->RunURLSelectionOperation(std::move(name),std::move(urls),std::move(serialized_data),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             uint32_t* out_index
,
             bool success,
             const std::string& error_message,
             uint32_t index) {*out_success = std::move(success);*out_error_message = std::move(error_message);*out_index = std::move(index);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message,
          out_index));
  loop.Run();
}
void SharedStorageWorkletServiceAsyncWaiter::RunOperation(
    const std::string& name, const std::vector<uint8_t>& serialized_data, bool* out_success, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->RunOperation(std::move(name),std::move(serialized_data),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             std::string* out_error_message
,
             bool success,
             const std::string& error_message) {*out_success = std::move(success);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_success,
          out_error_message));
  loop.Run();
}





}  // namespace mojom
}  // namespace shared_storage_worklet


#if defined(__clang__)
#pragma clang diagnostic pop
#endif