// content/common/private_aggregation_host.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_PRIVATE_AGGREGATION_HOST_MOJOM_H_
#define CONTENT_COMMON_PRIVATE_AGGREGATION_HOST_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/common/private_aggregation_host.mojom-shared.h"
#include "content/common/private_aggregation_host.mojom-forward.h"
#include "content/common/aggregatable_report.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "content/common/content_export.h"




namespace content {
namespace mojom {

class PrivateAggregationHostProxy;

template <typename ImplRefTraits>
class PrivateAggregationHostStub;

class PrivateAggregationHostRequestValidator;


class CONTENT_EXPORT PrivateAggregationHost
    : public PrivateAggregationHostInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PrivateAggregationHostInterfaceBase;
  using Proxy_ = PrivateAggregationHostProxy;

  template <typename ImplRefTraits>
  using Stub_ = PrivateAggregationHostStub<ImplRefTraits>;

  using RequestValidator_ = PrivateAggregationHostRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kSendHistogramReportMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct SendHistogramReport_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PrivateAggregationHost() = default;

  
  virtual void SendHistogramReport(std::vector<::content::mojom::AggregatableReportHistogramContributionPtr> contributions, ::content::mojom::AggregationServiceMode aggregation_mode) = 0;
};



class CONTENT_EXPORT PrivateAggregationHostProxy
    : public PrivateAggregationHost {
 public:
  using InterfaceType = PrivateAggregationHost;

  explicit PrivateAggregationHostProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void SendHistogramReport(std::vector<::content::mojom::AggregatableReportHistogramContributionPtr> contributions, ::content::mojom::AggregationServiceMode aggregation_mode) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class CONTENT_EXPORT PrivateAggregationHostStubDispatch {
 public:
  static bool Accept(PrivateAggregationHost* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PrivateAggregationHost* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PrivateAggregationHost>>
class PrivateAggregationHostStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PrivateAggregationHostStub() = default;
  ~PrivateAggregationHostStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrivateAggregationHostStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PrivateAggregationHostStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class CONTENT_EXPORT PrivateAggregationHostRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace content

namespace mojo {

}  // namespace mojo

#endif  // CONTENT_COMMON_PRIVATE_AGGREGATION_HOST_MOJOM_H_