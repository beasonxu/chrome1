// content/common/renderer.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_RENDERER_MOJOM_SHARED_H_
#define CONTENT_COMMON_RENDERER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/common/renderer.mojom-shared-internal.h"
#include "content/common/agent_scheduling_group.mojom-shared.h"
#include "content/common/native_types.mojom-shared.h"
#include "ipc/ipc.mojom-shared.h"
#include "mojo/public/mojom/base/generic_pending_receiver.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/network_types.mojom-shared.h"
#include "skia/public/mojom/skcolor.mojom-shared.h"
#include "third_party/blink/public/mojom/browser_interface_broker.mojom-shared.h"
#include "third_party/blink/public/mojom/user_agent/user_agent_metadata.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/color/color_id.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "base/component_export.h"




namespace content {
namespace mojom {
class UpdateScrollbarThemeParamsDataView;

class UpdateSystemColorInfoParamsDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::UpdateScrollbarThemeParamsDataView> {
  using Data = ::content::mojom::internal::UpdateScrollbarThemeParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::UpdateSystemColorInfoParamsDataView> {
  using Data = ::content::mojom::internal::UpdateSystemColorInfoParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {


enum class RenderProcessBackgroundState : int32_t {
  
  kForegrounded = 0,
  
  kBackgrounded = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, RenderProcessBackgroundState value);
inline bool IsKnownEnumValue(RenderProcessBackgroundState value) {
  return internal::RenderProcessBackgroundState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RenderProcessVisibleState : int32_t {
  
  kVisible = 0,
  
  kHidden = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, RenderProcessVisibleState value);
inline bool IsKnownEnumValue(RenderProcessVisibleState value) {
  return internal::RenderProcessVisibleState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class RendererInterfaceBase {};

using RendererPtrDataView =
    mojo::InterfacePtrDataView<RendererInterfaceBase>;
using RendererRequestDataView =
    mojo::InterfaceRequestDataView<RendererInterfaceBase>;
using RendererAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<RendererInterfaceBase>;
using RendererAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<RendererInterfaceBase>;


class UpdateScrollbarThemeParamsDataView {
 public:
  UpdateScrollbarThemeParamsDataView() = default;

  UpdateScrollbarThemeParamsDataView(
      internal::UpdateScrollbarThemeParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool has_initial_button_delay() const {
    return data_->has_initial_button_delay;
  }
  float initial_button_delay() const {
    return data_->initial_button_delay;
  }
  bool has_autoscroll_button_delay() const {
    return data_->has_autoscroll_button_delay;
  }
  float autoscroll_button_delay() const {
    return data_->autoscroll_button_delay;
  }
  bool jump_on_track_click() const {
    return data_->jump_on_track_click;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadPreferredScrollerStyle(UserType* output) const {
    auto data_value = data_->preferred_scroller_style;
    return mojo::internal::Deserialize<::content::mojom::ScrollerStyle>(
        data_value, output);
  }
  ::content::mojom::ScrollerStyle preferred_scroller_style() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::ScrollerStyle>(data_->preferred_scroller_style));
  }
  bool redraw() const {
    return data_->redraw;
  }
  bool scroll_view_rubber_banding() const {
    return data_->scroll_view_rubber_banding;
  }
 private:
  internal::UpdateScrollbarThemeParams_Data* data_ = nullptr;
};



class UpdateSystemColorInfoParamsDataView {
 public:
  UpdateSystemColorInfoParamsDataView() = default;

  UpdateSystemColorInfoParamsDataView(
      internal::UpdateSystemColorInfoParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool is_dark_mode() const {
    return data_->is_dark_mode;
  }
  bool forced_colors() const {
    return data_->forced_colors;
  }
  inline void GetColorsDataView(
      mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadColors(UserType* output) {
    
    auto* pointer = data_->colors.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>>(
        pointer, output, message_);
  }
  inline void GetLightColorsDataView(
      mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLightColors(UserType* output) {
    
    auto* pointer = data_->light_colors.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>>(
        pointer, output, message_);
  }
  inline void GetDarkColorsDataView(
      mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDarkColors(UserType* output) {
    
    auto* pointer = data_->dark_colors.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>>(
        pointer, output, message_);
  }
 private:
  internal::UpdateSystemColorInfoParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

template <>
struct hash<::content::mojom::RenderProcessBackgroundState>
    : public mojo::internal::EnumHashImpl<::content::mojom::RenderProcessBackgroundState> {};

template <>
struct hash<::content::mojom::RenderProcessVisibleState>
    : public mojo::internal::EnumHashImpl<::content::mojom::RenderProcessVisibleState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::RenderProcessBackgroundState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::RenderProcessBackgroundState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content::mojom::RenderProcessBackgroundState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::RenderProcessVisibleState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::RenderProcessVisibleState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content::mojom::RenderProcessVisibleState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::UpdateScrollbarThemeParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::UpdateScrollbarThemeParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::UpdateScrollbarThemeParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->has_initial_button_delay = Traits::has_initial_button_delay(input);
    fragment->initial_button_delay = Traits::initial_button_delay(input);
    fragment->has_autoscroll_button_delay = Traits::has_autoscroll_button_delay(input);
    fragment->autoscroll_button_delay = Traits::autoscroll_button_delay(input);
    fragment->jump_on_track_click = Traits::jump_on_track_click(input);
    mojo::internal::Serialize<::content::mojom::ScrollerStyle>(
        Traits::preferred_scroller_style(input), &fragment->preferred_scroller_style);
    fragment->redraw = Traits::redraw(input);
    fragment->scroll_view_rubber_banding = Traits::scroll_view_rubber_banding(input);
  }

  static bool Deserialize(::content::mojom::internal::UpdateScrollbarThemeParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::UpdateScrollbarThemeParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::UpdateSystemColorInfoParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::UpdateSystemColorInfoParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::UpdateSystemColorInfoParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->is_dark_mode = Traits::is_dark_mode(input);
    fragment->forced_colors = Traits::forced_colors(input);
    decltype(Traits::colors(input)) in_colors = Traits::colors(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->colors)::BaseType>
        colors_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams colors_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::content::mojom::internal::SystemThemeColor_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>>(
        in_colors, colors_fragment, &colors_validate_params);
    fragment->colors.Set(
        colors_fragment.is_null() ? nullptr : colors_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->colors.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null colors in UpdateSystemColorInfoParams struct");
    decltype(Traits::light_colors(input)) in_light_colors = Traits::light_colors(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->light_colors)::BaseType>
        light_colors_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams light_colors_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::color::mojom::internal::RendererColorId_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>>(
        in_light_colors, light_colors_fragment, &light_colors_validate_params);
    fragment->light_colors.Set(
        light_colors_fragment.is_null() ? nullptr : light_colors_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->light_colors.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null light_colors in UpdateSystemColorInfoParams struct");
    decltype(Traits::dark_colors(input)) in_dark_colors = Traits::dark_colors(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->dark_colors)::BaseType>
        dark_colors_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams dark_colors_validate_params(
        new mojo::internal::ContainerValidateParams(0, ::color::mojom::internal::RendererColorId_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>>(
        in_dark_colors, dark_colors_fragment, &dark_colors_validate_params);
    fragment->dark_colors.Set(
        dark_colors_fragment.is_null() ? nullptr : dark_colors_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->dark_colors.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null dark_colors in UpdateSystemColorInfoParams struct");
  }

  static bool Deserialize(::content::mojom::internal::UpdateSystemColorInfoParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::UpdateSystemColorInfoParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {



inline void UpdateSystemColorInfoParamsDataView::GetColorsDataView(
    mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>* output) {
  auto pointer = data_->colors.Get();
  *output = mojo::MapDataView<::content::mojom::SystemThemeColor, uint32_t>(pointer, message_);
}
inline void UpdateSystemColorInfoParamsDataView::GetLightColorsDataView(
    mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>* output) {
  auto pointer = data_->light_colors.Get();
  *output = mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>(pointer, message_);
}
inline void UpdateSystemColorInfoParamsDataView::GetDarkColorsDataView(
    mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>* output) {
  auto pointer = data_->dark_colors.Get();
  *output = mojo::MapDataView<::color::mojom::RendererColorId, ::skia::mojom::SkColorDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace content

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) TraceFormatTraits<::content::mojom::RenderProcessBackgroundState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content::mojom::RenderProcessBackgroundState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) TraceFormatTraits<::content::mojom::RenderProcessVisibleState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content::mojom::RenderProcessVisibleState value);
};

} // namespace perfetto

#endif  // CONTENT_COMMON_RENDERER_MOJOM_SHARED_H_