// content/common/input/input_injector.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_SHARED_H_
#define CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "content/common/input/input_injector.mojom-shared-internal.h"
#include "content/common/native_types.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/events/mojom/scroll_granularity.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"


#include "mojo/public/cpp/bindings/native_enum.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "base/component_export.h"




namespace content {
namespace mojom {
class SyntheticSmoothDragDataView;

class SyntheticSmoothScrollDataView;

class SyntheticPinchDataView;

class SyntheticTapDataView;

class SyntheticPointerActionParamsDataView;

class SyntheticPointerActionDataView;



}  // namespace mojom
}  // namespace content

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::content::mojom::SyntheticSmoothDragDataView> {
  using Data = ::content::mojom::internal::SyntheticSmoothDrag_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::SyntheticSmoothScrollDataView> {
  using Data = ::content::mojom::internal::SyntheticSmoothScroll_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::SyntheticPinchDataView> {
  using Data = ::content::mojom::internal::SyntheticPinch_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::SyntheticTapDataView> {
  using Data = ::content::mojom::internal::SyntheticTap_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::SyntheticPointerActionParamsDataView> {
  using Data = ::content::mojom::internal::SyntheticPointerActionParams_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::content::mojom::SyntheticPointerActionDataView> {
  using Data = ::content::mojom::internal::SyntheticPointerAction_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace content {
namespace mojom {


enum class GestureSourceType : int32_t {
  
  kDefaultInput = 0,
  
  kTouchInput = 1,
  
  kMouseInput = 2,
  
  kTouchpadInput = 2,
  
  kPenInput = 3,
  
  kGestureSourceTypeMax = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, GestureSourceType value);
inline bool IsKnownEnumValue(GestureSourceType value) {
  return internal::GestureSourceType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class PointerActionType : int32_t {
  
  kNotInitialized = 0,
  
  kPress = 1,
  
  kMove = 2,
  
  kRelease = 3,
  
  kCancel = 4,
  
  kLeave = 5,
  
  kIdle = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, PointerActionType value);
inline bool IsKnownEnumValue(PointerActionType value) {
  return internal::PointerActionType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class SyntheticButton : int32_t {
  
  kNoButton = 0,
  
  kLeft = 1,
  
  kMiddle = 2,
  
  kRight = 3,
  
  kBack = 4,
  
  kForward = 5,
  kMinValue = 0,
  kMaxValue = 5,
};

COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) std::ostream& operator<<(std::ostream& os, SyntheticButton value);
inline bool IsKnownEnumValue(SyntheticButton value) {
  return internal::SyntheticButton_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class InputInjectorInterfaceBase {};

using InputInjectorPtrDataView =
    mojo::InterfacePtrDataView<InputInjectorInterfaceBase>;
using InputInjectorRequestDataView =
    mojo::InterfaceRequestDataView<InputInjectorInterfaceBase>;
using InputInjectorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<InputInjectorInterfaceBase>;
using InputInjectorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<InputInjectorInterfaceBase>;


class SyntheticSmoothDragDataView {
 public:
  SyntheticSmoothDragDataView() = default;

  SyntheticSmoothDragDataView(
      internal::SyntheticSmoothDrag_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadGestureSourceType(UserType* output) const {
    auto data_value = data_->gesture_source_type;
    return mojo::internal::Deserialize<::content::mojom::GestureSourceType>(
        data_value, output);
  }
  GestureSourceType gesture_source_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::GestureSourceType>(data_->gesture_source_type));
  }
  inline void GetStartPointDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStartPoint(UserType* output) {
    
    auto* pointer = data_->start_point.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetDistancesDataView(
      mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDistances(UserType* output) {
    
    auto* pointer = data_->distances.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>>(
        pointer, output, message_);
  }
  float speed_in_pixels_s() const {
    return data_->speed_in_pixels_s;
  }
 private:
  internal::SyntheticSmoothDrag_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SyntheticSmoothScrollDataView {
 public:
  SyntheticSmoothScrollDataView() = default;

  SyntheticSmoothScrollDataView(
      internal::SyntheticSmoothScroll_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadGestureSourceType(UserType* output) const {
    auto data_value = data_->gesture_source_type;
    return mojo::internal::Deserialize<::content::mojom::GestureSourceType>(
        data_value, output);
  }
  GestureSourceType gesture_source_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::GestureSourceType>(data_->gesture_source_type));
  }
  inline void GetAnchorDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAnchor(UserType* output) {
    
    auto* pointer = data_->anchor.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetDistancesDataView(
      mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDistances(UserType* output) {
    
    auto* pointer = data_->distances.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>>(
        pointer, output, message_);
  }
  bool prevent_fling() const {
    return data_->prevent_fling;
  }
  float speed_in_pixels_s() const {
    return data_->speed_in_pixels_s;
  }
  float fling_velocity_x() const {
    return data_->fling_velocity_x;
  }
  float fling_velocity_y() const {
    return data_->fling_velocity_y;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadGranularity(UserType* output) const {
    auto data_value = data_->granularity;
    return mojo::internal::Deserialize<::ui::mojom::ScrollGranularity>(
        data_value, output);
  }
  ::ui::mojom::ScrollGranularity granularity() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::ui::mojom::ScrollGranularity>(data_->granularity));
  }
  int32_t modifiers() const {
    return data_->modifiers;
  }
 private:
  internal::SyntheticSmoothScroll_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SyntheticPinchDataView {
 public:
  SyntheticPinchDataView() = default;

  SyntheticPinchDataView(
      internal::SyntheticPinch_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  float scale_factor() const {
    return data_->scale_factor;
  }
  inline void GetAnchorDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAnchor(UserType* output) {
    
    auto* pointer = data_->anchor.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  float relative_pointer_speed_in_pixels_s() const {
    return data_->relative_pointer_speed_in_pixels_s;
  }
 private:
  internal::SyntheticPinch_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SyntheticTapDataView {
 public:
  SyntheticTapDataView() = default;

  SyntheticTapDataView(
      internal::SyntheticTap_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadGestureSourceType(UserType* output) const {
    auto data_value = data_->gesture_source_type;
    return mojo::internal::Deserialize<::content::mojom::GestureSourceType>(
        data_value, output);
  }
  GestureSourceType gesture_source_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::GestureSourceType>(data_->gesture_source_type));
  }
  inline void GetPositionDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPosition(UserType* output) {
    
    auto* pointer = data_->position.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  float duration_ms() const {
    return data_->duration_ms;
  }
 private:
  internal::SyntheticTap_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SyntheticPointerActionParamsDataView {
 public:
  SyntheticPointerActionParamsDataView() = default;

  SyntheticPointerActionParamsDataView(
      internal::SyntheticPointerActionParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadPointerActionType(UserType* output) const {
    auto data_value = data_->pointer_action_type;
    return mojo::internal::Deserialize<::content::mojom::PointerActionType>(
        data_value, output);
  }
  PointerActionType pointer_action_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::PointerActionType>(data_->pointer_action_type));
  }
  inline void GetPositionDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPosition(UserType* output) {
    
    auto* pointer = data_->position.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  uint32_t pointer_id() const {
    return data_->pointer_id;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadButton(UserType* output) const {
    auto data_value = data_->button;
    return mojo::internal::Deserialize<::content::mojom::SyntheticButton>(
        data_value, output);
  }
  SyntheticButton button() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::SyntheticButton>(data_->button));
  }
  int32_t key_modifiers() const {
    return data_->key_modifiers;
  }
  float width() const {
    return data_->width;
  }
  float height() const {
    return data_->height;
  }
  float rotation_angle() const {
    return data_->rotation_angle;
  }
  float force() const {
    return data_->force;
  }
  float tangential_pressure() const {
    return data_->tangential_pressure;
  }
  int32_t tilt_x() const {
    return data_->tilt_x;
  }
  int32_t tilt_y() const {
    return data_->tilt_y;
  }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimestamp(UserType* output) {
    
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetDurationDataView(
      ::mojo_base::mojom::TimeDeltaDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDuration(UserType* output) {
    
    auto* pointer = data_->duration.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeDeltaDataView>(
        pointer, output, message_);
  }
 private:
  internal::SyntheticPointerActionParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SyntheticPointerActionDataView {
 public:
  SyntheticPointerActionDataView() = default;

  SyntheticPointerActionDataView(
      internal::SyntheticPointerAction_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadGestureSourceType(UserType* output) const {
    auto data_value = data_->gesture_source_type;
    return mojo::internal::Deserialize<::content::mojom::GestureSourceType>(
        data_value, output);
  }
  GestureSourceType gesture_source_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::content::mojom::GestureSourceType>(data_->gesture_source_type));
  }
  inline void GetParamsDataView(
      mojo::ArrayDataView<mojo::ArrayDataView<SyntheticPointerActionParamsDataView>>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<mojo::ArrayDataView<::content::mojom::SyntheticPointerActionParamsDataView>>>(
        pointer, output, message_);
  }
 private:
  internal::SyntheticPointerAction_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace content

namespace std {

template <>
struct hash<::content::mojom::GestureSourceType>
    : public mojo::internal::EnumHashImpl<::content::mojom::GestureSourceType> {};

template <>
struct hash<::content::mojom::PointerActionType>
    : public mojo::internal::EnumHashImpl<::content::mojom::PointerActionType> {};

template <>
struct hash<::content::mojom::SyntheticButton>
    : public mojo::internal::EnumHashImpl<::content::mojom::SyntheticButton> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::GestureSourceType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::GestureSourceType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content::mojom::GestureSourceType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::PointerActionType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::PointerActionType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content::mojom::PointerActionType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticButton, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::content::mojom::SyntheticButton, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::content::mojom::SyntheticButton>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticSmoothDragDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::SyntheticSmoothDragDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::SyntheticSmoothDrag_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::content::mojom::GestureSourceType>(
        Traits::gesture_source_type(input), &fragment->gesture_source_type);
    decltype(Traits::start_point(input)) in_start_point = Traits::start_point(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->start_point)::BaseType> start_point_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_start_point, start_point_fragment);
    fragment->start_point.Set(
        start_point_fragment.is_null() ? nullptr : start_point_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->start_point.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null start_point in SyntheticSmoothDrag struct");
    decltype(Traits::distances(input)) in_distances = Traits::distances(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->distances)::BaseType>
        distances_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams distances_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>>(
        in_distances, distances_fragment, &distances_validate_params);
    fragment->distances.Set(
        distances_fragment.is_null() ? nullptr : distances_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->distances.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null distances in SyntheticSmoothDrag struct");
    fragment->speed_in_pixels_s = Traits::speed_in_pixels_s(input);
  }

  static bool Deserialize(::content::mojom::internal::SyntheticSmoothDrag_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::SyntheticSmoothDragDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticSmoothScrollDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::SyntheticSmoothScrollDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::SyntheticSmoothScroll_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::content::mojom::GestureSourceType>(
        Traits::gesture_source_type(input), &fragment->gesture_source_type);
    decltype(Traits::anchor(input)) in_anchor = Traits::anchor(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->anchor)::BaseType> anchor_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_anchor, anchor_fragment);
    fragment->anchor.Set(
        anchor_fragment.is_null() ? nullptr : anchor_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->anchor.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null anchor in SyntheticSmoothScroll struct");
    decltype(Traits::distances(input)) in_distances = Traits::distances(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->distances)::BaseType>
        distances_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams distances_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>>(
        in_distances, distances_fragment, &distances_validate_params);
    fragment->distances.Set(
        distances_fragment.is_null() ? nullptr : distances_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->distances.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null distances in SyntheticSmoothScroll struct");
    fragment->prevent_fling = Traits::prevent_fling(input);
    fragment->speed_in_pixels_s = Traits::speed_in_pixels_s(input);
    fragment->fling_velocity_x = Traits::fling_velocity_x(input);
    fragment->fling_velocity_y = Traits::fling_velocity_y(input);
    mojo::internal::Serialize<::ui::mojom::ScrollGranularity>(
        Traits::granularity(input), &fragment->granularity);
    fragment->modifiers = Traits::modifiers(input);
  }

  static bool Deserialize(::content::mojom::internal::SyntheticSmoothScroll_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::SyntheticSmoothScrollDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticPinchDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::SyntheticPinchDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::SyntheticPinch_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->scale_factor = Traits::scale_factor(input);
    decltype(Traits::anchor(input)) in_anchor = Traits::anchor(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->anchor)::BaseType> anchor_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_anchor, anchor_fragment);
    fragment->anchor.Set(
        anchor_fragment.is_null() ? nullptr : anchor_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->anchor.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null anchor in SyntheticPinch struct");
    fragment->relative_pointer_speed_in_pixels_s = Traits::relative_pointer_speed_in_pixels_s(input);
  }

  static bool Deserialize(::content::mojom::internal::SyntheticPinch_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::SyntheticPinchDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticTapDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::SyntheticTapDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::SyntheticTap_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::content::mojom::GestureSourceType>(
        Traits::gesture_source_type(input), &fragment->gesture_source_type);
    decltype(Traits::position(input)) in_position = Traits::position(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->position)::BaseType> position_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_position, position_fragment);
    fragment->position.Set(
        position_fragment.is_null() ? nullptr : position_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->position.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null position in SyntheticTap struct");
    fragment->duration_ms = Traits::duration_ms(input);
  }

  static bool Deserialize(::content::mojom::internal::SyntheticTap_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::SyntheticTapDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticPointerActionParamsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::SyntheticPointerActionParamsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::SyntheticPointerActionParams_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::content::mojom::PointerActionType>(
        Traits::pointer_action_type(input), &fragment->pointer_action_type);
    decltype(Traits::position(input)) in_position = Traits::position(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->position)::BaseType> position_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_position, position_fragment);
    fragment->position.Set(
        position_fragment.is_null() ? nullptr : position_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->position.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null position in SyntheticPointerActionParams struct");
    fragment->pointer_id = Traits::pointer_id(input);
    mojo::internal::Serialize<::content::mojom::SyntheticButton>(
        Traits::button(input), &fragment->button);
    fragment->key_modifiers = Traits::key_modifiers(input);
    fragment->width = Traits::width(input);
    fragment->height = Traits::height(input);
    fragment->rotation_angle = Traits::rotation_angle(input);
    fragment->force = Traits::force(input);
    fragment->tangential_pressure = Traits::tangential_pressure(input);
    fragment->tilt_x = Traits::tilt_x(input);
    fragment->tilt_y = Traits::tilt_y(input);
    decltype(Traits::timestamp(input)) in_timestamp = Traits::timestamp(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->timestamp)::BaseType> timestamp_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_timestamp, timestamp_fragment);
    fragment->timestamp.Set(
        timestamp_fragment.is_null() ? nullptr : timestamp_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->timestamp.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null timestamp in SyntheticPointerActionParams struct");
    decltype(Traits::duration(input)) in_duration = Traits::duration(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->duration)::BaseType> duration_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeDeltaDataView>(
        in_duration, duration_fragment);
    fragment->duration.Set(
        duration_fragment.is_null() ? nullptr : duration_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->duration.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null duration in SyntheticPointerActionParams struct");
  }

  static bool Deserialize(::content::mojom::internal::SyntheticPointerActionParams_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::SyntheticPointerActionParamsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::content::mojom::SyntheticPointerActionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::content::mojom::SyntheticPointerActionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::content::mojom::internal::SyntheticPointerAction_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::content::mojom::GestureSourceType>(
        Traits::gesture_source_type(input), &fragment->gesture_source_type);
    decltype(Traits::params(input)) in_params = Traits::params(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->params)::BaseType>
        params_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams params_validate_params(
        0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::ArrayDataView<mojo::ArrayDataView<::content::mojom::SyntheticPointerActionParamsDataView>>>(
        in_params, params_fragment, &params_validate_params);
    fragment->params.Set(
        params_fragment.is_null() ? nullptr : params_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->params.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null params in SyntheticPointerAction struct");
  }

  static bool Deserialize(::content::mojom::internal::SyntheticPointerAction_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::content::mojom::SyntheticPointerActionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace content {
namespace mojom {

inline void SyntheticSmoothDragDataView::GetStartPointDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->start_point.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void SyntheticSmoothDragDataView::GetDistancesDataView(
    mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>* output) {
  auto pointer = data_->distances.Get();
  *output = mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>(pointer, message_);
}


inline void SyntheticSmoothScrollDataView::GetAnchorDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->anchor.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void SyntheticSmoothScrollDataView::GetDistancesDataView(
    mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>* output) {
  auto pointer = data_->distances.Get();
  *output = mojo::ArrayDataView<::gfx::mojom::Vector2dFDataView>(pointer, message_);
}


inline void SyntheticPinchDataView::GetAnchorDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->anchor.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}


inline void SyntheticTapDataView::GetPositionDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->position.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}


inline void SyntheticPointerActionParamsDataView::GetPositionDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->position.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void SyntheticPointerActionParamsDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void SyntheticPointerActionParamsDataView::GetDurationDataView(
    ::mojo_base::mojom::TimeDeltaDataView* output) {
  auto pointer = data_->duration.Get();
  *output = ::mojo_base::mojom::TimeDeltaDataView(pointer, message_);
}


inline void SyntheticPointerActionDataView::GetParamsDataView(
    mojo::ArrayDataView<mojo::ArrayDataView<SyntheticPointerActionParamsDataView>>* output) {
  auto pointer = data_->params.Get();
  *output = mojo::ArrayDataView<mojo::ArrayDataView<SyntheticPointerActionParamsDataView>>(pointer, message_);
}



}  // namespace mojom
}  // namespace content

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) TraceFormatTraits<::content::mojom::GestureSourceType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content::mojom::GestureSourceType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) TraceFormatTraits<::content::mojom::PointerActionType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content::mojom::PointerActionType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) TraceFormatTraits<::content::mojom::SyntheticButton> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::content::mojom::SyntheticButton value);
};

} // namespace perfetto

#endif  // CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_SHARED_H_