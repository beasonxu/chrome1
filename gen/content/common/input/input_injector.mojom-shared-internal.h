// content/common/input/input_injector.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_SHARED_INTERNAL_H_
#define CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "content/common/native_types.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "ui/events/mojom/scroll_granularity.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace content {
namespace mojom {
namespace internal {
class SyntheticSmoothDrag_Data;
class SyntheticSmoothScroll_Data;
class SyntheticPinch_Data;
class SyntheticTap_Data;
class SyntheticPointerActionParams_Data;
class SyntheticPointerAction_Data;

struct GestureSourceType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct PointerActionType_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct SyntheticButton_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SyntheticSmoothDrag_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t gesture_source_type;
  float speed_in_pixels_s;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> start_point;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Vector2dF_Data>>> distances;

 private:
  friend class mojo::internal::MessageFragment<SyntheticSmoothDrag_Data>;

  SyntheticSmoothDrag_Data();
  ~SyntheticSmoothDrag_Data() = delete;
};
static_assert(sizeof(SyntheticSmoothDrag_Data) == 32,
              "Bad sizeof(SyntheticSmoothDrag_Data)");
// Used by SyntheticSmoothDrag::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SyntheticSmoothDrag_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SyntheticSmoothDrag_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SyntheticSmoothDrag_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SyntheticSmoothDrag_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SyntheticSmoothDrag_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SyntheticSmoothScroll_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t gesture_source_type;
  uint8_t prevent_fling : 1;
  uint8_t pad1_[3];
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> anchor;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::gfx::mojom::internal::Vector2dF_Data>>> distances;
  float speed_in_pixels_s;
  float fling_velocity_x;
  float fling_velocity_y;
  int32_t granularity;
  int32_t modifiers;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SyntheticSmoothScroll_Data>;

  SyntheticSmoothScroll_Data();
  ~SyntheticSmoothScroll_Data() = delete;
};
static_assert(sizeof(SyntheticSmoothScroll_Data) == 56,
              "Bad sizeof(SyntheticSmoothScroll_Data)");
// Used by SyntheticSmoothScroll::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SyntheticSmoothScroll_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SyntheticSmoothScroll_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SyntheticSmoothScroll_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SyntheticSmoothScroll_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SyntheticSmoothScroll_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SyntheticPinch_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  float scale_factor;
  float relative_pointer_speed_in_pixels_s;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> anchor;

 private:
  friend class mojo::internal::MessageFragment<SyntheticPinch_Data>;

  SyntheticPinch_Data();
  ~SyntheticPinch_Data() = delete;
};
static_assert(sizeof(SyntheticPinch_Data) == 24,
              "Bad sizeof(SyntheticPinch_Data)");
// Used by SyntheticPinch::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SyntheticPinch_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SyntheticPinch_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SyntheticPinch_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SyntheticPinch_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SyntheticPinch_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SyntheticTap_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t gesture_source_type;
  float duration_ms;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> position;

 private:
  friend class mojo::internal::MessageFragment<SyntheticTap_Data>;

  SyntheticTap_Data();
  ~SyntheticTap_Data() = delete;
};
static_assert(sizeof(SyntheticTap_Data) == 24,
              "Bad sizeof(SyntheticTap_Data)");
// Used by SyntheticTap::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SyntheticTap_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SyntheticTap_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SyntheticTap_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SyntheticTap_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SyntheticTap_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SyntheticPointerActionParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t pointer_action_type;
  uint32_t pointer_id;
  mojo::internal::Pointer<::gfx::mojom::internal::PointF_Data> position;
  int32_t button;
  int32_t key_modifiers;
  float width;
  float height;
  float rotation_angle;
  float force;
  float tangential_pressure;
  int32_t tilt_x;
  int32_t tilt_y;
  uint8_t pad11_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> timestamp;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeDelta_Data> duration;

 private:
  friend class mojo::internal::MessageFragment<SyntheticPointerActionParams_Data>;

  SyntheticPointerActionParams_Data();
  ~SyntheticPointerActionParams_Data() = delete;
};
static_assert(sizeof(SyntheticPointerActionParams_Data) == 80,
              "Bad sizeof(SyntheticPointerActionParams_Data)");
// Used by SyntheticPointerActionParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SyntheticPointerActionParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SyntheticPointerActionParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SyntheticPointerActionParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SyntheticPointerActionParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SyntheticPointerActionParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(MOJOM_SHARED_CONTENT_EXPORT) SyntheticPointerAction_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t gesture_source_type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SyntheticPointerActionParams_Data>>>>> params;

 private:
  friend class mojo::internal::MessageFragment<SyntheticPointerAction_Data>;

  SyntheticPointerAction_Data();
  ~SyntheticPointerAction_Data() = delete;
};
static_assert(sizeof(SyntheticPointerAction_Data) == 24,
              "Bad sizeof(SyntheticPointerAction_Data)");
// Used by SyntheticPointerAction::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct SyntheticPointerAction_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  SyntheticPointerAction_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~SyntheticPointerAction_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<SyntheticPointerAction_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    SyntheticPointerAction_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace content

#endif  // CONTENT_COMMON_INPUT_INPUT_INJECTOR_MOJOM_SHARED_INTERNAL_H_