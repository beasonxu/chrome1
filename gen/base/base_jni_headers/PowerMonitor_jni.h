// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/base/PowerMonitor

#ifndef org_chromium_base_PowerMonitor_JNI
#define org_chromium_base_PowerMonitor_JNI

#include <jni.h>

#include "../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_base_PowerMonitor[];
const char kClassPath_org_chromium_base_PowerMonitor[] = "org/chromium/base/PowerMonitor";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass> g_org_chromium_base_PowerMonitor_clazz(nullptr);
#ifndef org_chromium_base_PowerMonitor_clazz_defined
#define org_chromium_base_PowerMonitor_clazz_defined
inline jclass org_chromium_base_PowerMonitor_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_base_PowerMonitor,
      &g_org_chromium_base_PowerMonitor_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace base {
namespace android {

static void JNI_PowerMonitor_OnBatteryChargingChanged(JNIEnv* env);

JNI_GENERATOR_EXPORT void Java_J_N_MCImhGql(
    JNIEnv* env,
    jclass jcaller) {
  return JNI_PowerMonitor_OnBatteryChargingChanged(env);
}

static void JNI_PowerMonitor_OnThermalStatusChanged(JNIEnv* env, jint thermalStatus);

JNI_GENERATOR_EXPORT void Java_J_N_MQNVaF2F(
    JNIEnv* env,
    jclass jcaller,
    jint thermalStatus) {
  return JNI_PowerMonitor_OnThermalStatusChanged(env, thermalStatus);
}


static std::atomic<jmethodID> g_org_chromium_base_PowerMonitor_isBatteryPower(nullptr);
static jboolean Java_PowerMonitor_isBatteryPower(JNIEnv* env) {
  jclass clazz = org_chromium_base_PowerMonitor_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_PowerMonitor_clazz(env), false);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "isBatteryPower",
          "()Z",
          &g_org_chromium_base_PowerMonitor_isBatteryPower);

  jboolean ret =
      env->CallStaticBooleanMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_PowerMonitor_getRemainingBatteryCapacity(nullptr);
static jint Java_PowerMonitor_getRemainingBatteryCapacity(JNIEnv* env) {
  jclass clazz = org_chromium_base_PowerMonitor_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_PowerMonitor_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getRemainingBatteryCapacity",
          "()I",
          &g_org_chromium_base_PowerMonitor_getRemainingBatteryCapacity);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

static std::atomic<jmethodID> g_org_chromium_base_PowerMonitor_getCurrentThermalStatus(nullptr);
static jint Java_PowerMonitor_getCurrentThermalStatus(JNIEnv* env) {
  jclass clazz = org_chromium_base_PowerMonitor_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_base_PowerMonitor_clazz(env), 0);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "getCurrentThermalStatus",
          "()I",
          &g_org_chromium_base_PowerMonitor_getCurrentThermalStatus);

  jint ret =
      env->CallStaticIntMethod(clazz,
          call_context.base.method_id);
  return ret;
}

}  // namespace android
}  // namespace base

#endif  // org_chromium_base_PowerMonitor_JNI
