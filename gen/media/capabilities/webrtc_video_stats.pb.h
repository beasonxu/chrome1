// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webrtc_video_stats.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_webrtc_5fvideo_5fstats_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_webrtc_5fvideo_5fstats_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_webrtc_5fvideo_5fstats_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_webrtc_5fvideo_5fstats_2eproto {
  static const uint32_t offsets[];
};
namespace media {
class WebrtcVideoStatsEntryProto;
struct WebrtcVideoStatsEntryProtoDefaultTypeInternal;
extern WebrtcVideoStatsEntryProtoDefaultTypeInternal _WebrtcVideoStatsEntryProto_default_instance_;
class WebrtcVideoStatsProto;
struct WebrtcVideoStatsProtoDefaultTypeInternal;
extern WebrtcVideoStatsProtoDefaultTypeInternal _WebrtcVideoStatsProto_default_instance_;
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> ::media::WebrtcVideoStatsEntryProto* Arena::CreateMaybeMessage<::media::WebrtcVideoStatsEntryProto>(Arena*);
template<> ::media::WebrtcVideoStatsProto* Arena::CreateMaybeMessage<::media::WebrtcVideoStatsProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace media {

// ===================================================================

class WebrtcVideoStatsProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.WebrtcVideoStatsProto) */ {
 public:
  inline WebrtcVideoStatsProto() : WebrtcVideoStatsProto(nullptr) {}
  ~WebrtcVideoStatsProto() override;
  explicit PROTOBUF_CONSTEXPR WebrtcVideoStatsProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebrtcVideoStatsProto(const WebrtcVideoStatsProto& from);
  WebrtcVideoStatsProto(WebrtcVideoStatsProto&& from) noexcept
    : WebrtcVideoStatsProto() {
    *this = ::std::move(from);
  }

  inline WebrtcVideoStatsProto& operator=(const WebrtcVideoStatsProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebrtcVideoStatsProto& operator=(WebrtcVideoStatsProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebrtcVideoStatsProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebrtcVideoStatsProto* internal_default_instance() {
    return reinterpret_cast<const WebrtcVideoStatsProto*>(
               &_WebrtcVideoStatsProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebrtcVideoStatsProto& a, WebrtcVideoStatsProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebrtcVideoStatsProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebrtcVideoStatsProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebrtcVideoStatsProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebrtcVideoStatsProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebrtcVideoStatsProto& from);
  void MergeFrom(const WebrtcVideoStatsProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebrtcVideoStatsProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.WebrtcVideoStatsProto";
  }
  protected:
  explicit WebrtcVideoStatsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kFramesProcessedFieldNumber = 2,
    kKeyFramesProcessedFieldNumber = 3,
    kP99ProcessingTimeMsFieldNumber = 4,
  };
  // optional double timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // optional uint32 frames_processed = 2;
  bool has_frames_processed() const;
  private:
  bool _internal_has_frames_processed() const;
  public:
  void clear_frames_processed();
  uint32_t frames_processed() const;
  void set_frames_processed(uint32_t value);
  private:
  uint32_t _internal_frames_processed() const;
  void _internal_set_frames_processed(uint32_t value);
  public:

  // optional uint32 key_frames_processed = 3;
  bool has_key_frames_processed() const;
  private:
  bool _internal_has_key_frames_processed() const;
  public:
  void clear_key_frames_processed();
  uint32_t key_frames_processed() const;
  void set_key_frames_processed(uint32_t value);
  private:
  uint32_t _internal_key_frames_processed() const;
  void _internal_set_key_frames_processed(uint32_t value);
  public:

  // optional float p99_processing_time_ms = 4;
  bool has_p99_processing_time_ms() const;
  private:
  bool _internal_has_p99_processing_time_ms() const;
  public:
  void clear_p99_processing_time_ms();
  float p99_processing_time_ms() const;
  void set_p99_processing_time_ms(float value);
  private:
  float _internal_p99_processing_time_ms() const;
  void _internal_set_p99_processing_time_ms(float value);
  public:

  // @@protoc_insertion_point(class_scope:media.WebrtcVideoStatsProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double timestamp_;
  uint32_t frames_processed_;
  uint32_t key_frames_processed_;
  float p99_processing_time_ms_;
  friend struct ::TableStruct_webrtc_5fvideo_5fstats_2eproto;
};
// -------------------------------------------------------------------

class WebrtcVideoStatsEntryProto final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:media.WebrtcVideoStatsEntryProto) */ {
 public:
  inline WebrtcVideoStatsEntryProto() : WebrtcVideoStatsEntryProto(nullptr) {}
  ~WebrtcVideoStatsEntryProto() override;
  explicit PROTOBUF_CONSTEXPR WebrtcVideoStatsEntryProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebrtcVideoStatsEntryProto(const WebrtcVideoStatsEntryProto& from);
  WebrtcVideoStatsEntryProto(WebrtcVideoStatsEntryProto&& from) noexcept
    : WebrtcVideoStatsEntryProto() {
    *this = ::std::move(from);
  }

  inline WebrtcVideoStatsEntryProto& operator=(const WebrtcVideoStatsEntryProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebrtcVideoStatsEntryProto& operator=(WebrtcVideoStatsEntryProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const WebrtcVideoStatsEntryProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebrtcVideoStatsEntryProto* internal_default_instance() {
    return reinterpret_cast<const WebrtcVideoStatsEntryProto*>(
               &_WebrtcVideoStatsEntryProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WebrtcVideoStatsEntryProto& a, WebrtcVideoStatsEntryProto& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebrtcVideoStatsEntryProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebrtcVideoStatsEntryProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebrtcVideoStatsEntryProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebrtcVideoStatsEntryProto>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebrtcVideoStatsEntryProto& from);
  void MergeFrom(const WebrtcVideoStatsEntryProto& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebrtcVideoStatsEntryProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "media.WebrtcVideoStatsEntryProto";
  }
  protected:
  explicit WebrtcVideoStatsEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatsFieldNumber = 1,
  };
  // repeated .media.WebrtcVideoStatsProto stats = 1;
  int stats_size() const;
  private:
  int _internal_stats_size() const;
  public:
  void clear_stats();
  ::media::WebrtcVideoStatsProto* mutable_stats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::WebrtcVideoStatsProto >*
      mutable_stats();
  private:
  const ::media::WebrtcVideoStatsProto& _internal_stats(int index) const;
  ::media::WebrtcVideoStatsProto* _internal_add_stats();
  public:
  const ::media::WebrtcVideoStatsProto& stats(int index) const;
  ::media::WebrtcVideoStatsProto* add_stats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::WebrtcVideoStatsProto >&
      stats() const;

  // @@protoc_insertion_point(class_scope:media.WebrtcVideoStatsEntryProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::WebrtcVideoStatsProto > stats_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_webrtc_5fvideo_5fstats_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebrtcVideoStatsProto

// optional double timestamp = 1;
inline bool WebrtcVideoStatsProto::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WebrtcVideoStatsProto::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void WebrtcVideoStatsProto::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double WebrtcVideoStatsProto::_internal_timestamp() const {
  return timestamp_;
}
inline double WebrtcVideoStatsProto::timestamp() const {
  // @@protoc_insertion_point(field_get:media.WebrtcVideoStatsProto.timestamp)
  return _internal_timestamp();
}
inline void WebrtcVideoStatsProto::_internal_set_timestamp(double value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_ = value;
}
inline void WebrtcVideoStatsProto::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:media.WebrtcVideoStatsProto.timestamp)
}

// optional uint32 frames_processed = 2;
inline bool WebrtcVideoStatsProto::_internal_has_frames_processed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WebrtcVideoStatsProto::has_frames_processed() const {
  return _internal_has_frames_processed();
}
inline void WebrtcVideoStatsProto::clear_frames_processed() {
  frames_processed_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t WebrtcVideoStatsProto::_internal_frames_processed() const {
  return frames_processed_;
}
inline uint32_t WebrtcVideoStatsProto::frames_processed() const {
  // @@protoc_insertion_point(field_get:media.WebrtcVideoStatsProto.frames_processed)
  return _internal_frames_processed();
}
inline void WebrtcVideoStatsProto::_internal_set_frames_processed(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  frames_processed_ = value;
}
inline void WebrtcVideoStatsProto::set_frames_processed(uint32_t value) {
  _internal_set_frames_processed(value);
  // @@protoc_insertion_point(field_set:media.WebrtcVideoStatsProto.frames_processed)
}

// optional uint32 key_frames_processed = 3;
inline bool WebrtcVideoStatsProto::_internal_has_key_frames_processed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WebrtcVideoStatsProto::has_key_frames_processed() const {
  return _internal_has_key_frames_processed();
}
inline void WebrtcVideoStatsProto::clear_key_frames_processed() {
  key_frames_processed_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t WebrtcVideoStatsProto::_internal_key_frames_processed() const {
  return key_frames_processed_;
}
inline uint32_t WebrtcVideoStatsProto::key_frames_processed() const {
  // @@protoc_insertion_point(field_get:media.WebrtcVideoStatsProto.key_frames_processed)
  return _internal_key_frames_processed();
}
inline void WebrtcVideoStatsProto::_internal_set_key_frames_processed(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  key_frames_processed_ = value;
}
inline void WebrtcVideoStatsProto::set_key_frames_processed(uint32_t value) {
  _internal_set_key_frames_processed(value);
  // @@protoc_insertion_point(field_set:media.WebrtcVideoStatsProto.key_frames_processed)
}

// optional float p99_processing_time_ms = 4;
inline bool WebrtcVideoStatsProto::_internal_has_p99_processing_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WebrtcVideoStatsProto::has_p99_processing_time_ms() const {
  return _internal_has_p99_processing_time_ms();
}
inline void WebrtcVideoStatsProto::clear_p99_processing_time_ms() {
  p99_processing_time_ms_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float WebrtcVideoStatsProto::_internal_p99_processing_time_ms() const {
  return p99_processing_time_ms_;
}
inline float WebrtcVideoStatsProto::p99_processing_time_ms() const {
  // @@protoc_insertion_point(field_get:media.WebrtcVideoStatsProto.p99_processing_time_ms)
  return _internal_p99_processing_time_ms();
}
inline void WebrtcVideoStatsProto::_internal_set_p99_processing_time_ms(float value) {
  _has_bits_[0] |= 0x00000008u;
  p99_processing_time_ms_ = value;
}
inline void WebrtcVideoStatsProto::set_p99_processing_time_ms(float value) {
  _internal_set_p99_processing_time_ms(value);
  // @@protoc_insertion_point(field_set:media.WebrtcVideoStatsProto.p99_processing_time_ms)
}

// -------------------------------------------------------------------

// WebrtcVideoStatsEntryProto

// repeated .media.WebrtcVideoStatsProto stats = 1;
inline int WebrtcVideoStatsEntryProto::_internal_stats_size() const {
  return stats_.size();
}
inline int WebrtcVideoStatsEntryProto::stats_size() const {
  return _internal_stats_size();
}
inline void WebrtcVideoStatsEntryProto::clear_stats() {
  stats_.Clear();
}
inline ::media::WebrtcVideoStatsProto* WebrtcVideoStatsEntryProto::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:media.WebrtcVideoStatsEntryProto.stats)
  return stats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::WebrtcVideoStatsProto >*
WebrtcVideoStatsEntryProto::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:media.WebrtcVideoStatsEntryProto.stats)
  return &stats_;
}
inline const ::media::WebrtcVideoStatsProto& WebrtcVideoStatsEntryProto::_internal_stats(int index) const {
  return stats_.Get(index);
}
inline const ::media::WebrtcVideoStatsProto& WebrtcVideoStatsEntryProto::stats(int index) const {
  // @@protoc_insertion_point(field_get:media.WebrtcVideoStatsEntryProto.stats)
  return _internal_stats(index);
}
inline ::media::WebrtcVideoStatsProto* WebrtcVideoStatsEntryProto::_internal_add_stats() {
  return stats_.Add();
}
inline ::media::WebrtcVideoStatsProto* WebrtcVideoStatsEntryProto::add_stats() {
  ::media::WebrtcVideoStatsProto* _add = _internal_add_stats();
  // @@protoc_insertion_point(field_add:media.WebrtcVideoStatsEntryProto.stats)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::media::WebrtcVideoStatsProto >&
WebrtcVideoStatsEntryProto::stats() const {
  // @@protoc_insertion_point(field_list:media.WebrtcVideoStatsEntryProto.stats)
  return stats_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace media

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_webrtc_5fvideo_5fstats_2eproto
