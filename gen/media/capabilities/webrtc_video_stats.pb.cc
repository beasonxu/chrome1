// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: webrtc_video_stats.proto

#include "webrtc_video_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace media {
PROTOBUF_CONSTEXPR WebrtcVideoStatsProto::WebrtcVideoStatsProto(
    ::_pbi::ConstantInitialized)
  : timestamp_(0)
  , frames_processed_(0u)
  , key_frames_processed_(0u)
  , p99_processing_time_ms_(0){}
struct WebrtcVideoStatsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebrtcVideoStatsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebrtcVideoStatsProtoDefaultTypeInternal() {}
  union {
    WebrtcVideoStatsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebrtcVideoStatsProtoDefaultTypeInternal _WebrtcVideoStatsProto_default_instance_;
PROTOBUF_CONSTEXPR WebrtcVideoStatsEntryProto::WebrtcVideoStatsEntryProto(
    ::_pbi::ConstantInitialized)
  : stats_(){}
struct WebrtcVideoStatsEntryProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebrtcVideoStatsEntryProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebrtcVideoStatsEntryProtoDefaultTypeInternal() {}
  union {
    WebrtcVideoStatsEntryProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebrtcVideoStatsEntryProtoDefaultTypeInternal _WebrtcVideoStatsEntryProto_default_instance_;
}  // namespace media
namespace media {

// ===================================================================

class WebrtcVideoStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<WebrtcVideoStatsProto>()._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frames_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_key_frames_processed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_p99_processing_time_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

WebrtcVideoStatsProto::WebrtcVideoStatsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.WebrtcVideoStatsProto)
}
WebrtcVideoStatsProto::WebrtcVideoStatsProto(const WebrtcVideoStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&p99_processing_time_ms_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(p99_processing_time_ms_));
  // @@protoc_insertion_point(copy_constructor:media.WebrtcVideoStatsProto)
}

inline void WebrtcVideoStatsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&p99_processing_time_ms_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(p99_processing_time_ms_));
}

WebrtcVideoStatsProto::~WebrtcVideoStatsProto() {
  // @@protoc_insertion_point(destructor:media.WebrtcVideoStatsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebrtcVideoStatsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WebrtcVideoStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebrtcVideoStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:media.WebrtcVideoStatsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&p99_processing_time_ms_) -
        reinterpret_cast<char*>(&timestamp_)) + sizeof(p99_processing_time_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebrtcVideoStatsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional double timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_timestamp(&has_bits);
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 frames_processed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frames_processed(&has_bits);
          frames_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 key_frames_processed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_key_frames_processed(&has_bits);
          key_frames_processed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float p99_processing_time_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_p99_processing_time_ms(&has_bits);
          p99_processing_time_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebrtcVideoStatsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.WebrtcVideoStatsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timestamp = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_timestamp(), target);
  }

  // optional uint32 frames_processed = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_frames_processed(), target);
  }

  // optional uint32 key_frames_processed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_key_frames_processed(), target);
  }

  // optional float p99_processing_time_ms = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_p99_processing_time_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.WebrtcVideoStatsProto)
  return target;
}

size_t WebrtcVideoStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.WebrtcVideoStatsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional double timestamp = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 frames_processed = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_frames_processed());
    }

    // optional uint32 key_frames_processed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_key_frames_processed());
    }

    // optional float p99_processing_time_ms = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebrtcVideoStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebrtcVideoStatsProto*>(
      &from));
}

void WebrtcVideoStatsProto::MergeFrom(const WebrtcVideoStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.WebrtcVideoStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      frames_processed_ = from.frames_processed_;
    }
    if (cached_has_bits & 0x00000004u) {
      key_frames_processed_ = from.key_frames_processed_;
    }
    if (cached_has_bits & 0x00000008u) {
      p99_processing_time_ms_ = from.p99_processing_time_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebrtcVideoStatsProto::CopyFrom(const WebrtcVideoStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.WebrtcVideoStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebrtcVideoStatsProto::IsInitialized() const {
  return true;
}

void WebrtcVideoStatsProto::InternalSwap(WebrtcVideoStatsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebrtcVideoStatsProto, p99_processing_time_ms_)
      + sizeof(WebrtcVideoStatsProto::p99_processing_time_ms_)
      - PROTOBUF_FIELD_OFFSET(WebrtcVideoStatsProto, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
}

std::string WebrtcVideoStatsProto::GetTypeName() const {
  return "media.WebrtcVideoStatsProto";
}


// ===================================================================

class WebrtcVideoStatsEntryProto::_Internal {
 public:
};

WebrtcVideoStatsEntryProto::WebrtcVideoStatsEntryProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  stats_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.WebrtcVideoStatsEntryProto)
}
WebrtcVideoStatsEntryProto::WebrtcVideoStatsEntryProto(const WebrtcVideoStatsEntryProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      stats_(from.stats_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:media.WebrtcVideoStatsEntryProto)
}

inline void WebrtcVideoStatsEntryProto::SharedCtor() {
}

WebrtcVideoStatsEntryProto::~WebrtcVideoStatsEntryProto() {
  // @@protoc_insertion_point(destructor:media.WebrtcVideoStatsEntryProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebrtcVideoStatsEntryProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WebrtcVideoStatsEntryProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebrtcVideoStatsEntryProto::Clear() {
// @@protoc_insertion_point(message_clear_start:media.WebrtcVideoStatsEntryProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stats_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebrtcVideoStatsEntryProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .media.WebrtcVideoStatsProto stats = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebrtcVideoStatsEntryProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.WebrtcVideoStatsEntryProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .media.WebrtcVideoStatsProto stats = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.WebrtcVideoStatsEntryProto)
  return target;
}

size_t WebrtcVideoStatsEntryProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.WebrtcVideoStatsEntryProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .media.WebrtcVideoStatsProto stats = 1;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebrtcVideoStatsEntryProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebrtcVideoStatsEntryProto*>(
      &from));
}

void WebrtcVideoStatsEntryProto::MergeFrom(const WebrtcVideoStatsEntryProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.WebrtcVideoStatsEntryProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  stats_.MergeFrom(from.stats_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebrtcVideoStatsEntryProto::CopyFrom(const WebrtcVideoStatsEntryProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.WebrtcVideoStatsEntryProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebrtcVideoStatsEntryProto::IsInitialized() const {
  return true;
}

void WebrtcVideoStatsEntryProto::InternalSwap(WebrtcVideoStatsEntryProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  stats_.InternalSwap(&other->stats_);
}

std::string WebrtcVideoStatsEntryProto::GetTypeName() const {
  return "media.WebrtcVideoStatsEntryProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::media::WebrtcVideoStatsProto*
Arena::CreateMaybeMessage< ::media::WebrtcVideoStatsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::WebrtcVideoStatsProto >(arena);
}
template<> PROTOBUF_NOINLINE ::media::WebrtcVideoStatsEntryProto*
Arena::CreateMaybeMessage< ::media::WebrtcVideoStatsEntryProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::WebrtcVideoStatsEntryProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
