// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: video_decode_stats.proto

#include "video_decode_stats.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace media {
PROTOBUF_CONSTEXPR DecodeStatsProto::DecodeStatsProto(
    ::_pbi::ConstantInitialized)
  : frames_decoded_(uint64_t{0u})
  , frames_dropped_(uint64_t{0u})
  , frames_power_efficient_(uint64_t{0u})
  , last_write_date_(0)
  , unweighted_average_frames_dropped_(0)
  , unweighted_average_frames_efficient_(0)
  , num_unweighted_playbacks_(uint64_t{0u}){}
struct DecodeStatsProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DecodeStatsProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DecodeStatsProtoDefaultTypeInternal() {}
  union {
    DecodeStatsProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DecodeStatsProtoDefaultTypeInternal _DecodeStatsProto_default_instance_;
}  // namespace media
namespace media {

// ===================================================================

class DecodeStatsProto::_Internal {
 public:
  using HasBits = decltype(std::declval<DecodeStatsProto>()._has_bits_);
  static void set_has_frames_decoded(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frames_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_frames_power_efficient(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_write_date(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_unweighted_average_frames_dropped(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unweighted_average_frames_efficient(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_num_unweighted_playbacks(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

DecodeStatsProto::DecodeStatsProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:media.DecodeStatsProto)
}
DecodeStatsProto::DecodeStatsProto(const DecodeStatsProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&frames_decoded_, &from.frames_decoded_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_unweighted_playbacks_) -
    reinterpret_cast<char*>(&frames_decoded_)) + sizeof(num_unweighted_playbacks_));
  // @@protoc_insertion_point(copy_constructor:media.DecodeStatsProto)
}

inline void DecodeStatsProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&frames_decoded_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_unweighted_playbacks_) -
    reinterpret_cast<char*>(&frames_decoded_)) + sizeof(num_unweighted_playbacks_));
}

DecodeStatsProto::~DecodeStatsProto() {
  // @@protoc_insertion_point(destructor:media.DecodeStatsProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DecodeStatsProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DecodeStatsProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DecodeStatsProto::Clear() {
// @@protoc_insertion_point(message_clear_start:media.DecodeStatsProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&frames_decoded_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&num_unweighted_playbacks_) -
        reinterpret_cast<char*>(&frames_decoded_)) + sizeof(num_unweighted_playbacks_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DecodeStatsProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint64 frames_decoded = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_frames_decoded(&has_bits);
          frames_decoded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frames_dropped = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_frames_dropped(&has_bits);
          frames_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 frames_power_efficient = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_frames_power_efficient(&has_bits);
          frames_power_efficient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional double last_write_date = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _Internal::set_has_last_write_date(&has_bits);
          last_write_date_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double unweighted_average_frames_dropped = 8 [default = 0];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _Internal::set_has_unweighted_average_frames_dropped(&has_bits);
          unweighted_average_frames_dropped_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double unweighted_average_frames_efficient = 9 [default = 0];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          _Internal::set_has_unweighted_average_frames_efficient(&has_bits);
          unweighted_average_frames_efficient_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional uint64 num_unweighted_playbacks = 10 [default = 0];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _Internal::set_has_num_unweighted_playbacks(&has_bits);
          num_unweighted_playbacks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DecodeStatsProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:media.DecodeStatsProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 frames_decoded = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_frames_decoded(), target);
  }

  // optional uint64 frames_dropped = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_frames_dropped(), target);
  }

  // optional uint64 frames_power_efficient = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frames_power_efficient(), target);
  }

  // optional double last_write_date = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_last_write_date(), target);
  }

  // optional double unweighted_average_frames_dropped = 8 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_unweighted_average_frames_dropped(), target);
  }

  // optional double unweighted_average_frames_efficient = 9 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_unweighted_average_frames_efficient(), target);
  }

  // optional uint64 num_unweighted_playbacks = 10 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(10, this->_internal_num_unweighted_playbacks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:media.DecodeStatsProto)
  return target;
}

size_t DecodeStatsProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:media.DecodeStatsProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional uint64 frames_decoded = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frames_decoded());
    }

    // optional uint64 frames_dropped = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frames_dropped());
    }

    // optional uint64 frames_power_efficient = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_frames_power_efficient());
    }

    // optional double last_write_date = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double unweighted_average_frames_dropped = 8 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double unweighted_average_frames_efficient = 9 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional uint64 num_unweighted_playbacks = 10 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_num_unweighted_playbacks());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DecodeStatsProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DecodeStatsProto*>(
      &from));
}

void DecodeStatsProto::MergeFrom(const DecodeStatsProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:media.DecodeStatsProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      frames_decoded_ = from.frames_decoded_;
    }
    if (cached_has_bits & 0x00000002u) {
      frames_dropped_ = from.frames_dropped_;
    }
    if (cached_has_bits & 0x00000004u) {
      frames_power_efficient_ = from.frames_power_efficient_;
    }
    if (cached_has_bits & 0x00000008u) {
      last_write_date_ = from.last_write_date_;
    }
    if (cached_has_bits & 0x00000010u) {
      unweighted_average_frames_dropped_ = from.unweighted_average_frames_dropped_;
    }
    if (cached_has_bits & 0x00000020u) {
      unweighted_average_frames_efficient_ = from.unweighted_average_frames_efficient_;
    }
    if (cached_has_bits & 0x00000040u) {
      num_unweighted_playbacks_ = from.num_unweighted_playbacks_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DecodeStatsProto::CopyFrom(const DecodeStatsProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:media.DecodeStatsProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecodeStatsProto::IsInitialized() const {
  return true;
}

void DecodeStatsProto::InternalSwap(DecodeStatsProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DecodeStatsProto, num_unweighted_playbacks_)
      + sizeof(DecodeStatsProto::num_unweighted_playbacks_)
      - PROTOBUF_FIELD_OFFSET(DecodeStatsProto, frames_decoded_)>(
          reinterpret_cast<char*>(&frames_decoded_),
          reinterpret_cast<char*>(&other->frames_decoded_));
}

std::string DecodeStatsProto::GetTypeName() const {
  return "media.DecodeStatsProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace media
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::media::DecodeStatsProto*
Arena::CreateMaybeMessage< ::media::DecodeStatsProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::media::DecodeStatsProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
