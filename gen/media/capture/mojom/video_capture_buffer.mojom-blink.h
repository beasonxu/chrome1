// media/capture/mojom/video_capture_buffer.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_BUFFER_MOJOM_BLINK_H_
#define MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_BUFFER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "media/capture/mojom/video_capture_buffer.mojom-shared.h"
#include "media/capture/mojom/video_capture_buffer.mojom-blink-forward.h"
#include "gpu/ipc/common/mailbox_holder.mojom-blink.h"
#include "media/capture/mojom/video_capture_types.mojom-blink.h"
#include "media/mojo/mojom/media_types.mojom-blink.h"
#include "mojo/public/mojom/base/shared_memory.mojom-blink.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "ui/gfx/mojom/buffer_types.mojom-blink.h"
#include "ui/gfx/mojom/color_space.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/platform/web_common.h"




namespace media {
namespace mojom {
namespace blink {









class BLINK_PLATFORM_EXPORT VideoBufferHandle {
 public:
  using DataView = VideoBufferHandleDataView;
  using Data_ = internal::VideoBufferHandle_Data;
  using Tag = Data_::VideoBufferHandle_Tag;

  template <typename... Args>
  static VideoBufferHandlePtr New(Args&&... args) {
    static_assert(
        sizeof...(args) < 0,
        "Do not use Union::New(); to create a union of a given subtype, use "
        "New<SubType>(), not New() followed by set_<sub_type>(). To represent "
        "an empty union, mark the field or parameter as nullable in the mojom "
        "definition.");
  }
  // Construct an instance holding |unsafe_shmem_region|.
  static VideoBufferHandlePtr
  NewUnsafeShmemRegion(
      ::base::UnsafeSharedMemoryRegion unsafe_shmem_region) {
    auto result = VideoBufferHandlePtr(absl::in_place);
    result->set_unsafe_shmem_region(std::move(unsafe_shmem_region));
    return result;
  }
  // Construct an instance holding |read_only_shmem_region|.
  static VideoBufferHandlePtr
  NewReadOnlyShmemRegion(
      ::base::ReadOnlySharedMemoryRegion read_only_shmem_region) {
    auto result = VideoBufferHandlePtr(absl::in_place);
    result->set_read_only_shmem_region(std::move(read_only_shmem_region));
    return result;
  }
  // Construct an instance holding |shared_memory_via_raw_file_descriptor|.
  static VideoBufferHandlePtr
  NewSharedMemoryViaRawFileDescriptor(
      SharedMemoryViaRawFileDescriptorPtr shared_memory_via_raw_file_descriptor) {
    auto result = VideoBufferHandlePtr(absl::in_place);
    result->set_shared_memory_via_raw_file_descriptor(std::move(shared_memory_via_raw_file_descriptor));
    return result;
  }
  // Construct an instance holding |mailbox_handles|.
  static VideoBufferHandlePtr
  NewMailboxHandles(
      MailboxBufferHandleSetPtr mailbox_handles) {
    auto result = VideoBufferHandlePtr(absl::in_place);
    result->set_mailbox_handles(std::move(mailbox_handles));
    return result;
  }
  // Construct an instance holding |gpu_memory_buffer_handle|.
  static VideoBufferHandlePtr
  NewGpuMemoryBufferHandle(
      ::gfx::GpuMemoryBufferHandle gpu_memory_buffer_handle) {
    auto result = VideoBufferHandlePtr(absl::in_place);
    result->set_gpu_memory_buffer_handle(std::move(gpu_memory_buffer_handle));
    return result;
  }

  template <typename U>
  static VideoBufferHandlePtr From(const U& u) {
    return mojo::TypeConverter<VideoBufferHandlePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VideoBufferHandle>::Convert(*this);
  }

  VideoBufferHandle();
  ~VideoBufferHandle();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename UnionPtrType = VideoBufferHandlePtr>
  VideoBufferHandlePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T,
            typename std::enable_if<std::is_same<
                T, VideoBufferHandle>::value>::type* = nullptr>
  bool Equals(const T& other) const;

  template <typename T,
            typename std::enable_if<std::is_same<
                T, VideoBufferHandle>::value>::type* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  Tag which() const {
    return tag_;
  }


  
  bool is_unsafe_shmem_region() const { return tag_ == Tag::kUnsafeShmemRegion; }

  
  ::base::UnsafeSharedMemoryRegion& get_unsafe_shmem_region() const {
    CHECK(tag_ == Tag::kUnsafeShmemRegion);
    return *(data_.unsafe_shmem_region);
  }

  
  void set_unsafe_shmem_region(
      ::base::UnsafeSharedMemoryRegion unsafe_shmem_region);
  
  bool is_read_only_shmem_region() const { return tag_ == Tag::kReadOnlyShmemRegion; }

  
  ::base::ReadOnlySharedMemoryRegion& get_read_only_shmem_region() const {
    CHECK(tag_ == Tag::kReadOnlyShmemRegion);
    return *(data_.read_only_shmem_region);
  }

  
  void set_read_only_shmem_region(
      ::base::ReadOnlySharedMemoryRegion read_only_shmem_region);
  
  bool is_shared_memory_via_raw_file_descriptor() const { return tag_ == Tag::kSharedMemoryViaRawFileDescriptor; }

  
  SharedMemoryViaRawFileDescriptorPtr& get_shared_memory_via_raw_file_descriptor() const {
    CHECK(tag_ == Tag::kSharedMemoryViaRawFileDescriptor);
    return *(data_.shared_memory_via_raw_file_descriptor);
  }

  
  void set_shared_memory_via_raw_file_descriptor(
      SharedMemoryViaRawFileDescriptorPtr shared_memory_via_raw_file_descriptor);
  
  bool is_mailbox_handles() const { return tag_ == Tag::kMailboxHandles; }

  
  MailboxBufferHandleSetPtr& get_mailbox_handles() const {
    CHECK(tag_ == Tag::kMailboxHandles);
    return *(data_.mailbox_handles);
  }

  
  void set_mailbox_handles(
      MailboxBufferHandleSetPtr mailbox_handles);
  
  bool is_gpu_memory_buffer_handle() const { return tag_ == Tag::kGpuMemoryBufferHandle; }

  
  ::gfx::GpuMemoryBufferHandle& get_gpu_memory_buffer_handle() const {
    CHECK(tag_ == Tag::kGpuMemoryBufferHandle);
    return *(data_.gpu_memory_buffer_handle);
  }

  
  void set_gpu_memory_buffer_handle(
      ::gfx::GpuMemoryBufferHandle gpu_memory_buffer_handle);

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VideoBufferHandle::DataView>(input);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    return mojo::internal::DeserializeImpl<VideoBufferHandle::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

 private:
  union Union_ {
    Union_() = default;
    ~Union_() = default;
    ::base::UnsafeSharedMemoryRegion* unsafe_shmem_region;
    ::base::ReadOnlySharedMemoryRegion* read_only_shmem_region;
    SharedMemoryViaRawFileDescriptorPtr* shared_memory_via_raw_file_descriptor;
    MailboxBufferHandleSetPtr* mailbox_handles;
    ::gfx::GpuMemoryBufferHandle* gpu_memory_buffer_handle;
  };

  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  void DestroyActive();
  Tag tag_;
  Union_ data_;
};





class BLINK_PLATFORM_EXPORT VideoFrameInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<VideoFrameInfo, T>::value>;
  using DataView = VideoFrameInfoDataView;
  using Data_ = internal::VideoFrameInfo_Data;

  template <typename... Args>
  static VideoFrameInfoPtr New(Args&&... args) {
    return VideoFrameInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static VideoFrameInfoPtr From(const U& u) {
    return mojo::TypeConverter<VideoFrameInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, VideoFrameInfo>::Convert(*this);
  }


  VideoFrameInfo();

  VideoFrameInfo(
      ::base::TimeDelta timestamp,
      const ::media::VideoFrameMetadata& metadata,
      ::media::VideoPixelFormat pixel_format,
      const ::gfx::Size& coded_size,
      const ::gfx::Rect& visible_rect,
      bool is_premapped,
      const absl::optional<::gfx::ColorSpace>& color_space,
      ::media::mojom::blink::PlaneStridesPtr strides);

VideoFrameInfo(const VideoFrameInfo&) = delete;
VideoFrameInfo& operator=(const VideoFrameInfo&) = delete;

  ~VideoFrameInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = VideoFrameInfoPtr>
  VideoFrameInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, VideoFrameInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, VideoFrameInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        VideoFrameInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        VideoFrameInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::VideoFrameInfo_UnserializedMessageContext<
            UserType, VideoFrameInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<VideoFrameInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return VideoFrameInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::VideoFrameInfo_UnserializedMessageContext<
            UserType, VideoFrameInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<VideoFrameInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::TimeDelta timestamp;
  
  ::media::VideoFrameMetadata metadata;
  
  ::media::VideoPixelFormat pixel_format;
  
  ::gfx::Size coded_size;
  
  ::gfx::Rect visible_rect;
  
  bool is_premapped;
  
  absl::optional<::gfx::ColorSpace> color_space;
  
  ::media::mojom::blink::PlaneStridesPtr strides;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, VideoFrameInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, VideoFrameInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, VideoFrameInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, VideoFrameInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT ReadyBuffer {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ReadyBuffer, T>::value>;
  using DataView = ReadyBufferDataView;
  using Data_ = internal::ReadyBuffer_Data;

  template <typename... Args>
  static ReadyBufferPtr New(Args&&... args) {
    return ReadyBufferPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ReadyBufferPtr From(const U& u) {
    return mojo::TypeConverter<ReadyBufferPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ReadyBuffer>::Convert(*this);
  }


  ReadyBuffer();

  ReadyBuffer(
      int32_t buffer_id,
      VideoFrameInfoPtr info);

ReadyBuffer(const ReadyBuffer&) = delete;
ReadyBuffer& operator=(const ReadyBuffer&) = delete;

  ~ReadyBuffer();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ReadyBufferPtr>
  ReadyBufferPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ReadyBuffer::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ReadyBuffer::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ReadyBuffer::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ReadyBuffer::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ReadyBuffer_UnserializedMessageContext<
            UserType, ReadyBuffer::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ReadyBuffer::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return ReadyBuffer::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ReadyBuffer_UnserializedMessageContext<
            UserType, ReadyBuffer::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ReadyBuffer::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t buffer_id;
  
  VideoFrameInfoPtr info;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ReadyBuffer::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ReadyBuffer::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ReadyBuffer::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ReadyBuffer::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT MailboxBufferHandleSet {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<MailboxBufferHandleSet, T>::value>;
  using DataView = MailboxBufferHandleSetDataView;
  using Data_ = internal::MailboxBufferHandleSet_Data;

  template <typename... Args>
  static MailboxBufferHandleSetPtr New(Args&&... args) {
    return MailboxBufferHandleSetPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static MailboxBufferHandleSetPtr From(const U& u) {
    return mojo::TypeConverter<MailboxBufferHandleSetPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, MailboxBufferHandleSet>::Convert(*this);
  }


  MailboxBufferHandleSet();

  explicit MailboxBufferHandleSet(
      WTF::Vector<::gpu::MailboxHolder> mailbox_holder);


  ~MailboxBufferHandleSet();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = MailboxBufferHandleSetPtr>
  MailboxBufferHandleSetPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, MailboxBufferHandleSet::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, MailboxBufferHandleSet::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        MailboxBufferHandleSet::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        MailboxBufferHandleSet::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::MailboxBufferHandleSet_UnserializedMessageContext<
            UserType, MailboxBufferHandleSet::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<MailboxBufferHandleSet::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return MailboxBufferHandleSet::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::MailboxBufferHandleSet_UnserializedMessageContext<
            UserType, MailboxBufferHandleSet::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<MailboxBufferHandleSet::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::Vector<::gpu::MailboxHolder> mailbox_holder;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, MailboxBufferHandleSet::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, MailboxBufferHandleSet::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, MailboxBufferHandleSet::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, MailboxBufferHandleSet::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT SharedMemoryViaRawFileDescriptor {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<SharedMemoryViaRawFileDescriptor, T>::value>;
  using DataView = SharedMemoryViaRawFileDescriptorDataView;
  using Data_ = internal::SharedMemoryViaRawFileDescriptor_Data;

  template <typename... Args>
  static SharedMemoryViaRawFileDescriptorPtr New(Args&&... args) {
    return SharedMemoryViaRawFileDescriptorPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static SharedMemoryViaRawFileDescriptorPtr From(const U& u) {
    return mojo::TypeConverter<SharedMemoryViaRawFileDescriptorPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, SharedMemoryViaRawFileDescriptor>::Convert(*this);
  }


  SharedMemoryViaRawFileDescriptor();

  SharedMemoryViaRawFileDescriptor(
      ::mojo::PlatformHandle file_descriptor_handle,
      uint32_t shared_memory_size_in_bytes);

SharedMemoryViaRawFileDescriptor(const SharedMemoryViaRawFileDescriptor&) = delete;
SharedMemoryViaRawFileDescriptor& operator=(const SharedMemoryViaRawFileDescriptor&) = delete;

  ~SharedMemoryViaRawFileDescriptor();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = SharedMemoryViaRawFileDescriptorPtr>
  SharedMemoryViaRawFileDescriptorPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        SharedMemoryViaRawFileDescriptor::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::SharedMemoryViaRawFileDescriptor_UnserializedMessageContext<
            UserType, SharedMemoryViaRawFileDescriptor::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<SharedMemoryViaRawFileDescriptor::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return SharedMemoryViaRawFileDescriptor::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::SharedMemoryViaRawFileDescriptor_UnserializedMessageContext<
            UserType, SharedMemoryViaRawFileDescriptor::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<SharedMemoryViaRawFileDescriptor::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::mojo::PlatformHandle file_descriptor_handle;
  
  uint32_t shared_memory_size_in_bytes;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename UnionPtrType>
VideoBufferHandlePtr VideoBufferHandle::Clone() const {
  switch (tag_) {
    case Tag::kUnsafeShmemRegion:
      return NewUnsafeShmemRegion(
          mojo::Clone(*data_.unsafe_shmem_region));
    case Tag::kReadOnlyShmemRegion:
      return NewReadOnlyShmemRegion(
          mojo::Clone(*data_.read_only_shmem_region));
    case Tag::kSharedMemoryViaRawFileDescriptor:
      return NewSharedMemoryViaRawFileDescriptor(
          mojo::Clone(*data_.shared_memory_via_raw_file_descriptor));
    case Tag::kMailboxHandles:
      return NewMailboxHandles(
          mojo::Clone(*data_.mailbox_handles));
    case Tag::kGpuMemoryBufferHandle:
      return NewGpuMemoryBufferHandle(
          mojo::Clone(*data_.gpu_memory_buffer_handle));
  }
  return nullptr;
}

template <typename T,
          typename std::enable_if<std::is_same<
              T, VideoBufferHandle>::value>::type*>
bool VideoBufferHandle::Equals(const T& other) const {
  if (tag_ != other.which())
    return false;

  switch (tag_) {
    case Tag::kUnsafeShmemRegion:
      return mojo::Equals(*(data_.unsafe_shmem_region), *(other.data_.unsafe_shmem_region));
    case Tag::kReadOnlyShmemRegion:
      return mojo::Equals(*(data_.read_only_shmem_region), *(other.data_.read_only_shmem_region));
    case Tag::kSharedMemoryViaRawFileDescriptor:
      return mojo::Equals(*(data_.shared_memory_via_raw_file_descriptor), *(other.data_.shared_memory_via_raw_file_descriptor));
    case Tag::kMailboxHandles:
      return mojo::Equals(*(data_.mailbox_handles), *(other.data_.mailbox_handles));
    case Tag::kGpuMemoryBufferHandle:
      return mojo::Equals(*(data_.gpu_memory_buffer_handle), *(other.data_.gpu_memory_buffer_handle));
  }

  return false;
}
template <typename StructPtrType>
VideoFrameInfoPtr VideoFrameInfo::Clone() const {
  return New(
      mojo::Clone(timestamp),
      mojo::Clone(metadata),
      mojo::Clone(pixel_format),
      mojo::Clone(coded_size),
      mojo::Clone(visible_rect),
      mojo::Clone(is_premapped),
      mojo::Clone(color_space),
      mojo::Clone(strides)
  );
}

template <typename T, VideoFrameInfo::EnableIfSame<T>*>
bool VideoFrameInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->timestamp, other_struct.timestamp))
    return false;
  if (!mojo::Equals(this->metadata, other_struct.metadata))
    return false;
  if (!mojo::Equals(this->pixel_format, other_struct.pixel_format))
    return false;
  if (!mojo::Equals(this->coded_size, other_struct.coded_size))
    return false;
  if (!mojo::Equals(this->visible_rect, other_struct.visible_rect))
    return false;
  if (!mojo::Equals(this->is_premapped, other_struct.is_premapped))
    return false;
  if (!mojo::Equals(this->color_space, other_struct.color_space))
    return false;
  if (!mojo::Equals(this->strides, other_struct.strides))
    return false;
  return true;
}

template <typename T, VideoFrameInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.timestamp < rhs.timestamp)
    return true;
  if (rhs.timestamp < lhs.timestamp)
    return false;
  if (lhs.metadata < rhs.metadata)
    return true;
  if (rhs.metadata < lhs.metadata)
    return false;
  if (lhs.pixel_format < rhs.pixel_format)
    return true;
  if (rhs.pixel_format < lhs.pixel_format)
    return false;
  if (lhs.coded_size < rhs.coded_size)
    return true;
  if (rhs.coded_size < lhs.coded_size)
    return false;
  if (lhs.visible_rect < rhs.visible_rect)
    return true;
  if (rhs.visible_rect < lhs.visible_rect)
    return false;
  if (lhs.is_premapped < rhs.is_premapped)
    return true;
  if (rhs.is_premapped < lhs.is_premapped)
    return false;
  if (lhs.color_space < rhs.color_space)
    return true;
  if (rhs.color_space < lhs.color_space)
    return false;
  if (lhs.strides < rhs.strides)
    return true;
  if (rhs.strides < lhs.strides)
    return false;
  return false;
}
template <typename StructPtrType>
ReadyBufferPtr ReadyBuffer::Clone() const {
  return New(
      mojo::Clone(buffer_id),
      mojo::Clone(info)
  );
}

template <typename T, ReadyBuffer::EnableIfSame<T>*>
bool ReadyBuffer::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->buffer_id, other_struct.buffer_id))
    return false;
  if (!mojo::Equals(this->info, other_struct.info))
    return false;
  return true;
}

template <typename T, ReadyBuffer::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.buffer_id < rhs.buffer_id)
    return true;
  if (rhs.buffer_id < lhs.buffer_id)
    return false;
  if (lhs.info < rhs.info)
    return true;
  if (rhs.info < lhs.info)
    return false;
  return false;
}
template <typename StructPtrType>
MailboxBufferHandleSetPtr MailboxBufferHandleSet::Clone() const {
  return New(
      mojo::Clone(mailbox_holder)
  );
}

template <typename T, MailboxBufferHandleSet::EnableIfSame<T>*>
bool MailboxBufferHandleSet::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->mailbox_holder, other_struct.mailbox_holder))
    return false;
  return true;
}

template <typename T, MailboxBufferHandleSet::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.mailbox_holder < rhs.mailbox_holder)
    return true;
  if (rhs.mailbox_holder < lhs.mailbox_holder)
    return false;
  return false;
}
template <typename StructPtrType>
SharedMemoryViaRawFileDescriptorPtr SharedMemoryViaRawFileDescriptor::Clone() const {
  return New(
      mojo::Clone(file_descriptor_handle),
      mojo::Clone(shared_memory_size_in_bytes)
  );
}

template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>*>
bool SharedMemoryViaRawFileDescriptor::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->file_descriptor_handle, other_struct.file_descriptor_handle))
    return false;
  if (!mojo::Equals(this->shared_memory_size_in_bytes, other_struct.shared_memory_size_in_bytes))
    return false;
  return true;
}

template <typename T, SharedMemoryViaRawFileDescriptor::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.file_descriptor_handle < rhs.file_descriptor_handle)
    return true;
  if (rhs.file_descriptor_handle < lhs.file_descriptor_handle)
    return false;
  if (lhs.shared_memory_size_in_bytes < rhs.shared_memory_size_in_bytes)
    return true;
  if (rhs.shared_memory_size_in_bytes < lhs.shared_memory_size_in_bytes)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace media

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media::mojom::blink::VideoFrameInfo::DataView,
                                         ::media::mojom::blink::VideoFrameInfoPtr> {
  static bool IsNull(const ::media::mojom::blink::VideoFrameInfoPtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::VideoFrameInfoPtr* output) { output->reset(); }

  static const decltype(::media::mojom::blink::VideoFrameInfo::timestamp)& timestamp(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->timestamp;
  }

  static const decltype(::media::mojom::blink::VideoFrameInfo::metadata)& metadata(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->metadata;
  }

  static decltype(::media::mojom::blink::VideoFrameInfo::pixel_format) pixel_format(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->pixel_format;
  }

  static const decltype(::media::mojom::blink::VideoFrameInfo::coded_size)& coded_size(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->coded_size;
  }

  static const decltype(::media::mojom::blink::VideoFrameInfo::visible_rect)& visible_rect(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->visible_rect;
  }

  static decltype(::media::mojom::blink::VideoFrameInfo::is_premapped) is_premapped(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->is_premapped;
  }

  static const decltype(::media::mojom::blink::VideoFrameInfo::color_space)& color_space(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->color_space;
  }

  static const decltype(::media::mojom::blink::VideoFrameInfo::strides)& strides(
      const ::media::mojom::blink::VideoFrameInfoPtr& input) {
    return input->strides;
  }

  static bool Read(::media::mojom::blink::VideoFrameInfo::DataView input, ::media::mojom::blink::VideoFrameInfoPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media::mojom::blink::ReadyBuffer::DataView,
                                         ::media::mojom::blink::ReadyBufferPtr> {
  static bool IsNull(const ::media::mojom::blink::ReadyBufferPtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::ReadyBufferPtr* output) { output->reset(); }

  static decltype(::media::mojom::blink::ReadyBuffer::buffer_id) buffer_id(
      const ::media::mojom::blink::ReadyBufferPtr& input) {
    return input->buffer_id;
  }

  static const decltype(::media::mojom::blink::ReadyBuffer::info)& info(
      const ::media::mojom::blink::ReadyBufferPtr& input) {
    return input->info;
  }

  static bool Read(::media::mojom::blink::ReadyBuffer::DataView input, ::media::mojom::blink::ReadyBufferPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media::mojom::blink::MailboxBufferHandleSet::DataView,
                                         ::media::mojom::blink::MailboxBufferHandleSetPtr> {
  static bool IsNull(const ::media::mojom::blink::MailboxBufferHandleSetPtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::MailboxBufferHandleSetPtr* output) { output->reset(); }

  static const decltype(::media::mojom::blink::MailboxBufferHandleSet::mailbox_holder)& mailbox_holder(
      const ::media::mojom::blink::MailboxBufferHandleSetPtr& input) {
    return input->mailbox_holder;
  }

  static bool Read(::media::mojom::blink::MailboxBufferHandleSet::DataView input, ::media::mojom::blink::MailboxBufferHandleSetPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media::mojom::blink::SharedMemoryViaRawFileDescriptor::DataView,
                                         ::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr> {
  static bool IsNull(const ::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr* output) { output->reset(); }

  static  decltype(::media::mojom::blink::SharedMemoryViaRawFileDescriptor::file_descriptor_handle)& file_descriptor_handle(
       ::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr& input) {
    return input->file_descriptor_handle;
  }

  static decltype(::media::mojom::blink::SharedMemoryViaRawFileDescriptor::shared_memory_size_in_bytes) shared_memory_size_in_bytes(
      const ::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr& input) {
    return input->shared_memory_size_in_bytes;
  }

  static bool Read(::media::mojom::blink::SharedMemoryViaRawFileDescriptor::DataView input, ::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT UnionTraits<::media::mojom::blink::VideoBufferHandle::DataView,
                                        ::media::mojom::blink::VideoBufferHandlePtr> {
  static bool IsNull(const ::media::mojom::blink::VideoBufferHandlePtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::VideoBufferHandlePtr* output) { output->reset(); }

  static ::media::mojom::blink::VideoBufferHandle::Tag GetTag(const ::media::mojom::blink::VideoBufferHandlePtr& input) {
    return input->which();
  }

  static  ::base::UnsafeSharedMemoryRegion& unsafe_shmem_region( ::media::mojom::blink::VideoBufferHandlePtr& input) {
    return input->get_unsafe_shmem_region();
  }

  static  ::base::ReadOnlySharedMemoryRegion& read_only_shmem_region( ::media::mojom::blink::VideoBufferHandlePtr& input) {
    return input->get_read_only_shmem_region();
  }

  static  ::media::mojom::blink::SharedMemoryViaRawFileDescriptorPtr& shared_memory_via_raw_file_descriptor( ::media::mojom::blink::VideoBufferHandlePtr& input) {
    return input->get_shared_memory_via_raw_file_descriptor();
  }

  static const ::media::mojom::blink::MailboxBufferHandleSetPtr& mailbox_handles(const ::media::mojom::blink::VideoBufferHandlePtr& input) {
    return input->get_mailbox_handles();
  }

  static  ::gfx::GpuMemoryBufferHandle& gpu_memory_buffer_handle( ::media::mojom::blink::VideoBufferHandlePtr& input) {
    return input->get_gpu_memory_buffer_handle();
  }

  static bool Read(::media::mojom::blink::VideoBufferHandle::DataView input, ::media::mojom::blink::VideoBufferHandlePtr* output);
};

}  // namespace mojo

#endif  // MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_BUFFER_MOJOM_BLINK_H_