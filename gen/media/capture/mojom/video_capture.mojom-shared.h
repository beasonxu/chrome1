// media/capture/mojom/video_capture.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_SHARED_H_
#define MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "media/capture/mojom/video_capture.mojom-shared-internal.h"
#include "media/capture/mojom/video_capture_buffer.mojom-shared.h"
#include "media/capture/mojom/video_capture_types.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace media {
namespace mojom {
class VideoCaptureResultDataView;


}  // namespace mojom
}  // namespace media

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::media::mojom::VideoCaptureResultDataView> {
  using Data = ::media::mojom::internal::VideoCaptureResult_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace media {
namespace mojom {


enum class VideoCaptureState : int32_t {
  
  STARTED = 0,
  
  PAUSED = 1,
  
  RESUMED = 2,
  
  STOPPED = 3,
  
  ENDED = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, VideoCaptureState value);
inline bool IsKnownEnumValue(VideoCaptureState value) {
  return internal::VideoCaptureState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class VideoCaptureObserverInterfaceBase {};

using VideoCaptureObserverPtrDataView =
    mojo::InterfacePtrDataView<VideoCaptureObserverInterfaceBase>;
using VideoCaptureObserverRequestDataView =
    mojo::InterfaceRequestDataView<VideoCaptureObserverInterfaceBase>;
using VideoCaptureObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<VideoCaptureObserverInterfaceBase>;
using VideoCaptureObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<VideoCaptureObserverInterfaceBase>;
class VideoCaptureHostInterfaceBase {};

using VideoCaptureHostPtrDataView =
    mojo::InterfacePtrDataView<VideoCaptureHostInterfaceBase>;
using VideoCaptureHostRequestDataView =
    mojo::InterfaceRequestDataView<VideoCaptureHostInterfaceBase>;
using VideoCaptureHostAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<VideoCaptureHostInterfaceBase>;
using VideoCaptureHostAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<VideoCaptureHostInterfaceBase>;


class VideoCaptureResultDataView {
 public:
  using Tag = internal::VideoCaptureResult_Data::VideoCaptureResult_Tag;

  VideoCaptureResultDataView() = default;

  VideoCaptureResultDataView(
      internal::VideoCaptureResult_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_state() const { return data_->tag == Tag::kState; }
  template <typename UserType>
  [[nodiscard]] bool ReadState(UserType* output) const {
    CHECK(is_state());
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureState>(
        data_->data.f_state, output);
  }
  VideoCaptureState state() const {
    CHECK(is_state());
    // TODO(dcheng): This seems incorrect, as it bypasses enum traits.
    return ::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::media::mojom::VideoCaptureState>(data_->data.f_state));
  }
  bool is_error_code() const { return data_->tag == Tag::kErrorCode; }
  template <typename UserType>
  [[nodiscard]] bool ReadErrorCode(UserType* output) const {
    CHECK(is_error_code());
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureError>(
        data_->data.f_error_code, output);
  }
  ::media::mojom::VideoCaptureError error_code() const {
    CHECK(is_error_code());
    // TODO(dcheng): This seems incorrect, as it bypasses enum traits.
    return ::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::media::mojom::VideoCaptureError>(data_->data.f_error_code));
  }

 private:
  internal::VideoCaptureResult_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace media

namespace std {

template <>
struct hash<::media::mojom::VideoCaptureState>
    : public mojo::internal::EnumHashImpl<::media::mojom::VideoCaptureState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media::mojom::VideoCaptureState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::media::mojom::VideoCaptureState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::media::mojom::VideoCaptureState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::media::mojom::VideoCaptureResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::media::mojom::VideoCaptureResultDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::media::mojom::internal::VideoCaptureResult_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::media::mojom::VideoCaptureResultDataView::Tag::kState: {
        decltype(Traits::state(input))
            in_state = Traits::state(input);
        mojo::internal::Serialize<::media::mojom::VideoCaptureState>(
            in_state, &fragment->data.f_state);
        break;
      }
      case ::media::mojom::VideoCaptureResultDataView::Tag::kErrorCode: {
        decltype(Traits::error_code(input))
            in_error_code = Traits::error_code(input);
        mojo::internal::Serialize<::media::mojom::VideoCaptureError>(
            in_error_code, &fragment->data.f_error_code);
        break;
      }
    }
  }

  static bool Deserialize(::media::mojom::internal::VideoCaptureResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::media::mojom::VideoCaptureResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace media {
namespace mojom {



}  // namespace mojom
}  // namespace media

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::media::mojom::VideoCaptureState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::media::mojom::VideoCaptureState value);
};

} // namespace perfetto

#endif  // MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_SHARED_H_