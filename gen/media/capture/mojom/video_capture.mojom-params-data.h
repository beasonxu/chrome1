// media/capture/mojom/video_capture.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_PARAMS_DATA_H_
#define MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  VideoCaptureObserver_OnStateChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::VideoCaptureResult_Data result;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureObserver_OnStateChanged_Params_Data>;

  VideoCaptureObserver_OnStateChanged_Params_Data();
  ~VideoCaptureObserver_OnStateChanged_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureObserver_OnStateChanged_Params_Data) == 24,
              "Bad sizeof(VideoCaptureObserver_OnStateChanged_Params_Data)");
class  VideoCaptureObserver_OnNewBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t pad0_[4];
  ::media::mojom::internal::VideoBufferHandle_Data buffer_handle;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureObserver_OnNewBuffer_Params_Data>;

  VideoCaptureObserver_OnNewBuffer_Params_Data();
  ~VideoCaptureObserver_OnNewBuffer_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureObserver_OnNewBuffer_Params_Data) == 32,
              "Bad sizeof(VideoCaptureObserver_OnNewBuffer_Params_Data)");
class  VideoCaptureObserver_OnBufferReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::ReadyBuffer_Data> buffer;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::mojom::internal::ReadyBuffer_Data>>> scaled_buffers;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureObserver_OnBufferReady_Params_Data>;

  VideoCaptureObserver_OnBufferReady_Params_Data();
  ~VideoCaptureObserver_OnBufferReady_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureObserver_OnBufferReady_Params_Data) == 24,
              "Bad sizeof(VideoCaptureObserver_OnBufferReady_Params_Data)");
class  VideoCaptureObserver_OnBufferDestroyed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureObserver_OnBufferDestroyed_Params_Data>;

  VideoCaptureObserver_OnBufferDestroyed_Params_Data();
  ~VideoCaptureObserver_OnBufferDestroyed_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureObserver_OnBufferDestroyed_Params_Data) == 16,
              "Bad sizeof(VideoCaptureObserver_OnBufferDestroyed_Params_Data)");
class  VideoCaptureObserver_OnNewCropVersion_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t crop_version;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureObserver_OnNewCropVersion_Params_Data>;

  VideoCaptureObserver_OnNewCropVersion_Params_Data();
  ~VideoCaptureObserver_OnNewCropVersion_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureObserver_OnNewCropVersion_Params_Data) == 16,
              "Bad sizeof(VideoCaptureObserver_OnNewCropVersion_Params_Data)");
class  VideoCaptureHost_Start_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> session_id;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureParams_Data> params;
  mojo::internal::Interface_Data observer;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_Start_Params_Data>;

  VideoCaptureHost_Start_Params_Data();
  ~VideoCaptureHost_Start_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_Start_Params_Data) == 40,
              "Bad sizeof(VideoCaptureHost_Start_Params_Data)");
class  VideoCaptureHost_Stop_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_Stop_Params_Data>;

  VideoCaptureHost_Stop_Params_Data();
  ~VideoCaptureHost_Stop_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_Stop_Params_Data) == 16,
              "Bad sizeof(VideoCaptureHost_Stop_Params_Data)");
class  VideoCaptureHost_Pause_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_Pause_Params_Data>;

  VideoCaptureHost_Pause_Params_Data();
  ~VideoCaptureHost_Pause_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_Pause_Params_Data) == 16,
              "Bad sizeof(VideoCaptureHost_Pause_Params_Data)");
class  VideoCaptureHost_Resume_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> session_id;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_Resume_Params_Data>;

  VideoCaptureHost_Resume_Params_Data();
  ~VideoCaptureHost_Resume_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_Resume_Params_Data) == 32,
              "Bad sizeof(VideoCaptureHost_Resume_Params_Data)");
class  VideoCaptureHost_RequestRefreshFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_RequestRefreshFrame_Params_Data>;

  VideoCaptureHost_RequestRefreshFrame_Params_Data();
  ~VideoCaptureHost_RequestRefreshFrame_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_RequestRefreshFrame_Params_Data) == 16,
              "Bad sizeof(VideoCaptureHost_RequestRefreshFrame_Params_Data)");
class  VideoCaptureHost_ReleaseBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  int32_t buffer_id;
  uint8_t pad1_[4];
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureFeedback_Data> feedback;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_ReleaseBuffer_Params_Data>;

  VideoCaptureHost_ReleaseBuffer_Params_Data();
  ~VideoCaptureHost_ReleaseBuffer_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_ReleaseBuffer_Params_Data) == 32,
              "Bad sizeof(VideoCaptureHost_ReleaseBuffer_Params_Data)");
class  VideoCaptureHost_GetDeviceSupportedFormats_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> session_id;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_GetDeviceSupportedFormats_Params_Data>;

  VideoCaptureHost_GetDeviceSupportedFormats_Params_Data();
  ~VideoCaptureHost_GetDeviceSupportedFormats_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_GetDeviceSupportedFormats_Params_Data) == 24,
              "Bad sizeof(VideoCaptureHost_GetDeviceSupportedFormats_Params_Data)");
class  VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::mojom::internal::VideoCaptureFormat_Data>>> formats_supported;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data>;

  VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data();
  ~VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data) == 16,
              "Bad sizeof(VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data)");
class  VideoCaptureHost_GetDeviceFormatsInUse_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> session_id;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_GetDeviceFormatsInUse_Params_Data>;

  VideoCaptureHost_GetDeviceFormatsInUse_Params_Data();
  ~VideoCaptureHost_GetDeviceFormatsInUse_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_GetDeviceFormatsInUse_Params_Data) == 24,
              "Bad sizeof(VideoCaptureHost_GetDeviceFormatsInUse_Params_Data)");
class  VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::mojom::internal::VideoCaptureFormat_Data>>> formats_in_use;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data>;

  VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data();
  ~VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data) == 16,
              "Bad sizeof(VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data)");
class  VideoCaptureHost_OnFrameDropped_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_OnFrameDropped_Params_Data>;

  VideoCaptureHost_OnFrameDropped_Params_Data();
  ~VideoCaptureHost_OnFrameDropped_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_OnFrameDropped_Params_Data) == 24,
              "Bad sizeof(VideoCaptureHost_OnFrameDropped_Params_Data)");
class  VideoCaptureHost_OnLog_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> device_id;
  mojo::internal::Pointer<mojo::internal::String_Data> message;

 private:
  friend class mojo::internal::MessageFragment<VideoCaptureHost_OnLog_Params_Data>;

  VideoCaptureHost_OnLog_Params_Data();
  ~VideoCaptureHost_OnLog_Params_Data() = delete;
};
static_assert(sizeof(VideoCaptureHost_OnLog_Params_Data) == 24,
              "Bad sizeof(VideoCaptureHost_OnLog_Params_Data)");

}  // namespace internal


class VideoCaptureObserver_OnStateChanged_ParamsDataView {
 public:
  VideoCaptureObserver_OnStateChanged_ParamsDataView() = default;

  VideoCaptureObserver_OnStateChanged_ParamsDataView(
      internal::VideoCaptureObserver_OnStateChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultDataView(
      VideoCaptureResultDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResult(UserType* output) {
    
    auto* pointer = !data_->result.is_null() ? &data_->result : nullptr;
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureResultDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureObserver_OnStateChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureObserver_OnNewBuffer_ParamsDataView {
 public:
  VideoCaptureObserver_OnNewBuffer_ParamsDataView() = default;

  VideoCaptureObserver_OnNewBuffer_ParamsDataView(
      internal::VideoCaptureObserver_OnNewBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
  inline void GetBufferHandleDataView(
      ::media::mojom::VideoBufferHandleDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBufferHandle(UserType* output) {
    
    auto* pointer = !data_->buffer_handle.is_null() ? &data_->buffer_handle : nullptr;
    return mojo::internal::Deserialize<::media::mojom::VideoBufferHandleDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureObserver_OnNewBuffer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureObserver_OnBufferReady_ParamsDataView {
 public:
  VideoCaptureObserver_OnBufferReady_ParamsDataView() = default;

  VideoCaptureObserver_OnBufferReady_ParamsDataView(
      internal::VideoCaptureObserver_OnBufferReady_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferDataView(
      ::media::mojom::ReadyBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuffer(UserType* output) {
    
    auto* pointer = data_->buffer.Get();
    return mojo::internal::Deserialize<::media::mojom::ReadyBufferDataView>(
        pointer, output, message_);
  }
  inline void GetScaledBuffersDataView(
      mojo::ArrayDataView<::media::mojom::ReadyBufferDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScaledBuffers(UserType* output) {
    
    auto* pointer = data_->scaled_buffers.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::ReadyBufferDataView>>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureObserver_OnBufferReady_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureObserver_OnBufferDestroyed_ParamsDataView {
 public:
  VideoCaptureObserver_OnBufferDestroyed_ParamsDataView() = default;

  VideoCaptureObserver_OnBufferDestroyed_ParamsDataView(
      internal::VideoCaptureObserver_OnBufferDestroyed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
 private:
  internal::VideoCaptureObserver_OnBufferDestroyed_Params_Data* data_ = nullptr;
};



class VideoCaptureObserver_OnNewCropVersion_ParamsDataView {
 public:
  VideoCaptureObserver_OnNewCropVersion_ParamsDataView() = default;

  VideoCaptureObserver_OnNewCropVersion_ParamsDataView(
      internal::VideoCaptureObserver_OnNewCropVersion_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t crop_version() const {
    return data_->crop_version;
  }
 private:
  internal::VideoCaptureObserver_OnNewCropVersion_Params_Data* data_ = nullptr;
};



class VideoCaptureHost_Start_ParamsDataView {
 public:
  VideoCaptureHost_Start_ParamsDataView() = default;

  VideoCaptureHost_Start_ParamsDataView(
      internal::VideoCaptureHost_Start_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSessionIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSessionId(UserType* output) {
    
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetParamsDataView(
      ::media::mojom::VideoCaptureParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureParamsDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::mojom::VideoCaptureObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoCaptureHost_Start_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_Stop_ParamsDataView {
 public:
  VideoCaptureHost_Stop_ParamsDataView() = default;

  VideoCaptureHost_Stop_ParamsDataView(
      internal::VideoCaptureHost_Stop_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_Stop_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_Pause_ParamsDataView {
 public:
  VideoCaptureHost_Pause_ParamsDataView() = default;

  VideoCaptureHost_Pause_ParamsDataView(
      internal::VideoCaptureHost_Pause_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_Pause_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_Resume_ParamsDataView {
 public:
  VideoCaptureHost_Resume_ParamsDataView() = default;

  VideoCaptureHost_Resume_ParamsDataView(
      internal::VideoCaptureHost_Resume_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSessionIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSessionId(UserType* output) {
    
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetParamsDataView(
      ::media::mojom::VideoCaptureParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_Resume_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_RequestRefreshFrame_ParamsDataView {
 public:
  VideoCaptureHost_RequestRefreshFrame_ParamsDataView() = default;

  VideoCaptureHost_RequestRefreshFrame_ParamsDataView(
      internal::VideoCaptureHost_RequestRefreshFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_RequestRefreshFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_ReleaseBuffer_ParamsDataView {
 public:
  VideoCaptureHost_ReleaseBuffer_ParamsDataView() = default;

  VideoCaptureHost_ReleaseBuffer_ParamsDataView(
      internal::VideoCaptureHost_ReleaseBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
  inline void GetFeedbackDataView(
      ::media::mojom::VideoCaptureFeedbackDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFeedback(UserType* output) {
    
    auto* pointer = data_->feedback.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureFeedbackDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_ReleaseBuffer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_GetDeviceSupportedFormats_ParamsDataView {
 public:
  VideoCaptureHost_GetDeviceSupportedFormats_ParamsDataView() = default;

  VideoCaptureHost_GetDeviceSupportedFormats_ParamsDataView(
      internal::VideoCaptureHost_GetDeviceSupportedFormats_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSessionIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSessionId(UserType* output) {
    
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_GetDeviceSupportedFormats_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_GetDeviceSupportedFormats_ResponseParamsDataView {
 public:
  VideoCaptureHost_GetDeviceSupportedFormats_ResponseParamsDataView() = default;

  VideoCaptureHost_GetDeviceSupportedFormats_ResponseParamsDataView(
      internal::VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFormatsSupportedDataView(
      mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFormatsSupported(UserType* output) {
    
    auto* pointer = data_->formats_supported.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_GetDeviceSupportedFormats_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_GetDeviceFormatsInUse_ParamsDataView {
 public:
  VideoCaptureHost_GetDeviceFormatsInUse_ParamsDataView() = default;

  VideoCaptureHost_GetDeviceFormatsInUse_ParamsDataView(
      internal::VideoCaptureHost_GetDeviceFormatsInUse_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetSessionIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSessionId(UserType* output) {
    
    auto* pointer = data_->session_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_GetDeviceFormatsInUse_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_GetDeviceFormatsInUse_ResponseParamsDataView {
 public:
  VideoCaptureHost_GetDeviceFormatsInUse_ResponseParamsDataView() = default;

  VideoCaptureHost_GetDeviceFormatsInUse_ResponseParamsDataView(
      internal::VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFormatsInUseDataView(
      mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFormatsInUse(UserType* output) {
    
    auto* pointer = data_->formats_in_use.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_GetDeviceFormatsInUse_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_OnFrameDropped_ParamsDataView {
 public:
  VideoCaptureHost_OnFrameDropped_ParamsDataView() = default;

  VideoCaptureHost_OnFrameDropped_ParamsDataView(
      internal::VideoCaptureHost_OnFrameDropped_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureFrameDropReason>(
        data_value, output);
  }
  ::media::mojom::VideoCaptureFrameDropReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::VideoCaptureFrameDropReason>(data_->reason));
  }
 private:
  internal::VideoCaptureHost_OnFrameDropped_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoCaptureHost_OnLog_ParamsDataView {
 public:
  VideoCaptureHost_OnLog_ParamsDataView() = default;

  VideoCaptureHost_OnLog_ParamsDataView(
      internal::VideoCaptureHost_OnLog_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoCaptureHost_OnLog_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void VideoCaptureObserver_OnStateChanged_ParamsDataView::GetResultDataView(
    VideoCaptureResultDataView* output) {
  auto pointer = &data_->result;
  *output = VideoCaptureResultDataView(pointer, message_);
}


inline void VideoCaptureObserver_OnNewBuffer_ParamsDataView::GetBufferHandleDataView(
    ::media::mojom::VideoBufferHandleDataView* output) {
  auto pointer = &data_->buffer_handle;
  *output = ::media::mojom::VideoBufferHandleDataView(pointer, message_);
}


inline void VideoCaptureObserver_OnBufferReady_ParamsDataView::GetBufferDataView(
    ::media::mojom::ReadyBufferDataView* output) {
  auto pointer = data_->buffer.Get();
  *output = ::media::mojom::ReadyBufferDataView(pointer, message_);
}
inline void VideoCaptureObserver_OnBufferReady_ParamsDataView::GetScaledBuffersDataView(
    mojo::ArrayDataView<::media::mojom::ReadyBufferDataView>* output) {
  auto pointer = data_->scaled_buffers.Get();
  *output = mojo::ArrayDataView<::media::mojom::ReadyBufferDataView>(pointer, message_);
}






inline void VideoCaptureHost_Start_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_Start_ParamsDataView::GetSessionIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_Start_ParamsDataView::GetParamsDataView(
    ::media::mojom::VideoCaptureParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::media::mojom::VideoCaptureParamsDataView(pointer, message_);
}


inline void VideoCaptureHost_Stop_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void VideoCaptureHost_Pause_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void VideoCaptureHost_Resume_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_Resume_ParamsDataView::GetSessionIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_Resume_ParamsDataView::GetParamsDataView(
    ::media::mojom::VideoCaptureParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = ::media::mojom::VideoCaptureParamsDataView(pointer, message_);
}


inline void VideoCaptureHost_RequestRefreshFrame_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void VideoCaptureHost_ReleaseBuffer_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_ReleaseBuffer_ParamsDataView::GetFeedbackDataView(
    ::media::mojom::VideoCaptureFeedbackDataView* output) {
  auto pointer = data_->feedback.Get();
  *output = ::media::mojom::VideoCaptureFeedbackDataView(pointer, message_);
}


inline void VideoCaptureHost_GetDeviceSupportedFormats_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_GetDeviceSupportedFormats_ParamsDataView::GetSessionIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void VideoCaptureHost_GetDeviceSupportedFormats_ResponseParamsDataView::GetFormatsSupportedDataView(
    mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>* output) {
  auto pointer = data_->formats_supported.Get();
  *output = mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>(pointer, message_);
}


inline void VideoCaptureHost_GetDeviceFormatsInUse_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_GetDeviceFormatsInUse_ParamsDataView::GetSessionIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->session_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void VideoCaptureHost_GetDeviceFormatsInUse_ResponseParamsDataView::GetFormatsInUseDataView(
    mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>* output) {
  auto pointer = data_->formats_in_use.Get();
  *output = mojo::ArrayDataView<::media::mojom::VideoCaptureFormatDataView>(pointer, message_);
}


inline void VideoCaptureHost_OnFrameDropped_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void VideoCaptureHost_OnLog_ParamsDataView::GetDeviceIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void VideoCaptureHost_OnLog_ParamsDataView::GetMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->message.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_CAPTURE_MOJOM_VIDEO_CAPTURE_MOJOM_PARAMS_DATA_H_