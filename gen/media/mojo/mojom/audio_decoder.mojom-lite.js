// media/mojo/mojom/audio_decoder.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('media.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.AudioDecoderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.AudioDecoder.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.AudioDecoderInterface }
 */
media.mojom.AudioDecoderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.AudioDecoderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.AudioDecoderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.AudioDecoderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } client
   */

  construct(
      client) {
    this.proxy.sendMessage(
        0,
        media.mojom.AudioDecoder_Construct_ParamsSpec.$,
        null,
        [
          client
        ]);
  }

  
  /**
   * @param { !media.mojom.AudioDecoderConfig } config
   * @param { ?mojoBase.mojom.UnguessableToken } cdmId
   * @return {!Promise<{
        success: !media.mojom.DecoderStatus,
        needsBitstreamConversion: !boolean,
        decoderType: !media.mojom.AudioDecoderType,
   *  }>}
   */

  initialize(
      config,
      cdmId) {
    return this.proxy.sendMessage(
        1,
        media.mojom.AudioDecoder_Initialize_ParamsSpec.$,
        media.mojom.AudioDecoder_Initialize_ResponseParamsSpec.$,
        [
          config,
          cdmId
        ]);
  }

  
  /**
   * @param { !MojoHandle } receivePipe
   */

  setDataSource(
      receivePipe) {
    this.proxy.sendMessage(
        2,
        media.mojom.AudioDecoder_SetDataSource_ParamsSpec.$,
        null,
        [
          receivePipe
        ]);
  }

  
  /**
   * @param { !media.mojom.DecoderBuffer } buffer
   * @return {!Promise<{
        status: !media.mojom.DecoderStatus,
   *  }>}
   */

  decode(
      buffer) {
    return this.proxy.sendMessage(
        3,
        media.mojom.AudioDecoder_Decode_ParamsSpec.$,
        media.mojom.AudioDecoder_Decode_ResponseParamsSpec.$,
        [
          buffer
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  reset() {
    return this.proxy.sendMessage(
        4,
        media.mojom.AudioDecoder_Reset_ParamsSpec.$,
        media.mojom.AudioDecoder_Reset_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the AudioDecoder
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.AudioDecoderReceiver = class {
  /**
   * @param {!media.mojom.AudioDecoderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.AudioDecoderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.AudioDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AudioDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.AudioDecoder_Construct_ParamsSpec.$,
        null,
        impl.construct.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.AudioDecoder_Initialize_ParamsSpec.$,
        media.mojom.AudioDecoder_Initialize_ResponseParamsSpec.$,
        impl.initialize.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.AudioDecoder_SetDataSource_ParamsSpec.$,
        null,
        impl.setDataSource.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.AudioDecoder_Decode_ParamsSpec.$,
        media.mojom.AudioDecoder_Decode_ResponseParamsSpec.$,
        impl.decode.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.AudioDecoder_Reset_ParamsSpec.$,
        media.mojom.AudioDecoder_Reset_ResponseParamsSpec.$,
        impl.reset.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.AudioDecoder = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.AudioDecoder";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.AudioDecoderRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.AudioDecoderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AudioDecoder
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.AudioDecoderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.AudioDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AudioDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.construct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.AudioDecoder_Construct_ParamsSpec.$,
        null,
        this.construct.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initialize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.AudioDecoder_Initialize_ParamsSpec.$,
        media.mojom.AudioDecoder_Initialize_ResponseParamsSpec.$,
        this.initialize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setDataSource =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.AudioDecoder_SetDataSource_ParamsSpec.$,
        null,
        this.setDataSource.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.decode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.AudioDecoder_Decode_ParamsSpec.$,
        media.mojom.AudioDecoder_Decode_ResponseParamsSpec.$,
        this.decode.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reset =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.AudioDecoder_Reset_ParamsSpec.$,
        media.mojom.AudioDecoder_Reset_ResponseParamsSpec.$,
        this.reset.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.AudioDecoderClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.AudioDecoderClient.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.AudioDecoderClientInterface }
 */
media.mojom.AudioDecoderClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.AudioDecoderClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.AudioDecoderClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.AudioDecoderClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.AudioBuffer } buffer
   */

  onBufferDecoded(
      buffer) {
    this.proxy.sendMessage(
        0,
        media.mojom.AudioDecoderClient_OnBufferDecoded_ParamsSpec.$,
        null,
        [
          buffer
        ]);
  }

  
  /**
   * @param { !media.mojom.WaitingReason } reason
   */

  onWaiting(
      reason) {
    this.proxy.sendMessage(
        1,
        media.mojom.AudioDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }
};

/**
 * An object which receives request messages for the AudioDecoderClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.AudioDecoderClientReceiver = class {
  /**
   * @param {!media.mojom.AudioDecoderClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.AudioDecoderClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.AudioDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AudioDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.AudioDecoderClient_OnBufferDecoded_ParamsSpec.$,
        null,
        impl.onBufferDecoded.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.AudioDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        impl.onWaiting.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.AudioDecoderClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.AudioDecoderClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.AudioDecoderClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.AudioDecoderClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AudioDecoderClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.AudioDecoderClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.AudioDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AudioDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onBufferDecoded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.AudioDecoderClient_OnBufferDecoded_ParamsSpec.$,
        null,
        this.onBufferDecoded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onWaiting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.AudioDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        this.onWaiting.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Construct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Initialize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Initialize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_SetDataSource_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Decode_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Decode_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Reset_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoder_Reset_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoderClient_OnBufferDecoded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AudioDecoderClient_OnWaiting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.AudioDecoder_Construct_ParamsSpec.$,
    'AudioDecoder_Construct_Params',
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(media.mojom.AudioDecoderClientRemote),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AudioDecoder_Construct_Params = class {
  constructor() {
    /** @export { !Object } */
    this.client;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_Initialize_ParamsSpec.$,
    'AudioDecoder_Initialize_Params',
    [
      mojo.internal.StructField(
        'config', 0,
        0,
        media.mojom.AudioDecoderConfigSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'cdmId', 8,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.AudioDecoder_Initialize_Params = class {
  constructor() {
    /** @export { !media.mojom.AudioDecoderConfig } */
    this.config;
    /** @export { (mojoBase.mojom.UnguessableToken|undefined) } */
    this.cdmId;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_Initialize_ResponseParamsSpec.$,
    'AudioDecoder_Initialize_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        media.mojom.DecoderStatusSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'needsBitstreamConversion', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'decoderType', 12,
        0,
        media.mojom.AudioDecoderTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.AudioDecoder_Initialize_ResponseParams = class {
  constructor() {
    /** @export { !media.mojom.DecoderStatus } */
    this.success;
    /** @export { !boolean } */
    this.needsBitstreamConversion;
    /** @export { !media.mojom.AudioDecoderType } */
    this.decoderType;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_SetDataSource_ParamsSpec.$,
    'AudioDecoder_SetDataSource_Params',
    [
      mojo.internal.StructField(
        'receivePipe', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AudioDecoder_SetDataSource_Params = class {
  constructor() {
    /** @export { !MojoHandle } */
    this.receivePipe;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_Decode_ParamsSpec.$,
    'AudioDecoder_Decode_Params',
    [
      mojo.internal.StructField(
        'buffer', 0,
        0,
        media.mojom.DecoderBufferSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AudioDecoder_Decode_Params = class {
  constructor() {
    /** @export { !media.mojom.DecoderBuffer } */
    this.buffer;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_Decode_ResponseParamsSpec.$,
    'AudioDecoder_Decode_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media.mojom.DecoderStatusSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AudioDecoder_Decode_ResponseParams = class {
  constructor() {
    /** @export { !media.mojom.DecoderStatus } */
    this.status;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_Reset_ParamsSpec.$,
    'AudioDecoder_Reset_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.AudioDecoder_Reset_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoder_Reset_ResponseParamsSpec.$,
    'AudioDecoder_Reset_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.AudioDecoder_Reset_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoderClient_OnBufferDecoded_ParamsSpec.$,
    'AudioDecoderClient_OnBufferDecoded_Params',
    [
      mojo.internal.StructField(
        'buffer', 0,
        0,
        media.mojom.AudioBufferSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AudioDecoderClient_OnBufferDecoded_Params = class {
  constructor() {
    /** @export { !media.mojom.AudioBuffer } */
    this.buffer;
  }
};




mojo.internal.Struct(
    media.mojom.AudioDecoderClient_OnWaiting_ParamsSpec.$,
    'AudioDecoderClient_OnWaiting_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media.mojom.WaitingReasonSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AudioDecoderClient_OnWaiting_Params = class {
  constructor() {
    /** @export { !media.mojom.WaitingReason } */
    this.reason;
  }
};


