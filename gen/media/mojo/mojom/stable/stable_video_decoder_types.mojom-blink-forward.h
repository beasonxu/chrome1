// media/mojo/mojom/stable/stable_video_decoder_types.mojom-blink-forward.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_STABLE_STABLE_VIDEO_DECODER_TYPES_MOJOM_BLINK_FORWARD_H_
#define MEDIA_MOJO_MOJOM_STABLE_STABLE_VIDEO_DECODER_TYPES_MOJOM_BLINK_FORWARD_H_

#include <stdint.h>

#include "mojo/public/cpp/bindings/struct_forward.h"




#include "mojo/public/interfaces/bindings/native_struct.mojom-forward.h"




namespace media {
namespace stable {
namespace mojom {

enum class VideoCodec : int32_t;

enum class VideoCodecProfile : int32_t;

enum class EncryptionScheme : int32_t;

enum class StatusCode : int32_t;

enum class VideoDecoderType : int32_t;

enum class ColorSpacePrimaryID : int32_t;

enum class ColorSpaceTransferID : int32_t;

enum class ColorSpaceMatrixID : int32_t;

enum class ColorSpaceRangeID : int32_t;

enum class VideoPixelFormat : int32_t;

enum class WaitingReason : int32_t;

enum class DecryptStatus : int32_t;

enum class CdmContextEvent : int32_t;

enum class MediaLogRecord_Type : int32_t;
}  // namespace media
}  // namespace stable
}  // namespace mojom


namespace media {
namespace stable {
namespace mojom {
namespace blink {
using VideoCodec = VideoCodec;
using VideoCodecProfile = VideoCodecProfile;
using EncryptionScheme = EncryptionScheme;
using StatusCode = StatusCode;
using VideoDecoderType = VideoDecoderType;
using ColorSpacePrimaryID = ColorSpacePrimaryID;
using ColorSpaceTransferID = ColorSpaceTransferID;
using ColorSpaceMatrixID = ColorSpaceMatrixID;
using ColorSpaceRangeID = ColorSpaceRangeID;
using VideoPixelFormat = VideoPixelFormat;
using WaitingReason = WaitingReason;
using DecryptStatus = DecryptStatus;
using CdmContextEvent = CdmContextEvent;
class SubsampleEntry;
using SubsampleEntryPtr = mojo::InlinedStructPtr<SubsampleEntry>;

class DecryptConfig;
using DecryptConfigPtr = mojo::StructPtr<DecryptConfig>;

class ColorVolumeMetadata;
using ColorVolumeMetadataPtr = mojo::StructPtr<ColorVolumeMetadata>;

class HDRMetadata;
using HDRMetadataPtr = mojo::StructPtr<HDRMetadata>;

class VideoDecoderConfig;
using VideoDecoderConfigPtr = mojo::StructPtr<VideoDecoderConfig>;

class SupportedVideoDecoderConfig;
using SupportedVideoDecoderConfigPtr = mojo::StructPtr<SupportedVideoDecoderConfig>;

class StatusData;
using StatusDataPtr = mojo::StructPtr<StatusData>;

class Status;
using StatusPtr = mojo::StructPtr<Status>;

class DecoderBuffer;
using DecoderBufferPtr = mojo::StructPtr<DecoderBuffer>;

class ColorSpace;
using ColorSpacePtr = mojo::StructPtr<ColorSpace>;

class EosVideoFrameData;
using EosVideoFrameDataPtr = mojo::InlinedStructPtr<EosVideoFrameData>;

class NativeGpuMemoryBufferHandle;
using NativeGpuMemoryBufferHandlePtr = mojo::StructPtr<NativeGpuMemoryBufferHandle>;

class GpuMemoryBufferVideoFrameData;
using GpuMemoryBufferVideoFrameDataPtr = mojo::StructPtr<GpuMemoryBufferVideoFrameData>;

class VideoFrameMetadata;
using VideoFrameMetadataPtr = mojo::StructPtr<VideoFrameMetadata>;

class VideoFrame;
using VideoFramePtr = mojo::StructPtr<VideoFrame>;

class MediaLogRecord;
using MediaLogRecordPtr = mojo::StructPtr<MediaLogRecord>;

class VideoFrameData;

using VideoFrameDataPtr = mojo::StructPtr<VideoFrameData>;




}  // namespace blink
}  // namespace mojom
}  // namespace stable
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_STABLE_STABLE_VIDEO_DECODER_TYPES_MOJOM_BLINK_FORWARD_H_