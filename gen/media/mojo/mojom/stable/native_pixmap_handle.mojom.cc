// media/mojo/mojom/stable/native_pixmap_handle.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "media/mojo/mojom/stable/native_pixmap_handle.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/mojo/mojom/stable/native_pixmap_handle.mojom-params-data.h"
#include "media/mojo/mojom/stable/native_pixmap_handle.mojom-shared-message-ids.h"

#include "media/mojo/mojom/stable/native_pixmap_handle.mojom-import-headers.h"
#include "media/mojo/mojom/stable/native_pixmap_handle.mojom-test-utils.h"


#ifndef MEDIA_MOJO_MOJOM_STABLE_NATIVE_PIXMAP_HANDLE_MOJOM_JUMBO_H_
#define MEDIA_MOJO_MOJOM_STABLE_NATIVE_PIXMAP_HANDLE_MOJOM_JUMBO_H_
#endif



namespace media {
namespace stable {
namespace mojom {
NativePixmapPlane::NativePixmapPlane()
    : stride(),
      offset(),
      size(),
      buffer_handle() {}

NativePixmapPlane::NativePixmapPlane(
    uint32_t stride_in,
    uint64_t offset_in,
    uint64_t size_in,
    ::mojo::PlatformHandle buffer_handle_in)
    : stride(std::move(stride_in)),
      offset(std::move(offset_in)),
      size(std::move(size_in)),
      buffer_handle(std::move(buffer_handle_in)) {}

NativePixmapPlane::~NativePixmapPlane() = default;

void NativePixmapPlane::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "stride"), this->stride,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "offset"), this->offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "size"), this->size,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "buffer_handle"), this->buffer_handle,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo::PlatformHandle>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool NativePixmapPlane::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
NativePixmapHandle::NativePixmapHandle()
    : planes(),
      modifier() {}

NativePixmapHandle::NativePixmapHandle(
    std::vector<NativePixmapPlanePtr> planes_in,
    uint64_t modifier_in)
    : planes(std::move(planes_in)),
      modifier(std::move(modifier_in)) {}

NativePixmapHandle::~NativePixmapHandle() = default;

void NativePixmapHandle::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "planes"), this->planes,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<NativePixmapPlanePtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "modifier"), this->modifier,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool NativePixmapHandle::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace stable
}  // namespace media


namespace mojo {


// static
bool StructTraits<::media::stable::mojom::NativePixmapPlane::DataView, ::media::stable::mojom::NativePixmapPlanePtr>::Read(
    ::media::stable::mojom::NativePixmapPlane::DataView input,
    ::media::stable::mojom::NativePixmapPlanePtr* output) {
  bool success = true;
  ::media::stable::mojom::NativePixmapPlanePtr result(::media::stable::mojom::NativePixmapPlane::New());
  
      if (success)
        result->stride = input.stride();
      if (success)
        result->offset = input.offset();
      if (success)
        result->size = input.size();
      if (success)
        result->buffer_handle = input.TakeBufferHandle();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::media::stable::mojom::NativePixmapHandle::DataView, ::media::stable::mojom::NativePixmapHandlePtr>::Read(
    ::media::stable::mojom::NativePixmapHandle::DataView input,
    ::media::stable::mojom::NativePixmapHandlePtr* output) {
  bool success = true;
  ::media::stable::mojom::NativePixmapHandlePtr result(::media::stable::mojom::NativePixmapHandle::New());
  
      if (success && !input.ReadPlanes(&result->planes))
        success = false;
      if (success)
        result->modifier = input.modifier();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media {
namespace stable {
namespace mojom {




}  // namespace mojom
}  // namespace stable
}  // namespace media


#if defined(__clang__)
#pragma clang diagnostic pop
#endif