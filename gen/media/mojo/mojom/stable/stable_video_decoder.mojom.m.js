// media/mojo/mojom/stable/stable_video_decoder.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  UnguessableToken as mojoBase_mojom_UnguessableToken,
  UnguessableTokenSpec as mojoBase_mojom_UnguessableTokenSpec
} from '../../../../mojo/public/mojom/base/unguessable_token.mojom.m.js';

import {
  Sandbox as sandbox_mojom_Sandbox,
  SandboxSpec as sandbox_mojom_SandboxSpec
} from '../../../../sandbox/policy/mojom/sandbox.mojom.m.js';

import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  CdmContextEvent as media_stable_mojom_CdmContextEvent,
  CdmContextEventSpec as media_stable_mojom_CdmContextEventSpec,
  DecryptStatus as media_stable_mojom_DecryptStatus,
  DecryptStatusSpec as media_stable_mojom_DecryptStatusSpec,
  VideoDecoderType as media_stable_mojom_VideoDecoderType,
  VideoDecoderTypeSpec as media_stable_mojom_VideoDecoderTypeSpec,
  WaitingReason as media_stable_mojom_WaitingReason,
  WaitingReasonSpec as media_stable_mojom_WaitingReasonSpec,
  ColorSpace as media_stable_mojom_ColorSpace,
  ColorSpaceSpec as media_stable_mojom_ColorSpaceSpec,
  DecoderBuffer as media_stable_mojom_DecoderBuffer,
  DecoderBufferSpec as media_stable_mojom_DecoderBufferSpec,
  DecryptConfig as media_stable_mojom_DecryptConfig,
  DecryptConfigSpec as media_stable_mojom_DecryptConfigSpec,
  MediaLogRecord as media_stable_mojom_MediaLogRecord,
  MediaLogRecordSpec as media_stable_mojom_MediaLogRecordSpec,
  Status as media_stable_mojom_Status,
  StatusSpec as media_stable_mojom_StatusSpec,
  SupportedVideoDecoderConfig as media_stable_mojom_SupportedVideoDecoderConfig,
  SupportedVideoDecoderConfigSpec as media_stable_mojom_SupportedVideoDecoderConfigSpec,
  VideoDecoderConfig as media_stable_mojom_VideoDecoderConfig,
  VideoDecoderConfigSpec as media_stable_mojom_VideoDecoderConfigSpec,
  VideoFrame as media_stable_mojom_VideoFrame,
  VideoFrameSpec as media_stable_mojom_VideoFrameSpec
} from './stable_video_decoder_types.mojom.m.js';


/**
 * @const { !sandbox_mojom_Sandbox }
 */
export const STABLE_VIDEO_DECODER_FACTORY_SERVICE_SANDBOX = sandbox_mojom_Sandbox.kNoSandbox;




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaLogPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.MediaLog', scope);
  }
}

/** @interface */
export class MediaLogInterface {
  
  /**
   * @param { !media_stable_mojom_MediaLogRecord } event
   */

  addLogRecord(event) {}
}

/**
 * @implements { MediaLogInterface }
 */
export class MediaLogRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaLogPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaLogPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaLogPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media_stable_mojom_MediaLogRecord } event
   */

  addLogRecord(
      event) {
    this.proxy.sendMessage(
        0,
        MediaLog_AddLogRecord_ParamsSpec.$,
        null,
        [
          event
        ]);
  }
}

/**
 * An object which receives request messages for the MediaLog
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaLogReceiver {
  /**
   * @param {!MediaLogInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaLogRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaLogRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaLogRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaLog_AddLogRecord_ParamsSpec.$,
        null,
        impl.addLogRecord.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaLog {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.MediaLog";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaLogRemote}
   */
  static getRemote() {
    let remote = new MediaLogRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaLog
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaLogCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaLogRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaLogRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addLogRecord =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaLog_AddLogRecord_ParamsSpec.$,
        null,
        this.addLogRecord.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class VideoFrameHandleReleaserPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.VideoFrameHandleReleaser', scope);
  }
}

/** @interface */
export class VideoFrameHandleReleaserInterface {
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } releaseToken
   */

  releaseVideoFrame(releaseToken) {}
}

/**
 * @implements { VideoFrameHandleReleaserInterface }
 */
export class VideoFrameHandleReleaserRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!VideoFrameHandleReleaserPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          VideoFrameHandleReleaserPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!VideoFrameHandleReleaserPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } releaseToken
   */

  releaseVideoFrame(
      releaseToken) {
    this.proxy.sendMessage(
        0,
        VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
        null,
        [
          releaseToken
        ]);
  }
}

/**
 * An object which receives request messages for the VideoFrameHandleReleaser
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class VideoFrameHandleReleaserReceiver {
  /**
   * @param {!VideoFrameHandleReleaserInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!VideoFrameHandleReleaserRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        VideoFrameHandleReleaserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!VideoFrameHandleReleaserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
        null,
        impl.releaseVideoFrame.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class VideoFrameHandleReleaser {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.VideoFrameHandleReleaser";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!VideoFrameHandleReleaserRemote}
   */
  static getRemote() {
    let remote = new VideoFrameHandleReleaserRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the VideoFrameHandleReleaser
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class VideoFrameHandleReleaserCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      VideoFrameHandleReleaserRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!VideoFrameHandleReleaserRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.releaseVideoFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
        null,
        this.releaseVideoFrame.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class VideoDecoderClientPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.VideoDecoderClient', scope);
  }
}

/** @interface */
export class VideoDecoderClientInterface {
  
  /**
   * @param { !media_stable_mojom_VideoFrame } frame
   * @param { !boolean } canReadWithoutStalling
   * @param { !mojoBase_mojom_UnguessableToken } releaseToken
   */

  onVideoFrameDecoded(frame, canReadWithoutStalling, releaseToken) {}
  
  /**
   * @param { !media_stable_mojom_WaitingReason } reason
   */

  onWaiting(reason) {}
}

/**
 * @implements { VideoDecoderClientInterface }
 */
export class VideoDecoderClientRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!VideoDecoderClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          VideoDecoderClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!VideoDecoderClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media_stable_mojom_VideoFrame } frame
   * @param { !boolean } canReadWithoutStalling
   * @param { !mojoBase_mojom_UnguessableToken } releaseToken
   */

  onVideoFrameDecoded(
      frame,
      canReadWithoutStalling,
      releaseToken) {
    this.proxy.sendMessage(
        0,
        VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
        null,
        [
          frame,
          canReadWithoutStalling,
          releaseToken
        ]);
  }

  
  /**
   * @param { !media_stable_mojom_WaitingReason } reason
   */

  onWaiting(
      reason) {
    this.proxy.sendMessage(
        1,
        VideoDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }
}

/**
 * An object which receives request messages for the VideoDecoderClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class VideoDecoderClientReceiver {
  /**
   * @param {!VideoDecoderClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!VideoDecoderClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        VideoDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!VideoDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
        null,
        impl.onVideoFrameDecoded.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        VideoDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        impl.onWaiting.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class VideoDecoderClient {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.VideoDecoderClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!VideoDecoderClientRemote}
   */
  static getRemote() {
    let remote = new VideoDecoderClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the VideoDecoderClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class VideoDecoderClientCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      VideoDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!VideoDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onVideoFrameDecoded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
        null,
        this.onVideoFrameDecoded.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onWaiting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        VideoDecoderClient_OnWaiting_ParamsSpec.$,
        null,
        this.onWaiting.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CdmContextEventCallbackPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.CdmContextEventCallback', scope);
  }
}

/** @interface */
export class CdmContextEventCallbackInterface {
  
  /**
   * @param { !media_stable_mojom_CdmContextEvent } event
   */

  eventCallback(event) {}
}

/**
 * @implements { CdmContextEventCallbackInterface }
 */
export class CdmContextEventCallbackRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CdmContextEventCallbackPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CdmContextEventCallbackPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CdmContextEventCallbackPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media_stable_mojom_CdmContextEvent } event
   */

  eventCallback(
      event) {
    this.proxy.sendMessage(
        0,
        CdmContextEventCallback_EventCallback_ParamsSpec.$,
        null,
        [
          event
        ]);
  }
}

/**
 * An object which receives request messages for the CdmContextEventCallback
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CdmContextEventCallbackReceiver {
  /**
   * @param {!CdmContextEventCallbackInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CdmContextEventCallbackRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CdmContextEventCallbackRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CdmContextEventCallbackRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CdmContextEventCallback_EventCallback_ParamsSpec.$,
        null,
        impl.eventCallback.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CdmContextEventCallback {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.CdmContextEventCallback";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CdmContextEventCallbackRemote}
   */
  static getRemote() {
    let remote = new CdmContextEventCallbackRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CdmContextEventCallback
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CdmContextEventCallbackCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CdmContextEventCallbackRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CdmContextEventCallbackRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.eventCallback =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CdmContextEventCallback_EventCallback_ParamsSpec.$,
        null,
        this.eventCallback.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class StableCdmContextPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.StableCdmContext', scope);
  }
}

/** @interface */
export class StableCdmContextInterface {
  
  /**
   * @param { !media_stable_mojom_DecryptConfig } decryptConfig
   * @param { !Array<!number> } hwIdentifier
   * @return {!Promise<{
        status: !media_stable_mojom_DecryptStatus,
        keyData: !Array<!number>,
   *  }>}
   */

  getHwKeyData(decryptConfig, hwIdentifier) {}
  
  /**
   * @param { !CdmContextEventCallbackRemote } callback
   */

  registerEventCallback(callback) {}
  
  /**
   * @return {!Promise<{
        success: !boolean,
        configData: !Array<!number>,
   *  }>}
   */

  getHwConfigData() {}
  
  /**
   * @return {!Promise<{
        resolutions: !Array<!gfx_mojom_Size>,
   *  }>}
   */

  getScreenResolutions() {}
}

/**
 * @implements { StableCdmContextInterface }
 */
export class StableCdmContextRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!StableCdmContextPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          StableCdmContextPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!StableCdmContextPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media_stable_mojom_DecryptConfig } decryptConfig
   * @param { !Array<!number> } hwIdentifier
   * @return {!Promise<{
        status: !media_stable_mojom_DecryptStatus,
        keyData: !Array<!number>,
   *  }>}
   */

  getHwKeyData(
      decryptConfig,
      hwIdentifier) {
    return this.proxy.sendMessage(
        0,
        StableCdmContext_GetHwKeyData_ParamsSpec.$,
        StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
        [
          decryptConfig,
          hwIdentifier
        ]);
  }

  
  /**
   * @param { !CdmContextEventCallbackRemote } callback
   */

  registerEventCallback(
      callback) {
    this.proxy.sendMessage(
        1,
        StableCdmContext_RegisterEventCallback_ParamsSpec.$,
        null,
        [
          callback
        ]);
  }

  
  /**
   * @return {!Promise<{
        success: !boolean,
        configData: !Array<!number>,
   *  }>}
   */

  getHwConfigData() {
    return this.proxy.sendMessage(
        2,
        StableCdmContext_GetHwConfigData_ParamsSpec.$,
        StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        resolutions: !Array<!gfx_mojom_Size>,
   *  }>}
   */

  getScreenResolutions() {
    return this.proxy.sendMessage(
        3,
        StableCdmContext_GetScreenResolutions_ParamsSpec.$,
        StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the StableCdmContext
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class StableCdmContextReceiver {
  /**
   * @param {!StableCdmContextInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!StableCdmContextRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        StableCdmContextRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StableCdmContextRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        StableCdmContext_GetHwKeyData_ParamsSpec.$,
        StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
        impl.getHwKeyData.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        StableCdmContext_RegisterEventCallback_ParamsSpec.$,
        null,
        impl.registerEventCallback.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        StableCdmContext_GetHwConfigData_ParamsSpec.$,
        StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
        impl.getHwConfigData.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        StableCdmContext_GetScreenResolutions_ParamsSpec.$,
        StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
        impl.getScreenResolutions.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class StableCdmContext {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.StableCdmContext";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!StableCdmContextRemote}
   */
  static getRemote() {
    let remote = new StableCdmContextRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the StableCdmContext
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class StableCdmContextCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      StableCdmContextRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StableCdmContextRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getHwKeyData =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        StableCdmContext_GetHwKeyData_ParamsSpec.$,
        StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
        this.getHwKeyData.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.registerEventCallback =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        StableCdmContext_RegisterEventCallback_ParamsSpec.$,
        null,
        this.registerEventCallback.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getHwConfigData =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        StableCdmContext_GetHwConfigData_ParamsSpec.$,
        StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
        this.getHwConfigData.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getScreenResolutions =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        StableCdmContext_GetScreenResolutions_ParamsSpec.$,
        StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
        this.getScreenResolutions.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class StableVideoDecoderPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.StableVideoDecoder', scope);
  }
}

/** @interface */
export class StableVideoDecoderInterface {
  
  /**
   * @return {!Promise<{
        supportedConfigs: !Array<!media_stable_mojom_SupportedVideoDecoderConfig>,
        decoderType: !media_stable_mojom_VideoDecoderType,
   *  }>}
   */

  getSupportedConfigs() {}
  
  /**
   * @param { !Object } client
   * @param { !MediaLogRemote } mediaLog
   * @param { !VideoFrameHandleReleaserPendingReceiver } videoFrameHandleReleaser
   * @param { !MojoHandle } decoderBufferPipe
   * @param { !media_stable_mojom_ColorSpace } targetColorSpace
   */

  construct(client, mediaLog, videoFrameHandleReleaser, decoderBufferPipe, targetColorSpace) {}
  
  /**
   * @param { !media_stable_mojom_VideoDecoderConfig } config
   * @param { !boolean } lowDelay
   * @param { ?StableCdmContextRemote } cdmContext
   * @return {!Promise<{
        status: !media_stable_mojom_Status,
        needsBitstreamConversion: !boolean,
        maxDecodeRequests: !number,
        decoderType: !media_stable_mojom_VideoDecoderType,
   *  }>}
   */

  initialize(config, lowDelay, cdmContext) {}
  
  /**
   * @param { !media_stable_mojom_DecoderBuffer } buffer
   * @return {!Promise<{
        status: !media_stable_mojom_Status,
   *  }>}
   */

  decode(buffer) {}
  
  /**
   * @return {!Promise}
   */

  reset() {}
}

/**
 * @implements { StableVideoDecoderInterface }
 */
export class StableVideoDecoderRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!StableVideoDecoderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          StableVideoDecoderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!StableVideoDecoderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        supportedConfigs: !Array<!media_stable_mojom_SupportedVideoDecoderConfig>,
        decoderType: !media_stable_mojom_VideoDecoderType,
   *  }>}
   */

  getSupportedConfigs() {
    return this.proxy.sendMessage(
        0,
        StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
        StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !Object } client
   * @param { !MediaLogRemote } mediaLog
   * @param { !VideoFrameHandleReleaserPendingReceiver } videoFrameHandleReleaser
   * @param { !MojoHandle } decoderBufferPipe
   * @param { !media_stable_mojom_ColorSpace } targetColorSpace
   */

  construct(
      client,
      mediaLog,
      videoFrameHandleReleaser,
      decoderBufferPipe,
      targetColorSpace) {
    this.proxy.sendMessage(
        1,
        StableVideoDecoder_Construct_ParamsSpec.$,
        null,
        [
          client,
          mediaLog,
          videoFrameHandleReleaser,
          decoderBufferPipe,
          targetColorSpace
        ]);
  }

  
  /**
   * @param { !media_stable_mojom_VideoDecoderConfig } config
   * @param { !boolean } lowDelay
   * @param { ?StableCdmContextRemote } cdmContext
   * @return {!Promise<{
        status: !media_stable_mojom_Status,
        needsBitstreamConversion: !boolean,
        maxDecodeRequests: !number,
        decoderType: !media_stable_mojom_VideoDecoderType,
   *  }>}
   */

  initialize(
      config,
      lowDelay,
      cdmContext) {
    return this.proxy.sendMessage(
        2,
        StableVideoDecoder_Initialize_ParamsSpec.$,
        StableVideoDecoder_Initialize_ResponseParamsSpec.$,
        [
          config,
          lowDelay,
          cdmContext
        ]);
  }

  
  /**
   * @param { !media_stable_mojom_DecoderBuffer } buffer
   * @return {!Promise<{
        status: !media_stable_mojom_Status,
   *  }>}
   */

  decode(
      buffer) {
    return this.proxy.sendMessage(
        3,
        StableVideoDecoder_Decode_ParamsSpec.$,
        StableVideoDecoder_Decode_ResponseParamsSpec.$,
        [
          buffer
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  reset() {
    return this.proxy.sendMessage(
        4,
        StableVideoDecoder_Reset_ParamsSpec.$,
        StableVideoDecoder_Reset_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the StableVideoDecoder
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class StableVideoDecoderReceiver {
  /**
   * @param {!StableVideoDecoderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!StableVideoDecoderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        StableVideoDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StableVideoDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
        StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
        impl.getSupportedConfigs.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        StableVideoDecoder_Construct_ParamsSpec.$,
        null,
        impl.construct.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        StableVideoDecoder_Initialize_ParamsSpec.$,
        StableVideoDecoder_Initialize_ResponseParamsSpec.$,
        impl.initialize.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        StableVideoDecoder_Decode_ParamsSpec.$,
        StableVideoDecoder_Decode_ResponseParamsSpec.$,
        impl.decode.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        StableVideoDecoder_Reset_ParamsSpec.$,
        StableVideoDecoder_Reset_ResponseParamsSpec.$,
        impl.reset.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class StableVideoDecoder {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.StableVideoDecoder";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!StableVideoDecoderRemote}
   */
  static getRemote() {
    let remote = new StableVideoDecoderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the StableVideoDecoder
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class StableVideoDecoderCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      StableVideoDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StableVideoDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getSupportedConfigs =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
        StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
        this.getSupportedConfigs.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.construct =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        StableVideoDecoder_Construct_ParamsSpec.$,
        null,
        this.construct.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initialize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        StableVideoDecoder_Initialize_ParamsSpec.$,
        StableVideoDecoder_Initialize_ResponseParamsSpec.$,
        this.initialize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.decode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        StableVideoDecoder_Decode_ParamsSpec.$,
        StableVideoDecoder_Decode_ResponseParamsSpec.$,
        this.decode.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reset =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        StableVideoDecoder_Reset_ParamsSpec.$,
        StableVideoDecoder_Reset_ResponseParamsSpec.$,
        this.reset.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class StableVideoDecoderFactoryPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.stable.mojom.StableVideoDecoderFactory', scope);
  }
}

/** @interface */
export class StableVideoDecoderFactoryInterface {
  
  /**
   * @param { !StableVideoDecoderPendingReceiver } receiver
   */

  createStableVideoDecoder(receiver) {}
}

/**
 * @implements { StableVideoDecoderFactoryInterface }
 */
export class StableVideoDecoderFactoryRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!StableVideoDecoderFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          StableVideoDecoderFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!StableVideoDecoderFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !StableVideoDecoderPendingReceiver } receiver
   */

  createStableVideoDecoder(
      receiver) {
    this.proxy.sendMessage(
        0,
        StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }
}

/**
 * An object which receives request messages for the StableVideoDecoderFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class StableVideoDecoderFactoryReceiver {
  /**
   * @param {!StableVideoDecoderFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!StableVideoDecoderFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        StableVideoDecoderFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StableVideoDecoderFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
        null,
        impl.createStableVideoDecoder.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class StableVideoDecoderFactory {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.stable.mojom.StableVideoDecoderFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!StableVideoDecoderFactoryRemote}
   */
  static getRemote() {
    let remote = new StableVideoDecoderFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the StableVideoDecoderFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class StableVideoDecoderFactoryCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      StableVideoDecoderFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!StableVideoDecoderFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createStableVideoDecoder =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
        null,
        this.createStableVideoDecoder.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaLog_AddLogRecord_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const VideoDecoderClient_OnWaiting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CdmContextEventCallback_EventCallback_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_GetHwKeyData_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_GetHwKeyData_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_RegisterEventCallback_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_GetHwConfigData_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_GetHwConfigData_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_GetScreenResolutions_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableCdmContext_GetScreenResolutions_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_GetSupportedConfigs_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Construct_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Initialize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Initialize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Decode_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Decode_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Reset_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoder_Reset_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MediaLog_AddLogRecord_ParamsSpec.$,
    'MediaLog_AddLogRecord_Params',
    [
      mojo.internal.StructField(
        'event', 0,
        0,
        media_stable_mojom_MediaLogRecordSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaLog_AddLogRecord_Params {
  constructor() {
    /** @type { !media_stable_mojom_MediaLogRecord } */
    this.event;
  }
}



mojo.internal.Struct(
    VideoFrameHandleReleaser_ReleaseVideoFrame_ParamsSpec.$,
    'VideoFrameHandleReleaser_ReleaseVideoFrame_Params',
    [
      mojo.internal.StructField(
        'releaseToken', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class VideoFrameHandleReleaser_ReleaseVideoFrame_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.releaseToken;
  }
}



mojo.internal.Struct(
    VideoDecoderClient_OnVideoFrameDecoded_ParamsSpec.$,
    'VideoDecoderClient_OnVideoFrameDecoded_Params',
    [
      mojo.internal.StructField(
        'frame', 0,
        0,
        media_stable_mojom_VideoFrameSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'canReadWithoutStalling', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'releaseToken', 16,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class VideoDecoderClient_OnVideoFrameDecoded_Params {
  constructor() {
    /** @type { !media_stable_mojom_VideoFrame } */
    this.frame;
    /** @type { !boolean } */
    this.canReadWithoutStalling;
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.releaseToken;
  }
}



mojo.internal.Struct(
    VideoDecoderClient_OnWaiting_ParamsSpec.$,
    'VideoDecoderClient_OnWaiting_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media_stable_mojom_WaitingReasonSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class VideoDecoderClient_OnWaiting_Params {
  constructor() {
    /** @type { !media_stable_mojom_WaitingReason } */
    this.reason;
  }
}



mojo.internal.Struct(
    CdmContextEventCallback_EventCallback_ParamsSpec.$,
    'CdmContextEventCallback_EventCallback_Params',
    [
      mojo.internal.StructField(
        'event', 0,
        0,
        media_stable_mojom_CdmContextEventSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CdmContextEventCallback_EventCallback_Params {
  constructor() {
    /** @type { !media_stable_mojom_CdmContextEvent } */
    this.event;
  }
}



mojo.internal.Struct(
    StableCdmContext_GetHwKeyData_ParamsSpec.$,
    'StableCdmContext_GetHwKeyData_Params',
    [
      mojo.internal.StructField(
        'decryptConfig', 0,
        0,
        media_stable_mojom_DecryptConfigSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'hwIdentifier', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class StableCdmContext_GetHwKeyData_Params {
  constructor() {
    /** @type { !media_stable_mojom_DecryptConfig } */
    this.decryptConfig;
    /** @type { !Array<!number> } */
    this.hwIdentifier;
  }
}



mojo.internal.Struct(
    StableCdmContext_GetHwKeyData_ResponseParamsSpec.$,
    'StableCdmContext_GetHwKeyData_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media_stable_mojom_DecryptStatusSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'keyData', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class StableCdmContext_GetHwKeyData_ResponseParams {
  constructor() {
    /** @type { !media_stable_mojom_DecryptStatus } */
    this.status;
    /** @type { !Array<!number> } */
    this.keyData;
  }
}



mojo.internal.Struct(
    StableCdmContext_RegisterEventCallback_ParamsSpec.$,
    'StableCdmContext_RegisterEventCallback_Params',
    [
      mojo.internal.StructField(
        'callback', 0,
        0,
        mojo.internal.InterfaceProxy(CdmContextEventCallbackRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class StableCdmContext_RegisterEventCallback_Params {
  constructor() {
    /** @type { !CdmContextEventCallbackRemote } */
    this.callback;
  }
}



mojo.internal.Struct(
    StableCdmContext_GetHwConfigData_ParamsSpec.$,
    'StableCdmContext_GetHwConfigData_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class StableCdmContext_GetHwConfigData_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    StableCdmContext_GetHwConfigData_ResponseParamsSpec.$,
    'StableCdmContext_GetHwConfigData_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'configData', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class StableCdmContext_GetHwConfigData_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
    /** @type { !Array<!number> } */
    this.configData;
  }
}



mojo.internal.Struct(
    StableCdmContext_GetScreenResolutions_ParamsSpec.$,
    'StableCdmContext_GetScreenResolutions_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class StableCdmContext_GetScreenResolutions_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    StableCdmContext_GetScreenResolutions_ResponseParamsSpec.$,
    'StableCdmContext_GetScreenResolutions_ResponseParams',
    [
      mojo.internal.StructField(
        'resolutions', 0,
        0,
        mojo.internal.Array(gfx_mojom_SizeSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class StableCdmContext_GetScreenResolutions_ResponseParams {
  constructor() {
    /** @type { !Array<!gfx_mojom_Size> } */
    this.resolutions;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_GetSupportedConfigs_ParamsSpec.$,
    'StableVideoDecoder_GetSupportedConfigs_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class StableVideoDecoder_GetSupportedConfigs_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    StableVideoDecoder_GetSupportedConfigs_ResponseParamsSpec.$,
    'StableVideoDecoder_GetSupportedConfigs_ResponseParams',
    [
      mojo.internal.StructField(
        'supportedConfigs', 0,
        0,
        mojo.internal.Array(media_stable_mojom_SupportedVideoDecoderConfigSpec.$, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'decoderType', 8,
        0,
        media_stable_mojom_VideoDecoderTypeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class StableVideoDecoder_GetSupportedConfigs_ResponseParams {
  constructor() {
    /** @type { !Array<!media_stable_mojom_SupportedVideoDecoderConfig> } */
    this.supportedConfigs;
    /** @type { !media_stable_mojom_VideoDecoderType } */
    this.decoderType;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Construct_ParamsSpec.$,
    'StableVideoDecoder_Construct_Params',
    [
      mojo.internal.StructField(
        'client', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(VideoDecoderClientRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaLog', 8,
        0,
        mojo.internal.InterfaceProxy(MediaLogRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'videoFrameHandleReleaser', 16,
        0,
        mojo.internal.InterfaceRequest(VideoFrameHandleReleaserPendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'decoderBufferPipe', 20,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'targetColorSpace', 24,
        0,
        media_stable_mojom_ColorSpaceSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class StableVideoDecoder_Construct_Params {
  constructor() {
    /** @type { !Object } */
    this.client;
    /** @type { !MediaLogRemote } */
    this.mediaLog;
    /** @type { !VideoFrameHandleReleaserPendingReceiver } */
    this.videoFrameHandleReleaser;
    /** @type { !MojoHandle } */
    this.decoderBufferPipe;
    /** @type { !media_stable_mojom_ColorSpace } */
    this.targetColorSpace;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Initialize_ParamsSpec.$,
    'StableVideoDecoder_Initialize_Params',
    [
      mojo.internal.StructField(
        'config', 0,
        0,
        media_stable_mojom_VideoDecoderConfigSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'lowDelay', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'cdmContext', 12,
        0,
        mojo.internal.InterfaceProxy(StableCdmContextRemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class StableVideoDecoder_Initialize_Params {
  constructor() {
    /** @type { !media_stable_mojom_VideoDecoderConfig } */
    this.config;
    /** @type { !boolean } */
    this.lowDelay;
    /** @type { (StableCdmContextRemote|undefined) } */
    this.cdmContext;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Initialize_ResponseParamsSpec.$,
    'StableVideoDecoder_Initialize_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media_stable_mojom_StatusSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'needsBitstreamConversion', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'maxDecodeRequests', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'decoderType', 16,
        0,
        media_stable_mojom_VideoDecoderTypeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class StableVideoDecoder_Initialize_ResponseParams {
  constructor() {
    /** @type { !media_stable_mojom_Status } */
    this.status;
    /** @type { !boolean } */
    this.needsBitstreamConversion;
    /** @type { !number } */
    this.maxDecodeRequests;
    /** @type { !media_stable_mojom_VideoDecoderType } */
    this.decoderType;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Decode_ParamsSpec.$,
    'StableVideoDecoder_Decode_Params',
    [
      mojo.internal.StructField(
        'buffer', 0,
        0,
        media_stable_mojom_DecoderBufferSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class StableVideoDecoder_Decode_Params {
  constructor() {
    /** @type { !media_stable_mojom_DecoderBuffer } */
    this.buffer;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Decode_ResponseParamsSpec.$,
    'StableVideoDecoder_Decode_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media_stable_mojom_StatusSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class StableVideoDecoder_Decode_ResponseParams {
  constructor() {
    /** @type { !media_stable_mojom_Status } */
    this.status;
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Reset_ParamsSpec.$,
    'StableVideoDecoder_Reset_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class StableVideoDecoder_Reset_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    StableVideoDecoder_Reset_ResponseParamsSpec.$,
    'StableVideoDecoder_Reset_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class StableVideoDecoder_Reset_ResponseParams {
  constructor() {
  }
}



mojo.internal.Struct(
    StableVideoDecoderFactory_CreateStableVideoDecoder_ParamsSpec.$,
    'StableVideoDecoderFactory_CreateStableVideoDecoder_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(StableVideoDecoderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class StableVideoDecoderFactory_CreateStableVideoDecoder_Params {
  constructor() {
    /** @type { !StableVideoDecoderPendingReceiver } */
    this.receiver;
  }
}

