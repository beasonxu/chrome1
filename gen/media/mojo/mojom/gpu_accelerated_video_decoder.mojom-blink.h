// media/mojo/mojom/gpu_accelerated_video_decoder.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_BLINK_H_
#define MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "media/mojo/mojom/gpu_accelerated_video_decoder.mojom-shared.h"
#include "media/mojo/mojom/gpu_accelerated_video_decoder.mojom-blink-forward.h"
#include "media/mojo/mojom/media_types.mojom-blink-forward.h"
#include "media/mojo/mojom/video_decoder.mojom-blink-forward.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-blink.h"
#include "ui/gfx/mojom/color_space.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "mojo/public/cpp/bindings/lib/native_enum_serialization.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "third_party/blink/public/platform/web_common.h"




namespace media {
namespace mojom {
namespace blink {

class GpuAcceleratedVideoDecoderProviderProxy;

template <typename ImplRefTraits>
class GpuAcceleratedVideoDecoderProviderStub;

class GpuAcceleratedVideoDecoderProviderRequestValidator;
class GpuAcceleratedVideoDecoderProviderResponseValidator;


class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderProvider
    : public GpuAcceleratedVideoDecoderProviderInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = true;
  static constexpr bool HasSyncMethods_ = true;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = GpuAcceleratedVideoDecoderProviderInterfaceBase;
  using Proxy_ = GpuAcceleratedVideoDecoderProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = GpuAcceleratedVideoDecoderProviderStub<ImplRefTraits>;

  using RequestValidator_ = GpuAcceleratedVideoDecoderProviderRequestValidator;
  using ResponseValidator_ = GpuAcceleratedVideoDecoderProviderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kCreateAcceleratedVideoDecoderMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct CreateAcceleratedVideoDecoder_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~GpuAcceleratedVideoDecoderProvider() = default;

  // Sync method. This signature is used by the client side; the service side
  // should implement the signature with callback below.
  
  virtual bool CreateAcceleratedVideoDecoder(VideoDecodeAcceleratorConfigPtr config, ::mojo::PendingAssociatedReceiver<GpuAcceleratedVideoDecoder> receiver, ::mojo::PendingAssociatedRemote<GpuAcceleratedVideoDecoderClient> client, bool* out_success);

  using CreateAcceleratedVideoDecoderCallback = base::OnceCallback<void(bool)>;
  
  virtual void CreateAcceleratedVideoDecoder(VideoDecodeAcceleratorConfigPtr config, ::mojo::PendingAssociatedReceiver<GpuAcceleratedVideoDecoder> receiver, ::mojo::PendingAssociatedRemote<GpuAcceleratedVideoDecoderClient> client, CreateAcceleratedVideoDecoderCallback callback) = 0;
};

class GpuAcceleratedVideoDecoderProxy;

template <typename ImplRefTraits>
class GpuAcceleratedVideoDecoderStub;

class GpuAcceleratedVideoDecoderRequestValidator;
class GpuAcceleratedVideoDecoderResponseValidator;


class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoder
    : public GpuAcceleratedVideoDecoderInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = GpuAcceleratedVideoDecoderInterfaceBase;
  using Proxy_ = GpuAcceleratedVideoDecoderProxy;

  template <typename ImplRefTraits>
  using Stub_ = GpuAcceleratedVideoDecoderStub<ImplRefTraits>;

  using RequestValidator_ = GpuAcceleratedVideoDecoderRequestValidator;
  using ResponseValidator_ = GpuAcceleratedVideoDecoderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kDecodeMinVersion = 0,
    kAssignPictureBuffersMinVersion = 0,
    kReusePictureBufferMinVersion = 0,
    kFlushMinVersion = 0,
    kResetMinVersion = 0,
    kSetOverlayInfoMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Decode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AssignPictureBuffers_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ReusePictureBuffer_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Flush_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Reset_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetOverlayInfo_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~GpuAcceleratedVideoDecoder() = default;

  
  virtual void Decode(BitstreamBufferPtr buffer) = 0;

  
  virtual void AssignPictureBuffers(WTF::Vector<PictureBufferAssignmentPtr> assignments) = 0;

  
  virtual void ReusePictureBuffer(int32_t picture_buffer_id) = 0;


  using FlushCallback = base::OnceCallback<void()>;
  
  virtual void Flush(FlushCallback callback) = 0;


  using ResetCallback = base::OnceCallback<void()>;
  
  virtual void Reset(ResetCallback callback) = 0;

  
  virtual void SetOverlayInfo(::media::mojom::blink::OverlayInfoPtr overlay_info) = 0;
};

class GpuAcceleratedVideoDecoderClientProxy;

template <typename ImplRefTraits>
class GpuAcceleratedVideoDecoderClientStub;

class GpuAcceleratedVideoDecoderClientRequestValidator;


class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderClient
    : public GpuAcceleratedVideoDecoderClientInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = GpuAcceleratedVideoDecoderClientInterfaceBase;
  using Proxy_ = GpuAcceleratedVideoDecoderClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = GpuAcceleratedVideoDecoderClientStub<ImplRefTraits>;

  using RequestValidator_ = GpuAcceleratedVideoDecoderClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnInitializationCompleteMinVersion = 0,
    kOnBitstreamBufferProcessedMinVersion = 0,
    kOnProvidePictureBuffersMinVersion = 0,
    kOnPictureReadyMinVersion = 0,
    kOnDismissPictureBufferMinVersion = 0,
    kOnErrorMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnInitializationComplete_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnBitstreamBufferProcessed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnProvidePictureBuffers_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnPictureReady_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnDismissPictureBuffer_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~GpuAcceleratedVideoDecoderClient() = default;

  
  virtual void OnInitializationComplete(bool success) = 0;

  
  virtual void OnBitstreamBufferProcessed(int32_t buffer_id) = 0;

  
  virtual void OnProvidePictureBuffers(uint32_t num_frames, ::media::mojom::blink::VideoPixelFormat format, uint32_t num_textures_per_frame, const ::gfx::Size& buffer_size, uint32_t texture_target) = 0;

  
  virtual void OnPictureReady(PictureReadyParamsPtr params) = 0;

  
  virtual void OnDismissPictureBuffer(int32_t buffer_id) = 0;

  
  virtual void OnError(uint32_t error_id) = 0;
};



class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderProviderProxy
    : public GpuAcceleratedVideoDecoderProvider {
 public:
  using InterfaceType = GpuAcceleratedVideoDecoderProvider;

  explicit GpuAcceleratedVideoDecoderProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
  bool CreateAcceleratedVideoDecoder(VideoDecodeAcceleratorConfigPtr config, ::mojo::PendingAssociatedReceiver<GpuAcceleratedVideoDecoder> receiver, ::mojo::PendingAssociatedRemote<GpuAcceleratedVideoDecoderClient> client, bool* out_success) final;
  
  void CreateAcceleratedVideoDecoder(VideoDecodeAcceleratorConfigPtr config, ::mojo::PendingAssociatedReceiver<GpuAcceleratedVideoDecoder> receiver, ::mojo::PendingAssociatedRemote<GpuAcceleratedVideoDecoderClient> client, CreateAcceleratedVideoDecoderCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderProxy
    : public GpuAcceleratedVideoDecoder {
 public:
  using InterfaceType = GpuAcceleratedVideoDecoder;

  explicit GpuAcceleratedVideoDecoderProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Decode(BitstreamBufferPtr buffer) final;
  
  void AssignPictureBuffers(WTF::Vector<PictureBufferAssignmentPtr> assignments) final;
  
  void ReusePictureBuffer(int32_t picture_buffer_id) final;
  
  void Flush(FlushCallback callback) final;
  
  void Reset(ResetCallback callback) final;
  
  void SetOverlayInfo(::media::mojom::blink::OverlayInfoPtr overlay_info) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderClientProxy
    : public GpuAcceleratedVideoDecoderClient {
 public:
  using InterfaceType = GpuAcceleratedVideoDecoderClient;

  explicit GpuAcceleratedVideoDecoderClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnInitializationComplete(bool success) final;
  
  void OnBitstreamBufferProcessed(int32_t buffer_id) final;
  
  void OnProvidePictureBuffers(uint32_t num_frames, ::media::mojom::blink::VideoPixelFormat format, uint32_t num_textures_per_frame, const ::gfx::Size& buffer_size, uint32_t texture_target) final;
  
  void OnPictureReady(PictureReadyParamsPtr params) final;
  
  void OnDismissPictureBuffer(int32_t buffer_id) final;
  
  void OnError(uint32_t error_id) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderProviderStubDispatch {
 public:
  static bool Accept(GpuAcceleratedVideoDecoderProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      GpuAcceleratedVideoDecoderProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<GpuAcceleratedVideoDecoderProvider>>
class GpuAcceleratedVideoDecoderProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  GpuAcceleratedVideoDecoderProviderStub() = default;
  ~GpuAcceleratedVideoDecoderProviderStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuAcceleratedVideoDecoderProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuAcceleratedVideoDecoderProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderStubDispatch {
 public:
  static bool Accept(GpuAcceleratedVideoDecoder* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      GpuAcceleratedVideoDecoder* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<GpuAcceleratedVideoDecoder>>
class GpuAcceleratedVideoDecoderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  GpuAcceleratedVideoDecoderStub() = default;
  ~GpuAcceleratedVideoDecoderStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuAcceleratedVideoDecoderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuAcceleratedVideoDecoderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderClientStubDispatch {
 public:
  static bool Accept(GpuAcceleratedVideoDecoderClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      GpuAcceleratedVideoDecoderClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<GpuAcceleratedVideoDecoderClient>>
class GpuAcceleratedVideoDecoderClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  GpuAcceleratedVideoDecoderClientStub() = default;
  ~GpuAcceleratedVideoDecoderClientStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuAcceleratedVideoDecoderClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return GpuAcceleratedVideoDecoderClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderProviderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT GpuAcceleratedVideoDecoderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};













class BLINK_PLATFORM_EXPORT PictureBufferAssignment {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PictureBufferAssignment, T>::value>;
  using DataView = PictureBufferAssignmentDataView;
  using Data_ = internal::PictureBufferAssignment_Data;

  template <typename... Args>
  static PictureBufferAssignmentPtr New(Args&&... args) {
    return PictureBufferAssignmentPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PictureBufferAssignmentPtr From(const U& u) {
    return mojo::TypeConverter<PictureBufferAssignmentPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PictureBufferAssignment>::Convert(*this);
  }


  PictureBufferAssignment();

  PictureBufferAssignment(
      int32_t buffer_id,
      WTF::Vector<uint32_t> texture_ids);


  ~PictureBufferAssignment();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PictureBufferAssignmentPtr>
  PictureBufferAssignmentPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PictureBufferAssignment::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PictureBufferAssignment::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PictureBufferAssignment::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PictureBufferAssignment::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PictureBufferAssignment_UnserializedMessageContext<
            UserType, PictureBufferAssignment::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PictureBufferAssignment::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PictureBufferAssignment::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PictureBufferAssignment_UnserializedMessageContext<
            UserType, PictureBufferAssignment::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PictureBufferAssignment::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t buffer_id;
  
  WTF::Vector<uint32_t> texture_ids;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PictureBufferAssignment::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PictureBufferAssignment::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PictureBufferAssignment::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PictureBufferAssignment::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT PictureReadyParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<PictureReadyParams, T>::value>;
  using DataView = PictureReadyParamsDataView;
  using Data_ = internal::PictureReadyParams_Data;

  template <typename... Args>
  static PictureReadyParamsPtr New(Args&&... args) {
    return PictureReadyParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static PictureReadyParamsPtr From(const U& u) {
    return mojo::TypeConverter<PictureReadyParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, PictureReadyParams>::Convert(*this);
  }


  PictureReadyParams();

  PictureReadyParams(
      int32_t picture_buffer_id,
      int32_t bitstream_buffer_id,
      const ::gfx::Rect& visible_rect,
      const ::gfx::ColorSpace& color_space,
      bool allow_overlay,
      bool read_lock_fences_enabled,
      bool size_changed,
      bool surface_texture,
      bool wants_promotion_hint);


  ~PictureReadyParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = PictureReadyParamsPtr>
  PictureReadyParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, PictureReadyParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, PictureReadyParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        PictureReadyParams::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        PictureReadyParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::PictureReadyParams_UnserializedMessageContext<
            UserType, PictureReadyParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<PictureReadyParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return PictureReadyParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::PictureReadyParams_UnserializedMessageContext<
            UserType, PictureReadyParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<PictureReadyParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t picture_buffer_id;
  
  int32_t bitstream_buffer_id;
  
  ::gfx::Rect visible_rect;
  
  ::gfx::ColorSpace color_space;
  
  bool allow_overlay;
  
  bool read_lock_fences_enabled;
  
  bool size_changed;
  
  bool surface_texture;
  
  bool wants_promotion_hint;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, PictureReadyParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, PictureReadyParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, PictureReadyParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, PictureReadyParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
PictureBufferAssignmentPtr PictureBufferAssignment::Clone() const {
  return New(
      mojo::Clone(buffer_id),
      mojo::Clone(texture_ids)
  );
}

template <typename T, PictureBufferAssignment::EnableIfSame<T>*>
bool PictureBufferAssignment::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->buffer_id, other_struct.buffer_id))
    return false;
  if (!mojo::Equals(this->texture_ids, other_struct.texture_ids))
    return false;
  return true;
}

template <typename T, PictureBufferAssignment::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.buffer_id < rhs.buffer_id)
    return true;
  if (rhs.buffer_id < lhs.buffer_id)
    return false;
  if (lhs.texture_ids < rhs.texture_ids)
    return true;
  if (rhs.texture_ids < lhs.texture_ids)
    return false;
  return false;
}
template <typename StructPtrType>
PictureReadyParamsPtr PictureReadyParams::Clone() const {
  return New(
      mojo::Clone(picture_buffer_id),
      mojo::Clone(bitstream_buffer_id),
      mojo::Clone(visible_rect),
      mojo::Clone(color_space),
      mojo::Clone(allow_overlay),
      mojo::Clone(read_lock_fences_enabled),
      mojo::Clone(size_changed),
      mojo::Clone(surface_texture),
      mojo::Clone(wants_promotion_hint)
  );
}

template <typename T, PictureReadyParams::EnableIfSame<T>*>
bool PictureReadyParams::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->picture_buffer_id, other_struct.picture_buffer_id))
    return false;
  if (!mojo::Equals(this->bitstream_buffer_id, other_struct.bitstream_buffer_id))
    return false;
  if (!mojo::Equals(this->visible_rect, other_struct.visible_rect))
    return false;
  if (!mojo::Equals(this->color_space, other_struct.color_space))
    return false;
  if (!mojo::Equals(this->allow_overlay, other_struct.allow_overlay))
    return false;
  if (!mojo::Equals(this->read_lock_fences_enabled, other_struct.read_lock_fences_enabled))
    return false;
  if (!mojo::Equals(this->size_changed, other_struct.size_changed))
    return false;
  if (!mojo::Equals(this->surface_texture, other_struct.surface_texture))
    return false;
  if (!mojo::Equals(this->wants_promotion_hint, other_struct.wants_promotion_hint))
    return false;
  return true;
}

template <typename T, PictureReadyParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.picture_buffer_id < rhs.picture_buffer_id)
    return true;
  if (rhs.picture_buffer_id < lhs.picture_buffer_id)
    return false;
  if (lhs.bitstream_buffer_id < rhs.bitstream_buffer_id)
    return true;
  if (rhs.bitstream_buffer_id < lhs.bitstream_buffer_id)
    return false;
  if (lhs.visible_rect < rhs.visible_rect)
    return true;
  if (rhs.visible_rect < lhs.visible_rect)
    return false;
  if (lhs.color_space < rhs.color_space)
    return true;
  if (rhs.color_space < lhs.color_space)
    return false;
  if (lhs.allow_overlay < rhs.allow_overlay)
    return true;
  if (rhs.allow_overlay < lhs.allow_overlay)
    return false;
  if (lhs.read_lock_fences_enabled < rhs.read_lock_fences_enabled)
    return true;
  if (rhs.read_lock_fences_enabled < lhs.read_lock_fences_enabled)
    return false;
  if (lhs.size_changed < rhs.size_changed)
    return true;
  if (rhs.size_changed < lhs.size_changed)
    return false;
  if (lhs.surface_texture < rhs.surface_texture)
    return true;
  if (rhs.surface_texture < lhs.surface_texture)
    return false;
  if (lhs.wants_promotion_hint < rhs.wants_promotion_hint)
    return true;
  if (rhs.wants_promotion_hint < lhs.wants_promotion_hint)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace media

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media::mojom::blink::PictureBufferAssignment::DataView,
                                         ::media::mojom::blink::PictureBufferAssignmentPtr> {
  static bool IsNull(const ::media::mojom::blink::PictureBufferAssignmentPtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::PictureBufferAssignmentPtr* output) { output->reset(); }

  static decltype(::media::mojom::blink::PictureBufferAssignment::buffer_id) buffer_id(
      const ::media::mojom::blink::PictureBufferAssignmentPtr& input) {
    return input->buffer_id;
  }

  static const decltype(::media::mojom::blink::PictureBufferAssignment::texture_ids)& texture_ids(
      const ::media::mojom::blink::PictureBufferAssignmentPtr& input) {
    return input->texture_ids;
  }

  static bool Read(::media::mojom::blink::PictureBufferAssignment::DataView input, ::media::mojom::blink::PictureBufferAssignmentPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::media::mojom::blink::PictureReadyParams::DataView,
                                         ::media::mojom::blink::PictureReadyParamsPtr> {
  static bool IsNull(const ::media::mojom::blink::PictureReadyParamsPtr& input) { return !input; }
  static void SetToNull(::media::mojom::blink::PictureReadyParamsPtr* output) { output->reset(); }

  static decltype(::media::mojom::blink::PictureReadyParams::picture_buffer_id) picture_buffer_id(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->picture_buffer_id;
  }

  static decltype(::media::mojom::blink::PictureReadyParams::bitstream_buffer_id) bitstream_buffer_id(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->bitstream_buffer_id;
  }

  static const decltype(::media::mojom::blink::PictureReadyParams::visible_rect)& visible_rect(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->visible_rect;
  }

  static const decltype(::media::mojom::blink::PictureReadyParams::color_space)& color_space(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->color_space;
  }

  static decltype(::media::mojom::blink::PictureReadyParams::allow_overlay) allow_overlay(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->allow_overlay;
  }

  static decltype(::media::mojom::blink::PictureReadyParams::read_lock_fences_enabled) read_lock_fences_enabled(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->read_lock_fences_enabled;
  }

  static decltype(::media::mojom::blink::PictureReadyParams::size_changed) size_changed(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->size_changed;
  }

  static decltype(::media::mojom::blink::PictureReadyParams::surface_texture) surface_texture(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->surface_texture;
  }

  static decltype(::media::mojom::blink::PictureReadyParams::wants_promotion_hint) wants_promotion_hint(
      const ::media::mojom::blink::PictureReadyParamsPtr& input) {
    return input->wants_promotion_hint;
  }

  static bool Read(::media::mojom::blink::PictureReadyParams::DataView input, ::media::mojom::blink::PictureReadyParamsPtr* output);
};

}  // namespace mojo

#endif  // MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_BLINK_H_