// media/mojo/mojom/audio_processing.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_AUDIO_PROCESSING_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_AUDIO_PROCESSING_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  AudioProcessorControls_GetStats_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<AudioProcessorControls_GetStats_Params_Data>;

  AudioProcessorControls_GetStats_Params_Data();
  ~AudioProcessorControls_GetStats_Params_Data() = delete;
};
static_assert(sizeof(AudioProcessorControls_GetStats_Params_Data) == 8,
              "Bad sizeof(AudioProcessorControls_GetStats_Params_Data)");
class  AudioProcessorControls_GetStats_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::AudioProcessingStats_Data> stats;

 private:
  friend class mojo::internal::MessageFragment<AudioProcessorControls_GetStats_ResponseParams_Data>;

  AudioProcessorControls_GetStats_ResponseParams_Data();
  ~AudioProcessorControls_GetStats_ResponseParams_Data() = delete;
};
static_assert(sizeof(AudioProcessorControls_GetStats_ResponseParams_Data) == 16,
              "Bad sizeof(AudioProcessorControls_GetStats_ResponseParams_Data)");
class  AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t num_preferred_channels;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data>;

  AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data();
  ~AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data() = delete;
};
static_assert(sizeof(AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data) == 16,
              "Bad sizeof(AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data)");

}  // namespace internal


class AudioProcessorControls_GetStats_ParamsDataView {
 public:
  AudioProcessorControls_GetStats_ParamsDataView() = default;

  AudioProcessorControls_GetStats_ParamsDataView(
      internal::AudioProcessorControls_GetStats_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::AudioProcessorControls_GetStats_Params_Data* data_ = nullptr;
};



class AudioProcessorControls_GetStats_ResponseParamsDataView {
 public:
  AudioProcessorControls_GetStats_ResponseParamsDataView() = default;

  AudioProcessorControls_GetStats_ResponseParamsDataView(
      internal::AudioProcessorControls_GetStats_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStatsDataView(
      AudioProcessingStatsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStats(UserType* output) {
    
    auto* pointer = data_->stats.Get();
    return mojo::internal::Deserialize<::media::mojom::AudioProcessingStatsDataView>(
        pointer, output, message_);
  }
 private:
  internal::AudioProcessorControls_GetStats_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AudioProcessorControls_SetPreferredNumCaptureChannels_ParamsDataView {
 public:
  AudioProcessorControls_SetPreferredNumCaptureChannels_ParamsDataView() = default;

  AudioProcessorControls_SetPreferredNumCaptureChannels_ParamsDataView(
      internal::AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t num_preferred_channels() const {
    return data_->num_preferred_channels;
  }
 private:
  internal::AudioProcessorControls_SetPreferredNumCaptureChannels_Params_Data* data_ = nullptr;
};




inline void AudioProcessorControls_GetStats_ResponseParamsDataView::GetStatsDataView(
    AudioProcessingStatsDataView* output) {
  auto pointer = data_->stats.Get();
  *output = AudioProcessingStatsDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_AUDIO_PROCESSING_MOJOM_PARAMS_DATA_H_