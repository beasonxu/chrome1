// media/mojo/mojom/renderer_extensions.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('media.mojom.MediaStatusState');
goog.require('gfx.mojom.Size');
goog.require('mojoBase.mojom.TimeDelta');
goog.require('mojoBase.mojom.UnguessableToken');




goog.provide('media.mojom.MediaFoundationRenderingMode');
goog.provide('media.mojom.MediaFoundationRenderingModeSpec');
/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
media.mojom.MediaFoundationRenderingModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
media.mojom.MediaFoundationRenderingMode = {
  
  DirectComposition: 0,
  FrameServer: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};



goog.provide('media.mojom.MediaPlayerRendererClientExtension');
goog.provide('media.mojom.MediaPlayerRendererClientExtensionReceiver');
goog.provide('media.mojom.MediaPlayerRendererClientExtensionCallbackRouter');
goog.provide('media.mojom.MediaPlayerRendererClientExtensionInterface');
goog.provide('media.mojom.MediaPlayerRendererClientExtensionRemote');
goog.provide('media.mojom.MediaPlayerRendererClientExtensionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaPlayerRendererClientExtensionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaPlayerRendererClientExtension.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.MediaPlayerRendererClientExtensionInterface = class {
  
  /**
   * @param { !gfx.mojom.Size } size
   */

  onVideoSizeChange(size) {}
  
  /**
   * @param { !mojoBase.mojom.TimeDelta } duration
   */

  onDurationChange(duration) {}
};

/**
 * @export
 * @implements { media.mojom.MediaPlayerRendererClientExtensionInterface }
 */
media.mojom.MediaPlayerRendererClientExtensionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaPlayerRendererClientExtensionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaPlayerRendererClientExtensionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaPlayerRendererClientExtensionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !gfx.mojom.Size } size
   */

  onVideoSizeChange(
      size) {
    this.proxy.sendMessage(
        0,
        media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
        null,
        [
          size
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.TimeDelta } duration
   */

  onDurationChange(
      duration) {
    this.proxy.sendMessage(
        1,
        media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
        null,
        [
          duration
        ]);
  }
};

/**
 * An object which receives request messages for the MediaPlayerRendererClientExtension
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaPlayerRendererClientExtensionReceiver = class {
  /**
   * @param {!media.mojom.MediaPlayerRendererClientExtensionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaPlayerRendererClientExtensionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaPlayerRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
        null,
        impl.onVideoSizeChange.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
        null,
        impl.onDurationChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaPlayerRendererClientExtension = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerRendererClientExtension";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaPlayerRendererClientExtensionRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaPlayerRendererClientExtensionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaPlayerRendererClientExtension
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaPlayerRendererClientExtensionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaPlayerRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onVideoSizeChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
        null,
        this.onVideoSizeChange.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onDurationChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
        null,
        this.onDurationChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.MediaPlayerRendererExtension');
goog.provide('media.mojom.MediaPlayerRendererExtensionReceiver');
goog.provide('media.mojom.MediaPlayerRendererExtensionCallbackRouter');
goog.provide('media.mojom.MediaPlayerRendererExtensionInterface');
goog.provide('media.mojom.MediaPlayerRendererExtensionRemote');
goog.provide('media.mojom.MediaPlayerRendererExtensionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaPlayerRendererExtensionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaPlayerRendererExtension.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.MediaPlayerRendererExtensionInterface = class {
  
  /**
   * @return {!Promise<{
        requestToken: !mojoBase.mojom.UnguessableToken,
   *  }>}
   */

  initiateScopedSurfaceRequest() {}
};

/**
 * @export
 * @implements { media.mojom.MediaPlayerRendererExtensionInterface }
 */
media.mojom.MediaPlayerRendererExtensionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaPlayerRendererExtensionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaPlayerRendererExtensionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaPlayerRendererExtensionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        requestToken: !mojoBase.mojom.UnguessableToken,
   *  }>}
   */

  initiateScopedSurfaceRequest() {
    return this.proxy.sendMessage(
        0,
        media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
        media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MediaPlayerRendererExtension
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaPlayerRendererExtensionReceiver = class {
  /**
   * @param {!media.mojom.MediaPlayerRendererExtensionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaPlayerRendererExtensionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaPlayerRendererExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerRendererExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
        media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
        impl.initiateScopedSurfaceRequest.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaPlayerRendererExtension = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerRendererExtension";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaPlayerRendererExtensionRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaPlayerRendererExtensionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaPlayerRendererExtension
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaPlayerRendererExtensionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaPlayerRendererExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerRendererExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initiateScopedSurfaceRequest =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
        media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
        this.initiateScopedSurfaceRequest.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.FlingingRendererClientExtension');
goog.provide('media.mojom.FlingingRendererClientExtensionReceiver');
goog.provide('media.mojom.FlingingRendererClientExtensionCallbackRouter');
goog.provide('media.mojom.FlingingRendererClientExtensionInterface');
goog.provide('media.mojom.FlingingRendererClientExtensionRemote');
goog.provide('media.mojom.FlingingRendererClientExtensionPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.FlingingRendererClientExtensionPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.FlingingRendererClientExtension.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.FlingingRendererClientExtensionInterface = class {
  
  /**
   * @param { !media.mojom.MediaStatusState } state
   */

  onRemotePlayStateChange(state) {}
};

/**
 * @export
 * @implements { media.mojom.FlingingRendererClientExtensionInterface }
 */
media.mojom.FlingingRendererClientExtensionRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.FlingingRendererClientExtensionPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.FlingingRendererClientExtensionPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.FlingingRendererClientExtensionPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.MediaStatusState } state
   */

  onRemotePlayStateChange(
      state) {
    this.proxy.sendMessage(
        0,
        media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
        null,
        [
          state
        ]);
  }
};

/**
 * An object which receives request messages for the FlingingRendererClientExtension
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.FlingingRendererClientExtensionReceiver = class {
  /**
   * @param {!media.mojom.FlingingRendererClientExtensionInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.FlingingRendererClientExtensionRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.FlingingRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.FlingingRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
        null,
        impl.onRemotePlayStateChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.FlingingRendererClientExtension = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.FlingingRendererClientExtension";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.FlingingRendererClientExtensionRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.FlingingRendererClientExtensionRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the FlingingRendererClientExtension
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.FlingingRendererClientExtensionCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.FlingingRendererClientExtensionRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.FlingingRendererClientExtensionRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRemotePlayStateChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
        null,
        this.onRemotePlayStateChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.MediaFoundationRendererObserver');
goog.provide('media.mojom.MediaFoundationRendererObserverReceiver');
goog.provide('media.mojom.MediaFoundationRendererObserverCallbackRouter');
goog.provide('media.mojom.MediaFoundationRendererObserverInterface');
goog.provide('media.mojom.MediaFoundationRendererObserverRemote');
goog.provide('media.mojom.MediaFoundationRendererObserverPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaFoundationRendererObserverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaFoundationRendererObserver.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.MediaFoundationRendererObserverInterface = class {
};

/**
 * @export
 * @implements { media.mojom.MediaFoundationRendererObserverInterface }
 */
media.mojom.MediaFoundationRendererObserverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaFoundationRendererObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaFoundationRendererObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaFoundationRendererObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }
};

/**
 * An object which receives request messages for the MediaFoundationRendererObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaFoundationRendererObserverReceiver = class {
  /**
   * @param {!media.mojom.MediaFoundationRendererObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaFoundationRendererObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaFoundationRendererObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaFoundationRendererObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaFoundationRendererObserver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaFoundationRendererObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaFoundationRendererObserverRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaFoundationRendererObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaFoundationRendererObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaFoundationRendererObserverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaFoundationRendererObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaFoundationRendererObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.MediaFoundationRendererNotifier');
goog.provide('media.mojom.MediaFoundationRendererNotifierReceiver');
goog.provide('media.mojom.MediaFoundationRendererNotifierCallbackRouter');
goog.provide('media.mojom.MediaFoundationRendererNotifierInterface');
goog.provide('media.mojom.MediaFoundationRendererNotifierRemote');
goog.provide('media.mojom.MediaFoundationRendererNotifierPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaFoundationRendererNotifierPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaFoundationRendererNotifier.$interfaceName,
        scope);
  }
};

/** @interface */
media.mojom.MediaFoundationRendererNotifierInterface = class {
  
  /**
   * @param { !media.mojom.MediaFoundationRendererObserverPendingReceiver } observer
   */

  mediaFoundationRendererCreated(observer) {}
};

/**
 * @export
 * @implements { media.mojom.MediaFoundationRendererNotifierInterface }
 */
media.mojom.MediaFoundationRendererNotifierRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaFoundationRendererNotifierPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaFoundationRendererNotifierPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaFoundationRendererNotifierPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.MediaFoundationRendererObserverPendingReceiver } observer
   */

  mediaFoundationRendererCreated(
      observer) {
    this.proxy.sendMessage(
        0,
        media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
        null,
        [
          observer
        ]);
  }
};

/**
 * An object which receives request messages for the MediaFoundationRendererNotifier
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaFoundationRendererNotifierReceiver = class {
  /**
   * @param {!media.mojom.MediaFoundationRendererNotifierInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaFoundationRendererNotifierRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaFoundationRendererNotifierRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaFoundationRendererNotifierRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
        null,
        impl.mediaFoundationRendererCreated.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaFoundationRendererNotifier = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaFoundationRendererNotifier";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaFoundationRendererNotifierRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaFoundationRendererNotifierRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaFoundationRendererNotifier
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaFoundationRendererNotifierCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaFoundationRendererNotifierRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaFoundationRendererNotifierRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.mediaFoundationRendererCreated =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
        null,
        this.mediaFoundationRendererCreated.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_ParamsSpec.$,
    'MediaPlayerRendererClientExtension_OnVideoSizeChange_Params',
    [
      mojo.internal.StructField(
        'size', 0,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_Params');

/** @record */
media.mojom.MediaPlayerRendererClientExtension_OnVideoSizeChange_Params = class {
  constructor() {
    /** @export { !gfx.mojom.Size } */
    this.size;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_ParamsSpec.$,
    'MediaPlayerRendererClientExtension_OnDurationChange_Params',
    [
      mojo.internal.StructField(
        'duration', 0,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_Params');

/** @record */
media.mojom.MediaPlayerRendererClientExtension_OnDurationChange_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.duration;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ParamsSpec.$,
    'MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params',
    [
    ],
    [[0, 8],]);



goog.provide('media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params');

/** @record */
media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParamsSpec.$,
    'MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams',
    [
      mojo.internal.StructField(
        'requestToken', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams');

/** @record */
media.mojom.MediaPlayerRendererExtension_InitiateScopedSurfaceRequest_ResponseParams = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.requestToken;
  }
};




mojo.internal.Struct(
    media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_ParamsSpec.$,
    'FlingingRendererClientExtension_OnRemotePlayStateChange_Params',
    [
      mojo.internal.StructField(
        'state', 0,
        0,
        media.mojom.MediaStatusStateSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_Params');

/** @record */
media.mojom.FlingingRendererClientExtension_OnRemotePlayStateChange_Params = class {
  constructor() {
    /** @export { !media.mojom.MediaStatusState } */
    this.state;
  }
};




mojo.internal.Struct(
    media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_ParamsSpec.$,
    'MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params',
    [
      mojo.internal.StructField(
        'observer', 0,
        0,
        mojo.internal.InterfaceRequest(media.mojom.MediaFoundationRendererObserverPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params');

/** @record */
media.mojom.MediaFoundationRendererNotifier_MediaFoundationRendererCreated_Params = class {
  constructor() {
    /** @export { !media.mojom.MediaFoundationRendererObserverPendingReceiver } */
    this.observer;
  }
};


