// media/mojo/mojom/audio_input_stream.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "media/mojo/mojom/audio_input_stream.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/mojo/mojom/audio_input_stream.mojom-params-data.h"
#include "media/mojo/mojom/audio_input_stream.mojom-shared-message-ids.h"

#include "media/mojo/mojom/audio_input_stream.mojom-blink-import-headers.h"
#include "media/mojo/mojom/audio_input_stream.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef MEDIA_MOJO_MOJOM_AUDIO_INPUT_STREAM_MOJOM_BLINK_JUMBO_H_
#define MEDIA_MOJO_MOJOM_AUDIO_INPUT_STREAM_MOJOM_BLINK_JUMBO_H_
#endif



namespace media {
namespace mojom {
namespace blink {
const char AudioInputStream::Name_[] = "media.mojom.AudioInputStream";

AudioInputStream::IPCStableHashFunction AudioInputStream::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAudioInputStream_Record_Name: {
      return &AudioInputStream::Record_Sym::IPCStableHash;
    }
    case internal::kAudioInputStream_SetVolume_Name: {
      return &AudioInputStream::SetVolume_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AudioInputStream::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAudioInputStream_Record_Name:
            return "Receive media::mojom::AudioInputStream::Record";
      case internal::kAudioInputStream_SetVolume_Name:
            return "Receive media::mojom::AudioInputStream::SetVolume";
    }
  } else {
    switch (message.name()) {
      case internal::kAudioInputStream_Record_Name:
            return "Receive reply media::mojom::AudioInputStream::Record";
      case internal::kAudioInputStream_SetVolume_Name:
            return "Receive reply media::mojom::AudioInputStream::SetVolume";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AudioInputStream::Record_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AudioInputStream::Record");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AudioInputStream::SetVolume_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AudioInputStream::SetVolume");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AudioInputStreamProxy::AudioInputStreamProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AudioInputStreamProxy::Record(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media::mojom::AudioInputStream::Record");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioInputStream_Record_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AudioInputStream_Record_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioInputStream::Name_);
  message.set_method_name("Record");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AudioInputStreamProxy::SetVolume(
    double in_volume) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AudioInputStream::SetVolume", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("volume"), in_volume,
                        "<value of type double>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioInputStream_SetVolume_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AudioInputStream_SetVolume_Params_Data> params(
          message);
  params.Allocate();
  params->volume = in_volume;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioInputStream::Name_);
  message.set_method_name("SetVolume");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AudioInputStreamStubDispatch::Accept(
    AudioInputStream* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAudioInputStream_Record_Name: {

      DCHECK(message->is_serialized());
      internal::AudioInputStream_Record_Params_Data* params =
          reinterpret_cast<internal::AudioInputStream_Record_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AudioInputStream_Record_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioInputStream::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Record();
      return true;
    }
    case internal::kAudioInputStream_SetVolume_Name: {

      DCHECK(message->is_serialized());
      internal::AudioInputStream_SetVolume_Params_Data* params =
          reinterpret_cast<internal::AudioInputStream_SetVolume_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      double p_volume{};
      AudioInputStream_SetVolume_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_volume = input_data_view.volume();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioInputStream::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetVolume(
std::move(p_volume));
      return true;
    }
  }
  return false;
}

// static
bool AudioInputStreamStubDispatch::AcceptWithResponder(
    AudioInputStream* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAudioInputStream_Record_Name: {
      break;
    }
    case internal::kAudioInputStream_SetVolume_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAudioInputStreamValidationInfo[] = {
    {&internal::AudioInputStream_Record_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AudioInputStream_SetVolume_Params_Data::Validate,
     nullptr /* no response */},
};

bool AudioInputStreamRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::blink::AudioInputStream::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAudioInputStreamValidationInfo);
}

const char AudioInputStreamClient::Name_[] = "media.mojom.AudioInputStreamClient";

AudioInputStreamClient::IPCStableHashFunction AudioInputStreamClient::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAudioInputStreamClient_OnError_Name: {
      return &AudioInputStreamClient::OnError_Sym::IPCStableHash;
    }
    case internal::kAudioInputStreamClient_OnMutedStateChanged_Name: {
      return &AudioInputStreamClient::OnMutedStateChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AudioInputStreamClient::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAudioInputStreamClient_OnError_Name:
            return "Receive media::mojom::AudioInputStreamClient::OnError";
      case internal::kAudioInputStreamClient_OnMutedStateChanged_Name:
            return "Receive media::mojom::AudioInputStreamClient::OnMutedStateChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kAudioInputStreamClient_OnError_Name:
            return "Receive reply media::mojom::AudioInputStreamClient::OnError";
      case internal::kAudioInputStreamClient_OnMutedStateChanged_Name:
            return "Receive reply media::mojom::AudioInputStreamClient::OnMutedStateChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AudioInputStreamClient::OnError_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AudioInputStreamClient::OnError");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t AudioInputStreamClient::OnMutedStateChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AudioInputStreamClient::OnMutedStateChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AudioInputStreamClientProxy::AudioInputStreamClientProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AudioInputStreamClientProxy::OnError(
    ::media::mojom::blink::InputStreamErrorCode in_code) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AudioInputStreamClient::OnError", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("code"), in_code,
                        "<value of type ::media::mojom::blink::InputStreamErrorCode>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioInputStreamClient_OnError_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AudioInputStreamClient_OnError_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::media::mojom::InputStreamErrorCode>(
      in_code, &params->code);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioInputStreamClient::Name_);
  message.set_method_name("OnError");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void AudioInputStreamClientProxy::OnMutedStateChanged(
    bool in_is_muted) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::AudioInputStreamClient::OnMutedStateChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_muted"), in_is_muted,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioInputStreamClient_OnMutedStateChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AudioInputStreamClient_OnMutedStateChanged_Params_Data> params(
          message);
  params.Allocate();
  params->is_muted = in_is_muted;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioInputStreamClient::Name_);
  message.set_method_name("OnMutedStateChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AudioInputStreamClientStubDispatch::Accept(
    AudioInputStreamClient* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAudioInputStreamClient_OnError_Name: {

      DCHECK(message->is_serialized());
      internal::AudioInputStreamClient_OnError_Params_Data* params =
          reinterpret_cast<internal::AudioInputStreamClient_OnError_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::media::mojom::blink::InputStreamErrorCode p_code{};
      AudioInputStreamClient_OnError_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCode(&p_code))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioInputStreamClient::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnError(
std::move(p_code));
      return true;
    }
    case internal::kAudioInputStreamClient_OnMutedStateChanged_Name: {

      DCHECK(message->is_serialized());
      internal::AudioInputStreamClient_OnMutedStateChanged_Params_Data* params =
          reinterpret_cast<internal::AudioInputStreamClient_OnMutedStateChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      bool p_is_muted{};
      AudioInputStreamClient_OnMutedStateChanged_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_is_muted = input_data_view.is_muted();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioInputStreamClient::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnMutedStateChanged(
std::move(p_is_muted));
      return true;
    }
  }
  return false;
}

// static
bool AudioInputStreamClientStubDispatch::AcceptWithResponder(
    AudioInputStreamClient* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAudioInputStreamClient_OnError_Name: {
      break;
    }
    case internal::kAudioInputStreamClient_OnMutedStateChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAudioInputStreamClientValidationInfo[] = {
    {&internal::AudioInputStreamClient_OnError_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::AudioInputStreamClient_OnMutedStateChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool AudioInputStreamClientRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::blink::AudioInputStreamClient::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAudioInputStreamClientValidationInfo);
}

const char AudioInputStreamObserver::Name_[] = "media.mojom.AudioInputStreamObserver";

AudioInputStreamObserver::IPCStableHashFunction AudioInputStreamObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kAudioInputStreamObserver_DidStartRecording_Name: {
      return &AudioInputStreamObserver::DidStartRecording_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* AudioInputStreamObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kAudioInputStreamObserver_DidStartRecording_Name:
            return "Receive media::mojom::AudioInputStreamObserver::DidStartRecording";
    }
  } else {
    switch (message.name()) {
      case internal::kAudioInputStreamObserver_DidStartRecording_Name:
            return "Receive reply media::mojom::AudioInputStreamObserver::DidStartRecording";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t AudioInputStreamObserver::DidStartRecording_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::AudioInputStreamObserver::DidStartRecording");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

AudioInputStreamObserverProxy::AudioInputStreamObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void AudioInputStreamObserverProxy::DidStartRecording(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send media::mojom::AudioInputStreamObserver::DidStartRecording");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kAudioInputStreamObserver_DidStartRecording_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::AudioInputStreamObserver_DidStartRecording_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(AudioInputStreamObserver::Name_);
  message.set_method_name("DidStartRecording");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool AudioInputStreamObserverStubDispatch::Accept(
    AudioInputStreamObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kAudioInputStreamObserver_DidStartRecording_Name: {

      DCHECK(message->is_serialized());
      internal::AudioInputStreamObserver_DidStartRecording_Params_Data* params =
          reinterpret_cast<internal::AudioInputStreamObserver_DidStartRecording_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      AudioInputStreamObserver_DidStartRecording_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            AudioInputStreamObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DidStartRecording();
      return true;
    }
  }
  return false;
}

// static
bool AudioInputStreamObserverStubDispatch::AcceptWithResponder(
    AudioInputStreamObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kAudioInputStreamObserver_DidStartRecording_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kAudioInputStreamObserverValidationInfo[] = {
    {&internal::AudioInputStreamObserver_DidStartRecording_Params_Data::Validate,
     nullptr /* no response */},
};

bool AudioInputStreamObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::blink::AudioInputStreamObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kAudioInputStreamObserverValidationInfo);
}



}  // namespace blink
}  // namespace mojom
}  // namespace media


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media {
namespace mojom {
namespace blink {


void AudioInputStreamInterceptorForTesting::Record() {
  GetForwardingInterface()->Record();
}
void AudioInputStreamInterceptorForTesting::SetVolume(double volume) {
  GetForwardingInterface()->SetVolume(std::move(volume));
}
AudioInputStreamAsyncWaiter::AudioInputStreamAsyncWaiter(
    AudioInputStream* proxy) : proxy_(proxy) {}

AudioInputStreamAsyncWaiter::~AudioInputStreamAsyncWaiter() = default;




void AudioInputStreamClientInterceptorForTesting::OnError(::media::mojom::blink::InputStreamErrorCode code) {
  GetForwardingInterface()->OnError(std::move(code));
}
void AudioInputStreamClientInterceptorForTesting::OnMutedStateChanged(bool is_muted) {
  GetForwardingInterface()->OnMutedStateChanged(std::move(is_muted));
}
AudioInputStreamClientAsyncWaiter::AudioInputStreamClientAsyncWaiter(
    AudioInputStreamClient* proxy) : proxy_(proxy) {}

AudioInputStreamClientAsyncWaiter::~AudioInputStreamClientAsyncWaiter() = default;




void AudioInputStreamObserverInterceptorForTesting::DidStartRecording() {
  GetForwardingInterface()->DidStartRecording();
}
AudioInputStreamObserverAsyncWaiter::AudioInputStreamObserverAsyncWaiter(
    AudioInputStreamObserver* proxy) : proxy_(proxy) {}

AudioInputStreamObserverAsyncWaiter::~AudioInputStreamObserverAsyncWaiter() = default;






}  // namespace blink
}  // namespace mojom
}  // namespace media


#if defined(__clang__)
#pragma clang diagnostic pop
#endif