// media/mojo/mojom/video_encode_accelerator.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('media.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
media.mojom.VideoEncodeAcceleratorSupportedRateControlModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
media.mojom.VideoEncodeAcceleratorSupportedRateControlMode = {
  
  kNoMode: 0,
  kConstantMode: 1,
  kVariableMode: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.VideoEncodeAcceleratorProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.VideoEncodeAcceleratorProvider.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.VideoEncodeAcceleratorProviderInterface }
 */
media.mojom.VideoEncodeAcceleratorProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.VideoEncodeAcceleratorProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.VideoEncodeAcceleratorProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.VideoEncodeAcceleratorProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.VideoEncodeAcceleratorPendingReceiver } receiver
   */

  createVideoEncodeAccelerator(
      receiver) {
    this.proxy.sendMessage(
        0,
        media.mojom.VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @return {!Promise<{
        profiles: !Array<!media.mojom.VideoEncodeAcceleratorSupportedProfile>,
   *  }>}
   */

  getVideoEncodeAcceleratorSupportedProfiles() {
    return this.proxy.sendMessage(
        1,
        media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ParamsSpec.$,
        media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the VideoEncodeAcceleratorProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.VideoEncodeAcceleratorProviderReceiver = class {
  /**
   * @param {!media.mojom.VideoEncodeAcceleratorProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.VideoEncodeAcceleratorProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.VideoEncodeAcceleratorProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.VideoEncodeAcceleratorProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_ParamsSpec.$,
        null,
        impl.createVideoEncodeAccelerator.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ParamsSpec.$,
        media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParamsSpec.$,
        impl.getVideoEncodeAcceleratorSupportedProfiles.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.VideoEncodeAcceleratorProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.VideoEncodeAcceleratorProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.VideoEncodeAcceleratorProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.VideoEncodeAcceleratorProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the VideoEncodeAcceleratorProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.VideoEncodeAcceleratorProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.VideoEncodeAcceleratorProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.VideoEncodeAcceleratorProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createVideoEncodeAccelerator =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_ParamsSpec.$,
        null,
        this.createVideoEncodeAccelerator.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getVideoEncodeAcceleratorSupportedProfiles =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ParamsSpec.$,
        media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParamsSpec.$,
        this.getVideoEncodeAcceleratorSupportedProfiles.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.VideoEncodeAcceleratorPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.VideoEncodeAccelerator.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.VideoEncodeAcceleratorInterface }
 */
media.mojom.VideoEncodeAcceleratorRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.VideoEncodeAcceleratorPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.VideoEncodeAcceleratorPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.VideoEncodeAcceleratorPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.VideoEncodeAcceleratorConfig } config
   * @param { !Object } client
   * @param { !media.mojom.MediaLogRemote } mediaLog
   * @return {!Promise<{
        result: !boolean,
   *  }>}
   */

  initialize(
      config,
      client,
      mediaLog) {
    return this.proxy.sendMessage(
        0,
        media.mojom.VideoEncodeAccelerator_Initialize_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Initialize_ResponseParamsSpec.$,
        [
          config,
          client,
          mediaLog
        ]);
  }

  
  /**
   * @param { !media.mojom.VideoFrame } frame
   * @param { !boolean } forceKeyframe
   * @return {!Promise}
   */

  encode(
      frame,
      forceKeyframe) {
    return this.proxy.sendMessage(
        1,
        media.mojom.VideoEncodeAccelerator_Encode_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Encode_ResponseParamsSpec.$,
        [
          frame,
          forceKeyframe
        ]);
  }

  
  /**
   * @param { !number } bitstreamBufferId
   * @param { !mojoBase.mojom.UnsafeSharedMemoryRegion } region
   */

  useOutputBitstreamBuffer(
      bitstreamBufferId,
      region) {
    this.proxy.sendMessage(
        2,
        media.mojom.VideoEncodeAccelerator_UseOutputBitstreamBuffer_ParamsSpec.$,
        null,
        [
          bitstreamBufferId,
          region
        ]);
  }

  
  /**
   * @param { !media.mojom.VideoBitrateAllocation } bitrateAllocation
   * @param { !number } framerate
   */

  requestEncodingParametersChangeWithLayers(
      bitrateAllocation,
      framerate) {
    this.proxy.sendMessage(
        3,
        media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_ParamsSpec.$,
        null,
        [
          bitrateAllocation,
          framerate
        ]);
  }

  
  /**
   * @param { !media.mojom.Bitrate } bitrate
   * @param { !number } framerate
   */

  requestEncodingParametersChangeWithBitrate(
      bitrate,
      framerate) {
    this.proxy.sendMessage(
        4,
        media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_ParamsSpec.$,
        null,
        [
          bitrate,
          framerate
        ]);
  }

  
  /**
   * @return {!Promise<{
        result: !boolean,
   *  }>}
   */

  isFlushSupported() {
    return this.proxy.sendMessage(
        5,
        media.mojom.VideoEncodeAccelerator_IsFlushSupported_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_IsFlushSupported_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise<{
        result: !boolean,
   *  }>}
   */

  flush() {
    return this.proxy.sendMessage(
        6,
        media.mojom.VideoEncodeAccelerator_Flush_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Flush_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the VideoEncodeAccelerator
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.VideoEncodeAcceleratorReceiver = class {
  /**
   * @param {!media.mojom.VideoEncodeAcceleratorInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.VideoEncodeAcceleratorRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.VideoEncodeAcceleratorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.VideoEncodeAcceleratorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.VideoEncodeAccelerator_Initialize_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Initialize_ResponseParamsSpec.$,
        impl.initialize.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.VideoEncodeAccelerator_Encode_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Encode_ResponseParamsSpec.$,
        impl.encode.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.VideoEncodeAccelerator_UseOutputBitstreamBuffer_ParamsSpec.$,
        null,
        impl.useOutputBitstreamBuffer.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_ParamsSpec.$,
        null,
        impl.requestEncodingParametersChangeWithLayers.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_ParamsSpec.$,
        null,
        impl.requestEncodingParametersChangeWithBitrate.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        media.mojom.VideoEncodeAccelerator_IsFlushSupported_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_IsFlushSupported_ResponseParamsSpec.$,
        impl.isFlushSupported.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        media.mojom.VideoEncodeAccelerator_Flush_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Flush_ResponseParamsSpec.$,
        impl.flush.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.VideoEncodeAccelerator = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.VideoEncodeAccelerator";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.VideoEncodeAcceleratorRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.VideoEncodeAcceleratorRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
media.mojom.VideoEncodeAccelerator.ErrorSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Error = {
  
  ILLEGAL_STATE: 0,
  INVALID_ARGUMENT: 1,
  PLATFORM_FAILURE: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};

/**
 * An object which receives request messages for the VideoEncodeAccelerator
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.VideoEncodeAcceleratorCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.VideoEncodeAcceleratorRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.VideoEncodeAcceleratorRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initialize =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.VideoEncodeAccelerator_Initialize_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Initialize_ResponseParamsSpec.$,
        this.initialize.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.encode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.VideoEncodeAccelerator_Encode_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Encode_ResponseParamsSpec.$,
        this.encode.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.useOutputBitstreamBuffer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.VideoEncodeAccelerator_UseOutputBitstreamBuffer_ParamsSpec.$,
        null,
        this.useOutputBitstreamBuffer.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestEncodingParametersChangeWithLayers =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_ParamsSpec.$,
        null,
        this.requestEncodingParametersChangeWithLayers.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestEncodingParametersChangeWithBitrate =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_ParamsSpec.$,
        null,
        this.requestEncodingParametersChangeWithBitrate.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.isFlushSupported =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        media.mojom.VideoEncodeAccelerator_IsFlushSupported_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_IsFlushSupported_ResponseParamsSpec.$,
        this.isFlushSupported.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.flush =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        media.mojom.VideoEncodeAccelerator_Flush_ParamsSpec.$,
        media.mojom.VideoEncodeAccelerator_Flush_ResponseParamsSpec.$,
        this.flush.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.VideoEncodeAcceleratorClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.VideoEncodeAcceleratorClient.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.VideoEncodeAcceleratorClientInterface }
 */
media.mojom.VideoEncodeAcceleratorClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.VideoEncodeAcceleratorClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.VideoEncodeAcceleratorClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.VideoEncodeAcceleratorClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } inputCount
   * @param { !gfx.mojom.Size } inputCodedSize
   * @param { !number } outputBufferSize
   */

  requireBitstreamBuffers(
      inputCount,
      inputCodedSize,
      outputBufferSize) {
    this.proxy.sendMessage(
        0,
        media.mojom.VideoEncodeAcceleratorClient_RequireBitstreamBuffers_ParamsSpec.$,
        null,
        [
          inputCount,
          inputCodedSize,
          outputBufferSize
        ]);
  }

  
  /**
   * @param { !number } bitstreamBufferId
   * @param { !media.mojom.BitstreamBufferMetadata } metadata
   */

  bitstreamBufferReady(
      bitstreamBufferId,
      metadata) {
    this.proxy.sendMessage(
        1,
        media.mojom.VideoEncodeAcceleratorClient_BitstreamBufferReady_ParamsSpec.$,
        null,
        [
          bitstreamBufferId,
          metadata
        ]);
  }

  
  /**
   * @param { !media.mojom.VideoEncodeAccelerator_Error } error
   */

  notifyError(
      error) {
    this.proxy.sendMessage(
        2,
        media.mojom.VideoEncodeAcceleratorClient_NotifyError_ParamsSpec.$,
        null,
        [
          error
        ]);
  }

  
  /**
   * @param { !media.mojom.VideoEncoderInfo } info
   */

  notifyEncoderInfoChange(
      info) {
    this.proxy.sendMessage(
        3,
        media.mojom.VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_ParamsSpec.$,
        null,
        [
          info
        ]);
  }
};

/**
 * An object which receives request messages for the VideoEncodeAcceleratorClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.VideoEncodeAcceleratorClientReceiver = class {
  /**
   * @param {!media.mojom.VideoEncodeAcceleratorClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.VideoEncodeAcceleratorClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.VideoEncodeAcceleratorClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.VideoEncodeAcceleratorClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.VideoEncodeAcceleratorClient_RequireBitstreamBuffers_ParamsSpec.$,
        null,
        impl.requireBitstreamBuffers.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.VideoEncodeAcceleratorClient_BitstreamBufferReady_ParamsSpec.$,
        null,
        impl.bitstreamBufferReady.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.VideoEncodeAcceleratorClient_NotifyError_ParamsSpec.$,
        null,
        impl.notifyError.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_ParamsSpec.$,
        null,
        impl.notifyEncoderInfoChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.VideoEncodeAcceleratorClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.VideoEncodeAcceleratorClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.VideoEncodeAcceleratorClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.VideoEncodeAcceleratorClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the VideoEncodeAcceleratorClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.VideoEncodeAcceleratorClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.VideoEncodeAcceleratorClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.VideoEncodeAcceleratorClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requireBitstreamBuffers =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.VideoEncodeAcceleratorClient_RequireBitstreamBuffers_ParamsSpec.$,
        null,
        this.requireBitstreamBuffers.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.bitstreamBufferReady =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.VideoEncodeAcceleratorClient_BitstreamBufferReady_ParamsSpec.$,
        null,
        this.bitstreamBufferReady.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.notifyError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.VideoEncodeAcceleratorClient_NotifyError_ParamsSpec.$,
        null,
        this.notifyError.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.notifyEncoderInfoChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_ParamsSpec.$,
        null,
        this.notifyEncoderInfoChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorSupportedProfileSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VariableBitratePeakSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoBitrateAllocationSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.SpatialLayerSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.ConstantBitrateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VariableBitrateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfigSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.H264MetadataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Vp8MetadataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Vp9MetadataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.Av1MetadataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.BitstreamBufferMetadataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Initialize_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Initialize_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Encode_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Encode_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_UseOutputBitstreamBuffer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_IsFlushSupported_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_IsFlushSupported_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Flush_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAccelerator_Flush_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorClient_RequireBitstreamBuffers_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorClient_BitstreamBufferReady_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorClient_NotifyError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
media.mojom.BitrateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
media.mojom.CodecMetadataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorSupportedProfileSpec.$,
    'VideoEncodeAcceleratorSupportedProfile',
    [
      mojo.internal.StructField(
        'profile', 0,
        0,
        media.mojom.VideoCodecProfileSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'minResolution', 8,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'maxResolution', 16,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'maxFramerateNumerator', 4,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'maxFramerateDenominator', 24,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'rateControlModes', 32,
        0,
        mojo.internal.Array(media.mojom.VideoEncodeAcceleratorSupportedRateControlModeSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'scalabilityModes', 40,
        0,
        mojo.internal.Array(media.mojom.SVCScalabilityModeSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 56],]);





/** @record */
media.mojom.VideoEncodeAcceleratorSupportedProfile = class {
  constructor() {
    /** @export { !media.mojom.VideoCodecProfile } */
    this.profile;
    /** @export { !number } */
    this.maxFramerateNumerator;
    /** @export { !gfx.mojom.Size } */
    this.minResolution;
    /** @export { !gfx.mojom.Size } */
    this.maxResolution;
    /** @export { !number } */
    this.maxFramerateDenominator;
    /** @export { !Array<!media.mojom.VideoEncodeAcceleratorSupportedRateControlMode> } */
    this.rateControlModes;
    /** @export { !Array<!media.mojom.SVCScalabilityMode> } */
    this.scalabilityModes;
  }
};




mojo.internal.Struct(
    media.mojom.VariableBitratePeakSpec.$,
    'VariableBitratePeak',
    [
      mojo.internal.StructField(
        'bps', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VariableBitratePeak = class {
  constructor() {
    /** @export { !number } */
    this.bps;
  }
};




mojo.internal.Struct(
    media.mojom.VideoBitrateAllocationSpec.$,
    'VideoBitrateAllocation',
    [
      mojo.internal.StructField(
        'bitrates', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint32, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'variableBitratePeak', 8,
        0,
        media.mojom.VariableBitratePeakSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.VideoBitrateAllocation = class {
  constructor() {
    /** @export { !Array<!number> } */
    this.bitrates;
    /** @export { (media.mojom.VariableBitratePeak|undefined) } */
    this.variableBitratePeak;
  }
};




mojo.internal.Struct(
    media.mojom.SpatialLayerSpec.$,
    'SpatialLayer',
    [
      mojo.internal.StructField(
        'width', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'height', 4,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'bitrateBps', 8,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'framerate', 12,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'maxQp', 16,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'numOfTemporalLayers', 17,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.SpatialLayer = class {
  constructor() {
    /** @export { !number } */
    this.width;
    /** @export { !number } */
    this.height;
    /** @export { !number } */
    this.bitrateBps;
    /** @export { !number } */
    this.framerate;
    /** @export { !number } */
    this.maxQp;
    /** @export { !number } */
    this.numOfTemporalLayers;
  }
};




mojo.internal.Struct(
    media.mojom.ConstantBitrateSpec.$,
    'ConstantBitrate',
    [
      mojo.internal.StructField(
        'targetBps', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.ConstantBitrate = class {
  constructor() {
    /** @export { !number } */
    this.targetBps;
  }
};




mojo.internal.Struct(
    media.mojom.VariableBitrateSpec.$,
    'VariableBitrate',
    [
      mojo.internal.StructField(
        'targetBps', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'peakBps', 4,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VariableBitrate = class {
  constructor() {
    /** @export { !number } */
    this.targetBps;
    /** @export { !number } */
    this.peakBps;
  }
};




/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfigSpec.ContentTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfig_ContentType = {
  
  kCamera: 0,
  kDisplay: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfigSpec.InterLayerPredModeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfig_InterLayerPredMode = {
  
  kOff: 0,
  kOn: 1,
  kOnKeyPic: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfigSpec.StorageTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
media.mojom.VideoEncodeAcceleratorConfig_StorageType = {
  
  kShmem: 0,
  kGpuMemoryBuffer: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorConfigSpec.$,
    'VideoEncodeAcceleratorConfig',
    [
      mojo.internal.StructField(
        'inputFormat', 0,
        0,
        media.mojom.VideoPixelFormatSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'inputVisibleSize', 8,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'outputProfile', 4,
        0,
        media.mojom.VideoCodecProfileSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'bitrate', 16,
        0,
        media.mojom.BitrateSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'initialFramerate', 32,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'hasInitialFramerate', 36,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'gopLength', 40,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'hasGopLength', 36,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'h264OutputLevel', 37,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'hasH264OutputLevel', 36,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isConstrainedH264', 36,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'storageType', 44,
        0,
        media.mojom.VideoEncodeAcceleratorConfigSpec.StorageTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'hasStorageType', 36,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'contentType', 48,
        0,
        media.mojom.VideoEncodeAcceleratorConfigSpec.ContentTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'spatialLayers', 56,
        0,
        mojo.internal.Array(media.mojom.SpatialLayerSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'interLayerPred', 52,
        0,
        media.mojom.VideoEncodeAcceleratorConfigSpec.InterLayerPredModeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'requireLowDelay', 36,
        5,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 72],]);





/** @record */
media.mojom.VideoEncodeAcceleratorConfig = class {
  constructor() {
    /** @export { !media.mojom.VideoPixelFormat } */
    this.inputFormat;
    /** @export { !media.mojom.VideoCodecProfile } */
    this.outputProfile;
    /** @export { !gfx.mojom.Size } */
    this.inputVisibleSize;
    /** @export { !media.mojom.Bitrate } */
    this.bitrate;
    /** @export { !number } */
    this.initialFramerate;
    /** @export { !boolean } */
    this.hasInitialFramerate;
    /** @export { !boolean } */
    this.hasGopLength;
    /** @export { !boolean } */
    this.hasH264OutputLevel;
    /** @export { !boolean } */
    this.isConstrainedH264;
    /** @export { !boolean } */
    this.hasStorageType;
    /** @export { !boolean } */
    this.requireLowDelay;
    /** @export { !number } */
    this.h264OutputLevel;
    /** @export { !number } */
    this.gopLength;
    /** @export { !media.mojom.VideoEncodeAcceleratorConfig_StorageType } */
    this.storageType;
    /** @export { !media.mojom.VideoEncodeAcceleratorConfig_ContentType } */
    this.contentType;
    /** @export { !media.mojom.VideoEncodeAcceleratorConfig_InterLayerPredMode } */
    this.interLayerPred;
    /** @export { !Array<!media.mojom.SpatialLayer> } */
    this.spatialLayers;
  }
};




mojo.internal.Struct(
    media.mojom.H264MetadataSpec.$,
    'H264Metadata',
    [
      mojo.internal.StructField(
        'temporalIdx', 0,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'layerSync', 1,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.H264Metadata = class {
  constructor() {
    /** @export { !number } */
    this.temporalIdx;
    /** @export { !boolean } */
    this.layerSync;
  }
};




mojo.internal.Struct(
    media.mojom.Vp8MetadataSpec.$,
    'Vp8Metadata',
    [
      mojo.internal.StructField(
        'nonReference', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'temporalIdx', 1,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'layerSync', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.Vp8Metadata = class {
  constructor() {
    /** @export { !boolean } */
    this.nonReference;
    /** @export { !boolean } */
    this.layerSync;
    /** @export { !number } */
    this.temporalIdx;
  }
};




mojo.internal.Struct(
    media.mojom.Vp9MetadataSpec.$,
    'Vp9Metadata',
    [
      mojo.internal.StructField(
        'interPicPredicted', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'temporalUpSwitch', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'referencedByUpperSpatialLayers', 0,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'referenceLowerSpatialLayers', 0,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'endOfPicture', 0,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'temporalIdx', 1,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'spatialIdx', 2,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'spatialLayerResolutions', 8,
        0,
        mojo.internal.Array(gfx.mojom.SizeSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'pDiffs', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.Vp9Metadata = class {
  constructor() {
    /** @export { !boolean } */
    this.interPicPredicted;
    /** @export { !boolean } */
    this.temporalUpSwitch;
    /** @export { !boolean } */
    this.referencedByUpperSpatialLayers;
    /** @export { !boolean } */
    this.referenceLowerSpatialLayers;
    /** @export { !boolean } */
    this.endOfPicture;
    /** @export { !number } */
    this.temporalIdx;
    /** @export { !number } */
    this.spatialIdx;
    /** @export { !Array<!gfx.mojom.Size> } */
    this.spatialLayerResolutions;
    /** @export { !Array<!number> } */
    this.pDiffs;
  }
};




mojo.internal.Struct(
    media.mojom.Av1MetadataSpec.$,
    'Av1Metadata',
    [
      mojo.internal.StructField(
        'interPicPredicted', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'switchFrame', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'endOfPicture', 0,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'temporalIdx', 1,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'spatialIdx', 2,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'spatialLayerResolutions', 8,
        0,
        mojo.internal.Array(gfx.mojom.SizeSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'fDiffs', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.Av1Metadata = class {
  constructor() {
    /** @export { !boolean } */
    this.interPicPredicted;
    /** @export { !boolean } */
    this.switchFrame;
    /** @export { !boolean } */
    this.endOfPicture;
    /** @export { !number } */
    this.temporalIdx;
    /** @export { !number } */
    this.spatialIdx;
    /** @export { !Array<!gfx.mojom.Size> } */
    this.spatialLayerResolutions;
    /** @export { !Array<!number> } */
    this.fDiffs;
  }
};




mojo.internal.Struct(
    media.mojom.BitstreamBufferMetadataSpec.$,
    'BitstreamBufferMetadata',
    [
      mojo.internal.StructField(
        'payloadSizeBytes', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'keyFrame', 4,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'timestamp', 8,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'qp', 16,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'codecMetadata', 24,
        0,
        media.mojom.CodecMetadataSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 48],]);





/** @record */
media.mojom.BitstreamBufferMetadata = class {
  constructor() {
    /** @export { !number } */
    this.payloadSizeBytes;
    /** @export { !boolean } */
    this.keyFrame;
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.timestamp;
    /** @export { !number } */
    this.qp;
    /** @export { (media.mojom.CodecMetadata|undefined) } */
    this.codecMetadata;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_ParamsSpec.$,
    'VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(media.mojom.VideoEncodeAcceleratorPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAcceleratorProvider_CreateVideoEncodeAccelerator_Params = class {
  constructor() {
    /** @export { !media.mojom.VideoEncodeAcceleratorPendingReceiver } */
    this.receiver;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ParamsSpec.$,
    'VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParamsSpec.$,
    'VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParams',
    [
      mojo.internal.StructField(
        'profiles', 0,
        0,
        mojo.internal.Array(media.mojom.VideoEncodeAcceleratorSupportedProfileSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAcceleratorProvider_GetVideoEncodeAcceleratorSupportedProfiles_ResponseParams = class {
  constructor() {
    /** @export { !Array<!media.mojom.VideoEncodeAcceleratorSupportedProfile> } */
    this.profiles;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_Initialize_ParamsSpec.$,
    'VideoEncodeAccelerator_Initialize_Params',
    [
      mojo.internal.StructField(
        'config', 0,
        0,
        media.mojom.VideoEncodeAcceleratorConfigSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'client', 8,
        0,
        mojo.internal.AssociatedInterfaceProxy(media.mojom.VideoEncodeAcceleratorClientRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaLog', 16,
        0,
        mojo.internal.InterfaceProxy(media.mojom.MediaLogRemote),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.VideoEncodeAccelerator_Initialize_Params = class {
  constructor() {
    /** @export { !media.mojom.VideoEncodeAcceleratorConfig } */
    this.config;
    /** @export { !Object } */
    this.client;
    /** @export { !media.mojom.MediaLogRemote } */
    this.mediaLog;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_Initialize_ResponseParamsSpec.$,
    'VideoEncodeAccelerator_Initialize_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAccelerator_Initialize_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.result;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_Encode_ParamsSpec.$,
    'VideoEncodeAccelerator_Encode_Params',
    [
      mojo.internal.StructField(
        'frame', 0,
        0,
        media.mojom.VideoFrameSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'forceKeyframe', 8,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.VideoEncodeAccelerator_Encode_Params = class {
  constructor() {
    /** @export { !media.mojom.VideoFrame } */
    this.frame;
    /** @export { !boolean } */
    this.forceKeyframe;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_Encode_ResponseParamsSpec.$,
    'VideoEncodeAccelerator_Encode_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.VideoEncodeAccelerator_Encode_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_UseOutputBitstreamBuffer_ParamsSpec.$,
    'VideoEncodeAccelerator_UseOutputBitstreamBuffer_Params',
    [
      mojo.internal.StructField(
        'bitstreamBufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'region', 8,
        0,
        mojoBase.mojom.UnsafeSharedMemoryRegionSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.VideoEncodeAccelerator_UseOutputBitstreamBuffer_Params = class {
  constructor() {
    /** @export { !number } */
    this.bitstreamBufferId;
    /** @export { !mojoBase.mojom.UnsafeSharedMemoryRegion } */
    this.region;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_ParamsSpec.$,
    'VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_Params',
    [
      mojo.internal.StructField(
        'bitrateAllocation', 0,
        0,
        media.mojom.VideoBitrateAllocationSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'framerate', 8,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithLayers_Params = class {
  constructor() {
    /** @export { !media.mojom.VideoBitrateAllocation } */
    this.bitrateAllocation;
    /** @export { !number } */
    this.framerate;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_ParamsSpec.$,
    'VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_Params',
    [
      mojo.internal.StructField(
        'bitrate', 0,
        0,
        media.mojom.BitrateSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'framerate', 16,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.VideoEncodeAccelerator_RequestEncodingParametersChangeWithBitrate_Params = class {
  constructor() {
    /** @export { !media.mojom.Bitrate } */
    this.bitrate;
    /** @export { !number } */
    this.framerate;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_IsFlushSupported_ParamsSpec.$,
    'VideoEncodeAccelerator_IsFlushSupported_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.VideoEncodeAccelerator_IsFlushSupported_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_IsFlushSupported_ResponseParamsSpec.$,
    'VideoEncodeAccelerator_IsFlushSupported_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAccelerator_IsFlushSupported_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.result;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_Flush_ParamsSpec.$,
    'VideoEncodeAccelerator_Flush_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.VideoEncodeAccelerator_Flush_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAccelerator_Flush_ResponseParamsSpec.$,
    'VideoEncodeAccelerator_Flush_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAccelerator_Flush_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.result;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorClient_RequireBitstreamBuffers_ParamsSpec.$,
    'VideoEncodeAcceleratorClient_RequireBitstreamBuffers_Params',
    [
      mojo.internal.StructField(
        'inputCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'inputCodedSize', 8,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'outputBufferSize', 4,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.VideoEncodeAcceleratorClient_RequireBitstreamBuffers_Params = class {
  constructor() {
    /** @export { !number } */
    this.inputCount;
    /** @export { !number } */
    this.outputBufferSize;
    /** @export { !gfx.mojom.Size } */
    this.inputCodedSize;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorClient_BitstreamBufferReady_ParamsSpec.$,
    'VideoEncodeAcceleratorClient_BitstreamBufferReady_Params',
    [
      mojo.internal.StructField(
        'bitstreamBufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'metadata', 8,
        0,
        media.mojom.BitstreamBufferMetadataSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.VideoEncodeAcceleratorClient_BitstreamBufferReady_Params = class {
  constructor() {
    /** @export { !number } */
    this.bitstreamBufferId;
    /** @export { !media.mojom.BitstreamBufferMetadata } */
    this.metadata;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorClient_NotifyError_ParamsSpec.$,
    'VideoEncodeAcceleratorClient_NotifyError_Params',
    [
      mojo.internal.StructField(
        'error', 0,
        0,
        media.mojom.VideoEncodeAccelerator.ErrorSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAcceleratorClient_NotifyError_Params = class {
  constructor() {
    /** @export { !media.mojom.VideoEncodeAccelerator_Error } */
    this.error;
  }
};




mojo.internal.Struct(
    media.mojom.VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_ParamsSpec.$,
    'VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_Params',
    [
      mojo.internal.StructField(
        'info', 0,
        0,
        media.mojom.VideoEncoderInfoSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.VideoEncodeAcceleratorClient_NotifyEncoderInfoChange_Params = class {
  constructor() {
    /** @export { !media.mojom.VideoEncoderInfo } */
    this.info;
  }
};




mojo.internal.Union(
    media.mojom.BitrateSpec.$, 'Bitrate',
    {
      'constant': {
        'ordinal': 0,
        'type': media.mojom.ConstantBitrateSpec.$,
      },
      'variable': {
        'ordinal': 1,
        'type': media.mojom.VariableBitrateSpec.$,
      },
    });

/**
 * @typedef { {
 *   constant: (!media.mojom.ConstantBitrate|undefined),
 *   variable: (!media.mojom.VariableBitrate|undefined),
 * } }
 */
media.mojom.Bitrate;


mojo.internal.Union(
    media.mojom.CodecMetadataSpec.$, 'CodecMetadata',
    {
      'h264': {
        'ordinal': 0,
        'type': media.mojom.H264MetadataSpec.$,
      },
      'vp8': {
        'ordinal': 1,
        'type': media.mojom.Vp8MetadataSpec.$,
      },
      'vp9': {
        'ordinal': 2,
        'type': media.mojom.Vp9MetadataSpec.$,
      },
      'av1': {
        'ordinal': 3,
        'type': media.mojom.Av1MetadataSpec.$,
      },
    });

/**
 * @typedef { {
 *   h264: (!media.mojom.H264Metadata|undefined),
 *   vp8: (!media.mojom.Vp8Metadata|undefined),
 *   vp9: (!media.mojom.Vp9Metadata|undefined),
 *   av1: (!media.mojom.Av1Metadata|undefined),
 * } }
 */
media.mojom.CodecMetadata;
