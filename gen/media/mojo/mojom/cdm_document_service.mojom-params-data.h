// media/mojo/mojom/cdm_document_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_CDM_DOCUMENT_SERVICE_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_CDM_DOCUMENT_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  CdmDocumentService_ChallengePlatform_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> service_id;
  mojo::internal::Pointer<mojo::internal::String_Data> challenge;

 private:
  friend class mojo::internal::MessageFragment<CdmDocumentService_ChallengePlatform_Params_Data>;

  CdmDocumentService_ChallengePlatform_Params_Data();
  ~CdmDocumentService_ChallengePlatform_Params_Data() = delete;
};
static_assert(sizeof(CdmDocumentService_ChallengePlatform_Params_Data) == 24,
              "Bad sizeof(CdmDocumentService_ChallengePlatform_Params_Data)");
class  CdmDocumentService_ChallengePlatform_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<mojo::internal::String_Data> signed_data;
  mojo::internal::Pointer<mojo::internal::String_Data> signed_data_signature;
  mojo::internal::Pointer<mojo::internal::String_Data> platform_key_certificate;

 private:
  friend class mojo::internal::MessageFragment<CdmDocumentService_ChallengePlatform_ResponseParams_Data>;

  CdmDocumentService_ChallengePlatform_ResponseParams_Data();
  ~CdmDocumentService_ChallengePlatform_ResponseParams_Data() = delete;
};
static_assert(sizeof(CdmDocumentService_ChallengePlatform_ResponseParams_Data) == 40,
              "Bad sizeof(CdmDocumentService_ChallengePlatform_ResponseParams_Data)");
class  CdmDocumentService_GetStorageId_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t version;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<CdmDocumentService_GetStorageId_Params_Data>;

  CdmDocumentService_GetStorageId_Params_Data();
  ~CdmDocumentService_GetStorageId_Params_Data() = delete;
};
static_assert(sizeof(CdmDocumentService_GetStorageId_Params_Data) == 16,
              "Bad sizeof(CdmDocumentService_GetStorageId_Params_Data)");
class  CdmDocumentService_GetStorageId_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t version;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> storage_id;

 private:
  friend class mojo::internal::MessageFragment<CdmDocumentService_GetStorageId_ResponseParams_Data>;

  CdmDocumentService_GetStorageId_ResponseParams_Data();
  ~CdmDocumentService_GetStorageId_ResponseParams_Data() = delete;
};
static_assert(sizeof(CdmDocumentService_GetStorageId_ResponseParams_Data) == 24,
              "Bad sizeof(CdmDocumentService_GetStorageId_ResponseParams_Data)");

}  // namespace internal


class CdmDocumentService_ChallengePlatform_ParamsDataView {
 public:
  CdmDocumentService_ChallengePlatform_ParamsDataView() = default;

  CdmDocumentService_ChallengePlatform_ParamsDataView(
      internal::CdmDocumentService_ChallengePlatform_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetServiceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServiceId(UserType* output) {
    
    auto* pointer = data_->service_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetChallengeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChallenge(UserType* output) {
    
    auto* pointer = data_->challenge.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::CdmDocumentService_ChallengePlatform_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CdmDocumentService_ChallengePlatform_ResponseParamsDataView {
 public:
  CdmDocumentService_ChallengePlatform_ResponseParamsDataView() = default;

  CdmDocumentService_ChallengePlatform_ResponseParamsDataView(
      internal::CdmDocumentService_ChallengePlatform_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetSignedDataDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSignedData(UserType* output) {
    
    auto* pointer = data_->signed_data.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSignedDataSignatureDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSignedDataSignature(UserType* output) {
    
    auto* pointer = data_->signed_data_signature.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPlatformKeyCertificateDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPlatformKeyCertificate(UserType* output) {
    
    auto* pointer = data_->platform_key_certificate.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::CdmDocumentService_ChallengePlatform_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CdmDocumentService_GetStorageId_ParamsDataView {
 public:
  CdmDocumentService_GetStorageId_ParamsDataView() = default;

  CdmDocumentService_GetStorageId_ParamsDataView(
      internal::CdmDocumentService_GetStorageId_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t version() const {
    return data_->version;
  }
 private:
  internal::CdmDocumentService_GetStorageId_Params_Data* data_ = nullptr;
};



class CdmDocumentService_GetStorageId_ResponseParamsDataView {
 public:
  CdmDocumentService_GetStorageId_ResponseParamsDataView() = default;

  CdmDocumentService_GetStorageId_ResponseParamsDataView(
      internal::CdmDocumentService_GetStorageId_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t version() const {
    return data_->version;
  }
  inline void GetStorageIdDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageId(UserType* output) {
    
    auto* pointer = data_->storage_id.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::CdmDocumentService_GetStorageId_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CdmDocumentService_ChallengePlatform_ParamsDataView::GetServiceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->service_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CdmDocumentService_ChallengePlatform_ParamsDataView::GetChallengeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->challenge.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void CdmDocumentService_ChallengePlatform_ResponseParamsDataView::GetSignedDataDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->signed_data.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CdmDocumentService_ChallengePlatform_ResponseParamsDataView::GetSignedDataSignatureDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->signed_data_signature.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CdmDocumentService_ChallengePlatform_ResponseParamsDataView::GetPlatformKeyCertificateDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->platform_key_certificate.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void CdmDocumentService_GetStorageId_ResponseParamsDataView::GetStorageIdDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->storage_id.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}

}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_CDM_DOCUMENT_SERVICE_MOJOM_PARAMS_DATA_H_