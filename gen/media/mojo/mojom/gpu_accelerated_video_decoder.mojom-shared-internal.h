// media/mojo/mojom/gpu_accelerated_video_decoder.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_SHARED_INTERNAL_H_
#define MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "media/mojo/mojom/media_types.mojom-shared-internal.h"
#include "media/mojo/mojom/video_decoder.mojom-shared-internal.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared-internal.h"
#include "ui/gfx/mojom/color_space.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace media {
namespace mojom {
namespace internal {
using VideoDecodeAcceleratorConfig_Data = mojo::native::internal::NativeStruct_Data;
using BitstreamBuffer_Data = mojo::native::internal::NativeStruct_Data;
class PictureBufferAssignment_Data;
class PictureReadyParams_Data;

#pragma pack(push, 1)
class  PictureBufferAssignment_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<uint32_t>> texture_ids;

 private:
  friend class mojo::internal::MessageFragment<PictureBufferAssignment_Data>;

  PictureBufferAssignment_Data();
  ~PictureBufferAssignment_Data() = delete;
};
static_assert(sizeof(PictureBufferAssignment_Data) == 24,
              "Bad sizeof(PictureBufferAssignment_Data)");
// Used by PictureBufferAssignment::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PictureBufferAssignment_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PictureBufferAssignment_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PictureBufferAssignment_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PictureBufferAssignment_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PictureBufferAssignment_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  PictureReadyParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t picture_buffer_id;
  int32_t bitstream_buffer_id;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> visible_rect;
  mojo::internal::Pointer<::gfx::mojom::internal::ColorSpace_Data> color_space;
  uint8_t allow_overlay : 1;
  uint8_t read_lock_fences_enabled : 1;
  uint8_t size_changed : 1;
  uint8_t surface_texture : 1;
  uint8_t wants_promotion_hint : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PictureReadyParams_Data>;

  PictureReadyParams_Data();
  ~PictureReadyParams_Data() = delete;
};
static_assert(sizeof(PictureReadyParams_Data) == 40,
              "Bad sizeof(PictureReadyParams_Data)");
// Used by PictureReadyParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct PictureReadyParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  PictureReadyParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~PictureReadyParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<PictureReadyParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    PictureReadyParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_SHARED_INTERNAL_H_