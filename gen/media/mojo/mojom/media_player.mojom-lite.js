// media/mojo/mojom/media_player.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('media.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaPlayerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaPlayer.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.MediaPlayerInterface }
 */
media.mojom.MediaPlayerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaPlayerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaPlayerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaPlayerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  requestPlay() {
    this.proxy.sendMessage(
        0,
        media.mojom.MediaPlayer_RequestPlay_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !boolean } triggeredByUser
   */

  requestPause(
      triggeredByUser) {
    this.proxy.sendMessage(
        1,
        media.mojom.MediaPlayer_RequestPause_ParamsSpec.$,
        null,
        [
          triggeredByUser
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.TimeDelta } seekTime
   */

  requestSeekForward(
      seekTime) {
    this.proxy.sendMessage(
        2,
        media.mojom.MediaPlayer_RequestSeekForward_ParamsSpec.$,
        null,
        [
          seekTime
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.TimeDelta } seekTime
   */

  requestSeekBackward(
      seekTime) {
    this.proxy.sendMessage(
        3,
        media.mojom.MediaPlayer_RequestSeekBackward_ParamsSpec.$,
        null,
        [
          seekTime
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.TimeDelta } seekTime
   */

  requestSeekTo(
      seekTime) {
    this.proxy.sendMessage(
        4,
        media.mojom.MediaPlayer_RequestSeekTo_ParamsSpec.$,
        null,
        [
          seekTime
        ]);
  }

  
  /**
   */

  requestEnterPictureInPicture() {
    this.proxy.sendMessage(
        5,
        media.mojom.MediaPlayer_RequestEnterPictureInPicture_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  requestExitPictureInPicture() {
    this.proxy.sendMessage(
        6,
        media.mojom.MediaPlayer_RequestExitPictureInPicture_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !boolean } mute
   */

  requestMute(
      mute) {
    this.proxy.sendMessage(
        7,
        media.mojom.MediaPlayer_RequestMute_ParamsSpec.$,
        null,
        [
          mute
        ]);
  }

  
  /**
   * @param { !number } multiplier
   */

  setVolumeMultiplier(
      multiplier) {
    this.proxy.sendMessage(
        8,
        media.mojom.MediaPlayer_SetVolumeMultiplier_ParamsSpec.$,
        null,
        [
          multiplier
        ]);
  }

  
  /**
   * @param { !boolean } persistent
   */

  setPersistentState(
      persistent) {
    this.proxy.sendMessage(
        9,
        media.mojom.MediaPlayer_SetPersistentState_ParamsSpec.$,
        null,
        [
          persistent
        ]);
  }

  
  /**
   * @param { !boolean } enabled
   */

  setPowerExperimentState(
      enabled) {
    this.proxy.sendMessage(
        10,
        media.mojom.MediaPlayer_SetPowerExperimentState_ParamsSpec.$,
        null,
        [
          enabled
        ]);
  }

  
  /**
   * @param { !string } sinkId
   */

  setAudioSinkId(
      sinkId) {
    this.proxy.sendMessage(
        11,
        media.mojom.MediaPlayer_SetAudioSinkId_ParamsSpec.$,
        null,
        [
          sinkId
        ]);
  }

  
  /**
   */

  suspendForFrameClosed() {
    this.proxy.sendMessage(
        12,
        media.mojom.MediaPlayer_SuspendForFrameClosed_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MediaPlayer
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaPlayerReceiver = class {
  /**
   * @param {!media.mojom.MediaPlayerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaPlayerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaPlayerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayer_RequestPlay_ParamsSpec.$,
        null,
        impl.requestPlay.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.MediaPlayer_RequestPause_ParamsSpec.$,
        null,
        impl.requestPause.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.MediaPlayer_RequestSeekForward_ParamsSpec.$,
        null,
        impl.requestSeekForward.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.MediaPlayer_RequestSeekBackward_ParamsSpec.$,
        null,
        impl.requestSeekBackward.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.MediaPlayer_RequestSeekTo_ParamsSpec.$,
        null,
        impl.requestSeekTo.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        media.mojom.MediaPlayer_RequestEnterPictureInPicture_ParamsSpec.$,
        null,
        impl.requestEnterPictureInPicture.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        media.mojom.MediaPlayer_RequestExitPictureInPicture_ParamsSpec.$,
        null,
        impl.requestExitPictureInPicture.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        media.mojom.MediaPlayer_RequestMute_ParamsSpec.$,
        null,
        impl.requestMute.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        media.mojom.MediaPlayer_SetVolumeMultiplier_ParamsSpec.$,
        null,
        impl.setVolumeMultiplier.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        media.mojom.MediaPlayer_SetPersistentState_ParamsSpec.$,
        null,
        impl.setPersistentState.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        media.mojom.MediaPlayer_SetPowerExperimentState_ParamsSpec.$,
        null,
        impl.setPowerExperimentState.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        media.mojom.MediaPlayer_SetAudioSinkId_ParamsSpec.$,
        null,
        impl.setAudioSinkId.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        media.mojom.MediaPlayer_SuspendForFrameClosed_ParamsSpec.$,
        null,
        impl.suspendForFrameClosed.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaPlayer = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayer";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaPlayerRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaPlayerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaPlayer
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaPlayerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaPlayerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestPlay =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayer_RequestPlay_ParamsSpec.$,
        null,
        this.requestPlay.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestPause =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.MediaPlayer_RequestPause_ParamsSpec.$,
        null,
        this.requestPause.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestSeekForward =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.MediaPlayer_RequestSeekForward_ParamsSpec.$,
        null,
        this.requestSeekForward.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestSeekBackward =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.MediaPlayer_RequestSeekBackward_ParamsSpec.$,
        null,
        this.requestSeekBackward.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestSeekTo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.MediaPlayer_RequestSeekTo_ParamsSpec.$,
        null,
        this.requestSeekTo.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestEnterPictureInPicture =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        media.mojom.MediaPlayer_RequestEnterPictureInPicture_ParamsSpec.$,
        null,
        this.requestEnterPictureInPicture.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestExitPictureInPicture =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        media.mojom.MediaPlayer_RequestExitPictureInPicture_ParamsSpec.$,
        null,
        this.requestExitPictureInPicture.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.requestMute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        media.mojom.MediaPlayer_RequestMute_ParamsSpec.$,
        null,
        this.requestMute.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setVolumeMultiplier =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        media.mojom.MediaPlayer_SetVolumeMultiplier_ParamsSpec.$,
        null,
        this.setVolumeMultiplier.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setPersistentState =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        media.mojom.MediaPlayer_SetPersistentState_ParamsSpec.$,
        null,
        this.setPersistentState.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setPowerExperimentState =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        media.mojom.MediaPlayer_SetPowerExperimentState_ParamsSpec.$,
        null,
        this.setPowerExperimentState.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setAudioSinkId =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        media.mojom.MediaPlayer_SetAudioSinkId_ParamsSpec.$,
        null,
        this.setAudioSinkId.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.suspendForFrameClosed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        media.mojom.MediaPlayer_SuspendForFrameClosed_ParamsSpec.$,
        null,
        this.suspendForFrameClosed.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaPlayerObserverClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaPlayerObserverClient.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.MediaPlayerObserverClientInterface }
 */
media.mojom.MediaPlayerObserverClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaPlayerObserverClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaPlayerObserverClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaPlayerObserverClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @return {!Promise<{
        hasPlayedBefore: !boolean,
   *  }>}
   */

  getHasPlayedBefore() {
    return this.proxy.sendMessage(
        0,
        media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ParamsSpec.$,
        media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MediaPlayerObserverClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaPlayerObserverClientReceiver = class {
  /**
   * @param {!media.mojom.MediaPlayerObserverClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaPlayerObserverClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaPlayerObserverClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerObserverClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ParamsSpec.$,
        media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParamsSpec.$,
        impl.getHasPlayedBefore.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaPlayerObserverClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerObserverClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaPlayerObserverClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaPlayerObserverClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaPlayerObserverClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaPlayerObserverClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaPlayerObserverClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerObserverClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getHasPlayedBefore =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ParamsSpec.$,
        media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParamsSpec.$,
        this.getHasPlayedBefore.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaPlayerObserverPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaPlayerObserver.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.MediaPlayerObserverInterface }
 */
media.mojom.MediaPlayerObserverRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaPlayerObserverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaPlayerObserverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaPlayerObserverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  onMediaPlaying() {
    this.proxy.sendMessage(
        0,
        media.mojom.MediaPlayerObserver_OnMediaPlaying_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !boolean } streamEnded
   */

  onMediaPaused(
      streamEnded) {
    this.proxy.sendMessage(
        1,
        media.mojom.MediaPlayerObserver_OnMediaPaused_ParamsSpec.$,
        null,
        [
          streamEnded
        ]);
  }

  
  /**
   * @param { !boolean } muted
   */

  onMutedStatusChanged(
      muted) {
    this.proxy.sendMessage(
        2,
        media.mojom.MediaPlayerObserver_OnMutedStatusChanged_ParamsSpec.$,
        null,
        [
          muted
        ]);
  }

  
  /**
   * @param { !boolean } hasAudio
   * @param { !boolean } hasVideo
   * @param { !media.mojom.MediaContentType } contentType
   */

  onMediaMetadataChanged(
      hasAudio,
      hasVideo,
      contentType) {
    this.proxy.sendMessage(
        3,
        media.mojom.MediaPlayerObserver_OnMediaMetadataChanged_ParamsSpec.$,
        null,
        [
          hasAudio,
          hasVideo,
          contentType
        ]);
  }

  
  /**
   * @param { !mediaSession.mojom.MediaPosition } mediaPosition
   */

  onMediaPositionStateChanged(
      mediaPosition) {
    this.proxy.sendMessage(
        4,
        media.mojom.MediaPlayerObserver_OnMediaPositionStateChanged_ParamsSpec.$,
        null,
        [
          mediaPosition
        ]);
  }

  
  /**
   * @param { !media.mojom.FullscreenVideoStatus } status
   */

  onMediaEffectivelyFullscreenChanged(
      status) {
    this.proxy.sendMessage(
        5,
        media.mojom.MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_ParamsSpec.$,
        null,
        [
          status
        ]);
  }

  
  /**
   * @param { !gfx.mojom.Size } size
   */

  onMediaSizeChanged(
      size) {
    this.proxy.sendMessage(
        6,
        media.mojom.MediaPlayerObserver_OnMediaSizeChanged_ParamsSpec.$,
        null,
        [
          size
        ]);
  }

  
  /**
   * @param { !boolean } available
   */

  onPictureInPictureAvailabilityChanged(
      available) {
    this.proxy.sendMessage(
        7,
        media.mojom.MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_ParamsSpec.$,
        null,
        [
          available
        ]);
  }

  
  /**
   * @param { !string } hashedDeviceId
   */

  onAudioOutputSinkChanged(
      hashedDeviceId) {
    this.proxy.sendMessage(
        8,
        media.mojom.MediaPlayerObserver_OnAudioOutputSinkChanged_ParamsSpec.$,
        null,
        [
          hashedDeviceId
        ]);
  }

  
  /**
   * @param { !boolean } usesAudioService
   */

  onUseAudioServiceChanged(
      usesAudioService) {
    this.proxy.sendMessage(
        9,
        media.mojom.MediaPlayerObserver_OnUseAudioServiceChanged_ParamsSpec.$,
        null,
        [
          usesAudioService
        ]);
  }

  
  /**
   */

  onAudioOutputSinkChangingDisabled() {
    this.proxy.sendMessage(
        10,
        media.mojom.MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MediaPlayerObserver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaPlayerObserverReceiver = class {
  /**
   * @param {!media.mojom.MediaPlayerObserverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaPlayerObserverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaPlayerObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerObserver_OnMediaPlaying_ParamsSpec.$,
        null,
        impl.onMediaPlaying.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.MediaPlayerObserver_OnMediaPaused_ParamsSpec.$,
        null,
        impl.onMediaPaused.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.MediaPlayerObserver_OnMutedStatusChanged_ParamsSpec.$,
        null,
        impl.onMutedStatusChanged.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.MediaPlayerObserver_OnMediaMetadataChanged_ParamsSpec.$,
        null,
        impl.onMediaMetadataChanged.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        media.mojom.MediaPlayerObserver_OnMediaPositionStateChanged_ParamsSpec.$,
        null,
        impl.onMediaPositionStateChanged.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        media.mojom.MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_ParamsSpec.$,
        null,
        impl.onMediaEffectivelyFullscreenChanged.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        media.mojom.MediaPlayerObserver_OnMediaSizeChanged_ParamsSpec.$,
        null,
        impl.onMediaSizeChanged.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        media.mojom.MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_ParamsSpec.$,
        null,
        impl.onPictureInPictureAvailabilityChanged.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        media.mojom.MediaPlayerObserver_OnAudioOutputSinkChanged_ParamsSpec.$,
        null,
        impl.onAudioOutputSinkChanged.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        media.mojom.MediaPlayerObserver_OnUseAudioServiceChanged_ParamsSpec.$,
        null,
        impl.onUseAudioServiceChanged.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        media.mojom.MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_ParamsSpec.$,
        null,
        impl.onAudioOutputSinkChangingDisabled.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaPlayerObserver = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerObserver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaPlayerObserverRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaPlayerObserverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaPlayerObserver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaPlayerObserverCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaPlayerObserverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerObserverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaPlaying =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerObserver_OnMediaPlaying_ParamsSpec.$,
        null,
        this.onMediaPlaying.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaPaused =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.MediaPlayerObserver_OnMediaPaused_ParamsSpec.$,
        null,
        this.onMediaPaused.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMutedStatusChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.MediaPlayerObserver_OnMutedStatusChanged_ParamsSpec.$,
        null,
        this.onMutedStatusChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaMetadataChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.MediaPlayerObserver_OnMediaMetadataChanged_ParamsSpec.$,
        null,
        this.onMediaMetadataChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaPositionStateChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        media.mojom.MediaPlayerObserver_OnMediaPositionStateChanged_ParamsSpec.$,
        null,
        this.onMediaPositionStateChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaEffectivelyFullscreenChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        media.mojom.MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_ParamsSpec.$,
        null,
        this.onMediaEffectivelyFullscreenChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaSizeChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        media.mojom.MediaPlayerObserver_OnMediaSizeChanged_ParamsSpec.$,
        null,
        this.onMediaSizeChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPictureInPictureAvailabilityChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        media.mojom.MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_ParamsSpec.$,
        null,
        this.onPictureInPictureAvailabilityChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onAudioOutputSinkChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        media.mojom.MediaPlayerObserver_OnAudioOutputSinkChanged_ParamsSpec.$,
        null,
        this.onAudioOutputSinkChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onUseAudioServiceChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        media.mojom.MediaPlayerObserver_OnUseAudioServiceChanged_ParamsSpec.$,
        null,
        this.onUseAudioServiceChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onAudioOutputSinkChangingDisabled =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        media.mojom.MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_ParamsSpec.$,
        null,
        this.onAudioOutputSinkChangingDisabled.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.MediaPlayerHostPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.MediaPlayerHost.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.MediaPlayerHostInterface }
 */
media.mojom.MediaPlayerHostRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.MediaPlayerHostPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.MediaPlayerHostPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.MediaPlayerHostPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Object } playerRemote
   * @param { !Object } observer
   * @param { !number } playerId
   */

  onMediaPlayerAdded(
      playerRemote,
      observer,
      playerId) {
    this.proxy.sendMessage(
        0,
        media.mojom.MediaPlayerHost_OnMediaPlayerAdded_ParamsSpec.$,
        null,
        [
          playerRemote,
          observer,
          playerId
        ]);
  }
};

/**
 * An object which receives request messages for the MediaPlayerHost
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.MediaPlayerHostReceiver = class {
  /**
   * @param {!media.mojom.MediaPlayerHostInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.MediaPlayerHostRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.MediaPlayerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerHost_OnMediaPlayerAdded_ParamsSpec.$,
        null,
        impl.onMediaPlayerAdded.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.MediaPlayerHost = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.MediaPlayerHost";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.MediaPlayerHostRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.MediaPlayerHostRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaPlayerHost
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.MediaPlayerHostCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.MediaPlayerHostRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.MediaPlayerHostRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMediaPlayerAdded =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.MediaPlayerHost_OnMediaPlayerAdded_ParamsSpec.$,
        null,
        this.onMediaPlayerAdded.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestPlay_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestPause_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestSeekForward_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestSeekBackward_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestSeekTo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestEnterPictureInPicture_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestExitPictureInPicture_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_RequestMute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_SetVolumeMultiplier_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_SetPersistentState_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_SetPowerExperimentState_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_SetAudioSinkId_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayer_SuspendForFrameClosed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMediaPlaying_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMediaPaused_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMutedStatusChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMediaMetadataChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMediaPositionStateChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnMediaSizeChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnAudioOutputSinkChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnUseAudioServiceChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.MediaPlayerHost_OnMediaPlayerAdded_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestPlay_ParamsSpec.$,
    'MediaPlayer_RequestPlay_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayer_RequestPlay_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestPause_ParamsSpec.$,
    'MediaPlayer_RequestPause_Params',
    [
      mojo.internal.StructField(
        'triggeredByUser', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_RequestPause_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.triggeredByUser;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestSeekForward_ParamsSpec.$,
    'MediaPlayer_RequestSeekForward_Params',
    [
      mojo.internal.StructField(
        'seekTime', 0,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_RequestSeekForward_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.seekTime;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestSeekBackward_ParamsSpec.$,
    'MediaPlayer_RequestSeekBackward_Params',
    [
      mojo.internal.StructField(
        'seekTime', 0,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_RequestSeekBackward_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.seekTime;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestSeekTo_ParamsSpec.$,
    'MediaPlayer_RequestSeekTo_Params',
    [
      mojo.internal.StructField(
        'seekTime', 0,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_RequestSeekTo_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.seekTime;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestEnterPictureInPicture_ParamsSpec.$,
    'MediaPlayer_RequestEnterPictureInPicture_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayer_RequestEnterPictureInPicture_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestExitPictureInPicture_ParamsSpec.$,
    'MediaPlayer_RequestExitPictureInPicture_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayer_RequestExitPictureInPicture_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_RequestMute_ParamsSpec.$,
    'MediaPlayer_RequestMute_Params',
    [
      mojo.internal.StructField(
        'mute', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_RequestMute_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.mute;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_SetVolumeMultiplier_ParamsSpec.$,
    'MediaPlayer_SetVolumeMultiplier_Params',
    [
      mojo.internal.StructField(
        'multiplier', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_SetVolumeMultiplier_Params = class {
  constructor() {
    /** @export { !number } */
    this.multiplier;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_SetPersistentState_ParamsSpec.$,
    'MediaPlayer_SetPersistentState_Params',
    [
      mojo.internal.StructField(
        'persistent', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_SetPersistentState_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.persistent;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_SetPowerExperimentState_ParamsSpec.$,
    'MediaPlayer_SetPowerExperimentState_Params',
    [
      mojo.internal.StructField(
        'enabled', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_SetPowerExperimentState_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.enabled;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_SetAudioSinkId_ParamsSpec.$,
    'MediaPlayer_SetAudioSinkId_Params',
    [
      mojo.internal.StructField(
        'sinkId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayer_SetAudioSinkId_Params = class {
  constructor() {
    /** @export { !string } */
    this.sinkId;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayer_SuspendForFrameClosed_ParamsSpec.$,
    'MediaPlayer_SuspendForFrameClosed_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayer_SuspendForFrameClosed_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ParamsSpec.$,
    'MediaPlayerObserverClient_GetHasPlayedBefore_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParamsSpec.$,
    'MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParams',
    [
      mojo.internal.StructField(
        'hasPlayedBefore', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserverClient_GetHasPlayedBefore_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.hasPlayedBefore;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMediaPlaying_ParamsSpec.$,
    'MediaPlayerObserver_OnMediaPlaying_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMediaPlaying_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMediaPaused_ParamsSpec.$,
    'MediaPlayerObserver_OnMediaPaused_Params',
    [
      mojo.internal.StructField(
        'streamEnded', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMediaPaused_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.streamEnded;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMutedStatusChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnMutedStatusChanged_Params',
    [
      mojo.internal.StructField(
        'muted', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMutedStatusChanged_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.muted;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMediaMetadataChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnMediaMetadataChanged_Params',
    [
      mojo.internal.StructField(
        'hasAudio', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'hasVideo', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'contentType', 4,
        0,
        media.mojom.MediaContentTypeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMediaMetadataChanged_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.hasAudio;
    /** @export { !boolean } */
    this.hasVideo;
    /** @export { !media.mojom.MediaContentType } */
    this.contentType;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMediaPositionStateChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnMediaPositionStateChanged_Params',
    [
      mojo.internal.StructField(
        'mediaPosition', 0,
        0,
        mediaSession.mojom.MediaPositionSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMediaPositionStateChanged_Params = class {
  constructor() {
    /** @export { !mediaSession.mojom.MediaPosition } */
    this.mediaPosition;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_Params',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        media.mojom.FullscreenVideoStatusSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMediaEffectivelyFullscreenChanged_Params = class {
  constructor() {
    /** @export { !media.mojom.FullscreenVideoStatus } */
    this.status;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnMediaSizeChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnMediaSizeChanged_Params',
    [
      mojo.internal.StructField(
        'size', 0,
        0,
        gfx.mojom.SizeSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnMediaSizeChanged_Params = class {
  constructor() {
    /** @export { !gfx.mojom.Size } */
    this.size;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params',
    [
      mojo.internal.StructField(
        'available', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnPictureInPictureAvailabilityChanged_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.available;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnAudioOutputSinkChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnAudioOutputSinkChanged_Params',
    [
      mojo.internal.StructField(
        'hashedDeviceId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnAudioOutputSinkChanged_Params = class {
  constructor() {
    /** @export { !string } */
    this.hashedDeviceId;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnUseAudioServiceChanged_ParamsSpec.$,
    'MediaPlayerObserver_OnUseAudioServiceChanged_Params',
    [
      mojo.internal.StructField(
        'usesAudioService', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.MediaPlayerObserver_OnUseAudioServiceChanged_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.usesAudioService;
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_ParamsSpec.$,
    'MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.MediaPlayerObserver_OnAudioOutputSinkChangingDisabled_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.MediaPlayerHost_OnMediaPlayerAdded_ParamsSpec.$,
    'MediaPlayerHost_OnMediaPlayerAdded_Params',
    [
      mojo.internal.StructField(
        'playerRemote', 0,
        0,
        mojo.internal.AssociatedInterfaceProxy(media.mojom.MediaPlayerRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'observer', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(media.mojom.MediaPlayerObserverPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'playerId', 12,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
media.mojom.MediaPlayerHost_OnMediaPlayerAdded_Params = class {
  constructor() {
    /** @export { !Object } */
    this.playerRemote;
    /** @export { !Object } */
    this.observer;
    /** @export { !number } */
    this.playerId;
  }
};


