// media/mojo/mojom/remoting.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../mojo/public/js/bindings.js';

import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  DecoderBuffer as media_mojom_DecoderBuffer,
  DecoderBufferSpec as media_mojom_DecoderBufferSpec
} from './media_types.mojom.m.js';

import {
  RemotingStartFailReason as media_mojom_RemotingStartFailReason,
  RemotingStartFailReasonSpec as media_mojom_RemotingStartFailReasonSpec,
  RemotingStopReason as media_mojom_RemotingStopReason,
  RemotingStopReasonSpec as media_mojom_RemotingStopReasonSpec,
  RemotingSinkMetadata as media_mojom_RemotingSinkMetadata,
  RemotingSinkMetadataSpec as media_mojom_RemotingSinkMetadataSpec
} from './remoting_common.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoterFactoryPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.RemoterFactory', scope);
  }
}

/** @interface */
export class RemoterFactoryInterface {
  
  /**
   * @param { !RemotingSourceRemote } source
   * @param { !RemoterPendingReceiver } remoter
   */

  create(source, remoter) {}
}

/**
 * @implements { RemoterFactoryInterface }
 */
export class RemoterFactoryRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoterFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoterFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoterFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !RemotingSourceRemote } source
   * @param { !RemoterPendingReceiver } remoter
   */

  create(
      source,
      remoter) {
    this.proxy.sendMessage(
        0,
        RemoterFactory_Create_ParamsSpec.$,
        null,
        [
          source,
          remoter
        ]);
  }
}

/**
 * An object which receives request messages for the RemoterFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoterFactoryReceiver {
  /**
   * @param {!RemoterFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoterFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoterFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoterFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemoterFactory_Create_ParamsSpec.$,
        null,
        impl.create.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemoterFactory {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemoterFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoterFactoryRemote}
   */
  static getRemote() {
    let remote = new RemoterFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemoterFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoterFactoryCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoterFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoterFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.create =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemoterFactory_Create_ParamsSpec.$,
        null,
        this.create.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemotingDataStreamSenderPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.RemotingDataStreamSender', scope);
  }
}

/** @interface */
export class RemotingDataStreamSenderInterface {
  
  /**
   * @param { !number } frameSize
   */

  sendFrame(frameSize) {}
  
  /**
   */

  cancelInFlightData() {}
}

/**
 * @implements { RemotingDataStreamSenderInterface }
 */
export class RemotingDataStreamSenderRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemotingDataStreamSenderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemotingDataStreamSenderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemotingDataStreamSenderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !number } frameSize
   */

  sendFrame(
      frameSize) {
    this.proxy.sendMessage(
        0,
        RemotingDataStreamSender_SendFrame_ParamsSpec.$,
        null,
        [
          frameSize
        ]);
  }

  
  /**
   */

  cancelInFlightData() {
    this.proxy.sendMessage(
        1,
        RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the RemotingDataStreamSender
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemotingDataStreamSenderReceiver {
  /**
   * @param {!RemotingDataStreamSenderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemotingDataStreamSenderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemotingDataStreamSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingDataStreamSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemotingDataStreamSender_SendFrame_ParamsSpec.$,
        null,
        impl.sendFrame.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
        null,
        impl.cancelInFlightData.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemotingDataStreamSender {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingDataStreamSender";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemotingDataStreamSenderRemote}
   */
  static getRemote() {
    let remote = new RemotingDataStreamSenderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemotingDataStreamSender
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemotingDataStreamSenderCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemotingDataStreamSenderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingDataStreamSenderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemotingDataStreamSender_SendFrame_ParamsSpec.$,
        null,
        this.sendFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancelInFlightData =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
        null,
        this.cancelInFlightData.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoterPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.Remoter', scope);
  }
}

/** @interface */
export class RemoterInterface {
  
  /**
   */

  start() {}
  
  /**
   * @param { ?MojoHandle } audioPipe
   * @param { ?MojoHandle } videoPipe
   * @param { ?RemotingDataStreamSenderPendingReceiver } audioSender
   * @param { ?RemotingDataStreamSenderPendingReceiver } videoSender
   */

  startDataStreams(audioPipe, videoPipe, audioSender, videoSender) {}
  
  /**
   * @param { !media_mojom_RemotingStopReason } reason
   */

  stop(reason) {}
  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSink(message) {}
  
  /**
   * @return {!Promise<{
        rate: !number,
   *  }>}
   */

  estimateTransmissionCapacity() {}
}

/**
 * @implements { RemoterInterface }
 */
export class RemoterRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoterPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  start() {
    this.proxy.sendMessage(
        0,
        Remoter_Start_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { ?MojoHandle } audioPipe
   * @param { ?MojoHandle } videoPipe
   * @param { ?RemotingDataStreamSenderPendingReceiver } audioSender
   * @param { ?RemotingDataStreamSenderPendingReceiver } videoSender
   */

  startDataStreams(
      audioPipe,
      videoPipe,
      audioSender,
      videoSender) {
    this.proxy.sendMessage(
        1,
        Remoter_StartDataStreams_ParamsSpec.$,
        null,
        [
          audioPipe,
          videoPipe,
          audioSender,
          videoSender
        ]);
  }

  
  /**
   * @param { !media_mojom_RemotingStopReason } reason
   */

  stop(
      reason) {
    this.proxy.sendMessage(
        2,
        Remoter_Stop_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSink(
      message) {
    this.proxy.sendMessage(
        3,
        Remoter_SendMessageToSink_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @return {!Promise<{
        rate: !number,
   *  }>}
   */

  estimateTransmissionCapacity() {
    return this.proxy.sendMessage(
        4,
        Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
        Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the Remoter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoterReceiver {
  /**
   * @param {!RemoterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        Remoter_Start_ParamsSpec.$,
        null,
        impl.start.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        Remoter_StartDataStreams_ParamsSpec.$,
        null,
        impl.startDataStreams.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        Remoter_Stop_ParamsSpec.$,
        null,
        impl.stop.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        Remoter_SendMessageToSink_ParamsSpec.$,
        null,
        impl.sendMessageToSink.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
        Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        impl.estimateTransmissionCapacity.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class Remoter {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.Remoter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoterRemote}
   */
  static getRemote() {
    let remote = new RemoterRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the Remoter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoterCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.start =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        Remoter_Start_ParamsSpec.$,
        null,
        this.start.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startDataStreams =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        Remoter_StartDataStreams_ParamsSpec.$,
        null,
        this.startDataStreams.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stop =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        Remoter_Stop_ParamsSpec.$,
        null,
        this.stop.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendMessageToSink =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        Remoter_SendMessageToSink_ParamsSpec.$,
        null,
        this.sendMessageToSink.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.estimateTransmissionCapacity =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
        Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
        this.estimateTransmissionCapacity.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemotingSourcePendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.RemotingSource', scope);
  }
}

/** @interface */
export class RemotingSourceInterface {
  
  /**
   * @param { !media_mojom_RemotingSinkMetadata } metadata
   */

  onSinkAvailable(metadata) {}
  
  /**
   */

  onSinkGone() {}
  
  /**
   */

  onStarted() {}
  
  /**
   * @param { !media_mojom_RemotingStartFailReason } reason
   */

  onStartFailed(reason) {}
  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSink(message) {}
  
  /**
   * @param { !media_mojom_RemotingStopReason } reason
   */

  onStopped(reason) {}
}

/**
 * @implements { RemotingSourceInterface }
 */
export class RemotingSourceRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemotingSourcePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemotingSourcePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemotingSourcePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media_mojom_RemotingSinkMetadata } metadata
   */

  onSinkAvailable(
      metadata) {
    this.proxy.sendMessage(
        0,
        RemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        [
          metadata
        ]);
  }

  
  /**
   */

  onSinkGone() {
    this.proxy.sendMessage(
        1,
        RemotingSource_OnSinkGone_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  onStarted() {
    this.proxy.sendMessage(
        2,
        RemotingSource_OnStarted_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !media_mojom_RemotingStartFailReason } reason
   */

  onStartFailed(
      reason) {
    this.proxy.sendMessage(
        3,
        RemotingSource_OnStartFailed_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSink(
      message) {
    this.proxy.sendMessage(
        4,
        RemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { !media_mojom_RemotingStopReason } reason
   */

  onStopped(
      reason) {
    this.proxy.sendMessage(
        5,
        RemotingSource_OnStopped_ParamsSpec.$,
        null,
        [
          reason
        ]);
  }
}

/**
 * An object which receives request messages for the RemotingSource
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemotingSourceReceiver {
  /**
   * @param {!RemotingSourceInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemotingSourceRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemotingSourceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingSourceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        impl.onSinkAvailable.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RemotingSource_OnSinkGone_ParamsSpec.$,
        null,
        impl.onSinkGone.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        RemotingSource_OnStarted_ParamsSpec.$,
        null,
        impl.onStarted.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        RemotingSource_OnStartFailed_ParamsSpec.$,
        null,
        impl.onStartFailed.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        RemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        impl.onMessageFromSink.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        RemotingSource_OnStopped_ParamsSpec.$,
        null,
        impl.onStopped.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemotingSource {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingSource";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemotingSourceRemote}
   */
  static getRemote() {
    let remote = new RemotingSourceRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemotingSource
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemotingSourceCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemotingSourceRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingSourceRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinkAvailable =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemotingSource_OnSinkAvailable_ParamsSpec.$,
        null,
        this.onSinkAvailable.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinkGone =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RemotingSource_OnSinkGone_ParamsSpec.$,
        null,
        this.onSinkGone.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStarted =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        RemotingSource_OnStarted_ParamsSpec.$,
        null,
        this.onStarted.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStartFailed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        RemotingSource_OnStartFailed_ParamsSpec.$,
        null,
        this.onStartFailed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMessageFromSink =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        RemotingSource_OnMessageFromSink_ParamsSpec.$,
        null,
        this.onMessageFromSink.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onStopped =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        RemotingSource_OnStopped_ParamsSpec.$,
        null,
        this.onStopped.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemoteePendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.Remotee', scope);
  }
}

/** @interface */
export class RemoteeInterface {
  
  /**
   * @param { !RemotingSinkRemote } sink
   */

  onRemotingSinkReady(sink) {}
  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSource(message) {}
  
  /**
   * @param { ?RemotingDataStreamReceiverRemote } audioStream
   * @param { ?RemotingDataStreamReceiverRemote } videoStream
   */

  startDataStreams(audioStream, videoStream) {}
  
  /**
   * @param { !number } audioFrameCount
   * @param { !number } videoFrameCount
   */

  onFlushUntil(audioFrameCount, videoFrameCount) {}
  
  /**
   * @param { !gfx_mojom_Size } size
   */

  onVideoNaturalSizeChange(size) {}
}

/**
 * @implements { RemoteeInterface }
 */
export class RemoteeRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemoteePendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemoteePendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemoteePendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !RemotingSinkRemote } sink
   */

  onRemotingSinkReady(
      sink) {
    this.proxy.sendMessage(
        0,
        Remotee_OnRemotingSinkReady_ParamsSpec.$,
        null,
        [
          sink
        ]);
  }

  
  /**
   * @param { !Array<!number> } message
   */

  sendMessageToSource(
      message) {
    this.proxy.sendMessage(
        1,
        Remotee_SendMessageToSource_ParamsSpec.$,
        null,
        [
          message
        ]);
  }

  
  /**
   * @param { ?RemotingDataStreamReceiverRemote } audioStream
   * @param { ?RemotingDataStreamReceiverRemote } videoStream
   */

  startDataStreams(
      audioStream,
      videoStream) {
    this.proxy.sendMessage(
        2,
        Remotee_StartDataStreams_ParamsSpec.$,
        null,
        [
          audioStream,
          videoStream
        ]);
  }

  
  /**
   * @param { !number } audioFrameCount
   * @param { !number } videoFrameCount
   */

  onFlushUntil(
      audioFrameCount,
      videoFrameCount) {
    this.proxy.sendMessage(
        3,
        Remotee_OnFlushUntil_ParamsSpec.$,
        null,
        [
          audioFrameCount,
          videoFrameCount
        ]);
  }

  
  /**
   * @param { !gfx_mojom_Size } size
   */

  onVideoNaturalSizeChange(
      size) {
    this.proxy.sendMessage(
        4,
        Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
        null,
        [
          size
        ]);
  }
}

/**
 * An object which receives request messages for the Remotee
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemoteeReceiver {
  /**
   * @param {!RemoteeInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemoteeRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemoteeRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteeRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        Remotee_OnRemotingSinkReady_ParamsSpec.$,
        null,
        impl.onRemotingSinkReady.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        Remotee_SendMessageToSource_ParamsSpec.$,
        null,
        impl.sendMessageToSource.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        Remotee_StartDataStreams_ParamsSpec.$,
        null,
        impl.startDataStreams.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        Remotee_OnFlushUntil_ParamsSpec.$,
        null,
        impl.onFlushUntil.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
        null,
        impl.onVideoNaturalSizeChange.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class Remotee {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.Remotee";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemoteeRemote}
   */
  static getRemote() {
    let remote = new RemoteeRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the Remotee
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemoteeCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemoteeRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemoteeRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRemotingSinkReady =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        Remotee_OnRemotingSinkReady_ParamsSpec.$,
        null,
        this.onRemotingSinkReady.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendMessageToSource =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        Remotee_SendMessageToSource_ParamsSpec.$,
        null,
        this.sendMessageToSource.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startDataStreams =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        Remotee_StartDataStreams_ParamsSpec.$,
        null,
        this.startDataStreams.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onFlushUntil =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        Remotee_OnFlushUntil_ParamsSpec.$,
        null,
        this.onFlushUntil.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onVideoNaturalSizeChange =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
        null,
        this.onVideoNaturalSizeChange.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemotingSinkPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.RemotingSink', scope);
  }
}

/** @interface */
export class RemotingSinkInterface {
  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSource(message) {}
}

/**
 * @implements { RemotingSinkInterface }
 */
export class RemotingSinkRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemotingSinkPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemotingSinkPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemotingSinkPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !Array<!number> } message
   */

  onMessageFromSource(
      message) {
    this.proxy.sendMessage(
        0,
        RemotingSink_OnMessageFromSource_ParamsSpec.$,
        null,
        [
          message
        ]);
  }
}

/**
 * An object which receives request messages for the RemotingSink
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemotingSinkReceiver {
  /**
   * @param {!RemotingSinkInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemotingSinkRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemotingSinkRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingSinkRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemotingSink_OnMessageFromSource_ParamsSpec.$,
        null,
        impl.onMessageFromSource.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemotingSink {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingSink";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemotingSinkRemote}
   */
  static getRemote() {
    let remote = new RemotingSinkRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemotingSink
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemotingSinkCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemotingSinkRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingSinkRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onMessageFromSource =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemotingSink_OnMessageFromSource_ParamsSpec.$,
        null,
        this.onMessageFromSource.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class RemotingDataStreamReceiverPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.RemotingDataStreamReceiver', scope);
  }
}

/** @interface */
export class RemotingDataStreamReceiverInterface {
  
  /**
   * @param { !MojoHandle } dataPipe
   */

  initializeDataPipe(dataPipe) {}
  
  /**
   * @param { !number } frameCount
   * @param { !media_mojom_DecoderBuffer } buffer
   */

  receiveFrame(frameCount, buffer) {}
  
  /**
   * @param { !number } frameCount
   */

  flushUntil(frameCount) {}
}

/**
 * @implements { RemotingDataStreamReceiverInterface }
 */
export class RemotingDataStreamReceiverRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!RemotingDataStreamReceiverPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          RemotingDataStreamReceiverPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!RemotingDataStreamReceiverPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !MojoHandle } dataPipe
   */

  initializeDataPipe(
      dataPipe) {
    this.proxy.sendMessage(
        0,
        RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
        null,
        [
          dataPipe
        ]);
  }

  
  /**
   * @param { !number } frameCount
   * @param { !media_mojom_DecoderBuffer } buffer
   */

  receiveFrame(
      frameCount,
      buffer) {
    this.proxy.sendMessage(
        1,
        RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
        null,
        [
          frameCount,
          buffer
        ]);
  }

  
  /**
   * @param { !number } frameCount
   */

  flushUntil(
      frameCount) {
    this.proxy.sendMessage(
        2,
        RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
        null,
        [
          frameCount
        ]);
  }
}

/**
 * An object which receives request messages for the RemotingDataStreamReceiver
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class RemotingDataStreamReceiverReceiver {
  /**
   * @param {!RemotingDataStreamReceiverInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!RemotingDataStreamReceiverRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        RemotingDataStreamReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingDataStreamReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
        null,
        impl.initializeDataPipe.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
        null,
        impl.receiveFrame.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
        null,
        impl.flushUntil.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class RemotingDataStreamReceiver {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.RemotingDataStreamReceiver";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!RemotingDataStreamReceiverRemote}
   */
  static getRemote() {
    let remote = new RemotingDataStreamReceiverRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the RemotingDataStreamReceiver
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class RemotingDataStreamReceiverCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      RemotingDataStreamReceiverRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!RemotingDataStreamReceiverRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.initializeDataPipe =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
        null,
        this.initializeDataPipe.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.receiveFrame =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
        null,
        this.receiveFrame.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.flushUntil =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
        null,
        this.flushUntil.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemoterFactory_Create_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingDataStreamSender_SendFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingDataStreamSender_CancelInFlightData_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remoter_Start_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remoter_StartDataStreams_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remoter_Stop_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remoter_SendMessageToSink_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remoter_EstimateTransmissionCapacity_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remoter_EstimateTransmissionCapacity_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSource_OnSinkAvailable_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSource_OnSinkGone_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSource_OnStarted_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSource_OnStartFailed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSource_OnMessageFromSink_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSource_OnStopped_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remotee_OnRemotingSinkReady_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remotee_SendMessageToSource_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remotee_StartDataStreams_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remotee_OnFlushUntil_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Remotee_OnVideoNaturalSizeChange_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingSink_OnMessageFromSource_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RemotingDataStreamReceiver_FlushUntil_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    RemoterFactory_Create_ParamsSpec.$,
    'RemoterFactory_Create_Params',
    [
      mojo.internal.StructField(
        'source', 0,
        0,
        mojo.internal.InterfaceProxy(RemotingSourceRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'remoter', 8,
        0,
        mojo.internal.InterfaceRequest(RemoterPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class RemoterFactory_Create_Params {
  constructor() {
    /** @type { !RemotingSourceRemote } */
    this.source;
    /** @type { !RemoterPendingReceiver } */
    this.remoter;
  }
}



mojo.internal.Struct(
    RemotingDataStreamSender_SendFrame_ParamsSpec.$,
    'RemotingDataStreamSender_SendFrame_Params',
    [
      mojo.internal.StructField(
        'frameSize', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingDataStreamSender_SendFrame_Params {
  constructor() {
    /** @type { !number } */
    this.frameSize;
  }
}



mojo.internal.Struct(
    RemotingDataStreamSender_CancelInFlightData_ParamsSpec.$,
    'RemotingDataStreamSender_CancelInFlightData_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class RemotingDataStreamSender_CancelInFlightData_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    Remoter_Start_ParamsSpec.$,
    'Remoter_Start_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class Remoter_Start_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    Remoter_StartDataStreams_ParamsSpec.$,
    'Remoter_StartDataStreams_Params',
    [
      mojo.internal.StructField(
        'audioPipe', 0,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'videoPipe', 4,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'audioSender', 8,
        0,
        mojo.internal.InterfaceRequest(RemotingDataStreamSenderPendingReceiver),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'videoSender', 12,
        0,
        mojo.internal.InterfaceRequest(RemotingDataStreamSenderPendingReceiver),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class Remoter_StartDataStreams_Params {
  constructor() {
    /** @type { (MojoHandle|undefined) } */
    this.audioPipe;
    /** @type { (MojoHandle|undefined) } */
    this.videoPipe;
    /** @type { (RemotingDataStreamSenderPendingReceiver|undefined) } */
    this.audioSender;
    /** @type { (RemotingDataStreamSenderPendingReceiver|undefined) } */
    this.videoSender;
  }
}



mojo.internal.Struct(
    Remoter_Stop_ParamsSpec.$,
    'Remoter_Stop_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media_mojom_RemotingStopReasonSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remoter_Stop_Params {
  constructor() {
    /** @type { !media_mojom_RemotingStopReason } */
    this.reason;
  }
}



mojo.internal.Struct(
    Remoter_SendMessageToSink_ParamsSpec.$,
    'Remoter_SendMessageToSink_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remoter_SendMessageToSink_Params {
  constructor() {
    /** @type { !Array<!number> } */
    this.message;
  }
}



mojo.internal.Struct(
    Remoter_EstimateTransmissionCapacity_ParamsSpec.$,
    'Remoter_EstimateTransmissionCapacity_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class Remoter_EstimateTransmissionCapacity_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    Remoter_EstimateTransmissionCapacity_ResponseParamsSpec.$,
    'Remoter_EstimateTransmissionCapacity_ResponseParams',
    [
      mojo.internal.StructField(
        'rate', 0,
        0,
        mojo.internal.Double,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remoter_EstimateTransmissionCapacity_ResponseParams {
  constructor() {
    /** @type { !number } */
    this.rate;
  }
}



mojo.internal.Struct(
    RemotingSource_OnSinkAvailable_ParamsSpec.$,
    'RemotingSource_OnSinkAvailable_Params',
    [
      mojo.internal.StructField(
        'metadata', 0,
        0,
        media_mojom_RemotingSinkMetadataSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingSource_OnSinkAvailable_Params {
  constructor() {
    /** @type { !media_mojom_RemotingSinkMetadata } */
    this.metadata;
  }
}



mojo.internal.Struct(
    RemotingSource_OnSinkGone_ParamsSpec.$,
    'RemotingSource_OnSinkGone_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class RemotingSource_OnSinkGone_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    RemotingSource_OnStarted_ParamsSpec.$,
    'RemotingSource_OnStarted_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class RemotingSource_OnStarted_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    RemotingSource_OnStartFailed_ParamsSpec.$,
    'RemotingSource_OnStartFailed_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media_mojom_RemotingStartFailReasonSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingSource_OnStartFailed_Params {
  constructor() {
    /** @type { !media_mojom_RemotingStartFailReason } */
    this.reason;
  }
}



mojo.internal.Struct(
    RemotingSource_OnMessageFromSink_ParamsSpec.$,
    'RemotingSource_OnMessageFromSink_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingSource_OnMessageFromSink_Params {
  constructor() {
    /** @type { !Array<!number> } */
    this.message;
  }
}



mojo.internal.Struct(
    RemotingSource_OnStopped_ParamsSpec.$,
    'RemotingSource_OnStopped_Params',
    [
      mojo.internal.StructField(
        'reason', 0,
        0,
        media_mojom_RemotingStopReasonSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingSource_OnStopped_Params {
  constructor() {
    /** @type { !media_mojom_RemotingStopReason } */
    this.reason;
  }
}



mojo.internal.Struct(
    Remotee_OnRemotingSinkReady_ParamsSpec.$,
    'Remotee_OnRemotingSinkReady_Params',
    [
      mojo.internal.StructField(
        'sink', 0,
        0,
        mojo.internal.InterfaceProxy(RemotingSinkRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remotee_OnRemotingSinkReady_Params {
  constructor() {
    /** @type { !RemotingSinkRemote } */
    this.sink;
  }
}



mojo.internal.Struct(
    Remotee_SendMessageToSource_ParamsSpec.$,
    'Remotee_SendMessageToSource_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remotee_SendMessageToSource_Params {
  constructor() {
    /** @type { !Array<!number> } */
    this.message;
  }
}



mojo.internal.Struct(
    Remotee_StartDataStreams_ParamsSpec.$,
    'Remotee_StartDataStreams_Params',
    [
      mojo.internal.StructField(
        'audioStream', 0,
        0,
        mojo.internal.InterfaceProxy(RemotingDataStreamReceiverRemote),
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'videoStream', 8,
        0,
        mojo.internal.InterfaceProxy(RemotingDataStreamReceiverRemote),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class Remotee_StartDataStreams_Params {
  constructor() {
    /** @type { (RemotingDataStreamReceiverRemote|undefined) } */
    this.audioStream;
    /** @type { (RemotingDataStreamReceiverRemote|undefined) } */
    this.videoStream;
  }
}



mojo.internal.Struct(
    Remotee_OnFlushUntil_ParamsSpec.$,
    'Remotee_OnFlushUntil_Params',
    [
      mojo.internal.StructField(
        'audioFrameCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'videoFrameCount', 4,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remotee_OnFlushUntil_Params {
  constructor() {
    /** @type { !number } */
    this.audioFrameCount;
    /** @type { !number } */
    this.videoFrameCount;
  }
}



mojo.internal.Struct(
    Remotee_OnVideoNaturalSizeChange_ParamsSpec.$,
    'Remotee_OnVideoNaturalSizeChange_Params',
    [
      mojo.internal.StructField(
        'size', 0,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Remotee_OnVideoNaturalSizeChange_Params {
  constructor() {
    /** @type { !gfx_mojom_Size } */
    this.size;
  }
}



mojo.internal.Struct(
    RemotingSink_OnMessageFromSource_ParamsSpec.$,
    'RemotingSink_OnMessageFromSource_Params',
    [
      mojo.internal.StructField(
        'message', 0,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingSink_OnMessageFromSource_Params {
  constructor() {
    /** @type { !Array<!number> } */
    this.message;
  }
}



mojo.internal.Struct(
    RemotingDataStreamReceiver_InitializeDataPipe_ParamsSpec.$,
    'RemotingDataStreamReceiver_InitializeDataPipe_Params',
    [
      mojo.internal.StructField(
        'dataPipe', 0,
        0,
        mojo.internal.Handle,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingDataStreamReceiver_InitializeDataPipe_Params {
  constructor() {
    /** @type { !MojoHandle } */
    this.dataPipe;
  }
}



mojo.internal.Struct(
    RemotingDataStreamReceiver_ReceiveFrame_ParamsSpec.$,
    'RemotingDataStreamReceiver_ReceiveFrame_Params',
    [
      mojo.internal.StructField(
        'frameCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'buffer', 8,
        0,
        media_mojom_DecoderBufferSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class RemotingDataStreamReceiver_ReceiveFrame_Params {
  constructor() {
    /** @type { !number } */
    this.frameCount;
    /** @type { !media_mojom_DecoderBuffer } */
    this.buffer;
  }
}



mojo.internal.Struct(
    RemotingDataStreamReceiver_FlushUntil_ParamsSpec.$,
    'RemotingDataStreamReceiver_FlushUntil_Params',
    [
      mojo.internal.StructField(
        'frameCount', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class RemotingDataStreamReceiver_FlushUntil_Params {
  constructor() {
    /** @type { !number } */
    this.frameCount;
  }
}

