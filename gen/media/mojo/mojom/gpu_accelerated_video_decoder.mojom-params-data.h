// media/mojo/mojom/gpu_accelerated_video_decoder.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::VideoDecodeAcceleratorConfig_Data> config;
  mojo::internal::AssociatedEndpointHandle_Data receiver;
  mojo::internal::AssociatedInterface_Data client;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data>;

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data();
  ~GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data) == 32,
              "Bad sizeof(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data)");
class  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data>;

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data();
  ~GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data)");
class  GpuAcceleratedVideoDecoder_Decode_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::BitstreamBuffer_Data> buffer;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_Decode_Params_Data>;

  GpuAcceleratedVideoDecoder_Decode_Params_Data();
  ~GpuAcceleratedVideoDecoder_Decode_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_Decode_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoder_Decode_Params_Data)");
class  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::PictureBufferAssignment_Data>>> assignments;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data>;

  GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data();
  ~GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data)");
class  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t picture_buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data>;

  GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data();
  ~GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data)");
class  GpuAcceleratedVideoDecoder_Flush_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_Flush_Params_Data>;

  GpuAcceleratedVideoDecoder_Flush_Params_Data();
  ~GpuAcceleratedVideoDecoder_Flush_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_Flush_Params_Data) == 8,
              "Bad sizeof(GpuAcceleratedVideoDecoder_Flush_Params_Data)");
class  GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data>;

  GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data();
  ~GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data) == 8,
              "Bad sizeof(GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data)");
class  GpuAcceleratedVideoDecoder_Reset_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_Reset_Params_Data>;

  GpuAcceleratedVideoDecoder_Reset_Params_Data();
  ~GpuAcceleratedVideoDecoder_Reset_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_Reset_Params_Data) == 8,
              "Bad sizeof(GpuAcceleratedVideoDecoder_Reset_Params_Data)");
class  GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data>;

  GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data();
  ~GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data) == 8,
              "Bad sizeof(GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data)");
class  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::OverlayInfo_Data> overlay_info;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data>;

  GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data();
  ~GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data)");
class  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data>;

  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data();
  ~GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data)");
class  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data>;

  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data();
  ~GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data)");
class  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t num_frames;
  int32_t format;
  uint32_t num_textures_per_frame;
  uint32_t texture_target;
  mojo::internal::Pointer<::gfx::mojom::internal::Size_Data> buffer_size;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data>;

  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data();
  ~GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data) == 32,
              "Bad sizeof(GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data)");
class  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PictureReadyParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data>;

  GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data();
  ~GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data)");
class  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t buffer_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data>;

  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data();
  ~GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data)");
class  GpuAcceleratedVideoDecoderClient_OnError_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t error_id;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<GpuAcceleratedVideoDecoderClient_OnError_Params_Data>;

  GpuAcceleratedVideoDecoderClient_OnError_Params_Data();
  ~GpuAcceleratedVideoDecoderClient_OnError_Params_Data() = delete;
};
static_assert(sizeof(GpuAcceleratedVideoDecoderClient_OnError_Params_Data) == 16,
              "Bad sizeof(GpuAcceleratedVideoDecoderClient_OnError_Params_Data)");

}  // namespace internal


class GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetConfigDataView(
      VideoDecodeAcceleratorConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfig(UserType* output) {
    
    auto* pointer = data_->config.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoDecodeAcceleratorConfigDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::media::mojom::GpuAcceleratedVideoDecoderAssociatedRequestDataView>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeClient() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<::media::mojom::GpuAcceleratedVideoDecoderClientAssociatedPtrInfoDataView>(
            &data_->client, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsDataView {
 public:
  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsDataView() = default;

  GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsDataView(
      internal::GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoder_Decode_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_Decode_ParamsDataView() = default;

  GpuAcceleratedVideoDecoder_Decode_ParamsDataView(
      internal::GpuAcceleratedVideoDecoder_Decode_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBufferDataView(
      BitstreamBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBuffer(UserType* output) {
    
    auto* pointer = data_->buffer.Get();
    return mojo::internal::Deserialize<::media::mojom::BitstreamBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuAcceleratedVideoDecoder_Decode_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsDataView() = default;

  GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsDataView(
      internal::GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAssignmentsDataView(
      mojo::ArrayDataView<PictureBufferAssignmentDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAssignments(UserType* output) {
    
    auto* pointer = data_->assignments.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::PictureBufferAssignmentDataView>>(
        pointer, output, message_);
  }
 private:
  internal::GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsDataView() = default;

  GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsDataView(
      internal::GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t picture_buffer_id() const {
    return data_->picture_buffer_id;
  }
 private:
  internal::GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoder_Flush_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_Flush_ParamsDataView() = default;

  GpuAcceleratedVideoDecoder_Flush_ParamsDataView(
      internal::GpuAcceleratedVideoDecoder_Flush_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuAcceleratedVideoDecoder_Flush_Params_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoder_Flush_ResponseParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_Flush_ResponseParamsDataView() = default;

  GpuAcceleratedVideoDecoder_Flush_ResponseParamsDataView(
      internal::GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuAcceleratedVideoDecoder_Flush_ResponseParams_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoder_Reset_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_Reset_ParamsDataView() = default;

  GpuAcceleratedVideoDecoder_Reset_ParamsDataView(
      internal::GpuAcceleratedVideoDecoder_Reset_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuAcceleratedVideoDecoder_Reset_Params_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoder_Reset_ResponseParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_Reset_ResponseParamsDataView() = default;

  GpuAcceleratedVideoDecoder_Reset_ResponseParamsDataView(
      internal::GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::GpuAcceleratedVideoDecoder_Reset_ResponseParams_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsDataView() = default;

  GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsDataView(
      internal::GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOverlayInfoDataView(
      ::media::mojom::OverlayInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOverlayInfo(UserType* output) {
    
    auto* pointer = data_->overlay_info.Get();
    return mojo::internal::Deserialize<::media::mojom::OverlayInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuAcceleratedVideoDecoder_SetOverlayInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
 private:
  internal::GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t num_frames() const {
    return data_->num_frames;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFormat(UserType* output) const {
    auto data_value = data_->format;
    return mojo::internal::Deserialize<::media::mojom::VideoPixelFormat>(
        data_value, output);
  }
  ::media::mojom::VideoPixelFormat format() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::VideoPixelFormat>(data_->format));
  }
  uint32_t num_textures_per_frame() const {
    return data_->num_textures_per_frame;
  }
  inline void GetBufferSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBufferSize(UserType* output) {
    
    auto* pointer = data_->buffer_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  uint32_t texture_target() const {
    return data_->texture_target;
  }
 private:
  internal::GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      PictureReadyParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::media::mojom::PictureReadyParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::GpuAcceleratedVideoDecoderClient_OnPictureReady_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
 private:
  internal::GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params_Data* data_ = nullptr;
};



class GpuAcceleratedVideoDecoderClient_OnError_ParamsDataView {
 public:
  GpuAcceleratedVideoDecoderClient_OnError_ParamsDataView() = default;

  GpuAcceleratedVideoDecoderClient_OnError_ParamsDataView(
      internal::GpuAcceleratedVideoDecoderClient_OnError_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t error_id() const {
    return data_->error_id;
  }
 private:
  internal::GpuAcceleratedVideoDecoderClient_OnError_Params_Data* data_ = nullptr;
};


inline void GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsDataView::GetConfigDataView(
    VideoDecodeAcceleratorConfigDataView* output) {
  auto pointer = data_->config.Get();
  *output = VideoDecodeAcceleratorConfigDataView(pointer, message_);
}




inline void GpuAcceleratedVideoDecoder_Decode_ParamsDataView::GetBufferDataView(
    BitstreamBufferDataView* output) {
  auto pointer = data_->buffer.Get();
  *output = BitstreamBufferDataView(pointer, message_);
}


inline void GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsDataView::GetAssignmentsDataView(
    mojo::ArrayDataView<PictureBufferAssignmentDataView>* output) {
  auto pointer = data_->assignments.Get();
  *output = mojo::ArrayDataView<PictureBufferAssignmentDataView>(pointer, message_);
}












inline void GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsDataView::GetOverlayInfoDataView(
    ::media::mojom::OverlayInfoDataView* output) {
  auto pointer = data_->overlay_info.Get();
  *output = ::media::mojom::OverlayInfoDataView(pointer, message_);
}






inline void GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsDataView::GetBufferSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->buffer_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}


inline void GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsDataView::GetParamsDataView(
    PictureReadyParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = PictureReadyParamsDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_GPU_ACCELERATED_VIDEO_DECODER_MOJOM_PARAMS_DATA_H_