// media/mojo/mojom/android_overlay.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('media.mojom');








/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.AndroidOverlayProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.AndroidOverlayProvider.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.AndroidOverlayProviderInterface }
 */
media.mojom.AndroidOverlayProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.AndroidOverlayProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.AndroidOverlayProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.AndroidOverlayProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !media.mojom.AndroidOverlayPendingReceiver } overlay
   * @param { !media.mojom.AndroidOverlayClientRemote } client
   * @param { !media.mojom.AndroidOverlayConfig } config
   */

  createOverlay(
      overlay,
      client,
      config) {
    this.proxy.sendMessage(
        0,
        media.mojom.AndroidOverlayProvider_CreateOverlay_ParamsSpec.$,
        null,
        [
          overlay,
          client,
          config
        ]);
  }
};

/**
 * An object which receives request messages for the AndroidOverlayProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.AndroidOverlayProviderReceiver = class {
  /**
   * @param {!media.mojom.AndroidOverlayProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.AndroidOverlayProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.AndroidOverlayProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AndroidOverlayProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.AndroidOverlayProvider_CreateOverlay_ParamsSpec.$,
        null,
        impl.createOverlay.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.AndroidOverlayProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.AndroidOverlayProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.AndroidOverlayProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.AndroidOverlayProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AndroidOverlayProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.AndroidOverlayProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.AndroidOverlayProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AndroidOverlayProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createOverlay =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.AndroidOverlayProvider_CreateOverlay_ParamsSpec.$,
        null,
        this.createOverlay.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.AndroidOverlayPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.AndroidOverlay.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.AndroidOverlayInterface }
 */
media.mojom.AndroidOverlayRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.AndroidOverlayPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.AndroidOverlayPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.AndroidOverlayPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !gfx.mojom.Rect } rect
   */

  scheduleLayout(
      rect) {
    this.proxy.sendMessage(
        0,
        media.mojom.AndroidOverlay_ScheduleLayout_ParamsSpec.$,
        null,
        [
          rect
        ]);
  }
};

/**
 * An object which receives request messages for the AndroidOverlay
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.AndroidOverlayReceiver = class {
  /**
   * @param {!media.mojom.AndroidOverlayInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.AndroidOverlayRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.AndroidOverlayRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AndroidOverlayRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.AndroidOverlay_ScheduleLayout_ParamsSpec.$,
        null,
        impl.scheduleLayout.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.AndroidOverlay = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.AndroidOverlay";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.AndroidOverlayRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.AndroidOverlayRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AndroidOverlay
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.AndroidOverlayCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.AndroidOverlayRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AndroidOverlayRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.scheduleLayout =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.AndroidOverlay_ScheduleLayout_ParamsSpec.$,
        null,
        this.scheduleLayout.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
media.mojom.AndroidOverlayClientPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        media.mojom.AndroidOverlayClient.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { media.mojom.AndroidOverlayClientInterface }
 */
media.mojom.AndroidOverlayClientRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!media.mojom.AndroidOverlayClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          media.mojom.AndroidOverlayClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!media.mojom.AndroidOverlayClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !bigint } surfaceKey
   */

  onSurfaceReady(
      surfaceKey) {
    this.proxy.sendMessage(
        0,
        media.mojom.AndroidOverlayClient_OnSurfaceReady_ParamsSpec.$,
        null,
        [
          surfaceKey
        ]);
  }

  
  /**
   */

  onDestroyed() {
    this.proxy.sendMessage(
        1,
        media.mojom.AndroidOverlayClient_OnDestroyed_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  onSynchronouslyDestroyed() {
    return this.proxy.sendMessage(
        2,
        media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsSpec.$,
        media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !boolean } isPowerEfficient
   */

  onPowerEfficientState(
      isPowerEfficient) {
    this.proxy.sendMessage(
        3,
        media.mojom.AndroidOverlayClient_OnPowerEfficientState_ParamsSpec.$,
        null,
        [
          isPowerEfficient
        ]);
  }
};

/**
 * An object which receives request messages for the AndroidOverlayClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
media.mojom.AndroidOverlayClientReceiver = class {
  /**
   * @param {!media.mojom.AndroidOverlayClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!media.mojom.AndroidOverlayClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        media.mojom.AndroidOverlayClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AndroidOverlayClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        media.mojom.AndroidOverlayClient_OnSurfaceReady_ParamsSpec.$,
        null,
        impl.onSurfaceReady.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        media.mojom.AndroidOverlayClient_OnDestroyed_ParamsSpec.$,
        null,
        impl.onDestroyed.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsSpec.$,
        media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsSpec.$,
        impl.onSynchronouslyDestroyed.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        media.mojom.AndroidOverlayClient_OnPowerEfficientState_ParamsSpec.$,
        null,
        impl.onPowerEfficientState.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
media.mojom.AndroidOverlayClient = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.AndroidOverlayClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!media.mojom.AndroidOverlayClientRemote}
   * @export
   */
  static getRemote() {
    let remote = new media.mojom.AndroidOverlayClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the AndroidOverlayClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
media.mojom.AndroidOverlayClientCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      media.mojom.AndroidOverlayClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!media.mojom.AndroidOverlayClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSurfaceReady =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        media.mojom.AndroidOverlayClient_OnSurfaceReady_ParamsSpec.$,
        null,
        this.onSurfaceReady.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onDestroyed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        media.mojom.AndroidOverlayClient_OnDestroyed_ParamsSpec.$,
        null,
        this.onDestroyed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSynchronouslyDestroyed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsSpec.$,
        media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsSpec.$,
        this.onSynchronouslyDestroyed.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPowerEfficientState =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        media.mojom.AndroidOverlayClient_OnPowerEfficientState_ParamsSpec.$,
        null,
        this.onPowerEfficientState.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayConfigSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayProvider_CreateOverlay_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlay_ScheduleLayout_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayClient_OnSurfaceReady_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayClient_OnDestroyed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
media.mojom.AndroidOverlayClient_OnPowerEfficientState_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    media.mojom.AndroidOverlayConfigSpec.$,
    'AndroidOverlayConfig',
    [
      mojo.internal.StructField(
        'routingToken', 0,
        0,
        mojoBase.mojom.UnguessableTokenSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'rect', 8,
        0,
        gfx.mojom.RectSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'secure', 16,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'powerEfficient', 16,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.AndroidOverlayConfig = class {
  constructor() {
    /** @export { !mojoBase.mojom.UnguessableToken } */
    this.routingToken;
    /** @export { !gfx.mojom.Rect } */
    this.rect;
    /** @export { !boolean } */
    this.secure;
    /** @export { !boolean } */
    this.powerEfficient;
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlayProvider_CreateOverlay_ParamsSpec.$,
    'AndroidOverlayProvider_CreateOverlay_Params',
    [
      mojo.internal.StructField(
        'overlay', 0,
        0,
        mojo.internal.InterfaceRequest(media.mojom.AndroidOverlayPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'client', 4,
        0,
        mojo.internal.InterfaceProxy(media.mojom.AndroidOverlayClientRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'config', 16,
        0,
        media.mojom.AndroidOverlayConfigSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
media.mojom.AndroidOverlayProvider_CreateOverlay_Params = class {
  constructor() {
    /** @export { !media.mojom.AndroidOverlayPendingReceiver } */
    this.overlay;
    /** @export { !media.mojom.AndroidOverlayClientRemote } */
    this.client;
    /** @export { !media.mojom.AndroidOverlayConfig } */
    this.config;
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlay_ScheduleLayout_ParamsSpec.$,
    'AndroidOverlay_ScheduleLayout_Params',
    [
      mojo.internal.StructField(
        'rect', 0,
        0,
        gfx.mojom.RectSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AndroidOverlay_ScheduleLayout_Params = class {
  constructor() {
    /** @export { !gfx.mojom.Rect } */
    this.rect;
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlayClient_OnSurfaceReady_ParamsSpec.$,
    'AndroidOverlayClient_OnSurfaceReady_Params',
    [
      mojo.internal.StructField(
        'surfaceKey', 0,
        0,
        mojo.internal.Uint64,
        BigInt(0),
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AndroidOverlayClient_OnSurfaceReady_Params = class {
  constructor() {
    /** @export { !bigint } */
    this.surfaceKey;
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlayClient_OnDestroyed_ParamsSpec.$,
    'AndroidOverlayClient_OnDestroyed_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.AndroidOverlayClient_OnDestroyed_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ParamsSpec.$,
    'AndroidOverlayClient_OnSynchronouslyDestroyed_Params',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParamsSpec.$,
    'AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams',
    [
    ],
    [[0, 8],]);





/** @record */
media.mojom.AndroidOverlayClient_OnSynchronouslyDestroyed_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    media.mojom.AndroidOverlayClient_OnPowerEfficientState_ParamsSpec.$,
    'AndroidOverlayClient_OnPowerEfficientState_Params',
    [
      mojo.internal.StructField(
        'isPowerEfficient', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
media.mojom.AndroidOverlayClient_OnPowerEfficientState_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.isPowerEfficient;
  }
};


