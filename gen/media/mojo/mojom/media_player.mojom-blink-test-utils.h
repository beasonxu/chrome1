// media/mojo/mojom/media_player.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_MEDIA_PLAYER_MOJOM_BLINK_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_MEDIA_PLAYER_MOJOM_BLINK_TEST_UTILS_H_

#include "media/mojo/mojom/media_player.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace media {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT MediaPlayerInterceptorForTesting : public MediaPlayer {
  virtual MediaPlayer* GetForwardingInterface() = 0;
  void RequestPlay() override;
  void RequestPause(bool triggered_by_user) override;
  void RequestSeekForward(::base::TimeDelta seek_time) override;
  void RequestSeekBackward(::base::TimeDelta seek_time) override;
  void RequestSeekTo(::base::TimeDelta seek_time) override;
  void RequestEnterPictureInPicture() override;
  void RequestExitPictureInPicture() override;
  void RequestMute(bool mute) override;
  void SetVolumeMultiplier(double multiplier) override;
  void SetPersistentState(bool persistent) override;
  void SetPowerExperimentState(bool enabled) override;
  void SetAudioSinkId(const WTF::String& sink_id) override;
  void SuspendForFrameClosed() override;
};
class BLINK_PLATFORM_EXPORT MediaPlayerAsyncWaiter {
 public:
  explicit MediaPlayerAsyncWaiter(MediaPlayer* proxy);

  MediaPlayerAsyncWaiter(const MediaPlayerAsyncWaiter&) = delete;
  MediaPlayerAsyncWaiter& operator=(const MediaPlayerAsyncWaiter&) = delete;

  ~MediaPlayerAsyncWaiter();

 private:
  MediaPlayer* const proxy_;
};


class BLINK_PLATFORM_EXPORT MediaPlayerObserverClientInterceptorForTesting : public MediaPlayerObserverClient {
  virtual MediaPlayerObserverClient* GetForwardingInterface() = 0;
  void GetHasPlayedBefore(GetHasPlayedBeforeCallback callback) override;
};
class BLINK_PLATFORM_EXPORT MediaPlayerObserverClientAsyncWaiter {
 public:
  explicit MediaPlayerObserverClientAsyncWaiter(MediaPlayerObserverClient* proxy);

  MediaPlayerObserverClientAsyncWaiter(const MediaPlayerObserverClientAsyncWaiter&) = delete;
  MediaPlayerObserverClientAsyncWaiter& operator=(const MediaPlayerObserverClientAsyncWaiter&) = delete;

  ~MediaPlayerObserverClientAsyncWaiter();
  void GetHasPlayedBefore(
      bool* out_has_played_before);

 private:
  MediaPlayerObserverClient* const proxy_;
};


class BLINK_PLATFORM_EXPORT MediaPlayerObserverInterceptorForTesting : public MediaPlayerObserver {
  virtual MediaPlayerObserver* GetForwardingInterface() = 0;
  void OnMediaPlaying() override;
  void OnMediaPaused(bool stream_ended) override;
  void OnMutedStatusChanged(bool muted) override;
  void OnMediaMetadataChanged(bool has_audio, bool has_video, ::media::MediaContentType content_type) override;
  void OnMediaPositionStateChanged(::media_session::mojom::blink::MediaPositionPtr media_position) override;
  void OnMediaEffectivelyFullscreenChanged(::blink::WebFullscreenVideoStatus status) override;
  void OnMediaSizeChanged(const ::gfx::Size& size) override;
  void OnPictureInPictureAvailabilityChanged(bool available) override;
  void OnAudioOutputSinkChanged(const WTF::String& hashed_device_id) override;
  void OnUseAudioServiceChanged(bool uses_audio_service) override;
  void OnAudioOutputSinkChangingDisabled() override;
};
class BLINK_PLATFORM_EXPORT MediaPlayerObserverAsyncWaiter {
 public:
  explicit MediaPlayerObserverAsyncWaiter(MediaPlayerObserver* proxy);

  MediaPlayerObserverAsyncWaiter(const MediaPlayerObserverAsyncWaiter&) = delete;
  MediaPlayerObserverAsyncWaiter& operator=(const MediaPlayerObserverAsyncWaiter&) = delete;

  ~MediaPlayerObserverAsyncWaiter();

 private:
  MediaPlayerObserver* const proxy_;
};


class BLINK_PLATFORM_EXPORT MediaPlayerHostInterceptorForTesting : public MediaPlayerHost {
  virtual MediaPlayerHost* GetForwardingInterface() = 0;
  void OnMediaPlayerAdded(::mojo::PendingAssociatedRemote<MediaPlayer> player_remote, ::mojo::PendingAssociatedReceiver<MediaPlayerObserver> observer, int32_t player_id) override;
};
class BLINK_PLATFORM_EXPORT MediaPlayerHostAsyncWaiter {
 public:
  explicit MediaPlayerHostAsyncWaiter(MediaPlayerHost* proxy);

  MediaPlayerHostAsyncWaiter(const MediaPlayerHostAsyncWaiter&) = delete;
  MediaPlayerHostAsyncWaiter& operator=(const MediaPlayerHostAsyncWaiter&) = delete;

  ~MediaPlayerHostAsyncWaiter();

 private:
  MediaPlayerHost* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_MEDIA_PLAYER_MOJOM_BLINK_TEST_UTILS_H_