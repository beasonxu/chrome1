// media/mojo/mojom/webrtc_video_perf.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_WEBRTC_VIDEO_PERF_MOJOM_SHARED_INTERNAL_H_
#define MEDIA_MOJO_MOJOM_WEBRTC_VIDEO_PERF_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "media/mojo/mojom/media_types.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace media {
namespace mojom {
namespace internal {
class WebrtcPredictionFeatures_Data;
class WebrtcVideoStats_Data;

#pragma pack(push, 1)
class  WebrtcPredictionFeatures_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_decode_stats : 1;
  uint8_t hardware_accelerated : 1;
  uint8_t pad1_[3];
  int32_t profile;
  int32_t video_pixels;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebrtcPredictionFeatures_Data>;

  WebrtcPredictionFeatures_Data();
  ~WebrtcPredictionFeatures_Data() = delete;
};
static_assert(sizeof(WebrtcPredictionFeatures_Data) == 24,
              "Bad sizeof(WebrtcPredictionFeatures_Data)");
// Used by WebrtcPredictionFeatures::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebrtcPredictionFeatures_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebrtcPredictionFeatures_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebrtcPredictionFeatures_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebrtcPredictionFeatures_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebrtcPredictionFeatures_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  WebrtcVideoStats_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t frames_processed;
  uint32_t key_frames_processed;
  float p99_processing_time_ms;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<WebrtcVideoStats_Data>;

  WebrtcVideoStats_Data();
  ~WebrtcVideoStats_Data() = delete;
};
static_assert(sizeof(WebrtcVideoStats_Data) == 24,
              "Bad sizeof(WebrtcVideoStats_Data)");
// Used by WebrtcVideoStats::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebrtcVideoStats_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebrtcVideoStats_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebrtcVideoStats_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebrtcVideoStats_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebrtcVideoStats_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_WEBRTC_VIDEO_PERF_MOJOM_SHARED_INTERNAL_H_