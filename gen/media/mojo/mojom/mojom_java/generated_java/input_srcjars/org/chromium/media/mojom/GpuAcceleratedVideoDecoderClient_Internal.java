// GpuAcceleratedVideoDecoderClient_Internal.java is auto generated by mojom_bindings_generator.py, do not edit


// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/mojom/gpu_accelerated_video_decoder.mojom
//

package org.chromium.media.mojom;

import androidx.annotation.IntDef;


class GpuAcceleratedVideoDecoderClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<GpuAcceleratedVideoDecoderClient, GpuAcceleratedVideoDecoderClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<GpuAcceleratedVideoDecoderClient, GpuAcceleratedVideoDecoderClient.Proxy>() {

        @Override
        public String getName() {
            return "media.mojom.GpuAcceleratedVideoDecoderClient";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, GpuAcceleratedVideoDecoderClient impl) {
            return new Stub(core, impl);
        }

        @Override
        public GpuAcceleratedVideoDecoderClient[] buildArray(int size) {
          return new GpuAcceleratedVideoDecoderClient[size];
        }
    };


    private static final int ON_INITIALIZATION_COMPLETE_ORDINAL = 0;

    private static final int ON_BITSTREAM_BUFFER_PROCESSED_ORDINAL = 1;

    private static final int ON_PROVIDE_PICTURE_BUFFERS_ORDINAL = 2;

    private static final int ON_PICTURE_READY_ORDINAL = 3;

    private static final int ON_DISMISS_PICTURE_BUFFER_ORDINAL = 4;

    private static final int ON_ERROR_ORDINAL = 5;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements GpuAcceleratedVideoDecoderClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onInitializationComplete(
boolean success) {

            GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams _message = new GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams();

            _message.success = success;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_INITIALIZATION_COMPLETE_ORDINAL)));

        }


        @Override
        public void onBitstreamBufferProcessed(
int bufferId) {

            GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams _message = new GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams();

            _message.bufferId = bufferId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_BITSTREAM_BUFFER_PROCESSED_ORDINAL)));

        }


        @Override
        public void onProvidePictureBuffers(
int numFrames, int format, int numTexturesPerFrame, org.chromium.gfx.mojom.Size bufferSize, int textureTarget) {

            GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams _message = new GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams();

            _message.numFrames = numFrames;

            _message.format = format;

            _message.numTexturesPerFrame = numTexturesPerFrame;

            _message.bufferSize = bufferSize;

            _message.textureTarget = textureTarget;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PROVIDE_PICTURE_BUFFERS_ORDINAL)));

        }


        @Override
        public void onPictureReady(
PictureReadyParams params) {

            GpuAcceleratedVideoDecoderClientOnPictureReadyParams _message = new GpuAcceleratedVideoDecoderClientOnPictureReadyParams();

            _message.params = params;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_PICTURE_READY_ORDINAL)));

        }


        @Override
        public void onDismissPictureBuffer(
int bufferId) {

            GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams _message = new GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams();

            _message.bufferId = bufferId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DISMISS_PICTURE_BUFFER_ORDINAL)));

        }


        @Override
        public void onError(
int errorId) {

            GpuAcceleratedVideoDecoderClientOnErrorParams _message = new GpuAcceleratedVideoDecoderClientOnErrorParams();

            _message.errorId = errorId;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_ERROR_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<GpuAcceleratedVideoDecoderClient> {

        Stub(org.chromium.mojo.system.Core core, GpuAcceleratedVideoDecoderClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.NO_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                GpuAcceleratedVideoDecoderClient_Internal.MANAGER, messageWithHeader);





                    case ON_INITIALIZATION_COMPLETE_ORDINAL: {

                        GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams data =
                                GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onInitializationComplete(data.success);
                        return true;
                    }





                    case ON_BITSTREAM_BUFFER_PROCESSED_ORDINAL: {

                        GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams data =
                                GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onBitstreamBufferProcessed(data.bufferId);
                        return true;
                    }





                    case ON_PROVIDE_PICTURE_BUFFERS_ORDINAL: {

                        GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams data =
                                GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onProvidePictureBuffers(data.numFrames, data.format, data.numTexturesPerFrame, data.bufferSize, data.textureTarget);
                        return true;
                    }





                    case ON_PICTURE_READY_ORDINAL: {

                        GpuAcceleratedVideoDecoderClientOnPictureReadyParams data =
                                GpuAcceleratedVideoDecoderClientOnPictureReadyParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onPictureReady(data.params);
                        return true;
                    }





                    case ON_DISMISS_PICTURE_BUFFER_ORDINAL: {

                        GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams data =
                                GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onDismissPictureBuffer(data.bufferId);
                        return true;
                    }





                    case ON_ERROR_ORDINAL: {

                        GpuAcceleratedVideoDecoderClientOnErrorParams data =
                                GpuAcceleratedVideoDecoderClientOnErrorParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onError(data.errorId);
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                int flags = org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG;
                if (header.hasFlag(org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG)) {
                    flags = flags | org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_SYNC_FLAG;
                }
                if (!header.validateHeader(flags)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), GpuAcceleratedVideoDecoderClient_Internal.MANAGER, messageWithHeader, receiver);














                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean success;

        private GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams() {
            this(0);
        }

        public static GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuAcceleratedVideoDecoderClientOnInitializationCompleteParams(elementsOrVersion);
                    {
                        
                    result.success = decoder0.readBoolean(8, 0);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.success, 8, 0);
        }
    }



    
    static final class GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bufferId;

        private GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams() {
            this(0);
        }

        public static GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuAcceleratedVideoDecoderClientOnBitstreamBufferProcessedParams(elementsOrVersion);
                    {
                        
                    result.bufferId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferId, 8);
        }
    }



    
    static final class GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int numFrames;
        public int format;
        public int numTexturesPerFrame;
        public org.chromium.gfx.mojom.Size bufferSize;
        public int textureTarget;

        private GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams() {
            this(0);
        }

        public static GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuAcceleratedVideoDecoderClientOnProvidePictureBuffersParams(elementsOrVersion);
                    {
                        
                    result.numFrames = decoder0.readInt(8);
                    }
                    {
                        
                    result.format = decoder0.readInt(12);
                        VideoPixelFormat.validate(result.format);
                        result.format = VideoPixelFormat.toKnownValue(result.format);
                    }
                    {
                        
                    result.numTexturesPerFrame = decoder0.readInt(16);
                    }
                    {
                        
                    result.textureTarget = decoder0.readInt(20);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.bufferSize = org.chromium.gfx.mojom.Size.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.numFrames, 8);
            
            encoder0.encode(this.format, 12);
            
            encoder0.encode(this.numTexturesPerFrame, 16);
            
            encoder0.encode(this.textureTarget, 20);
            
            encoder0.encode(this.bufferSize, 24, false);
        }
    }



    
    static final class GpuAcceleratedVideoDecoderClientOnPictureReadyParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PictureReadyParams params;

        private GpuAcceleratedVideoDecoderClientOnPictureReadyParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuAcceleratedVideoDecoderClientOnPictureReadyParams() {
            this(0);
        }

        public static GpuAcceleratedVideoDecoderClientOnPictureReadyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuAcceleratedVideoDecoderClientOnPictureReadyParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuAcceleratedVideoDecoderClientOnPictureReadyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuAcceleratedVideoDecoderClientOnPictureReadyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuAcceleratedVideoDecoderClientOnPictureReadyParams(elementsOrVersion);
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.params = PictureReadyParams.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.params, 8, false);
        }
    }



    
    static final class GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int bufferId;

        private GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams() {
            this(0);
        }

        public static GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuAcceleratedVideoDecoderClientOnDismissPictureBufferParams(elementsOrVersion);
                    {
                        
                    result.bufferId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.bufferId, 8);
        }
    }



    
    static final class GpuAcceleratedVideoDecoderClientOnErrorParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int errorId;

        private GpuAcceleratedVideoDecoderClientOnErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public GpuAcceleratedVideoDecoderClientOnErrorParams() {
            this(0);
        }

        public static GpuAcceleratedVideoDecoderClientOnErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static GpuAcceleratedVideoDecoderClientOnErrorParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static GpuAcceleratedVideoDecoderClientOnErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            GpuAcceleratedVideoDecoderClientOnErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new GpuAcceleratedVideoDecoderClientOnErrorParams(elementsOrVersion);
                    {
                        
                    result.errorId = decoder0.readInt(8);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.errorId, 8);
        }
    }



}
