// media/mojo/mojom/interface_factory.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_BLINK_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_BLINK_TEST_UTILS_H_

#include "media/mojo/mojom/interface_factory.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace media {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT InterfaceFactoryInterceptorForTesting : public InterfaceFactory {
  virtual InterfaceFactory* GetForwardingInterface() = 0;
  void CreateAudioDecoder(::mojo::PendingReceiver<::media::mojom::blink::AudioDecoder> audio_decoder) override;
  void CreateVideoDecoder(::mojo::PendingReceiver<::media::mojom::blink::VideoDecoder> video_decoder, ::mojo::PendingRemote<::media::stable::mojom::blink::StableVideoDecoder> dst_video_decoder) override;
  void CreateAudioEncoder(::mojo::PendingReceiver<::media::mojom::blink::AudioEncoder> audio_encoder) override;
  void CreateDefaultRenderer(const WTF::String& audio_device_id, ::mojo::PendingReceiver<::media::mojom::blink::Renderer> renderer) override;
  void CreateMediaPlayerRenderer(::mojo::PendingRemote<::media::mojom::blink::MediaPlayerRendererClientExtension> client_extension, ::mojo::PendingReceiver<::media::mojom::blink::Renderer> renderer, ::mojo::PendingReceiver<::media::mojom::blink::MediaPlayerRendererExtension> renderer_extension) override;
  void CreateFlingingRenderer(const WTF::String& presentation_id, ::mojo::PendingRemote<::media::mojom::blink::FlingingRendererClientExtension> client_extension, ::mojo::PendingReceiver<::media::mojom::blink::Renderer> renderer) override;
  void CreateCdm(::media::mojom::blink::CdmConfigPtr cdm_config, CreateCdmCallback callback) override;
};
class BLINK_PLATFORM_EXPORT InterfaceFactoryAsyncWaiter {
 public:
  explicit InterfaceFactoryAsyncWaiter(InterfaceFactory* proxy);

  InterfaceFactoryAsyncWaiter(const InterfaceFactoryAsyncWaiter&) = delete;
  InterfaceFactoryAsyncWaiter& operator=(const InterfaceFactoryAsyncWaiter&) = delete;

  ~InterfaceFactoryAsyncWaiter();
  void CreateCdm(
      ::media::mojom::blink::CdmConfigPtr cdm_config, ::mojo::PendingRemote<::media::mojom::blink::ContentDecryptionModule>* out_cdm, ::media::mojom::blink::CdmContextPtr* out_cdm_context, WTF::String* out_error_message);

 private:
  InterfaceFactory* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_BLINK_TEST_UTILS_H_