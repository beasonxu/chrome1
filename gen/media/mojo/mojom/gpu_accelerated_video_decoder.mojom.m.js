// media/mojo/mojom/gpu_accelerated_video_decoder.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../mojo/public/js/bindings.js';

import {
  Rect as gfx_mojom_Rect,
  RectSpec as gfx_mojom_RectSpec,
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  ColorSpace as gfx_mojom_ColorSpace,
  ColorSpaceSpec as gfx_mojom_ColorSpaceSpec
} from '../../../ui/gfx/mojom/color_space.mojom.m.js';

import {
  VideoPixelFormat as media_mojom_VideoPixelFormat,
  VideoPixelFormatSpec as media_mojom_VideoPixelFormatSpec
} from './media_types.mojom.m.js';

import {
  OverlayInfo as media_mojom_OverlayInfo,
  OverlayInfoSpec as media_mojom_OverlayInfoSpec
} from './video_decoder.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class GpuAcceleratedVideoDecoderProviderPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.GpuAcceleratedVideoDecoderProvider', scope);
  }
}

/** @interface */
export class GpuAcceleratedVideoDecoderProviderInterface {
  
  /**
   * @param { !VideoDecodeAcceleratorConfig } config
   * @param { !Object } receiver
   * @param { !Object } client
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  createAcceleratedVideoDecoder(config, receiver, client) {}
}

/**
 * @implements { GpuAcceleratedVideoDecoderProviderInterface }
 */
export class GpuAcceleratedVideoDecoderProviderRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!GpuAcceleratedVideoDecoderProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          GpuAcceleratedVideoDecoderProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!GpuAcceleratedVideoDecoderProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !VideoDecodeAcceleratorConfig } config
   * @param { !Object } receiver
   * @param { !Object } client
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  createAcceleratedVideoDecoder(
      config,
      receiver,
      client) {
    return this.proxy.sendMessage(
        0,
        GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsSpec.$,
        GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsSpec.$,
        [
          config,
          receiver,
          client
        ]);
  }
}

/**
 * An object which receives request messages for the GpuAcceleratedVideoDecoderProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class GpuAcceleratedVideoDecoderProviderReceiver {
  /**
   * @param {!GpuAcceleratedVideoDecoderProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!GpuAcceleratedVideoDecoderProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        GpuAcceleratedVideoDecoderProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuAcceleratedVideoDecoderProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsSpec.$,
        GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsSpec.$,
        impl.createAcceleratedVideoDecoder.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class GpuAcceleratedVideoDecoderProvider {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.GpuAcceleratedVideoDecoderProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!GpuAcceleratedVideoDecoderProviderRemote}
   */
  static getRemote() {
    let remote = new GpuAcceleratedVideoDecoderProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the GpuAcceleratedVideoDecoderProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class GpuAcceleratedVideoDecoderProviderCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      GpuAcceleratedVideoDecoderProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuAcceleratedVideoDecoderProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createAcceleratedVideoDecoder =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsSpec.$,
        GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsSpec.$,
        this.createAcceleratedVideoDecoder.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class GpuAcceleratedVideoDecoderPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.GpuAcceleratedVideoDecoder', scope);
  }
}

/** @interface */
export class GpuAcceleratedVideoDecoderInterface {
  
  /**
   * @param { !BitstreamBuffer } buffer
   */

  decode(buffer) {}
  
  /**
   * @param { !Array<!PictureBufferAssignment> } assignments
   */

  assignPictureBuffers(assignments) {}
  
  /**
   * @param { !number } pictureBufferId
   */

  reusePictureBuffer(pictureBufferId) {}
  
  /**
   * @return {!Promise}
   */

  flush() {}
  
  /**
   * @return {!Promise}
   */

  reset() {}
  
  /**
   * @param { !media_mojom_OverlayInfo } overlayInfo
   */

  setOverlayInfo(overlayInfo) {}
}

/**
 * @implements { GpuAcceleratedVideoDecoderInterface }
 */
export class GpuAcceleratedVideoDecoderRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!GpuAcceleratedVideoDecoderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          GpuAcceleratedVideoDecoderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!GpuAcceleratedVideoDecoderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !BitstreamBuffer } buffer
   */

  decode(
      buffer) {
    this.proxy.sendMessage(
        0,
        GpuAcceleratedVideoDecoder_Decode_ParamsSpec.$,
        null,
        [
          buffer
        ]);
  }

  
  /**
   * @param { !Array<!PictureBufferAssignment> } assignments
   */

  assignPictureBuffers(
      assignments) {
    this.proxy.sendMessage(
        1,
        GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsSpec.$,
        null,
        [
          assignments
        ]);
  }

  
  /**
   * @param { !number } pictureBufferId
   */

  reusePictureBuffer(
      pictureBufferId) {
    this.proxy.sendMessage(
        2,
        GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsSpec.$,
        null,
        [
          pictureBufferId
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  flush() {
    return this.proxy.sendMessage(
        3,
        GpuAcceleratedVideoDecoder_Flush_ParamsSpec.$,
        GpuAcceleratedVideoDecoder_Flush_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @return {!Promise}
   */

  reset() {
    return this.proxy.sendMessage(
        4,
        GpuAcceleratedVideoDecoder_Reset_ParamsSpec.$,
        GpuAcceleratedVideoDecoder_Reset_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !media_mojom_OverlayInfo } overlayInfo
   */

  setOverlayInfo(
      overlayInfo) {
    this.proxy.sendMessage(
        5,
        GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsSpec.$,
        null,
        [
          overlayInfo
        ]);
  }
}

/**
 * An object which receives request messages for the GpuAcceleratedVideoDecoder
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class GpuAcceleratedVideoDecoderReceiver {
  /**
   * @param {!GpuAcceleratedVideoDecoderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!GpuAcceleratedVideoDecoderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        GpuAcceleratedVideoDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuAcceleratedVideoDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        GpuAcceleratedVideoDecoder_Decode_ParamsSpec.$,
        null,
        impl.decode.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsSpec.$,
        null,
        impl.assignPictureBuffers.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsSpec.$,
        null,
        impl.reusePictureBuffer.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        GpuAcceleratedVideoDecoder_Flush_ParamsSpec.$,
        GpuAcceleratedVideoDecoder_Flush_ResponseParamsSpec.$,
        impl.flush.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        GpuAcceleratedVideoDecoder_Reset_ParamsSpec.$,
        GpuAcceleratedVideoDecoder_Reset_ResponseParamsSpec.$,
        impl.reset.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsSpec.$,
        null,
        impl.setOverlayInfo.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class GpuAcceleratedVideoDecoder {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.GpuAcceleratedVideoDecoder";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!GpuAcceleratedVideoDecoderRemote}
   */
  static getRemote() {
    let remote = new GpuAcceleratedVideoDecoderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the GpuAcceleratedVideoDecoder
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class GpuAcceleratedVideoDecoderCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      GpuAcceleratedVideoDecoderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuAcceleratedVideoDecoderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.decode =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        GpuAcceleratedVideoDecoder_Decode_ParamsSpec.$,
        null,
        this.decode.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.assignPictureBuffers =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsSpec.$,
        null,
        this.assignPictureBuffers.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reusePictureBuffer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsSpec.$,
        null,
        this.reusePictureBuffer.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.flush =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        GpuAcceleratedVideoDecoder_Flush_ParamsSpec.$,
        GpuAcceleratedVideoDecoder_Flush_ResponseParamsSpec.$,
        this.flush.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.reset =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        GpuAcceleratedVideoDecoder_Reset_ParamsSpec.$,
        GpuAcceleratedVideoDecoder_Reset_ResponseParamsSpec.$,
        this.reset.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setOverlayInfo =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsSpec.$,
        null,
        this.setOverlayInfo.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class GpuAcceleratedVideoDecoderClientPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.mojom.GpuAcceleratedVideoDecoderClient', scope);
  }
}

/** @interface */
export class GpuAcceleratedVideoDecoderClientInterface {
  
  /**
   * @param { !boolean } success
   */

  onInitializationComplete(success) {}
  
  /**
   * @param { !number } bufferId
   */

  onBitstreamBufferProcessed(bufferId) {}
  
  /**
   * @param { !number } numFrames
   * @param { !media_mojom_VideoPixelFormat } format
   * @param { !number } numTexturesPerFrame
   * @param { !gfx_mojom_Size } bufferSize
   * @param { !number } textureTarget
   */

  onProvidePictureBuffers(numFrames, format, numTexturesPerFrame, bufferSize, textureTarget) {}
  
  /**
   * @param { !PictureReadyParams } params
   */

  onPictureReady(params) {}
  
  /**
   * @param { !number } bufferId
   */

  onDismissPictureBuffer(bufferId) {}
  
  /**
   * @param { !number } errorId
   */

  onError(errorId) {}
}

/**
 * @implements { GpuAcceleratedVideoDecoderClientInterface }
 */
export class GpuAcceleratedVideoDecoderClientRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!GpuAcceleratedVideoDecoderClientPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          GpuAcceleratedVideoDecoderClientPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!GpuAcceleratedVideoDecoderClientPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !boolean } success
   */

  onInitializationComplete(
      success) {
    this.proxy.sendMessage(
        0,
        GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsSpec.$,
        null,
        [
          success
        ]);
  }

  
  /**
   * @param { !number } bufferId
   */

  onBitstreamBufferProcessed(
      bufferId) {
    this.proxy.sendMessage(
        1,
        GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsSpec.$,
        null,
        [
          bufferId
        ]);
  }

  
  /**
   * @param { !number } numFrames
   * @param { !media_mojom_VideoPixelFormat } format
   * @param { !number } numTexturesPerFrame
   * @param { !gfx_mojom_Size } bufferSize
   * @param { !number } textureTarget
   */

  onProvidePictureBuffers(
      numFrames,
      format,
      numTexturesPerFrame,
      bufferSize,
      textureTarget) {
    this.proxy.sendMessage(
        2,
        GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsSpec.$,
        null,
        [
          numFrames,
          format,
          numTexturesPerFrame,
          bufferSize,
          textureTarget
        ]);
  }

  
  /**
   * @param { !PictureReadyParams } params
   */

  onPictureReady(
      params) {
    this.proxy.sendMessage(
        3,
        GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsSpec.$,
        null,
        [
          params
        ]);
  }

  
  /**
   * @param { !number } bufferId
   */

  onDismissPictureBuffer(
      bufferId) {
    this.proxy.sendMessage(
        4,
        GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsSpec.$,
        null,
        [
          bufferId
        ]);
  }

  
  /**
   * @param { !number } errorId
   */

  onError(
      errorId) {
    this.proxy.sendMessage(
        5,
        GpuAcceleratedVideoDecoderClient_OnError_ParamsSpec.$,
        null,
        [
          errorId
        ]);
  }
}

/**
 * An object which receives request messages for the GpuAcceleratedVideoDecoderClient
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class GpuAcceleratedVideoDecoderClientReceiver {
  /**
   * @param {!GpuAcceleratedVideoDecoderClientInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!GpuAcceleratedVideoDecoderClientRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        GpuAcceleratedVideoDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuAcceleratedVideoDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsSpec.$,
        null,
        impl.onInitializationComplete.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsSpec.$,
        null,
        impl.onBitstreamBufferProcessed.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsSpec.$,
        null,
        impl.onProvidePictureBuffers.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsSpec.$,
        null,
        impl.onPictureReady.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsSpec.$,
        null,
        impl.onDismissPictureBuffer.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        GpuAcceleratedVideoDecoderClient_OnError_ParamsSpec.$,
        null,
        impl.onError.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class GpuAcceleratedVideoDecoderClient {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.mojom.GpuAcceleratedVideoDecoderClient";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!GpuAcceleratedVideoDecoderClientRemote}
   */
  static getRemote() {
    let remote = new GpuAcceleratedVideoDecoderClientRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the GpuAcceleratedVideoDecoderClient
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class GpuAcceleratedVideoDecoderClientCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      GpuAcceleratedVideoDecoderClientRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuAcceleratedVideoDecoderClientRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onInitializationComplete =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsSpec.$,
        null,
        this.onInitializationComplete.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onBitstreamBufferProcessed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsSpec.$,
        null,
        this.onBitstreamBufferProcessed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onProvidePictureBuffers =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsSpec.$,
        null,
        this.onProvidePictureBuffers.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPictureReady =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsSpec.$,
        null,
        this.onPictureReady.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onDismissPictureBuffer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsSpec.$,
        null,
        this.onDismissPictureBuffer.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onError =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        GpuAcceleratedVideoDecoderClient_OnError_ParamsSpec.$,
        null,
        this.onError.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const VideoDecodeAcceleratorConfigSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const BitstreamBufferSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PictureBufferAssignmentSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const PictureReadyParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_Decode_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_Flush_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_Flush_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_Reset_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_Reset_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuAcceleratedVideoDecoderClient_OnError_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    VideoDecodeAcceleratorConfigSpec.$,
    'VideoDecodeAcceleratorConfig',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class VideoDecodeAcceleratorConfig {
  constructor() {
  }
}



mojo.internal.Struct(
    BitstreamBufferSpec.$,
    'BitstreamBuffer',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class BitstreamBuffer {
  constructor() {
  }
}



mojo.internal.Struct(
    PictureBufferAssignmentSpec.$,
    'PictureBufferAssignment',
    [
      mojo.internal.StructField(
        'bufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'textureIds', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint32, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class PictureBufferAssignment {
  constructor() {
    /** @type { !number } */
    this.bufferId;
    /** @type { !Array<!number> } */
    this.textureIds;
  }
}



mojo.internal.Struct(
    PictureReadyParamsSpec.$,
    'PictureReadyParams',
    [
      mojo.internal.StructField(
        'pictureBufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'bitstreamBufferId', 4,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'visibleRect', 8,
        0,
        gfx_mojom_RectSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'colorSpace', 16,
        0,
        gfx_mojom_ColorSpaceSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'allowOverlay', 24,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'readLockFencesEnabled', 24,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'sizeChanged', 24,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'surfaceTexture', 24,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'wantsPromotionHint', 24,
        4,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class PictureReadyParams {
  constructor() {
    /** @type { !number } */
    this.pictureBufferId;
    /** @type { !number } */
    this.bitstreamBufferId;
    /** @type { !gfx_mojom_Rect } */
    this.visibleRect;
    /** @type { !gfx_mojom_ColorSpace } */
    this.colorSpace;
    /** @type { !boolean } */
    this.allowOverlay;
    /** @type { !boolean } */
    this.readLockFencesEnabled;
    /** @type { !boolean } */
    this.sizeChanged;
    /** @type { !boolean } */
    this.surfaceTexture;
    /** @type { !boolean } */
    this.wantsPromotionHint;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params',
    [
      mojo.internal.StructField(
        'config', 0,
        0,
        VideoDecodeAcceleratorConfigSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'receiver', 8,
        0,
        mojo.internal.AssociatedInterfaceRequest(GpuAcceleratedVideoDecoderPendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'client', 12,
        0,
        mojo.internal.AssociatedInterfaceProxy(GpuAcceleratedVideoDecoderClientRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_Params {
  constructor() {
    /** @type { !VideoDecodeAcceleratorConfig } */
    this.config;
    /** @type { !Object } */
    this.receiver;
    /** @type { !Object } */
    this.client;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParamsSpec.$,
    'GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderProvider_CreateAcceleratedVideoDecoder_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_Decode_ParamsSpec.$,
    'GpuAcceleratedVideoDecoder_Decode_Params',
    [
      mojo.internal.StructField(
        'buffer', 0,
        0,
        BitstreamBufferSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_Decode_Params {
  constructor() {
    /** @type { !BitstreamBuffer } */
    this.buffer;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_AssignPictureBuffers_ParamsSpec.$,
    'GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params',
    [
      mojo.internal.StructField(
        'assignments', 0,
        0,
        mojo.internal.Array(PictureBufferAssignmentSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_AssignPictureBuffers_Params {
  constructor() {
    /** @type { !Array<!PictureBufferAssignment> } */
    this.assignments;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_ReusePictureBuffer_ParamsSpec.$,
    'GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params',
    [
      mojo.internal.StructField(
        'pictureBufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_ReusePictureBuffer_Params {
  constructor() {
    /** @type { !number } */
    this.pictureBufferId;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_Flush_ParamsSpec.$,
    'GpuAcceleratedVideoDecoder_Flush_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_Flush_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_Flush_ResponseParamsSpec.$,
    'GpuAcceleratedVideoDecoder_Flush_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_Flush_ResponseParams {
  constructor() {
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_Reset_ParamsSpec.$,
    'GpuAcceleratedVideoDecoder_Reset_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_Reset_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_Reset_ResponseParamsSpec.$,
    'GpuAcceleratedVideoDecoder_Reset_ResponseParams',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_Reset_ResponseParams {
  constructor() {
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoder_SetOverlayInfo_ParamsSpec.$,
    'GpuAcceleratedVideoDecoder_SetOverlayInfo_Params',
    [
      mojo.internal.StructField(
        'overlayInfo', 0,
        0,
        media_mojom_OverlayInfoSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoder_SetOverlayInfo_Params {
  constructor() {
    /** @type { !media_mojom_OverlayInfo } */
    this.overlayInfo;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderClient_OnInitializationComplete_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderClient_OnInitializationComplete_Params {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params',
    [
      mojo.internal.StructField(
        'bufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderClient_OnBitstreamBufferProcessed_Params {
  constructor() {
    /** @type { !number } */
    this.bufferId;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params',
    [
      mojo.internal.StructField(
        'numFrames', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'format', 4,
        0,
        media_mojom_VideoPixelFormatSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'numTexturesPerFrame', 8,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'bufferSize', 16,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'textureTarget', 12,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderClient_OnProvidePictureBuffers_Params {
  constructor() {
    /** @type { !number } */
    this.numFrames;
    /** @type { !media_mojom_VideoPixelFormat } */
    this.format;
    /** @type { !number } */
    this.numTexturesPerFrame;
    /** @type { !number } */
    this.textureTarget;
    /** @type { !gfx_mojom_Size } */
    this.bufferSize;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderClient_OnPictureReady_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderClient_OnPictureReady_Params',
    [
      mojo.internal.StructField(
        'params', 0,
        0,
        PictureReadyParamsSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderClient_OnPictureReady_Params {
  constructor() {
    /** @type { !PictureReadyParams } */
    this.params;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params',
    [
      mojo.internal.StructField(
        'bufferId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderClient_OnDismissPictureBuffer_Params {
  constructor() {
    /** @type { !number } */
    this.bufferId;
  }
}



mojo.internal.Struct(
    GpuAcceleratedVideoDecoderClient_OnError_ParamsSpec.$,
    'GpuAcceleratedVideoDecoderClient_OnError_Params',
    [
      mojo.internal.StructField(
        'errorId', 0,
        0,
        mojo.internal.Uint32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuAcceleratedVideoDecoderClient_OnError_Params {
  constructor() {
    /** @type { !number } */
    this.errorId;
  }
}

