// media/mojo/mojom/interface_factory.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "media/mojo/mojom/interface_factory.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "media/mojo/mojom/interface_factory.mojom-params-data.h"
#include "media/mojo/mojom/interface_factory.mojom-shared-message-ids.h"

#include "media/mojo/mojom/interface_factory.mojom-import-headers.h"
#include "media/mojo/mojom/interface_factory.mojom-test-utils.h"


#ifndef MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_JUMBO_H_
#define MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_JUMBO_H_
#endif



namespace media {
namespace mojom {
const char InterfaceFactory::Name_[] = "media.mojom.InterfaceFactory";

InterfaceFactory::IPCStableHashFunction InterfaceFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kInterfaceFactory_CreateAudioDecoder_Name: {
      return &InterfaceFactory::CreateAudioDecoder_Sym::IPCStableHash;
    }
    case internal::kInterfaceFactory_CreateVideoDecoder_Name: {
      return &InterfaceFactory::CreateVideoDecoder_Sym::IPCStableHash;
    }
    case internal::kInterfaceFactory_CreateAudioEncoder_Name: {
      return &InterfaceFactory::CreateAudioEncoder_Sym::IPCStableHash;
    }
    case internal::kInterfaceFactory_CreateDefaultRenderer_Name: {
      return &InterfaceFactory::CreateDefaultRenderer_Sym::IPCStableHash;
    }
    case internal::kInterfaceFactory_CreateMediaPlayerRenderer_Name: {
      return &InterfaceFactory::CreateMediaPlayerRenderer_Sym::IPCStableHash;
    }
    case internal::kInterfaceFactory_CreateFlingingRenderer_Name: {
      return &InterfaceFactory::CreateFlingingRenderer_Sym::IPCStableHash;
    }
    case internal::kInterfaceFactory_CreateCdm_Name: {
      return &InterfaceFactory::CreateCdm_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* InterfaceFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kInterfaceFactory_CreateAudioDecoder_Name:
            return "Receive media::mojom::InterfaceFactory::CreateAudioDecoder";
      case internal::kInterfaceFactory_CreateVideoDecoder_Name:
            return "Receive media::mojom::InterfaceFactory::CreateVideoDecoder";
      case internal::kInterfaceFactory_CreateAudioEncoder_Name:
            return "Receive media::mojom::InterfaceFactory::CreateAudioEncoder";
      case internal::kInterfaceFactory_CreateDefaultRenderer_Name:
            return "Receive media::mojom::InterfaceFactory::CreateDefaultRenderer";
      case internal::kInterfaceFactory_CreateMediaPlayerRenderer_Name:
            return "Receive media::mojom::InterfaceFactory::CreateMediaPlayerRenderer";
      case internal::kInterfaceFactory_CreateFlingingRenderer_Name:
            return "Receive media::mojom::InterfaceFactory::CreateFlingingRenderer";
      case internal::kInterfaceFactory_CreateCdm_Name:
            return "Receive media::mojom::InterfaceFactory::CreateCdm";
    }
  } else {
    switch (message.name()) {
      case internal::kInterfaceFactory_CreateAudioDecoder_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateAudioDecoder";
      case internal::kInterfaceFactory_CreateVideoDecoder_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateVideoDecoder";
      case internal::kInterfaceFactory_CreateAudioEncoder_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateAudioEncoder";
      case internal::kInterfaceFactory_CreateDefaultRenderer_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateDefaultRenderer";
      case internal::kInterfaceFactory_CreateMediaPlayerRenderer_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateMediaPlayerRenderer";
      case internal::kInterfaceFactory_CreateFlingingRenderer_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateFlingingRenderer";
      case internal::kInterfaceFactory_CreateCdm_Name:
            return "Receive reply media::mojom::InterfaceFactory::CreateCdm";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t InterfaceFactory::CreateAudioDecoder_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateAudioDecoder");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterfaceFactory::CreateVideoDecoder_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateVideoDecoder");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterfaceFactory::CreateAudioEncoder_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateAudioEncoder");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterfaceFactory::CreateDefaultRenderer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateDefaultRenderer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterfaceFactory::CreateMediaPlayerRenderer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateMediaPlayerRenderer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterfaceFactory::CreateFlingingRenderer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateFlingingRenderer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t InterfaceFactory::CreateCdm_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)media::mojom::InterfaceFactory::CreateCdm");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class InterfaceFactory_CreateCdm_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  InterfaceFactory_CreateCdm_ForwardToCallback(
      InterfaceFactory::CreateCdmCallback callback
      ) : callback_(std::move(callback)) {
  }

  InterfaceFactory_CreateCdm_ForwardToCallback(const InterfaceFactory_CreateCdm_ForwardToCallback&) = delete;
  InterfaceFactory_CreateCdm_ForwardToCallback& operator=(const InterfaceFactory_CreateCdm_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  InterfaceFactory::CreateCdmCallback callback_;
};

InterfaceFactoryProxy::InterfaceFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void InterfaceFactoryProxy::CreateAudioDecoder(
    ::mojo::PendingReceiver<::media::mojom::AudioDecoder> in_audio_decoder) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateAudioDecoder", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("audio_decoder"), in_audio_decoder,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::AudioDecoder>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateAudioDecoder_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateAudioDecoder_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::AudioDecoderInterfaceBase>>(
      in_audio_decoder, &params->audio_decoder, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->audio_decoder),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid audio_decoder in InterfaceFactory.CreateAudioDecoder request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateAudioDecoder");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterfaceFactoryProxy::CreateVideoDecoder(
    ::mojo::PendingReceiver<::media::mojom::VideoDecoder> in_video_decoder, ::mojo::PendingRemote<::media::stable::mojom::StableVideoDecoder> in_dst_video_decoder) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateVideoDecoder", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("video_decoder"), in_video_decoder,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::VideoDecoder>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("dst_video_decoder"), in_dst_video_decoder,
                        "<value of type ::mojo::PendingRemote<::media::stable::mojom::StableVideoDecoder>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateVideoDecoder_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateVideoDecoder_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::VideoDecoderInterfaceBase>>(
      in_video_decoder, &params->video_decoder, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->video_decoder),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid video_decoder in InterfaceFactory.CreateVideoDecoder request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::media::stable::mojom::StableVideoDecoderInterfaceBase>>(
      in_dst_video_decoder, &params->dst_video_decoder, &params.message());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateVideoDecoder");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterfaceFactoryProxy::CreateAudioEncoder(
    ::mojo::PendingReceiver<::media::mojom::AudioEncoder> in_audio_encoder) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateAudioEncoder", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("audio_encoder"), in_audio_encoder,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::AudioEncoder>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateAudioEncoder_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateAudioEncoder_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::AudioEncoderInterfaceBase>>(
      in_audio_encoder, &params->audio_encoder, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->audio_encoder),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid audio_encoder in InterfaceFactory.CreateAudioEncoder request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateAudioEncoder");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterfaceFactoryProxy::CreateDefaultRenderer(
    const std::string& in_audio_device_id, ::mojo::PendingReceiver<::media::mojom::Renderer> in_renderer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateDefaultRenderer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("audio_device_id"), in_audio_device_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("renderer"), in_renderer,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::Renderer>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateDefaultRenderer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateDefaultRenderer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->audio_device_id)::BaseType> audio_device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_audio_device_id, audio_device_id_fragment);
  params->audio_device_id.Set(
      audio_device_id_fragment.is_null() ? nullptr : audio_device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->audio_device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null audio_device_id in InterfaceFactory.CreateDefaultRenderer request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
      in_renderer, &params->renderer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->renderer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid renderer in InterfaceFactory.CreateDefaultRenderer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateDefaultRenderer");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterfaceFactoryProxy::CreateMediaPlayerRenderer(
    ::mojo::PendingRemote<::media::mojom::MediaPlayerRendererClientExtension> in_client_extension, ::mojo::PendingReceiver<::media::mojom::Renderer> in_renderer, ::mojo::PendingReceiver<::media::mojom::MediaPlayerRendererExtension> in_renderer_extension) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateMediaPlayerRenderer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_extension"), in_client_extension,
                        "<value of type ::mojo::PendingRemote<::media::mojom::MediaPlayerRendererClientExtension>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("renderer"), in_renderer,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::Renderer>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("renderer_extension"), in_renderer_extension,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::MediaPlayerRendererExtension>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateMediaPlayerRenderer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateMediaPlayerRenderer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::media::mojom::MediaPlayerRendererClientExtensionInterfaceBase>>(
      in_client_extension, &params->client_extension, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client_extension),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client_extension in InterfaceFactory.CreateMediaPlayerRenderer request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
      in_renderer, &params->renderer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->renderer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid renderer in InterfaceFactory.CreateMediaPlayerRenderer request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::MediaPlayerRendererExtensionInterfaceBase>>(
      in_renderer_extension, &params->renderer_extension, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->renderer_extension),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid renderer_extension in InterfaceFactory.CreateMediaPlayerRenderer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateMediaPlayerRenderer");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterfaceFactoryProxy::CreateFlingingRenderer(
    const std::string& in_presentation_id, ::mojo::PendingRemote<::media::mojom::FlingingRendererClientExtension> in_client_extension, ::mojo::PendingReceiver<::media::mojom::Renderer> in_renderer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateFlingingRenderer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("presentation_id"), in_presentation_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_extension"), in_client_extension,
                        "<value of type ::mojo::PendingRemote<::media::mojom::FlingingRendererClientExtension>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("renderer"), in_renderer,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::Renderer>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateFlingingRenderer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateFlingingRenderer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->presentation_id)::BaseType> presentation_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_presentation_id, presentation_id_fragment);
  params->presentation_id.Set(
      presentation_id_fragment.is_null() ? nullptr : presentation_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->presentation_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null presentation_id in InterfaceFactory.CreateFlingingRenderer request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::media::mojom::FlingingRendererClientExtensionInterfaceBase>>(
      in_client_extension, &params->client_extension, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->client_extension),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid client_extension in InterfaceFactory.CreateFlingingRenderer request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
      in_renderer, &params->renderer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->renderer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid renderer in InterfaceFactory.CreateFlingingRenderer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateFlingingRenderer");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void InterfaceFactoryProxy::CreateCdm(
    const ::media::CdmConfig& in_cdm_config, CreateCdmCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send media::mojom::InterfaceFactory::CreateCdm", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cdm_config"), in_cdm_config,
                        "<value of type const ::media::CdmConfig&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateCdm_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateCdm_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->cdm_config)::BaseType> cdm_config_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::CdmConfigDataView>(
      in_cdm_config, cdm_config_fragment);
  params->cdm_config.Set(
      cdm_config_fragment.is_null() ? nullptr : cdm_config_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->cdm_config.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null cdm_config in InterfaceFactory.CreateCdm request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateCdm");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new InterfaceFactory_CreateCdm_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}
class InterfaceFactory_CreateCdm_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static InterfaceFactory::CreateCdmCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<InterfaceFactory_CreateCdm_ProxyToResponder> proxy(
        new InterfaceFactory_CreateCdm_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&InterfaceFactory_CreateCdm_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~InterfaceFactory_CreateCdm_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  InterfaceFactory_CreateCdm_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "InterfaceFactory::CreateCdmCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule> in_cdm, ::media::mojom::CdmContextPtr in_cdm_context, const std::string& in_error_message);
};

bool InterfaceFactory_CreateCdm_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::InterfaceFactory_CreateCdm_ResponseParams_Data* params =
      reinterpret_cast<
          internal::InterfaceFactory_CreateCdm_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule> p_cdm{};
  ::media::mojom::CdmContextPtr p_cdm_context{};
  std::string p_error_message{};
  InterfaceFactory_CreateCdm_ResponseParamsDataView input_data_view(params, message);
  
  if (success) {
    p_cdm =
        input_data_view.TakeCdm<decltype(p_cdm)>();
  }
  if (success && !input_data_view.ReadCdmContext(&p_cdm_context))
    success = false;
  if (success && !input_data_view.ReadErrorMessage(&p_error_message))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        InterfaceFactory::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_cdm), 
std::move(p_cdm_context), 
std::move(p_error_message));
  return true;
}

void InterfaceFactory_CreateCdm_ProxyToResponder::Run(
    ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule> in_cdm, ::media::mojom::CdmContextPtr in_cdm_context, const std::string& in_error_message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply media::mojom::InterfaceFactory::CreateCdm", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cdm"), in_cdm,
                        "<value of type ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cdm_context"), in_cdm_context,
                        "<value of type ::media::mojom::CdmContextPtr>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("error_message"), in_error_message,
                        "<value of type const std::string&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kInterfaceFactory_CreateCdm_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::media::mojom::internal::InterfaceFactory_CreateCdm_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::media::mojom::ContentDecryptionModuleInterfaceBase>>(
      in_cdm, &params->cdm, &params.message());
  mojo::internal::MessageFragment<
      typename decltype(params->cdm_context)::BaseType> cdm_context_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::CdmContextDataView>(
      in_cdm_context, cdm_context_fragment);
  params->cdm_context.Set(
      cdm_context_fragment.is_null() ? nullptr : cdm_context_fragment.data());
  mojo::internal::MessageFragment<
      typename decltype(params->error_message)::BaseType> error_message_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_error_message, error_message_fragment);
  params->error_message.Set(
      error_message_fragment.is_null() ? nullptr : error_message_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->error_message.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null error_message in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(InterfaceFactory::Name_);
  message.set_method_name("CreateCdm");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool InterfaceFactoryStubDispatch::Accept(
    InterfaceFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kInterfaceFactory_CreateAudioDecoder_Name: {

      DCHECK(message->is_serialized());
      internal::InterfaceFactory_CreateAudioDecoder_Params_Data* params =
          reinterpret_cast<internal::InterfaceFactory_CreateAudioDecoder_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::media::mojom::AudioDecoder> p_audio_decoder{};
      InterfaceFactory_CreateAudioDecoder_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_audio_decoder =
            input_data_view.TakeAudioDecoder<decltype(p_audio_decoder)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateAudioDecoder(
std::move(p_audio_decoder));
      return true;
    }
    case internal::kInterfaceFactory_CreateVideoDecoder_Name: {

      DCHECK(message->is_serialized());
      internal::InterfaceFactory_CreateVideoDecoder_Params_Data* params =
          reinterpret_cast<internal::InterfaceFactory_CreateVideoDecoder_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::media::mojom::VideoDecoder> p_video_decoder{};
      ::mojo::PendingRemote<::media::stable::mojom::StableVideoDecoder> p_dst_video_decoder{};
      InterfaceFactory_CreateVideoDecoder_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_video_decoder =
            input_data_view.TakeVideoDecoder<decltype(p_video_decoder)>();
      }
      if (success) {
        p_dst_video_decoder =
            input_data_view.TakeDstVideoDecoder<decltype(p_dst_video_decoder)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateVideoDecoder(
std::move(p_video_decoder), 
std::move(p_dst_video_decoder));
      return true;
    }
    case internal::kInterfaceFactory_CreateAudioEncoder_Name: {

      DCHECK(message->is_serialized());
      internal::InterfaceFactory_CreateAudioEncoder_Params_Data* params =
          reinterpret_cast<internal::InterfaceFactory_CreateAudioEncoder_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::media::mojom::AudioEncoder> p_audio_encoder{};
      InterfaceFactory_CreateAudioEncoder_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_audio_encoder =
            input_data_view.TakeAudioEncoder<decltype(p_audio_encoder)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateAudioEncoder(
std::move(p_audio_encoder));
      return true;
    }
    case internal::kInterfaceFactory_CreateDefaultRenderer_Name: {

      DCHECK(message->is_serialized());
      internal::InterfaceFactory_CreateDefaultRenderer_Params_Data* params =
          reinterpret_cast<internal::InterfaceFactory_CreateDefaultRenderer_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_audio_device_id{};
      ::mojo::PendingReceiver<::media::mojom::Renderer> p_renderer{};
      InterfaceFactory_CreateDefaultRenderer_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadAudioDeviceId(&p_audio_device_id))
        success = false;
      if (success) {
        p_renderer =
            input_data_view.TakeRenderer<decltype(p_renderer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateDefaultRenderer(
std::move(p_audio_device_id), 
std::move(p_renderer));
      return true;
    }
    case internal::kInterfaceFactory_CreateMediaPlayerRenderer_Name: {

      DCHECK(message->is_serialized());
      internal::InterfaceFactory_CreateMediaPlayerRenderer_Params_Data* params =
          reinterpret_cast<internal::InterfaceFactory_CreateMediaPlayerRenderer_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<::media::mojom::MediaPlayerRendererClientExtension> p_client_extension{};
      ::mojo::PendingReceiver<::media::mojom::Renderer> p_renderer{};
      ::mojo::PendingReceiver<::media::mojom::MediaPlayerRendererExtension> p_renderer_extension{};
      InterfaceFactory_CreateMediaPlayerRenderer_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_client_extension =
            input_data_view.TakeClientExtension<decltype(p_client_extension)>();
      }
      if (success) {
        p_renderer =
            input_data_view.TakeRenderer<decltype(p_renderer)>();
      }
      if (success) {
        p_renderer_extension =
            input_data_view.TakeRendererExtension<decltype(p_renderer_extension)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateMediaPlayerRenderer(
std::move(p_client_extension), 
std::move(p_renderer), 
std::move(p_renderer_extension));
      return true;
    }
    case internal::kInterfaceFactory_CreateFlingingRenderer_Name: {

      DCHECK(message->is_serialized());
      internal::InterfaceFactory_CreateFlingingRenderer_Params_Data* params =
          reinterpret_cast<internal::InterfaceFactory_CreateFlingingRenderer_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::string p_presentation_id{};
      ::mojo::PendingRemote<::media::mojom::FlingingRendererClientExtension> p_client_extension{};
      ::mojo::PendingReceiver<::media::mojom::Renderer> p_renderer{};
      InterfaceFactory_CreateFlingingRenderer_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPresentationId(&p_presentation_id))
        success = false;
      if (success) {
        p_client_extension =
            input_data_view.TakeClientExtension<decltype(p_client_extension)>();
      }
      if (success) {
        p_renderer =
            input_data_view.TakeRenderer<decltype(p_renderer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateFlingingRenderer(
std::move(p_presentation_id), 
std::move(p_client_extension), 
std::move(p_renderer));
      return true;
    }
    case internal::kInterfaceFactory_CreateCdm_Name: {
      break;
    }
  }
  return false;
}

// static
bool InterfaceFactoryStubDispatch::AcceptWithResponder(
    InterfaceFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kInterfaceFactory_CreateAudioDecoder_Name: {
      break;
    }
    case internal::kInterfaceFactory_CreateVideoDecoder_Name: {
      break;
    }
    case internal::kInterfaceFactory_CreateAudioEncoder_Name: {
      break;
    }
    case internal::kInterfaceFactory_CreateDefaultRenderer_Name: {
      break;
    }
    case internal::kInterfaceFactory_CreateMediaPlayerRenderer_Name: {
      break;
    }
    case internal::kInterfaceFactory_CreateFlingingRenderer_Name: {
      break;
    }
    case internal::kInterfaceFactory_CreateCdm_Name: {

      internal::InterfaceFactory_CreateCdm_Params_Data* params =
          reinterpret_cast<
              internal::InterfaceFactory_CreateCdm_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::media::CdmConfig p_cdm_config{};
      InterfaceFactory_CreateCdm_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadCdmConfig(&p_cdm_config))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            InterfaceFactory::Name_, 6, false);
        return false;
      }
      InterfaceFactory::CreateCdmCallback callback =
          InterfaceFactory_CreateCdm_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateCdm(
std::move(p_cdm_config), std::move(callback));
      return true;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kInterfaceFactoryValidationInfo[] = {
    {&internal::InterfaceFactory_CreateAudioDecoder_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterfaceFactory_CreateVideoDecoder_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterfaceFactory_CreateAudioEncoder_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterfaceFactory_CreateDefaultRenderer_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterfaceFactory_CreateMediaPlayerRenderer_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterfaceFactory_CreateFlingingRenderer_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::InterfaceFactory_CreateCdm_Params_Data::Validate,
     &internal::InterfaceFactory_CreateCdm_ResponseParams_Data::Validate},
};

bool InterfaceFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::InterfaceFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kInterfaceFactoryValidationInfo);
}

bool InterfaceFactoryResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::media::mojom::InterfaceFactory::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kInterfaceFactoryValidationInfo);
}


}  // namespace mojom
}  // namespace media


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace media {
namespace mojom {


void InterfaceFactoryInterceptorForTesting::CreateAudioDecoder(::mojo::PendingReceiver<::media::mojom::AudioDecoder> audio_decoder) {
  GetForwardingInterface()->CreateAudioDecoder(std::move(audio_decoder));
}
void InterfaceFactoryInterceptorForTesting::CreateVideoDecoder(::mojo::PendingReceiver<::media::mojom::VideoDecoder> video_decoder, ::mojo::PendingRemote<::media::stable::mojom::StableVideoDecoder> dst_video_decoder) {
  GetForwardingInterface()->CreateVideoDecoder(std::move(video_decoder), std::move(dst_video_decoder));
}
void InterfaceFactoryInterceptorForTesting::CreateAudioEncoder(::mojo::PendingReceiver<::media::mojom::AudioEncoder> audio_encoder) {
  GetForwardingInterface()->CreateAudioEncoder(std::move(audio_encoder));
}
void InterfaceFactoryInterceptorForTesting::CreateDefaultRenderer(const std::string& audio_device_id, ::mojo::PendingReceiver<::media::mojom::Renderer> renderer) {
  GetForwardingInterface()->CreateDefaultRenderer(std::move(audio_device_id), std::move(renderer));
}
void InterfaceFactoryInterceptorForTesting::CreateMediaPlayerRenderer(::mojo::PendingRemote<::media::mojom::MediaPlayerRendererClientExtension> client_extension, ::mojo::PendingReceiver<::media::mojom::Renderer> renderer, ::mojo::PendingReceiver<::media::mojom::MediaPlayerRendererExtension> renderer_extension) {
  GetForwardingInterface()->CreateMediaPlayerRenderer(std::move(client_extension), std::move(renderer), std::move(renderer_extension));
}
void InterfaceFactoryInterceptorForTesting::CreateFlingingRenderer(const std::string& presentation_id, ::mojo::PendingRemote<::media::mojom::FlingingRendererClientExtension> client_extension, ::mojo::PendingReceiver<::media::mojom::Renderer> renderer) {
  GetForwardingInterface()->CreateFlingingRenderer(std::move(presentation_id), std::move(client_extension), std::move(renderer));
}
void InterfaceFactoryInterceptorForTesting::CreateCdm(const ::media::CdmConfig& cdm_config, CreateCdmCallback callback) {
  GetForwardingInterface()->CreateCdm(std::move(cdm_config), std::move(callback));
}
InterfaceFactoryAsyncWaiter::InterfaceFactoryAsyncWaiter(
    InterfaceFactory* proxy) : proxy_(proxy) {}

InterfaceFactoryAsyncWaiter::~InterfaceFactoryAsyncWaiter() = default;

void InterfaceFactoryAsyncWaiter::CreateCdm(
    const ::media::CdmConfig& cdm_config, ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule>* out_cdm, ::media::mojom::CdmContextPtr* out_cdm_context, std::string* out_error_message) {
  base::RunLoop loop;
  proxy_->CreateCdm(std::move(cdm_config),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule>* out_cdm
,
             ::media::mojom::CdmContextPtr* out_cdm_context
,
             std::string* out_error_message
,
             ::mojo::PendingRemote<::media::mojom::ContentDecryptionModule> cdm,
             ::media::mojom::CdmContextPtr cdm_context,
             const std::string& error_message) {*out_cdm = std::move(cdm);*out_cdm_context = std::move(cdm_context);*out_error_message = std::move(error_message);
            loop->Quit();
          },
          &loop,
          out_cdm,
          out_cdm_context,
          out_error_message));
  loop.Run();
}





}  // namespace mojom
}  // namespace media


#if defined(__clang__)
#pragma clang diagnostic pop
#endif