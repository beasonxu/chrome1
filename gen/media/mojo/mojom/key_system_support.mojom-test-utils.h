// media/mojo/mojom/key_system_support.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_TEST_UTILS_H_
#define MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_TEST_UTILS_H_

#include "media/mojo/mojom/key_system_support.mojom.h"


namespace media {
namespace mojom {


class  KeySystemSupportObserverInterceptorForTesting : public KeySystemSupportObserver {
  virtual KeySystemSupportObserver* GetForwardingInterface() = 0;
  void OnKeySystemSupportUpdated(base::flat_map<std::string, KeySystemCapabilityPtr> key_systems) override;
};
class  KeySystemSupportObserverAsyncWaiter {
 public:
  explicit KeySystemSupportObserverAsyncWaiter(KeySystemSupportObserver* proxy);

  KeySystemSupportObserverAsyncWaiter(const KeySystemSupportObserverAsyncWaiter&) = delete;
  KeySystemSupportObserverAsyncWaiter& operator=(const KeySystemSupportObserverAsyncWaiter&) = delete;

  ~KeySystemSupportObserverAsyncWaiter();

 private:
  KeySystemSupportObserver* const proxy_;
};


class  KeySystemSupportInterceptorForTesting : public KeySystemSupport {
  virtual KeySystemSupport* GetForwardingInterface() = 0;
  void AddObserver(::mojo::PendingRemote<KeySystemSupportObserver> observer) override;
};
class  KeySystemSupportAsyncWaiter {
 public:
  explicit KeySystemSupportAsyncWaiter(KeySystemSupport* proxy);

  KeySystemSupportAsyncWaiter(const KeySystemSupportAsyncWaiter&) = delete;
  KeySystemSupportAsyncWaiter& operator=(const KeySystemSupportAsyncWaiter&) = delete;

  ~KeySystemSupportAsyncWaiter();

 private:
  KeySystemSupport* const proxy_;
};




}  // namespace mojom
}  // namespace media

#endif  // MEDIA_MOJO_MOJOM_KEY_SYSTEM_SUPPORT_MOJOM_TEST_UTILS_H_