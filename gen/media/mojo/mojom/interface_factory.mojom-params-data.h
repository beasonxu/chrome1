// media/mojo/mojom/interface_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_PARAMS_DATA_H_
#define MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace media {
namespace mojom {
namespace internal {

class ValidationContext;
class  InterfaceFactory_CreateAudioDecoder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data audio_decoder;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateAudioDecoder_Params_Data>;

  InterfaceFactory_CreateAudioDecoder_Params_Data();
  ~InterfaceFactory_CreateAudioDecoder_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateAudioDecoder_Params_Data) == 16,
              "Bad sizeof(InterfaceFactory_CreateAudioDecoder_Params_Data)");
class  InterfaceFactory_CreateVideoDecoder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data video_decoder;
  mojo::internal::Interface_Data dst_video_decoder;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateVideoDecoder_Params_Data>;

  InterfaceFactory_CreateVideoDecoder_Params_Data();
  ~InterfaceFactory_CreateVideoDecoder_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateVideoDecoder_Params_Data) == 24,
              "Bad sizeof(InterfaceFactory_CreateVideoDecoder_Params_Data)");
class  InterfaceFactory_CreateAudioEncoder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data audio_encoder;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateAudioEncoder_Params_Data>;

  InterfaceFactory_CreateAudioEncoder_Params_Data();
  ~InterfaceFactory_CreateAudioEncoder_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateAudioEncoder_Params_Data) == 16,
              "Bad sizeof(InterfaceFactory_CreateAudioEncoder_Params_Data)");
class  InterfaceFactory_CreateDefaultRenderer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> audio_device_id;
  mojo::internal::Handle_Data renderer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateDefaultRenderer_Params_Data>;

  InterfaceFactory_CreateDefaultRenderer_Params_Data();
  ~InterfaceFactory_CreateDefaultRenderer_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateDefaultRenderer_Params_Data) == 24,
              "Bad sizeof(InterfaceFactory_CreateDefaultRenderer_Params_Data)");
class  InterfaceFactory_CreateMediaPlayerRenderer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data client_extension;
  mojo::internal::Handle_Data renderer;
  mojo::internal::Handle_Data renderer_extension;

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateMediaPlayerRenderer_Params_Data>;

  InterfaceFactory_CreateMediaPlayerRenderer_Params_Data();
  ~InterfaceFactory_CreateMediaPlayerRenderer_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateMediaPlayerRenderer_Params_Data) == 24,
              "Bad sizeof(InterfaceFactory_CreateMediaPlayerRenderer_Params_Data)");
class  InterfaceFactory_CreateFlingingRenderer_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> presentation_id;
  mojo::internal::Interface_Data client_extension;
  mojo::internal::Handle_Data renderer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateFlingingRenderer_Params_Data>;

  InterfaceFactory_CreateFlingingRenderer_Params_Data();
  ~InterfaceFactory_CreateFlingingRenderer_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateFlingingRenderer_Params_Data) == 32,
              "Bad sizeof(InterfaceFactory_CreateFlingingRenderer_Params_Data)");
class  InterfaceFactory_CreateCdm_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::CdmConfig_Data> cdm_config;

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateCdm_Params_Data>;

  InterfaceFactory_CreateCdm_Params_Data();
  ~InterfaceFactory_CreateCdm_Params_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateCdm_Params_Data) == 16,
              "Bad sizeof(InterfaceFactory_CreateCdm_Params_Data)");
class  InterfaceFactory_CreateCdm_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data cdm;
  mojo::internal::Pointer<::media::mojom::internal::CdmContext_Data> cdm_context;
  mojo::internal::Pointer<mojo::internal::String_Data> error_message;

 private:
  friend class mojo::internal::MessageFragment<InterfaceFactory_CreateCdm_ResponseParams_Data>;

  InterfaceFactory_CreateCdm_ResponseParams_Data();
  ~InterfaceFactory_CreateCdm_ResponseParams_Data() = delete;
};
static_assert(sizeof(InterfaceFactory_CreateCdm_ResponseParams_Data) == 32,
              "Bad sizeof(InterfaceFactory_CreateCdm_ResponseParams_Data)");

}  // namespace internal


class InterfaceFactory_CreateAudioDecoder_ParamsDataView {
 public:
  InterfaceFactory_CreateAudioDecoder_ParamsDataView() = default;

  InterfaceFactory_CreateAudioDecoder_ParamsDataView(
      internal::InterfaceFactory_CreateAudioDecoder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAudioDecoder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::AudioDecoderInterfaceBase>>(
            &data_->audio_decoder, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceFactory_CreateAudioDecoder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateVideoDecoder_ParamsDataView {
 public:
  InterfaceFactory_CreateVideoDecoder_ParamsDataView() = default;

  InterfaceFactory_CreateVideoDecoder_ParamsDataView(
      internal::InterfaceFactory_CreateVideoDecoder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeVideoDecoder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::VideoDecoderInterfaceBase>>(
            &data_->video_decoder, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDstVideoDecoder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::stable::mojom::StableVideoDecoderInterfaceBase>>(
            &data_->dst_video_decoder, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceFactory_CreateVideoDecoder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateAudioEncoder_ParamsDataView {
 public:
  InterfaceFactory_CreateAudioEncoder_ParamsDataView() = default;

  InterfaceFactory_CreateAudioEncoder_ParamsDataView(
      internal::InterfaceFactory_CreateAudioEncoder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeAudioEncoder() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::AudioEncoderInterfaceBase>>(
            &data_->audio_encoder, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceFactory_CreateAudioEncoder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateDefaultRenderer_ParamsDataView {
 public:
  InterfaceFactory_CreateDefaultRenderer_ParamsDataView() = default;

  InterfaceFactory_CreateDefaultRenderer_ParamsDataView(
      internal::InterfaceFactory_CreateDefaultRenderer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAudioDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAudioDeviceId(UserType* output) {
    
    auto* pointer = data_->audio_device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeRenderer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
            &data_->renderer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceFactory_CreateDefaultRenderer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateMediaPlayerRenderer_ParamsDataView {
 public:
  InterfaceFactory_CreateMediaPlayerRenderer_ParamsDataView() = default;

  InterfaceFactory_CreateMediaPlayerRenderer_ParamsDataView(
      internal::InterfaceFactory_CreateMediaPlayerRenderer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeClientExtension() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::mojom::MediaPlayerRendererClientExtensionInterfaceBase>>(
            &data_->client_extension, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeRenderer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
            &data_->renderer, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeRendererExtension() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::MediaPlayerRendererExtensionInterfaceBase>>(
            &data_->renderer_extension, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceFactory_CreateMediaPlayerRenderer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateFlingingRenderer_ParamsDataView {
 public:
  InterfaceFactory_CreateFlingingRenderer_ParamsDataView() = default;

  InterfaceFactory_CreateFlingingRenderer_ParamsDataView(
      internal::InterfaceFactory_CreateFlingingRenderer_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPresentationIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPresentationId(UserType* output) {
    
    auto* pointer = data_->presentation_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeClientExtension() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::mojom::FlingingRendererClientExtensionInterfaceBase>>(
            &data_->client_extension, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeRenderer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
            &data_->renderer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::InterfaceFactory_CreateFlingingRenderer_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateCdm_ParamsDataView {
 public:
  InterfaceFactory_CreateCdm_ParamsDataView() = default;

  InterfaceFactory_CreateCdm_ParamsDataView(
      internal::InterfaceFactory_CreateCdm_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCdmConfigDataView(
      ::media::mojom::CdmConfigDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCdmConfig(UserType* output) {
    
    auto* pointer = data_->cdm_config.Get();
    return mojo::internal::Deserialize<::media::mojom::CdmConfigDataView>(
        pointer, output, message_);
  }
 private:
  internal::InterfaceFactory_CreateCdm_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class InterfaceFactory_CreateCdm_ResponseParamsDataView {
 public:
  InterfaceFactory_CreateCdm_ResponseParamsDataView() = default;

  InterfaceFactory_CreateCdm_ResponseParamsDataView(
      internal::InterfaceFactory_CreateCdm_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeCdm() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::media::mojom::ContentDecryptionModuleInterfaceBase>>(
            &data_->cdm, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetCdmContextDataView(
      ::media::mojom::CdmContextDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCdmContext(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::media::mojom::CdmContextDataView, UserType>(),
    "Attempting to read the optional `cdm_context` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCdmContext` instead "
    "of `ReadCdmContext if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->cdm_context.Get();
    return mojo::internal::Deserialize<::media::mojom::CdmContextDataView>(
        pointer, output, message_);
  }
  inline void GetErrorMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMessage(UserType* output) {
    
    auto* pointer = data_->error_message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::InterfaceFactory_CreateCdm_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};








inline void InterfaceFactory_CreateDefaultRenderer_ParamsDataView::GetAudioDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->audio_device_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void InterfaceFactory_CreateFlingingRenderer_ParamsDataView::GetPresentationIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->presentation_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void InterfaceFactory_CreateCdm_ParamsDataView::GetCdmConfigDataView(
    ::media::mojom::CdmConfigDataView* output) {
  auto pointer = data_->cdm_config.Get();
  *output = ::media::mojom::CdmConfigDataView(pointer, message_);
}


inline void InterfaceFactory_CreateCdm_ResponseParamsDataView::GetCdmContextDataView(
    ::media::mojom::CdmContextDataView* output) {
  auto pointer = data_->cdm_context.Get();
  *output = ::media::mojom::CdmContextDataView(pointer, message_);
}
inline void InterfaceFactory_CreateCdm_ResponseParamsDataView::GetErrorMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_message.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace media

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // MEDIA_MOJO_MOJOM_INTERFACE_FACTORY_MOJOM_PARAMS_DATA_H_