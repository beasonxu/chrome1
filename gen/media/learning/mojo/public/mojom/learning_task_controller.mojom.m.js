// media/learning/mojo/public/mojom/learning_task_controller.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';

import {
  UnguessableToken as mojoBase_mojom_UnguessableToken,
  UnguessableTokenSpec as mojoBase_mojom_UnguessableTokenSpec
} from '../../../../../mojo/public/mojom/base/unguessable_token.mojom.m.js';

import {
  FeatureValue as media_learning_mojom_FeatureValue,
  FeatureValueSpec as media_learning_mojom_FeatureValueSpec,
  ObservationCompletion as media_learning_mojom_ObservationCompletion,
  ObservationCompletionSpec as media_learning_mojom_ObservationCompletionSpec,
  TargetHistogram as media_learning_mojom_TargetHistogram,
  TargetHistogramSpec as media_learning_mojom_TargetHistogramSpec,
  TargetValue as media_learning_mojom_TargetValue,
  TargetValueSpec as media_learning_mojom_TargetValueSpec
} from './learning_types.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class LearningTaskControllerPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media.learning.mojom.LearningTaskController', scope);
  }
}

/** @interface */
export class LearningTaskControllerInterface {
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !Array<!media_learning_mojom_FeatureValue> } features
   * @param { ?media_learning_mojom_TargetValue } defaultTarget
   */

  beginObservation(id, features, defaultTarget) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !media_learning_mojom_ObservationCompletion } completion
   */

  completeObservation(id, completion) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   */

  cancelObservation(id) {}
  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { ?media_learning_mojom_TargetValue } defaultTarget
   */

  updateDefaultTarget(id, defaultTarget) {}
  
  /**
   * @param { !Array<!media_learning_mojom_FeatureValue> } features
   * @return {!Promise<{
        predicted: ?media_learning_mojom_TargetHistogram,
   *  }>}
   */

  predictDistribution(features) {}
}

/**
 * @implements { LearningTaskControllerInterface }
 */
export class LearningTaskControllerRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!LearningTaskControllerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          LearningTaskControllerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!LearningTaskControllerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !Array<!media_learning_mojom_FeatureValue> } features
   * @param { ?media_learning_mojom_TargetValue } defaultTarget
   */

  beginObservation(
      id,
      features,
      defaultTarget) {
    this.proxy.sendMessage(
        0,
        LearningTaskController_BeginObservation_ParamsSpec.$,
        null,
        [
          id,
          features,
          defaultTarget
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { !media_learning_mojom_ObservationCompletion } completion
   */

  completeObservation(
      id,
      completion) {
    this.proxy.sendMessage(
        1,
        LearningTaskController_CompleteObservation_ParamsSpec.$,
        null,
        [
          id,
          completion
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   */

  cancelObservation(
      id) {
    this.proxy.sendMessage(
        2,
        LearningTaskController_CancelObservation_ParamsSpec.$,
        null,
        [
          id
        ]);
  }

  
  /**
   * @param { !mojoBase_mojom_UnguessableToken } id
   * @param { ?media_learning_mojom_TargetValue } defaultTarget
   */

  updateDefaultTarget(
      id,
      defaultTarget) {
    this.proxy.sendMessage(
        3,
        LearningTaskController_UpdateDefaultTarget_ParamsSpec.$,
        null,
        [
          id,
          defaultTarget
        ]);
  }

  
  /**
   * @param { !Array<!media_learning_mojom_FeatureValue> } features
   * @return {!Promise<{
        predicted: ?media_learning_mojom_TargetHistogram,
   *  }>}
   */

  predictDistribution(
      features) {
    return this.proxy.sendMessage(
        4,
        LearningTaskController_PredictDistribution_ParamsSpec.$,
        LearningTaskController_PredictDistribution_ResponseParamsSpec.$,
        [
          features
        ]);
  }
}

/**
 * An object which receives request messages for the LearningTaskController
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class LearningTaskControllerReceiver {
  /**
   * @param {!LearningTaskControllerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!LearningTaskControllerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        LearningTaskControllerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!LearningTaskControllerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        LearningTaskController_BeginObservation_ParamsSpec.$,
        null,
        impl.beginObservation.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        LearningTaskController_CompleteObservation_ParamsSpec.$,
        null,
        impl.completeObservation.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        LearningTaskController_CancelObservation_ParamsSpec.$,
        null,
        impl.cancelObservation.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        LearningTaskController_UpdateDefaultTarget_ParamsSpec.$,
        null,
        impl.updateDefaultTarget.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        LearningTaskController_PredictDistribution_ParamsSpec.$,
        LearningTaskController_PredictDistribution_ResponseParamsSpec.$,
        impl.predictDistribution.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class LearningTaskController {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media.learning.mojom.LearningTaskController";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!LearningTaskControllerRemote}
   */
  static getRemote() {
    let remote = new LearningTaskControllerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the LearningTaskController
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class LearningTaskControllerCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      LearningTaskControllerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!LearningTaskControllerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.beginObservation =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        LearningTaskController_BeginObservation_ParamsSpec.$,
        null,
        this.beginObservation.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.completeObservation =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        LearningTaskController_CompleteObservation_ParamsSpec.$,
        null,
        this.completeObservation.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.cancelObservation =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        LearningTaskController_CancelObservation_ParamsSpec.$,
        null,
        this.cancelObservation.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.updateDefaultTarget =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        LearningTaskController_UpdateDefaultTarget_ParamsSpec.$,
        null,
        this.updateDefaultTarget.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.predictDistribution =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        LearningTaskController_PredictDistribution_ParamsSpec.$,
        LearningTaskController_PredictDistribution_ResponseParamsSpec.$,
        this.predictDistribution.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const LearningTaskController_BeginObservation_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const LearningTaskController_CompleteObservation_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const LearningTaskController_CancelObservation_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const LearningTaskController_UpdateDefaultTarget_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const LearningTaskController_PredictDistribution_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const LearningTaskController_PredictDistribution_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    LearningTaskController_BeginObservation_ParamsSpec.$,
    'LearningTaskController_BeginObservation_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'features', 8,
        0,
        mojo.internal.Array(media_learning_mojom_FeatureValueSpec.$, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'defaultTarget', 16,
        0,
        media_learning_mojom_TargetValueSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class LearningTaskController_BeginObservation_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !Array<!media_learning_mojom_FeatureValue> } */
    this.features;
    /** @type { (media_learning_mojom_TargetValue|undefined) } */
    this.defaultTarget;
  }
}



mojo.internal.Struct(
    LearningTaskController_CompleteObservation_ParamsSpec.$,
    'LearningTaskController_CompleteObservation_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'completion', 8,
        0,
        media_learning_mojom_ObservationCompletionSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class LearningTaskController_CompleteObservation_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { !media_learning_mojom_ObservationCompletion } */
    this.completion;
  }
}



mojo.internal.Struct(
    LearningTaskController_CancelObservation_ParamsSpec.$,
    'LearningTaskController_CancelObservation_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class LearningTaskController_CancelObservation_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
  }
}



mojo.internal.Struct(
    LearningTaskController_UpdateDefaultTarget_ParamsSpec.$,
    'LearningTaskController_UpdateDefaultTarget_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        mojoBase_mojom_UnguessableTokenSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'defaultTarget', 8,
        0,
        media_learning_mojom_TargetValueSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class LearningTaskController_UpdateDefaultTarget_Params {
  constructor() {
    /** @type { !mojoBase_mojom_UnguessableToken } */
    this.id;
    /** @type { (media_learning_mojom_TargetValue|undefined) } */
    this.defaultTarget;
  }
}



mojo.internal.Struct(
    LearningTaskController_PredictDistribution_ParamsSpec.$,
    'LearningTaskController_PredictDistribution_Params',
    [
      mojo.internal.StructField(
        'features', 0,
        0,
        mojo.internal.Array(media_learning_mojom_FeatureValueSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class LearningTaskController_PredictDistribution_Params {
  constructor() {
    /** @type { !Array<!media_learning_mojom_FeatureValue> } */
    this.features;
  }
}



mojo.internal.Struct(
    LearningTaskController_PredictDistribution_ResponseParamsSpec.$,
    'LearningTaskController_PredictDistribution_ResponseParams',
    [
      mojo.internal.StructField(
        'predicted', 0,
        0,
        media_learning_mojom_TargetHistogramSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class LearningTaskController_PredictDistribution_ResponseParams {
  constructor() {
    /** @type { (media_learning_mojom_TargetHistogram|undefined) } */
    this.predicted;
  }
}

