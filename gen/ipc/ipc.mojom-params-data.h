// ipc/ipc.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef IPC_IPC_MOJOM_PARAMS_DATA_H_
#define IPC_IPC_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace IPC {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(IPC_MOJOM_SHARED) Channel_SetPeerPid_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t pid;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<Channel_SetPeerPid_Params_Data>;

  Channel_SetPeerPid_Params_Data();
  ~Channel_SetPeerPid_Params_Data() = delete;
};
static_assert(sizeof(Channel_SetPeerPid_Params_Data) == 16,
              "Bad sizeof(Channel_SetPeerPid_Params_Data)");
class COMPONENT_EXPORT(IPC_MOJOM_SHARED) Channel_Receive_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::Message_Data> message;

 private:
  friend class mojo::internal::MessageFragment<Channel_Receive_Params_Data>;

  Channel_Receive_Params_Data();
  ~Channel_Receive_Params_Data() = delete;
};
static_assert(sizeof(Channel_Receive_Params_Data) == 16,
              "Bad sizeof(Channel_Receive_Params_Data)");
class COMPONENT_EXPORT(IPC_MOJOM_SHARED) Channel_GetAssociatedInterface_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::GenericPendingAssociatedReceiver_Data> receiver;

 private:
  friend class mojo::internal::MessageFragment<Channel_GetAssociatedInterface_Params_Data>;

  Channel_GetAssociatedInterface_Params_Data();
  ~Channel_GetAssociatedInterface_Params_Data() = delete;
};
static_assert(sizeof(Channel_GetAssociatedInterface_Params_Data) == 16,
              "Bad sizeof(Channel_GetAssociatedInterface_Params_Data)");

}  // namespace internal


class Channel_SetPeerPid_ParamsDataView {
 public:
  Channel_SetPeerPid_ParamsDataView() = default;

  Channel_SetPeerPid_ParamsDataView(
      internal::Channel_SetPeerPid_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t pid() const {
    return data_->pid;
  }
 private:
  internal::Channel_SetPeerPid_Params_Data* data_ = nullptr;
};



class Channel_Receive_ParamsDataView {
 public:
  Channel_Receive_ParamsDataView() = default;

  Channel_Receive_ParamsDataView(
      internal::Channel_Receive_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetMessageDataView(
      MessageDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMessage(UserType* output) {
    
    auto* pointer = data_->message.Get();
    return mojo::internal::Deserialize<::IPC::mojom::MessageDataView>(
        pointer, output, message_);
  }
 private:
  internal::Channel_Receive_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Channel_GetAssociatedInterface_ParamsDataView {
 public:
  Channel_GetAssociatedInterface_ParamsDataView() = default;

  Channel_GetAssociatedInterface_ParamsDataView(
      internal::Channel_GetAssociatedInterface_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetReceiverDataView(
      ::mojo_base::mojom::GenericPendingAssociatedReceiverDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReceiver(UserType* output) {
    
    auto* pointer = data_->receiver.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::GenericPendingAssociatedReceiverDataView>(
        pointer, output, message_);
  }
 private:
  internal::Channel_GetAssociatedInterface_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void Channel_Receive_ParamsDataView::GetMessageDataView(
    MessageDataView* output) {
  auto pointer = data_->message.Get();
  *output = MessageDataView(pointer, message_);
}


inline void Channel_GetAssociatedInterface_ParamsDataView::GetReceiverDataView(
    ::mojo_base::mojom::GenericPendingAssociatedReceiverDataView* output) {
  auto pointer = data_->receiver.Get();
  *output = ::mojo_base::mojom::GenericPendingAssociatedReceiverDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace IPC

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // IPC_IPC_MOJOM_PARAMS_DATA_H_