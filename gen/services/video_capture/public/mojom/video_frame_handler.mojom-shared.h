// services/video_capture/public/mojom/video_frame_handler.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_SHARED_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/video_capture/public/mojom/video_frame_handler.mojom-shared-internal.h"
#include "media/capture/mojom/video_capture_buffer.mojom-shared.h"
#include "media/capture/mojom/video_capture_types.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace video_capture {
namespace mojom {
class ReadyFrameInBufferDataView;



}  // namespace mojom
}  // namespace video_capture

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::video_capture::mojom::ReadyFrameInBufferDataView> {
  using Data = ::video_capture::mojom::internal::ReadyFrameInBuffer_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace video_capture {
namespace mojom {
// Interface base classes. They are used for type safety check.
class VideoFrameAccessHandlerInterfaceBase {};

using VideoFrameAccessHandlerPtrDataView =
    mojo::InterfacePtrDataView<VideoFrameAccessHandlerInterfaceBase>;
using VideoFrameAccessHandlerRequestDataView =
    mojo::InterfaceRequestDataView<VideoFrameAccessHandlerInterfaceBase>;
using VideoFrameAccessHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<VideoFrameAccessHandlerInterfaceBase>;
using VideoFrameAccessHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<VideoFrameAccessHandlerInterfaceBase>;
class VideoFrameHandlerInterfaceBase {};

using VideoFrameHandlerPtrDataView =
    mojo::InterfacePtrDataView<VideoFrameHandlerInterfaceBase>;
using VideoFrameHandlerRequestDataView =
    mojo::InterfaceRequestDataView<VideoFrameHandlerInterfaceBase>;
using VideoFrameHandlerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<VideoFrameHandlerInterfaceBase>;
using VideoFrameHandlerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<VideoFrameHandlerInterfaceBase>;


class ReadyFrameInBufferDataView {
 public:
  ReadyFrameInBufferDataView() = default;

  ReadyFrameInBufferDataView(
      internal::ReadyFrameInBuffer_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t buffer_id() const {
    return data_->buffer_id;
  }
  int32_t frame_feedback_id() const {
    return data_->frame_feedback_id;
  }
  inline void GetFrameInfoDataView(
      ::media::mojom::VideoFrameInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameInfo(UserType* output) {
    
    auto* pointer = data_->frame_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoFrameInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ReadyFrameInBuffer_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace video_capture

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::video_capture::mojom::ReadyFrameInBufferDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::video_capture::mojom::ReadyFrameInBufferDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::video_capture::mojom::internal::ReadyFrameInBuffer_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->buffer_id = Traits::buffer_id(input);
    fragment->frame_feedback_id = Traits::frame_feedback_id(input);
    decltype(Traits::frame_info(input)) in_frame_info = Traits::frame_info(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->frame_info)::BaseType> frame_info_fragment(
            fragment.message());
    mojo::internal::Serialize<::media::mojom::VideoFrameInfoDataView>(
        in_frame_info, frame_info_fragment);
    fragment->frame_info.Set(
        frame_info_fragment.is_null() ? nullptr : frame_info_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->frame_info.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frame_info in ReadyFrameInBuffer struct");
  }

  static bool Deserialize(::video_capture::mojom::internal::ReadyFrameInBuffer_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::video_capture::mojom::ReadyFrameInBufferDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace video_capture {
namespace mojom {

inline void ReadyFrameInBufferDataView::GetFrameInfoDataView(
    ::media::mojom::VideoFrameInfoDataView* output) {
  auto pointer = data_->frame_info.Get();
  *output = ::media::mojom::VideoFrameInfoDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace video_capture

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_FRAME_HANDLER_MOJOM_SHARED_H_