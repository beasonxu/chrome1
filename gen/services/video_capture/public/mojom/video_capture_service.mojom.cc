// services/video_capture/public/mojom/video_capture_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/video_capture/public/mojom/video_capture_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/video_capture/public/mojom/video_capture_service.mojom-params-data.h"
#include "services/video_capture/public/mojom/video_capture_service.mojom-shared-message-ids.h"

#include "services/video_capture/public/mojom/video_capture_service.mojom-import-headers.h"
#include "services/video_capture/public/mojom/video_capture_service.mojom-test-utils.h"


#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_CAPTURE_SERVICE_MOJOM_JUMBO_H_
#endif



namespace video_capture {
namespace mojom {
const char VideoCaptureService::Name_[] = "video_capture.mojom.VideoCaptureService";

VideoCaptureService::IPCStableHashFunction VideoCaptureService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kVideoCaptureService_ConnectToDeviceFactory_Name: {
      return &VideoCaptureService::ConnectToDeviceFactory_Sym::IPCStableHash;
    }
    case internal::kVideoCaptureService_ConnectToVideoSourceProvider_Name: {
      return &VideoCaptureService::ConnectToVideoSourceProvider_Sym::IPCStableHash;
    }
    case internal::kVideoCaptureService_SetRetryCount_Name: {
      return &VideoCaptureService::SetRetryCount_Sym::IPCStableHash;
    }
    case internal::kVideoCaptureService_BindControlsForTesting_Name: {
      return &VideoCaptureService::BindControlsForTesting_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* VideoCaptureService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kVideoCaptureService_ConnectToDeviceFactory_Name:
            return "Receive video_capture::mojom::VideoCaptureService::ConnectToDeviceFactory";
      case internal::kVideoCaptureService_ConnectToVideoSourceProvider_Name:
            return "Receive video_capture::mojom::VideoCaptureService::ConnectToVideoSourceProvider";
      case internal::kVideoCaptureService_SetRetryCount_Name:
            return "Receive video_capture::mojom::VideoCaptureService::SetRetryCount";
      case internal::kVideoCaptureService_BindControlsForTesting_Name:
            return "Receive video_capture::mojom::VideoCaptureService::BindControlsForTesting";
    }
  } else {
    switch (message.name()) {
      case internal::kVideoCaptureService_ConnectToDeviceFactory_Name:
            return "Receive reply video_capture::mojom::VideoCaptureService::ConnectToDeviceFactory";
      case internal::kVideoCaptureService_ConnectToVideoSourceProvider_Name:
            return "Receive reply video_capture::mojom::VideoCaptureService::ConnectToVideoSourceProvider";
      case internal::kVideoCaptureService_SetRetryCount_Name:
            return "Receive reply video_capture::mojom::VideoCaptureService::SetRetryCount";
      case internal::kVideoCaptureService_BindControlsForTesting_Name:
            return "Receive reply video_capture::mojom::VideoCaptureService::BindControlsForTesting";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t VideoCaptureService::ConnectToDeviceFactory_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::VideoCaptureService::ConnectToDeviceFactory");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t VideoCaptureService::ConnectToVideoSourceProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::VideoCaptureService::ConnectToVideoSourceProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t VideoCaptureService::SetRetryCount_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::VideoCaptureService::SetRetryCount");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t VideoCaptureService::BindControlsForTesting_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::VideoCaptureService::BindControlsForTesting");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

VideoCaptureServiceProxy::VideoCaptureServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void VideoCaptureServiceProxy::ConnectToDeviceFactory(
    ::mojo::PendingReceiver<::video_capture::mojom::DeviceFactory> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::VideoCaptureService::ConnectToDeviceFactory", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::DeviceFactory>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoCaptureService_ConnectToDeviceFactory_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::VideoCaptureService_ConnectToDeviceFactory_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::DeviceFactoryInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in VideoCaptureService.ConnectToDeviceFactory request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoCaptureService::Name_);
  message.set_method_name("ConnectToDeviceFactory");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void VideoCaptureServiceProxy::ConnectToVideoSourceProvider(
    ::mojo::PendingReceiver<::video_capture::mojom::VideoSourceProvider> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::VideoCaptureService::ConnectToVideoSourceProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::VideoSourceProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoCaptureService_ConnectToVideoSourceProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::VideoCaptureService_ConnectToVideoSourceProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::VideoSourceProviderInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in VideoCaptureService.ConnectToVideoSourceProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoCaptureService::Name_);
  message.set_method_name("ConnectToVideoSourceProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void VideoCaptureServiceProxy::SetRetryCount(
    int32_t in_count) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::VideoCaptureService::SetRetryCount", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("count"), in_count,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoCaptureService_SetRetryCount_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::VideoCaptureService_SetRetryCount_Params_Data> params(
          message);
  params.Allocate();
  params->count = in_count;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoCaptureService::Name_);
  message.set_method_name("SetRetryCount");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void VideoCaptureServiceProxy::BindControlsForTesting(
    ::mojo::PendingReceiver<::video_capture::mojom::TestingControls> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::VideoCaptureService::BindControlsForTesting", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::TestingControls>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kVideoCaptureService_BindControlsForTesting_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::VideoCaptureService_BindControlsForTesting_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::TestingControlsInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in VideoCaptureService.BindControlsForTesting request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(VideoCaptureService::Name_);
  message.set_method_name("BindControlsForTesting");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool VideoCaptureServiceStubDispatch::Accept(
    VideoCaptureService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kVideoCaptureService_ConnectToDeviceFactory_Name: {

      DCHECK(message->is_serialized());
      internal::VideoCaptureService_ConnectToDeviceFactory_Params_Data* params =
          reinterpret_cast<internal::VideoCaptureService_ConnectToDeviceFactory_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::video_capture::mojom::DeviceFactory> p_receiver{};
      VideoCaptureService_ConnectToDeviceFactory_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            VideoCaptureService::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ConnectToDeviceFactory(
std::move(p_receiver));
      return true;
    }
    case internal::kVideoCaptureService_ConnectToVideoSourceProvider_Name: {

      DCHECK(message->is_serialized());
      internal::VideoCaptureService_ConnectToVideoSourceProvider_Params_Data* params =
          reinterpret_cast<internal::VideoCaptureService_ConnectToVideoSourceProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::video_capture::mojom::VideoSourceProvider> p_receiver{};
      VideoCaptureService_ConnectToVideoSourceProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            VideoCaptureService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ConnectToVideoSourceProvider(
std::move(p_receiver));
      return true;
    }
    case internal::kVideoCaptureService_SetRetryCount_Name: {

      DCHECK(message->is_serialized());
      internal::VideoCaptureService_SetRetryCount_Params_Data* params =
          reinterpret_cast<internal::VideoCaptureService_SetRetryCount_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_count{};
      VideoCaptureService_SetRetryCount_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_count = input_data_view.count();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            VideoCaptureService::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetRetryCount(
std::move(p_count));
      return true;
    }
    case internal::kVideoCaptureService_BindControlsForTesting_Name: {

      DCHECK(message->is_serialized());
      internal::VideoCaptureService_BindControlsForTesting_Params_Data* params =
          reinterpret_cast<internal::VideoCaptureService_BindControlsForTesting_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::video_capture::mojom::TestingControls> p_receiver{};
      VideoCaptureService_BindControlsForTesting_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            VideoCaptureService::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindControlsForTesting(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool VideoCaptureServiceStubDispatch::AcceptWithResponder(
    VideoCaptureService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kVideoCaptureService_ConnectToDeviceFactory_Name: {
      break;
    }
    case internal::kVideoCaptureService_ConnectToVideoSourceProvider_Name: {
      break;
    }
    case internal::kVideoCaptureService_SetRetryCount_Name: {
      break;
    }
    case internal::kVideoCaptureService_BindControlsForTesting_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kVideoCaptureServiceValidationInfo[] = {
    {&internal::VideoCaptureService_ConnectToDeviceFactory_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::VideoCaptureService_ConnectToVideoSourceProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::VideoCaptureService_SetRetryCount_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::VideoCaptureService_BindControlsForTesting_Params_Data::Validate,
     nullptr /* no response */},
};

bool VideoCaptureServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::video_capture::mojom::VideoCaptureService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kVideoCaptureServiceValidationInfo);
}



}  // namespace mojom
}  // namespace video_capture


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace video_capture {
namespace mojom {


void VideoCaptureServiceInterceptorForTesting::ConnectToDeviceFactory(::mojo::PendingReceiver<::video_capture::mojom::DeviceFactory> receiver) {
  GetForwardingInterface()->ConnectToDeviceFactory(std::move(receiver));
}
void VideoCaptureServiceInterceptorForTesting::ConnectToVideoSourceProvider(::mojo::PendingReceiver<::video_capture::mojom::VideoSourceProvider> receiver) {
  GetForwardingInterface()->ConnectToVideoSourceProvider(std::move(receiver));
}
void VideoCaptureServiceInterceptorForTesting::SetRetryCount(int32_t count) {
  GetForwardingInterface()->SetRetryCount(std::move(count));
}
void VideoCaptureServiceInterceptorForTesting::BindControlsForTesting(::mojo::PendingReceiver<::video_capture::mojom::TestingControls> receiver) {
  GetForwardingInterface()->BindControlsForTesting(std::move(receiver));
}
VideoCaptureServiceAsyncWaiter::VideoCaptureServiceAsyncWaiter(
    VideoCaptureService* proxy) : proxy_(proxy) {}

VideoCaptureServiceAsyncWaiter::~VideoCaptureServiceAsyncWaiter() = default;






}  // namespace mojom
}  // namespace video_capture


#if defined(__clang__)
#pragma clang diagnostic pop
#endif