// services/video_capture/public/mojom/device_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace video_capture {
namespace mojom {
namespace internal {

class ValidationContext;
class  DeviceFactory_GetDeviceInfos_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_GetDeviceInfos_Params_Data>;

  DeviceFactory_GetDeviceInfos_Params_Data();
  ~DeviceFactory_GetDeviceInfos_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_GetDeviceInfos_Params_Data) == 8,
              "Bad sizeof(DeviceFactory_GetDeviceInfos_Params_Data)");
class  DeviceFactory_GetDeviceInfos_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data>>> device_infos;

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_GetDeviceInfos_ResponseParams_Data>;

  DeviceFactory_GetDeviceInfos_ResponseParams_Data();
  ~DeviceFactory_GetDeviceInfos_ResponseParams_Data() = delete;
};
static_assert(sizeof(DeviceFactory_GetDeviceInfos_ResponseParams_Data) == 16,
              "Bad sizeof(DeviceFactory_GetDeviceInfos_ResponseParams_Data)");
class  DeviceFactory_CreateDevice_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> device_id;
  mojo::internal::Handle_Data device_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_CreateDevice_Params_Data>;

  DeviceFactory_CreateDevice_Params_Data();
  ~DeviceFactory_CreateDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_CreateDevice_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_CreateDevice_Params_Data)");
class  DeviceFactory_CreateDevice_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t result_code;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_CreateDevice_ResponseParams_Data>;

  DeviceFactory_CreateDevice_ResponseParams_Data();
  ~DeviceFactory_CreateDevice_ResponseParams_Data() = delete;
};
static_assert(sizeof(DeviceFactory_CreateDevice_ResponseParams_Data) == 16,
              "Bad sizeof(DeviceFactory_CreateDevice_ResponseParams_Data)");
class  DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Interface_Data producer;
  uint8_t send_buffer_handles_to_producer_as_raw_file_descriptors : 1;
  uint8_t pad2_[3];
  mojo::internal::Handle_Data virtual_device_receiver;

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data>;

  DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data();
  ~DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data) == 32,
              "Bad sizeof(DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data)");
class  DeviceFactory_AddTextureVirtualDevice_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Handle_Data virtual_device_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_AddTextureVirtualDevice_Params_Data>;

  DeviceFactory_AddTextureVirtualDevice_Params_Data();
  ~DeviceFactory_AddTextureVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_AddTextureVirtualDevice_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_AddTextureVirtualDevice_Params_Data)");
class  DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureDeviceInfo_Data> device_info;
  mojo::internal::Handle_Data virtual_device_receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data>;

  DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data();
  ~DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data)");
class  DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;
  uint8_t raise_event_if_virtual_devices_already_present : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data>;

  DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data();
  ~DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data() = delete;
};
static_assert(sizeof(DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data) == 24,
              "Bad sizeof(DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data)");

}  // namespace internal


class DeviceFactory_GetDeviceInfos_ParamsDataView {
 public:
  DeviceFactory_GetDeviceInfos_ParamsDataView() = default;

  DeviceFactory_GetDeviceInfos_ParamsDataView(
      internal::DeviceFactory_GetDeviceInfos_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DeviceFactory_GetDeviceInfos_Params_Data* data_ = nullptr;
};



class DeviceFactory_GetDeviceInfos_ResponseParamsDataView {
 public:
  DeviceFactory_GetDeviceInfos_ResponseParamsDataView() = default;

  DeviceFactory_GetDeviceInfos_ResponseParamsDataView(
      internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfosDataView(
      mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfos(UserType* output) {
    
    auto* pointer = data_->device_infos.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceFactory_CreateDevice_ParamsDataView {
 public:
  DeviceFactory_CreateDevice_ParamsDataView() = default;

  DeviceFactory_CreateDevice_ParamsDataView(
      internal::DeviceFactory_CreateDevice_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceId(UserType* output) {
    
    auto* pointer = data_->device_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::DeviceInterfaceBase>>(
            &data_->device_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_CreateDevice_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceFactory_CreateDevice_ResponseParamsDataView {
 public:
  DeviceFactory_CreateDevice_ResponseParamsDataView() = default;

  DeviceFactory_CreateDevice_ResponseParamsDataView(
      internal::DeviceFactory_CreateDevice_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadResultCode(UserType* output) const {
    auto data_value = data_->result_code;
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureError>(
        data_value, output);
  }
  ::media::mojom::VideoCaptureError result_code() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::media::mojom::VideoCaptureError>(data_->result_code));
  }
 private:
  internal::DeviceFactory_CreateDevice_ResponseParams_Data* data_ = nullptr;
};



class DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView {
 public:
  DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView() = default;

  DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView(
      internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeProducer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::ProducerInterfaceBase>>(
            &data_->producer, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool send_buffer_handles_to_producer_as_raw_file_descriptors() const {
    return data_->send_buffer_handles_to_producer_as_raw_file_descriptors;
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::SharedMemoryVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceFactory_AddTextureVirtualDevice_ParamsDataView {
 public:
  DeviceFactory_AddTextureVirtualDevice_ParamsDataView() = default;

  DeviceFactory_AddTextureVirtualDevice_ParamsDataView(
      internal::DeviceFactory_AddTextureVirtualDevice_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::TextureVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_AddTextureVirtualDevice_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceFactory_AddGpuMemoryBufferVirtualDevice_ParamsDataView {
 public:
  DeviceFactory_AddGpuMemoryBufferVirtualDevice_ParamsDataView() = default;

  DeviceFactory_AddGpuMemoryBufferVirtualDevice_ParamsDataView(
      internal::DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::media::mojom::VideoCaptureDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeVirtualDeviceReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::GpuMemoryBufferVirtualDeviceInterfaceBase>>(
            &data_->virtual_device_receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView {
 public:
  DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView() = default;

  DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView(
      internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::DevicesChangedObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
  bool raise_event_if_virtual_devices_already_present() const {
    return data_->raise_event_if_virtual_devices_already_present;
  }
 private:
  internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void DeviceFactory_GetDeviceInfos_ResponseParamsDataView::GetDeviceInfosDataView(
    mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>* output) {
  auto pointer = data_->device_infos.Get();
  *output = mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>(pointer, message_);
}


inline void DeviceFactory_CreateDevice_ParamsDataView::GetDeviceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->device_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, message_);
}


inline void DeviceFactory_AddTextureVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, message_);
}


inline void DeviceFactory_AddGpuMemoryBufferVirtualDevice_ParamsDataView::GetDeviceInfoDataView(
    ::media::mojom::VideoCaptureDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::media::mojom::VideoCaptureDeviceInfoDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_PARAMS_DATA_H_