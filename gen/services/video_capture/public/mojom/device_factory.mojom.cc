// services/video_capture/public/mojom/device_factory.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/video_capture/public/mojom/device_factory.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/video_capture/public/mojom/device_factory.mojom-params-data.h"
#include "services/video_capture/public/mojom/device_factory.mojom-shared-message-ids.h"

#include "services/video_capture/public/mojom/device_factory.mojom-import-headers.h"
#include "services/video_capture/public/mojom/device_factory.mojom-test-utils.h"


#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_JUMBO_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_DEVICE_FACTORY_MOJOM_JUMBO_H_
#endif



namespace video_capture {
namespace mojom {
const char DeviceFactory::Name_[] = "video_capture.mojom.DeviceFactory";

DeviceFactory::IPCStableHashFunction DeviceFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kDeviceFactory_GetDeviceInfos_Name: {
      return &DeviceFactory::GetDeviceInfos_Sym::IPCStableHash;
    }
    case internal::kDeviceFactory_CreateDevice_Name: {
      return &DeviceFactory::CreateDevice_Sym::IPCStableHash;
    }
    case internal::kDeviceFactory_AddSharedMemoryVirtualDevice_Name: {
      return &DeviceFactory::AddSharedMemoryVirtualDevice_Sym::IPCStableHash;
    }
    case internal::kDeviceFactory_AddTextureVirtualDevice_Name: {
      return &DeviceFactory::AddTextureVirtualDevice_Sym::IPCStableHash;
    }
    case internal::kDeviceFactory_AddGpuMemoryBufferVirtualDevice_Name: {
      return &DeviceFactory::AddGpuMemoryBufferVirtualDevice_Sym::IPCStableHash;
    }
    case internal::kDeviceFactory_RegisterVirtualDevicesChangedObserver_Name: {
      return &DeviceFactory::RegisterVirtualDevicesChangedObserver_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* DeviceFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kDeviceFactory_GetDeviceInfos_Name:
            return "Receive video_capture::mojom::DeviceFactory::GetDeviceInfos";
      case internal::kDeviceFactory_CreateDevice_Name:
            return "Receive video_capture::mojom::DeviceFactory::CreateDevice";
      case internal::kDeviceFactory_AddSharedMemoryVirtualDevice_Name:
            return "Receive video_capture::mojom::DeviceFactory::AddSharedMemoryVirtualDevice";
      case internal::kDeviceFactory_AddTextureVirtualDevice_Name:
            return "Receive video_capture::mojom::DeviceFactory::AddTextureVirtualDevice";
      case internal::kDeviceFactory_AddGpuMemoryBufferVirtualDevice_Name:
            return "Receive video_capture::mojom::DeviceFactory::AddGpuMemoryBufferVirtualDevice";
      case internal::kDeviceFactory_RegisterVirtualDevicesChangedObserver_Name:
            return "Receive video_capture::mojom::DeviceFactory::RegisterVirtualDevicesChangedObserver";
    }
  } else {
    switch (message.name()) {
      case internal::kDeviceFactory_GetDeviceInfos_Name:
            return "Receive reply video_capture::mojom::DeviceFactory::GetDeviceInfos";
      case internal::kDeviceFactory_CreateDevice_Name:
            return "Receive reply video_capture::mojom::DeviceFactory::CreateDevice";
      case internal::kDeviceFactory_AddSharedMemoryVirtualDevice_Name:
            return "Receive reply video_capture::mojom::DeviceFactory::AddSharedMemoryVirtualDevice";
      case internal::kDeviceFactory_AddTextureVirtualDevice_Name:
            return "Receive reply video_capture::mojom::DeviceFactory::AddTextureVirtualDevice";
      case internal::kDeviceFactory_AddGpuMemoryBufferVirtualDevice_Name:
            return "Receive reply video_capture::mojom::DeviceFactory::AddGpuMemoryBufferVirtualDevice";
      case internal::kDeviceFactory_RegisterVirtualDevicesChangedObserver_Name:
            return "Receive reply video_capture::mojom::DeviceFactory::RegisterVirtualDevicesChangedObserver";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t DeviceFactory::GetDeviceInfos_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::DeviceFactory::GetDeviceInfos");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceFactory::CreateDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::DeviceFactory::CreateDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceFactory::AddSharedMemoryVirtualDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::DeviceFactory::AddSharedMemoryVirtualDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceFactory::AddTextureVirtualDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::DeviceFactory::AddTextureVirtualDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceFactory::AddGpuMemoryBufferVirtualDevice_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::DeviceFactory::AddGpuMemoryBufferVirtualDevice");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t DeviceFactory::RegisterVirtualDevicesChangedObserver_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)video_capture::mojom::DeviceFactory::RegisterVirtualDevicesChangedObserver");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class DeviceFactory_GetDeviceInfos_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceFactory_GetDeviceInfos_ForwardToCallback(
      DeviceFactory::GetDeviceInfosCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceFactory_GetDeviceInfos_ForwardToCallback(const DeviceFactory_GetDeviceInfos_ForwardToCallback&) = delete;
  DeviceFactory_GetDeviceInfos_ForwardToCallback& operator=(const DeviceFactory_GetDeviceInfos_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceFactory::GetDeviceInfosCallback callback_;
};

class DeviceFactory_CreateDevice_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  DeviceFactory_CreateDevice_ForwardToCallback(
      DeviceFactory::CreateDeviceCallback callback
      ) : callback_(std::move(callback)) {
  }

  DeviceFactory_CreateDevice_ForwardToCallback(const DeviceFactory_CreateDevice_ForwardToCallback&) = delete;
  DeviceFactory_CreateDevice_ForwardToCallback& operator=(const DeviceFactory_CreateDevice_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  DeviceFactory::CreateDeviceCallback callback_;
};

DeviceFactoryProxy::DeviceFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void DeviceFactoryProxy::GetDeviceInfos(
    GetDeviceInfosCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send video_capture::mojom::DeviceFactory::GetDeviceInfos");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_GetDeviceInfos_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_GetDeviceInfos_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("GetDeviceInfos");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceFactory_GetDeviceInfos_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DeviceFactoryProxy::CreateDevice(
    const std::string& in_device_id, ::mojo::PendingReceiver<::video_capture::mojom::Device> in_device_receiver, CreateDeviceCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::DeviceFactory::CreateDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_id"), in_device_id,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_receiver"), in_device_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::Device>>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_CreateDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_CreateDevice_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_id)::BaseType> device_id_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_device_id, device_id_fragment);
  params->device_id.Set(
      device_id_fragment.is_null() ? nullptr : device_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_id in DeviceFactory.CreateDevice request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::DeviceInterfaceBase>>(
      in_device_receiver, &params->device_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->device_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid device_receiver in DeviceFactory.CreateDevice request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("CreateDevice");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new DeviceFactory_CreateDevice_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void DeviceFactoryProxy::AddSharedMemoryVirtualDevice(
    const ::media::VideoCaptureDeviceInfo& in_device_info, ::mojo::PendingRemote<::video_capture::mojom::Producer> in_producer, bool in_send_buffer_handles_to_producer_as_raw_file_descriptors, ::mojo::PendingReceiver<::video_capture::mojom::SharedMemoryVirtualDevice> in_virtual_device_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::DeviceFactory::AddSharedMemoryVirtualDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_info"), in_device_info,
                        "<value of type const ::media::VideoCaptureDeviceInfo&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("producer"), in_producer,
                        "<value of type ::mojo::PendingRemote<::video_capture::mojom::Producer>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("send_buffer_handles_to_producer_as_raw_file_descriptors"), in_send_buffer_handles_to_producer_as_raw_file_descriptors,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("virtual_device_receiver"), in_virtual_device_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::SharedMemoryVirtualDevice>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_AddSharedMemoryVirtualDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_info)::BaseType> device_info_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
      in_device_info, device_info_fragment);
  params->device_info.Set(
      device_info_fragment.is_null() ? nullptr : device_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_info in DeviceFactory.AddSharedMemoryVirtualDevice request");
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::video_capture::mojom::ProducerInterfaceBase>>(
      in_producer, &params->producer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->producer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid producer in DeviceFactory.AddSharedMemoryVirtualDevice request");
  params->send_buffer_handles_to_producer_as_raw_file_descriptors = in_send_buffer_handles_to_producer_as_raw_file_descriptors;
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::SharedMemoryVirtualDeviceInterfaceBase>>(
      in_virtual_device_receiver, &params->virtual_device_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->virtual_device_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid virtual_device_receiver in DeviceFactory.AddSharedMemoryVirtualDevice request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("AddSharedMemoryVirtualDevice");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceFactoryProxy::AddTextureVirtualDevice(
    const ::media::VideoCaptureDeviceInfo& in_device_info, ::mojo::PendingReceiver<::video_capture::mojom::TextureVirtualDevice> in_virtual_device_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::DeviceFactory::AddTextureVirtualDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_info"), in_device_info,
                        "<value of type const ::media::VideoCaptureDeviceInfo&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("virtual_device_receiver"), in_virtual_device_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::TextureVirtualDevice>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_AddTextureVirtualDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_AddTextureVirtualDevice_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_info)::BaseType> device_info_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
      in_device_info, device_info_fragment);
  params->device_info.Set(
      device_info_fragment.is_null() ? nullptr : device_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_info in DeviceFactory.AddTextureVirtualDevice request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::TextureVirtualDeviceInterfaceBase>>(
      in_virtual_device_receiver, &params->virtual_device_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->virtual_device_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid virtual_device_receiver in DeviceFactory.AddTextureVirtualDevice request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("AddTextureVirtualDevice");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceFactoryProxy::AddGpuMemoryBufferVirtualDevice(
    const ::media::VideoCaptureDeviceInfo& in_device_info, ::mojo::PendingReceiver<::video_capture::mojom::GpuMemoryBufferVirtualDevice> in_virtual_device_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::DeviceFactory::AddGpuMemoryBufferVirtualDevice", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_info"), in_device_info,
                        "<value of type const ::media::VideoCaptureDeviceInfo&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("virtual_device_receiver"), in_virtual_device_receiver,
                        "<value of type ::mojo::PendingReceiver<::video_capture::mojom::GpuMemoryBufferVirtualDevice>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_AddGpuMemoryBufferVirtualDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_info)::BaseType> device_info_fragment(
          params.message());
  mojo::internal::Serialize<::media::mojom::VideoCaptureDeviceInfoDataView>(
      in_device_info, device_info_fragment);
  params->device_info.Set(
      device_info_fragment.is_null() ? nullptr : device_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_info in DeviceFactory.AddGpuMemoryBufferVirtualDevice request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::video_capture::mojom::GpuMemoryBufferVirtualDeviceInterfaceBase>>(
      in_virtual_device_receiver, &params->virtual_device_receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->virtual_device_receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid virtual_device_receiver in DeviceFactory.AddGpuMemoryBufferVirtualDevice request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("AddGpuMemoryBufferVirtualDevice");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void DeviceFactoryProxy::RegisterVirtualDevicesChangedObserver(
    ::mojo::PendingRemote<::video_capture::mojom::DevicesChangedObserver> in_observer, bool in_raise_event_if_virtual_devices_already_present) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send video_capture::mojom::DeviceFactory::RegisterVirtualDevicesChangedObserver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer,
                        "<value of type ::mojo::PendingRemote<::video_capture::mojom::DevicesChangedObserver>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("raise_event_if_virtual_devices_already_present"), in_raise_event_if_virtual_devices_already_present,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_RegisterVirtualDevicesChangedObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::video_capture::mojom::DevicesChangedObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in DeviceFactory.RegisterVirtualDevicesChangedObserver request");
  params->raise_event_if_virtual_devices_already_present = in_raise_event_if_virtual_devices_already_present;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("RegisterVirtualDevicesChangedObserver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class DeviceFactory_GetDeviceInfos_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceFactory::GetDeviceInfosCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceFactory_GetDeviceInfos_ProxyToResponder> proxy(
        new DeviceFactory_GetDeviceInfos_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceFactory_GetDeviceInfos_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceFactory_GetDeviceInfos_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceFactory_GetDeviceInfos_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceFactory::GetDeviceInfosCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::vector<::media::VideoCaptureDeviceInfo>& in_device_infos);
};

bool DeviceFactory_GetDeviceInfos_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<::media::VideoCaptureDeviceInfo> p_device_infos{};
  DeviceFactory_GetDeviceInfos_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDeviceInfos(&p_device_infos))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceFactory::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_device_infos));
  return true;
}

void DeviceFactory_GetDeviceInfos_ProxyToResponder::Run(
    const std::vector<::media::VideoCaptureDeviceInfo>& in_device_infos) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply video_capture::mojom::DeviceFactory::GetDeviceInfos", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("device_infos"), in_device_infos,
                        "<value of type const std::vector<::media::VideoCaptureDeviceInfo>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_GetDeviceInfos_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->device_infos)::BaseType>
      device_infos_fragment(params.message());
  const mojo::internal::ContainerValidateParams device_infos_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::media::mojom::VideoCaptureDeviceInfoDataView>>(
      in_device_infos, device_infos_fragment, &device_infos_validate_params);
  params->device_infos.Set(
      device_infos_fragment.is_null() ? nullptr : device_infos_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->device_infos.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null device_infos in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("GetDeviceInfos");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class DeviceFactory_CreateDevice_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static DeviceFactory::CreateDeviceCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<DeviceFactory_CreateDevice_ProxyToResponder> proxy(
        new DeviceFactory_CreateDevice_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&DeviceFactory_CreateDevice_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~DeviceFactory_CreateDevice_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  DeviceFactory_CreateDevice_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "DeviceFactory::CreateDeviceCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::media::VideoCaptureError in_result_code);
};

bool DeviceFactory_CreateDevice_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::DeviceFactory_CreateDevice_ResponseParams_Data* params =
      reinterpret_cast<
          internal::DeviceFactory_CreateDevice_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::media::VideoCaptureError p_result_code{};
  DeviceFactory_CreateDevice_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadResultCode(&p_result_code))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        DeviceFactory::Name_, 1, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_result_code));
  return true;
}

void DeviceFactory_CreateDevice_ProxyToResponder::Run(
    ::media::VideoCaptureError in_result_code) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply video_capture::mojom::DeviceFactory::CreateDevice", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("result_code"), in_result_code,
                        "<value of type ::media::VideoCaptureError>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kDeviceFactory_CreateDevice_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::video_capture::mojom::internal::DeviceFactory_CreateDevice_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::media::mojom::VideoCaptureError>(
      in_result_code, &params->result_code);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(DeviceFactory::Name_);
  message.set_method_name("CreateDevice");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool DeviceFactoryStubDispatch::Accept(
    DeviceFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kDeviceFactory_GetDeviceInfos_Name: {
      break;
    }
    case internal::kDeviceFactory_CreateDevice_Name: {
      break;
    }
    case internal::kDeviceFactory_AddSharedMemoryVirtualDevice_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data* params =
          reinterpret_cast<internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::media::VideoCaptureDeviceInfo p_device_info{};
      ::mojo::PendingRemote<::video_capture::mojom::Producer> p_producer{};
      bool p_send_buffer_handles_to_producer_as_raw_file_descriptors{};
      ::mojo::PendingReceiver<::video_capture::mojom::SharedMemoryVirtualDevice> p_virtual_device_receiver{};
      DeviceFactory_AddSharedMemoryVirtualDevice_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceInfo(&p_device_info))
        success = false;
      if (success) {
        p_producer =
            input_data_view.TakeProducer<decltype(p_producer)>();
      }
      if (success)
        p_send_buffer_handles_to_producer_as_raw_file_descriptors = input_data_view.send_buffer_handles_to_producer_as_raw_file_descriptors();
      if (success) {
        p_virtual_device_receiver =
            input_data_view.TakeVirtualDeviceReceiver<decltype(p_virtual_device_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceFactory::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddSharedMemoryVirtualDevice(
std::move(p_device_info), 
std::move(p_producer), 
std::move(p_send_buffer_handles_to_producer_as_raw_file_descriptors), 
std::move(p_virtual_device_receiver));
      return true;
    }
    case internal::kDeviceFactory_AddTextureVirtualDevice_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceFactory_AddTextureVirtualDevice_Params_Data* params =
          reinterpret_cast<internal::DeviceFactory_AddTextureVirtualDevice_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::media::VideoCaptureDeviceInfo p_device_info{};
      ::mojo::PendingReceiver<::video_capture::mojom::TextureVirtualDevice> p_virtual_device_receiver{};
      DeviceFactory_AddTextureVirtualDevice_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceInfo(&p_device_info))
        success = false;
      if (success) {
        p_virtual_device_receiver =
            input_data_view.TakeVirtualDeviceReceiver<decltype(p_virtual_device_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceFactory::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddTextureVirtualDevice(
std::move(p_device_info), 
std::move(p_virtual_device_receiver));
      return true;
    }
    case internal::kDeviceFactory_AddGpuMemoryBufferVirtualDevice_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data* params =
          reinterpret_cast<internal::DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::media::VideoCaptureDeviceInfo p_device_info{};
      ::mojo::PendingReceiver<::video_capture::mojom::GpuMemoryBufferVirtualDevice> p_virtual_device_receiver{};
      DeviceFactory_AddGpuMemoryBufferVirtualDevice_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceInfo(&p_device_info))
        success = false;
      if (success) {
        p_virtual_device_receiver =
            input_data_view.TakeVirtualDeviceReceiver<decltype(p_virtual_device_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceFactory::Name_, 4, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddGpuMemoryBufferVirtualDevice(
std::move(p_device_info), 
std::move(p_virtual_device_receiver));
      return true;
    }
    case internal::kDeviceFactory_RegisterVirtualDevicesChangedObserver_Name: {

      DCHECK(message->is_serialized());
      internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data* params =
          reinterpret_cast<internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<::video_capture::mojom::DevicesChangedObserver> p_observer{};
      bool p_raise_event_if_virtual_devices_already_present{};
      DeviceFactory_RegisterVirtualDevicesChangedObserver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (success)
        p_raise_event_if_virtual_devices_already_present = input_data_view.raise_event_if_virtual_devices_already_present();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceFactory::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->RegisterVirtualDevicesChangedObserver(
std::move(p_observer), 
std::move(p_raise_event_if_virtual_devices_already_present));
      return true;
    }
  }
  return false;
}

// static
bool DeviceFactoryStubDispatch::AcceptWithResponder(
    DeviceFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kDeviceFactory_GetDeviceInfos_Name: {

      internal::DeviceFactory_GetDeviceInfos_Params_Data* params =
          reinterpret_cast<
              internal::DeviceFactory_GetDeviceInfos_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      DeviceFactory_GetDeviceInfos_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceFactory::Name_, 0, false);
        return false;
      }
      DeviceFactory::GetDeviceInfosCallback callback =
          DeviceFactory_GetDeviceInfos_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetDeviceInfos(std::move(callback));
      return true;
    }
    case internal::kDeviceFactory_CreateDevice_Name: {

      internal::DeviceFactory_CreateDevice_Params_Data* params =
          reinterpret_cast<
              internal::DeviceFactory_CreateDevice_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      std::string p_device_id{};
      ::mojo::PendingReceiver<::video_capture::mojom::Device> p_device_receiver{};
      DeviceFactory_CreateDevice_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadDeviceId(&p_device_id))
        success = false;
      if (success) {
        p_device_receiver =
            input_data_view.TakeDeviceReceiver<decltype(p_device_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            DeviceFactory::Name_, 1, false);
        return false;
      }
      DeviceFactory::CreateDeviceCallback callback =
          DeviceFactory_CreateDevice_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateDevice(
std::move(p_device_id), 
std::move(p_device_receiver), std::move(callback));
      return true;
    }
    case internal::kDeviceFactory_AddSharedMemoryVirtualDevice_Name: {
      break;
    }
    case internal::kDeviceFactory_AddTextureVirtualDevice_Name: {
      break;
    }
    case internal::kDeviceFactory_AddGpuMemoryBufferVirtualDevice_Name: {
      break;
    }
    case internal::kDeviceFactory_RegisterVirtualDevicesChangedObserver_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kDeviceFactoryValidationInfo[] = {
    {&internal::DeviceFactory_GetDeviceInfos_Params_Data::Validate,
     &internal::DeviceFactory_GetDeviceInfos_ResponseParams_Data::Validate},
    {&internal::DeviceFactory_CreateDevice_Params_Data::Validate,
     &internal::DeviceFactory_CreateDevice_ResponseParams_Data::Validate},
    {&internal::DeviceFactory_AddSharedMemoryVirtualDevice_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceFactory_AddTextureVirtualDevice_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceFactory_AddGpuMemoryBufferVirtualDevice_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::DeviceFactory_RegisterVirtualDevicesChangedObserver_Params_Data::Validate,
     nullptr /* no response */},
};

bool DeviceFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::video_capture::mojom::DeviceFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kDeviceFactoryValidationInfo);
}

bool DeviceFactoryResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::video_capture::mojom::DeviceFactory::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kDeviceFactoryValidationInfo);
}


}  // namespace mojom
}  // namespace video_capture


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace video_capture {
namespace mojom {


void DeviceFactoryInterceptorForTesting::GetDeviceInfos(GetDeviceInfosCallback callback) {
  GetForwardingInterface()->GetDeviceInfos(std::move(callback));
}
void DeviceFactoryInterceptorForTesting::CreateDevice(const std::string& device_id, ::mojo::PendingReceiver<::video_capture::mojom::Device> device_receiver, CreateDeviceCallback callback) {
  GetForwardingInterface()->CreateDevice(std::move(device_id), std::move(device_receiver), std::move(callback));
}
void DeviceFactoryInterceptorForTesting::AddSharedMemoryVirtualDevice(const ::media::VideoCaptureDeviceInfo& device_info, ::mojo::PendingRemote<::video_capture::mojom::Producer> producer, bool send_buffer_handles_to_producer_as_raw_file_descriptors, ::mojo::PendingReceiver<::video_capture::mojom::SharedMemoryVirtualDevice> virtual_device_receiver) {
  GetForwardingInterface()->AddSharedMemoryVirtualDevice(std::move(device_info), std::move(producer), std::move(send_buffer_handles_to_producer_as_raw_file_descriptors), std::move(virtual_device_receiver));
}
void DeviceFactoryInterceptorForTesting::AddTextureVirtualDevice(const ::media::VideoCaptureDeviceInfo& device_info, ::mojo::PendingReceiver<::video_capture::mojom::TextureVirtualDevice> virtual_device_receiver) {
  GetForwardingInterface()->AddTextureVirtualDevice(std::move(device_info), std::move(virtual_device_receiver));
}
void DeviceFactoryInterceptorForTesting::AddGpuMemoryBufferVirtualDevice(const ::media::VideoCaptureDeviceInfo& device_info, ::mojo::PendingReceiver<::video_capture::mojom::GpuMemoryBufferVirtualDevice> virtual_device_receiver) {
  GetForwardingInterface()->AddGpuMemoryBufferVirtualDevice(std::move(device_info), std::move(virtual_device_receiver));
}
void DeviceFactoryInterceptorForTesting::RegisterVirtualDevicesChangedObserver(::mojo::PendingRemote<::video_capture::mojom::DevicesChangedObserver> observer, bool raise_event_if_virtual_devices_already_present) {
  GetForwardingInterface()->RegisterVirtualDevicesChangedObserver(std::move(observer), std::move(raise_event_if_virtual_devices_already_present));
}
DeviceFactoryAsyncWaiter::DeviceFactoryAsyncWaiter(
    DeviceFactory* proxy) : proxy_(proxy) {}

DeviceFactoryAsyncWaiter::~DeviceFactoryAsyncWaiter() = default;

void DeviceFactoryAsyncWaiter::GetDeviceInfos(
    std::vector<::media::VideoCaptureDeviceInfo>* out_device_infos) {
  base::RunLoop loop;
  proxy_->GetDeviceInfos(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::media::VideoCaptureDeviceInfo>* out_device_infos
,
             const std::vector<::media::VideoCaptureDeviceInfo>& device_infos) {*out_device_infos = std::move(device_infos);
            loop->Quit();
          },
          &loop,
          out_device_infos));
  loop.Run();
}
void DeviceFactoryAsyncWaiter::CreateDevice(
    const std::string& device_id, ::mojo::PendingReceiver<::video_capture::mojom::Device> device_receiver, ::media::VideoCaptureError* out_result_code) {
  base::RunLoop loop;
  proxy_->CreateDevice(std::move(device_id),std::move(device_receiver),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::media::VideoCaptureError* out_result_code
,
             ::media::VideoCaptureError result_code) {*out_result_code = std::move(result_code);
            loop->Quit();
          },
          &loop,
          out_result_code));
  loop.Run();
}





}  // namespace mojom
}  // namespace video_capture


#if defined(__clang__)
#pragma clang diagnostic pop
#endif