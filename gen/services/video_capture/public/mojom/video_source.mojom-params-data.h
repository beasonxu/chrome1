// services/video_capture/public/mojom/video_source.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_SOURCE_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_SOURCE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace video_capture {
namespace mojom {
namespace internal {

class ValidationContext;
class  PushVideoStreamSubscription_Activate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_Activate_Params_Data>;

  PushVideoStreamSubscription_Activate_Params_Data();
  ~PushVideoStreamSubscription_Activate_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_Activate_Params_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_Activate_Params_Data)");
class  PushVideoStreamSubscription_Suspend_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_Suspend_Params_Data>;

  PushVideoStreamSubscription_Suspend_Params_Data();
  ~PushVideoStreamSubscription_Suspend_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_Suspend_Params_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_Suspend_Params_Data)");
class  PushVideoStreamSubscription_Suspend_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_Suspend_ResponseParams_Data>;

  PushVideoStreamSubscription_Suspend_ResponseParams_Data();
  ~PushVideoStreamSubscription_Suspend_ResponseParams_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_Suspend_ResponseParams_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_Suspend_ResponseParams_Data)");
class  PushVideoStreamSubscription_Resume_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_Resume_Params_Data>;

  PushVideoStreamSubscription_Resume_Params_Data();
  ~PushVideoStreamSubscription_Resume_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_Resume_Params_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_Resume_Params_Data)");
class  PushVideoStreamSubscription_GetPhotoState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_GetPhotoState_Params_Data>;

  PushVideoStreamSubscription_GetPhotoState_Params_Data();
  ~PushVideoStreamSubscription_GetPhotoState_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_GetPhotoState_Params_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_GetPhotoState_Params_Data)");
class  PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::PhotoState_Data> capabilities;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data>;

  PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data();
  ~PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data) == 16,
              "Bad sizeof(PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data)");
class  PushVideoStreamSubscription_SetPhotoOptions_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::PhotoSettings_Data> settings;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_SetPhotoOptions_Params_Data>;

  PushVideoStreamSubscription_SetPhotoOptions_Params_Data();
  ~PushVideoStreamSubscription_SetPhotoOptions_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_SetPhotoOptions_Params_Data) == 16,
              "Bad sizeof(PushVideoStreamSubscription_SetPhotoOptions_Params_Data)");
class  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data>;

  PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data();
  ~PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data) == 16,
              "Bad sizeof(PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data)");
class  PushVideoStreamSubscription_TakePhoto_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_TakePhoto_Params_Data>;

  PushVideoStreamSubscription_TakePhoto_Params_Data();
  ~PushVideoStreamSubscription_TakePhoto_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_TakePhoto_Params_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_TakePhoto_Params_Data)");
class  PushVideoStreamSubscription_TakePhoto_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::Blob_Data> blob;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_TakePhoto_ResponseParams_Data>;

  PushVideoStreamSubscription_TakePhoto_ResponseParams_Data();
  ~PushVideoStreamSubscription_TakePhoto_ResponseParams_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_TakePhoto_ResponseParams_Data) == 16,
              "Bad sizeof(PushVideoStreamSubscription_TakePhoto_ResponseParams_Data)");
class  PushVideoStreamSubscription_Close_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_Close_Params_Data>;

  PushVideoStreamSubscription_Close_Params_Data();
  ~PushVideoStreamSubscription_Close_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_Close_Params_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_Close_Params_Data)");
class  PushVideoStreamSubscription_Close_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_Close_ResponseParams_Data>;

  PushVideoStreamSubscription_Close_ResponseParams_Data();
  ~PushVideoStreamSubscription_Close_ResponseParams_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_Close_ResponseParams_Data) == 8,
              "Bad sizeof(PushVideoStreamSubscription_Close_ResponseParams_Data)");
class  PushVideoStreamSubscription_ProcessFeedback_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureFeedback_Data> feedback;

 private:
  friend class mojo::internal::MessageFragment<PushVideoStreamSubscription_ProcessFeedback_Params_Data>;

  PushVideoStreamSubscription_ProcessFeedback_Params_Data();
  ~PushVideoStreamSubscription_ProcessFeedback_Params_Data() = delete;
};
static_assert(sizeof(PushVideoStreamSubscription_ProcessFeedback_Params_Data) == 16,
              "Bad sizeof(PushVideoStreamSubscription_ProcessFeedback_Params_Data)");
class  VideoSource_CreatePushSubscription_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data subscriber;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureParams_Data> requested_settings;
  uint8_t force_reopen_with_new_settings : 1;
  uint8_t pad2_[3];
  mojo::internal::Handle_Data subscription;

 private:
  friend class mojo::internal::MessageFragment<VideoSource_CreatePushSubscription_Params_Data>;

  VideoSource_CreatePushSubscription_Params_Data();
  ~VideoSource_CreatePushSubscription_Params_Data() = delete;
};
static_assert(sizeof(VideoSource_CreatePushSubscription_Params_Data) == 32,
              "Bad sizeof(VideoSource_CreatePushSubscription_Params_Data)");
class  VideoSource_CreatePushSubscription_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  internal::CreatePushSubscriptionResultCode_Data result_code;
  mojo::internal::Pointer<::media::mojom::internal::VideoCaptureParams_Data> settings_source_was_opened_with;

 private:
  friend class mojo::internal::MessageFragment<VideoSource_CreatePushSubscription_ResponseParams_Data>;

  VideoSource_CreatePushSubscription_ResponseParams_Data();
  ~VideoSource_CreatePushSubscription_ResponseParams_Data() = delete;
};
static_assert(sizeof(VideoSource_CreatePushSubscription_ResponseParams_Data) == 32,
              "Bad sizeof(VideoSource_CreatePushSubscription_ResponseParams_Data)");

}  // namespace internal


class PushVideoStreamSubscription_Activate_ParamsDataView {
 public:
  PushVideoStreamSubscription_Activate_ParamsDataView() = default;

  PushVideoStreamSubscription_Activate_ParamsDataView(
      internal::PushVideoStreamSubscription_Activate_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_Activate_Params_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_Suspend_ParamsDataView {
 public:
  PushVideoStreamSubscription_Suspend_ParamsDataView() = default;

  PushVideoStreamSubscription_Suspend_ParamsDataView(
      internal::PushVideoStreamSubscription_Suspend_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_Suspend_Params_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_Suspend_ResponseParamsDataView {
 public:
  PushVideoStreamSubscription_Suspend_ResponseParamsDataView() = default;

  PushVideoStreamSubscription_Suspend_ResponseParamsDataView(
      internal::PushVideoStreamSubscription_Suspend_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_Suspend_ResponseParams_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_Resume_ParamsDataView {
 public:
  PushVideoStreamSubscription_Resume_ParamsDataView() = default;

  PushVideoStreamSubscription_Resume_ParamsDataView(
      internal::PushVideoStreamSubscription_Resume_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_Resume_Params_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_GetPhotoState_ParamsDataView {
 public:
  PushVideoStreamSubscription_GetPhotoState_ParamsDataView() = default;

  PushVideoStreamSubscription_GetPhotoState_ParamsDataView(
      internal::PushVideoStreamSubscription_GetPhotoState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_GetPhotoState_Params_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_GetPhotoState_ResponseParamsDataView {
 public:
  PushVideoStreamSubscription_GetPhotoState_ResponseParamsDataView() = default;

  PushVideoStreamSubscription_GetPhotoState_ResponseParamsDataView(
      internal::PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCapabilitiesDataView(
      ::media::mojom::PhotoStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCapabilities(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::media::mojom::PhotoStateDataView, UserType>(),
    "Attempting to read the optional `capabilities` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCapabilities` instead "
    "of `ReadCapabilities if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->capabilities.Get();
    return mojo::internal::Deserialize<::media::mojom::PhotoStateDataView>(
        pointer, output, message_);
  }
 private:
  internal::PushVideoStreamSubscription_GetPhotoState_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PushVideoStreamSubscription_SetPhotoOptions_ParamsDataView {
 public:
  PushVideoStreamSubscription_SetPhotoOptions_ParamsDataView() = default;

  PushVideoStreamSubscription_SetPhotoOptions_ParamsDataView(
      internal::PushVideoStreamSubscription_SetPhotoOptions_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSettingsDataView(
      ::media::mojom::PhotoSettingsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSettings(UserType* output) {
    
    auto* pointer = data_->settings.Get();
    return mojo::internal::Deserialize<::media::mojom::PhotoSettingsDataView>(
        pointer, output, message_);
  }
 private:
  internal::PushVideoStreamSubscription_SetPhotoOptions_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PushVideoStreamSubscription_SetPhotoOptions_ResponseParamsDataView {
 public:
  PushVideoStreamSubscription_SetPhotoOptions_ResponseParamsDataView() = default;

  PushVideoStreamSubscription_SetPhotoOptions_ResponseParamsDataView(
      internal::PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::PushVideoStreamSubscription_SetPhotoOptions_ResponseParams_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_TakePhoto_ParamsDataView {
 public:
  PushVideoStreamSubscription_TakePhoto_ParamsDataView() = default;

  PushVideoStreamSubscription_TakePhoto_ParamsDataView(
      internal::PushVideoStreamSubscription_TakePhoto_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_TakePhoto_Params_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_TakePhoto_ResponseParamsDataView {
 public:
  PushVideoStreamSubscription_TakePhoto_ResponseParamsDataView() = default;

  PushVideoStreamSubscription_TakePhoto_ResponseParamsDataView(
      internal::PushVideoStreamSubscription_TakePhoto_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBlobDataView(
      ::media::mojom::BlobDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBlob(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::media::mojom::BlobDataView, UserType>(),
    "Attempting to read the optional `blob` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBlob` instead "
    "of `ReadBlob if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->blob.Get();
    return mojo::internal::Deserialize<::media::mojom::BlobDataView>(
        pointer, output, message_);
  }
 private:
  internal::PushVideoStreamSubscription_TakePhoto_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PushVideoStreamSubscription_Close_ParamsDataView {
 public:
  PushVideoStreamSubscription_Close_ParamsDataView() = default;

  PushVideoStreamSubscription_Close_ParamsDataView(
      internal::PushVideoStreamSubscription_Close_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_Close_Params_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_Close_ResponseParamsDataView {
 public:
  PushVideoStreamSubscription_Close_ResponseParamsDataView() = default;

  PushVideoStreamSubscription_Close_ResponseParamsDataView(
      internal::PushVideoStreamSubscription_Close_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PushVideoStreamSubscription_Close_ResponseParams_Data* data_ = nullptr;
};



class PushVideoStreamSubscription_ProcessFeedback_ParamsDataView {
 public:
  PushVideoStreamSubscription_ProcessFeedback_ParamsDataView() = default;

  PushVideoStreamSubscription_ProcessFeedback_ParamsDataView(
      internal::PushVideoStreamSubscription_ProcessFeedback_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFeedbackDataView(
      ::media::mojom::VideoCaptureFeedbackDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFeedback(UserType* output) {
    
    auto* pointer = data_->feedback.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureFeedbackDataView>(
        pointer, output, message_);
  }
 private:
  internal::PushVideoStreamSubscription_ProcessFeedback_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoSource_CreatePushSubscription_ParamsDataView {
 public:
  VideoSource_CreatePushSubscription_ParamsDataView() = default;

  VideoSource_CreatePushSubscription_ParamsDataView(
      internal::VideoSource_CreatePushSubscription_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeSubscriber() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::video_capture::mojom::VideoFrameHandlerInterfaceBase>>(
            &data_->subscriber, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetRequestedSettingsDataView(
      ::media::mojom::VideoCaptureParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequestedSettings(UserType* output) {
    
    auto* pointer = data_->requested_settings.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureParamsDataView>(
        pointer, output, message_);
  }
  bool force_reopen_with_new_settings() const {
    return data_->force_reopen_with_new_settings;
  }
  template <typename UserType>
  UserType TakeSubscription() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::video_capture::mojom::PushVideoStreamSubscriptionInterfaceBase>>(
            &data_->subscription, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::VideoSource_CreatePushSubscription_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoSource_CreatePushSubscription_ResponseParamsDataView {
 public:
  VideoSource_CreatePushSubscription_ResponseParamsDataView() = default;

  VideoSource_CreatePushSubscription_ResponseParamsDataView(
      internal::VideoSource_CreatePushSubscription_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResultCodeDataView(
      CreatePushSubscriptionResultCodeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResultCode(UserType* output) {
    
    auto* pointer = !data_->result_code.is_null() ? &data_->result_code : nullptr;
    return mojo::internal::Deserialize<::video_capture::mojom::CreatePushSubscriptionResultCodeDataView>(
        pointer, output, message_);
  }
  inline void GetSettingsSourceWasOpenedWithDataView(
      ::media::mojom::VideoCaptureParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSettingsSourceWasOpenedWith(UserType* output) {
    
    auto* pointer = data_->settings_source_was_opened_with.Get();
    return mojo::internal::Deserialize<::media::mojom::VideoCaptureParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoSource_CreatePushSubscription_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};












inline void PushVideoStreamSubscription_GetPhotoState_ResponseParamsDataView::GetCapabilitiesDataView(
    ::media::mojom::PhotoStateDataView* output) {
  auto pointer = data_->capabilities.Get();
  *output = ::media::mojom::PhotoStateDataView(pointer, message_);
}


inline void PushVideoStreamSubscription_SetPhotoOptions_ParamsDataView::GetSettingsDataView(
    ::media::mojom::PhotoSettingsDataView* output) {
  auto pointer = data_->settings.Get();
  *output = ::media::mojom::PhotoSettingsDataView(pointer, message_);
}






inline void PushVideoStreamSubscription_TakePhoto_ResponseParamsDataView::GetBlobDataView(
    ::media::mojom::BlobDataView* output) {
  auto pointer = data_->blob.Get();
  *output = ::media::mojom::BlobDataView(pointer, message_);
}






inline void PushVideoStreamSubscription_ProcessFeedback_ParamsDataView::GetFeedbackDataView(
    ::media::mojom::VideoCaptureFeedbackDataView* output) {
  auto pointer = data_->feedback.Get();
  *output = ::media::mojom::VideoCaptureFeedbackDataView(pointer, message_);
}


inline void VideoSource_CreatePushSubscription_ParamsDataView::GetRequestedSettingsDataView(
    ::media::mojom::VideoCaptureParamsDataView* output) {
  auto pointer = data_->requested_settings.Get();
  *output = ::media::mojom::VideoCaptureParamsDataView(pointer, message_);
}


inline void VideoSource_CreatePushSubscription_ResponseParamsDataView::GetResultCodeDataView(
    CreatePushSubscriptionResultCodeDataView* output) {
  auto pointer = &data_->result_code;
  *output = CreatePushSubscriptionResultCodeDataView(pointer, message_);
}
inline void VideoSource_CreatePushSubscription_ResponseParamsDataView::GetSettingsSourceWasOpenedWithDataView(
    ::media::mojom::VideoCaptureParamsDataView* output) {
  auto pointer = data_->settings_source_was_opened_with.Get();
  *output = ::media::mojom::VideoCaptureParamsDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace video_capture

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIDEO_CAPTURE_PUBLIC_MOJOM_VIDEO_SOURCE_MOJOM_PARAMS_DATA_H_