// services/tracing/public/mojom/tracing_service.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_H_
#define SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/tracing/public/mojom/tracing_service.mojom-shared.h"
#include "services/tracing/public/mojom/tracing_service.mojom-forward.h"
#include "services/tracing/public/mojom/perfetto_service.mojom-forward.h"
#include "sandbox/policy/mojom/sandbox.mojom-forward.h"
#include "services/tracing/public/mojom/traced_process.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "base/component_export.h"




namespace tracing {
namespace mojom {

class TracingServiceProxy;

template <typename ImplRefTraits>
class TracingServiceStub;

class TracingServiceRequestValidator;


class COMPONENT_EXPORT(TRACING_MOJOM) TracingService
    : public TracingServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr auto kServiceSandbox = sandbox::mojom::Sandbox::kUtility;
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = TracingServiceInterfaceBase;
  using Proxy_ = TracingServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = TracingServiceStub<ImplRefTraits>;

  using RequestValidator_ = TracingServiceRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kInitializeMinVersion = 0,
    kAddClientMinVersion = 0,
    kBindConsumerHostMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Initialize_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AddClient_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct BindConsumerHost_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~TracingService() = default;

  
  virtual void Initialize(std::vector<ClientInfoPtr> clients) = 0;

  
  virtual void AddClient(ClientInfoPtr client) = 0;

  
  virtual void BindConsumerHost(::mojo::PendingReceiver<::tracing::mojom::ConsumerHost> receiver) = 0;
};



class COMPONENT_EXPORT(TRACING_MOJOM) TracingServiceProxy
    : public TracingService {
 public:
  using InterfaceType = TracingService;

  explicit TracingServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Initialize(std::vector<ClientInfoPtr> clients) final;
  
  void AddClient(ClientInfoPtr client) final;
  
  void BindConsumerHost(::mojo::PendingReceiver<::tracing::mojom::ConsumerHost> receiver) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class COMPONENT_EXPORT(TRACING_MOJOM) TracingServiceStubDispatch {
 public:
  static bool Accept(TracingService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      TracingService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<TracingService>>
class TracingServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  TracingServiceStub() = default;
  ~TracingServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TracingServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return TracingServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class COMPONENT_EXPORT(TRACING_MOJOM) TracingServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};








class COMPONENT_EXPORT(TRACING_MOJOM) ClientInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ClientInfo, T>::value>;
  using DataView = ClientInfoDataView;
  using Data_ = internal::ClientInfo_Data;

  template <typename... Args>
  static ClientInfoPtr New(Args&&... args) {
    return ClientInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ClientInfoPtr From(const U& u) {
    return mojo::TypeConverter<ClientInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ClientInfo>::Convert(*this);
  }


  ClientInfo();

  ClientInfo(
      int32_t pid,
      ::mojo::PendingRemote<::tracing::mojom::TracedProcess> process);

ClientInfo(const ClientInfo&) = delete;
ClientInfo& operator=(const ClientInfo&) = delete;

  ~ClientInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ClientInfoPtr>
  ClientInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ClientInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ClientInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ClientInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ClientInfo_UnserializedMessageContext<
            UserType, ClientInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ClientInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ClientInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ClientInfo_UnserializedMessageContext<
            UserType, ClientInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ClientInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int32_t pid;
  
  ::mojo::PendingRemote<::tracing::mojom::TracedProcess> process;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ClientInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ClientInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ClientInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ClientInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ClientInfoPtr ClientInfo::Clone() const {
  return New(
      mojo::Clone(pid),
      mojo::Clone(process)
  );
}

template <typename T, ClientInfo::EnableIfSame<T>*>
bool ClientInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->pid, other_struct.pid))
    return false;
  if (!mojo::Equals(this->process, other_struct.process))
    return false;
  return true;
}

template <typename T, ClientInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.pid < rhs.pid)
    return true;
  if (rhs.pid < lhs.pid)
    return false;
  if (lhs.process < rhs.process)
    return true;
  if (rhs.process < lhs.process)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace tracing

namespace mojo {


template <>
struct COMPONENT_EXPORT(TRACING_MOJOM) StructTraits<::tracing::mojom::ClientInfo::DataView,
                                         ::tracing::mojom::ClientInfoPtr> {
  static bool IsNull(const ::tracing::mojom::ClientInfoPtr& input) { return !input; }
  static void SetToNull(::tracing::mojom::ClientInfoPtr* output) { output->reset(); }

  static decltype(::tracing::mojom::ClientInfo::pid) pid(
      const ::tracing::mojom::ClientInfoPtr& input) {
    return input->pid;
  }

  static  decltype(::tracing::mojom::ClientInfo::process)& process(
       ::tracing::mojom::ClientInfoPtr& input) {
    return input->process;
  }

  static bool Read(::tracing::mojom::ClientInfo::DataView input, ::tracing::mojom::ClientInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_TRACING_PUBLIC_MOJOM_TRACING_SERVICE_MOJOM_H_