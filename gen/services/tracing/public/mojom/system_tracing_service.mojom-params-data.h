// services/tracing/public/mojom/system_tracing_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_TRACING_PUBLIC_MOJOM_SYSTEM_TRACING_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_TRACING_PUBLIC_MOJOM_SYSTEM_TRACING_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace tracing {
namespace mojom {
namespace internal {

class ValidationContext;
class COMPONENT_EXPORT(TRACING_MOJOM_SHARED) SystemTracingService_OpenProducerSocket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SystemTracingService_OpenProducerSocket_Params_Data>;

  SystemTracingService_OpenProducerSocket_Params_Data();
  ~SystemTracingService_OpenProducerSocket_Params_Data() = delete;
};
static_assert(sizeof(SystemTracingService_OpenProducerSocket_Params_Data) == 8,
              "Bad sizeof(SystemTracingService_OpenProducerSocket_Params_Data)");
class COMPONENT_EXPORT(TRACING_MOJOM_SHARED) SystemTracingService_OpenProducerSocket_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> traced_socket;

 private:
  friend class mojo::internal::MessageFragment<SystemTracingService_OpenProducerSocket_ResponseParams_Data>;

  SystemTracingService_OpenProducerSocket_ResponseParams_Data();
  ~SystemTracingService_OpenProducerSocket_ResponseParams_Data() = delete;
};
static_assert(sizeof(SystemTracingService_OpenProducerSocket_ResponseParams_Data) == 16,
              "Bad sizeof(SystemTracingService_OpenProducerSocket_ResponseParams_Data)");

}  // namespace internal


class SystemTracingService_OpenProducerSocket_ParamsDataView {
 public:
  SystemTracingService_OpenProducerSocket_ParamsDataView() = default;

  SystemTracingService_OpenProducerSocket_ParamsDataView(
      internal::SystemTracingService_OpenProducerSocket_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SystemTracingService_OpenProducerSocket_Params_Data* data_ = nullptr;
};



class SystemTracingService_OpenProducerSocket_ResponseParamsDataView {
 public:
  SystemTracingService_OpenProducerSocket_ResponseParamsDataView() = default;

  SystemTracingService_OpenProducerSocket_ResponseParamsDataView(
      internal::SystemTracingService_OpenProducerSocket_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTracedSocketDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTracedSocket(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::FileDataView, UserType>(),
    "Attempting to read the optional `traced_socket` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadTracedSocket` instead "
    "of `ReadTracedSocket if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->traced_socket.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
 private:
  internal::SystemTracingService_OpenProducerSocket_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void SystemTracingService_OpenProducerSocket_ResponseParamsDataView::GetTracedSocketDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->traced_socket.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace tracing

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_TRACING_PUBLIC_MOJOM_SYSTEM_TRACING_SERVICE_MOJOM_PARAMS_DATA_H_