// services/viz/public/mojom/compositing/frame_deadline.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/public/mojom/compositing/frame_deadline.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/public/mojom/compositing/frame_deadline.mojom-params-data.h"
#include "services/viz/public/mojom/compositing/frame_deadline.mojom-shared-message-ids.h"

#include "services/viz/public/mojom/compositing/frame_deadline.mojom-import-headers.h"
#include "services/viz/public/mojom/compositing/frame_deadline.mojom-test-utils.h"


#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_DEADLINE_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_DEADLINE_MOJOM_JUMBO_H_
#endif



namespace viz {
namespace mojom {
FrameDeadline::FrameDeadline()
    : frame_start_time(),
      deadline_in_frames(),
      frame_interval(),
      use_default_lower_bound_deadline() {}

FrameDeadline::FrameDeadline(
    ::base::TimeTicks frame_start_time_in,
    uint32_t deadline_in_frames_in,
    ::base::TimeDelta frame_interval_in,
    bool use_default_lower_bound_deadline_in)
    : frame_start_time(std::move(frame_start_time_in)),
      deadline_in_frames(std::move(deadline_in_frames_in)),
      frame_interval(std::move(frame_interval_in)),
      use_default_lower_bound_deadline(std::move(use_default_lower_bound_deadline_in)) {}

FrameDeadline::~FrameDeadline() = default;

void FrameDeadline::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frame_start_time"), this->frame_start_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "deadline_in_frames"), this->deadline_in_frames,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frame_interval"), this->frame_interval,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "use_default_lower_bound_deadline"), this->use_default_lower_bound_deadline,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FrameDeadline::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace viz


namespace mojo {


// static
bool StructTraits<::viz::mojom::FrameDeadline::DataView, ::viz::mojom::FrameDeadlinePtr>::Read(
    ::viz::mojom::FrameDeadline::DataView input,
    ::viz::mojom::FrameDeadlinePtr* output) {
  bool success = true;
  ::viz::mojom::FrameDeadlinePtr result(::viz::mojom::FrameDeadline::New());
  
      if (success && !input.ReadFrameStartTime(&result->frame_start_time))
        success = false;
      if (success)
        result->deadline_in_frames = input.deadline_in_frames();
      if (success && !input.ReadFrameInterval(&result->frame_interval))
        success = false;
      if (success)
        result->use_default_lower_bound_deadline = input.use_default_lower_bound_deadline();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {




}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif