// services/viz/public/mojom/compositing/begin_frame_args.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/public/mojom/compositing/begin_frame_args.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/public/mojom/compositing/begin_frame_args.mojom-params-data.h"
#include "services/viz/public/mojom/compositing/begin_frame_args.mojom-shared-message-ids.h"

#include "services/viz/public/mojom/compositing/begin_frame_args.mojom-blink-import-headers.h"
#include "services/viz/public/mojom/compositing/begin_frame_args.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_BEGIN_FRAME_ARGS_MOJOM_BLINK_JUMBO_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_BEGIN_FRAME_ARGS_MOJOM_BLINK_JUMBO_H_
#endif



namespace viz {
namespace mojom {
namespace blink {
BeginFrameArgs::BeginFrameArgs()
    : frame_time(),
      deadline(),
      interval(),
      source_id(),
      sequence_number(),
      frames_throttled_since_last(),
      trace_id(),
      type(),
      on_critical_path(),
      animate_only() {}

BeginFrameArgs::BeginFrameArgs(
    ::base::TimeTicks frame_time_in,
    ::base::TimeTicks deadline_in,
    ::base::TimeDelta interval_in,
    uint64_t source_id_in,
    uint64_t sequence_number_in,
    uint64_t frames_throttled_since_last_in,
    int64_t trace_id_in,
    BeginFrameArgsType type_in,
    bool on_critical_path_in,
    bool animate_only_in)
    : frame_time(std::move(frame_time_in)),
      deadline(std::move(deadline_in)),
      interval(std::move(interval_in)),
      source_id(std::move(source_id_in)),
      sequence_number(std::move(sequence_number_in)),
      frames_throttled_since_last(std::move(frames_throttled_since_last_in)),
      trace_id(std::move(trace_id_in)),
      type(std::move(type_in)),
      on_critical_path(std::move(on_critical_path_in)),
      animate_only(std::move(animate_only_in)) {}

BeginFrameArgs::~BeginFrameArgs() = default;

void BeginFrameArgs::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frame_time"), this->frame_time,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "deadline"), this->deadline,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeTicks>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "interval"), this->interval,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "source_id"), this->source_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sequence_number"), this->sequence_number,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frames_throttled_since_last"), this->frames_throttled_since_last,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trace_id"), this->trace_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type BeginFrameArgsType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "on_critical_path"), this->on_critical_path,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "animate_only"), this->animate_only,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BeginFrameArgs::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
BeginFrameAck::BeginFrameAck()
    : source_id(),
      sequence_number(),
      trace_id(),
      has_damage() {}

BeginFrameAck::BeginFrameAck(
    uint64_t source_id_in,
    uint64_t sequence_number_in,
    int64_t trace_id_in,
    bool has_damage_in)
    : source_id(std::move(source_id_in)),
      sequence_number(std::move(sequence_number_in)),
      trace_id(std::move(trace_id_in)),
      has_damage(std::move(has_damage_in)) {}

BeginFrameAck::~BeginFrameAck() = default;

void BeginFrameAck::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "source_id"), this->source_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sequence_number"), this->sequence_number,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "trace_id"), this->trace_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_damage"), this->has_damage,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool BeginFrameAck::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace viz


namespace mojo {


// static
bool StructTraits<::viz::mojom::blink::BeginFrameArgs::DataView, ::viz::mojom::blink::BeginFrameArgsPtr>::Read(
    ::viz::mojom::blink::BeginFrameArgs::DataView input,
    ::viz::mojom::blink::BeginFrameArgsPtr* output) {
  bool success = true;
  ::viz::mojom::blink::BeginFrameArgsPtr result(::viz::mojom::blink::BeginFrameArgs::New());
  
      if (success && !input.ReadFrameTime(&result->frame_time))
        success = false;
      if (success && !input.ReadDeadline(&result->deadline))
        success = false;
      if (success && !input.ReadInterval(&result->interval))
        success = false;
      if (success)
        result->source_id = input.source_id();
      if (success)
        result->sequence_number = input.sequence_number();
      if (success)
        result->frames_throttled_since_last = input.frames_throttled_since_last();
      if (success)
        result->trace_id = input.trace_id();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->on_critical_path = input.on_critical_path();
      if (success)
        result->animate_only = input.animate_only();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::viz::mojom::blink::BeginFrameAck::DataView, ::viz::mojom::blink::BeginFrameAckPtr>::Read(
    ::viz::mojom::blink::BeginFrameAck::DataView input,
    ::viz::mojom::blink::BeginFrameAckPtr* output) {
  bool success = true;
  ::viz::mojom::blink::BeginFrameAckPtr result(::viz::mojom::blink::BeginFrameAck::New());
  
      if (success)
        result->source_id = input.source_id();
      if (success)
        result->sequence_number = input.sequence_number();
      if (success)
        result->trace_id = input.trace_id();
      if (success)
        result->has_damage = input.has_damage();
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif