// services/viz/public/mojom/compositing/compositing_mode_watcher.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITING_MODE_WATCHER_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITING_MODE_WATCHER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace viz {
namespace mojom {
namespace internal {

class ValidationContext;
class  CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data>;

  CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data();
  ~CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data() = delete;
};
static_assert(sizeof(CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data) == 8,
              "Bad sizeof(CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data)");
class  CompositingModeReporter_AddCompositingModeWatcher_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data watcher;

 private:
  friend class mojo::internal::MessageFragment<CompositingModeReporter_AddCompositingModeWatcher_Params_Data>;

  CompositingModeReporter_AddCompositingModeWatcher_Params_Data();
  ~CompositingModeReporter_AddCompositingModeWatcher_Params_Data() = delete;
};
static_assert(sizeof(CompositingModeReporter_AddCompositingModeWatcher_Params_Data) == 16,
              "Bad sizeof(CompositingModeReporter_AddCompositingModeWatcher_Params_Data)");

}  // namespace internal


class CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsDataView {
 public:
  CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsDataView() = default;

  CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsDataView(
      internal::CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::CompositingModeWatcher_CompositingModeFallbackToSoftware_Params_Data* data_ = nullptr;
};



class CompositingModeReporter_AddCompositingModeWatcher_ParamsDataView {
 public:
  CompositingModeReporter_AddCompositingModeWatcher_ParamsDataView() = default;

  CompositingModeReporter_AddCompositingModeWatcher_ParamsDataView(
      internal::CompositingModeReporter_AddCompositingModeWatcher_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeWatcher() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::CompositingModeWatcherInterfaceBase>>(
            &data_->watcher, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::CompositingModeReporter_AddCompositingModeWatcher_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};





}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITING_MODE_WATCHER_MOJOM_PARAMS_DATA_H_