// services/viz/public/mojom/compositing/compositing_mode_watcher.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../../mojo/public/js/bindings.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CompositingModeWatcherPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'viz.mojom.CompositingModeWatcher', scope);
  }
}

/** @interface */
export class CompositingModeWatcherInterface {
  
  /**
   */

  compositingModeFallbackToSoftware() {}
}

/**
 * @implements { CompositingModeWatcherInterface }
 */
export class CompositingModeWatcherRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CompositingModeWatcherPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CompositingModeWatcherPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CompositingModeWatcherPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  compositingModeFallbackToSoftware() {
    this.proxy.sendMessage(
        0,
        CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsSpec.$,
        null,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the CompositingModeWatcher
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CompositingModeWatcherReceiver {
  /**
   * @param {!CompositingModeWatcherInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CompositingModeWatcherRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CompositingModeWatcherRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositingModeWatcherRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsSpec.$,
        null,
        impl.compositingModeFallbackToSoftware.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CompositingModeWatcher {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "viz.mojom.CompositingModeWatcher";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CompositingModeWatcherRemote}
   */
  static getRemote() {
    let remote = new CompositingModeWatcherRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CompositingModeWatcher
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CompositingModeWatcherCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CompositingModeWatcherRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositingModeWatcherRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.compositingModeFallbackToSoftware =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsSpec.$,
        null,
        this.compositingModeFallbackToSoftware.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class CompositingModeReporterPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'viz.mojom.CompositingModeReporter', scope);
  }
}

/** @interface */
export class CompositingModeReporterInterface {
  
  /**
   * @param { !CompositingModeWatcherRemote } watcher
   */

  addCompositingModeWatcher(watcher) {}
}

/**
 * @implements { CompositingModeReporterInterface }
 */
export class CompositingModeReporterRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!CompositingModeReporterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          CompositingModeReporterPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!CompositingModeReporterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !CompositingModeWatcherRemote } watcher
   */

  addCompositingModeWatcher(
      watcher) {
    this.proxy.sendMessage(
        0,
        CompositingModeReporter_AddCompositingModeWatcher_ParamsSpec.$,
        null,
        [
          watcher
        ]);
  }
}

/**
 * An object which receives request messages for the CompositingModeReporter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class CompositingModeReporterReceiver {
  /**
   * @param {!CompositingModeReporterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!CompositingModeReporterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        CompositingModeReporterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositingModeReporterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        CompositingModeReporter_AddCompositingModeWatcher_ParamsSpec.$,
        null,
        impl.addCompositingModeWatcher.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class CompositingModeReporter {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "viz.mojom.CompositingModeReporter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!CompositingModeReporterRemote}
   */
  static getRemote() {
    let remote = new CompositingModeReporterRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the CompositingModeReporter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class CompositingModeReporterCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      CompositingModeReporterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!CompositingModeReporterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addCompositingModeWatcher =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        CompositingModeReporter_AddCompositingModeWatcher_ParamsSpec.$,
        null,
        this.addCompositingModeWatcher.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CompositingModeReporter_AddCompositingModeWatcher_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    CompositingModeWatcher_CompositingModeFallbackToSoftware_ParamsSpec.$,
    'CompositingModeWatcher_CompositingModeFallbackToSoftware_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class CompositingModeWatcher_CompositingModeFallbackToSoftware_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    CompositingModeReporter_AddCompositingModeWatcher_ParamsSpec.$,
    'CompositingModeReporter_AddCompositingModeWatcher_Params',
    [
      mojo.internal.StructField(
        'watcher', 0,
        0,
        mojo.internal.InterfaceProxy(CompositingModeWatcherRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CompositingModeReporter_AddCompositingModeWatcher_Params {
  constructor() {
    /** @type { !CompositingModeWatcherRemote } */
    this.watcher;
  }
}

