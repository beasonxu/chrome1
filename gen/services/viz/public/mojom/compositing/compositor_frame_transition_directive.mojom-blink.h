// services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_BLINK_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-shared.h"
#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-blink-forward.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "services/viz/public/mojom/compositing/compositor_render_pass_id.mojom-blink.h"
#include "services/viz/public/mojom/compositing/shared_element_resource_id.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "third_party/blink/public/platform/web_common.h"




namespace WTF {
struct viz_mojom_internal_CompositorFrameTransitionDirectiveType_DataHashFn {
  static unsigned GetHash(const ::viz::mojom::CompositorFrameTransitionDirectiveType& value) {
    using utype = std::underlying_type<::viz::mojom::CompositorFrameTransitionDirectiveType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::viz::mojom::CompositorFrameTransitionDirectiveType& left, const ::viz::mojom::CompositorFrameTransitionDirectiveType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::viz::mojom::CompositorFrameTransitionDirectiveType>
    : public GenericHashTraits<::viz::mojom::CompositorFrameTransitionDirectiveType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::viz::mojom::CompositorFrameTransitionDirectiveType EmptyValue() { return static_cast<::viz::mojom::CompositorFrameTransitionDirectiveType>(-1000000); }
  static void ConstructDeletedValue(::viz::mojom::CompositorFrameTransitionDirectiveType& slot, bool) {
    slot = static_cast<::viz::mojom::CompositorFrameTransitionDirectiveType>(-1000001);
  }
  static bool IsDeletedValue(const ::viz::mojom::CompositorFrameTransitionDirectiveType& value) {
    return value == static_cast<::viz::mojom::CompositorFrameTransitionDirectiveType>(-1000001);
  }
};
}  // namespace WTF


namespace WTF {
struct viz_mojom_internal_CompositorFrameTransitionDirectiveEffect_DataHashFn {
  static unsigned GetHash(const ::viz::mojom::CompositorFrameTransitionDirectiveEffect& value) {
    using utype = std::underlying_type<::viz::mojom::CompositorFrameTransitionDirectiveEffect>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::viz::mojom::CompositorFrameTransitionDirectiveEffect& left, const ::viz::mojom::CompositorFrameTransitionDirectiveEffect& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::viz::mojom::CompositorFrameTransitionDirectiveEffect>
    : public GenericHashTraits<::viz::mojom::CompositorFrameTransitionDirectiveEffect> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::viz::mojom::CompositorFrameTransitionDirectiveEffect EmptyValue() { return static_cast<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(-1000000); }
  static void ConstructDeletedValue(::viz::mojom::CompositorFrameTransitionDirectiveEffect& slot, bool) {
    slot = static_cast<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(-1000001);
  }
  static bool IsDeletedValue(const ::viz::mojom::CompositorFrameTransitionDirectiveEffect& value) {
    return value == static_cast<::viz::mojom::CompositorFrameTransitionDirectiveEffect>(-1000001);
  }
};
}  // namespace WTF


namespace viz {
namespace mojom {
namespace blink {










class BLINK_PLATFORM_EXPORT CompositorFrameTransitionDirectiveConfig {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CompositorFrameTransitionDirectiveConfig, T>::value>;
  using DataView = CompositorFrameTransitionDirectiveConfigDataView;
  using Data_ = internal::CompositorFrameTransitionDirectiveConfig_Data;

  template <typename... Args>
  static CompositorFrameTransitionDirectiveConfigPtr New(Args&&... args) {
    return CompositorFrameTransitionDirectiveConfigPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CompositorFrameTransitionDirectiveConfigPtr From(const U& u) {
    return mojo::TypeConverter<CompositorFrameTransitionDirectiveConfigPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CompositorFrameTransitionDirectiveConfig>::Convert(*this);
  }


  CompositorFrameTransitionDirectiveConfig();

  CompositorFrameTransitionDirectiveConfig(
      ::base::TimeDelta duration,
      ::base::TimeDelta delay);


  ~CompositorFrameTransitionDirectiveConfig();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CompositorFrameTransitionDirectiveConfigPtr>
  CompositorFrameTransitionDirectiveConfigPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CompositorFrameTransitionDirectiveConfig::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CompositorFrameTransitionDirectiveConfig::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CompositorFrameTransitionDirectiveConfig_UnserializedMessageContext<
            UserType, CompositorFrameTransitionDirectiveConfig::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CompositorFrameTransitionDirectiveConfig::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return CompositorFrameTransitionDirectiveConfig::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CompositorFrameTransitionDirectiveConfig_UnserializedMessageContext<
            UserType, CompositorFrameTransitionDirectiveConfig::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CompositorFrameTransitionDirectiveConfig::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::TimeDelta duration;
  
  ::base::TimeDelta delay;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT CompositorFrameTransitionDirectiveSharedElement {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CompositorFrameTransitionDirectiveSharedElement, T>::value>;
  using DataView = CompositorFrameTransitionDirectiveSharedElementDataView;
  using Data_ = internal::CompositorFrameTransitionDirectiveSharedElement_Data;

  template <typename... Args>
  static CompositorFrameTransitionDirectiveSharedElementPtr New(Args&&... args) {
    return CompositorFrameTransitionDirectiveSharedElementPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CompositorFrameTransitionDirectiveSharedElementPtr From(const U& u) {
    return mojo::TypeConverter<CompositorFrameTransitionDirectiveSharedElementPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CompositorFrameTransitionDirectiveSharedElement>::Convert(*this);
  }


  CompositorFrameTransitionDirectiveSharedElement();

  CompositorFrameTransitionDirectiveSharedElement(
      ::viz::mojom::blink::CompositorRenderPassIdPtr render_pass_id,
      CompositorFrameTransitionDirectiveConfigPtr config,
      ::viz::mojom::blink::SharedElementResourceIdPtr shared_element_resource_id);

CompositorFrameTransitionDirectiveSharedElement(const CompositorFrameTransitionDirectiveSharedElement&) = delete;
CompositorFrameTransitionDirectiveSharedElement& operator=(const CompositorFrameTransitionDirectiveSharedElement&) = delete;

  ~CompositorFrameTransitionDirectiveSharedElement();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CompositorFrameTransitionDirectiveSharedElementPtr>
  CompositorFrameTransitionDirectiveSharedElementPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CompositorFrameTransitionDirectiveSharedElement::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CompositorFrameTransitionDirectiveSharedElement::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CompositorFrameTransitionDirectiveSharedElement_UnserializedMessageContext<
            UserType, CompositorFrameTransitionDirectiveSharedElement::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CompositorFrameTransitionDirectiveSharedElement::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return CompositorFrameTransitionDirectiveSharedElement::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CompositorFrameTransitionDirectiveSharedElement_UnserializedMessageContext<
            UserType, CompositorFrameTransitionDirectiveSharedElement::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CompositorFrameTransitionDirectiveSharedElement::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::viz::mojom::blink::CompositorRenderPassIdPtr render_pass_id;
  
  CompositorFrameTransitionDirectiveConfigPtr config;
  
  ::viz::mojom::blink::SharedElementResourceIdPtr shared_element_resource_id;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT CompositorFrameTransitionDirective {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CompositorFrameTransitionDirective, T>::value>;
  using DataView = CompositorFrameTransitionDirectiveDataView;
  using Data_ = internal::CompositorFrameTransitionDirective_Data;

  template <typename... Args>
  static CompositorFrameTransitionDirectivePtr New(Args&&... args) {
    return CompositorFrameTransitionDirectivePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CompositorFrameTransitionDirectivePtr From(const U& u) {
    return mojo::TypeConverter<CompositorFrameTransitionDirectivePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CompositorFrameTransitionDirective>::Convert(*this);
  }


  CompositorFrameTransitionDirective();

  CompositorFrameTransitionDirective(
      uint32_t sequence_id,
      CompositorFrameTransitionDirectiveType type,
      bool is_renderer_driven_animation,
      CompositorFrameTransitionDirectiveEffect effect,
      CompositorFrameTransitionDirectiveConfigPtr root_config,
      WTF::Vector<CompositorFrameTransitionDirectiveSharedElementPtr> shared_elements);

CompositorFrameTransitionDirective(const CompositorFrameTransitionDirective&) = delete;
CompositorFrameTransitionDirective& operator=(const CompositorFrameTransitionDirective&) = delete;

  ~CompositorFrameTransitionDirective();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CompositorFrameTransitionDirectivePtr>
  CompositorFrameTransitionDirectivePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CompositorFrameTransitionDirective::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CompositorFrameTransitionDirective::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CompositorFrameTransitionDirective_UnserializedMessageContext<
            UserType, CompositorFrameTransitionDirective::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CompositorFrameTransitionDirective::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return CompositorFrameTransitionDirective::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CompositorFrameTransitionDirective_UnserializedMessageContext<
            UserType, CompositorFrameTransitionDirective::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CompositorFrameTransitionDirective::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  uint32_t sequence_id;
  
  CompositorFrameTransitionDirectiveType type;
  
  bool is_renderer_driven_animation;
  
  CompositorFrameTransitionDirectiveEffect effect;
  
  CompositorFrameTransitionDirectiveConfigPtr root_config;
  
  WTF::Vector<CompositorFrameTransitionDirectiveSharedElementPtr> shared_elements;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
CompositorFrameTransitionDirectiveConfigPtr CompositorFrameTransitionDirectiveConfig::Clone() const {
  return New(
      mojo::Clone(duration),
      mojo::Clone(delay)
  );
}

template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>*>
bool CompositorFrameTransitionDirectiveConfig::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->duration, other_struct.duration))
    return false;
  if (!mojo::Equals(this->delay, other_struct.delay))
    return false;
  return true;
}

template <typename T, CompositorFrameTransitionDirectiveConfig::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.duration < rhs.duration)
    return true;
  if (rhs.duration < lhs.duration)
    return false;
  if (lhs.delay < rhs.delay)
    return true;
  if (rhs.delay < lhs.delay)
    return false;
  return false;
}
template <typename StructPtrType>
CompositorFrameTransitionDirectiveSharedElementPtr CompositorFrameTransitionDirectiveSharedElement::Clone() const {
  return New(
      mojo::Clone(render_pass_id),
      mojo::Clone(config),
      mojo::Clone(shared_element_resource_id)
  );
}

template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>*>
bool CompositorFrameTransitionDirectiveSharedElement::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->render_pass_id, other_struct.render_pass_id))
    return false;
  if (!mojo::Equals(this->config, other_struct.config))
    return false;
  if (!mojo::Equals(this->shared_element_resource_id, other_struct.shared_element_resource_id))
    return false;
  return true;
}

template <typename T, CompositorFrameTransitionDirectiveSharedElement::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.render_pass_id < rhs.render_pass_id)
    return true;
  if (rhs.render_pass_id < lhs.render_pass_id)
    return false;
  if (lhs.config < rhs.config)
    return true;
  if (rhs.config < lhs.config)
    return false;
  if (lhs.shared_element_resource_id < rhs.shared_element_resource_id)
    return true;
  if (rhs.shared_element_resource_id < lhs.shared_element_resource_id)
    return false;
  return false;
}
template <typename StructPtrType>
CompositorFrameTransitionDirectivePtr CompositorFrameTransitionDirective::Clone() const {
  return New(
      mojo::Clone(sequence_id),
      mojo::Clone(type),
      mojo::Clone(is_renderer_driven_animation),
      mojo::Clone(effect),
      mojo::Clone(root_config),
      mojo::Clone(shared_elements)
  );
}

template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>*>
bool CompositorFrameTransitionDirective::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->sequence_id, other_struct.sequence_id))
    return false;
  if (!mojo::Equals(this->type, other_struct.type))
    return false;
  if (!mojo::Equals(this->is_renderer_driven_animation, other_struct.is_renderer_driven_animation))
    return false;
  if (!mojo::Equals(this->effect, other_struct.effect))
    return false;
  if (!mojo::Equals(this->root_config, other_struct.root_config))
    return false;
  if (!mojo::Equals(this->shared_elements, other_struct.shared_elements))
    return false;
  return true;
}

template <typename T, CompositorFrameTransitionDirective::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.sequence_id < rhs.sequence_id)
    return true;
  if (rhs.sequence_id < lhs.sequence_id)
    return false;
  if (lhs.type < rhs.type)
    return true;
  if (rhs.type < lhs.type)
    return false;
  if (lhs.is_renderer_driven_animation < rhs.is_renderer_driven_animation)
    return true;
  if (rhs.is_renderer_driven_animation < lhs.is_renderer_driven_animation)
    return false;
  if (lhs.effect < rhs.effect)
    return true;
  if (rhs.effect < lhs.effect)
    return false;
  if (lhs.root_config < rhs.root_config)
    return true;
  if (rhs.root_config < lhs.root_config)
    return false;
  if (lhs.shared_elements < rhs.shared_elements)
    return true;
  if (rhs.shared_elements < lhs.shared_elements)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace viz

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::DataView,
                                         ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr> {
  static bool IsNull(const ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr& input) { return !input; }
  static void SetToNull(::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr* output) { output->reset(); }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::duration)& duration(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr& input) {
    return input->duration;
  }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::delay)& delay(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr& input) {
    return input->delay;
  }

  static bool Read(::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::DataView input, ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::DataView,
                                         ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr> {
  static bool IsNull(const ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr& input) { return !input; }
  static void SetToNull(::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr* output) { output->reset(); }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::render_pass_id)& render_pass_id(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr& input) {
    return input->render_pass_id;
  }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::config)& config(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr& input) {
    return input->config;
  }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::shared_element_resource_id)& shared_element_resource_id(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr& input) {
    return input->shared_element_resource_id;
  }

  static bool Read(::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::DataView input, ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::viz::mojom::blink::CompositorFrameTransitionDirective::DataView,
                                         ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr> {
  static bool IsNull(const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) { return !input; }
  static void SetToNull(::viz::mojom::blink::CompositorFrameTransitionDirectivePtr* output) { output->reset(); }

  static decltype(::viz::mojom::blink::CompositorFrameTransitionDirective::sequence_id) sequence_id(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) {
    return input->sequence_id;
  }

  static decltype(::viz::mojom::blink::CompositorFrameTransitionDirective::type) type(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) {
    return input->type;
  }

  static decltype(::viz::mojom::blink::CompositorFrameTransitionDirective::is_renderer_driven_animation) is_renderer_driven_animation(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) {
    return input->is_renderer_driven_animation;
  }

  static decltype(::viz::mojom::blink::CompositorFrameTransitionDirective::effect) effect(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) {
    return input->effect;
  }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirective::root_config)& root_config(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) {
    return input->root_config;
  }

  static const decltype(::viz::mojom::blink::CompositorFrameTransitionDirective::shared_elements)& shared_elements(
      const ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr& input) {
    return input->shared_elements;
  }

  static bool Read(::viz::mojom::blink::CompositorFrameTransitionDirective::DataView input, ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr* output);
};

}  // namespace mojo

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_BLINK_H_