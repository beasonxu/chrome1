// services/viz/public/mojom/compositing/filter_operation.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/public/mojom/compositing/filter_operation.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/public/mojom/compositing/filter_operation.mojom-params-data.h"
#include "services/viz/public/mojom/compositing/filter_operation.mojom-shared-message-ids.h"

#include "services/viz/public/mojom/compositing/filter_operation.mojom-import-headers.h"
#include "services/viz/public/mojom/compositing/filter_operation.mojom-test-utils.h"


#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FILTER_OPERATION_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FILTER_OPERATION_MOJOM_JUMBO_H_
#endif



namespace viz {
namespace mojom {
FilterOperation::FilterOperation()
    : type(),
      amount(),
      outer_threshold(),
      drop_shadow_offset(),
      drop_shadow_color(),
      image_filter(),
      matrix(),
      zoom_inset(),
      blur_tile_mode(),
      shape() {}

FilterOperation::FilterOperation(
    FilterType type_in,
    float amount_in,
    float outer_threshold_in,
    const ::gfx::Point& drop_shadow_offset_in,
    const ::SkColor4f& drop_shadow_color_in,
    const ::sk_sp<::cc::PaintFilter>& image_filter_in,
    absl::optional<std::vector<float>> matrix_in,
    int32_t zoom_inset_in,
    ::SkTileMode blur_tile_mode_in,
    absl::optional<std::vector<::gfx::Rect>> shape_in)
    : type(std::move(type_in)),
      amount(std::move(amount_in)),
      outer_threshold(std::move(outer_threshold_in)),
      drop_shadow_offset(std::move(drop_shadow_offset_in)),
      drop_shadow_color(std::move(drop_shadow_color_in)),
      image_filter(std::move(image_filter_in)),
      matrix(std::move(matrix_in)),
      zoom_inset(std::move(zoom_inset_in)),
      blur_tile_mode(std::move(blur_tile_mode_in)),
      shape(std::move(shape_in)) {}

FilterOperation::~FilterOperation() = default;

void FilterOperation::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type FilterType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "amount"), this->amount,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "outer_threshold"), this->outer_threshold,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type float>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "drop_shadow_offset"), this->drop_shadow_offset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::gfx::Point&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "drop_shadow_color"), this->drop_shadow_color,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::SkColor4f&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "image_filter"), this->image_filter,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::sk_sp<::cc::PaintFilter>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "matrix"), this->matrix,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<float>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "zoom_inset"), this->zoom_inset,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "blur_tile_mode"), this->blur_tile_mode,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::SkTileMode>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "shape"), this->shape,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<std::vector<::gfx::Rect>>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FilterOperation::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace viz


namespace mojo {


// static
bool StructTraits<::viz::mojom::FilterOperation::DataView, ::viz::mojom::FilterOperationPtr>::Read(
    ::viz::mojom::FilterOperation::DataView input,
    ::viz::mojom::FilterOperationPtr* output) {
  bool success = true;
  ::viz::mojom::FilterOperationPtr result(::viz::mojom::FilterOperation::New());
  
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->amount = input.amount();
      if (success)
        result->outer_threshold = input.outer_threshold();
      if (success && !input.ReadDropShadowOffset(&result->drop_shadow_offset))
        success = false;
      if (success && !input.ReadDropShadowColor(&result->drop_shadow_color))
        success = false;
      if (success && !input.ReadImageFilter(&result->image_filter))
        success = false;
      if (success && !input.ReadMatrix(&result->matrix))
        success = false;
      if (success)
        result->zoom_inset = input.zoom_inset();
      if (success && !input.ReadBlurTileMode(&result->blur_tile_mode))
        success = false;
      if (success && !input.ReadShape(&result->shape))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {




}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif