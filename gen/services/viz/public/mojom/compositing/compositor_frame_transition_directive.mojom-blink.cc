// services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-params-data.h"
#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-shared-message-ids.h"

#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-blink-import-headers.h"
#include "services/viz/public/mojom/compositing/compositor_frame_transition_directive.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_BLINK_JUMBO_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_TRANSITION_DIRECTIVE_MOJOM_BLINK_JUMBO_H_
#endif



namespace viz {
namespace mojom {
namespace blink {
CompositorFrameTransitionDirectiveConfig::CompositorFrameTransitionDirectiveConfig()
    : duration(),
      delay() {}

CompositorFrameTransitionDirectiveConfig::CompositorFrameTransitionDirectiveConfig(
    ::base::TimeDelta duration_in,
    ::base::TimeDelta delay_in)
    : duration(std::move(duration_in)),
      delay(std::move(delay_in)) {}

CompositorFrameTransitionDirectiveConfig::~CompositorFrameTransitionDirectiveConfig() = default;

void CompositorFrameTransitionDirectiveConfig::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "duration"), this->duration,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "delay"), this->delay,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::base::TimeDelta>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CompositorFrameTransitionDirectiveConfig::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CompositorFrameTransitionDirectiveSharedElement::CompositorFrameTransitionDirectiveSharedElement()
    : render_pass_id(),
      config(),
      shared_element_resource_id() {}

CompositorFrameTransitionDirectiveSharedElement::CompositorFrameTransitionDirectiveSharedElement(
    ::viz::mojom::blink::CompositorRenderPassIdPtr render_pass_id_in,
    CompositorFrameTransitionDirectiveConfigPtr config_in,
    ::viz::mojom::blink::SharedElementResourceIdPtr shared_element_resource_id_in)
    : render_pass_id(std::move(render_pass_id_in)),
      config(std::move(config_in)),
      shared_element_resource_id(std::move(shared_element_resource_id_in)) {}

CompositorFrameTransitionDirectiveSharedElement::~CompositorFrameTransitionDirectiveSharedElement() = default;

void CompositorFrameTransitionDirectiveSharedElement::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "render_pass_id"), this->render_pass_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::viz::mojom::blink::CompositorRenderPassIdPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "config"), this->config,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type CompositorFrameTransitionDirectiveConfigPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "shared_element_resource_id"), this->shared_element_resource_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::viz::mojom::blink::SharedElementResourceIdPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CompositorFrameTransitionDirectiveSharedElement::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CompositorFrameTransitionDirective::CompositorFrameTransitionDirective()
    : sequence_id(),
      type(),
      is_renderer_driven_animation(),
      effect(),
      root_config(),
      shared_elements() {}

CompositorFrameTransitionDirective::CompositorFrameTransitionDirective(
    uint32_t sequence_id_in,
    CompositorFrameTransitionDirectiveType type_in,
    bool is_renderer_driven_animation_in,
    CompositorFrameTransitionDirectiveEffect effect_in,
    CompositorFrameTransitionDirectiveConfigPtr root_config_in,
    WTF::Vector<CompositorFrameTransitionDirectiveSharedElementPtr> shared_elements_in)
    : sequence_id(std::move(sequence_id_in)),
      type(std::move(type_in)),
      is_renderer_driven_animation(std::move(is_renderer_driven_animation_in)),
      effect(std::move(effect_in)),
      root_config(std::move(root_config_in)),
      shared_elements(std::move(shared_elements_in)) {}

CompositorFrameTransitionDirective::~CompositorFrameTransitionDirective() = default;

void CompositorFrameTransitionDirective::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sequence_id"), this->sequence_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "type"), this->type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type CompositorFrameTransitionDirectiveType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "is_renderer_driven_animation"), this->is_renderer_driven_animation,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "effect"), this->effect,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type CompositorFrameTransitionDirectiveEffect>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_config"), this->root_config,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type CompositorFrameTransitionDirectiveConfigPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "shared_elements"), this->shared_elements,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WTF::Vector<CompositorFrameTransitionDirectiveSharedElementPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CompositorFrameTransitionDirective::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace viz


namespace mojo {


// static
bool StructTraits<::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::DataView, ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr>::Read(
    ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::DataView input,
    ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr* output) {
  bool success = true;
  ::viz::mojom::blink::CompositorFrameTransitionDirectiveConfigPtr result(::viz::mojom::blink::CompositorFrameTransitionDirectiveConfig::New());
  
      if (success && !input.ReadDuration(&result->duration))
        success = false;
      if (success && !input.ReadDelay(&result->delay))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::DataView, ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr>::Read(
    ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::DataView input,
    ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr* output) {
  bool success = true;
  ::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElementPtr result(::viz::mojom::blink::CompositorFrameTransitionDirectiveSharedElement::New());
  
      if (success && !input.ReadRenderPassId(&result->render_pass_id))
        success = false;
      if (success && !input.ReadConfig(&result->config))
        success = false;
      if (success && !input.ReadSharedElementResourceId(&result->shared_element_resource_id))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::viz::mojom::blink::CompositorFrameTransitionDirective::DataView, ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr>::Read(
    ::viz::mojom::blink::CompositorFrameTransitionDirective::DataView input,
    ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr* output) {
  bool success = true;
  ::viz::mojom::blink::CompositorFrameTransitionDirectivePtr result(::viz::mojom::blink::CompositorFrameTransitionDirective::New());
  
      if (success)
        result->sequence_id = input.sequence_id();
      if (success && !input.ReadType(&result->type))
        success = false;
      if (success)
        result->is_renderer_driven_animation = input.is_renderer_driven_animation();
      if (success && !input.ReadEffect(&result->effect))
        success = false;
      if (success && !input.ReadRootConfig(&result->root_config))
        success = false;
      if (success && !input.ReadSharedElements(&result->shared_elements))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif