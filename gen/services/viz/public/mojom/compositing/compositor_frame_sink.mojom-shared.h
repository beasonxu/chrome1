// services/viz/public/mojom/compositing/compositor_frame_sink.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_SINK_MOJOM_SHARED_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_SINK_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/viz/public/mojom/compositing/compositor_frame_sink.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "services/viz/public/mojom/compositing/begin_frame_args.mojom-shared.h"
#include "services/viz/public/mojom/compositing/compositor_frame.mojom-shared.h"
#include "services/viz/public/mojom/compositing/local_surface_id.mojom-shared.h"
#include "services/viz/public/mojom/compositing/frame_timing_details.mojom-shared.h"
#include "services/viz/public/mojom/compositing/returned_resource.mojom-shared.h"
#include "services/viz/public/mojom/hit_test/hit_test_region_list.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "gpu/ipc/common/mailbox.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace viz {
namespace mojom {


}  // namespace mojom
}  // namespace viz

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace viz {
namespace mojom {


enum class CompositorFrameSinkType : int32_t {
  
  kUnspecified = 0,
  
  kVideo = 1,
  
  kMediaStream = 2,
  
  kLayerTree = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, CompositorFrameSinkType value);
inline bool IsKnownEnumValue(CompositorFrameSinkType value) {
  return internal::CompositorFrameSinkType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class CompositorFrameSinkInterfaceBase {};

using CompositorFrameSinkPtrDataView =
    mojo::InterfacePtrDataView<CompositorFrameSinkInterfaceBase>;
using CompositorFrameSinkRequestDataView =
    mojo::InterfaceRequestDataView<CompositorFrameSinkInterfaceBase>;
using CompositorFrameSinkAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CompositorFrameSinkInterfaceBase>;
using CompositorFrameSinkAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CompositorFrameSinkInterfaceBase>;
class CompositorFrameSinkClientInterfaceBase {};

using CompositorFrameSinkClientPtrDataView =
    mojo::InterfacePtrDataView<CompositorFrameSinkClientInterfaceBase>;
using CompositorFrameSinkClientRequestDataView =
    mojo::InterfaceRequestDataView<CompositorFrameSinkClientInterfaceBase>;
using CompositorFrameSinkClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CompositorFrameSinkClientInterfaceBase>;
using CompositorFrameSinkClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CompositorFrameSinkClientInterfaceBase>;


}  // namespace mojom
}  // namespace viz

namespace std {

template <>
struct hash<::viz::mojom::CompositorFrameSinkType>
    : public mojo::internal::EnumHashImpl<::viz::mojom::CompositorFrameSinkType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorFrameSinkType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::viz::mojom::CompositorFrameSinkType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::viz::mojom::CompositorFrameSinkType>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace viz {
namespace mojom {


}  // namespace mojom
}  // namespace viz

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::viz::mojom::CompositorFrameSinkType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::viz::mojom::CompositorFrameSinkType value);
};

} // namespace perfetto

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_COMPOSITOR_FRAME_SINK_MOJOM_SHARED_H_