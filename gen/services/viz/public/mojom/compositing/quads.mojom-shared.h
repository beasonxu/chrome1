// services/viz/public/mojom/compositing/quads.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_QUADS_MOJOM_SHARED_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_QUADS_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/viz/public/mojom/compositing/quads.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "services/viz/public/mojom/compositing/compositor_render_pass_id.mojom-shared.h"
#include "services/viz/public/mojom/compositing/resource_id.mojom-shared.h"
#include "services/viz/public/mojom/compositing/shared_element_resource_id.mojom-shared.h"
#include "services/viz/public/mojom/compositing/shared_quad_state.mojom-shared.h"
#include "services/viz/public/mojom/compositing/surface_range.mojom-shared.h"
#include "skia/public/mojom/skcolor4f.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "ui/gfx/mojom/color_space.mojom-shared.h"
#include "ui/gfx/mojom/hdr_metadata.mojom-shared.h"
#include "ui/gfx/mojom/transform.mojom-shared.h"







namespace viz {
namespace mojom {
class DebugBorderQuadStateDataView;

class CompositorRenderPassQuadStateDataView;

class SolidColorQuadStateDataView;

class SurfaceQuadStateDataView;

class TextureQuadStateDataView;

class TileQuadStateDataView;

class YUVVideoQuadStateDataView;

class VideoHoleQuadStateDataView;

class SharedElementQuadStateDataView;

class DrawQuadDataView;

class DrawQuadStateDataView;


}  // namespace mojom
}  // namespace viz

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::viz::mojom::DebugBorderQuadStateDataView> {
  using Data = ::viz::mojom::internal::DebugBorderQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::CompositorRenderPassQuadStateDataView> {
  using Data = ::viz::mojom::internal::CompositorRenderPassQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::SolidColorQuadStateDataView> {
  using Data = ::viz::mojom::internal::SolidColorQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::SurfaceQuadStateDataView> {
  using Data = ::viz::mojom::internal::SurfaceQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::TextureQuadStateDataView> {
  using Data = ::viz::mojom::internal::TextureQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::TileQuadStateDataView> {
  using Data = ::viz::mojom::internal::TileQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::YUVVideoQuadStateDataView> {
  using Data = ::viz::mojom::internal::YUVVideoQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::VideoHoleQuadStateDataView> {
  using Data = ::viz::mojom::internal::VideoHoleQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::SharedElementQuadStateDataView> {
  using Data = ::viz::mojom::internal::SharedElementQuadState_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::DrawQuadDataView> {
  using Data = ::viz::mojom::internal::DrawQuad_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::viz::mojom::DrawQuadStateDataView> {
  using Data = ::viz::mojom::internal::DrawQuadState_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace viz {
namespace mojom {


enum class ProtectedVideoState : int32_t {
  
  kClear = 0,
  
  kSoftwareProtected = 1,
  
  kHardwareProtected = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, ProtectedVideoState value);
inline bool IsKnownEnumValue(ProtectedVideoState value) {
  return internal::ProtectedVideoState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class OverlayPriority : int32_t {
  
  kLow = 0,
  
  kRegular = 1,
  
  kRequired = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, OverlayPriority value);
inline bool IsKnownEnumValue(OverlayPriority value) {
  return internal::OverlayPriority_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class DebugBorderQuadStateDataView {
 public:
  DebugBorderQuadStateDataView() = default;

  DebugBorderQuadStateDataView(
      internal::DebugBorderQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetColorDataView(
      ::skia::mojom::SkColor4fDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadColor(UserType* output) {
    
    auto* pointer = data_->color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColor4fDataView>(
        pointer, output, message_);
  }
  int32_t width() const {
    return data_->width;
  }
 private:
  internal::DebugBorderQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class CompositorRenderPassQuadStateDataView {
 public:
  CompositorRenderPassQuadStateDataView() = default;

  CompositorRenderPassQuadStateDataView(
      internal::CompositorRenderPassQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRenderPassIdDataView(
      ::viz::mojom::CompositorRenderPassIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRenderPassId(UserType* output) {
    
    auto* pointer = data_->render_pass_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::CompositorRenderPassIdDataView>(
        pointer, output, message_);
  }
  inline void GetMaskResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMaskResourceId(UserType* output) {
    
    auto* pointer = data_->mask_resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  inline void GetMaskUvRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMaskUvRect(UserType* output) {
    
    auto* pointer = data_->mask_uv_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetMaskTextureSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadMaskTextureSize(UserType* output) {
    
    auto* pointer = data_->mask_texture_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetFiltersScaleDataView(
      ::gfx::mojom::Vector2dFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFiltersScale(UserType* output) {
    
    auto* pointer = data_->filters_scale.Get();
    return mojo::internal::Deserialize<::gfx::mojom::Vector2dFDataView>(
        pointer, output, message_);
  }
  inline void GetFiltersOriginDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFiltersOrigin(UserType* output) {
    
    auto* pointer = data_->filters_origin.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetTexCoordRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTexCoordRect(UserType* output) {
    
    auto* pointer = data_->tex_coord_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  bool force_anti_aliasing_off() const {
    return data_->force_anti_aliasing_off;
  }
  float backdrop_filter_quality() const {
    return data_->backdrop_filter_quality;
  }
  bool intersects_damage_under() const {
    return data_->intersects_damage_under;
  }
 private:
  internal::CompositorRenderPassQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SolidColorQuadStateDataView {
 public:
  SolidColorQuadStateDataView() = default;

  SolidColorQuadStateDataView(
      internal::SolidColorQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetColorDataView(
      ::skia::mojom::SkColor4fDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadColor(UserType* output) {
    
    auto* pointer = data_->color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColor4fDataView>(
        pointer, output, message_);
  }
  bool force_anti_aliasing_off() const {
    return data_->force_anti_aliasing_off;
  }
 private:
  internal::SolidColorQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SurfaceQuadStateDataView {
 public:
  SurfaceQuadStateDataView() = default;

  SurfaceQuadStateDataView(
      internal::SurfaceQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSurfaceRangeDataView(
      ::viz::mojom::SurfaceRangeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSurfaceRange(UserType* output) {
    
    auto* pointer = data_->surface_range.Get();
    return mojo::internal::Deserialize<::viz::mojom::SurfaceRangeDataView>(
        pointer, output, message_);
  }
  inline void GetDefaultBackgroundColorDataView(
      ::skia::mojom::SkColor4fDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDefaultBackgroundColor(UserType* output) {
    
    auto* pointer = data_->default_background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColor4fDataView>(
        pointer, output, message_);
  }
  bool stretch_content_to_fill_bounds() const {
    return data_->stretch_content_to_fill_bounds;
  }
  bool is_reflection() const {
    return data_->is_reflection;
  }
  bool allow_merge() const {
    return data_->allow_merge;
  }
 private:
  internal::SurfaceQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TextureQuadStateDataView {
 public:
  TextureQuadStateDataView() = default;

  TextureQuadStateDataView(
      internal::TextureQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResourceId(UserType* output) {
    
    auto* pointer = data_->resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  inline void GetResourceSizeInPixelsDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResourceSizeInPixels(UserType* output) {
    
    auto* pointer = data_->resource_size_in_pixels.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  bool premultiplied_alpha() const {
    return data_->premultiplied_alpha;
  }
  inline void GetUvTopLeftDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUvTopLeft(UserType* output) {
    
    auto* pointer = data_->uv_top_left.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetUvBottomRightDataView(
      ::gfx::mojom::PointFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUvBottomRight(UserType* output) {
    
    auto* pointer = data_->uv_bottom_right.Get();
    return mojo::internal::Deserialize<::gfx::mojom::PointFDataView>(
        pointer, output, message_);
  }
  inline void GetBackgroundColorDataView(
      ::skia::mojom::SkColor4fDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBackgroundColor(UserType* output) {
    
    auto* pointer = data_->background_color.Get();
    return mojo::internal::Deserialize<::skia::mojom::SkColor4fDataView>(
        pointer, output, message_);
  }
  inline void GetVertexOpacityDataView(
      mojo::ArrayDataView<float>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVertexOpacity(UserType* output) {
    
    auto* pointer = data_->vertex_opacity.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<float>>(
        pointer, output, message_);
  }
  bool y_flipped() const {
    return data_->y_flipped;
  }
  bool nearest_neighbor() const {
    return data_->nearest_neighbor;
  }
  bool secure_output_only() const {
    return data_->secure_output_only;
  }
  bool is_stream_video() const {
    return data_->is_stream_video;
  }
  bool is_video_frame() const {
    return data_->is_video_frame;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadProtectedVideoType(UserType* output) const {
    auto data_value = data_->protected_video_type;
    return mojo::internal::Deserialize<::viz::mojom::ProtectedVideoState>(
        data_value, output);
  }
  ProtectedVideoState protected_video_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::ProtectedVideoState>(data_->protected_video_type));
  }
  inline void GetHdrMetadataDataView(
      ::gfx::mojom::HDRMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHdrMetadata(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::HDRMetadataDataView, UserType>(),
    "Attempting to read the optional `hdr_metadata` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadHdrMetadata` instead "
    "of `ReadHdrMetadata if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->hdr_metadata.Get();
    return mojo::internal::Deserialize<::gfx::mojom::HDRMetadataDataView>(
        pointer, output, message_);
  }
  inline void GetDamageRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDamageRect(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::RectDataView, UserType>(),
    "Attempting to read the optional `damage_rect` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDamageRect` instead "
    "of `ReadDamageRect if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->damage_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadOverlayPriorityHint(UserType* output) const {
    auto data_value = data_->overlay_priority_hint;
    return mojo::internal::Deserialize<::viz::mojom::OverlayPriority>(
        data_value, output);
  }
  OverlayPriority overlay_priority_hint() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::OverlayPriority>(data_->overlay_priority_hint));
  }
 private:
  internal::TextureQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TileQuadStateDataView {
 public:
  TileQuadStateDataView() = default;

  TileQuadStateDataView(
      internal::TileQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTexCoordRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTexCoordRect(UserType* output) {
    
    auto* pointer = data_->tex_coord_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetTextureSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTextureSize(UserType* output) {
    
    auto* pointer = data_->texture_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  bool is_premultiplied() const {
    return data_->is_premultiplied;
  }
  inline void GetResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResourceId(UserType* output) {
    
    auto* pointer = data_->resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  bool nearest_neighbor() const {
    return data_->nearest_neighbor;
  }
  bool force_anti_aliasing_off() const {
    return data_->force_anti_aliasing_off;
  }
 private:
  internal::TileQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class YUVVideoQuadStateDataView {
 public:
  YUVVideoQuadStateDataView() = default;

  YUVVideoQuadStateDataView(
      internal::YUVVideoQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetYaTexCoordRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadYaTexCoordRect(UserType* output) {
    
    auto* pointer = data_->ya_tex_coord_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetUvTexCoordRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUvTexCoordRect(UserType* output) {
    
    auto* pointer = data_->uv_tex_coord_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetYaTexSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadYaTexSize(UserType* output) {
    
    auto* pointer = data_->ya_tex_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetUvTexSizeDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUvTexSize(UserType* output) {
    
    auto* pointer = data_->uv_tex_size.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetYPlaneResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadYPlaneResourceId(UserType* output) {
    
    auto* pointer = data_->y_plane_resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  inline void GetUPlaneResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUPlaneResourceId(UserType* output) {
    
    auto* pointer = data_->u_plane_resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  inline void GetVPlaneResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVPlaneResourceId(UserType* output) {
    
    auto* pointer = data_->v_plane_resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  inline void GetAPlaneResourceIdDataView(
      ::viz::mojom::ResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAPlaneResourceId(UserType* output) {
    
    auto* pointer = data_->a_plane_resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::ResourceIdDataView>(
        pointer, output, message_);
  }
  float resource_offset() const {
    return data_->resource_offset;
  }
  float resource_multiplier() const {
    return data_->resource_multiplier;
  }
  uint32_t bits_per_channel() const {
    return data_->bits_per_channel;
  }
  inline void GetVideoColorSpaceDataView(
      ::gfx::mojom::ColorSpaceDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVideoColorSpace(UserType* output) {
    
    auto* pointer = data_->video_color_space.Get();
    return mojo::internal::Deserialize<::gfx::mojom::ColorSpaceDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadProtectedVideoType(UserType* output) const {
    auto data_value = data_->protected_video_type;
    return mojo::internal::Deserialize<::viz::mojom::ProtectedVideoState>(
        data_value, output);
  }
  ProtectedVideoState protected_video_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::ProtectedVideoState>(data_->protected_video_type));
  }
  inline void GetHdrMetadataDataView(
      ::gfx::mojom::HDRMetadataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHdrMetadata(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::HDRMetadataDataView, UserType>(),
    "Attempting to read the optional `hdr_metadata` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadHdrMetadata` instead "
    "of `ReadHdrMetadata if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->hdr_metadata.Get();
    return mojo::internal::Deserialize<::gfx::mojom::HDRMetadataDataView>(
        pointer, output, message_);
  }
  inline void GetDamageRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDamageRect(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::gfx::mojom::RectDataView, UserType>(),
    "Attempting to read the optional `damage_rect` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDamageRect` instead "
    "of `ReadDamageRect if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->damage_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
 private:
  internal::YUVVideoQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VideoHoleQuadStateDataView {
 public:
  VideoHoleQuadStateDataView() = default;

  VideoHoleQuadStateDataView(
      internal::VideoHoleQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOverlayPlaneIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOverlayPlaneId(UserType* output) {
    
    auto* pointer = data_->overlay_plane_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::VideoHoleQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SharedElementQuadStateDataView {
 public:
  SharedElementQuadStateDataView() = default;

  SharedElementQuadStateDataView(
      internal::SharedElementQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetResourceIdDataView(
      ::viz::mojom::SharedElementResourceIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResourceId(UserType* output) {
    
    auto* pointer = data_->resource_id.Get();
    return mojo::internal::Deserialize<::viz::mojom::SharedElementResourceIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::SharedElementQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DrawQuadDataView {
 public:
  DrawQuadDataView() = default;

  DrawQuadDataView(
      internal::DrawQuad_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRect(UserType* output) {
    
    auto* pointer = data_->rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  inline void GetVisibleRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadVisibleRect(UserType* output) {
    
    auto* pointer = data_->visible_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  bool needs_blending() const {
    return data_->needs_blending;
  }
  inline void GetSqsDataView(
      ::viz::mojom::SharedQuadStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSqs(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::viz::mojom::SharedQuadStateDataView, UserType>(),
    "Attempting to read the optional `sqs` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadSqs` instead "
    "of `ReadSqs if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->sqs.Get();
    return mojo::internal::Deserialize<::viz::mojom::SharedQuadStateDataView>(
        pointer, output, message_);
  }
  inline void GetDrawQuadStateDataView(
      DrawQuadStateDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDrawQuadState(UserType* output) {
    
    auto* pointer = !data_->draw_quad_state.is_null() ? &data_->draw_quad_state : nullptr;
    return mojo::internal::Deserialize<::viz::mojom::DrawQuadStateDataView>(
        pointer, output, message_);
  }
 private:
  internal::DrawQuad_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DrawQuadStateDataView {
 public:
  using Tag = internal::DrawQuadState_Data::DrawQuadState_Tag;

  DrawQuadStateDataView() = default;

  DrawQuadStateDataView(
      internal::DrawQuadState_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_debug_border_quad_state() const { return data_->tag == Tag::kDebugBorderQuadState; }
  inline void GetDebugBorderQuadStateDataView(
      DebugBorderQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadDebugBorderQuadState(UserType* output) const {
    
    CHECK(is_debug_border_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::DebugBorderQuadStateDataView>(
        data_->data.f_debug_border_quad_state.Get(), output, message_);
  }
  bool is_render_pass_quad_state() const { return data_->tag == Tag::kRenderPassQuadState; }
  inline void GetRenderPassQuadStateDataView(
      CompositorRenderPassQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadRenderPassQuadState(UserType* output) const {
    
    CHECK(is_render_pass_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::CompositorRenderPassQuadStateDataView>(
        data_->data.f_render_pass_quad_state.Get(), output, message_);
  }
  bool is_solid_color_quad_state() const { return data_->tag == Tag::kSolidColorQuadState; }
  inline void GetSolidColorQuadStateDataView(
      SolidColorQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadSolidColorQuadState(UserType* output) const {
    
    CHECK(is_solid_color_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::SolidColorQuadStateDataView>(
        data_->data.f_solid_color_quad_state.Get(), output, message_);
  }
  bool is_surface_quad_state() const { return data_->tag == Tag::kSurfaceQuadState; }
  inline void GetSurfaceQuadStateDataView(
      SurfaceQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadSurfaceQuadState(UserType* output) const {
    
    CHECK(is_surface_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::SurfaceQuadStateDataView>(
        data_->data.f_surface_quad_state.Get(), output, message_);
  }
  bool is_texture_quad_state() const { return data_->tag == Tag::kTextureQuadState; }
  inline void GetTextureQuadStateDataView(
      TextureQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadTextureQuadState(UserType* output) const {
    
    CHECK(is_texture_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::TextureQuadStateDataView>(
        data_->data.f_texture_quad_state.Get(), output, message_);
  }
  bool is_tile_quad_state() const { return data_->tag == Tag::kTileQuadState; }
  inline void GetTileQuadStateDataView(
      TileQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadTileQuadState(UserType* output) const {
    
    CHECK(is_tile_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::TileQuadStateDataView>(
        data_->data.f_tile_quad_state.Get(), output, message_);
  }
  bool is_yuv_video_quad_state() const { return data_->tag == Tag::kYuvVideoQuadState; }
  inline void GetYuvVideoQuadStateDataView(
      YUVVideoQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadYuvVideoQuadState(UserType* output) const {
    
    CHECK(is_yuv_video_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::YUVVideoQuadStateDataView>(
        data_->data.f_yuv_video_quad_state.Get(), output, message_);
  }
  bool is_video_hole_quad_state() const { return data_->tag == Tag::kVideoHoleQuadState; }
  inline void GetVideoHoleQuadStateDataView(
      VideoHoleQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadVideoHoleQuadState(UserType* output) const {
    
    CHECK(is_video_hole_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::VideoHoleQuadStateDataView>(
        data_->data.f_video_hole_quad_state.Get(), output, message_);
  }
  bool is_shared_element_quad_state() const { return data_->tag == Tag::kSharedElementQuadState; }
  inline void GetSharedElementQuadStateDataView(
      SharedElementQuadStateDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadSharedElementQuadState(UserType* output) const {
    
    CHECK(is_shared_element_quad_state());
    return mojo::internal::Deserialize<::viz::mojom::SharedElementQuadStateDataView>(
        data_->data.f_shared_element_quad_state.Get(), output, message_);
  }

 private:
  internal::DrawQuadState_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace viz

namespace std {

template <>
struct hash<::viz::mojom::ProtectedVideoState>
    : public mojo::internal::EnumHashImpl<::viz::mojom::ProtectedVideoState> {};

template <>
struct hash<::viz::mojom::OverlayPriority>
    : public mojo::internal::EnumHashImpl<::viz::mojom::OverlayPriority> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::ProtectedVideoState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::viz::mojom::ProtectedVideoState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::viz::mojom::ProtectedVideoState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::OverlayPriority, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::viz::mojom::OverlayPriority, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::viz::mojom::OverlayPriority>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::DebugBorderQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::DebugBorderQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::DebugBorderQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::color(input)) in_color = Traits::color(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->color)::BaseType> color_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::SkColor4fDataView>(
        in_color, color_fragment);
    fragment->color.Set(
        color_fragment.is_null() ? nullptr : color_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null color in DebugBorderQuadState struct");
    fragment->width = Traits::width(input);
  }

  static bool Deserialize(::viz::mojom::internal::DebugBorderQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::DebugBorderQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::CompositorRenderPassQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::CompositorRenderPassQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::CompositorRenderPassQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::render_pass_id(input)) in_render_pass_id = Traits::render_pass_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->render_pass_id)::BaseType> render_pass_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::CompositorRenderPassIdDataView>(
        in_render_pass_id, render_pass_id_fragment);
    fragment->render_pass_id.Set(
        render_pass_id_fragment.is_null() ? nullptr : render_pass_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->render_pass_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null render_pass_id in CompositorRenderPassQuadState struct");
    decltype(Traits::mask_resource_id(input)) in_mask_resource_id = Traits::mask_resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mask_resource_id)::BaseType> mask_resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_mask_resource_id, mask_resource_id_fragment);
    fragment->mask_resource_id.Set(
        mask_resource_id_fragment.is_null() ? nullptr : mask_resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->mask_resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mask_resource_id in CompositorRenderPassQuadState struct");
    decltype(Traits::mask_uv_rect(input)) in_mask_uv_rect = Traits::mask_uv_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mask_uv_rect)::BaseType> mask_uv_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_mask_uv_rect, mask_uv_rect_fragment);
    fragment->mask_uv_rect.Set(
        mask_uv_rect_fragment.is_null() ? nullptr : mask_uv_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->mask_uv_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mask_uv_rect in CompositorRenderPassQuadState struct");
    decltype(Traits::mask_texture_size(input)) in_mask_texture_size = Traits::mask_texture_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->mask_texture_size)::BaseType> mask_texture_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_mask_texture_size, mask_texture_size_fragment);
    fragment->mask_texture_size.Set(
        mask_texture_size_fragment.is_null() ? nullptr : mask_texture_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->mask_texture_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null mask_texture_size in CompositorRenderPassQuadState struct");
    decltype(Traits::filters_scale(input)) in_filters_scale = Traits::filters_scale(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->filters_scale)::BaseType> filters_scale_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::Vector2dFDataView>(
        in_filters_scale, filters_scale_fragment);
    fragment->filters_scale.Set(
        filters_scale_fragment.is_null() ? nullptr : filters_scale_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->filters_scale.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null filters_scale in CompositorRenderPassQuadState struct");
    decltype(Traits::filters_origin(input)) in_filters_origin = Traits::filters_origin(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->filters_origin)::BaseType> filters_origin_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_filters_origin, filters_origin_fragment);
    fragment->filters_origin.Set(
        filters_origin_fragment.is_null() ? nullptr : filters_origin_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->filters_origin.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null filters_origin in CompositorRenderPassQuadState struct");
    decltype(Traits::tex_coord_rect(input)) in_tex_coord_rect = Traits::tex_coord_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->tex_coord_rect)::BaseType> tex_coord_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_tex_coord_rect, tex_coord_rect_fragment);
    fragment->tex_coord_rect.Set(
        tex_coord_rect_fragment.is_null() ? nullptr : tex_coord_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->tex_coord_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null tex_coord_rect in CompositorRenderPassQuadState struct");
    fragment->force_anti_aliasing_off = Traits::force_anti_aliasing_off(input);
    fragment->backdrop_filter_quality = Traits::backdrop_filter_quality(input);
    fragment->intersects_damage_under = Traits::intersects_damage_under(input);
  }

  static bool Deserialize(::viz::mojom::internal::CompositorRenderPassQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::CompositorRenderPassQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::SolidColorQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::SolidColorQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::SolidColorQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::color(input)) in_color = Traits::color(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->color)::BaseType> color_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::SkColor4fDataView>(
        in_color, color_fragment);
    fragment->color.Set(
        color_fragment.is_null() ? nullptr : color_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null color in SolidColorQuadState struct");
    fragment->force_anti_aliasing_off = Traits::force_anti_aliasing_off(input);
  }

  static bool Deserialize(::viz::mojom::internal::SolidColorQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::SolidColorQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::SurfaceQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::SurfaceQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::SurfaceQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::surface_range(input)) in_surface_range = Traits::surface_range(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->surface_range)::BaseType> surface_range_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::SurfaceRangeDataView>(
        in_surface_range, surface_range_fragment);
    fragment->surface_range.Set(
        surface_range_fragment.is_null() ? nullptr : surface_range_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->surface_range.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null surface_range in SurfaceQuadState struct");
    decltype(Traits::default_background_color(input)) in_default_background_color = Traits::default_background_color(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->default_background_color)::BaseType> default_background_color_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::SkColor4fDataView>(
        in_default_background_color, default_background_color_fragment);
    fragment->default_background_color.Set(
        default_background_color_fragment.is_null() ? nullptr : default_background_color_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->default_background_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null default_background_color in SurfaceQuadState struct");
    fragment->stretch_content_to_fill_bounds = Traits::stretch_content_to_fill_bounds(input);
    fragment->is_reflection = Traits::is_reflection(input);
    fragment->allow_merge = Traits::allow_merge(input);
  }

  static bool Deserialize(::viz::mojom::internal::SurfaceQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::SurfaceQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::TextureQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::TextureQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::TextureQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::resource_id(input)) in_resource_id = Traits::resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->resource_id)::BaseType> resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_resource_id, resource_id_fragment);
    fragment->resource_id.Set(
        resource_id_fragment.is_null() ? nullptr : resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null resource_id in TextureQuadState struct");
    decltype(Traits::resource_size_in_pixels(input)) in_resource_size_in_pixels = Traits::resource_size_in_pixels(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->resource_size_in_pixels)::BaseType> resource_size_in_pixels_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_resource_size_in_pixels, resource_size_in_pixels_fragment);
    fragment->resource_size_in_pixels.Set(
        resource_size_in_pixels_fragment.is_null() ? nullptr : resource_size_in_pixels_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->resource_size_in_pixels.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null resource_size_in_pixels in TextureQuadState struct");
    fragment->premultiplied_alpha = Traits::premultiplied_alpha(input);
    decltype(Traits::uv_top_left(input)) in_uv_top_left = Traits::uv_top_left(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->uv_top_left)::BaseType> uv_top_left_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_uv_top_left, uv_top_left_fragment);
    fragment->uv_top_left.Set(
        uv_top_left_fragment.is_null() ? nullptr : uv_top_left_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->uv_top_left.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null uv_top_left in TextureQuadState struct");
    decltype(Traits::uv_bottom_right(input)) in_uv_bottom_right = Traits::uv_bottom_right(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->uv_bottom_right)::BaseType> uv_bottom_right_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::PointFDataView>(
        in_uv_bottom_right, uv_bottom_right_fragment);
    fragment->uv_bottom_right.Set(
        uv_bottom_right_fragment.is_null() ? nullptr : uv_bottom_right_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->uv_bottom_right.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null uv_bottom_right in TextureQuadState struct");
    decltype(Traits::background_color(input)) in_background_color = Traits::background_color(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->background_color)::BaseType> background_color_fragment(
            fragment.message());
    mojo::internal::Serialize<::skia::mojom::SkColor4fDataView>(
        in_background_color, background_color_fragment);
    fragment->background_color.Set(
        background_color_fragment.is_null() ? nullptr : background_color_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->background_color.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null background_color in TextureQuadState struct");
    decltype(Traits::vertex_opacity(input)) in_vertex_opacity = Traits::vertex_opacity(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->vertex_opacity)::BaseType>
        vertex_opacity_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams vertex_opacity_validate_params(
        4, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<float>>(
        in_vertex_opacity, vertex_opacity_fragment, &vertex_opacity_validate_params);
    fragment->vertex_opacity.Set(
        vertex_opacity_fragment.is_null() ? nullptr : vertex_opacity_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->vertex_opacity.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null vertex_opacity in TextureQuadState struct");
    fragment->y_flipped = Traits::y_flipped(input);
    fragment->nearest_neighbor = Traits::nearest_neighbor(input);
    fragment->secure_output_only = Traits::secure_output_only(input);
    fragment->is_stream_video = Traits::is_stream_video(input);
    fragment->is_video_frame = Traits::is_video_frame(input);
    mojo::internal::Serialize<::viz::mojom::ProtectedVideoState>(
        Traits::protected_video_type(input), &fragment->protected_video_type);
    decltype(Traits::hdr_metadata(input)) in_hdr_metadata = Traits::hdr_metadata(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->hdr_metadata)::BaseType> hdr_metadata_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::HDRMetadataDataView>(
        in_hdr_metadata, hdr_metadata_fragment);
    fragment->hdr_metadata.Set(
        hdr_metadata_fragment.is_null() ? nullptr : hdr_metadata_fragment.data());
    decltype(Traits::damage_rect(input)) in_damage_rect = Traits::damage_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->damage_rect)::BaseType> damage_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_damage_rect, damage_rect_fragment);
    fragment->damage_rect.Set(
        damage_rect_fragment.is_null() ? nullptr : damage_rect_fragment.data());
    mojo::internal::Serialize<::viz::mojom::OverlayPriority>(
        Traits::overlay_priority_hint(input), &fragment->overlay_priority_hint);
  }

  static bool Deserialize(::viz::mojom::internal::TextureQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::TextureQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::TileQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::TileQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::TileQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::tex_coord_rect(input)) in_tex_coord_rect = Traits::tex_coord_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->tex_coord_rect)::BaseType> tex_coord_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_tex_coord_rect, tex_coord_rect_fragment);
    fragment->tex_coord_rect.Set(
        tex_coord_rect_fragment.is_null() ? nullptr : tex_coord_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->tex_coord_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null tex_coord_rect in TileQuadState struct");
    decltype(Traits::texture_size(input)) in_texture_size = Traits::texture_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->texture_size)::BaseType> texture_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_texture_size, texture_size_fragment);
    fragment->texture_size.Set(
        texture_size_fragment.is_null() ? nullptr : texture_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->texture_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null texture_size in TileQuadState struct");
    fragment->is_premultiplied = Traits::is_premultiplied(input);
    decltype(Traits::resource_id(input)) in_resource_id = Traits::resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->resource_id)::BaseType> resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_resource_id, resource_id_fragment);
    fragment->resource_id.Set(
        resource_id_fragment.is_null() ? nullptr : resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null resource_id in TileQuadState struct");
    fragment->nearest_neighbor = Traits::nearest_neighbor(input);
    fragment->force_anti_aliasing_off = Traits::force_anti_aliasing_off(input);
  }

  static bool Deserialize(::viz::mojom::internal::TileQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::TileQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::YUVVideoQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::YUVVideoQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::YUVVideoQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::ya_tex_coord_rect(input)) in_ya_tex_coord_rect = Traits::ya_tex_coord_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ya_tex_coord_rect)::BaseType> ya_tex_coord_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_ya_tex_coord_rect, ya_tex_coord_rect_fragment);
    fragment->ya_tex_coord_rect.Set(
        ya_tex_coord_rect_fragment.is_null() ? nullptr : ya_tex_coord_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ya_tex_coord_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ya_tex_coord_rect in YUVVideoQuadState struct");
    decltype(Traits::uv_tex_coord_rect(input)) in_uv_tex_coord_rect = Traits::uv_tex_coord_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->uv_tex_coord_rect)::BaseType> uv_tex_coord_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_uv_tex_coord_rect, uv_tex_coord_rect_fragment);
    fragment->uv_tex_coord_rect.Set(
        uv_tex_coord_rect_fragment.is_null() ? nullptr : uv_tex_coord_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->uv_tex_coord_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null uv_tex_coord_rect in YUVVideoQuadState struct");
    decltype(Traits::ya_tex_size(input)) in_ya_tex_size = Traits::ya_tex_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->ya_tex_size)::BaseType> ya_tex_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_ya_tex_size, ya_tex_size_fragment);
    fragment->ya_tex_size.Set(
        ya_tex_size_fragment.is_null() ? nullptr : ya_tex_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->ya_tex_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null ya_tex_size in YUVVideoQuadState struct");
    decltype(Traits::uv_tex_size(input)) in_uv_tex_size = Traits::uv_tex_size(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->uv_tex_size)::BaseType> uv_tex_size_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_uv_tex_size, uv_tex_size_fragment);
    fragment->uv_tex_size.Set(
        uv_tex_size_fragment.is_null() ? nullptr : uv_tex_size_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->uv_tex_size.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null uv_tex_size in YUVVideoQuadState struct");
    decltype(Traits::y_plane_resource_id(input)) in_y_plane_resource_id = Traits::y_plane_resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->y_plane_resource_id)::BaseType> y_plane_resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_y_plane_resource_id, y_plane_resource_id_fragment);
    fragment->y_plane_resource_id.Set(
        y_plane_resource_id_fragment.is_null() ? nullptr : y_plane_resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->y_plane_resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null y_plane_resource_id in YUVVideoQuadState struct");
    decltype(Traits::u_plane_resource_id(input)) in_u_plane_resource_id = Traits::u_plane_resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->u_plane_resource_id)::BaseType> u_plane_resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_u_plane_resource_id, u_plane_resource_id_fragment);
    fragment->u_plane_resource_id.Set(
        u_plane_resource_id_fragment.is_null() ? nullptr : u_plane_resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->u_plane_resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null u_plane_resource_id in YUVVideoQuadState struct");
    decltype(Traits::v_plane_resource_id(input)) in_v_plane_resource_id = Traits::v_plane_resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->v_plane_resource_id)::BaseType> v_plane_resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_v_plane_resource_id, v_plane_resource_id_fragment);
    fragment->v_plane_resource_id.Set(
        v_plane_resource_id_fragment.is_null() ? nullptr : v_plane_resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->v_plane_resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null v_plane_resource_id in YUVVideoQuadState struct");
    decltype(Traits::a_plane_resource_id(input)) in_a_plane_resource_id = Traits::a_plane_resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->a_plane_resource_id)::BaseType> a_plane_resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::ResourceIdDataView>(
        in_a_plane_resource_id, a_plane_resource_id_fragment);
    fragment->a_plane_resource_id.Set(
        a_plane_resource_id_fragment.is_null() ? nullptr : a_plane_resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->a_plane_resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null a_plane_resource_id in YUVVideoQuadState struct");
    fragment->resource_offset = Traits::resource_offset(input);
    fragment->resource_multiplier = Traits::resource_multiplier(input);
    fragment->bits_per_channel = Traits::bits_per_channel(input);
    decltype(Traits::video_color_space(input)) in_video_color_space = Traits::video_color_space(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->video_color_space)::BaseType> video_color_space_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::ColorSpaceDataView>(
        in_video_color_space, video_color_space_fragment);
    fragment->video_color_space.Set(
        video_color_space_fragment.is_null() ? nullptr : video_color_space_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->video_color_space.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null video_color_space in YUVVideoQuadState struct");
    mojo::internal::Serialize<::viz::mojom::ProtectedVideoState>(
        Traits::protected_video_type(input), &fragment->protected_video_type);
    decltype(Traits::hdr_metadata(input)) in_hdr_metadata = Traits::hdr_metadata(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->hdr_metadata)::BaseType> hdr_metadata_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::HDRMetadataDataView>(
        in_hdr_metadata, hdr_metadata_fragment);
    fragment->hdr_metadata.Set(
        hdr_metadata_fragment.is_null() ? nullptr : hdr_metadata_fragment.data());
    decltype(Traits::damage_rect(input)) in_damage_rect = Traits::damage_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->damage_rect)::BaseType> damage_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_damage_rect, damage_rect_fragment);
    fragment->damage_rect.Set(
        damage_rect_fragment.is_null() ? nullptr : damage_rect_fragment.data());
  }

  static bool Deserialize(::viz::mojom::internal::YUVVideoQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::YUVVideoQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::VideoHoleQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::VideoHoleQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::VideoHoleQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::overlay_plane_id(input)) in_overlay_plane_id = Traits::overlay_plane_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->overlay_plane_id)::BaseType> overlay_plane_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_overlay_plane_id, overlay_plane_id_fragment);
    fragment->overlay_plane_id.Set(
        overlay_plane_id_fragment.is_null() ? nullptr : overlay_plane_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->overlay_plane_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null overlay_plane_id in VideoHoleQuadState struct");
  }

  static bool Deserialize(::viz::mojom::internal::VideoHoleQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::VideoHoleQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::SharedElementQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::SharedElementQuadStateDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::SharedElementQuadState_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::resource_id(input)) in_resource_id = Traits::resource_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->resource_id)::BaseType> resource_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::SharedElementResourceIdDataView>(
        in_resource_id, resource_id_fragment);
    fragment->resource_id.Set(
        resource_id_fragment.is_null() ? nullptr : resource_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->resource_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null resource_id in SharedElementQuadState struct");
  }

  static bool Deserialize(::viz::mojom::internal::SharedElementQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::SharedElementQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::DrawQuadDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::viz::mojom::DrawQuadDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::viz::mojom::internal::DrawQuad_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::rect(input)) in_rect = Traits::rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->rect)::BaseType> rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_rect, rect_fragment);
    fragment->rect.Set(
        rect_fragment.is_null() ? nullptr : rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null rect in DrawQuad struct");
    decltype(Traits::visible_rect(input)) in_visible_rect = Traits::visible_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->visible_rect)::BaseType> visible_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectDataView>(
        in_visible_rect, visible_rect_fragment);
    fragment->visible_rect.Set(
        visible_rect_fragment.is_null() ? nullptr : visible_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->visible_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null visible_rect in DrawQuad struct");
    fragment->needs_blending = Traits::needs_blending(input);
    decltype(Traits::sqs(input)) in_sqs = Traits::sqs(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->sqs)::BaseType> sqs_fragment(
            fragment.message());
    mojo::internal::Serialize<::viz::mojom::SharedQuadStateDataView>(
        in_sqs, sqs_fragment);
    fragment->sqs.Set(
        sqs_fragment.is_null() ? nullptr : sqs_fragment.data());
    decltype(Traits::draw_quad_state(input)) in_draw_quad_state = Traits::draw_quad_state(input);
    mojo::internal::MessageFragment<decltype(fragment->draw_quad_state)>
        draw_quad_state_fragment(fragment.message());
    draw_quad_state_fragment.Claim(&fragment->draw_quad_state);
    mojo::internal::Serialize<::viz::mojom::DrawQuadStateDataView>(
        in_draw_quad_state, draw_quad_state_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->draw_quad_state.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null draw_quad_state in DrawQuad struct");
  }

  static bool Deserialize(::viz::mojom::internal::DrawQuad_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::DrawQuadDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::viz::mojom::DrawQuadStateDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::viz::mojom::DrawQuadStateDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::viz::mojom::internal::DrawQuadState_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::viz::mojom::DrawQuadStateDataView::Tag::kDebugBorderQuadState: {
        decltype(Traits::debug_border_quad_state(input))
            in_debug_border_quad_state = Traits::debug_border_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_debug_border_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::DebugBorderQuadStateDataView>(
            in_debug_border_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null debug_border_quad_state in DrawQuadState union");
        fragment->data.f_debug_border_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kRenderPassQuadState: {
        decltype(Traits::render_pass_quad_state(input))
            in_render_pass_quad_state = Traits::render_pass_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_render_pass_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::CompositorRenderPassQuadStateDataView>(
            in_render_pass_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null render_pass_quad_state in DrawQuadState union");
        fragment->data.f_render_pass_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kSolidColorQuadState: {
        decltype(Traits::solid_color_quad_state(input))
            in_solid_color_quad_state = Traits::solid_color_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_solid_color_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::SolidColorQuadStateDataView>(
            in_solid_color_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null solid_color_quad_state in DrawQuadState union");
        fragment->data.f_solid_color_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kSurfaceQuadState: {
        decltype(Traits::surface_quad_state(input))
            in_surface_quad_state = Traits::surface_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_surface_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::SurfaceQuadStateDataView>(
            in_surface_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null surface_quad_state in DrawQuadState union");
        fragment->data.f_surface_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kTextureQuadState: {
        decltype(Traits::texture_quad_state(input))
            in_texture_quad_state = Traits::texture_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_texture_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::TextureQuadStateDataView>(
            in_texture_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null texture_quad_state in DrawQuadState union");
        fragment->data.f_texture_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kTileQuadState: {
        decltype(Traits::tile_quad_state(input))
            in_tile_quad_state = Traits::tile_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_tile_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::TileQuadStateDataView>(
            in_tile_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null tile_quad_state in DrawQuadState union");
        fragment->data.f_tile_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kYuvVideoQuadState: {
        decltype(Traits::yuv_video_quad_state(input))
            in_yuv_video_quad_state = Traits::yuv_video_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_yuv_video_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::YUVVideoQuadStateDataView>(
            in_yuv_video_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null yuv_video_quad_state in DrawQuadState union");
        fragment->data.f_yuv_video_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kVideoHoleQuadState: {
        decltype(Traits::video_hole_quad_state(input))
            in_video_hole_quad_state = Traits::video_hole_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_video_hole_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::VideoHoleQuadStateDataView>(
            in_video_hole_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null video_hole_quad_state in DrawQuadState union");
        fragment->data.f_video_hole_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::viz::mojom::DrawQuadStateDataView::Tag::kSharedElementQuadState: {
        decltype(Traits::shared_element_quad_state(input))
            in_shared_element_quad_state = Traits::shared_element_quad_state(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_shared_element_quad_state)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::viz::mojom::SharedElementQuadStateDataView>(
            in_shared_element_quad_state, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null shared_element_quad_state in DrawQuadState union");
        fragment->data.f_shared_element_quad_state.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
    }
  }

  static bool Deserialize(::viz::mojom::internal::DrawQuadState_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::viz::mojom::DrawQuadStateDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace viz {
namespace mojom {

inline void DebugBorderQuadStateDataView::GetColorDataView(
    ::skia::mojom::SkColor4fDataView* output) {
  auto pointer = data_->color.Get();
  *output = ::skia::mojom::SkColor4fDataView(pointer, message_);
}


inline void CompositorRenderPassQuadStateDataView::GetRenderPassIdDataView(
    ::viz::mojom::CompositorRenderPassIdDataView* output) {
  auto pointer = data_->render_pass_id.Get();
  *output = ::viz::mojom::CompositorRenderPassIdDataView(pointer, message_);
}
inline void CompositorRenderPassQuadStateDataView::GetMaskResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->mask_resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}
inline void CompositorRenderPassQuadStateDataView::GetMaskUvRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->mask_uv_rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void CompositorRenderPassQuadStateDataView::GetMaskTextureSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->mask_texture_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void CompositorRenderPassQuadStateDataView::GetFiltersScaleDataView(
    ::gfx::mojom::Vector2dFDataView* output) {
  auto pointer = data_->filters_scale.Get();
  *output = ::gfx::mojom::Vector2dFDataView(pointer, message_);
}
inline void CompositorRenderPassQuadStateDataView::GetFiltersOriginDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->filters_origin.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void CompositorRenderPassQuadStateDataView::GetTexCoordRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->tex_coord_rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}


inline void SolidColorQuadStateDataView::GetColorDataView(
    ::skia::mojom::SkColor4fDataView* output) {
  auto pointer = data_->color.Get();
  *output = ::skia::mojom::SkColor4fDataView(pointer, message_);
}


inline void SurfaceQuadStateDataView::GetSurfaceRangeDataView(
    ::viz::mojom::SurfaceRangeDataView* output) {
  auto pointer = data_->surface_range.Get();
  *output = ::viz::mojom::SurfaceRangeDataView(pointer, message_);
}
inline void SurfaceQuadStateDataView::GetDefaultBackgroundColorDataView(
    ::skia::mojom::SkColor4fDataView* output) {
  auto pointer = data_->default_background_color.Get();
  *output = ::skia::mojom::SkColor4fDataView(pointer, message_);
}


inline void TextureQuadStateDataView::GetResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}
inline void TextureQuadStateDataView::GetResourceSizeInPixelsDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->resource_size_in_pixels.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void TextureQuadStateDataView::GetUvTopLeftDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->uv_top_left.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void TextureQuadStateDataView::GetUvBottomRightDataView(
    ::gfx::mojom::PointFDataView* output) {
  auto pointer = data_->uv_bottom_right.Get();
  *output = ::gfx::mojom::PointFDataView(pointer, message_);
}
inline void TextureQuadStateDataView::GetBackgroundColorDataView(
    ::skia::mojom::SkColor4fDataView* output) {
  auto pointer = data_->background_color.Get();
  *output = ::skia::mojom::SkColor4fDataView(pointer, message_);
}
inline void TextureQuadStateDataView::GetVertexOpacityDataView(
    mojo::ArrayDataView<float>* output) {
  auto pointer = data_->vertex_opacity.Get();
  *output = mojo::ArrayDataView<float>(pointer, message_);
}
inline void TextureQuadStateDataView::GetHdrMetadataDataView(
    ::gfx::mojom::HDRMetadataDataView* output) {
  auto pointer = data_->hdr_metadata.Get();
  *output = ::gfx::mojom::HDRMetadataDataView(pointer, message_);
}
inline void TextureQuadStateDataView::GetDamageRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->damage_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void TileQuadStateDataView::GetTexCoordRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->tex_coord_rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void TileQuadStateDataView::GetTextureSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->texture_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void TileQuadStateDataView::GetResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}


inline void YUVVideoQuadStateDataView::GetYaTexCoordRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->ya_tex_coord_rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetUvTexCoordRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->uv_tex_coord_rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetYaTexSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->ya_tex_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetUvTexSizeDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->uv_tex_size.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetYPlaneResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->y_plane_resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetUPlaneResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->u_plane_resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetVPlaneResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->v_plane_resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetAPlaneResourceIdDataView(
    ::viz::mojom::ResourceIdDataView* output) {
  auto pointer = data_->a_plane_resource_id.Get();
  *output = ::viz::mojom::ResourceIdDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetVideoColorSpaceDataView(
    ::gfx::mojom::ColorSpaceDataView* output) {
  auto pointer = data_->video_color_space.Get();
  *output = ::gfx::mojom::ColorSpaceDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetHdrMetadataDataView(
    ::gfx::mojom::HDRMetadataDataView* output) {
  auto pointer = data_->hdr_metadata.Get();
  *output = ::gfx::mojom::HDRMetadataDataView(pointer, message_);
}
inline void YUVVideoQuadStateDataView::GetDamageRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->damage_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void VideoHoleQuadStateDataView::GetOverlayPlaneIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->overlay_plane_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void SharedElementQuadStateDataView::GetResourceIdDataView(
    ::viz::mojom::SharedElementResourceIdDataView* output) {
  auto pointer = data_->resource_id.Get();
  *output = ::viz::mojom::SharedElementResourceIdDataView(pointer, message_);
}


inline void DrawQuadDataView::GetRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void DrawQuadDataView::GetVisibleRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->visible_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}
inline void DrawQuadDataView::GetSqsDataView(
    ::viz::mojom::SharedQuadStateDataView* output) {
  auto pointer = data_->sqs.Get();
  *output = ::viz::mojom::SharedQuadStateDataView(pointer, message_);
}
inline void DrawQuadDataView::GetDrawQuadStateDataView(
    DrawQuadStateDataView* output) {
  auto pointer = &data_->draw_quad_state;
  *output = DrawQuadStateDataView(pointer, message_);
}


inline void DrawQuadStateDataView::GetDebugBorderQuadStateDataView(
    DebugBorderQuadStateDataView* output) const {
  CHECK(is_debug_border_quad_state());
  *output = DebugBorderQuadStateDataView(data_->data.f_debug_border_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetRenderPassQuadStateDataView(
    CompositorRenderPassQuadStateDataView* output) const {
  CHECK(is_render_pass_quad_state());
  *output = CompositorRenderPassQuadStateDataView(data_->data.f_render_pass_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetSolidColorQuadStateDataView(
    SolidColorQuadStateDataView* output) const {
  CHECK(is_solid_color_quad_state());
  *output = SolidColorQuadStateDataView(data_->data.f_solid_color_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetSurfaceQuadStateDataView(
    SurfaceQuadStateDataView* output) const {
  CHECK(is_surface_quad_state());
  *output = SurfaceQuadStateDataView(data_->data.f_surface_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetTextureQuadStateDataView(
    TextureQuadStateDataView* output) const {
  CHECK(is_texture_quad_state());
  *output = TextureQuadStateDataView(data_->data.f_texture_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetTileQuadStateDataView(
    TileQuadStateDataView* output) const {
  CHECK(is_tile_quad_state());
  *output = TileQuadStateDataView(data_->data.f_tile_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetYuvVideoQuadStateDataView(
    YUVVideoQuadStateDataView* output) const {
  CHECK(is_yuv_video_quad_state());
  *output = YUVVideoQuadStateDataView(data_->data.f_yuv_video_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetVideoHoleQuadStateDataView(
    VideoHoleQuadStateDataView* output) const {
  CHECK(is_video_hole_quad_state());
  *output = VideoHoleQuadStateDataView(data_->data.f_video_hole_quad_state.Get(), message_);
}
inline void DrawQuadStateDataView::GetSharedElementQuadStateDataView(
    SharedElementQuadStateDataView* output) const {
  CHECK(is_shared_element_quad_state());
  *output = SharedElementQuadStateDataView(data_->data.f_shared_element_quad_state.Get(), message_);
}


}  // namespace mojom
}  // namespace viz

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::viz::mojom::ProtectedVideoState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::viz::mojom::ProtectedVideoState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::viz::mojom::OverlayPriority> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::viz::mojom::OverlayPriority value);
};

} // namespace perfetto

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_QUADS_MOJOM_SHARED_H_