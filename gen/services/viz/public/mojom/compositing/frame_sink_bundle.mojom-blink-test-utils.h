// services/viz/public/mojom/compositing/frame_sink_bundle.mojom-blink-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_SINK_BUNDLE_MOJOM_BLINK_TEST_UTILS_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_SINK_BUNDLE_MOJOM_BLINK_TEST_UTILS_H_

#include "services/viz/public/mojom/compositing/frame_sink_bundle.mojom-blink.h"
#include "third_party/blink/public/platform/web_common.h"


namespace viz {
namespace mojom {
namespace blink {


class BLINK_PLATFORM_EXPORT FrameSinkBundleInterceptorForTesting : public FrameSinkBundle {
  virtual FrameSinkBundle* GetForwardingInterface() = 0;
  void InitializeCompositorFrameSinkType(uint32_t sink_id, ::viz::mojom::blink::CompositorFrameSinkType type) override;
  void SetNeedsBeginFrame(uint32_t sink_id, bool needs_begin_frame) override;
  void Submit(WTF::Vector<BundledFrameSubmissionPtr> submissions) override;
  void DidAllocateSharedBitmap(uint32_t sink_id, ::base::ReadOnlySharedMemoryRegion region, const ::gpu::Mailbox& id) override;
  void SetThreadIds(uint32_t sink_id, const WTF::Vector<int32_t>& thread_ids) override;
};
class BLINK_PLATFORM_EXPORT FrameSinkBundleAsyncWaiter {
 public:
  explicit FrameSinkBundleAsyncWaiter(FrameSinkBundle* proxy);

  FrameSinkBundleAsyncWaiter(const FrameSinkBundleAsyncWaiter&) = delete;
  FrameSinkBundleAsyncWaiter& operator=(const FrameSinkBundleAsyncWaiter&) = delete;

  ~FrameSinkBundleAsyncWaiter();

 private:
  FrameSinkBundle* const proxy_;
};


class BLINK_PLATFORM_EXPORT FrameSinkBundleClientInterceptorForTesting : public FrameSinkBundleClient {
  virtual FrameSinkBundleClient* GetForwardingInterface() = 0;
  void FlushNotifications(WTF::Vector<BundledReturnedResourcesPtr> acks, WTF::Vector<BeginFrameInfoPtr> begin_frames, WTF::Vector<BundledReturnedResourcesPtr> reclaimed_resources) override;
  void OnBeginFramePausedChanged(uint32_t sink_id, bool paused) override;
  void OnCompositorFrameTransitionDirectiveProcessed(uint32_t sink_id, uint32_t sequence_id) override;
};
class BLINK_PLATFORM_EXPORT FrameSinkBundleClientAsyncWaiter {
 public:
  explicit FrameSinkBundleClientAsyncWaiter(FrameSinkBundleClient* proxy);

  FrameSinkBundleClientAsyncWaiter(const FrameSinkBundleClientAsyncWaiter&) = delete;
  FrameSinkBundleClientAsyncWaiter& operator=(const FrameSinkBundleClientAsyncWaiter&) = delete;

  ~FrameSinkBundleClientAsyncWaiter();

 private:
  FrameSinkBundleClient* const proxy_;
};




}  // namespace blink
}  // namespace mojom
}  // namespace viz

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_SINK_BUNDLE_MOJOM_BLINK_TEST_UTILS_H_