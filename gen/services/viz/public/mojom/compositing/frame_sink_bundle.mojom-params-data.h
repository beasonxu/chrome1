// services/viz/public/mojom/compositing/frame_sink_bundle.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_SINK_BUNDLE_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_SINK_BUNDLE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace viz {
namespace mojom {
namespace internal {

class ValidationContext;
class  FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sink_id;
  int32_t type;

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data>;

  FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data();
  ~FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data) == 16,
              "Bad sizeof(FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data)");
class  FrameSinkBundle_SetNeedsBeginFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sink_id;
  uint8_t needs_begin_frame : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundle_SetNeedsBeginFrame_Params_Data>;

  FrameSinkBundle_SetNeedsBeginFrame_Params_Data();
  ~FrameSinkBundle_SetNeedsBeginFrame_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundle_SetNeedsBeginFrame_Params_Data) == 16,
              "Bad sizeof(FrameSinkBundle_SetNeedsBeginFrame_Params_Data)");
class  FrameSinkBundle_Submit_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BundledFrameSubmission_Data>>> submissions;

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundle_Submit_Params_Data>;

  FrameSinkBundle_Submit_Params_Data();
  ~FrameSinkBundle_Submit_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundle_Submit_Params_Data) == 16,
              "Bad sizeof(FrameSinkBundle_Submit_Params_Data)");
class  FrameSinkBundle_DidAllocateSharedBitmap_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sink_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ReadOnlySharedMemoryRegion_Data> region;
  mojo::internal::Pointer<::gpu::mojom::internal::Mailbox_Data> id;

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundle_DidAllocateSharedBitmap_Params_Data>;

  FrameSinkBundle_DidAllocateSharedBitmap_Params_Data();
  ~FrameSinkBundle_DidAllocateSharedBitmap_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundle_DidAllocateSharedBitmap_Params_Data) == 32,
              "Bad sizeof(FrameSinkBundle_DidAllocateSharedBitmap_Params_Data)");
class  FrameSinkBundle_SetThreadIds_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sink_id;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> thread_ids;

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundle_SetThreadIds_Params_Data>;

  FrameSinkBundle_SetThreadIds_Params_Data();
  ~FrameSinkBundle_SetThreadIds_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundle_SetThreadIds_Params_Data) == 24,
              "Bad sizeof(FrameSinkBundle_SetThreadIds_Params_Data)");
class  FrameSinkBundleClient_FlushNotifications_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BundledReturnedResources_Data>>> acks;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BeginFrameInfo_Data>>> begin_frames;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::BundledReturnedResources_Data>>> reclaimed_resources;

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundleClient_FlushNotifications_Params_Data>;

  FrameSinkBundleClient_FlushNotifications_Params_Data();
  ~FrameSinkBundleClient_FlushNotifications_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundleClient_FlushNotifications_Params_Data) == 32,
              "Bad sizeof(FrameSinkBundleClient_FlushNotifications_Params_Data)");
class  FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sink_id;
  uint8_t paused : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data>;

  FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data();
  ~FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data) == 16,
              "Bad sizeof(FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data)");
class  FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t sink_id;
  uint32_t sequence_id;

 private:
  friend class mojo::internal::MessageFragment<FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data>;

  FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data();
  ~FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data() = delete;
};
static_assert(sizeof(FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data) == 16,
              "Bad sizeof(FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data)");

}  // namespace internal


class FrameSinkBundle_InitializeCompositorFrameSinkType_ParamsDataView {
 public:
  FrameSinkBundle_InitializeCompositorFrameSinkType_ParamsDataView() = default;

  FrameSinkBundle_InitializeCompositorFrameSinkType_ParamsDataView(
      internal::FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t sink_id() const {
    return data_->sink_id;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::viz::mojom::CompositorFrameSinkType>(
        data_value, output);
  }
  ::viz::mojom::CompositorFrameSinkType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::viz::mojom::CompositorFrameSinkType>(data_->type));
  }
 private:
  internal::FrameSinkBundle_InitializeCompositorFrameSinkType_Params_Data* data_ = nullptr;
};



class FrameSinkBundle_SetNeedsBeginFrame_ParamsDataView {
 public:
  FrameSinkBundle_SetNeedsBeginFrame_ParamsDataView() = default;

  FrameSinkBundle_SetNeedsBeginFrame_ParamsDataView(
      internal::FrameSinkBundle_SetNeedsBeginFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t sink_id() const {
    return data_->sink_id;
  }
  bool needs_begin_frame() const {
    return data_->needs_begin_frame;
  }
 private:
  internal::FrameSinkBundle_SetNeedsBeginFrame_Params_Data* data_ = nullptr;
};



class FrameSinkBundle_Submit_ParamsDataView {
 public:
  FrameSinkBundle_Submit_ParamsDataView() = default;

  FrameSinkBundle_Submit_ParamsDataView(
      internal::FrameSinkBundle_Submit_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSubmissionsDataView(
      mojo::ArrayDataView<BundledFrameSubmissionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubmissions(UserType* output) {
    
    auto* pointer = data_->submissions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::BundledFrameSubmissionDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FrameSinkBundle_Submit_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameSinkBundle_DidAllocateSharedBitmap_ParamsDataView {
 public:
  FrameSinkBundle_DidAllocateSharedBitmap_ParamsDataView() = default;

  FrameSinkBundle_DidAllocateSharedBitmap_ParamsDataView(
      internal::FrameSinkBundle_DidAllocateSharedBitmap_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t sink_id() const {
    return data_->sink_id;
  }
  inline void GetRegionDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRegion(UserType* output) {
    
    auto* pointer = data_->region.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, message_);
  }
  inline void GetIdDataView(
      ::gpu::mojom::MailboxDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadId(UserType* output) {
    
    auto* pointer = data_->id.Get();
    return mojo::internal::Deserialize<::gpu::mojom::MailboxDataView>(
        pointer, output, message_);
  }
 private:
  internal::FrameSinkBundle_DidAllocateSharedBitmap_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameSinkBundle_SetThreadIds_ParamsDataView {
 public:
  FrameSinkBundle_SetThreadIds_ParamsDataView() = default;

  FrameSinkBundle_SetThreadIds_ParamsDataView(
      internal::FrameSinkBundle_SetThreadIds_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t sink_id() const {
    return data_->sink_id;
  }
  inline void GetThreadIdsDataView(
      mojo::ArrayDataView<int32_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadThreadIds(UserType* output) {
    
    auto* pointer = data_->thread_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<int32_t>>(
        pointer, output, message_);
  }
 private:
  internal::FrameSinkBundle_SetThreadIds_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameSinkBundleClient_FlushNotifications_ParamsDataView {
 public:
  FrameSinkBundleClient_FlushNotifications_ParamsDataView() = default;

  FrameSinkBundleClient_FlushNotifications_ParamsDataView(
      internal::FrameSinkBundleClient_FlushNotifications_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAcksDataView(
      mojo::ArrayDataView<BundledReturnedResourcesDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAcks(UserType* output) {
    
    auto* pointer = data_->acks.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::BundledReturnedResourcesDataView>>(
        pointer, output, message_);
  }
  inline void GetBeginFramesDataView(
      mojo::ArrayDataView<BeginFrameInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBeginFrames(UserType* output) {
    
    auto* pointer = data_->begin_frames.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::BeginFrameInfoDataView>>(
        pointer, output, message_);
  }
  inline void GetReclaimedResourcesDataView(
      mojo::ArrayDataView<BundledReturnedResourcesDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReclaimedResources(UserType* output) {
    
    auto* pointer = data_->reclaimed_resources.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::viz::mojom::BundledReturnedResourcesDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FrameSinkBundleClient_FlushNotifications_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameSinkBundleClient_OnBeginFramePausedChanged_ParamsDataView {
 public:
  FrameSinkBundleClient_OnBeginFramePausedChanged_ParamsDataView() = default;

  FrameSinkBundleClient_OnBeginFramePausedChanged_ParamsDataView(
      internal::FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t sink_id() const {
    return data_->sink_id;
  }
  bool paused() const {
    return data_->paused;
  }
 private:
  internal::FrameSinkBundleClient_OnBeginFramePausedChanged_Params_Data* data_ = nullptr;
};



class FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsDataView {
 public:
  FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsDataView() = default;

  FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_ParamsDataView(
      internal::FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t sink_id() const {
    return data_->sink_id;
  }
  uint32_t sequence_id() const {
    return data_->sequence_id;
  }
 private:
  internal::FrameSinkBundleClient_OnCompositorFrameTransitionDirectiveProcessed_Params_Data* data_ = nullptr;
};






inline void FrameSinkBundle_Submit_ParamsDataView::GetSubmissionsDataView(
    mojo::ArrayDataView<BundledFrameSubmissionDataView>* output) {
  auto pointer = data_->submissions.Get();
  *output = mojo::ArrayDataView<BundledFrameSubmissionDataView>(pointer, message_);
}


inline void FrameSinkBundle_DidAllocateSharedBitmap_ParamsDataView::GetRegionDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->region.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, message_);
}
inline void FrameSinkBundle_DidAllocateSharedBitmap_ParamsDataView::GetIdDataView(
    ::gpu::mojom::MailboxDataView* output) {
  auto pointer = data_->id.Get();
  *output = ::gpu::mojom::MailboxDataView(pointer, message_);
}


inline void FrameSinkBundle_SetThreadIds_ParamsDataView::GetThreadIdsDataView(
    mojo::ArrayDataView<int32_t>* output) {
  auto pointer = data_->thread_ids.Get();
  *output = mojo::ArrayDataView<int32_t>(pointer, message_);
}


inline void FrameSinkBundleClient_FlushNotifications_ParamsDataView::GetAcksDataView(
    mojo::ArrayDataView<BundledReturnedResourcesDataView>* output) {
  auto pointer = data_->acks.Get();
  *output = mojo::ArrayDataView<BundledReturnedResourcesDataView>(pointer, message_);
}
inline void FrameSinkBundleClient_FlushNotifications_ParamsDataView::GetBeginFramesDataView(
    mojo::ArrayDataView<BeginFrameInfoDataView>* output) {
  auto pointer = data_->begin_frames.Get();
  *output = mojo::ArrayDataView<BeginFrameInfoDataView>(pointer, message_);
}
inline void FrameSinkBundleClient_FlushNotifications_ParamsDataView::GetReclaimedResourcesDataView(
    mojo::ArrayDataView<BundledReturnedResourcesDataView>* output) {
  auto pointer = data_->reclaimed_resources.Get();
  *output = mojo::ArrayDataView<BundledReturnedResourcesDataView>(pointer, message_);
}





}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIZ_PUBLIC_MOJOM_COMPOSITING_FRAME_SINK_BUNDLE_MOJOM_PARAMS_DATA_H_