// services/viz/public/mojom/gpu.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  GpuFeatureInfo as gpu_mojom_GpuFeatureInfo,
  GpuFeatureInfoSpec as gpu_mojom_GpuFeatureInfoSpec
} from '../../../../gpu/ipc/common/gpu_feature_info.mojom.m.js';

import {
  GpuInfo as gpu_mojom_GpuInfo,
  GpuInfoSpec as gpu_mojom_GpuInfoSpec
} from '../../../../gpu/ipc/common/gpu_info.mojom.m.js';

import {
  SyncToken as gpu_mojom_SyncToken,
  SyncTokenSpec as gpu_mojom_SyncTokenSpec
} from '../../../../gpu/ipc/common/sync_token.mojom.m.js';

import {
  VideoEncodeAcceleratorProviderRemote as media_mojom_VideoEncodeAcceleratorProviderRemote,
  VideoEncodeAcceleratorProviderPendingReceiver as media_mojom_VideoEncodeAcceleratorProviderPendingReceiver
} from '../../../../media/mojo/mojom/video_encode_accelerator.mojom.m.js';

import {
  UnsafeSharedMemoryRegion as mojoBase_mojom_UnsafeSharedMemoryRegion,
  UnsafeSharedMemoryRegionSpec as mojoBase_mojom_UnsafeSharedMemoryRegionSpec
} from '../../../../mojo/public/mojom/base/shared_memory.mojom.m.js';

import {
  Size as gfx_mojom_Size,
  SizeSpec as gfx_mojom_SizeSpec
} from '../../../../ui/gfx/geometry/mojom/geometry.mojom.m.js';

import {
  BufferFormat as gfx_mojom_BufferFormat,
  BufferFormatSpec as gfx_mojom_BufferFormatSpec,
  BufferUsage as gfx_mojom_BufferUsage,
  BufferUsageSpec as gfx_mojom_BufferUsageSpec,
  GpuMemoryBufferHandle as gfx_mojom_GpuMemoryBufferHandle,
  GpuMemoryBufferHandleSpec as gfx_mojom_GpuMemoryBufferHandleSpec,
  GpuMemoryBufferId as gfx_mojom_GpuMemoryBufferId,
  GpuMemoryBufferIdSpec as gfx_mojom_GpuMemoryBufferIdSpec
} from '../../../../ui/gfx/mojom/buffer_types.mojom.m.js';




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class GpuMemoryBufferFactoryPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'viz.mojom.GpuMemoryBufferFactory', scope);
  }
}

/** @interface */
export class GpuMemoryBufferFactoryInterface {
  
  /**
   * @param { !gfx_mojom_GpuMemoryBufferId } id
   * @param { !gfx_mojom_Size } size
   * @param { !gfx_mojom_BufferFormat } format
   * @param { !gfx_mojom_BufferUsage } usage
   * @return {!Promise<{
        bufferHandle: !gfx_mojom_GpuMemoryBufferHandle,
   *  }>}
   */

  createGpuMemoryBuffer(id, size, format, usage) {}
  
  /**
   * @param { !gfx_mojom_GpuMemoryBufferId } id
   * @param { !gpu_mojom_SyncToken } syncToken
   */

  destroyGpuMemoryBuffer(id, syncToken) {}
  
  /**
   * @param { !gfx_mojom_GpuMemoryBufferHandle } bufferHandle
   * @param { !mojoBase_mojom_UnsafeSharedMemoryRegion } sharedMemory
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  copyGpuMemoryBuffer(bufferHandle, sharedMemory) {}
}

/**
 * @implements { GpuMemoryBufferFactoryInterface }
 */
export class GpuMemoryBufferFactoryRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!GpuMemoryBufferFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          GpuMemoryBufferFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!GpuMemoryBufferFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !gfx_mojom_GpuMemoryBufferId } id
   * @param { !gfx_mojom_Size } size
   * @param { !gfx_mojom_BufferFormat } format
   * @param { !gfx_mojom_BufferUsage } usage
   * @return {!Promise<{
        bufferHandle: !gfx_mojom_GpuMemoryBufferHandle,
   *  }>}
   */

  createGpuMemoryBuffer(
      id,
      size,
      format,
      usage) {
    return this.proxy.sendMessage(
        0,
        GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ParamsSpec.$,
        GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParamsSpec.$,
        [
          id,
          size,
          format,
          usage
        ]);
  }

  
  /**
   * @param { !gfx_mojom_GpuMemoryBufferId } id
   * @param { !gpu_mojom_SyncToken } syncToken
   */

  destroyGpuMemoryBuffer(
      id,
      syncToken) {
    this.proxy.sendMessage(
        1,
        GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_ParamsSpec.$,
        null,
        [
          id,
          syncToken
        ]);
  }

  
  /**
   * @param { !gfx_mojom_GpuMemoryBufferHandle } bufferHandle
   * @param { !mojoBase_mojom_UnsafeSharedMemoryRegion } sharedMemory
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  copyGpuMemoryBuffer(
      bufferHandle,
      sharedMemory) {
    return this.proxy.sendMessage(
        2,
        GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ParamsSpec.$,
        GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParamsSpec.$,
        [
          bufferHandle,
          sharedMemory
        ]);
  }
}

/**
 * An object which receives request messages for the GpuMemoryBufferFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class GpuMemoryBufferFactoryReceiver {
  /**
   * @param {!GpuMemoryBufferFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!GpuMemoryBufferFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        GpuMemoryBufferFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuMemoryBufferFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ParamsSpec.$,
        GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParamsSpec.$,
        impl.createGpuMemoryBuffer.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_ParamsSpec.$,
        null,
        impl.destroyGpuMemoryBuffer.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ParamsSpec.$,
        GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParamsSpec.$,
        impl.copyGpuMemoryBuffer.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class GpuMemoryBufferFactory {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "viz.mojom.GpuMemoryBufferFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!GpuMemoryBufferFactoryRemote}
   */
  static getRemote() {
    let remote = new GpuMemoryBufferFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the GpuMemoryBufferFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class GpuMemoryBufferFactoryCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      GpuMemoryBufferFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuMemoryBufferFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createGpuMemoryBuffer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ParamsSpec.$,
        GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParamsSpec.$,
        this.createGpuMemoryBuffer.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.destroyGpuMemoryBuffer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_ParamsSpec.$,
        null,
        this.destroyGpuMemoryBuffer.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.copyGpuMemoryBuffer =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ParamsSpec.$,
        GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParamsSpec.$,
        this.copyGpuMemoryBuffer.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class GpuPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'viz.mojom.Gpu', scope);
  }
}

/** @interface */
export class GpuInterface {
  
  /**
   * @param { !GpuMemoryBufferFactoryPendingReceiver } receiver
   */

  createGpuMemoryBufferFactory(receiver) {}
  
  /**
   * @return {!Promise<{
        clientId: !number,
        channelHandle: ?MojoHandle,
        gpuInfo: !gpu_mojom_GpuInfo,
        gpuFeatureInfo: !gpu_mojom_GpuFeatureInfo,
   *  }>}
   */

  establishGpuChannel() {}
  
  /**
   * @param { !media_mojom_VideoEncodeAcceleratorProviderPendingReceiver } veaProvider
   */

  createVideoEncodeAcceleratorProvider(veaProvider) {}
}

/**
 * @implements { GpuInterface }
 */
export class GpuRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!GpuPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          GpuPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!GpuPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !GpuMemoryBufferFactoryPendingReceiver } receiver
   */

  createGpuMemoryBufferFactory(
      receiver) {
    this.proxy.sendMessage(
        0,
        Gpu_CreateGpuMemoryBufferFactory_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @return {!Promise<{
        clientId: !number,
        channelHandle: ?MojoHandle,
        gpuInfo: !gpu_mojom_GpuInfo,
        gpuFeatureInfo: !gpu_mojom_GpuFeatureInfo,
   *  }>}
   */

  establishGpuChannel() {
    return this.proxy.sendMessage(
        1,
        Gpu_EstablishGpuChannel_ParamsSpec.$,
        Gpu_EstablishGpuChannel_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !media_mojom_VideoEncodeAcceleratorProviderPendingReceiver } veaProvider
   */

  createVideoEncodeAcceleratorProvider(
      veaProvider) {
    this.proxy.sendMessage(
        2,
        Gpu_CreateVideoEncodeAcceleratorProvider_ParamsSpec.$,
        null,
        [
          veaProvider
        ]);
  }
}

/**
 * An object which receives request messages for the Gpu
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class GpuReceiver {
  /**
   * @param {!GpuInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!GpuRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        GpuRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        Gpu_CreateGpuMemoryBufferFactory_ParamsSpec.$,
        null,
        impl.createGpuMemoryBufferFactory.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        Gpu_EstablishGpuChannel_ParamsSpec.$,
        Gpu_EstablishGpuChannel_ResponseParamsSpec.$,
        impl.establishGpuChannel.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        Gpu_CreateVideoEncodeAcceleratorProvider_ParamsSpec.$,
        null,
        impl.createVideoEncodeAcceleratorProvider.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class Gpu {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "viz.mojom.Gpu";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!GpuRemote}
   */
  static getRemote() {
    let remote = new GpuRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the Gpu
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class GpuCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      GpuRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!GpuRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createGpuMemoryBufferFactory =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        Gpu_CreateGpuMemoryBufferFactory_ParamsSpec.$,
        null,
        this.createGpuMemoryBufferFactory.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.establishGpuChannel =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        Gpu_EstablishGpuChannel_ParamsSpec.$,
        Gpu_EstablishGpuChannel_ResponseParamsSpec.$,
        this.establishGpuChannel.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createVideoEncodeAcceleratorProvider =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        Gpu_CreateVideoEncodeAcceleratorProvider_ParamsSpec.$,
        null,
        this.createVideoEncodeAcceleratorProvider.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Gpu_CreateGpuMemoryBufferFactory_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Gpu_EstablishGpuChannel_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Gpu_EstablishGpuChannel_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const Gpu_CreateVideoEncodeAcceleratorProvider_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ParamsSpec.$,
    'GpuMemoryBufferFactory_CreateGpuMemoryBuffer_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        gfx_mojom_GpuMemoryBufferIdSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'size', 8,
        0,
        gfx_mojom_SizeSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'format', 16,
        0,
        gfx_mojom_BufferFormatSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'usage', 20,
        0,
        gfx_mojom_BufferUsageSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class GpuMemoryBufferFactory_CreateGpuMemoryBuffer_Params {
  constructor() {
    /** @type { !gfx_mojom_GpuMemoryBufferId } */
    this.id;
    /** @type { !gfx_mojom_Size } */
    this.size;
    /** @type { !gfx_mojom_BufferFormat } */
    this.format;
    /** @type { !gfx_mojom_BufferUsage } */
    this.usage;
  }
}



mojo.internal.Struct(
    GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParamsSpec.$,
    'GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParams',
    [
      mojo.internal.StructField(
        'bufferHandle', 0,
        0,
        gfx_mojom_GpuMemoryBufferHandleSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuMemoryBufferFactory_CreateGpuMemoryBuffer_ResponseParams {
  constructor() {
    /** @type { !gfx_mojom_GpuMemoryBufferHandle } */
    this.bufferHandle;
  }
}



mojo.internal.Struct(
    GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_ParamsSpec.$,
    'GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_Params',
    [
      mojo.internal.StructField(
        'id', 0,
        0,
        gfx_mojom_GpuMemoryBufferIdSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'syncToken', 8,
        0,
        gpu_mojom_SyncTokenSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class GpuMemoryBufferFactory_DestroyGpuMemoryBuffer_Params {
  constructor() {
    /** @type { !gfx_mojom_GpuMemoryBufferId } */
    this.id;
    /** @type { !gpu_mojom_SyncToken } */
    this.syncToken;
  }
}



mojo.internal.Struct(
    GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ParamsSpec.$,
    'GpuMemoryBufferFactory_CopyGpuMemoryBuffer_Params',
    [
      mojo.internal.StructField(
        'bufferHandle', 0,
        0,
        gfx_mojom_GpuMemoryBufferHandleSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'sharedMemory', 8,
        0,
        mojoBase_mojom_UnsafeSharedMemoryRegionSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class GpuMemoryBufferFactory_CopyGpuMemoryBuffer_Params {
  constructor() {
    /** @type { !gfx_mojom_GpuMemoryBufferHandle } */
    this.bufferHandle;
    /** @type { !mojoBase_mojom_UnsafeSharedMemoryRegion } */
    this.sharedMemory;
  }
}



mojo.internal.Struct(
    GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParamsSpec.$,
    'GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class GpuMemoryBufferFactory_CopyGpuMemoryBuffer_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
}



mojo.internal.Struct(
    Gpu_CreateGpuMemoryBufferFactory_ParamsSpec.$,
    'Gpu_CreateGpuMemoryBufferFactory_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(GpuMemoryBufferFactoryPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Gpu_CreateGpuMemoryBufferFactory_Params {
  constructor() {
    /** @type { !GpuMemoryBufferFactoryPendingReceiver } */
    this.receiver;
  }
}



mojo.internal.Struct(
    Gpu_EstablishGpuChannel_ParamsSpec.$,
    'Gpu_EstablishGpuChannel_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class Gpu_EstablishGpuChannel_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    Gpu_EstablishGpuChannel_ResponseParamsSpec.$,
    'Gpu_EstablishGpuChannel_ResponseParams',
    [
      mojo.internal.StructField(
        'clientId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'channelHandle', 4,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'gpuInfo', 8,
        0,
        gpu_mojom_GpuInfoSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'gpuFeatureInfo', 16,
        0,
        gpu_mojom_GpuFeatureInfoSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class Gpu_EstablishGpuChannel_ResponseParams {
  constructor() {
    /** @type { !number } */
    this.clientId;
    /** @type { (MojoHandle|undefined) } */
    this.channelHandle;
    /** @type { !gpu_mojom_GpuInfo } */
    this.gpuInfo;
    /** @type { !gpu_mojom_GpuFeatureInfo } */
    this.gpuFeatureInfo;
  }
}



mojo.internal.Struct(
    Gpu_CreateVideoEncodeAcceleratorProvider_ParamsSpec.$,
    'Gpu_CreateVideoEncodeAcceleratorProvider_Params',
    [
      mojo.internal.StructField(
        'veaProvider', 0,
        0,
        mojo.internal.InterfaceRequest(media_mojom_VideoEncodeAcceleratorProviderPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class Gpu_CreateVideoEncodeAcceleratorProvider_Params {
  constructor() {
    /** @type { !media_mojom_VideoEncodeAcceleratorProviderPendingReceiver } */
    this.veaProvider;
  }
}

