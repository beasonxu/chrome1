// services/viz/privileged/mojom/gl/gpu_service.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/viz/privileged/mojom/gl/gpu_service.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/privileged/mojom/gl/gpu_service.mojom-params-data.h"
#include "services/viz/privileged/mojom/gl/gpu_service.mojom-shared-message-ids.h"

#include "services/viz/privileged/mojom/gl/gpu_service.mojom-import-headers.h"
#include "services/viz/privileged/mojom/gl/gpu_service.mojom-test-utils.h"


#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_SERVICE_MOJOM_JUMBO_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_GL_GPU_SERVICE_MOJOM_JUMBO_H_
#endif



namespace viz {
namespace mojom {
const char GpuService::Name_[] = "viz.mojom.GpuService";

GpuService::IPCStableHashFunction GpuService::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kGpuService_EstablishGpuChannel_Name: {
      return &GpuService::EstablishGpuChannel_Sym::IPCStableHash;
    }
    case internal::kGpuService_SetChannelClientPid_Name: {
      return &GpuService::SetChannelClientPid_Sym::IPCStableHash;
    }
    case internal::kGpuService_CloseChannel_Name: {
      return &GpuService::CloseChannel_Sym::IPCStableHash;
    }
    case internal::kGpuService_CreateVideoEncodeAcceleratorProvider_Name: {
      return &GpuService::CreateVideoEncodeAcceleratorProvider_Sym::IPCStableHash;
    }
    case internal::kGpuService_CreateGpuMemoryBuffer_Name: {
      return &GpuService::CreateGpuMemoryBuffer_Sym::IPCStableHash;
    }
    case internal::kGpuService_DestroyGpuMemoryBuffer_Name: {
      return &GpuService::DestroyGpuMemoryBuffer_Sym::IPCStableHash;
    }
    case internal::kGpuService_CopyGpuMemoryBuffer_Name: {
      return &GpuService::CopyGpuMemoryBuffer_Sym::IPCStableHash;
    }
    case internal::kGpuService_GetVideoMemoryUsageStats_Name: {
      return &GpuService::GetVideoMemoryUsageStats_Sym::IPCStableHash;
    }
    case internal::kGpuService_StartPeakMemoryMonitor_Name: {
      return &GpuService::StartPeakMemoryMonitor_Sym::IPCStableHash;
    }
    case internal::kGpuService_GetPeakMemoryUsage_Name: {
      return &GpuService::GetPeakMemoryUsage_Sym::IPCStableHash;
    }
    case internal::kGpuService_LoadedShader_Name: {
      return &GpuService::LoadedShader_Sym::IPCStableHash;
    }
    case internal::kGpuService_WakeUpGpu_Name: {
      return &GpuService::WakeUpGpu_Sym::IPCStableHash;
    }
    case internal::kGpuService_GpuSwitched_Name: {
      return &GpuService::GpuSwitched_Sym::IPCStableHash;
    }
    case internal::kGpuService_DisplayAdded_Name: {
      return &GpuService::DisplayAdded_Sym::IPCStableHash;
    }
    case internal::kGpuService_DisplayRemoved_Name: {
      return &GpuService::DisplayRemoved_Sym::IPCStableHash;
    }
    case internal::kGpuService_DisplayMetricsChanged_Name: {
      return &GpuService::DisplayMetricsChanged_Sym::IPCStableHash;
    }
    case internal::kGpuService_DestroyAllChannels_Name: {
      return &GpuService::DestroyAllChannels_Sym::IPCStableHash;
    }
    case internal::kGpuService_OnBackgroundCleanup_Name: {
      return &GpuService::OnBackgroundCleanup_Sym::IPCStableHash;
    }
    case internal::kGpuService_OnBackgrounded_Name: {
      return &GpuService::OnBackgrounded_Sym::IPCStableHash;
    }
    case internal::kGpuService_OnForegrounded_Name: {
      return &GpuService::OnForegrounded_Sym::IPCStableHash;
    }
    case internal::kGpuService_GetDawnInfo_Name: {
      return &GpuService::GetDawnInfo_Sym::IPCStableHash;
    }
    case internal::kGpuService_Crash_Name: {
      return &GpuService::Crash_Sym::IPCStableHash;
    }
    case internal::kGpuService_Hang_Name: {
      return &GpuService::Hang_Sym::IPCStableHash;
    }
    case internal::kGpuService_ThrowJavaException_Name: {
      return &GpuService::ThrowJavaException_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* GpuService::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kGpuService_EstablishGpuChannel_Name:
            return "Receive viz::mojom::GpuService::EstablishGpuChannel";
      case internal::kGpuService_SetChannelClientPid_Name:
            return "Receive viz::mojom::GpuService::SetChannelClientPid";
      case internal::kGpuService_CloseChannel_Name:
            return "Receive viz::mojom::GpuService::CloseChannel";
      case internal::kGpuService_CreateVideoEncodeAcceleratorProvider_Name:
            return "Receive viz::mojom::GpuService::CreateVideoEncodeAcceleratorProvider";
      case internal::kGpuService_CreateGpuMemoryBuffer_Name:
            return "Receive viz::mojom::GpuService::CreateGpuMemoryBuffer";
      case internal::kGpuService_DestroyGpuMemoryBuffer_Name:
            return "Receive viz::mojom::GpuService::DestroyGpuMemoryBuffer";
      case internal::kGpuService_CopyGpuMemoryBuffer_Name:
            return "Receive viz::mojom::GpuService::CopyGpuMemoryBuffer";
      case internal::kGpuService_GetVideoMemoryUsageStats_Name:
            return "Receive viz::mojom::GpuService::GetVideoMemoryUsageStats";
      case internal::kGpuService_StartPeakMemoryMonitor_Name:
            return "Receive viz::mojom::GpuService::StartPeakMemoryMonitor";
      case internal::kGpuService_GetPeakMemoryUsage_Name:
            return "Receive viz::mojom::GpuService::GetPeakMemoryUsage";
      case internal::kGpuService_LoadedShader_Name:
            return "Receive viz::mojom::GpuService::LoadedShader";
      case internal::kGpuService_WakeUpGpu_Name:
            return "Receive viz::mojom::GpuService::WakeUpGpu";
      case internal::kGpuService_GpuSwitched_Name:
            return "Receive viz::mojom::GpuService::GpuSwitched";
      case internal::kGpuService_DisplayAdded_Name:
            return "Receive viz::mojom::GpuService::DisplayAdded";
      case internal::kGpuService_DisplayRemoved_Name:
            return "Receive viz::mojom::GpuService::DisplayRemoved";
      case internal::kGpuService_DisplayMetricsChanged_Name:
            return "Receive viz::mojom::GpuService::DisplayMetricsChanged";
      case internal::kGpuService_DestroyAllChannels_Name:
            return "Receive viz::mojom::GpuService::DestroyAllChannels";
      case internal::kGpuService_OnBackgroundCleanup_Name:
            return "Receive viz::mojom::GpuService::OnBackgroundCleanup";
      case internal::kGpuService_OnBackgrounded_Name:
            return "Receive viz::mojom::GpuService::OnBackgrounded";
      case internal::kGpuService_OnForegrounded_Name:
            return "Receive viz::mojom::GpuService::OnForegrounded";
      case internal::kGpuService_GetDawnInfo_Name:
            return "Receive viz::mojom::GpuService::GetDawnInfo";
      case internal::kGpuService_Crash_Name:
            return "Receive viz::mojom::GpuService::Crash";
      case internal::kGpuService_Hang_Name:
            return "Receive viz::mojom::GpuService::Hang";
      case internal::kGpuService_ThrowJavaException_Name:
            return "Receive viz::mojom::GpuService::ThrowJavaException";
    }
  } else {
    switch (message.name()) {
      case internal::kGpuService_EstablishGpuChannel_Name:
            return "Receive reply viz::mojom::GpuService::EstablishGpuChannel";
      case internal::kGpuService_SetChannelClientPid_Name:
            return "Receive reply viz::mojom::GpuService::SetChannelClientPid";
      case internal::kGpuService_CloseChannel_Name:
            return "Receive reply viz::mojom::GpuService::CloseChannel";
      case internal::kGpuService_CreateVideoEncodeAcceleratorProvider_Name:
            return "Receive reply viz::mojom::GpuService::CreateVideoEncodeAcceleratorProvider";
      case internal::kGpuService_CreateGpuMemoryBuffer_Name:
            return "Receive reply viz::mojom::GpuService::CreateGpuMemoryBuffer";
      case internal::kGpuService_DestroyGpuMemoryBuffer_Name:
            return "Receive reply viz::mojom::GpuService::DestroyGpuMemoryBuffer";
      case internal::kGpuService_CopyGpuMemoryBuffer_Name:
            return "Receive reply viz::mojom::GpuService::CopyGpuMemoryBuffer";
      case internal::kGpuService_GetVideoMemoryUsageStats_Name:
            return "Receive reply viz::mojom::GpuService::GetVideoMemoryUsageStats";
      case internal::kGpuService_StartPeakMemoryMonitor_Name:
            return "Receive reply viz::mojom::GpuService::StartPeakMemoryMonitor";
      case internal::kGpuService_GetPeakMemoryUsage_Name:
            return "Receive reply viz::mojom::GpuService::GetPeakMemoryUsage";
      case internal::kGpuService_LoadedShader_Name:
            return "Receive reply viz::mojom::GpuService::LoadedShader";
      case internal::kGpuService_WakeUpGpu_Name:
            return "Receive reply viz::mojom::GpuService::WakeUpGpu";
      case internal::kGpuService_GpuSwitched_Name:
            return "Receive reply viz::mojom::GpuService::GpuSwitched";
      case internal::kGpuService_DisplayAdded_Name:
            return "Receive reply viz::mojom::GpuService::DisplayAdded";
      case internal::kGpuService_DisplayRemoved_Name:
            return "Receive reply viz::mojom::GpuService::DisplayRemoved";
      case internal::kGpuService_DisplayMetricsChanged_Name:
            return "Receive reply viz::mojom::GpuService::DisplayMetricsChanged";
      case internal::kGpuService_DestroyAllChannels_Name:
            return "Receive reply viz::mojom::GpuService::DestroyAllChannels";
      case internal::kGpuService_OnBackgroundCleanup_Name:
            return "Receive reply viz::mojom::GpuService::OnBackgroundCleanup";
      case internal::kGpuService_OnBackgrounded_Name:
            return "Receive reply viz::mojom::GpuService::OnBackgrounded";
      case internal::kGpuService_OnForegrounded_Name:
            return "Receive reply viz::mojom::GpuService::OnForegrounded";
      case internal::kGpuService_GetDawnInfo_Name:
            return "Receive reply viz::mojom::GpuService::GetDawnInfo";
      case internal::kGpuService_Crash_Name:
            return "Receive reply viz::mojom::GpuService::Crash";
      case internal::kGpuService_Hang_Name:
            return "Receive reply viz::mojom::GpuService::Hang";
      case internal::kGpuService_ThrowJavaException_Name:
            return "Receive reply viz::mojom::GpuService::ThrowJavaException";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t GpuService::EstablishGpuChannel_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::EstablishGpuChannel");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::SetChannelClientPid_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::SetChannelClientPid");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::CloseChannel_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::CloseChannel");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::CreateVideoEncodeAcceleratorProvider_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::CreateVideoEncodeAcceleratorProvider");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::CreateGpuMemoryBuffer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::CreateGpuMemoryBuffer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::DestroyGpuMemoryBuffer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::DestroyGpuMemoryBuffer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::CopyGpuMemoryBuffer_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::CopyGpuMemoryBuffer");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::GetVideoMemoryUsageStats_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::GetVideoMemoryUsageStats");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::StartPeakMemoryMonitor_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::StartPeakMemoryMonitor");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::GetPeakMemoryUsage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::GetPeakMemoryUsage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::LoadedShader_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::LoadedShader");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::WakeUpGpu_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::WakeUpGpu");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::GpuSwitched_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::GpuSwitched");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::DisplayAdded_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::DisplayAdded");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::DisplayRemoved_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::DisplayRemoved");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::DisplayMetricsChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::DisplayMetricsChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::DestroyAllChannels_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::DestroyAllChannels");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::OnBackgroundCleanup_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::OnBackgroundCleanup");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::OnBackgrounded_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::OnBackgrounded");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::OnForegrounded_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::OnForegrounded");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::GetDawnInfo_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::GetDawnInfo");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::Crash_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::Crash");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::Hang_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::Hang");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t GpuService::ThrowJavaException_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)viz::mojom::GpuService::ThrowJavaException");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)
bool GpuService::EstablishGpuChannel(int32_t client_id, uint64_t client_tracing_id, bool is_gpu_host, bool cache_shaders_on_disk, ::mojo::ScopedMessagePipeHandle* out_channel_handle, ::gpu::GPUInfo* out_gpu_info, ::gpu::GpuFeatureInfo* out_gpu_feature_info) {
  NOTREACHED();
  return false;
}
bool GpuService::CreateGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, int32_t client_id, ::gpu::SurfaceHandle surface_handle, ::gfx::GpuMemoryBufferHandle* out_buffer_handle) {
  NOTREACHED();
  return false;
}
class GpuService_EstablishGpuChannel_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  GpuService_EstablishGpuChannel_HandleSyncResponse(
      bool* result, ::mojo::ScopedMessagePipeHandle* out_channel_handle, ::gpu::GPUInfo* out_gpu_info, ::gpu::GpuFeatureInfo* out_gpu_feature_info)
      : result_(result), out_channel_handle_(out_channel_handle), out_gpu_info_(out_gpu_info), out_gpu_feature_info_(out_gpu_feature_info) {
    DCHECK(!*result_);
  }

  GpuService_EstablishGpuChannel_HandleSyncResponse(const GpuService_EstablishGpuChannel_HandleSyncResponse&) = delete;
  GpuService_EstablishGpuChannel_HandleSyncResponse& operator=(const GpuService_EstablishGpuChannel_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  ::mojo::ScopedMessagePipeHandle* out_channel_handle_;
  ::gpu::GPUInfo* out_gpu_info_;
  ::gpu::GpuFeatureInfo* out_gpu_feature_info_;};

class GpuService_EstablishGpuChannel_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GpuService_EstablishGpuChannel_ForwardToCallback(
      GpuService::EstablishGpuChannelCallback callback
      ) : callback_(std::move(callback)) {
  }

  GpuService_EstablishGpuChannel_ForwardToCallback(const GpuService_EstablishGpuChannel_ForwardToCallback&) = delete;
  GpuService_EstablishGpuChannel_ForwardToCallback& operator=(const GpuService_EstablishGpuChannel_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  GpuService::EstablishGpuChannelCallback callback_;
};
class GpuService_CreateGpuMemoryBuffer_HandleSyncResponse
    : public mojo::MessageReceiver {
 public:
  GpuService_CreateGpuMemoryBuffer_HandleSyncResponse(
      bool* result, ::gfx::GpuMemoryBufferHandle* out_buffer_handle)
      : result_(result), out_buffer_handle_(out_buffer_handle) {
    DCHECK(!*result_);
  }

  GpuService_CreateGpuMemoryBuffer_HandleSyncResponse(const GpuService_CreateGpuMemoryBuffer_HandleSyncResponse&) = delete;
  GpuService_CreateGpuMemoryBuffer_HandleSyncResponse& operator=(const GpuService_CreateGpuMemoryBuffer_HandleSyncResponse&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  bool* result_;
  ::gfx::GpuMemoryBufferHandle* out_buffer_handle_;};

class GpuService_CreateGpuMemoryBuffer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GpuService_CreateGpuMemoryBuffer_ForwardToCallback(
      GpuService::CreateGpuMemoryBufferCallback callback
      ) : callback_(std::move(callback)) {
  }

  GpuService_CreateGpuMemoryBuffer_ForwardToCallback(const GpuService_CreateGpuMemoryBuffer_ForwardToCallback&) = delete;
  GpuService_CreateGpuMemoryBuffer_ForwardToCallback& operator=(const GpuService_CreateGpuMemoryBuffer_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  GpuService::CreateGpuMemoryBufferCallback callback_;
};

class GpuService_CopyGpuMemoryBuffer_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GpuService_CopyGpuMemoryBuffer_ForwardToCallback(
      GpuService::CopyGpuMemoryBufferCallback callback
      ) : callback_(std::move(callback)) {
  }

  GpuService_CopyGpuMemoryBuffer_ForwardToCallback(const GpuService_CopyGpuMemoryBuffer_ForwardToCallback&) = delete;
  GpuService_CopyGpuMemoryBuffer_ForwardToCallback& operator=(const GpuService_CopyGpuMemoryBuffer_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  GpuService::CopyGpuMemoryBufferCallback callback_;
};

class GpuService_GetVideoMemoryUsageStats_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GpuService_GetVideoMemoryUsageStats_ForwardToCallback(
      GpuService::GetVideoMemoryUsageStatsCallback callback
      ) : callback_(std::move(callback)) {
  }

  GpuService_GetVideoMemoryUsageStats_ForwardToCallback(const GpuService_GetVideoMemoryUsageStats_ForwardToCallback&) = delete;
  GpuService_GetVideoMemoryUsageStats_ForwardToCallback& operator=(const GpuService_GetVideoMemoryUsageStats_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  GpuService::GetVideoMemoryUsageStatsCallback callback_;
};

class GpuService_GetPeakMemoryUsage_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GpuService_GetPeakMemoryUsage_ForwardToCallback(
      GpuService::GetPeakMemoryUsageCallback callback
      ) : callback_(std::move(callback)) {
  }

  GpuService_GetPeakMemoryUsage_ForwardToCallback(const GpuService_GetPeakMemoryUsage_ForwardToCallback&) = delete;
  GpuService_GetPeakMemoryUsage_ForwardToCallback& operator=(const GpuService_GetPeakMemoryUsage_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  GpuService::GetPeakMemoryUsageCallback callback_;
};

class GpuService_GetDawnInfo_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  GpuService_GetDawnInfo_ForwardToCallback(
      GpuService::GetDawnInfoCallback callback
      ) : callback_(std::move(callback)) {
  }

  GpuService_GetDawnInfo_ForwardToCallback(const GpuService_GetDawnInfo_ForwardToCallback&) = delete;
  GpuService_GetDawnInfo_ForwardToCallback& operator=(const GpuService_GetDawnInfo_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  GpuService::GetDawnInfoCallback callback_;
};

GpuServiceProxy::GpuServiceProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}
bool GpuServiceProxy::EstablishGpuChannel(
    int32_t param_client_id, uint64_t param_client_tracing_id, bool param_is_gpu_host, bool param_cache_shaders_on_disk, ::mojo::ScopedMessagePipeHandle* out_param_channel_handle, ::gpu::GPUInfo* out_param_gpu_info, ::gpu::GpuFeatureInfo* out_param_gpu_feature_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call viz::mojom::GpuService::EstablishGpuChannel (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), param_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_tracing_id"), param_client_tracing_id,
                        "<value of type uint64_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_gpu_host"), param_is_gpu_host,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_shaders_on_disk"), param_cache_shaders_on_disk,
                        "<value of type bool>");
   });
#else
  TRACE_EVENT0("mojom", "GpuService::EstablishGpuChannel");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_EstablishGpuChannel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_EstablishGpuChannel_Params_Data> params(
          message);
  params.Allocate();
  params->client_id = param_client_id;
  params->client_tracing_id = param_client_tracing_id;
  params->is_gpu_host = param_is_gpu_host;
  params->cache_shaders_on_disk = param_cache_shaders_on_disk;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("EstablishGpuChannel");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_EstablishGpuChannel_HandleSyncResponse(
          &result, out_param_channel_handle, out_param_gpu_info, out_param_gpu_feature_info));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "GpuService::EstablishGpuChannel", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("channel_handle"), out_param_channel_handle,
                        "<value of type ::mojo::ScopedMessagePipeHandle>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("gpu_info"), out_param_gpu_info,
                        "<value of type const ::gpu::GPUInfo&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("gpu_feature_info"), out_param_gpu_feature_info,
                        "<value of type const ::gpu::GpuFeatureInfo&>");
   });
#endif
  return result;
}

void GpuServiceProxy::EstablishGpuChannel(
    int32_t in_client_id, uint64_t in_client_tracing_id, bool in_is_gpu_host, bool in_cache_shaders_on_disk, EstablishGpuChannelCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::EstablishGpuChannel", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), in_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_tracing_id"), in_client_tracing_id,
                        "<value of type uint64_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("is_gpu_host"), in_is_gpu_host,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("cache_shaders_on_disk"), in_cache_shaders_on_disk,
                        "<value of type bool>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_EstablishGpuChannel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_EstablishGpuChannel_Params_Data> params(
          message);
  params.Allocate();
  params->client_id = in_client_id;
  params->client_tracing_id = in_client_tracing_id;
  params->is_gpu_host = in_is_gpu_host;
  params->cache_shaders_on_disk = in_cache_shaders_on_disk;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("EstablishGpuChannel");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_EstablishGpuChannel_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void GpuServiceProxy::SetChannelClientPid(
    int32_t in_client_id, ::base::ProcessId in_client_pid) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::SetChannelClientPid", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), in_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_pid"), in_client_pid,
                        "<value of type ::base::ProcessId>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_SetChannelClientPid_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_SetChannelClientPid_Params_Data> params(
          message);
  params.Allocate();
  params->client_id = in_client_id;
  mojo::internal::MessageFragment<
      typename decltype(params->client_pid)::BaseType> client_pid_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ProcessIdDataView>(
      in_client_pid, client_pid_fragment);
  params->client_pid.Set(
      client_pid_fragment.is_null() ? nullptr : client_pid_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->client_pid.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null client_pid in GpuService.SetChannelClientPid request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("SetChannelClientPid");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::CloseChannel(
    int32_t in_client_id) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::CloseChannel", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), in_client_id,
                        "<value of type int32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CloseChannel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CloseChannel_Params_Data> params(
          message);
  params.Allocate();
  params->client_id = in_client_id;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CloseChannel");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::CreateVideoEncodeAcceleratorProvider(
    ::mojo::PendingReceiver<::media::mojom::VideoEncodeAcceleratorProvider> in_vea_provider) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::CreateVideoEncodeAcceleratorProvider", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("vea_provider"), in_vea_provider,
                        "<value of type ::mojo::PendingReceiver<::media::mojom::VideoEncodeAcceleratorProvider>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CreateVideoEncodeAcceleratorProvider_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CreateVideoEncodeAcceleratorProvider_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::media::mojom::VideoEncodeAcceleratorProviderInterfaceBase>>(
      in_vea_provider, &params->vea_provider, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->vea_provider),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid vea_provider in GpuService.CreateVideoEncodeAcceleratorProvider request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CreateVideoEncodeAcceleratorProvider");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
bool GpuServiceProxy::CreateGpuMemoryBuffer(
    ::gfx::GpuMemoryBufferId param_id, const ::gfx::Size& param_size, ::gfx::BufferFormat param_format, ::gfx::BufferUsage param_usage, int32_t param_client_id, ::gpu::SurfaceHandle param_surface_handle, ::gfx::GpuMemoryBufferHandle* out_param_buffer_handle) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_BEGIN1(
    "mojom", "Call viz::mojom::GpuService::CreateGpuMemoryBuffer (sync)", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), param_id,
                        "<value of type ::gfx::GpuMemoryBufferId>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("size"), param_size,
                        "<value of type const ::gfx::Size&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("format"), param_format,
                        "<value of type ::gfx::BufferFormat>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("usage"), param_usage,
                        "<value of type ::gfx::BufferUsage>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), param_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("surface_handle"), param_surface_handle,
                        "<value of type ::gpu::SurfaceHandle>");
   });
#else
  TRACE_EVENT0("mojom", "GpuService::CreateGpuMemoryBuffer");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = true;
  const bool kAllowInterrupt =
      false;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CreateGpuMemoryBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CreateGpuMemoryBuffer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::GpuMemoryBufferIdDataView>(
      param_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in GpuService.CreateGpuMemoryBuffer request");
  mojo::internal::MessageFragment<
      typename decltype(params->size)::BaseType> size_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
      param_size, size_fragment);
  params->size.Set(
      size_fragment.is_null() ? nullptr : size_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->size.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null size in GpuService.CreateGpuMemoryBuffer request");
  mojo::internal::Serialize<::gfx::mojom::BufferFormat>(
      param_format, &params->format);
  mojo::internal::Serialize<::gfx::mojom::BufferUsage>(
      param_usage, &params->usage);
  params->client_id = param_client_id;
  mojo::internal::MessageFragment<
      typename decltype(params->surface_handle)::BaseType> surface_handle_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::SurfaceHandleDataView>(
      param_surface_handle, surface_handle_fragment);
  params->surface_handle.Set(
      surface_handle_fragment.is_null() ? nullptr : surface_handle_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->surface_handle.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null surface_handle in GpuService.CreateGpuMemoryBuffer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CreateGpuMemoryBuffer");
#endif

  bool result = false;
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_CreateGpuMemoryBuffer_HandleSyncResponse(
          &result, out_param_buffer_handle));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT_END1(
    "mojom", "GpuService::CreateGpuMemoryBuffer", "sync_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("buffer_handle"), out_param_buffer_handle,
                        "<value of type ::gfx::GpuMemoryBufferHandle>");
   });
#endif
  return result;
}

void GpuServiceProxy::CreateGpuMemoryBuffer(
    ::gfx::GpuMemoryBufferId in_id, const ::gfx::Size& in_size, ::gfx::BufferFormat in_format, ::gfx::BufferUsage in_usage, int32_t in_client_id, ::gpu::SurfaceHandle in_surface_handle, CreateGpuMemoryBufferCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::CreateGpuMemoryBuffer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type ::gfx::GpuMemoryBufferId>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("size"), in_size,
                        "<value of type const ::gfx::Size&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("format"), in_format,
                        "<value of type ::gfx::BufferFormat>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("usage"), in_usage,
                        "<value of type ::gfx::BufferUsage>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), in_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("surface_handle"), in_surface_handle,
                        "<value of type ::gpu::SurfaceHandle>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CreateGpuMemoryBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CreateGpuMemoryBuffer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::GpuMemoryBufferIdDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in GpuService.CreateGpuMemoryBuffer request");
  mojo::internal::MessageFragment<
      typename decltype(params->size)::BaseType> size_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
      in_size, size_fragment);
  params->size.Set(
      size_fragment.is_null() ? nullptr : size_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->size.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null size in GpuService.CreateGpuMemoryBuffer request");
  mojo::internal::Serialize<::gfx::mojom::BufferFormat>(
      in_format, &params->format);
  mojo::internal::Serialize<::gfx::mojom::BufferUsage>(
      in_usage, &params->usage);
  params->client_id = in_client_id;
  mojo::internal::MessageFragment<
      typename decltype(params->surface_handle)::BaseType> surface_handle_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::SurfaceHandleDataView>(
      in_surface_handle, surface_handle_fragment);
  params->surface_handle.Set(
      surface_handle_fragment.is_null() ? nullptr : surface_handle_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->surface_handle.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null surface_handle in GpuService.CreateGpuMemoryBuffer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CreateGpuMemoryBuffer");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_CreateGpuMemoryBuffer_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void GpuServiceProxy::DestroyGpuMemoryBuffer(
    ::gfx::GpuMemoryBufferId in_id, int32_t in_client_id, const ::gpu::SyncToken& in_sync_token) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::DestroyGpuMemoryBuffer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("id"), in_id,
                        "<value of type ::gfx::GpuMemoryBufferId>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), in_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sync_token"), in_sync_token,
                        "<value of type const ::gpu::SyncToken&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_DestroyGpuMemoryBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_DestroyGpuMemoryBuffer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->id)::BaseType> id_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::GpuMemoryBufferIdDataView>(
      in_id, id_fragment);
  params->id.Set(
      id_fragment.is_null() ? nullptr : id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null id in GpuService.DestroyGpuMemoryBuffer request");
  params->client_id = in_client_id;
  mojo::internal::MessageFragment<
      typename decltype(params->sync_token)::BaseType> sync_token_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::SyncTokenDataView>(
      in_sync_token, sync_token_fragment);
  params->sync_token.Set(
      sync_token_fragment.is_null() ? nullptr : sync_token_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->sync_token.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null sync_token in GpuService.DestroyGpuMemoryBuffer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("DestroyGpuMemoryBuffer");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::CopyGpuMemoryBuffer(
    ::gfx::GpuMemoryBufferHandle in_buffer_handle, ::base::UnsafeSharedMemoryRegion in_shared_memory, CopyGpuMemoryBufferCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::CopyGpuMemoryBuffer", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("buffer_handle"), in_buffer_handle,
                        "<value of type ::gfx::GpuMemoryBufferHandle>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("shared_memory"), in_shared_memory,
                        "<value of type ::base::UnsafeSharedMemoryRegion>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CopyGpuMemoryBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CopyGpuMemoryBuffer_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->buffer_handle)::BaseType> buffer_handle_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::GpuMemoryBufferHandleDataView>(
      in_buffer_handle, buffer_handle_fragment);
  params->buffer_handle.Set(
      buffer_handle_fragment.is_null() ? nullptr : buffer_handle_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->buffer_handle.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null buffer_handle in GpuService.CopyGpuMemoryBuffer request");
  mojo::internal::MessageFragment<
      typename decltype(params->shared_memory)::BaseType> shared_memory_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::UnsafeSharedMemoryRegionDataView>(
      in_shared_memory, shared_memory_fragment);
  params->shared_memory.Set(
      shared_memory_fragment.is_null() ? nullptr : shared_memory_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->shared_memory.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null shared_memory in GpuService.CopyGpuMemoryBuffer request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CopyGpuMemoryBuffer");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_CopyGpuMemoryBuffer_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void GpuServiceProxy::GetVideoMemoryUsageStats(
    GetVideoMemoryUsageStatsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::GetVideoMemoryUsageStats");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GetVideoMemoryUsageStats_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GetVideoMemoryUsageStats_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GetVideoMemoryUsageStats");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_GetVideoMemoryUsageStats_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void GpuServiceProxy::StartPeakMemoryMonitor(
    uint32_t in_sequence_num) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::StartPeakMemoryMonitor", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sequence_num"), in_sequence_num,
                        "<value of type uint32_t>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_StartPeakMemoryMonitor_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_StartPeakMemoryMonitor_Params_Data> params(
          message);
  params.Allocate();
  params->sequence_num = in_sequence_num;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("StartPeakMemoryMonitor");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::GetPeakMemoryUsage(
    uint32_t in_sequence_num, GetPeakMemoryUsageCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::GetPeakMemoryUsage", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("sequence_num"), in_sequence_num,
                        "<value of type uint32_t>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GetPeakMemoryUsage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GetPeakMemoryUsage_Params_Data> params(
          message);
  params.Allocate();
  params->sequence_num = in_sequence_num;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GetPeakMemoryUsage");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_GetPeakMemoryUsage_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void GpuServiceProxy::LoadedShader(
    int32_t in_client_id, const std::string& in_key, const std::string& in_data) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::LoadedShader", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("client_id"), in_client_id,
                        "<value of type int32_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("key"), in_key,
                        "<value of type const std::string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("data"), in_data,
                        "<value of type const std::string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_LoadedShader_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_LoadedShader_Params_Data> params(
          message);
  params.Allocate();
  params->client_id = in_client_id;
  mojo::internal::MessageFragment<
      typename decltype(params->key)::BaseType> key_fragment(
          params.message());
  mojo::internal::Serialize<mojo::StringDataView>(
      in_key, key_fragment);
  params->key.Set(
      key_fragment.is_null() ? nullptr : key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null key in GpuService.LoadedShader request");
  mojo::internal::MessageFragment<
      typename decltype(params->data)::BaseType> data_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ByteStringDataView>(
      in_data, data_fragment);
  params->data.Set(
      data_fragment.is_null() ? nullptr : data_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->data.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null data in GpuService.LoadedShader request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("LoadedShader");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::WakeUpGpu(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::WakeUpGpu");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_WakeUpGpu_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_WakeUpGpu_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("WakeUpGpu");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::GpuSwitched(
    ::gl::GpuPreference in_active_gpu_heuristic) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send viz::mojom::GpuService::GpuSwitched", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("active_gpu_heuristic"), in_active_gpu_heuristic,
                        "<value of type ::gl::GpuPreference>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GpuSwitched_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GpuSwitched_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<::gl::mojom::GpuPreference>(
      in_active_gpu_heuristic, &params->active_gpu_heuristic);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GpuSwitched");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::DisplayAdded(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::DisplayAdded");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_DisplayAdded_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_DisplayAdded_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("DisplayAdded");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::DisplayRemoved(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::DisplayRemoved");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_DisplayRemoved_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_DisplayRemoved_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("DisplayRemoved");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::DisplayMetricsChanged(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::DisplayMetricsChanged");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_DisplayMetricsChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_DisplayMetricsChanged_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("DisplayMetricsChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::DestroyAllChannels(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::DestroyAllChannels");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_DestroyAllChannels_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_DestroyAllChannels_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("DestroyAllChannels");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::OnBackgroundCleanup(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::OnBackgroundCleanup");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_OnBackgroundCleanup_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_OnBackgroundCleanup_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("OnBackgroundCleanup");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::OnBackgrounded(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::OnBackgrounded");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_OnBackgrounded_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_OnBackgrounded_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("OnBackgrounded");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::OnForegrounded(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::OnForegrounded");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_OnForegrounded_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_OnForegrounded_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("OnForegrounded");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::GetDawnInfo(
    GetDawnInfoCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::GetDawnInfo");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GetDawnInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GetDawnInfo_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GetDawnInfo");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new GpuService_GetDawnInfo_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void GpuServiceProxy::Crash(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::Crash");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_Crash_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_Crash_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("Crash");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::Hang(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::Hang");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_Hang_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_Hang_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("Hang");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void GpuServiceProxy::ThrowJavaException(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send viz::mojom::GpuService::ThrowJavaException");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_ThrowJavaException_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_ThrowJavaException_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("ThrowJavaException");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class GpuService_EstablishGpuChannel_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static GpuService::EstablishGpuChannelCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<GpuService_EstablishGpuChannel_ProxyToResponder> proxy(
        new GpuService_EstablishGpuChannel_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&GpuService_EstablishGpuChannel_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GpuService_EstablishGpuChannel_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  GpuService_EstablishGpuChannel_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GpuService::EstablishGpuChannelCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::mojo::ScopedMessagePipeHandle in_channel_handle, const ::gpu::GPUInfo& in_gpu_info, const ::gpu::GpuFeatureInfo& in_gpu_feature_info);
};

bool GpuService_EstablishGpuChannel_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_EstablishGpuChannel_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GpuService_EstablishGpuChannel_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::mojo::ScopedMessagePipeHandle p_channel_handle{};
  ::gpu::GPUInfo p_gpu_info{};
  ::gpu::GpuFeatureInfo p_gpu_feature_info{};
  GpuService_EstablishGpuChannel_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_channel_handle = input_data_view.TakeChannelHandle();
  if (success && !input_data_view.ReadGpuInfo(&p_gpu_info))
    success = false;
  if (success && !input_data_view.ReadGpuFeatureInfo(&p_gpu_feature_info))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 0, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_channel_handle), 
std::move(p_gpu_info), 
std::move(p_gpu_feature_info));
  return true;
}

void GpuService_EstablishGpuChannel_ProxyToResponder::Run(
    ::mojo::ScopedMessagePipeHandle in_channel_handle, const ::gpu::GPUInfo& in_gpu_info, const ::gpu::GpuFeatureInfo& in_gpu_feature_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply viz::mojom::GpuService::EstablishGpuChannel", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("channel_handle"), in_channel_handle,
                        "<value of type ::mojo::ScopedMessagePipeHandle>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("gpu_info"), in_gpu_info,
                        "<value of type const ::gpu::GPUInfo&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("gpu_feature_info"), in_gpu_feature_info,
                        "<value of type const ::gpu::GpuFeatureInfo&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_EstablishGpuChannel_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_EstablishGpuChannel_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::ScopedMessagePipeHandle>(
      in_channel_handle, &params->channel_handle, &params.message());
  mojo::internal::MessageFragment<
      typename decltype(params->gpu_info)::BaseType> gpu_info_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::GpuInfoDataView>(
      in_gpu_info, gpu_info_fragment);
  params->gpu_info.Set(
      gpu_info_fragment.is_null() ? nullptr : gpu_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->gpu_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null gpu_info in ");
  mojo::internal::MessageFragment<
      typename decltype(params->gpu_feature_info)::BaseType> gpu_feature_info_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::GpuFeatureInfoDataView>(
      in_gpu_feature_info, gpu_feature_info_fragment);
  params->gpu_feature_info.Set(
      gpu_feature_info_fragment.is_null() ? nullptr : gpu_feature_info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->gpu_feature_info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null gpu_feature_info in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("EstablishGpuChannel");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool GpuService_EstablishGpuChannel_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_EstablishGpuChannel_ResponseParams_Data* params =
      reinterpret_cast<internal::GpuService_EstablishGpuChannel_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  ::mojo::ScopedMessagePipeHandle p_channel_handle{};
  ::gpu::GPUInfo p_gpu_info{};
  ::gpu::GpuFeatureInfo p_gpu_feature_info{};
  GpuService_EstablishGpuChannel_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_channel_handle = input_data_view.TakeChannelHandle();
  if (success && !input_data_view.ReadGpuInfo(&p_gpu_info))
    success = false;
  if (success && !input_data_view.ReadGpuFeatureInfo(&p_gpu_feature_info))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 0, true);
    return false;
  }
  *out_channel_handle_ = std::move(p_channel_handle);
  *out_gpu_info_ = std::move(p_gpu_info);
  *out_gpu_feature_info_ = std::move(p_gpu_feature_info);
  *result_ = true;
  return true;
}
class GpuService_CreateGpuMemoryBuffer_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static GpuService::CreateGpuMemoryBufferCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<GpuService_CreateGpuMemoryBuffer_ProxyToResponder> proxy(
        new GpuService_CreateGpuMemoryBuffer_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&GpuService_CreateGpuMemoryBuffer_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GpuService_CreateGpuMemoryBuffer_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  GpuService_CreateGpuMemoryBuffer_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GpuService::CreateGpuMemoryBufferCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      ::gfx::GpuMemoryBufferHandle in_buffer_handle);
};

bool GpuService_CreateGpuMemoryBuffer_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_CreateGpuMemoryBuffer_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GpuService_CreateGpuMemoryBuffer_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::gfx::GpuMemoryBufferHandle p_buffer_handle{};
  GpuService_CreateGpuMemoryBuffer_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadBufferHandle(&p_buffer_handle))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_buffer_handle));
  return true;
}

void GpuService_CreateGpuMemoryBuffer_ProxyToResponder::Run(
    ::gfx::GpuMemoryBufferHandle in_buffer_handle) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply viz::mojom::GpuService::CreateGpuMemoryBuffer", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("buffer_handle"), in_buffer_handle,
                        "<value of type ::gfx::GpuMemoryBufferHandle>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CreateGpuMemoryBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CreateGpuMemoryBuffer_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->buffer_handle)::BaseType> buffer_handle_fragment(
          params.message());
  mojo::internal::Serialize<::gfx::mojom::GpuMemoryBufferHandleDataView>(
      in_buffer_handle, buffer_handle_fragment);
  params->buffer_handle.Set(
      buffer_handle_fragment.is_null() ? nullptr : buffer_handle_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->buffer_handle.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null buffer_handle in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CreateGpuMemoryBuffer");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
bool GpuService_CreateGpuMemoryBuffer_HandleSyncResponse::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_CreateGpuMemoryBuffer_ResponseParams_Data* params =
      reinterpret_cast<internal::GpuService_CreateGpuMemoryBuffer_ResponseParams_Data*>(
          message->mutable_payload());
  
  bool success = true;
  ::gfx::GpuMemoryBufferHandle p_buffer_handle{};
  GpuService_CreateGpuMemoryBuffer_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadBufferHandle(&p_buffer_handle))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 4, true);
    return false;
  }
  *out_buffer_handle_ = std::move(p_buffer_handle);
  *result_ = true;
  return true;
}
class GpuService_CopyGpuMemoryBuffer_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static GpuService::CopyGpuMemoryBufferCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<GpuService_CopyGpuMemoryBuffer_ProxyToResponder> proxy(
        new GpuService_CopyGpuMemoryBuffer_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&GpuService_CopyGpuMemoryBuffer_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GpuService_CopyGpuMemoryBuffer_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  GpuService_CopyGpuMemoryBuffer_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GpuService::CopyGpuMemoryBufferCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool GpuService_CopyGpuMemoryBuffer_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_CopyGpuMemoryBuffer_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GpuService_CopyGpuMemoryBuffer_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  GpuService_CopyGpuMemoryBuffer_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void GpuService_CopyGpuMemoryBuffer_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply viz::mojom::GpuService::CopyGpuMemoryBuffer", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_CopyGpuMemoryBuffer_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_CopyGpuMemoryBuffer_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("CopyGpuMemoryBuffer");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class GpuService_GetVideoMemoryUsageStats_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static GpuService::GetVideoMemoryUsageStatsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<GpuService_GetVideoMemoryUsageStats_ProxyToResponder> proxy(
        new GpuService_GetVideoMemoryUsageStats_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&GpuService_GetVideoMemoryUsageStats_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GpuService_GetVideoMemoryUsageStats_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  GpuService_GetVideoMemoryUsageStats_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GpuService::GetVideoMemoryUsageStatsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const ::gpu::VideoMemoryUsageStats& in_stats);
};

bool GpuService_GetVideoMemoryUsageStats_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_GetVideoMemoryUsageStats_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GpuService_GetVideoMemoryUsageStats_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  ::gpu::VideoMemoryUsageStats p_stats{};
  GpuService_GetVideoMemoryUsageStats_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadStats(&p_stats))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_stats));
  return true;
}

void GpuService_GetVideoMemoryUsageStats_ProxyToResponder::Run(
    const ::gpu::VideoMemoryUsageStats& in_stats) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply viz::mojom::GpuService::GetVideoMemoryUsageStats", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("stats"), in_stats,
                        "<value of type const ::gpu::VideoMemoryUsageStats&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GetVideoMemoryUsageStats_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GetVideoMemoryUsageStats_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->stats)::BaseType> stats_fragment(
          params.message());
  mojo::internal::Serialize<::gpu::mojom::VideoMemoryUsageStatsDataView>(
      in_stats, stats_fragment);
  params->stats.Set(
      stats_fragment.is_null() ? nullptr : stats_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->stats.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null stats in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GetVideoMemoryUsageStats");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class GpuService_GetPeakMemoryUsage_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static GpuService::GetPeakMemoryUsageCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<GpuService_GetPeakMemoryUsage_ProxyToResponder> proxy(
        new GpuService_GetPeakMemoryUsage_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&GpuService_GetPeakMemoryUsage_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GpuService_GetPeakMemoryUsage_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  GpuService_GetPeakMemoryUsage_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GpuService::GetPeakMemoryUsageCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      uint64_t in_memory_usage, const base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t>& in_memory_per_allocation_source);
};

bool GpuService_GetPeakMemoryUsage_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_GetPeakMemoryUsage_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GpuService_GetPeakMemoryUsage_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  uint64_t p_memory_usage{};
  base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t> p_memory_per_allocation_source{};
  GpuService_GetPeakMemoryUsage_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_memory_usage = input_data_view.memory_usage();
  if (success && !input_data_view.ReadMemoryPerAllocationSource(&p_memory_per_allocation_source))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 9, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_memory_usage), 
std::move(p_memory_per_allocation_source));
  return true;
}

void GpuService_GetPeakMemoryUsage_ProxyToResponder::Run(
    uint64_t in_memory_usage, const base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t>& in_memory_per_allocation_source) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply viz::mojom::GpuService::GetPeakMemoryUsage", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("memory_usage"), in_memory_usage,
                        "<value of type uint64_t>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("memory_per_allocation_source"), in_memory_per_allocation_source,
                        "<value of type const base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GetPeakMemoryUsage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GetPeakMemoryUsage_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->memory_usage = in_memory_usage;
  mojo::internal::MessageFragment<
      typename decltype(params->memory_per_allocation_source)::BaseType>
      memory_per_allocation_source_fragment(params.message());
  const mojo::internal::ContainerValidateParams memory_per_allocation_source_validate_params(
      new mojo::internal::ContainerValidateParams(0, ::gpu::mojom::internal::GpuPeakMemoryAllocationSource_Data::Validate), new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::MapDataView<::gpu::mojom::GpuPeakMemoryAllocationSource, uint64_t>>(
      in_memory_per_allocation_source, memory_per_allocation_source_fragment, &memory_per_allocation_source_validate_params);
  params->memory_per_allocation_source.Set(
      memory_per_allocation_source_fragment.is_null() ? nullptr : memory_per_allocation_source_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->memory_per_allocation_source.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null memory_per_allocation_source in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GetPeakMemoryUsage");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class GpuService_GetDawnInfo_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static GpuService::GetDawnInfoCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<GpuService_GetDawnInfo_ProxyToResponder> proxy(
        new GpuService_GetDawnInfo_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&GpuService_GetDawnInfo_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~GpuService_GetDawnInfo_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  GpuService_GetDawnInfo_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "GpuService::GetDawnInfoCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      const std::vector<std::string>& in_dawn_info_list);
};

bool GpuService_GetDawnInfo_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::GpuService_GetDawnInfo_ResponseParams_Data* params =
      reinterpret_cast<
          internal::GpuService_GetDawnInfo_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<std::string> p_dawn_info_list{};
  GpuService_GetDawnInfo_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadDawnInfoList(&p_dawn_info_list))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        GpuService::Name_, 20, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_dawn_info_list));
  return true;
}

void GpuService_GetDawnInfo_ProxyToResponder::Run(
    const std::vector<std::string>& in_dawn_info_list) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply viz::mojom::GpuService::GetDawnInfo", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("dawn_info_list"), in_dawn_info_list,
                        "<value of type const std::vector<std::string>&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kGpuService_GetDawnInfo_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::viz::mojom::internal::GpuService_GetDawnInfo_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->dawn_info_list)::BaseType>
      dawn_info_list_fragment(params.message());
  const mojo::internal::ContainerValidateParams dawn_info_list_validate_params(
      0, false, new mojo::internal::ContainerValidateParams(0, false, nullptr));
  mojo::internal::Serialize<mojo::ArrayDataView<mojo::StringDataView>>(
      in_dawn_info_list, dawn_info_list_fragment, &dawn_info_list_validate_params);
  params->dawn_info_list.Set(
      dawn_info_list_fragment.is_null() ? nullptr : dawn_info_list_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->dawn_info_list.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null dawn_info_list in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(GpuService::Name_);
  message.set_method_name("GetDawnInfo");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool GpuServiceStubDispatch::Accept(
    GpuService* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kGpuService_EstablishGpuChannel_Name: {
      break;
    }
    case internal::kGpuService_SetChannelClientPid_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_SetChannelClientPid_Params_Data* params =
          reinterpret_cast<internal::GpuService_SetChannelClientPid_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_client_id{};
      ::base::ProcessId p_client_pid{};
      GpuService_SetChannelClientPid_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_client_id = input_data_view.client_id();
      if (success && !input_data_view.ReadClientPid(&p_client_pid))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetChannelClientPid(
std::move(p_client_id), 
std::move(p_client_pid));
      return true;
    }
    case internal::kGpuService_CloseChannel_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_CloseChannel_Params_Data* params =
          reinterpret_cast<internal::GpuService_CloseChannel_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_client_id{};
      GpuService_CloseChannel_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_client_id = input_data_view.client_id();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 2, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CloseChannel(
std::move(p_client_id));
      return true;
    }
    case internal::kGpuService_CreateVideoEncodeAcceleratorProvider_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_CreateVideoEncodeAcceleratorProvider_Params_Data* params =
          reinterpret_cast<internal::GpuService_CreateVideoEncodeAcceleratorProvider_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::media::mojom::VideoEncodeAcceleratorProvider> p_vea_provider{};
      GpuService_CreateVideoEncodeAcceleratorProvider_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_vea_provider =
            input_data_view.TakeVeaProvider<decltype(p_vea_provider)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 3, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateVideoEncodeAcceleratorProvider(
std::move(p_vea_provider));
      return true;
    }
    case internal::kGpuService_CreateGpuMemoryBuffer_Name: {
      break;
    }
    case internal::kGpuService_DestroyGpuMemoryBuffer_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_DestroyGpuMemoryBuffer_Params_Data* params =
          reinterpret_cast<internal::GpuService_DestroyGpuMemoryBuffer_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::gfx::GpuMemoryBufferId p_id{};
      int32_t p_client_id{};
      ::gpu::SyncToken p_sync_token{};
      GpuService_DestroyGpuMemoryBuffer_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success)
        p_client_id = input_data_view.client_id();
      if (success && !input_data_view.ReadSyncToken(&p_sync_token))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 5, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DestroyGpuMemoryBuffer(
std::move(p_id), 
std::move(p_client_id), 
std::move(p_sync_token));
      return true;
    }
    case internal::kGpuService_CopyGpuMemoryBuffer_Name: {
      break;
    }
    case internal::kGpuService_GetVideoMemoryUsageStats_Name: {
      break;
    }
    case internal::kGpuService_StartPeakMemoryMonitor_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_StartPeakMemoryMonitor_Params_Data* params =
          reinterpret_cast<internal::GpuService_StartPeakMemoryMonitor_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      uint32_t p_sequence_num{};
      GpuService_StartPeakMemoryMonitor_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_sequence_num = input_data_view.sequence_num();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->StartPeakMemoryMonitor(
std::move(p_sequence_num));
      return true;
    }
    case internal::kGpuService_GetPeakMemoryUsage_Name: {
      break;
    }
    case internal::kGpuService_LoadedShader_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_LoadedShader_Params_Data* params =
          reinterpret_cast<internal::GpuService_LoadedShader_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      int32_t p_client_id{};
      std::string p_key{};
      std::string p_data{};
      GpuService_LoadedShader_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_client_id = input_data_view.client_id();
      if (success && !input_data_view.ReadKey(&p_key))
        success = false;
      if (success && !input_data_view.ReadData(&p_data))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->LoadedShader(
std::move(p_client_id), 
std::move(p_key), 
std::move(p_data));
      return true;
    }
    case internal::kGpuService_WakeUpGpu_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_WakeUpGpu_Params_Data* params =
          reinterpret_cast<internal::GpuService_WakeUpGpu_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_WakeUpGpu_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->WakeUpGpu();
      return true;
    }
    case internal::kGpuService_GpuSwitched_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_GpuSwitched_Params_Data* params =
          reinterpret_cast<internal::GpuService_GpuSwitched_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::gl::GpuPreference p_active_gpu_heuristic{};
      GpuService_GpuSwitched_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadActiveGpuHeuristic(&p_active_gpu_heuristic))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 12, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GpuSwitched(
std::move(p_active_gpu_heuristic));
      return true;
    }
    case internal::kGpuService_DisplayAdded_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_DisplayAdded_Params_Data* params =
          reinterpret_cast<internal::GpuService_DisplayAdded_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_DisplayAdded_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 13, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DisplayAdded();
      return true;
    }
    case internal::kGpuService_DisplayRemoved_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_DisplayRemoved_Params_Data* params =
          reinterpret_cast<internal::GpuService_DisplayRemoved_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_DisplayRemoved_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 14, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DisplayRemoved();
      return true;
    }
    case internal::kGpuService_DisplayMetricsChanged_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_DisplayMetricsChanged_Params_Data* params =
          reinterpret_cast<internal::GpuService_DisplayMetricsChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_DisplayMetricsChanged_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 15, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DisplayMetricsChanged();
      return true;
    }
    case internal::kGpuService_DestroyAllChannels_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_DestroyAllChannels_Params_Data* params =
          reinterpret_cast<internal::GpuService_DestroyAllChannels_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_DestroyAllChannels_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 16, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DestroyAllChannels();
      return true;
    }
    case internal::kGpuService_OnBackgroundCleanup_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_OnBackgroundCleanup_Params_Data* params =
          reinterpret_cast<internal::GpuService_OnBackgroundCleanup_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_OnBackgroundCleanup_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 17, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnBackgroundCleanup();
      return true;
    }
    case internal::kGpuService_OnBackgrounded_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_OnBackgrounded_Params_Data* params =
          reinterpret_cast<internal::GpuService_OnBackgrounded_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_OnBackgrounded_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 18, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnBackgrounded();
      return true;
    }
    case internal::kGpuService_OnForegrounded_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_OnForegrounded_Params_Data* params =
          reinterpret_cast<internal::GpuService_OnForegrounded_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_OnForegrounded_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 19, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnForegrounded();
      return true;
    }
    case internal::kGpuService_GetDawnInfo_Name: {
      break;
    }
    case internal::kGpuService_Crash_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_Crash_Params_Data* params =
          reinterpret_cast<internal::GpuService_Crash_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_Crash_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 21, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Crash();
      return true;
    }
    case internal::kGpuService_Hang_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_Hang_Params_Data* params =
          reinterpret_cast<internal::GpuService_Hang_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_Hang_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 22, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->Hang();
      return true;
    }
    case internal::kGpuService_ThrowJavaException_Name: {

      DCHECK(message->is_serialized());
      internal::GpuService_ThrowJavaException_Params_Data* params =
          reinterpret_cast<internal::GpuService_ThrowJavaException_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      GpuService_ThrowJavaException_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 23, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ThrowJavaException();
      return true;
    }
  }
  return false;
}

// static
bool GpuServiceStubDispatch::AcceptWithResponder(
    GpuService* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kGpuService_EstablishGpuChannel_Name: {

      internal::GpuService_EstablishGpuChannel_Params_Data* params =
          reinterpret_cast<
              internal::GpuService_EstablishGpuChannel_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      int32_t p_client_id{};
      uint64_t p_client_tracing_id{};
      bool p_is_gpu_host{};
      bool p_cache_shaders_on_disk{};
      GpuService_EstablishGpuChannel_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_client_id = input_data_view.client_id();
      if (success)
        p_client_tracing_id = input_data_view.client_tracing_id();
      if (success)
        p_is_gpu_host = input_data_view.is_gpu_host();
      if (success)
        p_cache_shaders_on_disk = input_data_view.cache_shaders_on_disk();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 0, false);
        return false;
      }
      GpuService::EstablishGpuChannelCallback callback =
          GpuService_EstablishGpuChannel_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->EstablishGpuChannel(
std::move(p_client_id), 
std::move(p_client_tracing_id), 
std::move(p_is_gpu_host), 
std::move(p_cache_shaders_on_disk), std::move(callback));
      return true;
    }
    case internal::kGpuService_SetChannelClientPid_Name: {
      break;
    }
    case internal::kGpuService_CloseChannel_Name: {
      break;
    }
    case internal::kGpuService_CreateVideoEncodeAcceleratorProvider_Name: {
      break;
    }
    case internal::kGpuService_CreateGpuMemoryBuffer_Name: {

      internal::GpuService_CreateGpuMemoryBuffer_Params_Data* params =
          reinterpret_cast<
              internal::GpuService_CreateGpuMemoryBuffer_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::gfx::GpuMemoryBufferId p_id{};
      ::gfx::Size p_size{};
      ::gfx::BufferFormat p_format{};
      ::gfx::BufferUsage p_usage{};
      int32_t p_client_id{};
      ::gpu::SurfaceHandle p_surface_handle{};
      GpuService_CreateGpuMemoryBuffer_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadId(&p_id))
        success = false;
      if (success && !input_data_view.ReadSize(&p_size))
        success = false;
      if (success && !input_data_view.ReadFormat(&p_format))
        success = false;
      if (success && !input_data_view.ReadUsage(&p_usage))
        success = false;
      if (success)
        p_client_id = input_data_view.client_id();
      if (success && !input_data_view.ReadSurfaceHandle(&p_surface_handle))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 4, false);
        return false;
      }
      GpuService::CreateGpuMemoryBufferCallback callback =
          GpuService_CreateGpuMemoryBuffer_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CreateGpuMemoryBuffer(
std::move(p_id), 
std::move(p_size), 
std::move(p_format), 
std::move(p_usage), 
std::move(p_client_id), 
std::move(p_surface_handle), std::move(callback));
      return true;
    }
    case internal::kGpuService_DestroyGpuMemoryBuffer_Name: {
      break;
    }
    case internal::kGpuService_CopyGpuMemoryBuffer_Name: {

      internal::GpuService_CopyGpuMemoryBuffer_Params_Data* params =
          reinterpret_cast<
              internal::GpuService_CopyGpuMemoryBuffer_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::gfx::GpuMemoryBufferHandle p_buffer_handle{};
      ::base::UnsafeSharedMemoryRegion p_shared_memory{};
      GpuService_CopyGpuMemoryBuffer_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBufferHandle(&p_buffer_handle))
        success = false;
      if (success && !input_data_view.ReadSharedMemory(&p_shared_memory))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 6, false);
        return false;
      }
      GpuService::CopyGpuMemoryBufferCallback callback =
          GpuService_CopyGpuMemoryBuffer_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->CopyGpuMemoryBuffer(
std::move(p_buffer_handle), 
std::move(p_shared_memory), std::move(callback));
      return true;
    }
    case internal::kGpuService_GetVideoMemoryUsageStats_Name: {

      internal::GpuService_GetVideoMemoryUsageStats_Params_Data* params =
          reinterpret_cast<
              internal::GpuService_GetVideoMemoryUsageStats_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      GpuService_GetVideoMemoryUsageStats_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 7, false);
        return false;
      }
      GpuService::GetVideoMemoryUsageStatsCallback callback =
          GpuService_GetVideoMemoryUsageStats_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetVideoMemoryUsageStats(std::move(callback));
      return true;
    }
    case internal::kGpuService_StartPeakMemoryMonitor_Name: {
      break;
    }
    case internal::kGpuService_GetPeakMemoryUsage_Name: {

      internal::GpuService_GetPeakMemoryUsage_Params_Data* params =
          reinterpret_cast<
              internal::GpuService_GetPeakMemoryUsage_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      uint32_t p_sequence_num{};
      GpuService_GetPeakMemoryUsage_ParamsDataView input_data_view(params, message);
      
      if (success)
        p_sequence_num = input_data_view.sequence_num();
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 9, false);
        return false;
      }
      GpuService::GetPeakMemoryUsageCallback callback =
          GpuService_GetPeakMemoryUsage_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetPeakMemoryUsage(
std::move(p_sequence_num), std::move(callback));
      return true;
    }
    case internal::kGpuService_LoadedShader_Name: {
      break;
    }
    case internal::kGpuService_WakeUpGpu_Name: {
      break;
    }
    case internal::kGpuService_GpuSwitched_Name: {
      break;
    }
    case internal::kGpuService_DisplayAdded_Name: {
      break;
    }
    case internal::kGpuService_DisplayRemoved_Name: {
      break;
    }
    case internal::kGpuService_DisplayMetricsChanged_Name: {
      break;
    }
    case internal::kGpuService_DestroyAllChannels_Name: {
      break;
    }
    case internal::kGpuService_OnBackgroundCleanup_Name: {
      break;
    }
    case internal::kGpuService_OnBackgrounded_Name: {
      break;
    }
    case internal::kGpuService_OnForegrounded_Name: {
      break;
    }
    case internal::kGpuService_GetDawnInfo_Name: {

      internal::GpuService_GetDawnInfo_Params_Data* params =
          reinterpret_cast<
              internal::GpuService_GetDawnInfo_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      GpuService_GetDawnInfo_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            GpuService::Name_, 20, false);
        return false;
      }
      GpuService::GetDawnInfoCallback callback =
          GpuService_GetDawnInfo_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetDawnInfo(std::move(callback));
      return true;
    }
    case internal::kGpuService_Crash_Name: {
      break;
    }
    case internal::kGpuService_Hang_Name: {
      break;
    }
    case internal::kGpuService_ThrowJavaException_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kGpuServiceValidationInfo[] = {
    {&internal::GpuService_EstablishGpuChannel_Params_Data::Validate,
     &internal::GpuService_EstablishGpuChannel_ResponseParams_Data::Validate},
    {&internal::GpuService_SetChannelClientPid_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_CloseChannel_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_CreateVideoEncodeAcceleratorProvider_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_CreateGpuMemoryBuffer_Params_Data::Validate,
     &internal::GpuService_CreateGpuMemoryBuffer_ResponseParams_Data::Validate},
    {&internal::GpuService_DestroyGpuMemoryBuffer_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_CopyGpuMemoryBuffer_Params_Data::Validate,
     &internal::GpuService_CopyGpuMemoryBuffer_ResponseParams_Data::Validate},
    {&internal::GpuService_GetVideoMemoryUsageStats_Params_Data::Validate,
     &internal::GpuService_GetVideoMemoryUsageStats_ResponseParams_Data::Validate},
    {&internal::GpuService_StartPeakMemoryMonitor_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_GetPeakMemoryUsage_Params_Data::Validate,
     &internal::GpuService_GetPeakMemoryUsage_ResponseParams_Data::Validate},
    {&internal::GpuService_LoadedShader_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_WakeUpGpu_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_GpuSwitched_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_DisplayAdded_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_DisplayRemoved_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_DisplayMetricsChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_DestroyAllChannels_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_OnBackgroundCleanup_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_OnBackgrounded_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_OnForegrounded_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_GetDawnInfo_Params_Data::Validate,
     &internal::GpuService_GetDawnInfo_ResponseParams_Data::Validate},
    {&internal::GpuService_Crash_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_Hang_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::GpuService_ThrowJavaException_Params_Data::Validate,
     nullptr /* no response */},
};

bool GpuServiceRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::viz::mojom::GpuService::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kGpuServiceValidationInfo);
}

bool GpuServiceResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::viz::mojom::GpuService::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kGpuServiceValidationInfo);
}


}  // namespace mojom
}  // namespace viz


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace viz {
namespace mojom {


void GpuServiceInterceptorForTesting::EstablishGpuChannel(int32_t client_id, uint64_t client_tracing_id, bool is_gpu_host, bool cache_shaders_on_disk, EstablishGpuChannelCallback callback) {
  GetForwardingInterface()->EstablishGpuChannel(std::move(client_id), std::move(client_tracing_id), std::move(is_gpu_host), std::move(cache_shaders_on_disk), std::move(callback));
}
void GpuServiceInterceptorForTesting::SetChannelClientPid(int32_t client_id, ::base::ProcessId client_pid) {
  GetForwardingInterface()->SetChannelClientPid(std::move(client_id), std::move(client_pid));
}
void GpuServiceInterceptorForTesting::CloseChannel(int32_t client_id) {
  GetForwardingInterface()->CloseChannel(std::move(client_id));
}
void GpuServiceInterceptorForTesting::CreateVideoEncodeAcceleratorProvider(::mojo::PendingReceiver<::media::mojom::VideoEncodeAcceleratorProvider> vea_provider) {
  GetForwardingInterface()->CreateVideoEncodeAcceleratorProvider(std::move(vea_provider));
}
void GpuServiceInterceptorForTesting::CreateGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, int32_t client_id, ::gpu::SurfaceHandle surface_handle, CreateGpuMemoryBufferCallback callback) {
  GetForwardingInterface()->CreateGpuMemoryBuffer(std::move(id), std::move(size), std::move(format), std::move(usage), std::move(client_id), std::move(surface_handle), std::move(callback));
}
void GpuServiceInterceptorForTesting::DestroyGpuMemoryBuffer(::gfx::GpuMemoryBufferId id, int32_t client_id, const ::gpu::SyncToken& sync_token) {
  GetForwardingInterface()->DestroyGpuMemoryBuffer(std::move(id), std::move(client_id), std::move(sync_token));
}
void GpuServiceInterceptorForTesting::CopyGpuMemoryBuffer(::gfx::GpuMemoryBufferHandle buffer_handle, ::base::UnsafeSharedMemoryRegion shared_memory, CopyGpuMemoryBufferCallback callback) {
  GetForwardingInterface()->CopyGpuMemoryBuffer(std::move(buffer_handle), std::move(shared_memory), std::move(callback));
}
void GpuServiceInterceptorForTesting::GetVideoMemoryUsageStats(GetVideoMemoryUsageStatsCallback callback) {
  GetForwardingInterface()->GetVideoMemoryUsageStats(std::move(callback));
}
void GpuServiceInterceptorForTesting::StartPeakMemoryMonitor(uint32_t sequence_num) {
  GetForwardingInterface()->StartPeakMemoryMonitor(std::move(sequence_num));
}
void GpuServiceInterceptorForTesting::GetPeakMemoryUsage(uint32_t sequence_num, GetPeakMemoryUsageCallback callback) {
  GetForwardingInterface()->GetPeakMemoryUsage(std::move(sequence_num), std::move(callback));
}
void GpuServiceInterceptorForTesting::LoadedShader(int32_t client_id, const std::string& key, const std::string& data) {
  GetForwardingInterface()->LoadedShader(std::move(client_id), std::move(key), std::move(data));
}
void GpuServiceInterceptorForTesting::WakeUpGpu() {
  GetForwardingInterface()->WakeUpGpu();
}
void GpuServiceInterceptorForTesting::GpuSwitched(::gl::GpuPreference active_gpu_heuristic) {
  GetForwardingInterface()->GpuSwitched(std::move(active_gpu_heuristic));
}
void GpuServiceInterceptorForTesting::DisplayAdded() {
  GetForwardingInterface()->DisplayAdded();
}
void GpuServiceInterceptorForTesting::DisplayRemoved() {
  GetForwardingInterface()->DisplayRemoved();
}
void GpuServiceInterceptorForTesting::DisplayMetricsChanged() {
  GetForwardingInterface()->DisplayMetricsChanged();
}
void GpuServiceInterceptorForTesting::DestroyAllChannels() {
  GetForwardingInterface()->DestroyAllChannels();
}
void GpuServiceInterceptorForTesting::OnBackgroundCleanup() {
  GetForwardingInterface()->OnBackgroundCleanup();
}
void GpuServiceInterceptorForTesting::OnBackgrounded() {
  GetForwardingInterface()->OnBackgrounded();
}
void GpuServiceInterceptorForTesting::OnForegrounded() {
  GetForwardingInterface()->OnForegrounded();
}
void GpuServiceInterceptorForTesting::GetDawnInfo(GetDawnInfoCallback callback) {
  GetForwardingInterface()->GetDawnInfo(std::move(callback));
}
void GpuServiceInterceptorForTesting::Crash() {
  GetForwardingInterface()->Crash();
}
void GpuServiceInterceptorForTesting::Hang() {
  GetForwardingInterface()->Hang();
}
void GpuServiceInterceptorForTesting::ThrowJavaException() {
  GetForwardingInterface()->ThrowJavaException();
}
GpuServiceAsyncWaiter::GpuServiceAsyncWaiter(
    GpuService* proxy) : proxy_(proxy) {}

GpuServiceAsyncWaiter::~GpuServiceAsyncWaiter() = default;

void GpuServiceAsyncWaiter::EstablishGpuChannel(
    int32_t client_id, uint64_t client_tracing_id, bool is_gpu_host, bool cache_shaders_on_disk, ::mojo::ScopedMessagePipeHandle* out_channel_handle, ::gpu::GPUInfo* out_gpu_info, ::gpu::GpuFeatureInfo* out_gpu_feature_info) {
  base::RunLoop loop;
  proxy_->EstablishGpuChannel(std::move(client_id),std::move(client_tracing_id),std::move(is_gpu_host),std::move(cache_shaders_on_disk),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::mojo::ScopedMessagePipeHandle* out_channel_handle
,
             ::gpu::GPUInfo* out_gpu_info
,
             ::gpu::GpuFeatureInfo* out_gpu_feature_info
,
             ::mojo::ScopedMessagePipeHandle channel_handle,
             const ::gpu::GPUInfo& gpu_info,
             const ::gpu::GpuFeatureInfo& gpu_feature_info) {*out_channel_handle = std::move(channel_handle);*out_gpu_info = std::move(gpu_info);*out_gpu_feature_info = std::move(gpu_feature_info);
            loop->Quit();
          },
          &loop,
          out_channel_handle,
          out_gpu_info,
          out_gpu_feature_info));
  loop.Run();
}
void GpuServiceAsyncWaiter::CreateGpuMemoryBuffer(
    ::gfx::GpuMemoryBufferId id, const ::gfx::Size& size, ::gfx::BufferFormat format, ::gfx::BufferUsage usage, int32_t client_id, ::gpu::SurfaceHandle surface_handle, ::gfx::GpuMemoryBufferHandle* out_buffer_handle) {
  base::RunLoop loop;
  proxy_->CreateGpuMemoryBuffer(std::move(id),std::move(size),std::move(format),std::move(usage),std::move(client_id),std::move(surface_handle),
      base::BindOnce(
          [](base::RunLoop* loop,
             ::gfx::GpuMemoryBufferHandle* out_buffer_handle
,
             ::gfx::GpuMemoryBufferHandle buffer_handle) {*out_buffer_handle = std::move(buffer_handle);
            loop->Quit();
          },
          &loop,
          out_buffer_handle));
  loop.Run();
}
void GpuServiceAsyncWaiter::CopyGpuMemoryBuffer(
    ::gfx::GpuMemoryBufferHandle buffer_handle, ::base::UnsafeSharedMemoryRegion shared_memory, bool* out_success) {
  base::RunLoop loop;
  proxy_->CopyGpuMemoryBuffer(std::move(buffer_handle),std::move(shared_memory),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void GpuServiceAsyncWaiter::GetVideoMemoryUsageStats(
    ::gpu::VideoMemoryUsageStats* out_stats) {
  base::RunLoop loop;
  proxy_->GetVideoMemoryUsageStats(
      base::BindOnce(
          [](base::RunLoop* loop,
             ::gpu::VideoMemoryUsageStats* out_stats
,
             const ::gpu::VideoMemoryUsageStats& stats) {*out_stats = std::move(stats);
            loop->Quit();
          },
          &loop,
          out_stats));
  loop.Run();
}
void GpuServiceAsyncWaiter::GetPeakMemoryUsage(
    uint32_t sequence_num, uint64_t* out_memory_usage, base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t>* out_memory_per_allocation_source) {
  base::RunLoop loop;
  proxy_->GetPeakMemoryUsage(std::move(sequence_num),
      base::BindOnce(
          [](base::RunLoop* loop,
             uint64_t* out_memory_usage
,
             base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t>* out_memory_per_allocation_source
,
             uint64_t memory_usage,
             const base::flat_map<::gpu::GpuPeakMemoryAllocationSource, uint64_t>& memory_per_allocation_source) {*out_memory_usage = std::move(memory_usage);*out_memory_per_allocation_source = std::move(memory_per_allocation_source);
            loop->Quit();
          },
          &loop,
          out_memory_usage,
          out_memory_per_allocation_source));
  loop.Run();
}
void GpuServiceAsyncWaiter::GetDawnInfo(
    std::vector<std::string>* out_dawn_info_list) {
  base::RunLoop loop;
  proxy_->GetDawnInfo(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<std::string>* out_dawn_info_list
,
             const std::vector<std::string>& dawn_info_list) {*out_dawn_info_list = std::move(dawn_info_list);
            loop->Quit();
          },
          &loop,
          out_dawn_info_list));
  loop.Run();
}





}  // namespace mojom
}  // namespace viz


#if defined(__clang__)
#pragma clang diagnostic pop
#endif