// services/viz/privileged/mojom/gl/gpu_host.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "services/viz/privileged/mojom/gl/gpu_host.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/viz/privileged/mojom/gl/gpu_host.mojom-params-data.h"
namespace viz {
namespace mojom {

namespace internal {


// static
bool GpuHost_DidInitialize_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 48, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidInitialize_Params_Data* object =
      static_cast<const GpuHost_DidInitialize_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->gpu_info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->gpu_info, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->gpu_feature_info, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->gpu_feature_info, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->gpu_info_for_hardware_gpu, validation_context))
    return false;

  if (!mojo::internal::ValidateStruct(object->gpu_feature_info_for_hardware_gpu, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->gpu_extra_info, 5, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->gpu_extra_info, validation_context))
    return false;

  return true;
}

GpuHost_DidInitialize_Params_Data::GpuHost_DidInitialize_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidFailInitialize_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidFailInitialize_Params_Data* object =
      static_cast<const GpuHost_DidFailInitialize_Params_Data*>(data);

  return true;
}

GpuHost_DidFailInitialize_Params_Data::GpuHost_DidFailInitialize_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidCreateContextSuccessfully_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidCreateContextSuccessfully_Params_Data* object =
      static_cast<const GpuHost_DidCreateContextSuccessfully_Params_Data*>(data);

  return true;
}

GpuHost_DidCreateContextSuccessfully_Params_Data::GpuHost_DidCreateContextSuccessfully_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidCreateOffscreenContext_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidCreateOffscreenContext_Params_Data* object =
      static_cast<const GpuHost_DidCreateOffscreenContext_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  return true;
}

GpuHost_DidCreateOffscreenContext_Params_Data::GpuHost_DidCreateOffscreenContext_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidDestroyOffscreenContext_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidDestroyOffscreenContext_Params_Data* object =
      static_cast<const GpuHost_DidDestroyOffscreenContext_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->url, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->url, validation_context))
    return false;

  return true;
}

GpuHost_DidDestroyOffscreenContext_Params_Data::GpuHost_DidDestroyOffscreenContext_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidDestroyChannel_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidDestroyChannel_Params_Data* object =
      static_cast<const GpuHost_DidDestroyChannel_Params_Data*>(data);

  return true;
}

GpuHost_DidDestroyChannel_Params_Data::GpuHost_DidDestroyChannel_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidDestroyAllChannels_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidDestroyAllChannels_Params_Data* object =
      static_cast<const GpuHost_DidDestroyAllChannels_Params_Data*>(data);

  return true;
}

GpuHost_DidDestroyAllChannels_Params_Data::GpuHost_DidDestroyAllChannels_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidLoseContext_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidLoseContext_Params_Data* object =
      static_cast<const GpuHost_DidLoseContext_Params_Data*>(data);


  if (!::viz::mojom::internal::ContextLostReason_Data
        ::Validate(object->reason, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->active_url, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->active_url, validation_context))
    return false;

  return true;
}

GpuHost_DidLoseContext_Params_Data::GpuHost_DidLoseContext_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DidUpdateGPUInfo_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DidUpdateGPUInfo_Params_Data* object =
      static_cast<const GpuHost_DidUpdateGPUInfo_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->gpu_info, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->gpu_info, validation_context))
    return false;

  return true;
}

GpuHost_DidUpdateGPUInfo_Params_Data::GpuHost_DidUpdateGPUInfo_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_DisableGpuCompositing_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_DisableGpuCompositing_Params_Data* object =
      static_cast<const GpuHost_DisableGpuCompositing_Params_Data*>(data);

  return true;
}

GpuHost_DisableGpuCompositing_Params_Data::GpuHost_DisableGpuCompositing_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_StoreShaderToDisk_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_StoreShaderToDisk_Params_Data* object =
      static_cast<const GpuHost_StoreShaderToDisk_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->key, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams key_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->key, validation_context,
                                         &key_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->shader, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->shader, validation_context))
    return false;

  return true;
}

GpuHost_StoreShaderToDisk_Params_Data::GpuHost_StoreShaderToDisk_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool GpuHost_RecordLogMessage_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const GpuHost_RecordLogMessage_Params_Data* object =
      static_cast<const GpuHost_RecordLogMessage_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->header, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams header_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->header, validation_context,
                                         &header_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->message, 3, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams message_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->message, validation_context,
                                         &message_validate_params)) {
    return false;
  }

  return true;
}

GpuHost_RecordLogMessage_Params_Data::GpuHost_RecordLogMessage_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace viz