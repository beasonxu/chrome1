// services/viz/privileged/mojom/viz_main.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_VIZ_PRIVILEGED_MOJOM_VIZ_MAIN_MOJOM_PARAMS_DATA_H_
#define SERVICES_VIZ_PRIVILEGED_MOJOM_VIZ_MAIN_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace viz {
namespace mojom {
namespace internal {

class ValidationContext;
class  VizMain_CreateFrameSinkManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::FrameSinkManagerParams_Data> params;

 private:
  friend class mojo::internal::MessageFragment<VizMain_CreateFrameSinkManager_Params_Data>;

  VizMain_CreateFrameSinkManager_Params_Data();
  ~VizMain_CreateFrameSinkManager_Params_Data() = delete;
};
static_assert(sizeof(VizMain_CreateFrameSinkManager_Params_Data) == 16,
              "Bad sizeof(VizMain_CreateFrameSinkManager_Params_Data)");
class  VizMain_CreateGpuService_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data gpu_service;
  mojo::internal::Interface_Data gpu_host;
  mojo::internal::Interface_Data discardable_memory_manager;
  int32_t subpixel_rendering;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnsafeSharedMemoryRegion_Data> activity_flags;

 private:
  friend class mojo::internal::MessageFragment<VizMain_CreateGpuService_Params_Data>;

  VizMain_CreateGpuService_Params_Data();
  ~VizMain_CreateGpuService_Params_Data() = delete;
};
static_assert(sizeof(VizMain_CreateGpuService_Params_Data) == 40,
              "Bad sizeof(VizMain_CreateGpuService_Params_Data)");
class  VizMain_SetHostProcessId_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t pid;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<VizMain_SetHostProcessId_Params_Data>;

  VizMain_SetHostProcessId_Params_Data();
  ~VizMain_SetHostProcessId_Params_Data() = delete;
};
static_assert(sizeof(VizMain_SetHostProcessId_Params_Data) == 16,
              "Bad sizeof(VizMain_SetHostProcessId_Params_Data)");

}  // namespace internal


class VizMain_CreateFrameSinkManager_ParamsDataView {
 public:
  VizMain_CreateFrameSinkManager_ParamsDataView() = default;

  VizMain_CreateFrameSinkManager_ParamsDataView(
      internal::VizMain_CreateFrameSinkManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetParamsDataView(
      FrameSinkManagerParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParams(UserType* output) {
    
    auto* pointer = data_->params.Get();
    return mojo::internal::Deserialize<::viz::mojom::FrameSinkManagerParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::VizMain_CreateFrameSinkManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VizMain_CreateGpuService_ParamsDataView {
 public:
  VizMain_CreateGpuService_ParamsDataView() = default;

  VizMain_CreateGpuService_ParamsDataView(
      internal::VizMain_CreateGpuService_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeGpuService() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::viz::mojom::GpuServiceInterfaceBase>>(
            &data_->gpu_service, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeGpuHost() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::viz::mojom::GpuHostInterfaceBase>>(
            &data_->gpu_host, &result, message_);
    DCHECK(ret);
    return result;
  }
  template <typename UserType>
  UserType TakeDiscardableMemoryManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::discardable_memory::mojom::DiscardableSharedMemoryManagerInterfaceBase>>(
            &data_->discardable_memory_manager, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetActivityFlagsDataView(
      ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadActivityFlags(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView, UserType>(),
    "Attempting to read the optional `activity_flags` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadActivityFlags` instead "
    "of `ReadActivityFlags if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->activity_flags.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnsafeSharedMemoryRegionDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadSubpixelRendering(UserType* output) const {
    auto data_value = data_->subpixel_rendering;
    return mojo::internal::Deserialize<::gfx::mojom::SubpixelRendering>(
        data_value, output);
  }
  ::gfx::mojom::SubpixelRendering subpixel_rendering() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::gfx::mojom::SubpixelRendering>(data_->subpixel_rendering));
  }
 private:
  internal::VizMain_CreateGpuService_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class VizMain_SetHostProcessId_ParamsDataView {
 public:
  VizMain_SetHostProcessId_ParamsDataView() = default;

  VizMain_SetHostProcessId_ParamsDataView(
      internal::VizMain_SetHostProcessId_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t pid() const {
    return data_->pid;
  }
 private:
  internal::VizMain_SetHostProcessId_Params_Data* data_ = nullptr;
};


inline void VizMain_CreateFrameSinkManager_ParamsDataView::GetParamsDataView(
    FrameSinkManagerParamsDataView* output) {
  auto pointer = data_->params.Get();
  *output = FrameSinkManagerParamsDataView(pointer, message_);
}


inline void VizMain_CreateGpuService_ParamsDataView::GetActivityFlagsDataView(
    ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView* output) {
  auto pointer = data_->activity_flags.Get();
  *output = ::mojo_base::mojom::UnsafeSharedMemoryRegionDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace viz

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_VIZ_PRIVILEGED_MOJOM_VIZ_MAIN_MOJOM_PARAMS_DATA_H_