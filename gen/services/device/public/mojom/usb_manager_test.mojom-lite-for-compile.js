// services/device/public/mojom/usb_manager_test.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('url.mojom.Url');






goog.provide('device.mojom.UsbDeviceManagerTest');
goog.provide('device.mojom.UsbDeviceManagerTestReceiver');
goog.provide('device.mojom.UsbDeviceManagerTestCallbackRouter');
goog.provide('device.mojom.UsbDeviceManagerTestInterface');
goog.provide('device.mojom.UsbDeviceManagerTestRemote');
goog.provide('device.mojom.UsbDeviceManagerTestPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
device.mojom.UsbDeviceManagerTestPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        device.mojom.UsbDeviceManagerTest.$interfaceName,
        scope);
  }
};

/** @interface */
device.mojom.UsbDeviceManagerTestInterface = class {
  
  /**
   * @param { !string } name
   * @param { !string } serialNumber
   * @param { !string } landingPage
   * @return {!Promise<{
        success: !boolean,
        message: !string,
   *  }>}
   */

  addDeviceForTesting(name, serialNumber, landingPage) {}
  
  /**
   * @param { !string } guid
   * @return {!Promise}
   */

  removeDeviceForTesting(guid) {}
  
  /**
   * @return {!Promise<{
        devices: !Array<!device.mojom.TestDeviceInfo>,
   *  }>}
   */

  getTestDevices() {}
};

/**
 * @export
 * @implements { device.mojom.UsbDeviceManagerTestInterface }
 */
device.mojom.UsbDeviceManagerTestRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!device.mojom.UsbDeviceManagerTestPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          device.mojom.UsbDeviceManagerTestPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!device.mojom.UsbDeviceManagerTestPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } name
   * @param { !string } serialNumber
   * @param { !string } landingPage
   * @return {!Promise<{
        success: !boolean,
        message: !string,
   *  }>}
   */

  addDeviceForTesting(
      name,
      serialNumber,
      landingPage) {
    return this.proxy.sendMessage(
        0,
        device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
        [
          name,
          serialNumber,
          landingPage
        ]);
  }

  
  /**
   * @param { !string } guid
   * @return {!Promise}
   */

  removeDeviceForTesting(
      guid) {
    return this.proxy.sendMessage(
        1,
        device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
        [
          guid
        ]);
  }

  
  /**
   * @return {!Promise<{
        devices: !Array<!device.mojom.TestDeviceInfo>,
   *  }>}
   */

  getTestDevices() {
    return this.proxy.sendMessage(
        2,
        device.mojom.UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the UsbDeviceManagerTest
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
device.mojom.UsbDeviceManagerTestReceiver = class {
  /**
   * @param {!device.mojom.UsbDeviceManagerTestInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!device.mojom.UsbDeviceManagerTestRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        device.mojom.UsbDeviceManagerTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!device.mojom.UsbDeviceManagerTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
        impl.addDeviceForTesting.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
        impl.removeDeviceForTesting.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        device.mojom.UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
        impl.getTestDevices.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
device.mojom.UsbDeviceManagerTest = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "device.mojom.UsbDeviceManagerTest";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!device.mojom.UsbDeviceManagerTestRemote}
   * @export
   */
  static getRemote() {
    let remote = new device.mojom.UsbDeviceManagerTestRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the UsbDeviceManagerTest
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
device.mojom.UsbDeviceManagerTestCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      device.mojom.UsbDeviceManagerTestRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!device.mojom.UsbDeviceManagerTestRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.addDeviceForTesting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
        this.addDeviceForTesting.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.removeDeviceForTesting =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
        this.removeDeviceForTesting.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getTestDevices =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        device.mojom.UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
        device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
        this.getTestDevices.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('device.mojom.TestDeviceInfoSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.TestDeviceInfoSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('device.mojom.UsbDeviceManagerTest_GetTestDevices_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.UsbDeviceManagerTest_GetTestDevices_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    device.mojom.TestDeviceInfoSpec.$,
    'TestDeviceInfo',
    [
      mojo.internal.StructField(
        'guid', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'serialNumber', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'landingPage', 24,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 40],]);



goog.provide('device.mojom.TestDeviceInfo');

/** @record */
device.mojom.TestDeviceInfo = class {
  constructor() {
    /** @export { !string } */
    this.guid;
    /** @export { !string } */
    this.name;
    /** @export { !string } */
    this.serialNumber;
    /** @export { !url.mojom.Url } */
    this.landingPage;
  }
};




mojo.internal.Struct(
    device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ParamsSpec.$,
    'UsbDeviceManagerTest_AddDeviceForTesting_Params',
    [
      mojo.internal.StructField(
        'name', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'serialNumber', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'landingPage', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);



goog.provide('device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_Params');

/** @record */
device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_Params = class {
  constructor() {
    /** @export { !string } */
    this.name;
    /** @export { !string } */
    this.serialNumber;
    /** @export { !string } */
    this.landingPage;
  }
};




mojo.internal.Struct(
    device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParamsSpec.$,
    'UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);



goog.provide('device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams');

/** @record */
device.mojom.UsbDeviceManagerTest_AddDeviceForTesting_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.success;
    /** @export { !string } */
    this.message;
  }
};




mojo.internal.Struct(
    device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ParamsSpec.$,
    'UsbDeviceManagerTest_RemoveDeviceForTesting_Params',
    [
      mojo.internal.StructField(
        'guid', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_Params');

/** @record */
device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_Params = class {
  constructor() {
    /** @export { !string } */
    this.guid;
  }
};




mojo.internal.Struct(
    device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParamsSpec.$,
    'UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams',
    [
    ],
    [[0, 8],]);



goog.provide('device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams');

/** @record */
device.mojom.UsbDeviceManagerTest_RemoveDeviceForTesting_ResponseParams = class {
  constructor() {
  }
};




mojo.internal.Struct(
    device.mojom.UsbDeviceManagerTest_GetTestDevices_ParamsSpec.$,
    'UsbDeviceManagerTest_GetTestDevices_Params',
    [
    ],
    [[0, 8],]);



goog.provide('device.mojom.UsbDeviceManagerTest_GetTestDevices_Params');

/** @record */
device.mojom.UsbDeviceManagerTest_GetTestDevices_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParamsSpec.$,
    'UsbDeviceManagerTest_GetTestDevices_ResponseParams',
    [
      mojo.internal.StructField(
        'devices', 0,
        0,
        mojo.internal.Array(device.mojom.TestDeviceInfoSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParams');

/** @record */
device.mojom.UsbDeviceManagerTest_GetTestDevices_ResponseParams = class {
  constructor() {
    /** @export { !Array<!device.mojom.TestDeviceInfo> } */
    this.devices;
  }
};


