// services/device/public/mojom/usb_enumeration_options.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/device/public/mojom/usb_enumeration_options.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/device/public/mojom/usb_enumeration_options.mojom-params-data.h"
#include "services/device/public/mojom/usb_enumeration_options.mojom-shared-message-ids.h"

#include "services/device/public/mojom/usb_enumeration_options.mojom-blink-import-headers.h"
#include "services/device/public/mojom/usb_enumeration_options.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_USB_ENUMERATION_OPTIONS_MOJOM_BLINK_JUMBO_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_USB_ENUMERATION_OPTIONS_MOJOM_BLINK_JUMBO_H_
#endif



namespace device {
namespace mojom {
namespace blink {
UsbDeviceFilter::UsbDeviceFilter()
    : has_vendor_id(),
      vendor_id(),
      has_product_id(),
      product_id(),
      has_class_code(),
      class_code(),
      has_subclass_code(),
      subclass_code(),
      has_protocol_code(),
      protocol_code(),
      serial_number() {}

UsbDeviceFilter::UsbDeviceFilter(
    bool has_vendor_id_in,
    uint16_t vendor_id_in,
    bool has_product_id_in,
    uint16_t product_id_in,
    bool has_class_code_in,
    uint8_t class_code_in,
    bool has_subclass_code_in,
    uint8_t subclass_code_in,
    bool has_protocol_code_in,
    uint8_t protocol_code_in,
    const ::WTF::String& serial_number_in)
    : has_vendor_id(std::move(has_vendor_id_in)),
      vendor_id(std::move(vendor_id_in)),
      has_product_id(std::move(has_product_id_in)),
      product_id(std::move(product_id_in)),
      has_class_code(std::move(has_class_code_in)),
      class_code(std::move(class_code_in)),
      has_subclass_code(std::move(has_subclass_code_in)),
      subclass_code(std::move(subclass_code_in)),
      has_protocol_code(std::move(has_protocol_code_in)),
      protocol_code(std::move(protocol_code_in)),
      serial_number(std::move(serial_number_in)) {}

UsbDeviceFilter::~UsbDeviceFilter() = default;

void UsbDeviceFilter::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_vendor_id"), this->has_vendor_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "vendor_id"), this->vendor_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_product_id"), this->has_product_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "product_id"), this->product_id,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint16_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_class_code"), this->has_class_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "class_code"), this->class_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_subclass_code"), this->has_subclass_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "subclass_code"), this->subclass_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "has_protocol_code"), this->has_protocol_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "protocol_code"), this->protocol_code,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint8_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "serial_number"), this->serial_number,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::WTF::String&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool UsbDeviceFilter::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
UsbEnumerationOptions::UsbEnumerationOptions()
    : filters() {}

UsbEnumerationOptions::UsbEnumerationOptions(
    WTF::Vector<UsbDeviceFilterPtr> filters_in)
    : filters(std::move(filters_in)) {}

UsbEnumerationOptions::~UsbEnumerationOptions() = default;

void UsbEnumerationOptions::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "filters"), this->filters,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type WTF::Vector<UsbDeviceFilterPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool UsbEnumerationOptions::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace device


namespace mojo {


// static
bool StructTraits<::device::mojom::blink::UsbDeviceFilter::DataView, ::device::mojom::blink::UsbDeviceFilterPtr>::Read(
    ::device::mojom::blink::UsbDeviceFilter::DataView input,
    ::device::mojom::blink::UsbDeviceFilterPtr* output) {
  bool success = true;
  ::device::mojom::blink::UsbDeviceFilterPtr result(::device::mojom::blink::UsbDeviceFilter::New());
  
      if (success)
        result->has_vendor_id = input.has_vendor_id();
      if (success)
        result->vendor_id = input.vendor_id();
      if (success)
        result->has_product_id = input.has_product_id();
      if (success)
        result->product_id = input.product_id();
      if (success)
        result->has_class_code = input.has_class_code();
      if (success)
        result->class_code = input.class_code();
      if (success)
        result->has_subclass_code = input.has_subclass_code();
      if (success)
        result->subclass_code = input.subclass_code();
      if (success)
        result->has_protocol_code = input.has_protocol_code();
      if (success)
        result->protocol_code = input.protocol_code();
      if (success && !input.ReadSerialNumber(&result->serial_number))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::device::mojom::blink::UsbEnumerationOptions::DataView, ::device::mojom::blink::UsbEnumerationOptionsPtr>::Read(
    ::device::mojom::blink::UsbEnumerationOptions::DataView input,
    ::device::mojom::blink::UsbEnumerationOptionsPtr* output) {
  bool success = true;
  ::device::mojom::blink::UsbEnumerationOptionsPtr result(::device::mojom::blink::UsbEnumerationOptions::New());
  
      if (success && !input.ReadFilters(&result->filters))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace device {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace device


#if defined(__clang__)
#pragma clang diagnostic pop
#endif