// services/device/public/mojom/device_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  DeviceService_BindDevicePostureProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindDevicePostureProvider_Params_Data>;

  DeviceService_BindDevicePostureProvider_Params_Data();
  ~DeviceService_BindDevicePostureProvider_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindDevicePostureProvider_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindDevicePostureProvider_Params_Data)");
class  DeviceService_BindFingerprint_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindFingerprint_Params_Data>;

  DeviceService_BindFingerprint_Params_Data();
  ~DeviceService_BindFingerprint_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindFingerprint_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindFingerprint_Params_Data)");
class  DeviceService_BindGeolocationConfig_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindGeolocationConfig_Params_Data>;

  DeviceService_BindGeolocationConfig_Params_Data();
  ~DeviceService_BindGeolocationConfig_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindGeolocationConfig_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindGeolocationConfig_Params_Data)");
class  DeviceService_BindGeolocationContext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindGeolocationContext_Params_Data>;

  DeviceService_BindGeolocationContext_Params_Data();
  ~DeviceService_BindGeolocationContext_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindGeolocationContext_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindGeolocationContext_Params_Data)");
class  DeviceService_BindGeolocationControl_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindGeolocationControl_Params_Data>;

  DeviceService_BindGeolocationControl_Params_Data();
  ~DeviceService_BindGeolocationControl_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindGeolocationControl_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindGeolocationControl_Params_Data)");
class  DeviceService_BindBatteryMonitor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindBatteryMonitor_Params_Data>;

  DeviceService_BindBatteryMonitor_Params_Data();
  ~DeviceService_BindBatteryMonitor_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindBatteryMonitor_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindBatteryMonitor_Params_Data)");
class  DeviceService_BindPressureManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindPressureManager_Params_Data>;

  DeviceService_BindPressureManager_Params_Data();
  ~DeviceService_BindPressureManager_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindPressureManager_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindPressureManager_Params_Data)");
class  DeviceService_BindNFCProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindNFCProvider_Params_Data>;

  DeviceService_BindNFCProvider_Params_Data();
  ~DeviceService_BindNFCProvider_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindNFCProvider_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindNFCProvider_Params_Data)");
class  DeviceService_BindVibrationManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindVibrationManager_Params_Data>;

  DeviceService_BindVibrationManager_Params_Data();
  ~DeviceService_BindVibrationManager_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindVibrationManager_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindVibrationManager_Params_Data)");
class  DeviceService_BindPowerMonitor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindPowerMonitor_Params_Data>;

  DeviceService_BindPowerMonitor_Params_Data();
  ~DeviceService_BindPowerMonitor_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindPowerMonitor_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindPowerMonitor_Params_Data)");
class  DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data>;

  DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data();
  ~DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data)");
class  DeviceService_BindScreenOrientationListener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindScreenOrientationListener_Params_Data>;

  DeviceService_BindScreenOrientationListener_Params_Data();
  ~DeviceService_BindScreenOrientationListener_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindScreenOrientationListener_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindScreenOrientationListener_Params_Data)");
class  DeviceService_BindSensorProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindSensorProvider_Params_Data>;

  DeviceService_BindSensorProvider_Params_Data();
  ~DeviceService_BindSensorProvider_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindSensorProvider_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindSensorProvider_Params_Data)");
class  DeviceService_BindSerialPortManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindSerialPortManager_Params_Data>;

  DeviceService_BindSerialPortManager_Params_Data();
  ~DeviceService_BindSerialPortManager_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindSerialPortManager_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindSerialPortManager_Params_Data)");
class  DeviceService_BindTimeZoneMonitor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindTimeZoneMonitor_Params_Data>;

  DeviceService_BindTimeZoneMonitor_Params_Data();
  ~DeviceService_BindTimeZoneMonitor_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindTimeZoneMonitor_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindTimeZoneMonitor_Params_Data)");
class  DeviceService_BindWakeLockProvider_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindWakeLockProvider_Params_Data>;

  DeviceService_BindWakeLockProvider_Params_Data();
  ~DeviceService_BindWakeLockProvider_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindWakeLockProvider_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindWakeLockProvider_Params_Data)");
class  DeviceService_BindUsbDeviceManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindUsbDeviceManager_Params_Data>;

  DeviceService_BindUsbDeviceManager_Params_Data();
  ~DeviceService_BindUsbDeviceManager_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindUsbDeviceManager_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindUsbDeviceManager_Params_Data)");
class  DeviceService_BindUsbDeviceManagerTest_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DeviceService_BindUsbDeviceManagerTest_Params_Data>;

  DeviceService_BindUsbDeviceManagerTest_Params_Data();
  ~DeviceService_BindUsbDeviceManagerTest_Params_Data() = delete;
};
static_assert(sizeof(DeviceService_BindUsbDeviceManagerTest_Params_Data) == 16,
              "Bad sizeof(DeviceService_BindUsbDeviceManagerTest_Params_Data)");

}  // namespace internal


class DeviceService_BindDevicePostureProvider_ParamsDataView {
 public:
  DeviceService_BindDevicePostureProvider_ParamsDataView() = default;

  DeviceService_BindDevicePostureProvider_ParamsDataView(
      internal::DeviceService_BindDevicePostureProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::DevicePostureProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindDevicePostureProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindFingerprint_ParamsDataView {
 public:
  DeviceService_BindFingerprint_ParamsDataView() = default;

  DeviceService_BindFingerprint_ParamsDataView(
      internal::DeviceService_BindFingerprint_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::FingerprintInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindFingerprint_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindGeolocationConfig_ParamsDataView {
 public:
  DeviceService_BindGeolocationConfig_ParamsDataView() = default;

  DeviceService_BindGeolocationConfig_ParamsDataView(
      internal::DeviceService_BindGeolocationConfig_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationConfigInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindGeolocationConfig_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindGeolocationContext_ParamsDataView {
 public:
  DeviceService_BindGeolocationContext_ParamsDataView() = default;

  DeviceService_BindGeolocationContext_ParamsDataView(
      internal::DeviceService_BindGeolocationContext_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationContextInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindGeolocationContext_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindGeolocationControl_ParamsDataView {
 public:
  DeviceService_BindGeolocationControl_ParamsDataView() = default;

  DeviceService_BindGeolocationControl_ParamsDataView(
      internal::DeviceService_BindGeolocationControl_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::GeolocationControlInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindGeolocationControl_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindBatteryMonitor_ParamsDataView {
 public:
  DeviceService_BindBatteryMonitor_ParamsDataView() = default;

  DeviceService_BindBatteryMonitor_ParamsDataView(
      internal::DeviceService_BindBatteryMonitor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::BatteryMonitorInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindBatteryMonitor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindPressureManager_ParamsDataView {
 public:
  DeviceService_BindPressureManager_ParamsDataView() = default;

  DeviceService_BindPressureManager_ParamsDataView(
      internal::DeviceService_BindPressureManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::PressureManagerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindPressureManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindNFCProvider_ParamsDataView {
 public:
  DeviceService_BindNFCProvider_ParamsDataView() = default;

  DeviceService_BindNFCProvider_ParamsDataView(
      internal::DeviceService_BindNFCProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::NFCProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindNFCProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindVibrationManager_ParamsDataView {
 public:
  DeviceService_BindVibrationManager_ParamsDataView() = default;

  DeviceService_BindVibrationManager_ParamsDataView(
      internal::DeviceService_BindVibrationManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::VibrationManagerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindVibrationManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindPowerMonitor_ParamsDataView {
 public:
  DeviceService_BindPowerMonitor_ParamsDataView() = default;

  DeviceService_BindPowerMonitor_ParamsDataView(
      internal::DeviceService_BindPowerMonitor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::PowerMonitorInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindPowerMonitor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindPublicIpAddressGeolocationProvider_ParamsDataView {
 public:
  DeviceService_BindPublicIpAddressGeolocationProvider_ParamsDataView() = default;

  DeviceService_BindPublicIpAddressGeolocationProvider_ParamsDataView(
      internal::DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::PublicIpAddressGeolocationProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindPublicIpAddressGeolocationProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindScreenOrientationListener_ParamsDataView {
 public:
  DeviceService_BindScreenOrientationListener_ParamsDataView() = default;

  DeviceService_BindScreenOrientationListener_ParamsDataView(
      internal::DeviceService_BindScreenOrientationListener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::ScreenOrientationListenerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindScreenOrientationListener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindSensorProvider_ParamsDataView {
 public:
  DeviceService_BindSensorProvider_ParamsDataView() = default;

  DeviceService_BindSensorProvider_ParamsDataView(
      internal::DeviceService_BindSensorProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::SensorProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindSensorProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindSerialPortManager_ParamsDataView {
 public:
  DeviceService_BindSerialPortManager_ParamsDataView() = default;

  DeviceService_BindSerialPortManager_ParamsDataView(
      internal::DeviceService_BindSerialPortManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::SerialPortManagerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindSerialPortManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindTimeZoneMonitor_ParamsDataView {
 public:
  DeviceService_BindTimeZoneMonitor_ParamsDataView() = default;

  DeviceService_BindTimeZoneMonitor_ParamsDataView(
      internal::DeviceService_BindTimeZoneMonitor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::TimeZoneMonitorInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindTimeZoneMonitor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindWakeLockProvider_ParamsDataView {
 public:
  DeviceService_BindWakeLockProvider_ParamsDataView() = default;

  DeviceService_BindWakeLockProvider_ParamsDataView(
      internal::DeviceService_BindWakeLockProvider_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::WakeLockProviderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindWakeLockProvider_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindUsbDeviceManager_ParamsDataView {
 public:
  DeviceService_BindUsbDeviceManager_ParamsDataView() = default;

  DeviceService_BindUsbDeviceManager_ParamsDataView(
      internal::DeviceService_BindUsbDeviceManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceManagerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindUsbDeviceManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DeviceService_BindUsbDeviceManagerTest_ParamsDataView {
 public:
  DeviceService_BindUsbDeviceManagerTest_ParamsDataView() = default;

  DeviceService_BindUsbDeviceManagerTest_ParamsDataView(
      internal::DeviceService_BindUsbDeviceManagerTest_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::device::mojom::UsbDeviceManagerTestInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceService_BindUsbDeviceManagerTest_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};





































}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_SERVICE_MOJOM_PARAMS_DATA_H_