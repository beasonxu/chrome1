// services/device/public/mojom/device_posture_provider.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_POSTURE_PROVIDER_MOJOM_BLINK_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_POSTURE_PROVIDER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/device/public/mojom/device_posture_provider.mojom-shared.h"
#include "services/device/public/mojom/device_posture_provider.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "third_party/blink/public/platform/web_common.h"




namespace WTF {
struct device_mojom_internal_DevicePostureType_DataHashFn {
  static unsigned GetHash(const ::device::mojom::DevicePostureType& value) {
    using utype = std::underlying_type<::device::mojom::DevicePostureType>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::device::mojom::DevicePostureType& left, const ::device::mojom::DevicePostureType& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::device::mojom::DevicePostureType>
    : public GenericHashTraits<::device::mojom::DevicePostureType> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::device::mojom::DevicePostureType EmptyValue() { return static_cast<::device::mojom::DevicePostureType>(-1000000); }
  static void ConstructDeletedValue(::device::mojom::DevicePostureType& slot, bool) {
    slot = static_cast<::device::mojom::DevicePostureType>(-1000001);
  }
  static bool IsDeletedValue(const ::device::mojom::DevicePostureType& value) {
    return value == static_cast<::device::mojom::DevicePostureType>(-1000001);
  }
};
}  // namespace WTF


namespace device {
namespace mojom {
namespace blink {

class DevicePostureProviderProxy;

template <typename ImplRefTraits>
class DevicePostureProviderStub;

class DevicePostureProviderRequestValidator;
class DevicePostureProviderResponseValidator;


class BLINK_PLATFORM_EXPORT DevicePostureProvider
    : public DevicePostureProviderInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DevicePostureProviderInterfaceBase;
  using Proxy_ = DevicePostureProviderProxy;

  template <typename ImplRefTraits>
  using Stub_ = DevicePostureProviderStub<ImplRefTraits>;

  using RequestValidator_ = DevicePostureProviderRequestValidator;
  using ResponseValidator_ = DevicePostureProviderResponseValidator;
  enum MethodMinVersions : uint32_t {
    kAddListenerAndGetCurrentPostureMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct AddListenerAndGetCurrentPosture_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DevicePostureProvider() = default;


  using AddListenerAndGetCurrentPostureCallback = base::OnceCallback<void(DevicePostureType)>;
  
  virtual void AddListenerAndGetCurrentPosture(::mojo::PendingRemote<DevicePostureProviderClient> client, AddListenerAndGetCurrentPostureCallback callback) = 0;
};

class DevicePostureProviderClientProxy;

template <typename ImplRefTraits>
class DevicePostureProviderClientStub;

class DevicePostureProviderClientRequestValidator;


class BLINK_PLATFORM_EXPORT DevicePostureProviderClient
    : public DevicePostureProviderClientInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DevicePostureProviderClientInterfaceBase;
  using Proxy_ = DevicePostureProviderClientProxy;

  template <typename ImplRefTraits>
  using Stub_ = DevicePostureProviderClientStub<ImplRefTraits>;

  using RequestValidator_ = DevicePostureProviderClientRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnPostureChangedMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnPostureChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DevicePostureProviderClient() = default;

  
  virtual void OnPostureChanged(DevicePostureType posture) = 0;
};



class BLINK_PLATFORM_EXPORT DevicePostureProviderProxy
    : public DevicePostureProvider {
 public:
  using InterfaceType = DevicePostureProvider;

  explicit DevicePostureProviderProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void AddListenerAndGetCurrentPosture(::mojo::PendingRemote<DevicePostureProviderClient> client, AddListenerAndGetCurrentPostureCallback callback) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class BLINK_PLATFORM_EXPORT DevicePostureProviderClientProxy
    : public DevicePostureProviderClient {
 public:
  using InterfaceType = DevicePostureProviderClient;

  explicit DevicePostureProviderClientProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnPostureChanged(DevicePostureType posture) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT DevicePostureProviderStubDispatch {
 public:
  static bool Accept(DevicePostureProvider* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DevicePostureProvider* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DevicePostureProvider>>
class DevicePostureProviderStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DevicePostureProviderStub() = default;
  ~DevicePostureProviderStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DevicePostureProviderStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DevicePostureProviderStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT DevicePostureProviderClientStubDispatch {
 public:
  static bool Accept(DevicePostureProviderClient* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DevicePostureProviderClient* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DevicePostureProviderClient>>
class DevicePostureProviderClientStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DevicePostureProviderClientStub() = default;
  ~DevicePostureProviderClientStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DevicePostureProviderClientStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DevicePostureProviderClientStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT DevicePostureProviderRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT DevicePostureProviderClientRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class BLINK_PLATFORM_EXPORT DevicePostureProviderResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace blink
}  // namespace mojom
}  // namespace device

namespace mojo {

}  // namespace mojo

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_DEVICE_POSTURE_PROVIDER_MOJOM_BLINK_H_