// services/device/public/mojom/usb_manager_client.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_CLIENT_MOJOM_PARAMS_DATA_H_
#define SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_CLIENT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace device {
namespace mojom {
namespace internal {

class ValidationContext;
class  UsbDeviceManagerClient_OnDeviceAdded_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::UsbDeviceInfo_Data> device_info;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerClient_OnDeviceAdded_Params_Data>;

  UsbDeviceManagerClient_OnDeviceAdded_Params_Data();
  ~UsbDeviceManagerClient_OnDeviceAdded_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerClient_OnDeviceAdded_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManagerClient_OnDeviceAdded_Params_Data)");
class  UsbDeviceManagerClient_OnDeviceRemoved_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::device::mojom::internal::UsbDeviceInfo_Data> device_info;

 private:
  friend class mojo::internal::MessageFragment<UsbDeviceManagerClient_OnDeviceRemoved_Params_Data>;

  UsbDeviceManagerClient_OnDeviceRemoved_Params_Data();
  ~UsbDeviceManagerClient_OnDeviceRemoved_Params_Data() = delete;
};
static_assert(sizeof(UsbDeviceManagerClient_OnDeviceRemoved_Params_Data) == 16,
              "Bad sizeof(UsbDeviceManagerClient_OnDeviceRemoved_Params_Data)");

}  // namespace internal


class UsbDeviceManagerClient_OnDeviceAdded_ParamsDataView {
 public:
  UsbDeviceManagerClient_OnDeviceAdded_ParamsDataView() = default;

  UsbDeviceManagerClient_OnDeviceAdded_ParamsDataView(
      internal::UsbDeviceManagerClient_OnDeviceAdded_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::device::mojom::UsbDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::device::mojom::UsbDeviceInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManagerClient_OnDeviceAdded_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class UsbDeviceManagerClient_OnDeviceRemoved_ParamsDataView {
 public:
  UsbDeviceManagerClient_OnDeviceRemoved_ParamsDataView() = default;

  UsbDeviceManagerClient_OnDeviceRemoved_ParamsDataView(
      internal::UsbDeviceManagerClient_OnDeviceRemoved_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeviceInfoDataView(
      ::device::mojom::UsbDeviceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeviceInfo(UserType* output) {
    
    auto* pointer = data_->device_info.Get();
    return mojo::internal::Deserialize<::device::mojom::UsbDeviceInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::UsbDeviceManagerClient_OnDeviceRemoved_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void UsbDeviceManagerClient_OnDeviceAdded_ParamsDataView::GetDeviceInfoDataView(
    ::device::mojom::UsbDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::device::mojom::UsbDeviceInfoDataView(pointer, message_);
}


inline void UsbDeviceManagerClient_OnDeviceRemoved_ParamsDataView::GetDeviceInfoDataView(
    ::device::mojom::UsbDeviceInfoDataView* output) {
  auto pointer = data_->device_info.Get();
  *output = ::device::mojom::UsbDeviceInfoDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace device

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DEVICE_PUBLIC_MOJOM_USB_MANAGER_CLIENT_MOJOM_PARAMS_DATA_H_