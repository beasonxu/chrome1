// services/data_decoder/public/mojom/gzipper.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_GZIPPER_MOJOM_PARAMS_DATA_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_GZIPPER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace data_decoder {
namespace mojom {
namespace internal {

class ValidationContext;
class  Gzipper_Deflate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Deflate_Params_Data>;

  Gzipper_Deflate_Params_Data();
  ~Gzipper_Deflate_Params_Data() = delete;
};
static_assert(sizeof(Gzipper_Deflate_Params_Data) == 24,
              "Bad sizeof(Gzipper_Deflate_Params_Data)");
class  Gzipper_Deflate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data deflated_data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Deflate_ResponseParams_Data>;

  Gzipper_Deflate_ResponseParams_Data();
  ~Gzipper_Deflate_ResponseParams_Data() = delete;
};
static_assert(sizeof(Gzipper_Deflate_ResponseParams_Data) == 24,
              "Bad sizeof(Gzipper_Deflate_ResponseParams_Data)");
class  Gzipper_Inflate_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data data;
  uint64_t max_uncompressed_size;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Inflate_Params_Data>;

  Gzipper_Inflate_Params_Data();
  ~Gzipper_Inflate_Params_Data() = delete;
};
static_assert(sizeof(Gzipper_Inflate_Params_Data) == 32,
              "Bad sizeof(Gzipper_Inflate_Params_Data)");
class  Gzipper_Inflate_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data inflated_data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Inflate_ResponseParams_Data>;

  Gzipper_Inflate_ResponseParams_Data();
  ~Gzipper_Inflate_ResponseParams_Data() = delete;
};
static_assert(sizeof(Gzipper_Inflate_ResponseParams_Data) == 24,
              "Bad sizeof(Gzipper_Inflate_ResponseParams_Data)");
class  Gzipper_Compress_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Compress_Params_Data>;

  Gzipper_Compress_Params_Data();
  ~Gzipper_Compress_Params_Data() = delete;
};
static_assert(sizeof(Gzipper_Compress_Params_Data) == 24,
              "Bad sizeof(Gzipper_Compress_Params_Data)");
class  Gzipper_Compress_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data compressed_data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Compress_ResponseParams_Data>;

  Gzipper_Compress_ResponseParams_Data();
  ~Gzipper_Compress_ResponseParams_Data() = delete;
};
static_assert(sizeof(Gzipper_Compress_ResponseParams_Data) == 24,
              "Bad sizeof(Gzipper_Compress_ResponseParams_Data)");
class  Gzipper_Uncompress_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data compressed_data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Uncompress_Params_Data>;

  Gzipper_Uncompress_Params_Data();
  ~Gzipper_Uncompress_Params_Data() = delete;
};
static_assert(sizeof(Gzipper_Uncompress_Params_Data) == 24,
              "Bad sizeof(Gzipper_Uncompress_Params_Data)");
class  Gzipper_Uncompress_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data data;

 private:
  friend class mojo::internal::MessageFragment<Gzipper_Uncompress_ResponseParams_Data>;

  Gzipper_Uncompress_ResponseParams_Data();
  ~Gzipper_Uncompress_ResponseParams_Data() = delete;
};
static_assert(sizeof(Gzipper_Uncompress_ResponseParams_Data) == 24,
              "Bad sizeof(Gzipper_Uncompress_ResponseParams_Data)");

}  // namespace internal


class Gzipper_Deflate_ParamsDataView {
 public:
  Gzipper_Deflate_ParamsDataView() = default;

  Gzipper_Deflate_ParamsDataView(
      internal::Gzipper_Deflate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Deflate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Deflate_ResponseParamsDataView {
 public:
  Gzipper_Deflate_ResponseParamsDataView() = default;

  Gzipper_Deflate_ResponseParamsDataView(
      internal::Gzipper_Deflate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDeflatedDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDeflatedData(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigBufferDataView, UserType>(),
    "Attempting to read the optional `deflated_data` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadDeflatedData` instead "
    "of `ReadDeflatedData if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->deflated_data.is_null() ? &data_->deflated_data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Deflate_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Inflate_ParamsDataView {
 public:
  Gzipper_Inflate_ParamsDataView() = default;

  Gzipper_Inflate_ParamsDataView(
      internal::Gzipper_Inflate_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
  uint64_t max_uncompressed_size() const {
    return data_->max_uncompressed_size;
  }
 private:
  internal::Gzipper_Inflate_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Inflate_ResponseParamsDataView {
 public:
  Gzipper_Inflate_ResponseParamsDataView() = default;

  Gzipper_Inflate_ResponseParamsDataView(
      internal::Gzipper_Inflate_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInflatedDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInflatedData(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigBufferDataView, UserType>(),
    "Attempting to read the optional `inflated_data` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInflatedData` instead "
    "of `ReadInflatedData if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->inflated_data.is_null() ? &data_->inflated_data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Inflate_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Compress_ParamsDataView {
 public:
  Gzipper_Compress_ParamsDataView() = default;

  Gzipper_Compress_ParamsDataView(
      internal::Gzipper_Compress_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Compress_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Compress_ResponseParamsDataView {
 public:
  Gzipper_Compress_ResponseParamsDataView() = default;

  Gzipper_Compress_ResponseParamsDataView(
      internal::Gzipper_Compress_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCompressedDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCompressedData(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigBufferDataView, UserType>(),
    "Attempting to read the optional `compressed_data` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCompressedData` instead "
    "of `ReadCompressedData if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->compressed_data.is_null() ? &data_->compressed_data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Compress_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Uncompress_ParamsDataView {
 public:
  Gzipper_Uncompress_ParamsDataView() = default;

  Gzipper_Uncompress_ParamsDataView(
      internal::Gzipper_Uncompress_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCompressedDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCompressedData(UserType* output) {
    
    auto* pointer = !data_->compressed_data.is_null() ? &data_->compressed_data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Uncompress_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class Gzipper_Uncompress_ResponseParamsDataView {
 public:
  Gzipper_Uncompress_ResponseParamsDataView() = default;

  Gzipper_Uncompress_ResponseParamsDataView(
      internal::Gzipper_Uncompress_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigBufferDataView, UserType>(),
    "Attempting to read the optional `data` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadData` instead "
    "of `ReadData if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::Gzipper_Uncompress_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void Gzipper_Deflate_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Deflate_ResponseParamsDataView::GetDeflatedDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->deflated_data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Inflate_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Inflate_ResponseParamsDataView::GetInflatedDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->inflated_data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Compress_ParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Compress_ResponseParamsDataView::GetCompressedDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->compressed_data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Uncompress_ParamsDataView::GetCompressedDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->compressed_data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}


inline void Gzipper_Uncompress_ResponseParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace data_decoder

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DATA_DECODER_PUBLIC_MOJOM_GZIPPER_MOJOM_PARAMS_DATA_H_