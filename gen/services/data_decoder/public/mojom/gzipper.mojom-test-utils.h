// services/data_decoder/public/mojom/gzipper.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_GZIPPER_MOJOM_TEST_UTILS_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_GZIPPER_MOJOM_TEST_UTILS_H_

#include "services/data_decoder/public/mojom/gzipper.mojom.h"


namespace data_decoder {
namespace mojom {


class  GzipperInterceptorForTesting : public Gzipper {
  virtual Gzipper* GetForwardingInterface() = 0;
  void Deflate(::mojo_base::BigBuffer data, DeflateCallback callback) override;
  void Inflate(::mojo_base::BigBuffer data, uint64_t max_uncompressed_size, InflateCallback callback) override;
  void Compress(::mojo_base::BigBuffer data, CompressCallback callback) override;
  void Uncompress(::mojo_base::BigBuffer compressed_data, UncompressCallback callback) override;
};
class  GzipperAsyncWaiter {
 public:
  explicit GzipperAsyncWaiter(Gzipper* proxy);

  GzipperAsyncWaiter(const GzipperAsyncWaiter&) = delete;
  GzipperAsyncWaiter& operator=(const GzipperAsyncWaiter&) = delete;

  ~GzipperAsyncWaiter();
  void Deflate(
      ::mojo_base::BigBuffer data, absl::optional<::mojo_base::BigBuffer>* out_deflated_data);
  void Inflate(
      ::mojo_base::BigBuffer data, uint64_t max_uncompressed_size, absl::optional<::mojo_base::BigBuffer>* out_inflated_data);
  void Compress(
      ::mojo_base::BigBuffer data, absl::optional<::mojo_base::BigBuffer>* out_compressed_data);
  void Uncompress(
      ::mojo_base::BigBuffer compressed_data, absl::optional<::mojo_base::BigBuffer>* out_data);

 private:
  Gzipper* const proxy_;
};




}  // namespace mojom
}  // namespace data_decoder

#endif  // SERVICES_DATA_DECODER_PUBLIC_MOJOM_GZIPPER_MOJOM_TEST_UTILS_H_