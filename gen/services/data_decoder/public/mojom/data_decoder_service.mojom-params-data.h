// services/data_decoder/public/mojom/data_decoder_service.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_DATA_DECODER_SERVICE_MOJOM_PARAMS_DATA_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_DATA_DECODER_SERVICE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace data_decoder {
namespace mojom {
namespace internal {

class ValidationContext;
class  DataDecoderService_BindImageDecoder_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DataDecoderService_BindImageDecoder_Params_Data>;

  DataDecoderService_BindImageDecoder_Params_Data();
  ~DataDecoderService_BindImageDecoder_Params_Data() = delete;
};
static_assert(sizeof(DataDecoderService_BindImageDecoder_Params_Data) == 16,
              "Bad sizeof(DataDecoderService_BindImageDecoder_Params_Data)");
class  DataDecoderService_BindJsonParser_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DataDecoderService_BindJsonParser_Params_Data>;

  DataDecoderService_BindJsonParser_Params_Data();
  ~DataDecoderService_BindJsonParser_Params_Data() = delete;
};
static_assert(sizeof(DataDecoderService_BindJsonParser_Params_Data) == 16,
              "Bad sizeof(DataDecoderService_BindJsonParser_Params_Data)");
class  DataDecoderService_BindXmlParser_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data reciever;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DataDecoderService_BindXmlParser_Params_Data>;

  DataDecoderService_BindXmlParser_Params_Data();
  ~DataDecoderService_BindXmlParser_Params_Data() = delete;
};
static_assert(sizeof(DataDecoderService_BindXmlParser_Params_Data) == 16,
              "Bad sizeof(DataDecoderService_BindXmlParser_Params_Data)");
class  DataDecoderService_BindWebBundleParserFactory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DataDecoderService_BindWebBundleParserFactory_Params_Data>;

  DataDecoderService_BindWebBundleParserFactory_Params_Data();
  ~DataDecoderService_BindWebBundleParserFactory_Params_Data() = delete;
};
static_assert(sizeof(DataDecoderService_BindWebBundleParserFactory_Params_Data) == 16,
              "Bad sizeof(DataDecoderService_BindWebBundleParserFactory_Params_Data)");
class  DataDecoderService_BindWebBundler_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DataDecoderService_BindWebBundler_Params_Data>;

  DataDecoderService_BindWebBundler_Params_Data();
  ~DataDecoderService_BindWebBundler_Params_Data() = delete;
};
static_assert(sizeof(DataDecoderService_BindWebBundler_Params_Data) == 16,
              "Bad sizeof(DataDecoderService_BindWebBundler_Params_Data)");
class  DataDecoderService_BindGzipper_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<DataDecoderService_BindGzipper_Params_Data>;

  DataDecoderService_BindGzipper_Params_Data();
  ~DataDecoderService_BindGzipper_Params_Data() = delete;
};
static_assert(sizeof(DataDecoderService_BindGzipper_Params_Data) == 16,
              "Bad sizeof(DataDecoderService_BindGzipper_Params_Data)");

}  // namespace internal


class DataDecoderService_BindImageDecoder_ParamsDataView {
 public:
  DataDecoderService_BindImageDecoder_ParamsDataView() = default;

  DataDecoderService_BindImageDecoder_ParamsDataView(
      internal::DataDecoderService_BindImageDecoder_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::ImageDecoderInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataDecoderService_BindImageDecoder_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DataDecoderService_BindJsonParser_ParamsDataView {
 public:
  DataDecoderService_BindJsonParser_ParamsDataView() = default;

  DataDecoderService_BindJsonParser_ParamsDataView(
      internal::DataDecoderService_BindJsonParser_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::JsonParserInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataDecoderService_BindJsonParser_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DataDecoderService_BindXmlParser_ParamsDataView {
 public:
  DataDecoderService_BindXmlParser_ParamsDataView() = default;

  DataDecoderService_BindXmlParser_ParamsDataView(
      internal::DataDecoderService_BindXmlParser_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReciever() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::XmlParserInterfaceBase>>(
            &data_->reciever, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataDecoderService_BindXmlParser_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DataDecoderService_BindWebBundleParserFactory_ParamsDataView {
 public:
  DataDecoderService_BindWebBundleParserFactory_ParamsDataView() = default;

  DataDecoderService_BindWebBundleParserFactory_ParamsDataView(
      internal::DataDecoderService_BindWebBundleParserFactory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::web_package::mojom::WebBundleParserFactoryInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataDecoderService_BindWebBundleParserFactory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DataDecoderService_BindWebBundler_ParamsDataView {
 public:
  DataDecoderService_BindWebBundler_ParamsDataView() = default;

  DataDecoderService_BindWebBundler_ParamsDataView(
      internal::DataDecoderService_BindWebBundler_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::WebBundlerInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataDecoderService_BindWebBundler_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class DataDecoderService_BindGzipper_ParamsDataView {
 public:
  DataDecoderService_BindGzipper_ParamsDataView() = default;

  DataDecoderService_BindGzipper_ParamsDataView(
      internal::DataDecoderService_BindGzipper_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::data_decoder::mojom::GzipperInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DataDecoderService_BindGzipper_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};













}  // namespace mojom
}  // namespace data_decoder

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DATA_DECODER_PUBLIC_MOJOM_DATA_DECODER_SERVICE_MOJOM_PARAMS_DATA_H_