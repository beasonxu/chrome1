// services/data_decoder/public/mojom/resource_snapshot_for_web_bundle.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_DATA_DECODER_PUBLIC_MOJOM_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_MOJOM_PARAMS_DATA_H_
#define SERVICES_DATA_DECODER_PUBLIC_MOJOM_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace data_decoder {
namespace mojom {
namespace internal {

class ValidationContext;
class  ResourceSnapshotForWebBundle_GetResourceCount_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<ResourceSnapshotForWebBundle_GetResourceCount_Params_Data>;

  ResourceSnapshotForWebBundle_GetResourceCount_Params_Data();
  ~ResourceSnapshotForWebBundle_GetResourceCount_Params_Data() = delete;
};
static_assert(sizeof(ResourceSnapshotForWebBundle_GetResourceCount_Params_Data) == 8,
              "Bad sizeof(ResourceSnapshotForWebBundle_GetResourceCount_Params_Data)");
class  ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t count;

 private:
  friend class mojo::internal::MessageFragment<ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data>;

  ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data();
  ~ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data() = delete;
};
static_assert(sizeof(ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data) == 16,
              "Bad sizeof(ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data)");
class  ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t index;

 private:
  friend class mojo::internal::MessageFragment<ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data>;

  ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data();
  ~ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data() = delete;
};
static_assert(sizeof(ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data) == 16,
              "Bad sizeof(ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data)");
class  ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::SerializedResourceInfo_Data> info;

 private:
  friend class mojo::internal::MessageFragment<ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data>;

  ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data();
  ~ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data) == 16,
              "Bad sizeof(ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data)");
class  ResourceSnapshotForWebBundle_GetResourceBody_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t index;

 private:
  friend class mojo::internal::MessageFragment<ResourceSnapshotForWebBundle_GetResourceBody_Params_Data>;

  ResourceSnapshotForWebBundle_GetResourceBody_Params_Data();
  ~ResourceSnapshotForWebBundle_GetResourceBody_Params_Data() = delete;
};
static_assert(sizeof(ResourceSnapshotForWebBundle_GetResourceBody_Params_Data) == 16,
              "Bad sizeof(ResourceSnapshotForWebBundle_GetResourceBody_Params_Data)");
class  ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data data;

 private:
  friend class mojo::internal::MessageFragment<ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data>;

  ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data();
  ~ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data() = delete;
};
static_assert(sizeof(ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data) == 24,
              "Bad sizeof(ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data)");

}  // namespace internal


class ResourceSnapshotForWebBundle_GetResourceCount_ParamsDataView {
 public:
  ResourceSnapshotForWebBundle_GetResourceCount_ParamsDataView() = default;

  ResourceSnapshotForWebBundle_GetResourceCount_ParamsDataView(
      internal::ResourceSnapshotForWebBundle_GetResourceCount_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::ResourceSnapshotForWebBundle_GetResourceCount_Params_Data* data_ = nullptr;
};



class ResourceSnapshotForWebBundle_GetResourceCount_ResponseParamsDataView {
 public:
  ResourceSnapshotForWebBundle_GetResourceCount_ResponseParamsDataView() = default;

  ResourceSnapshotForWebBundle_GetResourceCount_ResponseParamsDataView(
      internal::ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t count() const {
    return data_->count;
  }
 private:
  internal::ResourceSnapshotForWebBundle_GetResourceCount_ResponseParams_Data* data_ = nullptr;
};



class ResourceSnapshotForWebBundle_GetResourceInfo_ParamsDataView {
 public:
  ResourceSnapshotForWebBundle_GetResourceInfo_ParamsDataView() = default;

  ResourceSnapshotForWebBundle_GetResourceInfo_ParamsDataView(
      internal::ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t index() const {
    return data_->index;
  }
 private:
  internal::ResourceSnapshotForWebBundle_GetResourceInfo_Params_Data* data_ = nullptr;
};



class ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParamsDataView {
 public:
  ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParamsDataView() = default;

  ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParamsDataView(
      internal::ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      SerializedResourceInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::data_decoder::mojom::SerializedResourceInfoDataView, UserType>(),
    "Attempting to read the optional `info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInfo` instead "
    "of `ReadInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::data_decoder::mojom::SerializedResourceInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ResourceSnapshotForWebBundle_GetResourceBody_ParamsDataView {
 public:
  ResourceSnapshotForWebBundle_GetResourceBody_ParamsDataView() = default;

  ResourceSnapshotForWebBundle_GetResourceBody_ParamsDataView(
      internal::ResourceSnapshotForWebBundle_GetResourceBody_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t index() const {
    return data_->index;
  }
 private:
  internal::ResourceSnapshotForWebBundle_GetResourceBody_Params_Data* data_ = nullptr;
};



class ResourceSnapshotForWebBundle_GetResourceBody_ResponseParamsDataView {
 public:
  ResourceSnapshotForWebBundle_GetResourceBody_ResponseParamsDataView() = default;

  ResourceSnapshotForWebBundle_GetResourceBody_ResponseParamsDataView(
      internal::ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      ::mojo_base::mojom::BigBufferDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::BigBufferDataView, UserType>(),
    "Attempting to read the optional `data` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadData` instead "
    "of `ReadData if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = !data_->data.is_null() ? &data_->data : nullptr;
    return mojo::internal::Deserialize<::mojo_base::mojom::BigBufferDataView>(
        pointer, output, message_);
  }
 private:
  internal::ResourceSnapshotForWebBundle_GetResourceBody_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};








inline void ResourceSnapshotForWebBundle_GetResourceInfo_ResponseParamsDataView::GetInfoDataView(
    SerializedResourceInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = SerializedResourceInfoDataView(pointer, message_);
}




inline void ResourceSnapshotForWebBundle_GetResourceBody_ResponseParamsDataView::GetDataDataView(
    ::mojo_base::mojom::BigBufferDataView* output) {
  auto pointer = &data_->data;
  *output = ::mojo_base::mojom::BigBufferDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace data_decoder

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_DATA_DECODER_PUBLIC_MOJOM_RESOURCE_SNAPSHOT_FOR_WEB_BUNDLE_MOJOM_PARAMS_DATA_H_