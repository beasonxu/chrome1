// services/network/public/mojom/network_service.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_TEST_UTILS_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_TEST_UTILS_H_

#include "services/network/public/mojom/network_service.mojom.h"


namespace network {
namespace mojom {


class  NetworkServiceInterceptorForTesting : public NetworkService {
  virtual NetworkService* GetForwardingInterface() = 0;
  void SetParams(NetworkServiceParamsPtr params) override;
  void StartNetLog(::base::File file, ::net::NetLogCaptureMode capture_mode, ::base::Value::Dict constants) override;
  void AttachNetLogProxy(::mojo::PendingRemote<::network::mojom::NetLogProxySource> proxy_source, ::mojo::PendingReceiver<::network::mojom::NetLogProxySink> proxy_sink) override;
  void SetSSLKeyLogFile(::base::File file) override;
  void CreateNetworkContext(::mojo::PendingReceiver<::network::mojom::NetworkContext> context, ::network::mojom::NetworkContextParamsPtr params) override;
  void ConfigureStubHostResolver(bool insecure_dns_client_enabled, ::net::SecureDnsMode secure_dns_mode, const ::net::DnsOverHttpsConfig& dns_over_https_config, bool additional_dns_types_enabled) override;
  void DisableQuic() override;
  void SetUpHttpAuth(HttpAuthStaticParamsPtr http_auth_static_params) override;
  void ConfigureHttpAuthPrefs(HttpAuthDynamicParamsPtr http_auth_dynamic_params) override;
  void SetRawHeadersAccess(int32_t process_id, const std::vector<::url::Origin>& origins) override;
  void SetMaxConnectionsPerProxy(int32_t max_connections) override;
  void GetNetworkChangeManager(::mojo::PendingReceiver<::network::mojom::NetworkChangeManager> network_change_manager) override;
  void GetNetworkQualityEstimatorManager(::mojo::PendingReceiver<::network::mojom::NetworkQualityEstimatorManager> receiver) override;
  void GetDnsConfigChangeManager(::mojo::PendingReceiver<::network::mojom::DnsConfigChangeManager> receiver) override;
  void GetNetworkList(uint32_t policy, GetNetworkListCallback callback) override;
  void UpdateCRLSet(::base::span<const ::uint8_t> crl_set, UpdateCRLSetCallback callback) override;
  void OnCertDBChanged() override;
  void SetEncryptionKey(const std::string& encryption_key) override;
  void OnMemoryPressure(::base::MemoryPressureListener::MemoryPressureLevel memory_pressure_level) override;
  void OnPeerToPeerConnectionsCountChange(uint32_t count) override;
  void OnApplicationStateChange(::base::android::ApplicationState state) override;
  void SetEnvironment(std::vector<EnvironmentVariablePtr> environment) override;
  void SetTrustTokenKeyCommitments(const std::string& raw_commitments, SetTrustTokenKeyCommitmentsCallback callback) override;
  void ClearSCTAuditingCache() override;
  void ConfigureSCTAuditing(SCTAuditingConfigurationPtr configuration) override;
  void UpdateCtLogList(std::vector<::network::mojom::CTLogInfoPtr> log_list, ::base::Time update_time, UpdateCtLogListCallback callback) override;
  void UpdateCtKnownPopularSCTs(const std::vector<std::vector<uint8_t>>& sct_hashes, UpdateCtKnownPopularSCTsCallback callback) override;
  void SetCtEnforcementEnabled(bool enabled, SetCtEnforcementEnabledCallback callback) override;
  void UpdateKeyPinsList(::network::mojom::PinListPtr pin_list, ::base::Time update_time) override;
  void DumpWithoutCrashing(::base::Time dump_request_time) override;
  void BindTestInterface(::mojo::PendingReceiver<::network::mojom::NetworkServiceTest> receiver) override;
  void SetFirstPartySets(const base::flat_map<::net::SchemefulSite, ::net::FirstPartySetEntry>& sets) override;
  void SetExplicitlyAllowedPorts(const std::vector<uint16_t>& ports) override;
  void ParseHeaders(const ::GURL& url, const ::scoped_refptr<::net::HttpResponseHeaders>& headers, ParseHeadersCallback callback) override;
};
class  NetworkServiceAsyncWaiter {
 public:
  explicit NetworkServiceAsyncWaiter(NetworkService* proxy);

  NetworkServiceAsyncWaiter(const NetworkServiceAsyncWaiter&) = delete;
  NetworkServiceAsyncWaiter& operator=(const NetworkServiceAsyncWaiter&) = delete;

  ~NetworkServiceAsyncWaiter();
  void GetNetworkList(
      uint32_t policy, absl::optional<std::vector<::net::NetworkInterface>>* out_networks);
  void UpdateCRLSet(
      ::base::span<const ::uint8_t> crl_set);
  void SetTrustTokenKeyCommitments(
      const std::string& raw_commitments);
  void UpdateCtLogList(
      std::vector<::network::mojom::CTLogInfoPtr> log_list, ::base::Time update_time);
  void UpdateCtKnownPopularSCTs(
      const std::vector<std::vector<uint8_t>>& sct_hashes);
  void SetCtEnforcementEnabled(
      bool enabled);
  void ParseHeaders(
      const ::GURL& url, const ::scoped_refptr<::net::HttpResponseHeaders>& headers, ::network::mojom::ParsedHeadersPtr* out_parsed_headers);

 private:
  NetworkService* const proxy_;
};




}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_SERVICE_MOJOM_TEST_UTILS_H_