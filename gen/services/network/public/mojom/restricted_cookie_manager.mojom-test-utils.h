// services/network/public/mojom/restricted_cookie_manager.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_RESTRICTED_COOKIE_MANAGER_MOJOM_TEST_UTILS_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_RESTRICTED_COOKIE_MANAGER_MOJOM_TEST_UTILS_H_

#include "services/network/public/mojom/restricted_cookie_manager.mojom.h"


namespace network {
namespace mojom {


class  RestrictedCookieManagerInterceptorForTesting : public RestrictedCookieManager {
  virtual RestrictedCookieManager* GetForwardingInterface() = 0;
  void GetAllForUrl(const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, CookieManagerGetOptionsPtr options, bool partitioned_cookies_runtime_feature_enabled, GetAllForUrlCallback callback) override;
  void SetCanonicalCookie(const ::net::CanonicalCookie& cookie, const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, ::net::CookieInclusionStatus status, SetCanonicalCookieCallback callback) override;
  void AddChangeListener(const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, ::mojo::PendingRemote<::network::mojom::CookieChangeListener> listener, AddChangeListenerCallback callback) override;
  void SetCookieFromString(const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, const std::string& cookie, bool partitioned_cookies_runtime_feature_enabled, SetCookieFromStringCallback callback) override;
  void GetCookiesString(const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, bool partitioned_cookies_runtime_feature_enabled, GetCookiesStringCallback callback) override;
  void CookiesEnabledFor(const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, CookiesEnabledForCallback callback) override;
  void ConvertPartitionedCookiesToUnpartitioned(const ::GURL& url) override;
};
class  RestrictedCookieManagerAsyncWaiter {
 public:
  explicit RestrictedCookieManagerAsyncWaiter(RestrictedCookieManager* proxy);

  RestrictedCookieManagerAsyncWaiter(const RestrictedCookieManagerAsyncWaiter&) = delete;
  RestrictedCookieManagerAsyncWaiter& operator=(const RestrictedCookieManagerAsyncWaiter&) = delete;

  ~RestrictedCookieManagerAsyncWaiter();
  void GetAllForUrl(
      const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, CookieManagerGetOptionsPtr options, bool partitioned_cookies_runtime_feature_enabled, std::vector<::net::CookieWithAccessResult>* out_cookies);
  void SetCanonicalCookie(
      const ::net::CanonicalCookie& cookie, const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, ::net::CookieInclusionStatus status, bool* out_success);
  void AddChangeListener(
      const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, ::mojo::PendingRemote<::network::mojom::CookieChangeListener> listener);
  void SetCookieFromString(
      const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, const std::string& cookie, bool partitioned_cookies_runtime_feature_enabled, bool* out_site_for_cookies_ok, bool* out_top_frame_origin_ok);
  void GetCookiesString(
      const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, bool partitioned_cookies_runtime_feature_enabled, std::string* out_cookies);
  void CookiesEnabledFor(
      const ::GURL& url, const ::net::SiteForCookies& site_for_cookies, const ::url::Origin& top_frame_origin, bool* out_cookies_enabled);

 private:
  RestrictedCookieManager* const proxy_;
};




}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_RESTRICTED_COOKIE_MANAGER_MOJOM_TEST_UTILS_H_