// services/network/public/mojom/devtools_observer.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_DEVTOOLS_OBSERVER_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_DEVTOOLS_OBSERVER_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/devtools_observer.mojom-shared.h"
#include "services/network/public/mojom/devtools_observer.mojom-blink-forward.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"
#include "mojo/public/mojom/base/time.mojom-blink.h"
#include "services/network/public/mojom/client_security_state.mojom-blink-forward.h"
#include "services/network/public/mojom/cookie_manager.mojom-blink-forward.h"
#include "services/network/public/mojom/cors.mojom-blink-forward.h"
#include "services/network/public/mojom/fetch_api.mojom-blink-forward.h"
#include "services/network/public/mojom/http_raw_headers.mojom-blink-forward.h"
#include "services/network/public/mojom/http_request_headers.mojom-blink.h"
#include "services/network/public/mojom/ip_address_space.mojom-blink-forward.h"
#include "services/network/public/mojom/referrer_policy.mojom-blink.h"
#include "services/network/public/mojom/request_priority.mojom-blink.h"
#include "services/network/public/mojom/trust_tokens.mojom-blink.h"
#include "services/network/public/mojom/ip_endpoint.mojom-blink.h"
#include "services/network/public/mojom/url_loader_completion_status.mojom-blink.h"
#include "services/network/public/mojom/network_param.mojom-blink.h"
#include "services/network/public/mojom/load_timing_info.mojom-blink.h"
#include "url/mojom/origin.mojom-blink.h"
#include "url/mojom/url.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"


#include "mojo/public/cpp/bindings/lib/native_enum_serialization.h"
#include "mojo/public/cpp/bindings/lib/native_struct_serialization.h"
#include "third_party/blink/public/platform/web_common.h"




namespace network {
namespace mojom {
namespace blink {

class DevToolsObserverProxy;

template <typename ImplRefTraits>
class DevToolsObserverStub;

class DevToolsObserverRequestValidator;


class BLINK_PLATFORM_EXPORT DevToolsObserver
    : public DevToolsObserverInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = DevToolsObserverInterfaceBase;
  using Proxy_ = DevToolsObserverProxy;

  template <typename ImplRefTraits>
  using Stub_ = DevToolsObserverStub<ImplRefTraits>;

  using RequestValidator_ = DevToolsObserverRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnRawRequestMinVersion = 0,
    kOnRawResponseMinVersion = 0,
    kOnPrivateNetworkRequestMinVersion = 0,
    kOnCorsPreflightRequestMinVersion = 0,
    kOnCorsPreflightResponseMinVersion = 0,
    kOnCorsPreflightRequestCompletedMinVersion = 0,
    kOnTrustTokenOperationDoneMinVersion = 0,
    kOnCorsErrorMinVersion = 0,
    kOnSubresourceWebBundleMetadataMinVersion = 0,
    kOnSubresourceWebBundleMetadataErrorMinVersion = 0,
    kOnSubresourceWebBundleInnerResponseMinVersion = 0,
    kOnSubresourceWebBundleInnerResponseErrorMinVersion = 0,
    kCloneMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnRawRequest_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnRawResponse_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnPrivateNetworkRequest_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCorsPreflightRequest_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCorsPreflightResponse_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCorsPreflightRequestCompleted_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnTrustTokenOperationDone_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCorsError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnSubresourceWebBundleMetadata_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnSubresourceWebBundleMetadataError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnSubresourceWebBundleInnerResponse_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnSubresourceWebBundleInnerResponseError_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Clone_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~DevToolsObserver() = default;

  
  virtual void OnRawRequest(const WTF::String& devtool_request_id, WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr> cookies_with_access_result, WTF::Vector<::network::mojom::blink::HttpRawHeaderPairPtr> headers, ::base::TimeTicks timestamp, ::network::mojom::blink::ClientSecurityStatePtr client_security_state) = 0;

  
  virtual void OnRawResponse(const WTF::String& devtool_request_id, WTF::Vector<::network::mojom::blink::CookieAndLineWithAccessResultPtr> cookies_with_access_result, WTF::Vector<::network::mojom::blink::HttpRawHeaderPairPtr> headers, const WTF::String& raw_response_headers, ::network::mojom::blink::IPAddressSpace resource_address_space, int32_t http_status_code) = 0;

  
  virtual void OnPrivateNetworkRequest(const WTF::String& devtool_request_id, const ::blink::KURL& url, bool is_warning, ::network::mojom::blink::IPAddressSpace resource_address_space, ::network::mojom::blink::ClientSecurityStatePtr client_security_state) = 0;

  
  virtual void OnCorsPreflightRequest(const ::base::UnguessableToken& devtool_request_id, const ::net::HttpRequestHeaders& request_headers, URLRequestDevToolsInfoPtr request_info, const ::blink::KURL& initiator_url, const WTF::String& initiator_devtool_request_id) = 0;

  
  virtual void OnCorsPreflightResponse(const ::base::UnguessableToken& devtool_request_id, const ::blink::KURL& url, URLResponseHeadDevToolsInfoPtr head) = 0;

  
  virtual void OnCorsPreflightRequestCompleted(const ::base::UnguessableToken& devtool_request_id, const ::network::URLLoaderCompletionStatus& status) = 0;

  
  virtual void OnTrustTokenOperationDone(const WTF::String& devtool_request_id, ::network::mojom::blink::TrustTokenOperationResultPtr result) = 0;

  
  virtual void OnCorsError(const WTF::String& devtool_request_id, const ::scoped_refptr<const ::blink::SecurityOrigin>& initiator_origin, ::network::mojom::blink::ClientSecurityStatePtr client_security_state, const ::blink::KURL& url, ::network::mojom::blink::CorsErrorStatusPtr status, bool is_warning) = 0;

  
  virtual void OnSubresourceWebBundleMetadata(const WTF::String& devtool_request_id, const WTF::Vector<::blink::KURL>& urls) = 0;

  
  virtual void OnSubresourceWebBundleMetadataError(const WTF::String& devtool_request_id, const WTF::String& error_message) = 0;

  
  virtual void OnSubresourceWebBundleInnerResponse(const WTF::String& inner_request_devtools_id, const ::blink::KURL& url, const WTF::String& bundle_request_devtools_id) = 0;

  
  virtual void OnSubresourceWebBundleInnerResponseError(const WTF::String& inner_request_devtools_id, const ::blink::KURL& url, const WTF::String& error_message, const WTF::String& bundle_request_devtools_id) = 0;

  
  virtual void Clone(::mojo::PendingReceiver<DevToolsObserver> listener) = 0;
};



class BLINK_PLATFORM_EXPORT DevToolsObserverProxy
    : public DevToolsObserver {
 public:
  using InterfaceType = DevToolsObserver;

  explicit DevToolsObserverProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnRawRequest(const WTF::String& devtool_request_id, WTF::Vector<::network::mojom::blink::CookieWithAccessResultPtr> cookies_with_access_result, WTF::Vector<::network::mojom::blink::HttpRawHeaderPairPtr> headers, ::base::TimeTicks timestamp, ::network::mojom::blink::ClientSecurityStatePtr client_security_state) final;
  
  void OnRawResponse(const WTF::String& devtool_request_id, WTF::Vector<::network::mojom::blink::CookieAndLineWithAccessResultPtr> cookies_with_access_result, WTF::Vector<::network::mojom::blink::HttpRawHeaderPairPtr> headers, const WTF::String& raw_response_headers, ::network::mojom::blink::IPAddressSpace resource_address_space, int32_t http_status_code) final;
  
  void OnPrivateNetworkRequest(const WTF::String& devtool_request_id, const ::blink::KURL& url, bool is_warning, ::network::mojom::blink::IPAddressSpace resource_address_space, ::network::mojom::blink::ClientSecurityStatePtr client_security_state) final;
  
  void OnCorsPreflightRequest(const ::base::UnguessableToken& devtool_request_id, const ::net::HttpRequestHeaders& request_headers, URLRequestDevToolsInfoPtr request_info, const ::blink::KURL& initiator_url, const WTF::String& initiator_devtool_request_id) final;
  
  void OnCorsPreflightResponse(const ::base::UnguessableToken& devtool_request_id, const ::blink::KURL& url, URLResponseHeadDevToolsInfoPtr head) final;
  
  void OnCorsPreflightRequestCompleted(const ::base::UnguessableToken& devtool_request_id, const ::network::URLLoaderCompletionStatus& status) final;
  
  void OnTrustTokenOperationDone(const WTF::String& devtool_request_id, ::network::mojom::blink::TrustTokenOperationResultPtr result) final;
  
  void OnCorsError(const WTF::String& devtool_request_id, const ::scoped_refptr<const ::blink::SecurityOrigin>& initiator_origin, ::network::mojom::blink::ClientSecurityStatePtr client_security_state, const ::blink::KURL& url, ::network::mojom::blink::CorsErrorStatusPtr status, bool is_warning) final;
  
  void OnSubresourceWebBundleMetadata(const WTF::String& devtool_request_id, const WTF::Vector<::blink::KURL>& urls) final;
  
  void OnSubresourceWebBundleMetadataError(const WTF::String& devtool_request_id, const WTF::String& error_message) final;
  
  void OnSubresourceWebBundleInnerResponse(const WTF::String& inner_request_devtools_id, const ::blink::KURL& url, const WTF::String& bundle_request_devtools_id) final;
  
  void OnSubresourceWebBundleInnerResponseError(const WTF::String& inner_request_devtools_id, const ::blink::KURL& url, const WTF::String& error_message, const WTF::String& bundle_request_devtools_id) final;
  
  void Clone(::mojo::PendingReceiver<DevToolsObserver> listener) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class BLINK_PLATFORM_EXPORT DevToolsObserverStubDispatch {
 public:
  static bool Accept(DevToolsObserver* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      DevToolsObserver* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<DevToolsObserver>>
class DevToolsObserverStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  DevToolsObserverStub() = default;
  ~DevToolsObserverStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DevToolsObserverStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return DevToolsObserverStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class BLINK_PLATFORM_EXPORT DevToolsObserverRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};









class BLINK_PLATFORM_EXPORT URLRequestDevToolsInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<URLRequestDevToolsInfo, T>::value>;
  using DataView = URLRequestDevToolsInfoDataView;
  using Data_ = internal::URLRequestDevToolsInfo_Data;

  template <typename... Args>
  static URLRequestDevToolsInfoPtr New(Args&&... args) {
    return URLRequestDevToolsInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static URLRequestDevToolsInfoPtr From(const U& u) {
    return mojo::TypeConverter<URLRequestDevToolsInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLRequestDevToolsInfo>::Convert(*this);
  }


  URLRequestDevToolsInfo();

  URLRequestDevToolsInfo(
      const WTF::String& method,
      const ::blink::KURL& url,
      ::net::RequestPriority priority,
      ::net::ReferrerPolicy referrer_policy,
      ::network::mojom::blink::TrustTokenParamsPtr trust_token_params,
      bool has_user_gesture,
      uint32_t resource_type);

URLRequestDevToolsInfo(const URLRequestDevToolsInfo&) = delete;
URLRequestDevToolsInfo& operator=(const URLRequestDevToolsInfo&) = delete;

  ~URLRequestDevToolsInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = URLRequestDevToolsInfoPtr>
  URLRequestDevToolsInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        URLRequestDevToolsInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        URLRequestDevToolsInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::URLRequestDevToolsInfo_UnserializedMessageContext<
            UserType, URLRequestDevToolsInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<URLRequestDevToolsInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return URLRequestDevToolsInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::URLRequestDevToolsInfo_UnserializedMessageContext<
            UserType, URLRequestDevToolsInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<URLRequestDevToolsInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::String method;
  
  ::blink::KURL url;
  
  ::net::RequestPriority priority;
  
  ::net::ReferrerPolicy referrer_policy;
  
  ::network::mojom::blink::TrustTokenParamsPtr trust_token_params;
  
  bool has_user_gesture;
  
  uint32_t resource_type;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT URLResponseHeadDevToolsInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<URLResponseHeadDevToolsInfo, T>::value>;
  using DataView = URLResponseHeadDevToolsInfoDataView;
  using Data_ = internal::URLResponseHeadDevToolsInfo_Data;

  template <typename... Args>
  static URLResponseHeadDevToolsInfoPtr New(Args&&... args) {
    return URLResponseHeadDevToolsInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static URLResponseHeadDevToolsInfoPtr From(const U& u) {
    return mojo::TypeConverter<URLResponseHeadDevToolsInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, URLResponseHeadDevToolsInfo>::Convert(*this);
  }


  URLResponseHeadDevToolsInfo();

  URLResponseHeadDevToolsInfo(
      ::base::Time response_time,
      ::network::mojom::blink::HttpResponseHeadersPtr headers,
      const WTF::String& mime_type,
      ::network::mojom::blink::LoadTimingInfoPtr load_timing,
      uint32_t cert_status,
      int64_t encoded_data_length,
      bool was_in_prefetch_cache,
      bool was_fetched_via_service_worker,
      const WTF::String& cache_storage_cache_name,
      const WTF::String& alpn_negotiated_protocol,
      bool was_fetched_via_spdy,
      ::network::mojom::blink::FetchResponseSource service_worker_response_source,
      ::network::mojom::blink::SSLInfoPtr ssl_info,
      const ::net::IPEndPoint& remote_endpoint,
      bool emitted_extra_info);

URLResponseHeadDevToolsInfo(const URLResponseHeadDevToolsInfo&) = delete;
URLResponseHeadDevToolsInfo& operator=(const URLResponseHeadDevToolsInfo&) = delete;

  ~URLResponseHeadDevToolsInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = URLResponseHeadDevToolsInfoPtr>
  URLResponseHeadDevToolsInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        URLResponseHeadDevToolsInfo::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        URLResponseHeadDevToolsInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::URLResponseHeadDevToolsInfo_UnserializedMessageContext<
            UserType, URLResponseHeadDevToolsInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<URLResponseHeadDevToolsInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return URLResponseHeadDevToolsInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::URLResponseHeadDevToolsInfo_UnserializedMessageContext<
            UserType, URLResponseHeadDevToolsInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<URLResponseHeadDevToolsInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::base::Time response_time;
  
  ::network::mojom::blink::HttpResponseHeadersPtr headers;
  
  WTF::String mime_type;
  
  ::network::mojom::blink::LoadTimingInfoPtr load_timing;
  
  uint32_t cert_status;
  
  int64_t encoded_data_length;
  
  bool was_in_prefetch_cache;
  
  bool was_fetched_via_service_worker;
  
  WTF::String cache_storage_cache_name;
  
  WTF::String alpn_negotiated_protocol;
  
  bool was_fetched_via_spdy;
  
  ::network::mojom::blink::FetchResponseSource service_worker_response_source;
  
  ::network::mojom::blink::SSLInfoPtr ssl_info;
  
  ::net::IPEndPoint remote_endpoint;
  
  bool emitted_extra_info;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
URLRequestDevToolsInfoPtr URLRequestDevToolsInfo::Clone() const {
  return New(
      mojo::Clone(method),
      mojo::Clone(url),
      mojo::Clone(priority),
      mojo::Clone(referrer_policy),
      mojo::Clone(trust_token_params),
      mojo::Clone(has_user_gesture),
      mojo::Clone(resource_type)
  );
}

template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>*>
bool URLRequestDevToolsInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->method, other_struct.method))
    return false;
  if (!mojo::Equals(this->url, other_struct.url))
    return false;
  if (!mojo::Equals(this->priority, other_struct.priority))
    return false;
  if (!mojo::Equals(this->referrer_policy, other_struct.referrer_policy))
    return false;
  if (!mojo::Equals(this->trust_token_params, other_struct.trust_token_params))
    return false;
  if (!mojo::Equals(this->has_user_gesture, other_struct.has_user_gesture))
    return false;
  if (!mojo::Equals(this->resource_type, other_struct.resource_type))
    return false;
  return true;
}

template <typename T, URLRequestDevToolsInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.method < rhs.method)
    return true;
  if (rhs.method < lhs.method)
    return false;
  if (lhs.url < rhs.url)
    return true;
  if (rhs.url < lhs.url)
    return false;
  if (lhs.priority < rhs.priority)
    return true;
  if (rhs.priority < lhs.priority)
    return false;
  if (lhs.referrer_policy < rhs.referrer_policy)
    return true;
  if (rhs.referrer_policy < lhs.referrer_policy)
    return false;
  if (lhs.trust_token_params < rhs.trust_token_params)
    return true;
  if (rhs.trust_token_params < lhs.trust_token_params)
    return false;
  if (lhs.has_user_gesture < rhs.has_user_gesture)
    return true;
  if (rhs.has_user_gesture < lhs.has_user_gesture)
    return false;
  if (lhs.resource_type < rhs.resource_type)
    return true;
  if (rhs.resource_type < lhs.resource_type)
    return false;
  return false;
}
template <typename StructPtrType>
URLResponseHeadDevToolsInfoPtr URLResponseHeadDevToolsInfo::Clone() const {
  return New(
      mojo::Clone(response_time),
      mojo::Clone(headers),
      mojo::Clone(mime_type),
      mojo::Clone(load_timing),
      mojo::Clone(cert_status),
      mojo::Clone(encoded_data_length),
      mojo::Clone(was_in_prefetch_cache),
      mojo::Clone(was_fetched_via_service_worker),
      mojo::Clone(cache_storage_cache_name),
      mojo::Clone(alpn_negotiated_protocol),
      mojo::Clone(was_fetched_via_spdy),
      mojo::Clone(service_worker_response_source),
      mojo::Clone(ssl_info),
      mojo::Clone(remote_endpoint),
      mojo::Clone(emitted_extra_info)
  );
}

template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>*>
bool URLResponseHeadDevToolsInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->response_time, other_struct.response_time))
    return false;
  if (!mojo::Equals(this->headers, other_struct.headers))
    return false;
  if (!mojo::Equals(this->mime_type, other_struct.mime_type))
    return false;
  if (!mojo::Equals(this->load_timing, other_struct.load_timing))
    return false;
  if (!mojo::Equals(this->cert_status, other_struct.cert_status))
    return false;
  if (!mojo::Equals(this->encoded_data_length, other_struct.encoded_data_length))
    return false;
  if (!mojo::Equals(this->was_in_prefetch_cache, other_struct.was_in_prefetch_cache))
    return false;
  if (!mojo::Equals(this->was_fetched_via_service_worker, other_struct.was_fetched_via_service_worker))
    return false;
  if (!mojo::Equals(this->cache_storage_cache_name, other_struct.cache_storage_cache_name))
    return false;
  if (!mojo::Equals(this->alpn_negotiated_protocol, other_struct.alpn_negotiated_protocol))
    return false;
  if (!mojo::Equals(this->was_fetched_via_spdy, other_struct.was_fetched_via_spdy))
    return false;
  if (!mojo::Equals(this->service_worker_response_source, other_struct.service_worker_response_source))
    return false;
  if (!mojo::Equals(this->ssl_info, other_struct.ssl_info))
    return false;
  if (!mojo::Equals(this->remote_endpoint, other_struct.remote_endpoint))
    return false;
  if (!mojo::Equals(this->emitted_extra_info, other_struct.emitted_extra_info))
    return false;
  return true;
}

template <typename T, URLResponseHeadDevToolsInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.response_time < rhs.response_time)
    return true;
  if (rhs.response_time < lhs.response_time)
    return false;
  if (lhs.headers < rhs.headers)
    return true;
  if (rhs.headers < lhs.headers)
    return false;
  if (lhs.mime_type < rhs.mime_type)
    return true;
  if (rhs.mime_type < lhs.mime_type)
    return false;
  if (lhs.load_timing < rhs.load_timing)
    return true;
  if (rhs.load_timing < lhs.load_timing)
    return false;
  if (lhs.cert_status < rhs.cert_status)
    return true;
  if (rhs.cert_status < lhs.cert_status)
    return false;
  if (lhs.encoded_data_length < rhs.encoded_data_length)
    return true;
  if (rhs.encoded_data_length < lhs.encoded_data_length)
    return false;
  if (lhs.was_in_prefetch_cache < rhs.was_in_prefetch_cache)
    return true;
  if (rhs.was_in_prefetch_cache < lhs.was_in_prefetch_cache)
    return false;
  if (lhs.was_fetched_via_service_worker < rhs.was_fetched_via_service_worker)
    return true;
  if (rhs.was_fetched_via_service_worker < lhs.was_fetched_via_service_worker)
    return false;
  if (lhs.cache_storage_cache_name < rhs.cache_storage_cache_name)
    return true;
  if (rhs.cache_storage_cache_name < lhs.cache_storage_cache_name)
    return false;
  if (lhs.alpn_negotiated_protocol < rhs.alpn_negotiated_protocol)
    return true;
  if (rhs.alpn_negotiated_protocol < lhs.alpn_negotiated_protocol)
    return false;
  if (lhs.was_fetched_via_spdy < rhs.was_fetched_via_spdy)
    return true;
  if (rhs.was_fetched_via_spdy < lhs.was_fetched_via_spdy)
    return false;
  if (lhs.service_worker_response_source < rhs.service_worker_response_source)
    return true;
  if (rhs.service_worker_response_source < lhs.service_worker_response_source)
    return false;
  if (lhs.ssl_info < rhs.ssl_info)
    return true;
  if (rhs.ssl_info < lhs.ssl_info)
    return false;
  if (lhs.remote_endpoint < rhs.remote_endpoint)
    return true;
  if (rhs.remote_endpoint < lhs.remote_endpoint)
    return false;
  if (lhs.emitted_extra_info < rhs.emitted_extra_info)
    return true;
  if (rhs.emitted_extra_info < lhs.emitted_extra_info)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::URLRequestDevToolsInfo::DataView,
                                         ::network::mojom::blink::URLRequestDevToolsInfoPtr> {
  static bool IsNull(const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::URLRequestDevToolsInfoPtr* output) { output->reset(); }

  static const decltype(::network::mojom::blink::URLRequestDevToolsInfo::method)& method(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->method;
  }

  static const decltype(::network::mojom::blink::URLRequestDevToolsInfo::url)& url(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->url;
  }

  static decltype(::network::mojom::blink::URLRequestDevToolsInfo::priority) priority(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->priority;
  }

  static decltype(::network::mojom::blink::URLRequestDevToolsInfo::referrer_policy) referrer_policy(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->referrer_policy;
  }

  static const decltype(::network::mojom::blink::URLRequestDevToolsInfo::trust_token_params)& trust_token_params(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->trust_token_params;
  }

  static decltype(::network::mojom::blink::URLRequestDevToolsInfo::has_user_gesture) has_user_gesture(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->has_user_gesture;
  }

  static decltype(::network::mojom::blink::URLRequestDevToolsInfo::resource_type) resource_type(
      const ::network::mojom::blink::URLRequestDevToolsInfoPtr& input) {
    return input->resource_type;
  }

  static bool Read(::network::mojom::blink::URLRequestDevToolsInfo::DataView input, ::network::mojom::blink::URLRequestDevToolsInfoPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::URLResponseHeadDevToolsInfo::DataView,
                                         ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr> {
  static bool IsNull(const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::URLResponseHeadDevToolsInfoPtr* output) { output->reset(); }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::response_time)& response_time(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->response_time;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::headers)& headers(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->headers;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::mime_type)& mime_type(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->mime_type;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::load_timing)& load_timing(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->load_timing;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::cert_status) cert_status(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->cert_status;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::encoded_data_length) encoded_data_length(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->encoded_data_length;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::was_in_prefetch_cache) was_in_prefetch_cache(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->was_in_prefetch_cache;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::was_fetched_via_service_worker) was_fetched_via_service_worker(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->was_fetched_via_service_worker;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::cache_storage_cache_name)& cache_storage_cache_name(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->cache_storage_cache_name;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::alpn_negotiated_protocol)& alpn_negotiated_protocol(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->alpn_negotiated_protocol;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::was_fetched_via_spdy) was_fetched_via_spdy(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->was_fetched_via_spdy;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::service_worker_response_source) service_worker_response_source(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->service_worker_response_source;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::ssl_info)& ssl_info(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->ssl_info;
  }

  static const decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::remote_endpoint)& remote_endpoint(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->remote_endpoint;
  }

  static decltype(::network::mojom::blink::URLResponseHeadDevToolsInfo::emitted_extra_info) emitted_extra_info(
      const ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr& input) {
    return input->emitted_extra_info;
  }

  static bool Read(::network::mojom::blink::URLResponseHeadDevToolsInfo::DataView input, ::network::mojom::blink::URLResponseHeadDevToolsInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_DEVTOOLS_OBSERVER_MOJOM_BLINK_H_