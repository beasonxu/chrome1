// services/network/public/mojom/web_transport.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/web_transport.mojom-shared-internal.h"
#include "mojo/public/mojom/base/read_only_buffer.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "services/network/public/mojom/network_param.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace network {
namespace mojom {
class WebTransportErrorDataView;

class WebTransportCertificateFingerprintDataView;

class WebTransportCloseInfoDataView;



}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::network::mojom::WebTransportErrorDataView> {
  using Data = ::network::mojom::internal::WebTransportError_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::network::mojom::WebTransportCertificateFingerprintDataView> {
  using Data = ::network::mojom::internal::WebTransportCertificateFingerprint_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::network::mojom::WebTransportCloseInfoDataView> {
  using Data = ::network::mojom::internal::WebTransportCloseInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {
// Interface base classes. They are used for type safety check.
class WebTransportInterfaceBase {};

using WebTransportPtrDataView =
    mojo::InterfacePtrDataView<WebTransportInterfaceBase>;
using WebTransportRequestDataView =
    mojo::InterfaceRequestDataView<WebTransportInterfaceBase>;
using WebTransportAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebTransportInterfaceBase>;
using WebTransportAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebTransportInterfaceBase>;
class WebTransportClientInterfaceBase {};

using WebTransportClientPtrDataView =
    mojo::InterfacePtrDataView<WebTransportClientInterfaceBase>;
using WebTransportClientRequestDataView =
    mojo::InterfaceRequestDataView<WebTransportClientInterfaceBase>;
using WebTransportClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebTransportClientInterfaceBase>;
using WebTransportClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebTransportClientInterfaceBase>;
class WebTransportHandshakeClientInterfaceBase {};

using WebTransportHandshakeClientPtrDataView =
    mojo::InterfacePtrDataView<WebTransportHandshakeClientInterfaceBase>;
using WebTransportHandshakeClientRequestDataView =
    mojo::InterfaceRequestDataView<WebTransportHandshakeClientInterfaceBase>;
using WebTransportHandshakeClientAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<WebTransportHandshakeClientInterfaceBase>;
using WebTransportHandshakeClientAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<WebTransportHandshakeClientInterfaceBase>;


class WebTransportErrorDataView {
 public:
  WebTransportErrorDataView() = default;

  WebTransportErrorDataView(
      internal::WebTransportError_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  int32_t net_error() const {
    return data_->net_error;
  }
  int32_t quic_error() const {
    return data_->quic_error;
  }
  inline void GetDetailsDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDetails(UserType* output) {
    
    auto* pointer = data_->details.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool safe_to_report_details() const {
    return data_->safe_to_report_details;
  }
 private:
  internal::WebTransportError_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransportCertificateFingerprintDataView {
 public:
  WebTransportCertificateFingerprintDataView() = default;

  WebTransportCertificateFingerprintDataView(
      internal::WebTransportCertificateFingerprint_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetAlgorithmDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAlgorithm(UserType* output) {
    
    auto* pointer = data_->algorithm.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFingerprintDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFingerprint(UserType* output) {
    
    auto* pointer = data_->fingerprint.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransportCertificateFingerprint_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class WebTransportCloseInfoDataView {
 public:
  WebTransportCloseInfoDataView() = default;

  WebTransportCloseInfoDataView(
      internal::WebTransportCloseInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint32_t code() const {
    return data_->code;
  }
  inline void GetReasonDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) {
    
    auto* pointer = data_->reason.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::WebTransportCloseInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace network

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::WebTransportErrorDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::WebTransportErrorDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::network::mojom::internal::WebTransportError_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->net_error = Traits::net_error(input);
    fragment->quic_error = Traits::quic_error(input);
    decltype(Traits::details(input)) in_details = Traits::details(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->details)::BaseType> details_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_details, details_fragment);
    fragment->details.Set(
        details_fragment.is_null() ? nullptr : details_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->details.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null details in WebTransportError struct");
    fragment->safe_to_report_details = Traits::safe_to_report_details(input);
  }

  static bool Deserialize(::network::mojom::internal::WebTransportError_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::WebTransportErrorDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::WebTransportCertificateFingerprintDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::WebTransportCertificateFingerprintDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::network::mojom::internal::WebTransportCertificateFingerprint_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::algorithm(input)) in_algorithm = Traits::algorithm(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->algorithm)::BaseType> algorithm_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_algorithm, algorithm_fragment);
    fragment->algorithm.Set(
        algorithm_fragment.is_null() ? nullptr : algorithm_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->algorithm.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null algorithm in WebTransportCertificateFingerprint struct");
    decltype(Traits::fingerprint(input)) in_fingerprint = Traits::fingerprint(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->fingerprint)::BaseType> fingerprint_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_fingerprint, fingerprint_fragment);
    fragment->fingerprint.Set(
        fingerprint_fragment.is_null() ? nullptr : fingerprint_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->fingerprint.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null fingerprint in WebTransportCertificateFingerprint struct");
  }

  static bool Deserialize(::network::mojom::internal::WebTransportCertificateFingerprint_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::WebTransportCertificateFingerprintDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::WebTransportCloseInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::WebTransportCloseInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::network::mojom::internal::WebTransportCloseInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->code = Traits::code(input);
    decltype(Traits::reason(input)) in_reason = Traits::reason(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->reason)::BaseType> reason_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_reason, reason_fragment);
    fragment->reason.Set(
        reason_fragment.is_null() ? nullptr : reason_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->reason.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null reason in WebTransportCloseInfo struct");
  }

  static bool Deserialize(::network::mojom::internal::WebTransportCloseInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::WebTransportCloseInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {

inline void WebTransportErrorDataView::GetDetailsDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->details.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void WebTransportCertificateFingerprintDataView::GetAlgorithmDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->algorithm.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void WebTransportCertificateFingerprintDataView::GetFingerprintDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->fingerprint.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void WebTransportCloseInfoDataView::GetReasonDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->reason.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_WEB_TRANSPORT_MOJOM_SHARED_H_