// services/network/public/mojom/url_loader_network_service_observer.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_URL_LOADER_NETWORK_SERVICE_OBSERVER_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_URL_LOADER_NETWORK_SERVICE_OBSERVER_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/url_loader_network_service_observer.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "services/network/public/mojom/cookie_partition_key.mojom-shared.h"
#include "services/network/public/mojom/network_param.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace network {
namespace mojom {
class LoadInfoDataView;



}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::network::mojom::LoadInfoDataView> {
  using Data = ::network::mojom::internal::LoadInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {
// Interface base classes. They are used for type safety check.
class ClientCertificateResponderInterfaceBase {};

using ClientCertificateResponderPtrDataView =
    mojo::InterfacePtrDataView<ClientCertificateResponderInterfaceBase>;
using ClientCertificateResponderRequestDataView =
    mojo::InterfaceRequestDataView<ClientCertificateResponderInterfaceBase>;
using ClientCertificateResponderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<ClientCertificateResponderInterfaceBase>;
using ClientCertificateResponderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<ClientCertificateResponderInterfaceBase>;
class SSLPrivateKeyInterfaceBase {};

using SSLPrivateKeyPtrDataView =
    mojo::InterfacePtrDataView<SSLPrivateKeyInterfaceBase>;
using SSLPrivateKeyRequestDataView =
    mojo::InterfaceRequestDataView<SSLPrivateKeyInterfaceBase>;
using SSLPrivateKeyAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<SSLPrivateKeyInterfaceBase>;
using SSLPrivateKeyAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<SSLPrivateKeyInterfaceBase>;
class AuthChallengeResponderInterfaceBase {};

using AuthChallengeResponderPtrDataView =
    mojo::InterfacePtrDataView<AuthChallengeResponderInterfaceBase>;
using AuthChallengeResponderRequestDataView =
    mojo::InterfaceRequestDataView<AuthChallengeResponderInterfaceBase>;
using AuthChallengeResponderAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<AuthChallengeResponderInterfaceBase>;
using AuthChallengeResponderAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<AuthChallengeResponderInterfaceBase>;
class URLLoaderNetworkServiceObserverInterfaceBase {};

using URLLoaderNetworkServiceObserverPtrDataView =
    mojo::InterfacePtrDataView<URLLoaderNetworkServiceObserverInterfaceBase>;
using URLLoaderNetworkServiceObserverRequestDataView =
    mojo::InterfaceRequestDataView<URLLoaderNetworkServiceObserverInterfaceBase>;
using URLLoaderNetworkServiceObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<URLLoaderNetworkServiceObserverInterfaceBase>;
using URLLoaderNetworkServiceObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<URLLoaderNetworkServiceObserverInterfaceBase>;


class LoadInfoDataView {
 public:
  LoadInfoDataView() = default;

  LoadInfoDataView(
      internal::LoadInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTimestampDataView(
      ::mojo_base::mojom::TimeTicksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTimestamp(UserType* output) {
    
    auto* pointer = data_->timestamp.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::TimeTicksDataView>(
        pointer, output, message_);
  }
  inline void GetHostDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHost(UserType* output) {
    
    auto* pointer = data_->host.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  uint32_t load_state() const {
    return data_->load_state;
  }
  inline void GetStateParamDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStateParam(UserType* output) {
    
    auto* pointer = data_->state_param.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  uint64_t upload_position() const {
    return data_->upload_position;
  }
  uint64_t upload_size() const {
    return data_->upload_size;
  }
 private:
  internal::LoadInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace network

namespace std {

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::LoadInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::LoadInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::network::mojom::internal::LoadInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::timestamp(input)) in_timestamp = Traits::timestamp(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->timestamp)::BaseType> timestamp_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::TimeTicksDataView>(
        in_timestamp, timestamp_fragment);
    fragment->timestamp.Set(
        timestamp_fragment.is_null() ? nullptr : timestamp_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->timestamp.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null timestamp in LoadInfo struct");
    decltype(Traits::host(input)) in_host = Traits::host(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->host)::BaseType> host_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_host, host_fragment);
    fragment->host.Set(
        host_fragment.is_null() ? nullptr : host_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->host.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null host in LoadInfo struct");
    fragment->load_state = Traits::load_state(input);
    decltype(Traits::state_param(input)) in_state_param = Traits::state_param(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->state_param)::BaseType> state_param_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_state_param, state_param_fragment);
    fragment->state_param.Set(
        state_param_fragment.is_null() ? nullptr : state_param_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->state_param.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null state_param in LoadInfo struct");
    fragment->upload_position = Traits::upload_position(input);
    fragment->upload_size = Traits::upload_size(input);
  }

  static bool Deserialize(::network::mojom::internal::LoadInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::LoadInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {

inline void LoadInfoDataView::GetTimestampDataView(
    ::mojo_base::mojom::TimeTicksDataView* output) {
  auto pointer = data_->timestamp.Get();
  *output = ::mojo_base::mojom::TimeTicksDataView(pointer, message_);
}
inline void LoadInfoDataView::GetHostDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void LoadInfoDataView::GetStateParamDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->state_param.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}



}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_URL_LOADER_NETWORK_SERVICE_OBSERVER_MOJOM_SHARED_H_