// services/network/public/mojom/url_loader_completion_status.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_URL_LOADER_COMPLETION_STATUS_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_URL_LOADER_COMPLETION_STATUS_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "services/network/public/mojom/network_param.mojom-shared-internal.h"
#include "services/network/public/mojom/blocked_by_response_reason.mojom-shared-internal.h"
#include "services/network/public/mojom/cors.mojom-shared-internal.h"
#include "services/network/public/mojom/trust_tokens.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class BlockedByResponseReasonWrapper_Data;
class URLLoaderCompletionStatus_Data;

#pragma pack(push, 1)
class  BlockedByResponseReasonWrapper_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<BlockedByResponseReasonWrapper_Data>;

  BlockedByResponseReasonWrapper_Data();
  ~BlockedByResponseReasonWrapper_Data() = delete;
};
static_assert(sizeof(BlockedByResponseReasonWrapper_Data) == 16,
              "Bad sizeof(BlockedByResponseReasonWrapper_Data)");
// Used by BlockedByResponseReasonWrapper::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct BlockedByResponseReasonWrapper_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  BlockedByResponseReasonWrapper_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~BlockedByResponseReasonWrapper_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<BlockedByResponseReasonWrapper_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    BlockedByResponseReasonWrapper_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  URLLoaderCompletionStatus_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error_code;
  int32_t extended_error_code;
  uint8_t exists_in_cache : 1;
  uint8_t exists_in_memory_cache : 1;
  uint8_t should_report_corb_blocking : 1;
  uint8_t should_collapse_initiator : 1;
  uint8_t pervasive_payload_requested : 1;
  uint8_t pad6_[3];
  int32_t trust_token_operation_status;
  mojo::internal::Pointer<::mojo_base::mojom::internal::TimeTicks_Data> completion_time;
  int64_t encoded_data_length;
  int64_t encoded_body_length;
  int64_t decoded_body_length;
  mojo::internal::Pointer<::network::mojom::internal::CorsErrorStatus_Data> cors_error_status;
  mojo::internal::Pointer<::network::mojom::internal::SSLInfo_Data> ssl_info;
  mojo::internal::Pointer<internal::BlockedByResponseReasonWrapper_Data> blocked_by_response_reason;
  mojo::internal::Pointer<::network::mojom::internal::ProxyServer_Data> proxy_server;
  mojo::internal::Pointer<::network::mojom::internal::ResolveErrorInfo_Data> resolve_error_info;

 private:
  friend class mojo::internal::MessageFragment<URLLoaderCompletionStatus_Data>;

  URLLoaderCompletionStatus_Data();
  ~URLLoaderCompletionStatus_Data() = delete;
};
static_assert(sizeof(URLLoaderCompletionStatus_Data) == 96,
              "Bad sizeof(URLLoaderCompletionStatus_Data)");
// Used by URLLoaderCompletionStatus::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct URLLoaderCompletionStatus_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  URLLoaderCompletionStatus_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~URLLoaderCompletionStatus_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<URLLoaderCompletionStatus_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    URLLoaderCompletionStatus_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_URL_LOADER_COMPLETION_STATUS_MOJOM_SHARED_INTERNAL_H_