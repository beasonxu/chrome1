// services/network/public/mojom/cross_origin_embedder_policy.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_EMBEDDER_POLICY_MOJOM_SHARED_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_EMBEDDER_POLICY_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/cross_origin_embedder_policy.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared.h"
#include "services/network/public/mojom/fetch_api.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace network {
namespace mojom {
class CrossOriginEmbedderPolicyDataView;



}  // namespace mojom
}  // namespace network

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::network::mojom::CrossOriginEmbedderPolicyDataView> {
  using Data = ::network::mojom::internal::CrossOriginEmbedderPolicy_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace network {
namespace mojom {


enum class CrossOriginEmbedderPolicyValue : int32_t {
  
  kNone = 0,
  
  kRequireCorp = 1,
  
  kCredentialless = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, CrossOriginEmbedderPolicyValue value);
inline bool IsKnownEnumValue(CrossOriginEmbedderPolicyValue value) {
  return internal::CrossOriginEmbedderPolicyValue_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class CrossOriginEmbedderPolicyReporterInterfaceBase {};

using CrossOriginEmbedderPolicyReporterPtrDataView =
    mojo::InterfacePtrDataView<CrossOriginEmbedderPolicyReporterInterfaceBase>;
using CrossOriginEmbedderPolicyReporterRequestDataView =
    mojo::InterfaceRequestDataView<CrossOriginEmbedderPolicyReporterInterfaceBase>;
using CrossOriginEmbedderPolicyReporterAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CrossOriginEmbedderPolicyReporterInterfaceBase>;
using CrossOriginEmbedderPolicyReporterAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CrossOriginEmbedderPolicyReporterInterfaceBase>;


class CrossOriginEmbedderPolicyDataView {
 public:
  CrossOriginEmbedderPolicyDataView() = default;

  CrossOriginEmbedderPolicyDataView(
      internal::CrossOriginEmbedderPolicy_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) const {
    auto data_value = data_->value;
    return mojo::internal::Deserialize<::network::mojom::CrossOriginEmbedderPolicyValue>(
        data_value, output);
  }
  CrossOriginEmbedderPolicyValue value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::CrossOriginEmbedderPolicyValue>(data_->value));
  }
  inline void GetReportingEndpointDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportingEndpoint(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `reporting_endpoint` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReportingEndpoint` instead "
    "of `ReadReportingEndpoint if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->reporting_endpoint.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadReportOnlyValue(UserType* output) const {
    auto data_value = data_->report_only_value;
    return mojo::internal::Deserialize<::network::mojom::CrossOriginEmbedderPolicyValue>(
        data_value, output);
  }
  CrossOriginEmbedderPolicyValue report_only_value() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::CrossOriginEmbedderPolicyValue>(data_->report_only_value));
  }
  inline void GetReportOnlyReportingEndpointDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportOnlyReportingEndpoint(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        mojo::StringDataView, UserType>(),
    "Attempting to read the optional `report_only_reporting_endpoint` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadReportOnlyReportingEndpoint` instead "
    "of `ReadReportOnlyReportingEndpoint if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->report_only_reporting_endpoint.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrossOriginEmbedderPolicy_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace network

namespace std {

template <>
struct hash<::network::mojom::CrossOriginEmbedderPolicyValue>
    : public mojo::internal::EnumHashImpl<::network::mojom::CrossOriginEmbedderPolicyValue> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CrossOriginEmbedderPolicyValue, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::network::mojom::CrossOriginEmbedderPolicyValue, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::network::mojom::CrossOriginEmbedderPolicyValue>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::network::mojom::CrossOriginEmbedderPolicyDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::network::mojom::CrossOriginEmbedderPolicyDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::network::mojom::internal::CrossOriginEmbedderPolicy_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    mojo::internal::Serialize<::network::mojom::CrossOriginEmbedderPolicyValue>(
        Traits::value(input), &fragment->value);
    decltype(Traits::reporting_endpoint(input)) in_reporting_endpoint = Traits::reporting_endpoint(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->reporting_endpoint)::BaseType> reporting_endpoint_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_reporting_endpoint, reporting_endpoint_fragment);
    fragment->reporting_endpoint.Set(
        reporting_endpoint_fragment.is_null() ? nullptr : reporting_endpoint_fragment.data());
    mojo::internal::Serialize<::network::mojom::CrossOriginEmbedderPolicyValue>(
        Traits::report_only_value(input), &fragment->report_only_value);
    decltype(Traits::report_only_reporting_endpoint(input)) in_report_only_reporting_endpoint = Traits::report_only_reporting_endpoint(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->report_only_reporting_endpoint)::BaseType> report_only_reporting_endpoint_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_report_only_reporting_endpoint, report_only_reporting_endpoint_fragment);
    fragment->report_only_reporting_endpoint.Set(
        report_only_reporting_endpoint_fragment.is_null() ? nullptr : report_only_reporting_endpoint_fragment.data());
  }

  static bool Deserialize(::network::mojom::internal::CrossOriginEmbedderPolicy_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::network::mojom::CrossOriginEmbedderPolicyDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace network {
namespace mojom {

inline void CrossOriginEmbedderPolicyDataView::GetReportingEndpointDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->reporting_endpoint.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CrossOriginEmbedderPolicyDataView::GetReportOnlyReportingEndpointDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->report_only_reporting_endpoint.Get();
  *output = mojo::StringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace network

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::network::mojom::CrossOriginEmbedderPolicyValue> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::network::mojom::CrossOriginEmbedderPolicyValue value);
};

} // namespace perfetto

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_EMBEDDER_POLICY_MOJOM_SHARED_H_