// services/network/public/mojom/network_param.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_PARAM_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_PARAM_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "url/mojom/scheme_host_port.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class AuthChallengeInfo_Data;
using AuthCredentials_Data = mojo::native::internal::NativeStruct_Data;
using CertVerifyResult_Data = mojo::native::internal::NativeStruct_Data;
using HttpResponseHeaders_Data = mojo::native::internal::NativeStruct_Data;
class HttpVersion_Data;
using HostPortPair_Data = mojo::native::internal::NativeStruct_Data;
using ProxyServer_Data = mojo::native::internal::NativeStruct_Data;
class ResolveErrorInfo_Data;
using SSLCertRequestInfo_Data = mojo::native::internal::NativeStruct_Data;
using SSLInfo_Data = mojo::native::internal::NativeStruct_Data;
using X509Certificate_Data = mojo::native::internal::NativeStruct_Data;

#pragma pack(push, 1)
class  AuthChallengeInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t is_proxy : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::url::mojom::internal::SchemeHostPort_Data> challenger;
  mojo::internal::Pointer<mojo::internal::String_Data> scheme;
  mojo::internal::Pointer<mojo::internal::String_Data> realm;
  mojo::internal::Pointer<mojo::internal::String_Data> challenge;
  mojo::internal::Pointer<mojo::internal::String_Data> path;

 private:
  friend class mojo::internal::MessageFragment<AuthChallengeInfo_Data>;

  AuthChallengeInfo_Data();
  ~AuthChallengeInfo_Data() = delete;
};
static_assert(sizeof(AuthChallengeInfo_Data) == 56,
              "Bad sizeof(AuthChallengeInfo_Data)");
// Used by AuthChallengeInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct AuthChallengeInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  AuthChallengeInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~AuthChallengeInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<AuthChallengeInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    AuthChallengeInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  HttpVersion_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint16_t major_value;
  uint16_t minor_value;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpVersion_Data>;

  HttpVersion_Data();
  ~HttpVersion_Data() = delete;
};
static_assert(sizeof(HttpVersion_Data) == 16,
              "Bad sizeof(HttpVersion_Data)");
// Used by HttpVersion::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct HttpVersion_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  HttpVersion_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~HttpVersion_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<HttpVersion_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    HttpVersion_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ResolveErrorInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t is_secure_network_error : 1;
  uint8_t padfinal_[3];

 private:
  friend class mojo::internal::MessageFragment<ResolveErrorInfo_Data>;

  ResolveErrorInfo_Data();
  ~ResolveErrorInfo_Data() = delete;
};
static_assert(sizeof(ResolveErrorInfo_Data) == 16,
              "Bad sizeof(ResolveErrorInfo_Data)");
// Used by ResolveErrorInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ResolveErrorInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ResolveErrorInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ResolveErrorInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ResolveErrorInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ResolveErrorInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_NETWORK_PARAM_MOJOM_SHARED_INTERNAL_H_