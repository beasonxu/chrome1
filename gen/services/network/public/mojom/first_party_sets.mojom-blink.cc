// services/network/public/mojom/first_party_sets.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/first_party_sets.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/first_party_sets.mojom-params-data.h"
#include "services/network/public/mojom/first_party_sets.mojom-shared-message-ids.h"

#include "services/network/public/mojom/first_party_sets.mojom-blink-import-headers.h"
#include "services/network/public/mojom/first_party_sets.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_FIRST_PARTY_SETS_MOJOM_BLINK_JUMBO_H_
#endif



namespace network {
namespace mojom {
namespace blink {
SiteIndex::SiteIndex()
    : value() {}

SiteIndex::SiteIndex(
    uint32_t value_in)
    : value(std::move(value_in)) {}

SiteIndex::~SiteIndex() = default;
size_t SiteIndex::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->value);
  return seed;
}

void SiteIndex::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "value"), this->value,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type uint32_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SiteIndex::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FirstPartySetEntry::FirstPartySetEntry()
    : primary(),
      site_type(),
      site_index() {}

FirstPartySetEntry::FirstPartySetEntry(
    const ::blink::BlinkSchemefulSite& primary_in,
    SiteType site_type_in,
    SiteIndexPtr site_index_in)
    : primary(std::move(primary_in)),
      site_type(std::move(site_type_in)),
      site_index(std::move(site_index_in)) {}

FirstPartySetEntry::~FirstPartySetEntry() = default;

void FirstPartySetEntry::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "primary"), this->primary,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::blink::BlinkSchemefulSite&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "site_type"), this->site_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SiteType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "site_index"), this->site_index,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SiteIndexPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FirstPartySetEntry::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
SamePartyContext::SamePartyContext()
    : context_type(SamePartyCookieContextType::kCrossParty) {}

SamePartyContext::SamePartyContext(
    SamePartyCookieContextType context_type_in)
    : context_type(std::move(context_type_in)) {}

SamePartyContext::~SamePartyContext() = default;
size_t SamePartyContext::Hash(size_t seed) const {
  seed = mojo::internal::WTFHash(seed, this->context_type);
  return seed;
}

void SamePartyContext::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "context_type"), this->context_type,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SamePartyCookieContextType>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool SamePartyContext::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
FirstPartySetMetadata::FirstPartySetMetadata()
    : context(),
      frame_entry(),
      top_frame_entry() {}

FirstPartySetMetadata::FirstPartySetMetadata(
    SamePartyContextPtr context_in,
    FirstPartySetEntryPtr frame_entry_in,
    FirstPartySetEntryPtr top_frame_entry_in)
    : context(std::move(context_in)),
      frame_entry(std::move(frame_entry_in)),
      top_frame_entry(std::move(top_frame_entry_in)) {}

FirstPartySetMetadata::~FirstPartySetMetadata() = default;

void FirstPartySetMetadata::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "context"), this->context,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type SamePartyContextPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "frame_entry"), this->frame_entry,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type FirstPartySetEntryPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "top_frame_entry"), this->top_frame_entry,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type FirstPartySetEntryPtr>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool FirstPartySetMetadata::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace blink
}  // namespace mojom
}  // namespace network


namespace mojo {


// static
bool StructTraits<::network::mojom::blink::SiteIndex::DataView, ::network::mojom::blink::SiteIndexPtr>::Read(
    ::network::mojom::blink::SiteIndex::DataView input,
    ::network::mojom::blink::SiteIndexPtr* output) {
  bool success = true;
  ::network::mojom::blink::SiteIndexPtr result(::network::mojom::blink::SiteIndex::New());
  
      if (success)
        result->value = input.value();
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::blink::FirstPartySetEntry::DataView, ::network::mojom::blink::FirstPartySetEntryPtr>::Read(
    ::network::mojom::blink::FirstPartySetEntry::DataView input,
    ::network::mojom::blink::FirstPartySetEntryPtr* output) {
  bool success = true;
  ::network::mojom::blink::FirstPartySetEntryPtr result(::network::mojom::blink::FirstPartySetEntry::New());
  
      if (success && !input.ReadPrimary(&result->primary))
        success = false;
      if (success && !input.ReadSiteType(&result->site_type))
        success = false;
      if (success && !input.ReadSiteIndex(&result->site_index))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::blink::SamePartyContext::DataView, ::network::mojom::blink::SamePartyContextPtr>::Read(
    ::network::mojom::blink::SamePartyContext::DataView input,
    ::network::mojom::blink::SamePartyContextPtr* output) {
  bool success = true;
  ::network::mojom::blink::SamePartyContextPtr result(::network::mojom::blink::SamePartyContext::New());
  
      if (success && !input.ReadContextType(&result->context_type))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::blink::FirstPartySetMetadata::DataView, ::network::mojom::blink::FirstPartySetMetadataPtr>::Read(
    ::network::mojom::blink::FirstPartySetMetadata::DataView input,
    ::network::mojom::blink::FirstPartySetMetadataPtr* output) {
  bool success = true;
  ::network::mojom::blink::FirstPartySetMetadataPtr result(::network::mojom::blink::FirstPartySetMetadata::New());
  
      if (success && !input.ReadContext(&result->context))
        success = false;
      if (success && !input.ReadFrameEntry(&result->frame_entry))
        success = false;
      if (success && !input.ReadTopFrameEntry(&result->top_frame_entry))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif