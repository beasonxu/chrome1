// services/network/public/mojom/accept_ch_frame_observer.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_ACCEPT_CH_FRAME_OBSERVER_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_ACCEPT_CH_FRAME_OBSERVER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Origin_Data> origin;
  mojo::internal::Pointer<mojo::internal::Array_Data<int32_t>> accept_ch_frame;

 private:
  friend class mojo::internal::MessageFragment<AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data>;

  AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data();
  ~AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data() = delete;
};
static_assert(sizeof(AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data) == 24,
              "Bad sizeof(AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data)");
class  AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data>;

  AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data();
  ~AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data() = delete;
};
static_assert(sizeof(AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data) == 16,
              "Bad sizeof(AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data)");
class  AcceptCHFrameObserver_Clone_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data listener;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<AcceptCHFrameObserver_Clone_Params_Data>;

  AcceptCHFrameObserver_Clone_Params_Data();
  ~AcceptCHFrameObserver_Clone_Params_Data() = delete;
};
static_assert(sizeof(AcceptCHFrameObserver_Clone_Params_Data) == 16,
              "Bad sizeof(AcceptCHFrameObserver_Clone_Params_Data)");

}  // namespace internal


class AcceptCHFrameObserver_OnAcceptCHFrameReceived_ParamsDataView {
 public:
  AcceptCHFrameObserver_OnAcceptCHFrameReceived_ParamsDataView() = default;

  AcceptCHFrameObserver_OnAcceptCHFrameReceived_ParamsDataView(
      internal::AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetOriginDataView(
      ::url::mojom::OriginDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOrigin(UserType* output) {
    
    auto* pointer = data_->origin.Get();
    return mojo::internal::Deserialize<::url::mojom::OriginDataView>(
        pointer, output, message_);
  }
  inline void GetAcceptChFrameDataView(
      mojo::ArrayDataView<::network::mojom::WebClientHintsType>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAcceptChFrame(UserType* output) {
    
    auto* pointer = data_->accept_ch_frame.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::WebClientHintsType>>(
        pointer, output, message_);
  }
 private:
  internal::AcceptCHFrameObserver_OnAcceptCHFrameReceived_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParamsDataView {
 public:
  AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParamsDataView() = default;

  AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParamsDataView(
      internal::AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int32_t status() const {
    return data_->status;
  }
 private:
  internal::AcceptCHFrameObserver_OnAcceptCHFrameReceived_ResponseParams_Data* data_ = nullptr;
};



class AcceptCHFrameObserver_Clone_ParamsDataView {
 public:
  AcceptCHFrameObserver_Clone_ParamsDataView() = default;

  AcceptCHFrameObserver_Clone_ParamsDataView(
      internal::AcceptCHFrameObserver_Clone_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::AcceptCHFrameObserverInterfaceBase>>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::AcceptCHFrameObserver_Clone_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void AcceptCHFrameObserver_OnAcceptCHFrameReceived_ParamsDataView::GetOriginDataView(
    ::url::mojom::OriginDataView* output) {
  auto pointer = data_->origin.Get();
  *output = ::url::mojom::OriginDataView(pointer, message_);
}
inline void AcceptCHFrameObserver_OnAcceptCHFrameReceived_ParamsDataView::GetAcceptChFrameDataView(
    mojo::ArrayDataView<::network::mojom::WebClientHintsType>* output) {
  auto pointer = data_->accept_ch_frame.Get();
  *output = mojo::ArrayDataView<::network::mojom::WebClientHintsType>(pointer, message_);
}





}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_ACCEPT_CH_FRAME_OBSERVER_MOJOM_PARAMS_DATA_H_