// services/network/public/mojom/cookie_partition_key.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_PARTITION_KEY_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_PARTITION_KEY_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/cookie_partition_key.mojom-shared.h"
#include "services/network/public/mojom/cookie_partition_key.mojom-blink-forward.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-blink.h"
#include "services/network/public/mojom/schemeful_site.mojom-blink.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "third_party/blink/public/platform/web_common.h"




namespace network {
namespace mojom {
namespace blink {









class BLINK_PLATFORM_EXPORT CookiePartitionKey {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CookiePartitionKey, T>::value>;
  using DataView = CookiePartitionKeyDataView;
  using Data_ = internal::CookiePartitionKey_Data;

  template <typename... Args>
  static CookiePartitionKeyPtr New(Args&&... args) {
    return CookiePartitionKeyPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CookiePartitionKeyPtr From(const U& u) {
    return mojo::TypeConverter<CookiePartitionKeyPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CookiePartitionKey>::Convert(*this);
  }


  CookiePartitionKey();

  CookiePartitionKey(
      const ::blink::BlinkSchemefulSite& site,
      bool from_script,
      const absl::optional<::base::UnguessableToken>& nonce);


  ~CookiePartitionKey();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CookiePartitionKeyPtr>
  CookiePartitionKeyPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CookiePartitionKey::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CookiePartitionKey::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CookiePartitionKey::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CookiePartitionKey::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CookiePartitionKey_UnserializedMessageContext<
            UserType, CookiePartitionKey::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CookiePartitionKey::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return CookiePartitionKey::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CookiePartitionKey_UnserializedMessageContext<
            UserType, CookiePartitionKey::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CookiePartitionKey::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::blink::BlinkSchemefulSite site;
  
  bool from_script;
  
  absl::optional<::base::UnguessableToken> nonce;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CookiePartitionKey::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CookiePartitionKey::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CookiePartitionKey::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CookiePartitionKey::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}





class BLINK_PLATFORM_EXPORT CookiePartitionKeyCollection {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CookiePartitionKeyCollection, T>::value>;
  using DataView = CookiePartitionKeyCollectionDataView;
  using Data_ = internal::CookiePartitionKeyCollection_Data;

  template <typename... Args>
  static CookiePartitionKeyCollectionPtr New(Args&&... args) {
    return CookiePartitionKeyCollectionPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CookiePartitionKeyCollectionPtr From(const U& u) {
    return mojo::TypeConverter<CookiePartitionKeyCollectionPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CookiePartitionKeyCollection>::Convert(*this);
  }


  CookiePartitionKeyCollection();

  CookiePartitionKeyCollection(
      bool contains_all_partitions,
      WTF::Vector<CookiePartitionKeyPtr> keys);

CookiePartitionKeyCollection(const CookiePartitionKeyCollection&) = delete;
CookiePartitionKeyCollection& operator=(const CookiePartitionKeyCollection&) = delete;

  ~CookiePartitionKeyCollection();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CookiePartitionKeyCollectionPtr>
  CookiePartitionKeyCollectionPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CookiePartitionKeyCollection::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CookiePartitionKeyCollection::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CookiePartitionKeyCollection_UnserializedMessageContext<
            UserType, CookiePartitionKeyCollection::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CookiePartitionKeyCollection::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return CookiePartitionKeyCollection::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CookiePartitionKeyCollection_UnserializedMessageContext<
            UserType, CookiePartitionKeyCollection::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CookiePartitionKeyCollection::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  bool contains_all_partitions;
  
  WTF::Vector<CookiePartitionKeyPtr> keys;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
CookiePartitionKeyPtr CookiePartitionKey::Clone() const {
  return New(
      mojo::Clone(site),
      mojo::Clone(from_script),
      mojo::Clone(nonce)
  );
}

template <typename T, CookiePartitionKey::EnableIfSame<T>*>
bool CookiePartitionKey::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->site, other_struct.site))
    return false;
  if (!mojo::Equals(this->from_script, other_struct.from_script))
    return false;
  if (!mojo::Equals(this->nonce, other_struct.nonce))
    return false;
  return true;
}

template <typename T, CookiePartitionKey::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.site < rhs.site)
    return true;
  if (rhs.site < lhs.site)
    return false;
  if (lhs.from_script < rhs.from_script)
    return true;
  if (rhs.from_script < lhs.from_script)
    return false;
  if (lhs.nonce < rhs.nonce)
    return true;
  if (rhs.nonce < lhs.nonce)
    return false;
  return false;
}
template <typename StructPtrType>
CookiePartitionKeyCollectionPtr CookiePartitionKeyCollection::Clone() const {
  return New(
      mojo::Clone(contains_all_partitions),
      mojo::Clone(keys)
  );
}

template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>*>
bool CookiePartitionKeyCollection::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->contains_all_partitions, other_struct.contains_all_partitions))
    return false;
  if (!mojo::Equals(this->keys, other_struct.keys))
    return false;
  return true;
}

template <typename T, CookiePartitionKeyCollection::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.contains_all_partitions < rhs.contains_all_partitions)
    return true;
  if (rhs.contains_all_partitions < lhs.contains_all_partitions)
    return false;
  if (lhs.keys < rhs.keys)
    return true;
  if (rhs.keys < lhs.keys)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::CookiePartitionKey::DataView,
                                         ::network::mojom::blink::CookiePartitionKeyPtr> {
  static bool IsNull(const ::network::mojom::blink::CookiePartitionKeyPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::CookiePartitionKeyPtr* output) { output->reset(); }

  static const decltype(::network::mojom::blink::CookiePartitionKey::site)& site(
      const ::network::mojom::blink::CookiePartitionKeyPtr& input) {
    return input->site;
  }

  static decltype(::network::mojom::blink::CookiePartitionKey::from_script) from_script(
      const ::network::mojom::blink::CookiePartitionKeyPtr& input) {
    return input->from_script;
  }

  static const decltype(::network::mojom::blink::CookiePartitionKey::nonce)& nonce(
      const ::network::mojom::blink::CookiePartitionKeyPtr& input) {
    return input->nonce;
  }

  static bool Read(::network::mojom::blink::CookiePartitionKey::DataView input, ::network::mojom::blink::CookiePartitionKeyPtr* output);
};


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::CookiePartitionKeyCollection::DataView,
                                         ::network::mojom::blink::CookiePartitionKeyCollectionPtr> {
  static bool IsNull(const ::network::mojom::blink::CookiePartitionKeyCollectionPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::CookiePartitionKeyCollectionPtr* output) { output->reset(); }

  static decltype(::network::mojom::blink::CookiePartitionKeyCollection::contains_all_partitions) contains_all_partitions(
      const ::network::mojom::blink::CookiePartitionKeyCollectionPtr& input) {
    return input->contains_all_partitions;
  }

  static const decltype(::network::mojom::blink::CookiePartitionKeyCollection::keys)& keys(
      const ::network::mojom::blink::CookiePartitionKeyCollectionPtr& input) {
    return input->keys;
  }

  static bool Read(::network::mojom::blink::CookiePartitionKeyCollection::DataView input, ::network::mojom::blink::CookiePartitionKeyCollectionPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_PARTITION_KEY_MOJOM_BLINK_H_