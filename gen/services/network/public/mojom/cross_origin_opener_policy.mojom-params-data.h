// services/network/public/mojom/cross_origin_opener_policy.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_OPENER_POLICY_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_OPENER_POLICY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t report_type;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> property;
  mojo::internal::Pointer<::network::mojom::internal::SourceLocation_Data> source_location;
  mojo::internal::Pointer<mojo::internal::String_Data> reported_window_url;

 private:
  friend class mojo::internal::MessageFragment<CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data>;

  CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data();
  ~CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data() = delete;
};
static_assert(sizeof(CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data) == 40,
              "Bad sizeof(CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data)");

}  // namespace internal


class CrossOriginOpenerPolicyReporter_QueueAccessReport_ParamsDataView {
 public:
  CrossOriginOpenerPolicyReporter_QueueAccessReport_ParamsDataView() = default;

  CrossOriginOpenerPolicyReporter_QueueAccessReport_ParamsDataView(
      internal::CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadReportType(UserType* output) const {
    auto data_value = data_->report_type;
    return mojo::internal::Deserialize<::network::mojom::CoopAccessReportType>(
        data_value, output);
  }
  CoopAccessReportType report_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::CoopAccessReportType>(data_->report_type));
  }
  inline void GetPropertyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProperty(UserType* output) {
    
    auto* pointer = data_->property.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSourceLocationDataView(
      ::network::mojom::SourceLocationDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSourceLocation(UserType* output) {
    
    auto* pointer = data_->source_location.Get();
    return mojo::internal::Deserialize<::network::mojom::SourceLocationDataView>(
        pointer, output, message_);
  }
  inline void GetReportedWindowUrlDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadReportedWindowUrl(UserType* output) {
    
    auto* pointer = data_->reported_window_url.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::CrossOriginOpenerPolicyReporter_QueueAccessReport_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CrossOriginOpenerPolicyReporter_QueueAccessReport_ParamsDataView::GetPropertyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->property.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void CrossOriginOpenerPolicyReporter_QueueAccessReport_ParamsDataView::GetSourceLocationDataView(
    ::network::mojom::SourceLocationDataView* output) {
  auto pointer = data_->source_location.Get();
  *output = ::network::mojom::SourceLocationDataView(pointer, message_);
}
inline void CrossOriginOpenerPolicyReporter_QueueAccessReport_ParamsDataView::GetReportedWindowUrlDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->reported_window_url.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_CROSS_ORIGIN_OPENER_POLICY_MOJOM_PARAMS_DATA_H_