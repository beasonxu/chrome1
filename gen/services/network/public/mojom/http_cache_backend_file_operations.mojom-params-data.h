// services/network/public/mojom/http_cache_backend_file_operations.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_HTTP_CACHE_BACKEND_FILE_OPERATIONS_MOJOM_PARAMS_DATA_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_HTTP_CACHE_BACKEND_FILE_OPERATIONS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace network {
namespace mojom {
namespace internal {

class ValidationContext;
class  FileEnumerator_GetNext_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint32_t num_entries;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileEnumerator_GetNext_Params_Data>;

  FileEnumerator_GetNext_Params_Data();
  ~FileEnumerator_GetNext_Params_Data() = delete;
};
static_assert(sizeof(FileEnumerator_GetNext_Params_Data) == 16,
              "Bad sizeof(FileEnumerator_GetNext_Params_Data)");
class  FileEnumerator_GetNext_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::FileEnumerationEntry_Data>>> entries;
  uint8_t end : 1;
  uint8_t error : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<FileEnumerator_GetNext_ResponseParams_Data>;

  FileEnumerator_GetNext_ResponseParams_Data();
  ~FileEnumerator_GetNext_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileEnumerator_GetNext_ResponseParams_Data) == 24,
              "Bad sizeof(FileEnumerator_GetNext_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_CreateDirectory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_CreateDirectory_Params_Data>;

  HttpCacheBackendFileOperations_CreateDirectory_Params_Data();
  ~HttpCacheBackendFileOperations_CreateDirectory_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_CreateDirectory_Params_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_CreateDirectory_Params_Data)");
class  HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data>;

  HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_PathExists_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_PathExists_Params_Data>;

  HttpCacheBackendFileOperations_PathExists_Params_Data();
  ~HttpCacheBackendFileOperations_PathExists_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_PathExists_Params_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_PathExists_Params_Data)");
class  HttpCacheBackendFileOperations_PathExists_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_PathExists_ResponseParams_Data>;

  HttpCacheBackendFileOperations_PathExists_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_PathExists_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_PathExists_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_PathExists_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_DirectoryExists_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_DirectoryExists_Params_Data>;

  HttpCacheBackendFileOperations_DirectoryExists_Params_Data();
  ~HttpCacheBackendFileOperations_DirectoryExists_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_DirectoryExists_Params_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_DirectoryExists_Params_Data)");
class  HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data>;

  HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_OpenFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;
  int32_t flags;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_OpenFile_Params_Data>;

  HttpCacheBackendFileOperations_OpenFile_Params_Data();
  ~HttpCacheBackendFileOperations_OpenFile_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_OpenFile_Params_Data) == 24,
              "Bad sizeof(HttpCacheBackendFileOperations_OpenFile_Params_Data)");
class  HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::File_Data> file;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data>;

  HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data) == 24,
              "Bad sizeof(HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_DeleteFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;
  int32_t mode;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_DeleteFile_Params_Data>;

  HttpCacheBackendFileOperations_DeleteFile_Params_Data();
  ~HttpCacheBackendFileOperations_DeleteFile_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_DeleteFile_Params_Data) == 24,
              "Bad sizeof(HttpCacheBackendFileOperations_DeleteFile_Params_Data)");
class  HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data>;

  HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_RenameFile_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> from_path;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> to_path;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_RenameFile_Params_Data>;

  HttpCacheBackendFileOperations_RenameFile_Params_Data();
  ~HttpCacheBackendFileOperations_RenameFile_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_RenameFile_Params_Data) == 24,
              "Bad sizeof(HttpCacheBackendFileOperations_RenameFile_Params_Data)");
class  HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t error;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data>;

  HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_GetFileInfo_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_GetFileInfo_Params_Data>;

  HttpCacheBackendFileOperations_GetFileInfo_Params_Data();
  ~HttpCacheBackendFileOperations_GetFileInfo_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_GetFileInfo_Params_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_GetFileInfo_Params_Data)");
class  HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FileInfo_Data> info;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data>;

  HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data)");
class  HttpCacheBackendFileOperations_EnumerateFiles_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_EnumerateFiles_Params_Data>;

  HttpCacheBackendFileOperations_EnumerateFiles_Params_Data();
  ~HttpCacheBackendFileOperations_EnumerateFiles_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_EnumerateFiles_Params_Data) == 24,
              "Bad sizeof(HttpCacheBackendFileOperations_EnumerateFiles_Params_Data)");
class  HttpCacheBackendFileOperations_CleanupDirectory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_CleanupDirectory_Params_Data>;

  HttpCacheBackendFileOperations_CleanupDirectory_Params_Data();
  ~HttpCacheBackendFileOperations_CleanupDirectory_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_CleanupDirectory_Params_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_CleanupDirectory_Params_Data)");
class  HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t result : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data>;

  HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data();
  ~HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data)");
class  HttpCacheBackendFileOperationsFactory_Create_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<HttpCacheBackendFileOperationsFactory_Create_Params_Data>;

  HttpCacheBackendFileOperationsFactory_Create_Params_Data();
  ~HttpCacheBackendFileOperationsFactory_Create_Params_Data() = delete;
};
static_assert(sizeof(HttpCacheBackendFileOperationsFactory_Create_Params_Data) == 16,
              "Bad sizeof(HttpCacheBackendFileOperationsFactory_Create_Params_Data)");

}  // namespace internal


class FileEnumerator_GetNext_ParamsDataView {
 public:
  FileEnumerator_GetNext_ParamsDataView() = default;

  FileEnumerator_GetNext_ParamsDataView(
      internal::FileEnumerator_GetNext_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t num_entries() const {
    return data_->num_entries;
  }
 private:
  internal::FileEnumerator_GetNext_Params_Data* data_ = nullptr;
};



class FileEnumerator_GetNext_ResponseParamsDataView {
 public:
  FileEnumerator_GetNext_ResponseParamsDataView() = default;

  FileEnumerator_GetNext_ResponseParamsDataView(
      internal::FileEnumerator_GetNext_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetEntriesDataView(
      mojo::ArrayDataView<FileEnumerationEntryDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::network::mojom::FileEnumerationEntryDataView>>(
        pointer, output, message_);
  }
  bool end() const {
    return data_->end;
  }
  bool error() const {
    return data_->error;
  }
 private:
  internal::FileEnumerator_GetNext_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_CreateDirectory_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_CreateDirectory_ParamsDataView() = default;

  HttpCacheBackendFileOperations_CreateDirectory_ParamsDataView(
      internal::HttpCacheBackendFileOperations_CreateDirectory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_CreateDirectory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_CreateDirectory_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_CreateDirectory_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_CreateDirectory_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::HttpCacheBackendFileOperations_CreateDirectory_ResponseParams_Data* data_ = nullptr;
};



class HttpCacheBackendFileOperations_PathExists_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_PathExists_ParamsDataView() = default;

  HttpCacheBackendFileOperations_PathExists_ParamsDataView(
      internal::HttpCacheBackendFileOperations_PathExists_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_PathExists_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_PathExists_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_PathExists_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_PathExists_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_PathExists_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::HttpCacheBackendFileOperations_PathExists_ResponseParams_Data* data_ = nullptr;
};



class HttpCacheBackendFileOperations_DirectoryExists_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_DirectoryExists_ParamsDataView() = default;

  HttpCacheBackendFileOperations_DirectoryExists_ParamsDataView(
      internal::HttpCacheBackendFileOperations_DirectoryExists_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_DirectoryExists_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_DirectoryExists_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_DirectoryExists_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_DirectoryExists_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::HttpCacheBackendFileOperations_DirectoryExists_ResponseParams_Data* data_ = nullptr;
};



class HttpCacheBackendFileOperations_OpenFile_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_OpenFile_ParamsDataView() = default;

  HttpCacheBackendFileOperations_OpenFile_ParamsDataView(
      internal::HttpCacheBackendFileOperations_OpenFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFlags(UserType* output) const {
    auto data_value = data_->flags;
    return mojo::internal::Deserialize<::network::mojom::HttpCacheBackendOpenFileFlags>(
        data_value, output);
  }
  HttpCacheBackendOpenFileFlags flags() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::HttpCacheBackendOpenFileFlags>(data_->flags));
  }
 private:
  internal::HttpCacheBackendFileOperations_OpenFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_OpenFile_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_OpenFile_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_OpenFile_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFileDataView(
      ::mojo_base::mojom::FileDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFile(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::FileDataView, UserType>(),
    "Attempting to read the optional `file` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadFile` instead "
    "of `ReadFile if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->file.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::mojo_base::mojom::FileError>(
        data_value, output);
  }
  ::mojo_base::mojom::FileError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::FileError>(data_->error));
  }
 private:
  internal::HttpCacheBackendFileOperations_OpenFile_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_DeleteFile_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_DeleteFile_ParamsDataView() = default;

  HttpCacheBackendFileOperations_DeleteFile_ParamsDataView(
      internal::HttpCacheBackendFileOperations_DeleteFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadMode(UserType* output) const {
    auto data_value = data_->mode;
    return mojo::internal::Deserialize<::network::mojom::HttpCacheBackendDeleteFileMode>(
        data_value, output);
  }
  HttpCacheBackendDeleteFileMode mode() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::network::mojom::HttpCacheBackendDeleteFileMode>(data_->mode));
  }
 private:
  internal::HttpCacheBackendFileOperations_DeleteFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_DeleteFile_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_DeleteFile_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_DeleteFile_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::HttpCacheBackendFileOperations_DeleteFile_ResponseParams_Data* data_ = nullptr;
};



class HttpCacheBackendFileOperations_RenameFile_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_RenameFile_ParamsDataView() = default;

  HttpCacheBackendFileOperations_RenameFile_ParamsDataView(
      internal::HttpCacheBackendFileOperations_RenameFile_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFromPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFromPath(UserType* output) {
    
    auto* pointer = data_->from_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  inline void GetToPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToPath(UserType* output) {
    
    auto* pointer = data_->to_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_RenameFile_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_RenameFile_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_RenameFile_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_RenameFile_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadError(UserType* output) const {
    auto data_value = data_->error;
    return mojo::internal::Deserialize<::mojo_base::mojom::FileError>(
        data_value, output);
  }
  ::mojo_base::mojom::FileError error() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::FileError>(data_->error));
  }
 private:
  internal::HttpCacheBackendFileOperations_RenameFile_ResponseParams_Data* data_ = nullptr;
};



class HttpCacheBackendFileOperations_GetFileInfo_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_GetFileInfo_ParamsDataView() = default;

  HttpCacheBackendFileOperations_GetFileInfo_ParamsDataView(
      internal::HttpCacheBackendFileOperations_GetFileInfo_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_GetFileInfo_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_GetFileInfo_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_GetFileInfo_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_GetFileInfo_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      ::mojo_base::mojom::FileInfoDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::mojo_base::mojom::FileInfoDataView, UserType>(),
    "Attempting to read the optional `info` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadInfo` instead "
    "of `ReadInfo if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FileInfoDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_GetFileInfo_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_EnumerateFiles_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_EnumerateFiles_ParamsDataView() = default;

  HttpCacheBackendFileOperations_EnumerateFiles_ParamsDataView(
      internal::HttpCacheBackendFileOperations_EnumerateFiles_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::FileEnumeratorInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HttpCacheBackendFileOperations_EnumerateFiles_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_CleanupDirectory_ParamsDataView {
 public:
  HttpCacheBackendFileOperations_CleanupDirectory_ParamsDataView() = default;

  HttpCacheBackendFileOperations_CleanupDirectory_ParamsDataView(
      internal::HttpCacheBackendFileOperations_CleanupDirectory_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::HttpCacheBackendFileOperations_CleanupDirectory_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class HttpCacheBackendFileOperations_CleanupDirectory_ResponseParamsDataView {
 public:
  HttpCacheBackendFileOperations_CleanupDirectory_ResponseParamsDataView() = default;

  HttpCacheBackendFileOperations_CleanupDirectory_ResponseParamsDataView(
      internal::HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool result() const {
    return data_->result;
  }
 private:
  internal::HttpCacheBackendFileOperations_CleanupDirectory_ResponseParams_Data* data_ = nullptr;
};



class HttpCacheBackendFileOperationsFactory_Create_ParamsDataView {
 public:
  HttpCacheBackendFileOperationsFactory_Create_ParamsDataView() = default;

  HttpCacheBackendFileOperationsFactory_Create_ParamsDataView(
      internal::HttpCacheBackendFileOperationsFactory_Create_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::network::mojom::HttpCacheBackendFileOperationsInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::HttpCacheBackendFileOperationsFactory_Create_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void FileEnumerator_GetNext_ResponseParamsDataView::GetEntriesDataView(
    mojo::ArrayDataView<FileEnumerationEntryDataView>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::ArrayDataView<FileEnumerationEntryDataView>(pointer, message_);
}


inline void HttpCacheBackendFileOperations_CreateDirectory_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void HttpCacheBackendFileOperations_PathExists_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void HttpCacheBackendFileOperations_DirectoryExists_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void HttpCacheBackendFileOperations_OpenFile_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}


inline void HttpCacheBackendFileOperations_OpenFile_ResponseParamsDataView::GetFileDataView(
    ::mojo_base::mojom::FileDataView* output) {
  auto pointer = data_->file.Get();
  *output = ::mojo_base::mojom::FileDataView(pointer, message_);
}


inline void HttpCacheBackendFileOperations_DeleteFile_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void HttpCacheBackendFileOperations_RenameFile_ParamsDataView::GetFromPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->from_path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}
inline void HttpCacheBackendFileOperations_RenameFile_ParamsDataView::GetToPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->to_path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void HttpCacheBackendFileOperations_GetFileInfo_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}


inline void HttpCacheBackendFileOperations_GetFileInfo_ResponseParamsDataView::GetInfoDataView(
    ::mojo_base::mojom::FileInfoDataView* output) {
  auto pointer = data_->info.Get();
  *output = ::mojo_base::mojom::FileInfoDataView(pointer, message_);
}


inline void HttpCacheBackendFileOperations_EnumerateFiles_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}


inline void HttpCacheBackendFileOperations_CleanupDirectory_ParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace network

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_HTTP_CACHE_BACKEND_FILE_OPERATIONS_MOJOM_PARAMS_DATA_H_