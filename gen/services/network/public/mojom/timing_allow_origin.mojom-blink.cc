// services/network/public/mojom/timing_allow_origin.mojom-blink.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/timing_allow_origin.mojom-blink.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/timing_allow_origin.mojom-params-data.h"
#include "services/network/public/mojom/timing_allow_origin.mojom-shared-message-ids.h"

#include "services/network/public/mojom/timing_allow_origin.mojom-blink-import-headers.h"
#include "services/network/public/mojom/timing_allow_origin.mojom-blink-test-utils.h"
#include "mojo/public/cpp/bindings/lib/wtf_serialization.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_TIMING_ALLOW_ORIGIN_MOJOM_BLINK_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_TIMING_ALLOW_ORIGIN_MOJOM_BLINK_JUMBO_H_
#endif



namespace network {
namespace mojom {
namespace blink {
TimingAllowOrigin::TimingAllowOrigin() : tag_(Tag::kSerializedOrigins) {
  data_.serialized_origins = new WTF::Vector<WTF::String>;
}

TimingAllowOrigin::~TimingAllowOrigin() {
  DestroyActive();
}


void TimingAllowOrigin::set_serialized_origins(
    WTF::Vector<WTF::String> serialized_origins) {
  if (tag_ == Tag::kSerializedOrigins) {
    *(data_.serialized_origins) = std::move(serialized_origins);
  } else {
    DestroyActive();
    tag_ = Tag::kSerializedOrigins;
    data_.serialized_origins = new WTF::Vector<WTF::String>(
        std::move(serialized_origins));
  }
}
void TimingAllowOrigin::set_all(
    uint8_t all) {
  if (tag_ != Tag::kAll) {
    DestroyActive();
    tag_ = Tag::kAll;
  }
  data_.all = all;
}

void TimingAllowOrigin::DestroyActive() {
  switch (tag_) {

    case Tag::kSerializedOrigins:

      delete data_.serialized_origins;
      break;
    case Tag::kAll:

      break;
  }
}

bool TimingAllowOrigin::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context, false);
}


}  // namespace blink
}  // namespace mojom
}  // namespace network


namespace mojo {

// static
bool UnionTraits<::network::mojom::blink::TimingAllowOrigin::DataView, ::network::mojom::blink::TimingAllowOriginPtr>::Read(
    ::network::mojom::blink::TimingAllowOrigin::DataView input,
    ::network::mojom::blink::TimingAllowOriginPtr* output) {
  using UnionType = ::network::mojom::blink::TimingAllowOrigin;
  using Tag = UnionType::Tag;

  switch (input.tag()) {
    case Tag::kSerializedOrigins: {
      WTF::Vector<WTF::String> result_serialized_origins;
      if (!input.ReadSerializedOrigins(&result_serialized_origins))
        return false;

      *output = UnionType::NewSerializedOrigins(
          std::move(result_serialized_origins));
      break;
    }
    case Tag::kAll: {
      *output = UnionType::NewAll(input.all());
      break;
    }
    default:

      return false;
  }
  return true;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {
namespace blink {




}  // namespace blink
}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif