// services/network/public/mojom/proxy_resolving_socket.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('network.mojom.SocketObserver');
goog.require('network.mojom.TLSClientSocket');
goog.require('network.mojom.HostPortPair');
goog.require('network.mojom.IPEndPoint');
goog.require('network.mojom.MutableNetworkTrafficAnnotationTag');
goog.require('network.mojom.NetworkIsolationKey');
goog.require('url.mojom.Url');






goog.provide('network.mojom.ProxyResolvingSocket');
goog.provide('network.mojom.ProxyResolvingSocketReceiver');
goog.provide('network.mojom.ProxyResolvingSocketCallbackRouter');
goog.provide('network.mojom.ProxyResolvingSocketInterface');
goog.provide('network.mojom.ProxyResolvingSocketRemote');
goog.provide('network.mojom.ProxyResolvingSocketPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.ProxyResolvingSocketPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        network.mojom.ProxyResolvingSocket.$interfaceName,
        scope);
  }
};

/** @interface */
network.mojom.ProxyResolvingSocketInterface = class {
  
  /**
   * @param { !network.mojom.HostPortPair } hostPortPair
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   * @param { !network.mojom.TLSClientSocketPendingReceiver } receiver
   * @param { ?network.mojom.SocketObserverRemote } observer
   * @return {!Promise<{
        netError: !number,
        receiveStream: ?MojoHandle,
        sendStream: ?MojoHandle,
   *  }>}
   */

  upgradeToTLS(hostPortPair, trafficAnnotation, receiver, observer) {}
};

/**
 * @export
 * @implements { network.mojom.ProxyResolvingSocketInterface }
 */
network.mojom.ProxyResolvingSocketRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.ProxyResolvingSocketPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.ProxyResolvingSocketPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.ProxyResolvingSocketPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !network.mojom.HostPortPair } hostPortPair
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   * @param { !network.mojom.TLSClientSocketPendingReceiver } receiver
   * @param { ?network.mojom.SocketObserverRemote } observer
   * @return {!Promise<{
        netError: !number,
        receiveStream: ?MojoHandle,
        sendStream: ?MojoHandle,
   *  }>}
   */

  upgradeToTLS(
      hostPortPair,
      trafficAnnotation,
      receiver,
      observer) {
    return this.proxy.sendMessage(
        0,
        network.mojom.ProxyResolvingSocket_UpgradeToTLS_ParamsSpec.$,
        network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParamsSpec.$,
        [
          hostPortPair,
          trafficAnnotation,
          receiver,
          observer
        ]);
  }
};

/**
 * An object which receives request messages for the ProxyResolvingSocket
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.ProxyResolvingSocketReceiver = class {
  /**
   * @param {!network.mojom.ProxyResolvingSocketInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.ProxyResolvingSocketRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.ProxyResolvingSocketRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ProxyResolvingSocketRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        network.mojom.ProxyResolvingSocket_UpgradeToTLS_ParamsSpec.$,
        network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParamsSpec.$,
        impl.upgradeToTLS.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.ProxyResolvingSocket = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.ProxyResolvingSocket";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.ProxyResolvingSocketRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.ProxyResolvingSocketRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the ProxyResolvingSocket
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.ProxyResolvingSocketCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.ProxyResolvingSocketRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ProxyResolvingSocketRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.upgradeToTLS =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        network.mojom.ProxyResolvingSocket_UpgradeToTLS_ParamsSpec.$,
        network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParamsSpec.$,
        this.upgradeToTLS.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.ProxyResolvingSocketFactory');
goog.provide('network.mojom.ProxyResolvingSocketFactoryReceiver');
goog.provide('network.mojom.ProxyResolvingSocketFactoryCallbackRouter');
goog.provide('network.mojom.ProxyResolvingSocketFactoryInterface');
goog.provide('network.mojom.ProxyResolvingSocketFactoryRemote');
goog.provide('network.mojom.ProxyResolvingSocketFactoryPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
network.mojom.ProxyResolvingSocketFactoryPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        network.mojom.ProxyResolvingSocketFactory.$interfaceName,
        scope);
  }
};

/** @interface */
network.mojom.ProxyResolvingSocketFactoryInterface = class {
  
  /**
   * @param { !url.mojom.Url } url
   * @param { !network.mojom.NetworkIsolationKey } networkIsolationKey
   * @param { ?network.mojom.ProxyResolvingSocketOptions } options
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   * @param { !network.mojom.ProxyResolvingSocketPendingReceiver } socket
   * @param { ?network.mojom.SocketObserverRemote } observer
   * @return {!Promise<{
        result: !number,
        localAddr: ?network.mojom.IPEndPoint,
        peerAddr: ?network.mojom.IPEndPoint,
        receiveStream: ?MojoHandle,
        sendStream: ?MojoHandle,
   *  }>}
   */

  createProxyResolvingSocket(url, networkIsolationKey, options, trafficAnnotation, socket, observer) {}
};

/**
 * @export
 * @implements { network.mojom.ProxyResolvingSocketFactoryInterface }
 */
network.mojom.ProxyResolvingSocketFactoryRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!network.mojom.ProxyResolvingSocketFactoryPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          network.mojom.ProxyResolvingSocketFactoryPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!network.mojom.ProxyResolvingSocketFactoryPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !url.mojom.Url } url
   * @param { !network.mojom.NetworkIsolationKey } networkIsolationKey
   * @param { ?network.mojom.ProxyResolvingSocketOptions } options
   * @param { !network.mojom.MutableNetworkTrafficAnnotationTag } trafficAnnotation
   * @param { !network.mojom.ProxyResolvingSocketPendingReceiver } socket
   * @param { ?network.mojom.SocketObserverRemote } observer
   * @return {!Promise<{
        result: !number,
        localAddr: ?network.mojom.IPEndPoint,
        peerAddr: ?network.mojom.IPEndPoint,
        receiveStream: ?MojoHandle,
        sendStream: ?MojoHandle,
   *  }>}
   */

  createProxyResolvingSocket(
      url,
      networkIsolationKey,
      options,
      trafficAnnotation,
      socket,
      observer) {
    return this.proxy.sendMessage(
        0,
        network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ParamsSpec.$,
        network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParamsSpec.$,
        [
          url,
          networkIsolationKey,
          options,
          trafficAnnotation,
          socket,
          observer
        ]);
  }
};

/**
 * An object which receives request messages for the ProxyResolvingSocketFactory
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
network.mojom.ProxyResolvingSocketFactoryReceiver = class {
  /**
   * @param {!network.mojom.ProxyResolvingSocketFactoryInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!network.mojom.ProxyResolvingSocketFactoryRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        network.mojom.ProxyResolvingSocketFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ProxyResolvingSocketFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ParamsSpec.$,
        network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParamsSpec.$,
        impl.createProxyResolvingSocket.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
network.mojom.ProxyResolvingSocketFactory = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "network.mojom.ProxyResolvingSocketFactory";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!network.mojom.ProxyResolvingSocketFactoryRemote}
   * @export
   */
  static getRemote() {
    let remote = new network.mojom.ProxyResolvingSocketFactoryRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the ProxyResolvingSocketFactory
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
network.mojom.ProxyResolvingSocketFactoryCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      network.mojom.ProxyResolvingSocketFactoryRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!network.mojom.ProxyResolvingSocketFactoryRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createProxyResolvingSocket =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ParamsSpec.$,
        network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParamsSpec.$,
        this.createProxyResolvingSocket.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('network.mojom.ProxyResolvingSocketOptionsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ProxyResolvingSocketOptionsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ProxyResolvingSocket_UpgradeToTLS_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ProxyResolvingSocket_UpgradeToTLS_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    network.mojom.ProxyResolvingSocketOptionsSpec.$,
    'ProxyResolvingSocketOptions',
    [
      mojo.internal.StructField(
        'useTls', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'fakeTlsHandshake', 0,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('network.mojom.ProxyResolvingSocketOptions');

/** @record */
network.mojom.ProxyResolvingSocketOptions = class {
  constructor() {
    /** @export { !boolean } */
    this.useTls;
    /** @export { !boolean } */
    this.fakeTlsHandshake;
  }
};




mojo.internal.Struct(
    network.mojom.ProxyResolvingSocket_UpgradeToTLS_ParamsSpec.$,
    'ProxyResolvingSocket_UpgradeToTLS_Params',
    [
      mojo.internal.StructField(
        'hostPortPair', 0,
        0,
        network.mojom.HostPortPairSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'trafficAnnotation', 8,
        0,
        network.mojom.MutableNetworkTrafficAnnotationTagSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'receiver', 16,
        0,
        mojo.internal.InterfaceRequest(network.mojom.TLSClientSocketPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'observer', 20,
        0,
        mojo.internal.InterfaceProxy(network.mojom.SocketObserverRemote),
        null,
        true /* nullable */),
    ],
    [[0, 40],]);



goog.provide('network.mojom.ProxyResolvingSocket_UpgradeToTLS_Params');

/** @record */
network.mojom.ProxyResolvingSocket_UpgradeToTLS_Params = class {
  constructor() {
    /** @export { !network.mojom.HostPortPair } */
    this.hostPortPair;
    /** @export { !network.mojom.MutableNetworkTrafficAnnotationTag } */
    this.trafficAnnotation;
    /** @export { !network.mojom.TLSClientSocketPendingReceiver } */
    this.receiver;
    /** @export { (network.mojom.SocketObserverRemote|undefined) } */
    this.observer;
  }
};




mojo.internal.Struct(
    network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParamsSpec.$,
    'ProxyResolvingSocket_UpgradeToTLS_ResponseParams',
    [
      mojo.internal.StructField(
        'netError', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'receiveStream', 4,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'sendStream', 8,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */),
    ],
    [[0, 24],]);



goog.provide('network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParams');

/** @record */
network.mojom.ProxyResolvingSocket_UpgradeToTLS_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.netError;
    /** @export { (MojoHandle|undefined) } */
    this.receiveStream;
    /** @export { (MojoHandle|undefined) } */
    this.sendStream;
  }
};




mojo.internal.Struct(
    network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ParamsSpec.$,
    'ProxyResolvingSocketFactory_CreateProxyResolvingSocket_Params',
    [
      mojo.internal.StructField(
        'url', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'networkIsolationKey', 8,
        0,
        network.mojom.NetworkIsolationKeySpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'options', 16,
        0,
        network.mojom.ProxyResolvingSocketOptionsSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'trafficAnnotation', 24,
        0,
        network.mojom.MutableNetworkTrafficAnnotationTagSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'socket', 32,
        0,
        mojo.internal.InterfaceRequest(network.mojom.ProxyResolvingSocketPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'observer', 36,
        0,
        mojo.internal.InterfaceProxy(network.mojom.SocketObserverRemote),
        null,
        true /* nullable */),
    ],
    [[0, 56],]);



goog.provide('network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_Params');

/** @record */
network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.url;
    /** @export { !network.mojom.NetworkIsolationKey } */
    this.networkIsolationKey;
    /** @export { (network.mojom.ProxyResolvingSocketOptions|undefined) } */
    this.options;
    /** @export { !network.mojom.MutableNetworkTrafficAnnotationTag } */
    this.trafficAnnotation;
    /** @export { !network.mojom.ProxyResolvingSocketPendingReceiver } */
    this.socket;
    /** @export { (network.mojom.SocketObserverRemote|undefined) } */
    this.observer;
  }
};




mojo.internal.Struct(
    network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParamsSpec.$,
    'ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParams',
    [
      mojo.internal.StructField(
        'result', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'localAddr', 8,
        0,
        network.mojom.IPEndPointSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'peerAddr', 16,
        0,
        network.mojom.IPEndPointSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'receiveStream', 4,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'sendStream', 24,
        0,
        mojo.internal.Handle,
        null,
        true /* nullable */),
    ],
    [[0, 40],]);



goog.provide('network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParams');

/** @record */
network.mojom.ProxyResolvingSocketFactory_CreateProxyResolvingSocket_ResponseParams = class {
  constructor() {
    /** @export { !number } */
    this.result;
    /** @export { (MojoHandle|undefined) } */
    this.receiveStream;
    /** @export { (network.mojom.IPEndPoint|undefined) } */
    this.localAddr;
    /** @export { (network.mojom.IPEndPoint|undefined) } */
    this.peerAddr;
    /** @export { (MojoHandle|undefined) } */
    this.sendStream;
  }
};


