// services/network/public/mojom/parsed_headers.mojom-blink.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_BLINK_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_BLINK_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/network/public/mojom/parsed_headers.mojom-shared.h"
#include "services/network/public/mojom/parsed_headers.mojom-blink-forward.h"
#include "mojo/public/mojom/base/time.mojom-blink-forward.h"
#include "services/network/public/mojom/content_security_policy.mojom-blink.h"
#include "services/network/public/mojom/cross_origin_embedder_policy.mojom-blink.h"
#include "services/network/public/mojom/cross_origin_opener_policy.mojom-blink.h"
#include "services/network/public/mojom/link_header.mojom-blink.h"
#include "services/network/public/mojom/timing_allow_origin.mojom-blink.h"
#include "services/network/public/mojom/variants_header.mojom-blink.h"
#include "services/network/public/mojom/web_client_hints_types.mojom-blink-forward.h"
#include "services/network/public/mojom/x_frame_options.mojom-blink-forward.h"

#include "mojo/public/cpp/bindings/lib/wtf_clone_equals_util.h"
#include "mojo/public/cpp/bindings/lib/wtf_hash_util.h"
#include "third_party/blink/renderer/platform/wtf/hash_functions.h"
#include "third_party/blink/renderer/platform/wtf/text/wtf_string.h"




#include "third_party/blink/public/platform/web_common.h"




namespace WTF {
struct network_mojom_internal_OriginAgentClusterValue_DataHashFn {
  static unsigned GetHash(const ::network::mojom::OriginAgentClusterValue& value) {
    using utype = std::underlying_type<::network::mojom::OriginAgentClusterValue>::type;
    return DefaultHash<utype>::Hash().GetHash(static_cast<utype>(value));
  }
  static bool Equal(const ::network::mojom::OriginAgentClusterValue& left, const ::network::mojom::OriginAgentClusterValue& right) {
    return left == right;
  }
  static const bool safe_to_compare_to_empty_or_deleted = true;
};

template <>
struct HashTraits<::network::mojom::OriginAgentClusterValue>
    : public GenericHashTraits<::network::mojom::OriginAgentClusterValue> {
  static_assert(true,
                "-1000000 is a reserved enum value");
  static_assert(true,
                "-1000001 is a reserved enum value");
  static const bool kEmptyValueIsZero = false;
  static ::network::mojom::OriginAgentClusterValue EmptyValue() { return static_cast<::network::mojom::OriginAgentClusterValue>(-1000000); }
  static void ConstructDeletedValue(::network::mojom::OriginAgentClusterValue& slot, bool) {
    slot = static_cast<::network::mojom::OriginAgentClusterValue>(-1000001);
  }
  static bool IsDeletedValue(const ::network::mojom::OriginAgentClusterValue& value) {
    return value == static_cast<::network::mojom::OriginAgentClusterValue>(-1000001);
  }
};
}  // namespace WTF


namespace network {
namespace mojom {
namespace blink {








class BLINK_PLATFORM_EXPORT ParsedHeaders {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ParsedHeaders, T>::value>;
  using DataView = ParsedHeadersDataView;
  using Data_ = internal::ParsedHeaders_Data;

  template <typename... Args>
  static ParsedHeadersPtr New(Args&&... args) {
    return ParsedHeadersPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ParsedHeadersPtr From(const U& u) {
    return mojo::TypeConverter<ParsedHeadersPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ParsedHeaders>::Convert(*this);
  }


  ParsedHeaders();

  ParsedHeaders(
      WTF::Vector<::network::mojom::blink::ContentSecurityPolicyPtr> content_security_policy,
      ::network::mojom::blink::AllowCSPFromHeaderValuePtr allow_csp_from,
      const ::network::CrossOriginEmbedderPolicy& cross_origin_embedder_policy,
      const ::network::CrossOriginOpenerPolicy& cross_origin_opener_policy,
      OriginAgentClusterValue origin_agent_cluster,
      absl::optional<WTF::Vector<::network::mojom::blink::WebClientHintsType>> accept_ch,
      absl::optional<WTF::Vector<::network::mojom::blink::WebClientHintsType>> critical_ch,
      ::network::mojom::blink::XFrameOptionsValue xfo,
      WTF::Vector<::network::mojom::blink::LinkHeaderPtr> link_headers,
      ::network::mojom::blink::TimingAllowOriginPtr timing_allow_origin,
      bool bfcache_opt_in_unload,
      const absl::optional<WTF::HashMap<WTF::String, WTF::String>>& reporting_endpoints,
      absl::optional<WTF::Vector<::network::mojom::blink::VariantsHeaderPtr>> variants_headers,
      absl::optional<WTF::Vector<WTF::String>> content_language);

ParsedHeaders(const ParsedHeaders&) = delete;
ParsedHeaders& operator=(const ParsedHeaders&) = delete;

  ~ParsedHeaders();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ParsedHeadersPtr>
  ParsedHeadersPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ParsedHeaders::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ParsedHeaders::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static WTF::Vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ParsedHeaders::DataView, WTF::Vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ParsedHeaders::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ParsedHeaders_UnserializedMessageContext<
            UserType, ParsedHeaders::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ParsedHeaders::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const WTF::Vector<uint8_t>& input,
                          UserType* output) {
    return ParsedHeaders::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ParsedHeaders_UnserializedMessageContext<
            UserType, ParsedHeaders::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ParsedHeaders::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  WTF::Vector<::network::mojom::blink::ContentSecurityPolicyPtr> content_security_policy;
  
  ::network::mojom::blink::AllowCSPFromHeaderValuePtr allow_csp_from;
  
  ::network::CrossOriginEmbedderPolicy cross_origin_embedder_policy;
  
  ::network::CrossOriginOpenerPolicy cross_origin_opener_policy;
  
  OriginAgentClusterValue origin_agent_cluster;
  
  absl::optional<WTF::Vector<::network::mojom::blink::WebClientHintsType>> accept_ch;
  
  absl::optional<WTF::Vector<::network::mojom::blink::WebClientHintsType>> critical_ch;
  
  ::network::mojom::blink::XFrameOptionsValue xfo;
  
  WTF::Vector<::network::mojom::blink::LinkHeaderPtr> link_headers;
  
  ::network::mojom::blink::TimingAllowOriginPtr timing_allow_origin;
  
  bool bfcache_opt_in_unload;
  
  absl::optional<WTF::HashMap<WTF::String, WTF::String>> reporting_endpoints;
  
  absl::optional<WTF::Vector<::network::mojom::blink::VariantsHeaderPtr>> variants_headers;
  
  absl::optional<WTF::Vector<WTF::String>> content_language;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ParsedHeaders::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ParsedHeaders::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ParsedHeaders::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ParsedHeaders::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
ParsedHeadersPtr ParsedHeaders::Clone() const {
  return New(
      mojo::Clone(content_security_policy),
      mojo::Clone(allow_csp_from),
      mojo::Clone(cross_origin_embedder_policy),
      mojo::Clone(cross_origin_opener_policy),
      mojo::Clone(origin_agent_cluster),
      mojo::Clone(accept_ch),
      mojo::Clone(critical_ch),
      mojo::Clone(xfo),
      mojo::Clone(link_headers),
      mojo::Clone(timing_allow_origin),
      mojo::Clone(bfcache_opt_in_unload),
      mojo::Clone(reporting_endpoints),
      mojo::Clone(variants_headers),
      mojo::Clone(content_language)
  );
}

template <typename T, ParsedHeaders::EnableIfSame<T>*>
bool ParsedHeaders::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->content_security_policy, other_struct.content_security_policy))
    return false;
  if (!mojo::Equals(this->allow_csp_from, other_struct.allow_csp_from))
    return false;
  if (!mojo::Equals(this->cross_origin_embedder_policy, other_struct.cross_origin_embedder_policy))
    return false;
  if (!mojo::Equals(this->cross_origin_opener_policy, other_struct.cross_origin_opener_policy))
    return false;
  if (!mojo::Equals(this->origin_agent_cluster, other_struct.origin_agent_cluster))
    return false;
  if (!mojo::Equals(this->accept_ch, other_struct.accept_ch))
    return false;
  if (!mojo::Equals(this->critical_ch, other_struct.critical_ch))
    return false;
  if (!mojo::Equals(this->xfo, other_struct.xfo))
    return false;
  if (!mojo::Equals(this->link_headers, other_struct.link_headers))
    return false;
  if (!mojo::Equals(this->timing_allow_origin, other_struct.timing_allow_origin))
    return false;
  if (!mojo::Equals(this->bfcache_opt_in_unload, other_struct.bfcache_opt_in_unload))
    return false;
  if (!mojo::Equals(this->reporting_endpoints, other_struct.reporting_endpoints))
    return false;
  if (!mojo::Equals(this->variants_headers, other_struct.variants_headers))
    return false;
  if (!mojo::Equals(this->content_language, other_struct.content_language))
    return false;
  return true;
}

template <typename T, ParsedHeaders::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.content_security_policy < rhs.content_security_policy)
    return true;
  if (rhs.content_security_policy < lhs.content_security_policy)
    return false;
  if (lhs.allow_csp_from < rhs.allow_csp_from)
    return true;
  if (rhs.allow_csp_from < lhs.allow_csp_from)
    return false;
  if (lhs.cross_origin_embedder_policy < rhs.cross_origin_embedder_policy)
    return true;
  if (rhs.cross_origin_embedder_policy < lhs.cross_origin_embedder_policy)
    return false;
  if (lhs.cross_origin_opener_policy < rhs.cross_origin_opener_policy)
    return true;
  if (rhs.cross_origin_opener_policy < lhs.cross_origin_opener_policy)
    return false;
  if (lhs.origin_agent_cluster < rhs.origin_agent_cluster)
    return true;
  if (rhs.origin_agent_cluster < lhs.origin_agent_cluster)
    return false;
  if (lhs.accept_ch < rhs.accept_ch)
    return true;
  if (rhs.accept_ch < lhs.accept_ch)
    return false;
  if (lhs.critical_ch < rhs.critical_ch)
    return true;
  if (rhs.critical_ch < lhs.critical_ch)
    return false;
  if (lhs.xfo < rhs.xfo)
    return true;
  if (rhs.xfo < lhs.xfo)
    return false;
  if (lhs.link_headers < rhs.link_headers)
    return true;
  if (rhs.link_headers < lhs.link_headers)
    return false;
  if (lhs.timing_allow_origin < rhs.timing_allow_origin)
    return true;
  if (rhs.timing_allow_origin < lhs.timing_allow_origin)
    return false;
  if (lhs.bfcache_opt_in_unload < rhs.bfcache_opt_in_unload)
    return true;
  if (rhs.bfcache_opt_in_unload < lhs.bfcache_opt_in_unload)
    return false;
  if (lhs.reporting_endpoints < rhs.reporting_endpoints)
    return true;
  if (rhs.reporting_endpoints < lhs.reporting_endpoints)
    return false;
  if (lhs.variants_headers < rhs.variants_headers)
    return true;
  if (rhs.variants_headers < lhs.variants_headers)
    return false;
  if (lhs.content_language < rhs.content_language)
    return true;
  if (rhs.content_language < lhs.content_language)
    return false;
  return false;
}


}  // namespace blink
}  // namespace mojom
}  // namespace network

namespace mojo {


template <>
struct BLINK_PLATFORM_EXPORT StructTraits<::network::mojom::blink::ParsedHeaders::DataView,
                                         ::network::mojom::blink::ParsedHeadersPtr> {
  static bool IsNull(const ::network::mojom::blink::ParsedHeadersPtr& input) { return !input; }
  static void SetToNull(::network::mojom::blink::ParsedHeadersPtr* output) { output->reset(); }

  static const decltype(::network::mojom::blink::ParsedHeaders::content_security_policy)& content_security_policy(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->content_security_policy;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::allow_csp_from)& allow_csp_from(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->allow_csp_from;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::cross_origin_embedder_policy)& cross_origin_embedder_policy(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->cross_origin_embedder_policy;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::cross_origin_opener_policy)& cross_origin_opener_policy(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->cross_origin_opener_policy;
  }

  static decltype(::network::mojom::blink::ParsedHeaders::origin_agent_cluster) origin_agent_cluster(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->origin_agent_cluster;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::accept_ch)& accept_ch(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->accept_ch;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::critical_ch)& critical_ch(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->critical_ch;
  }

  static decltype(::network::mojom::blink::ParsedHeaders::xfo) xfo(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->xfo;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::link_headers)& link_headers(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->link_headers;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::timing_allow_origin)& timing_allow_origin(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->timing_allow_origin;
  }

  static decltype(::network::mojom::blink::ParsedHeaders::bfcache_opt_in_unload) bfcache_opt_in_unload(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->bfcache_opt_in_unload;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::reporting_endpoints)& reporting_endpoints(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->reporting_endpoints;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::variants_headers)& variants_headers(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->variants_headers;
  }

  static const decltype(::network::mojom::blink::ParsedHeaders::content_language)& content_language(
      const ::network::mojom::blink::ParsedHeadersPtr& input) {
    return input->content_language;
  }

  static bool Read(::network::mojom::blink::ParsedHeaders::DataView input, ::network::mojom::blink::ParsedHeadersPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_PARSED_HEADERS_MOJOM_BLINK_H_