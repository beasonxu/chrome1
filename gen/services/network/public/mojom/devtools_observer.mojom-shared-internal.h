// services/network/public/mojom/devtools_observer.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_DEVTOOLS_OBSERVER_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_DEVTOOLS_OBSERVER_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared-internal.h"
#include "mojo/public/mojom/base/time.mojom-shared-internal.h"
#include "services/network/public/mojom/client_security_state.mojom-shared-internal.h"
#include "services/network/public/mojom/cookie_manager.mojom-shared-internal.h"
#include "services/network/public/mojom/cors.mojom-shared-internal.h"
#include "services/network/public/mojom/fetch_api.mojom-shared-internal.h"
#include "services/network/public/mojom/http_raw_headers.mojom-shared-internal.h"
#include "services/network/public/mojom/http_request_headers.mojom-shared-internal.h"
#include "services/network/public/mojom/ip_address_space.mojom-shared-internal.h"
#include "services/network/public/mojom/referrer_policy.mojom-shared-internal.h"
#include "services/network/public/mojom/request_priority.mojom-shared-internal.h"
#include "services/network/public/mojom/trust_tokens.mojom-shared-internal.h"
#include "services/network/public/mojom/ip_endpoint.mojom-shared-internal.h"
#include "services/network/public/mojom/url_loader_completion_status.mojom-shared-internal.h"
#include "services/network/public/mojom/network_param.mojom-shared-internal.h"
#include "services/network/public/mojom/load_timing_info.mojom-shared-internal.h"
#include "url/mojom/origin.mojom-shared-internal.h"
#include "url/mojom/url.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace network {
namespace mojom {
namespace internal {
class URLRequestDevToolsInfo_Data;
class URLResponseHeadDevToolsInfo_Data;

#pragma pack(push, 1)
class  URLRequestDevToolsInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> method;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;
  int32_t priority;
  int32_t referrer_policy;
  mojo::internal::Pointer<::network::mojom::internal::TrustTokenParams_Data> trust_token_params;
  uint8_t has_user_gesture : 1;
  uint8_t pad5_[3];
  uint32_t resource_type;

 private:
  friend class mojo::internal::MessageFragment<URLRequestDevToolsInfo_Data>;

  URLRequestDevToolsInfo_Data();
  ~URLRequestDevToolsInfo_Data() = delete;
};
static_assert(sizeof(URLRequestDevToolsInfo_Data) == 48,
              "Bad sizeof(URLRequestDevToolsInfo_Data)");
// Used by URLRequestDevToolsInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct URLRequestDevToolsInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  URLRequestDevToolsInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~URLRequestDevToolsInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<URLRequestDevToolsInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    URLRequestDevToolsInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  URLResponseHeadDevToolsInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::Time_Data> response_time;
  mojo::internal::Pointer<::network::mojom::internal::HttpResponseHeaders_Data> headers;
  mojo::internal::Pointer<mojo::internal::String_Data> mime_type;
  mojo::internal::Pointer<::network::mojom::internal::LoadTimingInfo_Data> load_timing;
  uint32_t cert_status;
  uint8_t was_in_prefetch_cache : 1;
  uint8_t was_fetched_via_service_worker : 1;
  uint8_t was_fetched_via_spdy : 1;
  uint8_t emitted_extra_info : 1;
  uint8_t pad8_[3];
  int64_t encoded_data_length;
  mojo::internal::Pointer<mojo::internal::String_Data> cache_storage_cache_name;
  mojo::internal::Pointer<mojo::internal::String_Data> alpn_negotiated_protocol;
  int32_t service_worker_response_source;
  uint8_t pad12_[4];
  mojo::internal::Pointer<::network::mojom::internal::SSLInfo_Data> ssl_info;
  mojo::internal::Pointer<::network::mojom::internal::IPEndPoint_Data> remote_endpoint;

 private:
  friend class mojo::internal::MessageFragment<URLResponseHeadDevToolsInfo_Data>;

  URLResponseHeadDevToolsInfo_Data();
  ~URLResponseHeadDevToolsInfo_Data() = delete;
};
static_assert(sizeof(URLResponseHeadDevToolsInfo_Data) == 96,
              "Bad sizeof(URLResponseHeadDevToolsInfo_Data)");
// Used by URLResponseHeadDevToolsInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct URLResponseHeadDevToolsInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  URLResponseHeadDevToolsInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~URLResponseHeadDevToolsInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<URLResponseHeadDevToolsInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    URLResponseHeadDevToolsInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace network

#endif  // SERVICES_NETWORK_PUBLIC_MOJOM_DEVTOOLS_OBSERVER_MOJOM_SHARED_INTERNAL_H_