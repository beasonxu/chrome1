// services/network/public/mojom/cookie_partition_key.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/network/public/mojom/cookie_partition_key.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/network/public/mojom/cookie_partition_key.mojom-params-data.h"
#include "services/network/public/mojom/cookie_partition_key.mojom-shared-message-ids.h"

#include "services/network/public/mojom/cookie_partition_key.mojom-import-headers.h"
#include "services/network/public/mojom/cookie_partition_key.mojom-test-utils.h"


#ifndef SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_PARTITION_KEY_MOJOM_JUMBO_H_
#define SERVICES_NETWORK_PUBLIC_MOJOM_COOKIE_PARTITION_KEY_MOJOM_JUMBO_H_
#endif



namespace network {
namespace mojom {
CookiePartitionKey::CookiePartitionKey()
    : site(),
      from_script(false),
      nonce() {}

CookiePartitionKey::CookiePartitionKey(
    const ::net::SchemefulSite& site_in,
    bool from_script_in,
    const absl::optional<::base::UnguessableToken>& nonce_in)
    : site(std::move(site_in)),
      from_script(std::move(from_script_in)),
      nonce(std::move(nonce_in)) {}

CookiePartitionKey::~CookiePartitionKey() = default;

void CookiePartitionKey::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "site"), this->site,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const ::net::SchemefulSite&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "from_script"), this->from_script,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "nonce"), this->nonce,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const absl::optional<::base::UnguessableToken>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CookiePartitionKey::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
CookiePartitionKeyCollection::CookiePartitionKeyCollection()
    : contains_all_partitions(false),
      keys() {}

CookiePartitionKeyCollection::CookiePartitionKeyCollection(
    bool contains_all_partitions_in,
    std::vector<::net::CookiePartitionKey> keys_in)
    : contains_all_partitions(std::move(contains_all_partitions_in)),
      keys(std::move(keys_in)) {}

CookiePartitionKeyCollection::~CookiePartitionKeyCollection() = default;

void CookiePartitionKeyCollection::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "contains_all_partitions"), this->contains_all_partitions,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type bool>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "keys"), this->keys,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::vector<::net::CookiePartitionKey>&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool CookiePartitionKeyCollection::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}


}  // namespace mojom
}  // namespace network


namespace mojo {


// static
bool StructTraits<::network::mojom::CookiePartitionKey::DataView, ::network::mojom::CookiePartitionKeyPtr>::Read(
    ::network::mojom::CookiePartitionKey::DataView input,
    ::network::mojom::CookiePartitionKeyPtr* output) {
  bool success = true;
  ::network::mojom::CookiePartitionKeyPtr result(::network::mojom::CookiePartitionKey::New());
  
      if (success && !input.ReadSite(&result->site))
        success = false;
      if (success)
        result->from_script = input.from_script();
      if (success && !input.ReadNonce(&result->nonce))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::network::mojom::CookiePartitionKeyCollection::DataView, ::network::mojom::CookiePartitionKeyCollectionPtr>::Read(
    ::network::mojom::CookiePartitionKeyCollection::DataView input,
    ::network::mojom::CookiePartitionKeyCollectionPtr* output) {
  bool success = true;
  ::network::mojom::CookiePartitionKeyCollectionPtr result(::network::mojom::CookiePartitionKeyCollection::New());
  
      if (success)
        result->contains_all_partitions = input.contains_all_partitions();
      if (success && !input.ReadKeys(&result->keys))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace network {
namespace mojom {




}  // namespace mojom
}  // namespace network


#if defined(__clang__)
#pragma clang diagnostic pop
#endif