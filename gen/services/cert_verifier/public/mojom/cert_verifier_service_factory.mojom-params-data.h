// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_PARAMS_DATA_H_
#define SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace cert_verifier {
namespace mojom {
namespace internal {

class ValidationContext;
class  CertVerifierServiceFactory_GetNewCertVerifier_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::CertVerifierCreationParams_Data> creation_params;

 private:
  friend class mojo::internal::MessageFragment<CertVerifierServiceFactory_GetNewCertVerifier_Params_Data>;

  CertVerifierServiceFactory_GetNewCertVerifier_Params_Data();
  ~CertVerifierServiceFactory_GetNewCertVerifier_Params_Data() = delete;
};
static_assert(sizeof(CertVerifierServiceFactory_GetNewCertVerifier_Params_Data) == 24,
              "Bad sizeof(CertVerifierServiceFactory_GetNewCertVerifier_Params_Data)");

}  // namespace internal


class CertVerifierServiceFactory_GetNewCertVerifier_ParamsDataView {
 public:
  CertVerifierServiceFactory_GetNewCertVerifier_ParamsDataView() = default;

  CertVerifierServiceFactory_GetNewCertVerifier_ParamsDataView(
      internal::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::cert_verifier::mojom::CertVerifierServiceInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
  inline void GetCreationParamsDataView(
      CertVerifierCreationParamsDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCreationParams(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::cert_verifier::mojom::CertVerifierCreationParamsDataView, UserType>(),
    "Attempting to read the optional `creation_params` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadCreationParams` instead "
    "of `ReadCreationParams if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->creation_params.Get();
    return mojo::internal::Deserialize<::cert_verifier::mojom::CertVerifierCreationParamsDataView>(
        pointer, output, message_);
  }
 private:
  internal::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void CertVerifierServiceFactory_GetNewCertVerifier_ParamsDataView::GetCreationParamsDataView(
    CertVerifierCreationParamsDataView* output) {
  auto pointer = data_->creation_params.Get();
  *output = CertVerifierCreationParamsDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace cert_verifier

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_PARAMS_DATA_H_