// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_SHARED_INTERNAL_H_
#define SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/mojom/base/big_buffer.mojom-shared-internal.h"
#include "mojo/public/mojom/base/file_path.mojom-shared-internal.h"
#include "services/network/public/mojom/cert_verifier_service.mojom-shared-internal.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace cert_verifier {
namespace mojom {
namespace internal {
class CertVerifierCreationParams_Data;
class ChromeRootStore_Data;
class ChromeRootCertInfo_Data;
class ChromeRootStoreInfo_Data;

#pragma pack(push, 1)
class  CertVerifierCreationParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<CertVerifierCreationParams_Data>;

  CertVerifierCreationParams_Data();
  ~CertVerifierCreationParams_Data() = delete;
};
static_assert(sizeof(CertVerifierCreationParams_Data) == 8,
              "Bad sizeof(CertVerifierCreationParams_Data)");
// Used by CertVerifierCreationParams::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct CertVerifierCreationParams_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  CertVerifierCreationParams_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~CertVerifierCreationParams_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<CertVerifierCreationParams_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    CertVerifierCreationParams_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ChromeRootStore_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  ::mojo_base::mojom::internal::BigBuffer_Data serialized_proto_root_store;

 private:
  friend class mojo::internal::MessageFragment<ChromeRootStore_Data>;

  ChromeRootStore_Data();
  ~ChromeRootStore_Data() = delete;
};
static_assert(sizeof(ChromeRootStore_Data) == 24,
              "Bad sizeof(ChromeRootStore_Data)");
// Used by ChromeRootStore::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ChromeRootStore_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ChromeRootStore_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ChromeRootStore_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ChromeRootStore_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ChromeRootStore_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ChromeRootCertInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> name;
  mojo::internal::Pointer<mojo::internal::String_Data> sha256hash_hex;

 private:
  friend class mojo::internal::MessageFragment<ChromeRootCertInfo_Data>;

  ChromeRootCertInfo_Data();
  ~ChromeRootCertInfo_Data() = delete;
};
static_assert(sizeof(ChromeRootCertInfo_Data) == 24,
              "Bad sizeof(ChromeRootCertInfo_Data)");
// Used by ChromeRootCertInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ChromeRootCertInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ChromeRootCertInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ChromeRootCertInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ChromeRootCertInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ChromeRootCertInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class  ChromeRootStoreInfo_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t version;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::ChromeRootCertInfo_Data>>> root_cert_info;

 private:
  friend class mojo::internal::MessageFragment<ChromeRootStoreInfo_Data>;

  ChromeRootStoreInfo_Data();
  ~ChromeRootStoreInfo_Data() = delete;
};
static_assert(sizeof(ChromeRootStoreInfo_Data) == 24,
              "Bad sizeof(ChromeRootStoreInfo_Data)");
// Used by ChromeRootStoreInfo::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct ChromeRootStoreInfo_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  ChromeRootStoreInfo_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~ChromeRootStoreInfo_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<ChromeRootStoreInfo_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    ChromeRootStoreInfo_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace cert_verifier

#endif  // SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_SHARED_INTERNAL_H_