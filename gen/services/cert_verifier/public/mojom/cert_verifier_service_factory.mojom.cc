// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-params-data.h"
#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared-message-ids.h"

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-import-headers.h"
#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-test-utils.h"


#ifndef SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_JUMBO_H_
#define SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_JUMBO_H_
#endif



namespace cert_verifier {
namespace mojom {
CertVerifierCreationParams::CertVerifierCreationParams() {}

CertVerifierCreationParams::~CertVerifierCreationParams() = default;
size_t CertVerifierCreationParams::Hash(size_t seed) const {
  return seed;
}

void CertVerifierCreationParams::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
}

bool CertVerifierCreationParams::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ChromeRootStore::ChromeRootStore()
    : serialized_proto_root_store() {}

ChromeRootStore::ChromeRootStore(
    ::mojo_base::BigBuffer serialized_proto_root_store_in)
    : serialized_proto_root_store(std::move(serialized_proto_root_store_in)) {}

ChromeRootStore::~ChromeRootStore() = default;

void ChromeRootStore::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "serialized_proto_root_store"), this->serialized_proto_root_store,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type ::mojo_base::BigBuffer>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ChromeRootStore::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ChromeRootCertInfo::ChromeRootCertInfo()
    : name(),
      sha256hash_hex() {}

ChromeRootCertInfo::ChromeRootCertInfo(
    const std::string& name_in,
    const std::string& sha256hash_hex_in)
    : name(std::move(name_in)),
      sha256hash_hex(std::move(sha256hash_hex_in)) {}

ChromeRootCertInfo::~ChromeRootCertInfo() = default;
size_t ChromeRootCertInfo::Hash(size_t seed) const {
  seed = mojo::internal::Hash(seed, this->name);
  seed = mojo::internal::Hash(seed, this->sha256hash_hex);
  return seed;
}

void ChromeRootCertInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "name"), this->name,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "sha256hash_hex"), this->sha256hash_hex,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type const std::string&>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ChromeRootCertInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
ChromeRootStoreInfo::ChromeRootStoreInfo()
    : version(),
      root_cert_info() {}

ChromeRootStoreInfo::ChromeRootStoreInfo(
    int64_t version_in,
    std::vector<ChromeRootCertInfoPtr> root_cert_info_in)
    : version(std::move(version_in)),
      root_cert_info(std::move(root_cert_info_in)) {}

ChromeRootStoreInfo::~ChromeRootStoreInfo() = default;

void ChromeRootStoreInfo::WriteIntoTrace(
    perfetto::TracedValue traced_context) const {
  [[maybe_unused]] auto dict = std::move(traced_context).WriteDictionary();
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "version"), this->version,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type int64_t>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
  perfetto::WriteIntoTracedValueWithFallback(
    dict.AddItem(
      "root_cert_info"), this->root_cert_info,
#if BUILDFLAG(MOJO_TRACE_ENABLED)
      "<value of type std::vector<ChromeRootCertInfoPtr>>"
#else
      "<value>"
#endif  // BUILDFLAG(MOJO_TRACE_ENABLED)
    );
}

bool ChromeRootStoreInfo::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  return Data_::Validate(data, validation_context);
}
const char CertVerifierServiceFactory::Name_[] = "cert_verifier.mojom.CertVerifierServiceFactory";

CertVerifierServiceFactory::IPCStableHashFunction CertVerifierServiceFactory::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kCertVerifierServiceFactory_GetNewCertVerifier_Name: {
      return &CertVerifierServiceFactory::GetNewCertVerifier_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* CertVerifierServiceFactory::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kCertVerifierServiceFactory_GetNewCertVerifier_Name:
            return "Receive cert_verifier::mojom::CertVerifierServiceFactory::GetNewCertVerifier";
    }
  } else {
    switch (message.name()) {
      case internal::kCertVerifierServiceFactory_GetNewCertVerifier_Name:
            return "Receive reply cert_verifier::mojom::CertVerifierServiceFactory::GetNewCertVerifier";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t CertVerifierServiceFactory::GetNewCertVerifier_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)cert_verifier::mojom::CertVerifierServiceFactory::GetNewCertVerifier");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

CertVerifierServiceFactoryProxy::CertVerifierServiceFactoryProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void CertVerifierServiceFactoryProxy::GetNewCertVerifier(
    ::mojo::PendingReceiver<::cert_verifier::mojom::CertVerifierService> in_receiver, CertVerifierCreationParamsPtr in_creation_params) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send cert_verifier::mojom::CertVerifierServiceFactory::GetNewCertVerifier", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::cert_verifier::mojom::CertVerifierService>>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("creation_params"), in_creation_params,
                        "<value of type CertVerifierCreationParamsPtr>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kCertVerifierServiceFactory_GetNewCertVerifier_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::cert_verifier::mojom::internal::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::cert_verifier::mojom::CertVerifierServiceInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in CertVerifierServiceFactory.GetNewCertVerifier request");
  mojo::internal::MessageFragment<
      typename decltype(params->creation_params)::BaseType> creation_params_fragment(
          params.message());
  mojo::internal::Serialize<::cert_verifier::mojom::CertVerifierCreationParamsDataView>(
      in_creation_params, creation_params_fragment);
  params->creation_params.Set(
      creation_params_fragment.is_null() ? nullptr : creation_params_fragment.data());

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(CertVerifierServiceFactory::Name_);
  message.set_method_name("GetNewCertVerifier");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool CertVerifierServiceFactoryStubDispatch::Accept(
    CertVerifierServiceFactory* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kCertVerifierServiceFactory_GetNewCertVerifier_Name: {

      DCHECK(message->is_serialized());
      internal::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data* params =
          reinterpret_cast<internal::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::cert_verifier::mojom::CertVerifierService> p_receiver{};
      CertVerifierCreationParamsPtr p_creation_params{};
      CertVerifierServiceFactory_GetNewCertVerifier_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (success && !input_data_view.ReadCreationParams(&p_creation_params))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            CertVerifierServiceFactory::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetNewCertVerifier(
std::move(p_receiver), 
std::move(p_creation_params));
      return true;
    }
  }
  return false;
}

// static
bool CertVerifierServiceFactoryStubDispatch::AcceptWithResponder(
    CertVerifierServiceFactory* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kCertVerifierServiceFactory_GetNewCertVerifier_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kCertVerifierServiceFactoryValidationInfo[] = {
    {&internal::CertVerifierServiceFactory_GetNewCertVerifier_Params_Data::Validate,
     nullptr /* no response */},
};

bool CertVerifierServiceFactoryRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::cert_verifier::mojom::CertVerifierServiceFactory::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kCertVerifierServiceFactoryValidationInfo);
}



}  // namespace mojom
}  // namespace cert_verifier


namespace mojo {


// static
bool StructTraits<::cert_verifier::mojom::CertVerifierCreationParams::DataView, ::cert_verifier::mojom::CertVerifierCreationParamsPtr>::Read(
    ::cert_verifier::mojom::CertVerifierCreationParams::DataView input,
    ::cert_verifier::mojom::CertVerifierCreationParamsPtr* output) {
  bool success = true;
  ::cert_verifier::mojom::CertVerifierCreationParamsPtr result(::cert_verifier::mojom::CertVerifierCreationParams::New());
  
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cert_verifier::mojom::ChromeRootStore::DataView, ::cert_verifier::mojom::ChromeRootStorePtr>::Read(
    ::cert_verifier::mojom::ChromeRootStore::DataView input,
    ::cert_verifier::mojom::ChromeRootStorePtr* output) {
  bool success = true;
  ::cert_verifier::mojom::ChromeRootStorePtr result(::cert_verifier::mojom::ChromeRootStore::New());
  
      if (success && !input.ReadSerializedProtoRootStore(&result->serialized_proto_root_store))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cert_verifier::mojom::ChromeRootCertInfo::DataView, ::cert_verifier::mojom::ChromeRootCertInfoPtr>::Read(
    ::cert_verifier::mojom::ChromeRootCertInfo::DataView input,
    ::cert_verifier::mojom::ChromeRootCertInfoPtr* output) {
  bool success = true;
  ::cert_verifier::mojom::ChromeRootCertInfoPtr result(::cert_verifier::mojom::ChromeRootCertInfo::New());
  
      if (success && !input.ReadName(&result->name))
        success = false;
      if (success && !input.ReadSha256hashHex(&result->sha256hash_hex))
        success = false;
  *output = std::move(result);
  return success;
}


// static
bool StructTraits<::cert_verifier::mojom::ChromeRootStoreInfo::DataView, ::cert_verifier::mojom::ChromeRootStoreInfoPtr>::Read(
    ::cert_verifier::mojom::ChromeRootStoreInfo::DataView input,
    ::cert_verifier::mojom::ChromeRootStoreInfoPtr* output) {
  bool success = true;
  ::cert_verifier::mojom::ChromeRootStoreInfoPtr result(::cert_verifier::mojom::ChromeRootStoreInfo::New());
  
      if (success)
        result->version = input.version();
      if (success && !input.ReadRootCertInfo(&result->root_cert_info))
        success = false;
  *output = std::move(result);
  return success;
}

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace cert_verifier {
namespace mojom {


void CertVerifierServiceFactoryInterceptorForTesting::GetNewCertVerifier(::mojo::PendingReceiver<::cert_verifier::mojom::CertVerifierService> receiver, CertVerifierCreationParamsPtr creation_params) {
  GetForwardingInterface()->GetNewCertVerifier(std::move(receiver), std::move(creation_params));
}
CertVerifierServiceFactoryAsyncWaiter::CertVerifierServiceFactoryAsyncWaiter(
    CertVerifierServiceFactory* proxy) : proxy_(proxy) {}

CertVerifierServiceFactoryAsyncWaiter::~CertVerifierServiceFactoryAsyncWaiter() = default;






}  // namespace mojom
}  // namespace cert_verifier


#if defined(__clang__)
#pragma clang diagnostic pop
#endif