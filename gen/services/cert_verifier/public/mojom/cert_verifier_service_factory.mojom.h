// services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_H_
#define SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-shared.h"
#include "services/cert_verifier/public/mojom/cert_verifier_service_factory.mojom-forward.h"
#include "mojo/public/mojom/base/big_buffer.mojom.h"
#include "mojo/public/mojom/base/file_path.mojom-forward.h"
#include "services/network/public/mojom/cert_verifier_service.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace cert_verifier {
namespace mojom {

class CertVerifierServiceFactoryProxy;

template <typename ImplRefTraits>
class CertVerifierServiceFactoryStub;

class CertVerifierServiceFactoryRequestValidator;


class  CertVerifierServiceFactory
    : public CertVerifierServiceFactoryInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = CertVerifierServiceFactoryInterfaceBase;
  using Proxy_ = CertVerifierServiceFactoryProxy;

  template <typename ImplRefTraits>
  using Stub_ = CertVerifierServiceFactoryStub<ImplRefTraits>;

  using RequestValidator_ = CertVerifierServiceFactoryRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kGetNewCertVerifierMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GetNewCertVerifier_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~CertVerifierServiceFactory() = default;

  
  virtual void GetNewCertVerifier(::mojo::PendingReceiver<::cert_verifier::mojom::CertVerifierService> receiver, CertVerifierCreationParamsPtr creation_params) = 0;
};



class  CertVerifierServiceFactoryProxy
    : public CertVerifierServiceFactory {
 public:
  using InterfaceType = CertVerifierServiceFactory;

  explicit CertVerifierServiceFactoryProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GetNewCertVerifier(::mojo::PendingReceiver<::cert_verifier::mojom::CertVerifierService> receiver, CertVerifierCreationParamsPtr creation_params) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  CertVerifierServiceFactoryStubDispatch {
 public:
  static bool Accept(CertVerifierServiceFactory* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      CertVerifierServiceFactory* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<CertVerifierServiceFactory>>
class CertVerifierServiceFactoryStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  CertVerifierServiceFactoryStub() = default;
  ~CertVerifierServiceFactoryStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CertVerifierServiceFactoryStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return CertVerifierServiceFactoryStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  CertVerifierServiceFactoryRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class  CertVerifierCreationParams {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<CertVerifierCreationParams, T>::value>;
  using DataView = CertVerifierCreationParamsDataView;
  using Data_ = internal::CertVerifierCreationParams_Data;

  template <typename... Args>
  static CertVerifierCreationParamsPtr New(Args&&... args) {
    return CertVerifierCreationParamsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static CertVerifierCreationParamsPtr From(const U& u) {
    return mojo::TypeConverter<CertVerifierCreationParamsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, CertVerifierCreationParams>::Convert(*this);
  }


  CertVerifierCreationParams();


  ~CertVerifierCreationParams();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = CertVerifierCreationParamsPtr>
  CertVerifierCreationParamsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, CertVerifierCreationParams::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, CertVerifierCreationParams::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        CertVerifierCreationParams::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        CertVerifierCreationParams::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::CertVerifierCreationParams_UnserializedMessageContext<
            UserType, CertVerifierCreationParams::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<CertVerifierCreationParams::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return CertVerifierCreationParams::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::CertVerifierCreationParams_UnserializedMessageContext<
            UserType, CertVerifierCreationParams::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<CertVerifierCreationParams::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, CertVerifierCreationParams::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, CertVerifierCreationParams::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, CertVerifierCreationParams::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, CertVerifierCreationParams::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  ChromeRootCertInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ChromeRootCertInfo, T>::value>;
  using DataView = ChromeRootCertInfoDataView;
  using Data_ = internal::ChromeRootCertInfo_Data;

  template <typename... Args>
  static ChromeRootCertInfoPtr New(Args&&... args) {
    return ChromeRootCertInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ChromeRootCertInfoPtr From(const U& u) {
    return mojo::TypeConverter<ChromeRootCertInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ChromeRootCertInfo>::Convert(*this);
  }


  ChromeRootCertInfo();

  ChromeRootCertInfo(
      const std::string& name,
      const std::string& sha256hash_hex);


  ~ChromeRootCertInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ChromeRootCertInfoPtr>
  ChromeRootCertInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ChromeRootCertInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ChromeRootCertInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ChromeRootCertInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ChromeRootCertInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ChromeRootCertInfo_UnserializedMessageContext<
            UserType, ChromeRootCertInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ChromeRootCertInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ChromeRootCertInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ChromeRootCertInfo_UnserializedMessageContext<
            UserType, ChromeRootCertInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ChromeRootCertInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  std::string name;
  
  std::string sha256hash_hex;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ChromeRootCertInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ChromeRootCertInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ChromeRootCertInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ChromeRootCertInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}









class  ChromeRootStore {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ChromeRootStore, T>::value>;
  using DataView = ChromeRootStoreDataView;
  using Data_ = internal::ChromeRootStore_Data;

  template <typename... Args>
  static ChromeRootStorePtr New(Args&&... args) {
    return ChromeRootStorePtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ChromeRootStorePtr From(const U& u) {
    return mojo::TypeConverter<ChromeRootStorePtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ChromeRootStore>::Convert(*this);
  }


  ChromeRootStore();

  explicit ChromeRootStore(
      ::mojo_base::BigBuffer serialized_proto_root_store);

ChromeRootStore(const ChromeRootStore&) = delete;
ChromeRootStore& operator=(const ChromeRootStore&) = delete;

  ~ChromeRootStore();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ChromeRootStorePtr>
  ChromeRootStorePtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ChromeRootStore::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ChromeRootStore::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ChromeRootStore::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ChromeRootStore_UnserializedMessageContext<
            UserType, ChromeRootStore::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ChromeRootStore::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ChromeRootStore::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ChromeRootStore_UnserializedMessageContext<
            UserType, ChromeRootStore::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ChromeRootStore::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  ::mojo_base::BigBuffer serialized_proto_root_store;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ChromeRootStore::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ChromeRootStore::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ChromeRootStore::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ChromeRootStore::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}






class  ChromeRootStoreInfo {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ChromeRootStoreInfo, T>::value>;
  using DataView = ChromeRootStoreInfoDataView;
  using Data_ = internal::ChromeRootStoreInfo_Data;

  template <typename... Args>
  static ChromeRootStoreInfoPtr New(Args&&... args) {
    return ChromeRootStoreInfoPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ChromeRootStoreInfoPtr From(const U& u) {
    return mojo::TypeConverter<ChromeRootStoreInfoPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ChromeRootStoreInfo>::Convert(*this);
  }


  ChromeRootStoreInfo();

  ChromeRootStoreInfo(
      int64_t version,
      std::vector<ChromeRootCertInfoPtr> root_cert_info);

ChromeRootStoreInfo(const ChromeRootStoreInfo&) = delete;
ChromeRootStoreInfo& operator=(const ChromeRootStoreInfo&) = delete;

  ~ChromeRootStoreInfo();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ChromeRootStoreInfoPtr>
  ChromeRootStoreInfoPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ChromeRootStoreInfo::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ChromeRootStoreInfo::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ChromeRootStoreInfo::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ChromeRootStoreInfo::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ChromeRootStoreInfo_UnserializedMessageContext<
            UserType, ChromeRootStoreInfo::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ChromeRootStoreInfo::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ChromeRootStoreInfo::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ChromeRootStoreInfo_UnserializedMessageContext<
            UserType, ChromeRootStoreInfo::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ChromeRootStoreInfo::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }

  
  int64_t version;
  
  std::vector<ChromeRootCertInfoPtr> root_cert_info;

  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ChromeRootStoreInfo::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ChromeRootStoreInfo::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ChromeRootStoreInfo::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ChromeRootStoreInfo::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}

template <typename StructPtrType>
CertVerifierCreationParamsPtr CertVerifierCreationParams::Clone() const {
  return New(
  );
}

template <typename T, CertVerifierCreationParams::EnableIfSame<T>*>
bool CertVerifierCreationParams::Equals(const T& other_struct) const {
  return true;
}

template <typename T, CertVerifierCreationParams::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}
template <typename StructPtrType>
ChromeRootStorePtr ChromeRootStore::Clone() const {
  return New(
      mojo::Clone(serialized_proto_root_store)
  );
}

template <typename T, ChromeRootStore::EnableIfSame<T>*>
bool ChromeRootStore::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->serialized_proto_root_store, other_struct.serialized_proto_root_store))
    return false;
  return true;
}

template <typename T, ChromeRootStore::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.serialized_proto_root_store < rhs.serialized_proto_root_store)
    return true;
  if (rhs.serialized_proto_root_store < lhs.serialized_proto_root_store)
    return false;
  return false;
}
template <typename StructPtrType>
ChromeRootCertInfoPtr ChromeRootCertInfo::Clone() const {
  return New(
      mojo::Clone(name),
      mojo::Clone(sha256hash_hex)
  );
}

template <typename T, ChromeRootCertInfo::EnableIfSame<T>*>
bool ChromeRootCertInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->name, other_struct.name))
    return false;
  if (!mojo::Equals(this->sha256hash_hex, other_struct.sha256hash_hex))
    return false;
  return true;
}

template <typename T, ChromeRootCertInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.name < rhs.name)
    return true;
  if (rhs.name < lhs.name)
    return false;
  if (lhs.sha256hash_hex < rhs.sha256hash_hex)
    return true;
  if (rhs.sha256hash_hex < lhs.sha256hash_hex)
    return false;
  return false;
}
template <typename StructPtrType>
ChromeRootStoreInfoPtr ChromeRootStoreInfo::Clone() const {
  return New(
      mojo::Clone(version),
      mojo::Clone(root_cert_info)
  );
}

template <typename T, ChromeRootStoreInfo::EnableIfSame<T>*>
bool ChromeRootStoreInfo::Equals(const T& other_struct) const {
  if (!mojo::Equals(this->version, other_struct.version))
    return false;
  if (!mojo::Equals(this->root_cert_info, other_struct.root_cert_info))
    return false;
  return true;
}

template <typename T, ChromeRootStoreInfo::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  if (lhs.version < rhs.version)
    return true;
  if (rhs.version < lhs.version)
    return false;
  if (lhs.root_cert_info < rhs.root_cert_info)
    return true;
  if (rhs.root_cert_info < lhs.root_cert_info)
    return false;
  return false;
}


}  // namespace mojom
}  // namespace cert_verifier

namespace mojo {


template <>
struct  StructTraits<::cert_verifier::mojom::CertVerifierCreationParams::DataView,
                                         ::cert_verifier::mojom::CertVerifierCreationParamsPtr> {
  static bool IsNull(const ::cert_verifier::mojom::CertVerifierCreationParamsPtr& input) { return !input; }
  static void SetToNull(::cert_verifier::mojom::CertVerifierCreationParamsPtr* output) { output->reset(); }

  static bool Read(::cert_verifier::mojom::CertVerifierCreationParams::DataView input, ::cert_verifier::mojom::CertVerifierCreationParamsPtr* output);
};


template <>
struct  StructTraits<::cert_verifier::mojom::ChromeRootStore::DataView,
                                         ::cert_verifier::mojom::ChromeRootStorePtr> {
  static bool IsNull(const ::cert_verifier::mojom::ChromeRootStorePtr& input) { return !input; }
  static void SetToNull(::cert_verifier::mojom::ChromeRootStorePtr* output) { output->reset(); }

  static  decltype(::cert_verifier::mojom::ChromeRootStore::serialized_proto_root_store)& serialized_proto_root_store(
       ::cert_verifier::mojom::ChromeRootStorePtr& input) {
    return input->serialized_proto_root_store;
  }

  static bool Read(::cert_verifier::mojom::ChromeRootStore::DataView input, ::cert_verifier::mojom::ChromeRootStorePtr* output);
};


template <>
struct  StructTraits<::cert_verifier::mojom::ChromeRootCertInfo::DataView,
                                         ::cert_verifier::mojom::ChromeRootCertInfoPtr> {
  static bool IsNull(const ::cert_verifier::mojom::ChromeRootCertInfoPtr& input) { return !input; }
  static void SetToNull(::cert_verifier::mojom::ChromeRootCertInfoPtr* output) { output->reset(); }

  static const decltype(::cert_verifier::mojom::ChromeRootCertInfo::name)& name(
      const ::cert_verifier::mojom::ChromeRootCertInfoPtr& input) {
    return input->name;
  }

  static const decltype(::cert_verifier::mojom::ChromeRootCertInfo::sha256hash_hex)& sha256hash_hex(
      const ::cert_verifier::mojom::ChromeRootCertInfoPtr& input) {
    return input->sha256hash_hex;
  }

  static bool Read(::cert_verifier::mojom::ChromeRootCertInfo::DataView input, ::cert_verifier::mojom::ChromeRootCertInfoPtr* output);
};


template <>
struct  StructTraits<::cert_verifier::mojom::ChromeRootStoreInfo::DataView,
                                         ::cert_verifier::mojom::ChromeRootStoreInfoPtr> {
  static bool IsNull(const ::cert_verifier::mojom::ChromeRootStoreInfoPtr& input) { return !input; }
  static void SetToNull(::cert_verifier::mojom::ChromeRootStoreInfoPtr* output) { output->reset(); }

  static decltype(::cert_verifier::mojom::ChromeRootStoreInfo::version) version(
      const ::cert_verifier::mojom::ChromeRootStoreInfoPtr& input) {
    return input->version;
  }

  static const decltype(::cert_verifier::mojom::ChromeRootStoreInfo::root_cert_info)& root_cert_info(
      const ::cert_verifier::mojom::ChromeRootStoreInfoPtr& input) {
    return input->root_cert_info;
  }

  static bool Read(::cert_verifier::mojom::ChromeRootStoreInfo::DataView input, ::cert_verifier::mojom::ChromeRootStoreInfoPtr* output);
};

}  // namespace mojo

#endif  // SERVICES_CERT_VERIFIER_PUBLIC_MOJOM_CERT_VERIFIER_SERVICE_FACTORY_MOJOM_H_