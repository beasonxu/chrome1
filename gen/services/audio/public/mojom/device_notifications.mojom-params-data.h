// services/audio/public/mojom/device_notifications.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef SERVICES_AUDIO_PUBLIC_MOJOM_DEVICE_NOTIFICATIONS_MOJOM_PARAMS_DATA_H_
#define SERVICES_AUDIO_PUBLIC_MOJOM_DEVICE_NOTIFICATIONS_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace audio {
namespace mojom {
namespace internal {

class ValidationContext;
class  DeviceListener_DevicesChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<DeviceListener_DevicesChanged_Params_Data>;

  DeviceListener_DevicesChanged_Params_Data();
  ~DeviceListener_DevicesChanged_Params_Data() = delete;
};
static_assert(sizeof(DeviceListener_DevicesChanged_Params_Data) == 8,
              "Bad sizeof(DeviceListener_DevicesChanged_Params_Data)");
class  DeviceNotifier_RegisterListener_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data listener;

 private:
  friend class mojo::internal::MessageFragment<DeviceNotifier_RegisterListener_Params_Data>;

  DeviceNotifier_RegisterListener_Params_Data();
  ~DeviceNotifier_RegisterListener_Params_Data() = delete;
};
static_assert(sizeof(DeviceNotifier_RegisterListener_Params_Data) == 16,
              "Bad sizeof(DeviceNotifier_RegisterListener_Params_Data)");

}  // namespace internal


class DeviceListener_DevicesChanged_ParamsDataView {
 public:
  DeviceListener_DevicesChanged_ParamsDataView() = default;

  DeviceListener_DevicesChanged_ParamsDataView(
      internal::DeviceListener_DevicesChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::DeviceListener_DevicesChanged_Params_Data* data_ = nullptr;
};



class DeviceNotifier_RegisterListener_ParamsDataView {
 public:
  DeviceNotifier_RegisterListener_ParamsDataView() = default;

  DeviceNotifier_RegisterListener_ParamsDataView(
      internal::DeviceNotifier_RegisterListener_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeListener() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::audio::mojom::DeviceListenerInterfaceBase>>(
            &data_->listener, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::DeviceNotifier_RegisterListener_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};





}  // namespace mojom
}  // namespace audio

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // SERVICES_AUDIO_PUBLIC_MOJOM_DEVICE_NOTIFICATIONS_MOJOM_PARAMS_DATA_H_