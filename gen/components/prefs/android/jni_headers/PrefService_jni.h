// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/prefs/PrefService

#ifndef org_chromium_components_prefs_PrefService_JNI
#define org_chromium_components_prefs_PrefService_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_components_prefs_PrefService[];
const char kClassPath_org_chromium_components_prefs_PrefService[] =
    "org/chromium/components/prefs/PrefService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_prefs_PrefService_clazz(nullptr);
#ifndef org_chromium_components_prefs_PrefService_clazz_defined
#define org_chromium_components_prefs_PrefService_clazz_defined
inline jclass org_chromium_components_prefs_PrefService_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_components_prefs_PrefService,
      &g_org_chromium_components_prefs_PrefService_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
JNI_GENERATOR_EXPORT void Java_J_N_MRGBEdxZ(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "ClearPref");
  return native->ClearPref(env, base::android::JavaParamRef<jstring>(env, preference));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MFs_1R_1Ad(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasPrefPath", false);
  return native->HasPrefPath(env, base::android::JavaParamRef<jstring>(env, preference));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MzIXnlkD(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBoolean", false);
  return native->GetBoolean(env, base::android::JavaParamRef<jstring>(env, preference));
}

JNI_GENERATOR_EXPORT void Java_J_N_Mf2ABpoH(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference,
    jboolean value) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetBoolean");
  return native->SetBoolean(env, base::android::JavaParamRef<jstring>(env, preference), value);
}

JNI_GENERATOR_EXPORT jint Java_J_N_MzGf81GW(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetInteger", 0);
  return native->GetInteger(env, base::android::JavaParamRef<jstring>(env, preference));
}

JNI_GENERATOR_EXPORT void Java_J_N_MPBZLcVx(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference,
    jint value) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetInteger");
  return native->SetInteger(env, base::android::JavaParamRef<jstring>(env, preference), value);
}

JNI_GENERATOR_EXPORT jstring Java_J_N_Ma80fvz5(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetString", NULL);
  return native->GetString(env, base::android::JavaParamRef<jstring>(env, preference)).Release();
}

JNI_GENERATOR_EXPORT void Java_J_N_MY13p7Sp(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference,
    jstring value) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "SetString");
  return native->SetString(env, base::android::JavaParamRef<jstring>(env, preference),
      base::android::JavaParamRef<jstring>(env, value));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MrEgF7hX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePrefServiceAndroid,
    jstring preference) {
  PrefServiceAndroid* native = reinterpret_cast<PrefServiceAndroid*>(nativePrefServiceAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsManagedPreference", false);
  return native->IsManagedPreference(env, base::android::JavaParamRef<jstring>(env, preference));
}


static std::atomic<jmethodID> g_org_chromium_components_prefs_PrefService_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PrefService_create(JNIEnv* env, jlong
    nativePrefServiceAndroid) {
  jclass clazz = org_chromium_components_prefs_PrefService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_prefs_PrefService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/prefs/PrefService;",
          &g_org_chromium_components_prefs_PrefService_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativePrefServiceAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_components_prefs_PrefService_clearNativePtr(nullptr);
static void Java_PrefService_clearNativePtr(JNIEnv* env, const base::android::JavaRef<jobject>& obj)
    {
  jclass clazz = org_chromium_components_prefs_PrefService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_prefs_PrefService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "clearNativePtr",
          "()V",
          &g_org_chromium_components_prefs_PrefService_clearNativePtr);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

#endif  // org_chromium_components_prefs_PrefService_JNI
