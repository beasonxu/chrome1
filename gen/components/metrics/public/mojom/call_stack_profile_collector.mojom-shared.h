// components/metrics/public/mojom/call_stack_profile_collector.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_SHARED_H_
#define COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/metrics/public/mojom/call_stack_profile_collector.mojom-shared-internal.h"
#include "mojo/public/mojom/base/byte_string.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace metrics {
namespace mojom {
class SampledProfileDataView;



}  // namespace mojom
}  // namespace metrics

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::metrics::mojom::SampledProfileDataView> {
  using Data = ::metrics::mojom::internal::SampledProfile_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace metrics {
namespace mojom {


enum class ProfileType : int32_t {
  
  kCPU = 0,
  
  kHeap = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, ProfileType value);
inline bool IsKnownEnumValue(ProfileType value) {
  return internal::ProfileType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class CallStackProfileCollectorInterfaceBase {};

using CallStackProfileCollectorPtrDataView =
    mojo::InterfacePtrDataView<CallStackProfileCollectorInterfaceBase>;
using CallStackProfileCollectorRequestDataView =
    mojo::InterfaceRequestDataView<CallStackProfileCollectorInterfaceBase>;
using CallStackProfileCollectorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<CallStackProfileCollectorInterfaceBase>;
using CallStackProfileCollectorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<CallStackProfileCollectorInterfaceBase>;


class SampledProfileDataView {
 public:
  SampledProfileDataView() = default;

  SampledProfileDataView(
      internal::SampledProfile_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetContentsDataView(
      ::mojo_base::mojom::ByteStringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContents(UserType* output) {
    
    auto* pointer = data_->contents.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ByteStringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SampledProfile_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace metrics

namespace std {

template <>
struct hash<::metrics::mojom::ProfileType>
    : public mojo::internal::EnumHashImpl<::metrics::mojom::ProfileType> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::metrics::mojom::ProfileType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::metrics::mojom::ProfileType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::metrics::mojom::ProfileType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::metrics::mojom::SampledProfileDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::metrics::mojom::SampledProfileDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::metrics::mojom::internal::SampledProfile_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::contents(input)) in_contents = Traits::contents(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->contents)::BaseType> contents_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::ByteStringDataView>(
        in_contents, contents_fragment);
    fragment->contents.Set(
        contents_fragment.is_null() ? nullptr : contents_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->contents.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null contents in SampledProfile struct");
  }

  static bool Deserialize(::metrics::mojom::internal::SampledProfile_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::metrics::mojom::SampledProfileDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace metrics {
namespace mojom {

inline void SampledProfileDataView::GetContentsDataView(
    ::mojo_base::mojom::ByteStringDataView* output) {
  auto pointer = data_->contents.Get();
  *output = ::mojo_base::mojom::ByteStringDataView(pointer, message_);
}



}  // namespace mojom
}  // namespace metrics

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::metrics::mojom::ProfileType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::metrics::mojom::ProfileType value);
};

} // namespace perfetto

#endif  // COMPONENTS_METRICS_PUBLIC_MOJOM_CALL_STACK_PROFILE_COLLECTOR_MOJOM_SHARED_H_