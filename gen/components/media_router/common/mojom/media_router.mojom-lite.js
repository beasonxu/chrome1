// components/media_router/common/mojom/media_router.mojom-lite.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';


mojo.internal.exportModule('mediaRouter.mojom');





/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.SinkIconTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
mediaRouter.mojom.SinkIconType = {
  
  CAST: 0,
  CAST_AUDIO_GROUP: 1,
  CAST_AUDIO: 2,
  WIRED_DISPLAY: 6,
  GENERIC: 7,
  MIN_VALUE: 0,
  MAX_VALUE: 7,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.RouteControllerTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
mediaRouter.mojom.RouteControllerType = {
  
  kNone: 0,
  kGeneric: 1,
  kMirroring: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};





/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mediaRouter.mojom.MediaRouteProviderPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mediaRouter.mojom.MediaRouteProvider.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { mediaRouter.mojom.MediaRouteProviderInterface }
 */
mediaRouter.mojom.MediaRouteProviderRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mediaRouter.mojom.MediaRouteProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mediaRouter.mojom.MediaRouteProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mediaRouter.mojom.MediaRouteProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } mediaSource
   * @param { !string } sinkId
   * @param { !string } originalPresentationId
   * @param { !url.mojom.Origin } origin
   * @param { !number } frameTreeNodeId
   * @param { !mojoBase.mojom.TimeDelta } timeout
   * @param { !boolean } offTheRecord
   * @return {!Promise<{
        route: ?mediaRouter.mojom.MediaRoute,
        connection: ?mediaRouter.mojom.RoutePresentationConnection,
        errorText: ?string,
        resultCode: !mediaRouter.mojom.RouteRequestResultCode,
   *  }>}
   */

  createRoute(
      mediaSource,
      sinkId,
      originalPresentationId,
      origin,
      frameTreeNodeId,
      timeout,
      offTheRecord) {
    return this.proxy.sendMessage(
        0,
        mediaRouter.mojom.MediaRouteProvider_CreateRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
        [
          mediaSource,
          sinkId,
          originalPresentationId,
          origin,
          frameTreeNodeId,
          timeout,
          offTheRecord
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   * @param { !string } presentationId
   * @param { !url.mojom.Origin } origin
   * @param { !number } frameTreeNodeId
   * @param { !mojoBase.mojom.TimeDelta } timeout
   * @param { !boolean } offTheRecord
   * @return {!Promise<{
        route: ?mediaRouter.mojom.MediaRoute,
        connection: ?mediaRouter.mojom.RoutePresentationConnection,
        errorText: ?string,
        resultCode: !mediaRouter.mojom.RouteRequestResultCode,
   *  }>}
   */

  joinRoute(
      mediaSource,
      presentationId,
      origin,
      frameTreeNodeId,
      timeout,
      offTheRecord) {
    return this.proxy.sendMessage(
        1,
        mediaRouter.mojom.MediaRouteProvider_JoinRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
        [
          mediaSource,
          presentationId,
          origin,
          frameTreeNodeId,
          timeout,
          offTheRecord
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @return {!Promise<{
        errorText: ?string,
        resultCode: !mediaRouter.mojom.RouteRequestResultCode,
   *  }>}
   */

  terminateRoute(
      routeId) {
    return this.proxy.sendMessage(
        2,
        mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
        [
          routeId
        ]);
  }

  
  /**
   * @param { !string } mediaRouteId
   * @param { !string } message
   */

  sendRouteMessage(
      mediaRouteId,
      message) {
    this.proxy.sendMessage(
        3,
        mediaRouter.mojom.MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
        null,
        [
          mediaRouteId,
          message
        ]);
  }

  
  /**
   * @param { !string } mediaRouteId
   * @param { !Array<!number> } data
   */

  sendRouteBinaryMessage(
      mediaRouteId,
      data) {
    this.proxy.sendMessage(
        4,
        mediaRouter.mojom.MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
        null,
        [
          mediaRouteId,
          data
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   */

  startObservingMediaSinks(
      mediaSource) {
    this.proxy.sendMessage(
        5,
        mediaRouter.mojom.MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
        null,
        [
          mediaSource
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   */

  stopObservingMediaSinks(
      mediaSource) {
    this.proxy.sendMessage(
        6,
        mediaRouter.mojom.MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
        null,
        [
          mediaSource
        ]);
  }

  
  /**
   */

  startObservingMediaRoutes() {
    this.proxy.sendMessage(
        7,
        mediaRouter.mojom.MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !string } routeId
   */

  startListeningForRouteMessages(
      routeId) {
    this.proxy.sendMessage(
        8,
        mediaRouter.mojom.MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
        null,
        [
          routeId
        ]);
  }

  
  /**
   * @param { !string } routeId
   */

  stopListeningForRouteMessages(
      routeId) {
    this.proxy.sendMessage(
        9,
        mediaRouter.mojom.MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
        null,
        [
          routeId
        ]);
  }

  
  /**
   * @param { !string } routeId
   */

  detachRoute(
      routeId) {
    this.proxy.sendMessage(
        10,
        mediaRouter.mojom.MediaRouteProvider_DetachRoute_ParamsSpec.$,
        null,
        [
          routeId
        ]);
  }

  
  /**
   */

  enableMdnsDiscovery() {
    this.proxy.sendMessage(
        11,
        mediaRouter.mojom.MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   */

  updateMediaSinks(
      mediaSource) {
    this.proxy.sendMessage(
        12,
        mediaRouter.mojom.MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
        null,
        [
          mediaSource
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !mediaRouter.mojom.MediaControllerPendingReceiver } mediaController
   * @param { !mediaRouter.mojom.MediaStatusObserverRemote } observer
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  createMediaRouteController(
      routeId,
      mediaController,
      observer) {
    return this.proxy.sendMessage(
        13,
        mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
        [
          routeId,
          mediaController,
          observer
        ]);
  }

  
  /**
   * @return {!Promise<{
        state: ?mediaRouter.mojom.ProviderState,
   *  }>}
   */

  getState() {
    return this.proxy.sendMessage(
        14,
        mediaRouter.mojom.MediaRouteProvider_GetState_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_GetState_ResponseParamsSpec.$,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MediaRouteProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mediaRouter.mojom.MediaRouteProviderReceiver = class {
  /**
   * @param {!mediaRouter.mojom.MediaRouteProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mediaRouter.mojom.MediaRouteProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mediaRouter.mojom.MediaRouteProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mediaRouter.mojom.MediaRouteProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mediaRouter.mojom.MediaRouteProvider_CreateRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
        impl.createRoute.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mediaRouter.mojom.MediaRouteProvider_JoinRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
        impl.joinRoute.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
        impl.terminateRoute.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        mediaRouter.mojom.MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
        null,
        impl.sendRouteMessage.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        mediaRouter.mojom.MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
        null,
        impl.sendRouteBinaryMessage.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        mediaRouter.mojom.MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
        null,
        impl.startObservingMediaSinks.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        mediaRouter.mojom.MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
        null,
        impl.stopObservingMediaSinks.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        mediaRouter.mojom.MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
        null,
        impl.startObservingMediaRoutes.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        mediaRouter.mojom.MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
        null,
        impl.startListeningForRouteMessages.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        mediaRouter.mojom.MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
        null,
        impl.stopListeningForRouteMessages.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        mediaRouter.mojom.MediaRouteProvider_DetachRoute_ParamsSpec.$,
        null,
        impl.detachRoute.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        mediaRouter.mojom.MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
        null,
        impl.enableMdnsDiscovery.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        mediaRouter.mojom.MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
        null,
        impl.updateMediaSinks.bind(impl));
    this.helper_internal_.registerHandler(
        13,
        mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
        impl.createMediaRouteController.bind(impl));
    this.helper_internal_.registerHandler(
        14,
        mediaRouter.mojom.MediaRouteProvider_GetState_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_GetState_ResponseParamsSpec.$,
        impl.getState.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mediaRouter.mojom.MediaRouteProvider = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaRouteProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mediaRouter.mojom.MediaRouteProviderRemote}
   * @export
   */
  static getRemote() {
    let remote = new mediaRouter.mojom.MediaRouteProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaRouteProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mediaRouter.mojom.MediaRouteProviderCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mediaRouter.mojom.MediaRouteProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mediaRouter.mojom.MediaRouteProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mediaRouter.mojom.MediaRouteProvider_CreateRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
        this.createRoute.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.joinRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mediaRouter.mojom.MediaRouteProvider_JoinRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
        this.joinRoute.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.terminateRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
        this.terminateRoute.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendRouteMessage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        mediaRouter.mojom.MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
        null,
        this.sendRouteMessage.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendRouteBinaryMessage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        mediaRouter.mojom.MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
        null,
        this.sendRouteBinaryMessage.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startObservingMediaSinks =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        mediaRouter.mojom.MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
        null,
        this.startObservingMediaSinks.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stopObservingMediaSinks =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        mediaRouter.mojom.MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
        null,
        this.stopObservingMediaSinks.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startObservingMediaRoutes =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        mediaRouter.mojom.MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
        null,
        this.startObservingMediaRoutes.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startListeningForRouteMessages =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        mediaRouter.mojom.MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
        null,
        this.startListeningForRouteMessages.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stopListeningForRouteMessages =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        mediaRouter.mojom.MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
        null,
        this.stopListeningForRouteMessages.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.detachRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        mediaRouter.mojom.MediaRouteProvider_DetachRoute_ParamsSpec.$,
        null,
        this.detachRoute.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.enableMdnsDiscovery =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        mediaRouter.mojom.MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
        null,
        this.enableMdnsDiscovery.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.updateMediaSinks =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        mediaRouter.mojom.MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
        null,
        this.updateMediaSinks.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createMediaRouteController =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        13,
        mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
        this.createMediaRouteController.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getState =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        14,
        mediaRouter.mojom.MediaRouteProvider_GetState_ParamsSpec.$,
        mediaRouter.mojom.MediaRouteProvider_GetState_ResponseParamsSpec.$,
        this.getState.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};




/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mediaRouter.mojom.MediaRouterPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mediaRouter.mojom.MediaRouter.$interfaceName,
        scope);
  }
};



/**
 * @export
 * @implements { mediaRouter.mojom.MediaRouterInterface }
 */
mediaRouter.mojom.MediaRouterRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mediaRouter.mojom.MediaRouterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mediaRouter.mojom.MediaRouterPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mediaRouter.mojom.MediaRouterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mediaRouter.mojom.MediaRouteProviderId } providerId
   * @param { !mediaRouter.mojom.MediaRouteProviderRemote } mediaRouterProvider
   */

  registerMediaRouteProvider(
      providerId,
      mediaRouterProvider) {
    this.proxy.sendMessage(
        0,
        mediaRouter.mojom.MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
        null,
        [
          providerId,
          mediaRouterProvider
        ]);
  }

  
  /**
   * @param { !mediaRouter.mojom.MediaRouteProviderId } providerId
   * @param { !string } mediaSource
   * @param { !Array<!mediaRouter.mojom.MediaSink> } sinks
   * @param { !Array<!url.mojom.Origin> } origins
   */

  onSinksReceived(
      providerId,
      mediaSource,
      sinks,
      origins) {
    this.proxy.sendMessage(
        1,
        mediaRouter.mojom.MediaRouter_OnSinksReceived_ParamsSpec.$,
        null,
        [
          providerId,
          mediaSource,
          sinks,
          origins
        ]);
  }

  
  /**
   * @param { !mediaRouter.mojom.Issue } issue
   */

  onIssue(
      issue) {
    this.proxy.sendMessage(
        2,
        mediaRouter.mojom.MediaRouter_OnIssue_ParamsSpec.$,
        null,
        [
          issue
        ]);
  }

  
  /**
   * @param { !mediaRouter.mojom.MediaRouteProviderId } providerId
   * @param { !Array<!mediaRouter.mojom.MediaRoute> } routes
   */

  onRoutesUpdated(
      providerId,
      routes) {
    this.proxy.sendMessage(
        3,
        mediaRouter.mojom.MediaRouter_OnRoutesUpdated_ParamsSpec.$,
        null,
        [
          providerId,
          routes
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !blink.mojom.PresentationConnectionState } state
   */

  onPresentationConnectionStateChanged(
      routeId,
      state) {
    this.proxy.sendMessage(
        4,
        mediaRouter.mojom.MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
        null,
        [
          routeId,
          state
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !blink.mojom.PresentationConnectionCloseReason } reason
   * @param { !string } message
   */

  onPresentationConnectionClosed(
      routeId,
      reason,
      message) {
    this.proxy.sendMessage(
        5,
        mediaRouter.mojom.MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
        null,
        [
          routeId,
          reason,
          message
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !Array<!mediaRouter.mojom.RouteMessage> } messages
   */

  onRouteMessagesReceived(
      routeId,
      messages) {
    this.proxy.sendMessage(
        6,
        mediaRouter.mojom.MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
        null,
        [
          routeId,
          messages
        ]);
  }

  
  /**
   * @return {!Promise<{
        status: !string,
   *  }>}
   */

  getMediaSinkServiceStatus() {
    return this.proxy.sendMessage(
        7,
        mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
        mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !mediaRouter.mojom.LoggerPendingReceiver } receiver
   */

  getLogger(
      receiver) {
    this.proxy.sendMessage(
        8,
        mediaRouter.mojom.MediaRouter_GetLogger_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @return {!Promise<{
        logs: !string,
   *  }>}
   */

  getLogsAsString() {
    return this.proxy.sendMessage(
        9,
        mediaRouter.mojom.MediaRouter_GetLogsAsString_ParamsSpec.$,
        mediaRouter.mojom.MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !number } frameTreeNodeId
   * @param { !mirroring.mojom.MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForTab(
      frameTreeNodeId,
      receiver) {
    this.proxy.sendMessage(
        10,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
        null,
        [
          frameTreeNodeId,
          receiver
        ]);
  }

  
  /**
   * @param { !string } desktopStreamId
   * @param { !mirroring.mojom.MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForDesktop(
      desktopStreamId,
      receiver) {
    this.proxy.sendMessage(
        11,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
        null,
        [
          desktopStreamId,
          receiver
        ]);
  }

  
  /**
   * @param { !url.mojom.Url } presentationUrl
   * @param { !string } presentationId
   * @param { !mirroring.mojom.MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForOffscreenTab(
      presentationUrl,
      presentationId,
      receiver) {
    this.proxy.sendMessage(
        12,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
        null,
        [
          presentationUrl,
          presentationId,
          receiver
        ]);
  }
};

/**
 * An object which receives request messages for the MediaRouter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mediaRouter.mojom.MediaRouterReceiver = class {
  /**
   * @param {!mediaRouter.mojom.MediaRouterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mediaRouter.mojom.MediaRouterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mediaRouter.mojom.MediaRouterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mediaRouter.mojom.MediaRouterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mediaRouter.mojom.MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
        null,
        impl.registerMediaRouteProvider.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mediaRouter.mojom.MediaRouter_OnSinksReceived_ParamsSpec.$,
        null,
        impl.onSinksReceived.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        mediaRouter.mojom.MediaRouter_OnIssue_ParamsSpec.$,
        null,
        impl.onIssue.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        mediaRouter.mojom.MediaRouter_OnRoutesUpdated_ParamsSpec.$,
        null,
        impl.onRoutesUpdated.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        mediaRouter.mojom.MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
        null,
        impl.onPresentationConnectionStateChanged.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        mediaRouter.mojom.MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
        null,
        impl.onPresentationConnectionClosed.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        mediaRouter.mojom.MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
        null,
        impl.onRouteMessagesReceived.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
        mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
        impl.getMediaSinkServiceStatus.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        mediaRouter.mojom.MediaRouter_GetLogger_ParamsSpec.$,
        null,
        impl.getLogger.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        mediaRouter.mojom.MediaRouter_GetLogsAsString_ParamsSpec.$,
        mediaRouter.mojom.MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
        impl.getLogsAsString.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
        null,
        impl.getMirroringServiceHostForTab.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
        null,
        impl.getMirroringServiceHostForDesktop.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
        null,
        impl.getMirroringServiceHostForOffscreenTab.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mediaRouter.mojom.MediaRouter = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaRouter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mediaRouter.mojom.MediaRouterRemote}
   * @export
   */
  static getRemote() {
    let remote = new mediaRouter.mojom.MediaRouterRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaRouter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mediaRouter.mojom.MediaRouterCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mediaRouter.mojom.MediaRouterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mediaRouter.mojom.MediaRouterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.registerMediaRouteProvider =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mediaRouter.mojom.MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
        null,
        this.registerMediaRouteProvider.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinksReceived =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mediaRouter.mojom.MediaRouter_OnSinksReceived_ParamsSpec.$,
        null,
        this.onSinksReceived.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onIssue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        mediaRouter.mojom.MediaRouter_OnIssue_ParamsSpec.$,
        null,
        this.onIssue.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRoutesUpdated =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        mediaRouter.mojom.MediaRouter_OnRoutesUpdated_ParamsSpec.$,
        null,
        this.onRoutesUpdated.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPresentationConnectionStateChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        mediaRouter.mojom.MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
        null,
        this.onPresentationConnectionStateChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPresentationConnectionClosed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        mediaRouter.mojom.MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
        null,
        this.onPresentationConnectionClosed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRouteMessagesReceived =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        mediaRouter.mojom.MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
        null,
        this.onRouteMessagesReceived.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMediaSinkServiceStatus =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
        mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
        this.getMediaSinkServiceStatus.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getLogger =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        mediaRouter.mojom.MediaRouter_GetLogger_ParamsSpec.$,
        null,
        this.getLogger.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getLogsAsString =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        mediaRouter.mojom.MediaRouter_GetLogsAsString_ParamsSpec.$,
        mediaRouter.mojom.MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
        this.getLogsAsString.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMirroringServiceHostForTab =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
        null,
        this.getMirroringServiceHostForTab.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMirroringServiceHostForDesktop =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
        null,
        this.getMirroringServiceHostForDesktop.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMirroringServiceHostForOffscreenTab =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
        null,
        this.getMirroringServiceHostForOffscreenTab.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};



/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaSinkSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.DialMediaSinkSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.CastMediaSinkSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.IssueSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.RouteMessageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.RoutePresentationConnectionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.CastSessionStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.CastProviderStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_CreateRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_CreateRoute_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_JoinRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_JoinRoute_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_SendRouteMessage_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_StartObservingMediaSinks_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_StopObservingMediaSinks_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_DetachRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_UpdateMediaSinks_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_GetState_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouteProvider_GetState_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_RegisterMediaRouteProvider_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_OnSinksReceived_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_OnIssue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_OnRoutesUpdated_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_OnPresentationConnectionClosed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_OnRouteMessagesReceived_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetLogger_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetLogsAsString_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetLogsAsString_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForTab_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.MediaSinkExtraDataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };


/**
 * @const { {$:!mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.ProviderStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    mediaRouter.mojom.MediaSinkSpec.$,
    'MediaSink',
    [
      mojo.internal.StructField(
        'sinkId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'description', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'domain', 24,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'iconType', 32,
        0,
        mediaRouter.mojom.SinkIconTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'providerId', 36,
        0,
        mediaRouter.mojom.MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'extraData', 40,
        0,
        mediaRouter.mojom.MediaSinkExtraDataSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 64],]);





/** @record */
mediaRouter.mojom.MediaSink = class {
  constructor() {
    /** @export { !string } */
    this.sinkId;
    /** @export { !string } */
    this.name;
    /** @export { (string|undefined) } */
    this.description;
    /** @export { (string|undefined) } */
    this.domain;
    /** @export { !mediaRouter.mojom.SinkIconType } */
    this.iconType;
    /** @export { !mediaRouter.mojom.MediaRouteProviderId } */
    this.providerId;
    /** @export { (mediaRouter.mojom.MediaSinkExtraData|undefined) } */
    this.extraData;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.DialMediaSinkSpec.$,
    'DialMediaSink',
    [
      mojo.internal.StructField(
        'ipAddress', 0,
        0,
        network.mojom.IPAddressSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'modelName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'appUrl', 16,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
mediaRouter.mojom.DialMediaSink = class {
  constructor() {
    /** @export { !network.mojom.IPAddress } */
    this.ipAddress;
    /** @export { !string } */
    this.modelName;
    /** @export { !url.mojom.Url } */
    this.appUrl;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.CastMediaSinkSpec.$,
    'CastMediaSink',
    [
      mojo.internal.StructField(
        'ipEndpoint', 0,
        0,
        network.mojom.IPEndPointSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'modelName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'capabilities', 16,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'castChannelId', 20,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
mediaRouter.mojom.CastMediaSink = class {
  constructor() {
    /** @export { !network.mojom.IPEndPoint } */
    this.ipEndpoint;
    /** @export { !string } */
    this.modelName;
    /** @export { !number } */
    this.capabilities;
    /** @export { !number } */
    this.castChannelId;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteSpec.$,
    'MediaRoute',
    [
      mojo.internal.StructField(
        'mediaRouteId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'presentationId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaSource', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'mediaSinkId', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaSinkName', 32,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'description', 40,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'isLocal', 48,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'controllerType', 52,
        0,
        mediaRouter.mojom.RouteControllerTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'isOffTheRecord', 48,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isLocalPresentation', 48,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'isConnecting', 48,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 64],]);





/** @record */
mediaRouter.mojom.MediaRoute = class {
  constructor() {
    /** @export { !string } */
    this.mediaRouteId;
    /** @export { !string } */
    this.presentationId;
    /** @export { (string|undefined) } */
    this.mediaSource;
    /** @export { !string } */
    this.mediaSinkId;
    /** @export { !string } */
    this.mediaSinkName;
    /** @export { !string } */
    this.description;
    /** @export { !boolean } */
    this.isLocal;
    /** @export { !boolean } */
    this.isOffTheRecord;
    /** @export { !boolean } */
    this.isLocalPresentation;
    /** @export { !boolean } */
    this.isConnecting;
    /** @export { !mediaRouter.mojom.RouteControllerType } */
    this.controllerType;
  }
};




/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.IssueSpec.SeveritySpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
mediaRouter.mojom.Issue_Severity = {
  
  FATAL: 0,
  WARNING: 1,
  NOTIFICATION: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};


/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.IssueSpec.ActionTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
mediaRouter.mojom.Issue_ActionType = {
  
  DISMISS: 0,
  LEARN_MORE: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    mediaRouter.mojom.IssueSpec.$,
    'Issue',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'sinkId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'severity', 16,
        0,
        mediaRouter.mojom.IssueSpec.SeveritySpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'isBlocking', 20,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
      mojo.internal.StructField(
        'title', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 32,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'defaultAction', 40,
        0,
        mediaRouter.mojom.IssueSpec.ActionTypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'secondaryActions', 48,
        0,
        mojo.internal.Array(mediaRouter.mojom.IssueSpec.ActionTypeSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'helpPageId', 44,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
    ],
    [[0, 64],]);





/** @record */
mediaRouter.mojom.Issue = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
    /** @export { !string } */
    this.sinkId;
    /** @export { !mediaRouter.mojom.Issue_Severity } */
    this.severity;
    /** @export { !boolean } */
    this.isBlocking;
    /** @export { !string } */
    this.title;
    /** @export { (string|undefined) } */
    this.message;
    /** @export { !mediaRouter.mojom.Issue_ActionType } */
    this.defaultAction;
    /** @export { !number } */
    this.helpPageId;
    /** @export { !Array<!mediaRouter.mojom.Issue_ActionType> } */
    this.secondaryActions;
  }
};




/**
 * @const { {$: !mojo.internal.MojomType} }
 * @export
 */
mediaRouter.mojom.RouteMessageSpec.TypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 * @export
 */
mediaRouter.mojom.RouteMessage_Type = {
  
  TEXT: 0,
  BINARY: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    mediaRouter.mojom.RouteMessageSpec.$,
    'RouteMessage',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        mediaRouter.mojom.RouteMessageSpec.TypeSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'data', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        true /* nullable */),
    ],
    [[0, 32],]);





/** @record */
mediaRouter.mojom.RouteMessage = class {
  constructor() {
    /** @export { !mediaRouter.mojom.RouteMessage_Type } */
    this.type;
    /** @export { (string|undefined) } */
    this.message;
    /** @export { (Array<!number>|undefined) } */
    this.data;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.RoutePresentationConnectionSpec.$,
    'RoutePresentationConnection',
    [
      mojo.internal.StructField(
        'connectionRemote', 0,
        0,
        mojo.internal.InterfaceProxy(blink.mojom.PresentationConnectionRemote),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'connectionReceiver', 8,
        0,
        mojo.internal.InterfaceRequest(blink.mojom.PresentationConnectionPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.RoutePresentationConnection = class {
  constructor() {
    /** @export { !blink.mojom.PresentationConnectionRemote } */
    this.connectionRemote;
    /** @export { !blink.mojom.PresentationConnectionPendingReceiver } */
    this.connectionReceiver;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.CastSessionStateSpec.$,
    'CastSessionState',
    [
      mojo.internal.StructField(
        'sinkId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'appId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'sessionId', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'routeDescription', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 40],]);





/** @record */
mediaRouter.mojom.CastSessionState = class {
  constructor() {
    /** @export { !string } */
    this.sinkId;
    /** @export { !string } */
    this.appId;
    /** @export { !string } */
    this.sessionId;
    /** @export { !string } */
    this.routeDescription;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.CastProviderStateSpec.$,
    'CastProviderState',
    [
      mojo.internal.StructField(
        'sessionState', 0,
        0,
        mojo.internal.Array(mediaRouter.mojom.CastSessionStateSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.CastProviderState = class {
  constructor() {
    /** @export { !Array<!mediaRouter.mojom.CastSessionState> } */
    this.sessionState;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_CreateRoute_ParamsSpec.$,
    'MediaRouteProvider_CreateRoute_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'sinkId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'originalPresentationId', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'origin', 24,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'frameTreeNodeId', 32,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'timeout', 40,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'offTheRecord', 36,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 56],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_CreateRoute_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaSource;
    /** @export { !string } */
    this.sinkId;
    /** @export { !string } */
    this.originalPresentationId;
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !number } */
    this.frameTreeNodeId;
    /** @export { !boolean } */
    this.offTheRecord;
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.timeout;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
    'MediaRouteProvider_CreateRoute_ResponseParams',
    [
      mojo.internal.StructField(
        'route', 0,
        0,
        mediaRouter.mojom.MediaRouteSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'connection', 8,
        0,
        mediaRouter.mojom.RoutePresentationConnectionSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'errorText', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'resultCode', 24,
        0,
        mediaRouter.mojom.RouteRequestResultCodeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 40],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_CreateRoute_ResponseParams = class {
  constructor() {
    /** @export { (mediaRouter.mojom.MediaRoute|undefined) } */
    this.route;
    /** @export { (mediaRouter.mojom.RoutePresentationConnection|undefined) } */
    this.connection;
    /** @export { (string|undefined) } */
    this.errorText;
    /** @export { !mediaRouter.mojom.RouteRequestResultCode } */
    this.resultCode;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_JoinRoute_ParamsSpec.$,
    'MediaRouteProvider_JoinRoute_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'presentationId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'origin', 16,
        0,
        url.mojom.OriginSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'frameTreeNodeId', 24,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'timeout', 32,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'offTheRecord', 28,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 48],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_JoinRoute_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaSource;
    /** @export { !string } */
    this.presentationId;
    /** @export { !url.mojom.Origin } */
    this.origin;
    /** @export { !number } */
    this.frameTreeNodeId;
    /** @export { !boolean } */
    this.offTheRecord;
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.timeout;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
    'MediaRouteProvider_JoinRoute_ResponseParams',
    [
      mojo.internal.StructField(
        'route', 0,
        0,
        mediaRouter.mojom.MediaRouteSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'connection', 8,
        0,
        mediaRouter.mojom.RoutePresentationConnectionSpec.$,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'errorText', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'resultCode', 24,
        0,
        mediaRouter.mojom.RouteRequestResultCodeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 40],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_JoinRoute_ResponseParams = class {
  constructor() {
    /** @export { (mediaRouter.mojom.MediaRoute|undefined) } */
    this.route;
    /** @export { (mediaRouter.mojom.RoutePresentationConnection|undefined) } */
    this.connection;
    /** @export { (string|undefined) } */
    this.errorText;
    /** @export { !mediaRouter.mojom.RouteRequestResultCode } */
    this.resultCode;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ParamsSpec.$,
    'MediaRouteProvider_TerminateRoute_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_TerminateRoute_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
    'MediaRouteProvider_TerminateRoute_ResponseParams',
    [
      mojo.internal.StructField(
        'errorText', 0,
        0,
        mojo.internal.String,
        null,
        true /* nullable */),
      mojo.internal.StructField(
        'resultCode', 8,
        0,
        mediaRouter.mojom.RouteRequestResultCodeSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_TerminateRoute_ResponseParams = class {
  constructor() {
    /** @export { (string|undefined) } */
    this.errorText;
    /** @export { !mediaRouter.mojom.RouteRequestResultCode } */
    this.resultCode;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
    'MediaRouteProvider_SendRouteMessage_Params',
    [
      mojo.internal.StructField(
        'mediaRouteId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_SendRouteMessage_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaRouteId;
    /** @export { !string } */
    this.message;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
    'MediaRouteProvider_SendRouteBinaryMessage_Params',
    [
      mojo.internal.StructField(
        'mediaRouteId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'data', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_SendRouteBinaryMessage_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaRouteId;
    /** @export { !Array<!number> } */
    this.data;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
    'MediaRouteProvider_StartObservingMediaSinks_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_StartObservingMediaSinks_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaSource;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
    'MediaRouteProvider_StopObservingMediaSinks_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_StopObservingMediaSinks_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaSource;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
    'MediaRouteProvider_StartObservingMediaRoutes_Params',
    [
    ],
    [[0, 8],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_StartObservingMediaRoutes_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
    'MediaRouteProvider_StartListeningForRouteMessages_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_StartListeningForRouteMessages_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
    'MediaRouteProvider_StopListeningForRouteMessages_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_StopListeningForRouteMessages_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_DetachRoute_ParamsSpec.$,
    'MediaRouteProvider_DetachRoute_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_DetachRoute_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
    'MediaRouteProvider_EnableMdnsDiscovery_Params',
    [
    ],
    [[0, 8],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_EnableMdnsDiscovery_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
    'MediaRouteProvider_UpdateMediaSinks_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_UpdateMediaSinks_Params = class {
  constructor() {
    /** @export { !string } */
    this.mediaSource;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
    'MediaRouteProvider_CreateMediaRouteController_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaController', 8,
        0,
        mojo.internal.InterfaceRequest(mediaRouter.mojom.MediaControllerPendingReceiver),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'observer', 12,
        0,
        mojo.internal.InterfaceProxy(mediaRouter.mojom.MediaStatusObserverRemote),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
    /** @export { !mediaRouter.mojom.MediaControllerPendingReceiver } */
    this.mediaController;
    /** @export { !mediaRouter.mojom.MediaStatusObserverRemote } */
    this.observer;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
    'MediaRouteProvider_CreateMediaRouteController_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_CreateMediaRouteController_ResponseParams = class {
  constructor() {
    /** @export { !boolean } */
    this.success;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_GetState_ParamsSpec.$,
    'MediaRouteProvider_GetState_Params',
    [
    ],
    [[0, 8],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_GetState_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouteProvider_GetState_ResponseParamsSpec.$,
    'MediaRouteProvider_GetState_ResponseParams',
    [
      mojo.internal.StructField(
        'state', 0,
        0,
        mediaRouter.mojom.ProviderStateSpec.$,
        null,
        true /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouteProvider_GetState_ResponseParams = class {
  constructor() {
    /** @export { (mediaRouter.mojom.ProviderState|undefined) } */
    this.state;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
    'MediaRouter_RegisterMediaRouteProvider_Params',
    [
      mojo.internal.StructField(
        'providerId', 0,
        0,
        mediaRouter.mojom.MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaRouterProvider', 4,
        0,
        mojo.internal.InterfaceProxy(mediaRouter.mojom.MediaRouteProviderRemote),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouter_RegisterMediaRouteProvider_Params = class {
  constructor() {
    /** @export { !mediaRouter.mojom.MediaRouteProviderId } */
    this.providerId;
    /** @export { !mediaRouter.mojom.MediaRouteProviderRemote } */
    this.mediaRouterProvider;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_OnSinksReceived_ParamsSpec.$,
    'MediaRouter_OnSinksReceived_Params',
    [
      mojo.internal.StructField(
        'providerId', 0,
        0,
        mediaRouter.mojom.MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'mediaSource', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'sinks', 16,
        0,
        mojo.internal.Array(mediaRouter.mojom.MediaSinkSpec.$, false),
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'origins', 24,
        0,
        mojo.internal.Array(url.mojom.OriginSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 40],]);





/** @record */
mediaRouter.mojom.MediaRouter_OnSinksReceived_Params = class {
  constructor() {
    /** @export { !mediaRouter.mojom.MediaRouteProviderId } */
    this.providerId;
    /** @export { !string } */
    this.mediaSource;
    /** @export { !Array<!mediaRouter.mojom.MediaSink> } */
    this.sinks;
    /** @export { !Array<!url.mojom.Origin> } */
    this.origins;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_OnIssue_ParamsSpec.$,
    'MediaRouter_OnIssue_Params',
    [
      mojo.internal.StructField(
        'issue', 0,
        0,
        mediaRouter.mojom.IssueSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouter_OnIssue_Params = class {
  constructor() {
    /** @export { !mediaRouter.mojom.Issue } */
    this.issue;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_OnRoutesUpdated_ParamsSpec.$,
    'MediaRouter_OnRoutesUpdated_Params',
    [
      mojo.internal.StructField(
        'providerId', 0,
        0,
        mediaRouter.mojom.MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'routes', 8,
        0,
        mojo.internal.Array(mediaRouter.mojom.MediaRouteSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouter_OnRoutesUpdated_Params = class {
  constructor() {
    /** @export { !mediaRouter.mojom.MediaRouteProviderId } */
    this.providerId;
    /** @export { !Array<!mediaRouter.mojom.MediaRoute> } */
    this.routes;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
    'MediaRouter_OnPresentationConnectionStateChanged_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'state', 8,
        0,
        blink.mojom.PresentationConnectionStateSpec.$,
        0,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouter_OnPresentationConnectionStateChanged_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
    /** @export { !blink.mojom.PresentationConnectionState } */
    this.state;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
    'MediaRouter_OnPresentationConnectionClosed_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'reason', 8,
        0,
        blink.mojom.PresentationConnectionCloseReasonSpec.$,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'message', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
mediaRouter.mojom.MediaRouter_OnPresentationConnectionClosed_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
    /** @export { !blink.mojom.PresentationConnectionCloseReason } */
    this.reason;
    /** @export { !string } */
    this.message;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
    'MediaRouter_OnRouteMessagesReceived_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'messages', 8,
        0,
        mojo.internal.Array(mediaRouter.mojom.RouteMessageSpec.$, false),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouter_OnRouteMessagesReceived_Params = class {
  constructor() {
    /** @export { !string } */
    this.routeId;
    /** @export { !Array<!mediaRouter.mojom.RouteMessage> } */
    this.messages;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
    'MediaRouter_GetMediaSinkServiceStatus_Params',
    [
    ],
    [[0, 8],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
    'MediaRouter_GetMediaSinkServiceStatus_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetMediaSinkServiceStatus_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.status;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetLogger_ParamsSpec.$,
    'MediaRouter_GetLogger_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(mediaRouter.mojom.LoggerPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetLogger_Params = class {
  constructor() {
    /** @export { !mediaRouter.mojom.LoggerPendingReceiver } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetLogsAsString_ParamsSpec.$,
    'MediaRouter_GetLogsAsString_Params',
    [
    ],
    [[0, 8],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetLogsAsString_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
    'MediaRouter_GetLogsAsString_ResponseParams',
    [
      mojo.internal.StructField(
        'logs', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetLogsAsString_ResponseParams = class {
  constructor() {
    /** @export { !string } */
    this.logs;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
    'MediaRouter_GetMirroringServiceHostForTab_Params',
    [
      mojo.internal.StructField(
        'frameTreeNodeId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */),
      mojo.internal.StructField(
        'receiver', 4,
        0,
        mojo.internal.InterfaceRequest(mirroring.mojom.MirroringServiceHostPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 16],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForTab_Params = class {
  constructor() {
    /** @export { !number } */
    this.frameTreeNodeId;
    /** @export { !mirroring.mojom.MirroringServiceHostPendingReceiver } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
    'MediaRouter_GetMirroringServiceHostForDesktop_Params',
    [
      mojo.internal.StructField(
        'desktopStreamId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'receiver', 8,
        0,
        mojo.internal.InterfaceRequest(mirroring.mojom.MirroringServiceHostPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 24],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForDesktop_Params = class {
  constructor() {
    /** @export { !string } */
    this.desktopStreamId;
    /** @export { !mirroring.mojom.MirroringServiceHostPendingReceiver } */
    this.receiver;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
    'MediaRouter_GetMirroringServiceHostForOffscreenTab_Params',
    [
      mojo.internal.StructField(
        'presentationUrl', 0,
        0,
        url.mojom.UrlSpec.$,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'presentationId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */),
      mojo.internal.StructField(
        'receiver', 16,
        0,
        mojo.internal.InterfaceRequest(mirroring.mojom.MirroringServiceHostPendingReceiver),
        null,
        false /* nullable */),
    ],
    [[0, 32],]);





/** @record */
mediaRouter.mojom.MediaRouter_GetMirroringServiceHostForOffscreenTab_Params = class {
  constructor() {
    /** @export { !url.mojom.Url } */
    this.presentationUrl;
    /** @export { !string } */
    this.presentationId;
    /** @export { !mirroring.mojom.MirroringServiceHostPendingReceiver } */
    this.receiver;
  }
};




mojo.internal.Union(
    mediaRouter.mojom.MediaSinkExtraDataSpec.$, 'MediaSinkExtraData',
    {
      'dialMediaSink': {
        'ordinal': 0,
        'type': mediaRouter.mojom.DialMediaSinkSpec.$,
      },
      'castMediaSink': {
        'ordinal': 1,
        'type': mediaRouter.mojom.CastMediaSinkSpec.$,
      },
    });

/**
 * @typedef { {
 *   dialMediaSink: (!mediaRouter.mojom.DialMediaSink|undefined),
 *   castMediaSink: (!mediaRouter.mojom.CastMediaSink|undefined),
 * } }
 */
mediaRouter.mojom.MediaSinkExtraData;


mojo.internal.Union(
    mediaRouter.mojom.ProviderStateSpec.$, 'ProviderState',
    {
      'castProviderState': {
        'ordinal': 0,
        'type': mediaRouter.mojom.CastProviderStateSpec.$,
      },
    });

/**
 * @typedef { {
 *   castProviderState: (!mediaRouter.mojom.CastProviderState|undefined),
 * } }
 */
mediaRouter.mojom.ProviderState;
