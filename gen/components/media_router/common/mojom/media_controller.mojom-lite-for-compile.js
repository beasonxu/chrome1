// components/media_router/common/mojom/media_controller.mojom-lite-for-compile.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
'use strict';

goog.require('mojo.internal');
goog.require('mojo.internal.interfaceSupport');

goog.require('mojoBase.mojom.TimeDelta');






goog.provide('mediaRouter.mojom.MediaController');
goog.provide('mediaRouter.mojom.MediaControllerReceiver');
goog.provide('mediaRouter.mojom.MediaControllerCallbackRouter');
goog.provide('mediaRouter.mojom.MediaControllerInterface');
goog.provide('mediaRouter.mojom.MediaControllerRemote');
goog.provide('mediaRouter.mojom.MediaControllerPendingReceiver');


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 * @export
 */
mediaRouter.mojom.MediaControllerPendingReceiver = class {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle,
        mediaRouter.mojom.MediaController.$interfaceName,
        scope);
  }
};

/** @interface */
mediaRouter.mojom.MediaControllerInterface = class {
  
  /**
   */

  play() {}
  
  /**
   */

  pause() {}
  
  /**
   * @param { !boolean } mute
   */

  setMute(mute) {}
  
  /**
   * @param { !number } volume
   */

  setVolume(volume) {}
  
  /**
   * @param { !mojoBase.mojom.TimeDelta } time
   */

  seek(time) {}
  
  /**
   */

  nextTrack() {}
  
  /**
   */

  previousTrack() {}
};

/**
 * @export
 * @implements { mediaRouter.mojom.MediaControllerInterface }
 */
mediaRouter.mojom.MediaControllerRemote = class {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!mediaRouter.mojom.MediaControllerPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          mediaRouter.mojom.MediaControllerPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!mediaRouter.mojom.MediaControllerPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   */

  play() {
    this.proxy.sendMessage(
        0,
        mediaRouter.mojom.MediaController_Play_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  pause() {
    this.proxy.sendMessage(
        1,
        mediaRouter.mojom.MediaController_Pause_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !boolean } mute
   */

  setMute(
      mute) {
    this.proxy.sendMessage(
        2,
        mediaRouter.mojom.MediaController_SetMute_ParamsSpec.$,
        null,
        [
          mute
        ]);
  }

  
  /**
   * @param { !number } volume
   */

  setVolume(
      volume) {
    this.proxy.sendMessage(
        3,
        mediaRouter.mojom.MediaController_SetVolume_ParamsSpec.$,
        null,
        [
          volume
        ]);
  }

  
  /**
   * @param { !mojoBase.mojom.TimeDelta } time
   */

  seek(
      time) {
    this.proxy.sendMessage(
        4,
        mediaRouter.mojom.MediaController_Seek_ParamsSpec.$,
        null,
        [
          time
        ]);
  }

  
  /**
   */

  nextTrack() {
    this.proxy.sendMessage(
        5,
        mediaRouter.mojom.MediaController_NextTrack_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   */

  previousTrack() {
    this.proxy.sendMessage(
        6,
        mediaRouter.mojom.MediaController_PreviousTrack_ParamsSpec.$,
        null,
        [
        ]);
  }
};

/**
 * An object which receives request messages for the MediaController
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 *
 * @export
 */
mediaRouter.mojom.MediaControllerReceiver = class {
  /**
   * @param {!mediaRouter.mojom.MediaControllerInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!mediaRouter.mojom.MediaControllerRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        mediaRouter.mojom.MediaControllerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mediaRouter.mojom.MediaControllerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        mediaRouter.mojom.MediaController_Play_ParamsSpec.$,
        null,
        impl.play.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        mediaRouter.mojom.MediaController_Pause_ParamsSpec.$,
        null,
        impl.pause.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        mediaRouter.mojom.MediaController_SetMute_ParamsSpec.$,
        null,
        impl.setMute.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        mediaRouter.mojom.MediaController_SetVolume_ParamsSpec.$,
        null,
        impl.setVolume.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        mediaRouter.mojom.MediaController_Seek_ParamsSpec.$,
        null,
        impl.seek.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        mediaRouter.mojom.MediaController_NextTrack_ParamsSpec.$,
        null,
        impl.nextTrack.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        mediaRouter.mojom.MediaController_PreviousTrack_ParamsSpec.$,
        null,
        impl.previousTrack.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
};

/**
 *  @export
 */
mediaRouter.mojom.MediaController = class {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaController";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!mediaRouter.mojom.MediaControllerRemote}
   * @export
   */
  static getRemote() {
    let remote = new mediaRouter.mojom.MediaControllerRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
};


/**
 * An object which receives request messages for the MediaController
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 *
 * @export
 */
mediaRouter.mojom.MediaControllerCallbackRouter = class {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      mediaRouter.mojom.MediaControllerRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!mediaRouter.mojom.MediaControllerRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.play =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        mediaRouter.mojom.MediaController_Play_ParamsSpec.$,
        null,
        this.play.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.pause =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        mediaRouter.mojom.MediaController_Pause_ParamsSpec.$,
        null,
        this.pause.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setMute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        mediaRouter.mojom.MediaController_SetMute_ParamsSpec.$,
        null,
        this.setMute.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.setVolume =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        mediaRouter.mojom.MediaController_SetVolume_ParamsSpec.$,
        null,
        this.setVolume.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.seek =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        mediaRouter.mojom.MediaController_Seek_ParamsSpec.$,
        null,
        this.seek.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.nextTrack =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        mediaRouter.mojom.MediaController_NextTrack_ParamsSpec.$,
        null,
        this.nextTrack.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.previousTrack =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        mediaRouter.mojom.MediaController_PreviousTrack_ParamsSpec.$,
        null,
        this.previousTrack.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   * @export
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
};


goog.provide('mediaRouter.mojom.MediaController_Play_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_Play_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mediaRouter.mojom.MediaController_Pause_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_Pause_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mediaRouter.mojom.MediaController_SetMute_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_SetMute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mediaRouter.mojom.MediaController_SetVolume_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_SetVolume_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mediaRouter.mojom.MediaController_Seek_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_Seek_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mediaRouter.mojom.MediaController_NextTrack_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_NextTrack_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

goog.provide('mediaRouter.mojom.MediaController_PreviousTrack_ParamsSpec');
/**
 * @const { {$:!mojo.internal.MojomType}}
 * @export
 */
mediaRouter.mojom.MediaController_PreviousTrack_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_Play_ParamsSpec.$,
    'MediaController_Play_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mediaRouter.mojom.MediaController_Play_Params');

/** @record */
mediaRouter.mojom.MediaController_Play_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_Pause_ParamsSpec.$,
    'MediaController_Pause_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mediaRouter.mojom.MediaController_Pause_Params');

/** @record */
mediaRouter.mojom.MediaController_Pause_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_SetMute_ParamsSpec.$,
    'MediaController_SetMute_Params',
    [
      mojo.internal.StructField(
        'mute', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mediaRouter.mojom.MediaController_SetMute_Params');

/** @record */
mediaRouter.mojom.MediaController_SetMute_Params = class {
  constructor() {
    /** @export { !boolean } */
    this.mute;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_SetVolume_ParamsSpec.$,
    'MediaController_SetVolume_Params',
    [
      mojo.internal.StructField(
        'volume', 0,
        0,
        mojo.internal.Float,
        0,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mediaRouter.mojom.MediaController_SetVolume_Params');

/** @record */
mediaRouter.mojom.MediaController_SetVolume_Params = class {
  constructor() {
    /** @export { !number } */
    this.volume;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_Seek_ParamsSpec.$,
    'MediaController_Seek_Params',
    [
      mojo.internal.StructField(
        'time', 0,
        0,
        mojoBase.mojom.TimeDeltaSpec.$,
        null,
        false /* nullable */),
    ],
    [[0, 16],]);



goog.provide('mediaRouter.mojom.MediaController_Seek_Params');

/** @record */
mediaRouter.mojom.MediaController_Seek_Params = class {
  constructor() {
    /** @export { !mojoBase.mojom.TimeDelta } */
    this.time;
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_NextTrack_ParamsSpec.$,
    'MediaController_NextTrack_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mediaRouter.mojom.MediaController_NextTrack_Params');

/** @record */
mediaRouter.mojom.MediaController_NextTrack_Params = class {
  constructor() {
  }
};




mojo.internal.Struct(
    mediaRouter.mojom.MediaController_PreviousTrack_ParamsSpec.$,
    'MediaController_PreviousTrack_Params',
    [
    ],
    [[0, 8],]);



goog.provide('mediaRouter.mojom.MediaController_PreviousTrack_Params');

/** @record */
mediaRouter.mojom.MediaController_PreviousTrack_Params = class {
  constructor() {
  }
};


