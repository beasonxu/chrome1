// components/media_router/common/mojom/media_router.mojom.m.js is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import {mojo} from '../../../../mojo/public/js/bindings.js';

import {
  TimeDelta as mojoBase_mojom_TimeDelta,
  TimeDeltaSpec as mojoBase_mojom_TimeDeltaSpec
} from '../../../../mojo/public/mojom/base/time.mojom.m.js';

import {
  IPAddress as network_mojom_IPAddress,
  IPAddressSpec as network_mojom_IPAddressSpec
} from '../../../../services/network/public/mojom/ip_address.mojom.m.js';

import {
  IPEndPoint as network_mojom_IPEndPoint,
  IPEndPointSpec as network_mojom_IPEndPointSpec
} from '../../../../services/network/public/mojom/ip_endpoint.mojom.m.js';

import {
  PresentationConnectionCloseReason as blink_mojom_PresentationConnectionCloseReason,
  PresentationConnectionCloseReasonSpec as blink_mojom_PresentationConnectionCloseReasonSpec,
  PresentationConnectionState as blink_mojom_PresentationConnectionState,
  PresentationConnectionStateSpec as blink_mojom_PresentationConnectionStateSpec,
  PresentationConnectionRemote as blink_mojom_PresentationConnectionRemote,
  PresentationConnectionPendingReceiver as blink_mojom_PresentationConnectionPendingReceiver
} from '../../../../third_party/blink/public/mojom/presentation/presentation.mojom.m.js';

import {
  Origin as url_mojom_Origin,
  OriginSpec as url_mojom_OriginSpec
} from '../../../../url/mojom/origin.mojom.m.js';

import {
  Url as url_mojom_Url,
  UrlSpec as url_mojom_UrlSpec
} from '../../../../url/mojom/url.mojom.m.js';

import {
  MirroringServiceHostRemote as mirroring_mojom_MirroringServiceHostRemote,
  MirroringServiceHostPendingReceiver as mirroring_mojom_MirroringServiceHostPendingReceiver
} from '../../../mirroring/mojom/mirroring_service_host.mojom.m.js';

import {
  LoggerRemote as mediaRouter_mojom_LoggerRemote,
  LoggerPendingReceiver as mediaRouter_mojom_LoggerPendingReceiver
} from './logger.mojom.m.js';

import {
  MediaControllerRemote as mediaRouter_mojom_MediaControllerRemote,
  MediaControllerPendingReceiver as mediaRouter_mojom_MediaControllerPendingReceiver
} from './media_controller.mojom.m.js';

import {
  MediaRouteProviderId as mediaRouter_mojom_MediaRouteProviderId,
  MediaRouteProviderIdSpec as mediaRouter_mojom_MediaRouteProviderIdSpec
} from './media_route_provider_id.mojom.m.js';

import {
  MediaStatusObserverRemote as mediaRouter_mojom_MediaStatusObserverRemote,
  MediaStatusObserverPendingReceiver as mediaRouter_mojom_MediaStatusObserverPendingReceiver
} from './media_status.mojom.m.js';

import {
  RouteRequestResultCode as mediaRouter_mojom_RouteRequestResultCode,
  RouteRequestResultCodeSpec as mediaRouter_mojom_RouteRequestResultCodeSpec
} from './route_request_result_code.mojom.m.js';


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const SinkIconTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const SinkIconType = {
  
  CAST: 0,
  CAST_AUDIO_GROUP: 1,
  CAST_AUDIO: 2,
  WIRED_DISPLAY: 6,
  GENERIC: 7,
  MIN_VALUE: 0,
  MAX_VALUE: 7,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const RouteControllerTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const RouteControllerType = {
  
  kNone: 0,
  kGeneric: 1,
  kMirroring: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};



/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaRouteProviderPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media_router.mojom.MediaRouteProvider', scope);
  }
}

/** @interface */
export class MediaRouteProviderInterface {
  
  /**
   * @param { !string } mediaSource
   * @param { !string } sinkId
   * @param { !string } originalPresentationId
   * @param { !url_mojom_Origin } origin
   * @param { !number } frameTreeNodeId
   * @param { !mojoBase_mojom_TimeDelta } timeout
   * @param { !boolean } offTheRecord
   * @return {!Promise<{
        route: ?MediaRoute,
        connection: ?RoutePresentationConnection,
        errorText: ?string,
        resultCode: !mediaRouter_mojom_RouteRequestResultCode,
   *  }>}
   */

  createRoute(mediaSource, sinkId, originalPresentationId, origin, frameTreeNodeId, timeout, offTheRecord) {}
  
  /**
   * @param { !string } mediaSource
   * @param { !string } presentationId
   * @param { !url_mojom_Origin } origin
   * @param { !number } frameTreeNodeId
   * @param { !mojoBase_mojom_TimeDelta } timeout
   * @param { !boolean } offTheRecord
   * @return {!Promise<{
        route: ?MediaRoute,
        connection: ?RoutePresentationConnection,
        errorText: ?string,
        resultCode: !mediaRouter_mojom_RouteRequestResultCode,
   *  }>}
   */

  joinRoute(mediaSource, presentationId, origin, frameTreeNodeId, timeout, offTheRecord) {}
  
  /**
   * @param { !string } routeId
   * @return {!Promise<{
        errorText: ?string,
        resultCode: !mediaRouter_mojom_RouteRequestResultCode,
   *  }>}
   */

  terminateRoute(routeId) {}
  
  /**
   * @param { !string } mediaRouteId
   * @param { !string } message
   */

  sendRouteMessage(mediaRouteId, message) {}
  
  /**
   * @param { !string } mediaRouteId
   * @param { !Array<!number> } data
   */

  sendRouteBinaryMessage(mediaRouteId, data) {}
  
  /**
   * @param { !string } mediaSource
   */

  startObservingMediaSinks(mediaSource) {}
  
  /**
   * @param { !string } mediaSource
   */

  stopObservingMediaSinks(mediaSource) {}
  
  /**
   */

  startObservingMediaRoutes() {}
  
  /**
   * @param { !string } routeId
   */

  startListeningForRouteMessages(routeId) {}
  
  /**
   * @param { !string } routeId
   */

  stopListeningForRouteMessages(routeId) {}
  
  /**
   * @param { !string } routeId
   */

  detachRoute(routeId) {}
  
  /**
   */

  enableMdnsDiscovery() {}
  
  /**
   * @param { !string } mediaSource
   */

  updateMediaSinks(mediaSource) {}
  
  /**
   * @param { !string } routeId
   * @param { !mediaRouter_mojom_MediaControllerPendingReceiver } mediaController
   * @param { !mediaRouter_mojom_MediaStatusObserverRemote } observer
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  createMediaRouteController(routeId, mediaController, observer) {}
  
  /**
   * @return {!Promise<{
        state: ?ProviderState,
   *  }>}
   */

  getState() {}
}

/**
 * @implements { MediaRouteProviderInterface }
 */
export class MediaRouteProviderRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaRouteProviderPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaRouteProviderPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaRouteProviderPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !string } mediaSource
   * @param { !string } sinkId
   * @param { !string } originalPresentationId
   * @param { !url_mojom_Origin } origin
   * @param { !number } frameTreeNodeId
   * @param { !mojoBase_mojom_TimeDelta } timeout
   * @param { !boolean } offTheRecord
   * @return {!Promise<{
        route: ?MediaRoute,
        connection: ?RoutePresentationConnection,
        errorText: ?string,
        resultCode: !mediaRouter_mojom_RouteRequestResultCode,
   *  }>}
   */

  createRoute(
      mediaSource,
      sinkId,
      originalPresentationId,
      origin,
      frameTreeNodeId,
      timeout,
      offTheRecord) {
    return this.proxy.sendMessage(
        0,
        MediaRouteProvider_CreateRoute_ParamsSpec.$,
        MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
        [
          mediaSource,
          sinkId,
          originalPresentationId,
          origin,
          frameTreeNodeId,
          timeout,
          offTheRecord
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   * @param { !string } presentationId
   * @param { !url_mojom_Origin } origin
   * @param { !number } frameTreeNodeId
   * @param { !mojoBase_mojom_TimeDelta } timeout
   * @param { !boolean } offTheRecord
   * @return {!Promise<{
        route: ?MediaRoute,
        connection: ?RoutePresentationConnection,
        errorText: ?string,
        resultCode: !mediaRouter_mojom_RouteRequestResultCode,
   *  }>}
   */

  joinRoute(
      mediaSource,
      presentationId,
      origin,
      frameTreeNodeId,
      timeout,
      offTheRecord) {
    return this.proxy.sendMessage(
        1,
        MediaRouteProvider_JoinRoute_ParamsSpec.$,
        MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
        [
          mediaSource,
          presentationId,
          origin,
          frameTreeNodeId,
          timeout,
          offTheRecord
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @return {!Promise<{
        errorText: ?string,
        resultCode: !mediaRouter_mojom_RouteRequestResultCode,
   *  }>}
   */

  terminateRoute(
      routeId) {
    return this.proxy.sendMessage(
        2,
        MediaRouteProvider_TerminateRoute_ParamsSpec.$,
        MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
        [
          routeId
        ]);
  }

  
  /**
   * @param { !string } mediaRouteId
   * @param { !string } message
   */

  sendRouteMessage(
      mediaRouteId,
      message) {
    this.proxy.sendMessage(
        3,
        MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
        null,
        [
          mediaRouteId,
          message
        ]);
  }

  
  /**
   * @param { !string } mediaRouteId
   * @param { !Array<!number> } data
   */

  sendRouteBinaryMessage(
      mediaRouteId,
      data) {
    this.proxy.sendMessage(
        4,
        MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
        null,
        [
          mediaRouteId,
          data
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   */

  startObservingMediaSinks(
      mediaSource) {
    this.proxy.sendMessage(
        5,
        MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
        null,
        [
          mediaSource
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   */

  stopObservingMediaSinks(
      mediaSource) {
    this.proxy.sendMessage(
        6,
        MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
        null,
        [
          mediaSource
        ]);
  }

  
  /**
   */

  startObservingMediaRoutes() {
    this.proxy.sendMessage(
        7,
        MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !string } routeId
   */

  startListeningForRouteMessages(
      routeId) {
    this.proxy.sendMessage(
        8,
        MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
        null,
        [
          routeId
        ]);
  }

  
  /**
   * @param { !string } routeId
   */

  stopListeningForRouteMessages(
      routeId) {
    this.proxy.sendMessage(
        9,
        MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
        null,
        [
          routeId
        ]);
  }

  
  /**
   * @param { !string } routeId
   */

  detachRoute(
      routeId) {
    this.proxy.sendMessage(
        10,
        MediaRouteProvider_DetachRoute_ParamsSpec.$,
        null,
        [
          routeId
        ]);
  }

  
  /**
   */

  enableMdnsDiscovery() {
    this.proxy.sendMessage(
        11,
        MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
        null,
        [
        ]);
  }

  
  /**
   * @param { !string } mediaSource
   */

  updateMediaSinks(
      mediaSource) {
    this.proxy.sendMessage(
        12,
        MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
        null,
        [
          mediaSource
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !mediaRouter_mojom_MediaControllerPendingReceiver } mediaController
   * @param { !mediaRouter_mojom_MediaStatusObserverRemote } observer
   * @return {!Promise<{
        success: !boolean,
   *  }>}
   */

  createMediaRouteController(
      routeId,
      mediaController,
      observer) {
    return this.proxy.sendMessage(
        13,
        MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
        MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
        [
          routeId,
          mediaController,
          observer
        ]);
  }

  
  /**
   * @return {!Promise<{
        state: ?ProviderState,
   *  }>}
   */

  getState() {
    return this.proxy.sendMessage(
        14,
        MediaRouteProvider_GetState_ParamsSpec.$,
        MediaRouteProvider_GetState_ResponseParamsSpec.$,
        [
        ]);
  }
}

/**
 * An object which receives request messages for the MediaRouteProvider
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaRouteProviderReceiver {
  /**
   * @param {!MediaRouteProviderInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaRouteProviderRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaRouteProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaRouteProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaRouteProvider_CreateRoute_ParamsSpec.$,
        MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
        impl.createRoute.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        MediaRouteProvider_JoinRoute_ParamsSpec.$,
        MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
        impl.joinRoute.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        MediaRouteProvider_TerminateRoute_ParamsSpec.$,
        MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
        impl.terminateRoute.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
        null,
        impl.sendRouteMessage.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
        null,
        impl.sendRouteBinaryMessage.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
        null,
        impl.startObservingMediaSinks.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
        null,
        impl.stopObservingMediaSinks.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
        null,
        impl.startObservingMediaRoutes.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
        null,
        impl.startListeningForRouteMessages.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
        null,
        impl.stopListeningForRouteMessages.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        MediaRouteProvider_DetachRoute_ParamsSpec.$,
        null,
        impl.detachRoute.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
        null,
        impl.enableMdnsDiscovery.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
        null,
        impl.updateMediaSinks.bind(impl));
    this.helper_internal_.registerHandler(
        13,
        MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
        MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
        impl.createMediaRouteController.bind(impl));
    this.helper_internal_.registerHandler(
        14,
        MediaRouteProvider_GetState_ParamsSpec.$,
        MediaRouteProvider_GetState_ResponseParamsSpec.$,
        impl.getState.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaRouteProvider {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaRouteProvider";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaRouteProviderRemote}
   */
  static getRemote() {
    let remote = new MediaRouteProviderRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaRouteProvider
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaRouteProviderCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaRouteProviderRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaRouteProviderRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaRouteProvider_CreateRoute_ParamsSpec.$,
        MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
        this.createRoute.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.joinRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        MediaRouteProvider_JoinRoute_ParamsSpec.$,
        MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
        this.joinRoute.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.terminateRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        MediaRouteProvider_TerminateRoute_ParamsSpec.$,
        MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
        this.terminateRoute.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendRouteMessage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
        null,
        this.sendRouteMessage.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.sendRouteBinaryMessage =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
        null,
        this.sendRouteBinaryMessage.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startObservingMediaSinks =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
        null,
        this.startObservingMediaSinks.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stopObservingMediaSinks =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
        null,
        this.stopObservingMediaSinks.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startObservingMediaRoutes =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
        null,
        this.startObservingMediaRoutes.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.startListeningForRouteMessages =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
        null,
        this.startListeningForRouteMessages.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.stopListeningForRouteMessages =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
        null,
        this.stopListeningForRouteMessages.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.detachRoute =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        MediaRouteProvider_DetachRoute_ParamsSpec.$,
        null,
        this.detachRoute.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.enableMdnsDiscovery =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
        null,
        this.enableMdnsDiscovery.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.updateMediaSinks =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
        null,
        this.updateMediaSinks.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.createMediaRouteController =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        13,
        MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
        MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
        this.createMediaRouteController.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getState =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        14,
        MediaRouteProvider_GetState_ParamsSpec.$,
        MediaRouteProvider_GetState_ResponseParamsSpec.$,
        this.getState.createReceiverHandler(true /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}


/**
 * @implements {mojo.internal.interfaceSupport.PendingReceiver}
 */
export class MediaRouterPendingReceiver {
  /**
   * @param {!MojoHandle|!mojo.internal.interfaceSupport.Endpoint} handle
   */
  constructor(handle) {
    /** @public {!mojo.internal.interfaceSupport.Endpoint} */
    this.handle = mojo.internal.interfaceSupport.getEndpointForReceiver(handle);
  }

  /** @param {string=} scope */
  bindInBrowser(scope = 'context') {
    mojo.internal.interfaceSupport.bind(
        this.handle, 'media_router.mojom.MediaRouter', scope);
  }
}

/** @interface */
export class MediaRouterInterface {
  
  /**
   * @param { !mediaRouter_mojom_MediaRouteProviderId } providerId
   * @param { !MediaRouteProviderRemote } mediaRouterProvider
   */

  registerMediaRouteProvider(providerId, mediaRouterProvider) {}
  
  /**
   * @param { !mediaRouter_mojom_MediaRouteProviderId } providerId
   * @param { !string } mediaSource
   * @param { !Array<!MediaSink> } sinks
   * @param { !Array<!url_mojom_Origin> } origins
   */

  onSinksReceived(providerId, mediaSource, sinks, origins) {}
  
  /**
   * @param { !Issue } issue
   */

  onIssue(issue) {}
  
  /**
   * @param { !mediaRouter_mojom_MediaRouteProviderId } providerId
   * @param { !Array<!MediaRoute> } routes
   */

  onRoutesUpdated(providerId, routes) {}
  
  /**
   * @param { !string } routeId
   * @param { !blink_mojom_PresentationConnectionState } state
   */

  onPresentationConnectionStateChanged(routeId, state) {}
  
  /**
   * @param { !string } routeId
   * @param { !blink_mojom_PresentationConnectionCloseReason } reason
   * @param { !string } message
   */

  onPresentationConnectionClosed(routeId, reason, message) {}
  
  /**
   * @param { !string } routeId
   * @param { !Array<!RouteMessage> } messages
   */

  onRouteMessagesReceived(routeId, messages) {}
  
  /**
   * @return {!Promise<{
        status: !string,
   *  }>}
   */

  getMediaSinkServiceStatus() {}
  
  /**
   * @param { !mediaRouter_mojom_LoggerPendingReceiver } receiver
   */

  getLogger(receiver) {}
  
  /**
   * @return {!Promise<{
        logs: !string,
   *  }>}
   */

  getLogsAsString() {}
  
  /**
   * @param { !number } frameTreeNodeId
   * @param { !mirroring_mojom_MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForTab(frameTreeNodeId, receiver) {}
  
  /**
   * @param { !string } desktopStreamId
   * @param { !mirroring_mojom_MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForDesktop(desktopStreamId, receiver) {}
  
  /**
   * @param { !url_mojom_Url } presentationUrl
   * @param { !string } presentationId
   * @param { !mirroring_mojom_MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForOffscreenTab(presentationUrl, presentationId, receiver) {}
}

/**
 * @implements { MediaRouterInterface }
 */
export class MediaRouterRemote {
  /** @param {MojoHandle|mojo.internal.interfaceSupport.Endpoint=} handle */
  constructor(handle = undefined) {
    /**
     * @private {!mojo.internal.interfaceSupport.InterfaceRemoteBase<!MediaRouterPendingReceiver>}
     */
    this.proxy =
        new mojo.internal.interfaceSupport.InterfaceRemoteBase(
          MediaRouterPendingReceiver,
          handle);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper<!MediaRouterPendingReceiver>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceRemoteBaseWrapper(this.proxy);

    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.proxy.getConnectionErrorEventRouter();
  }

  
  /**
   * @param { !mediaRouter_mojom_MediaRouteProviderId } providerId
   * @param { !MediaRouteProviderRemote } mediaRouterProvider
   */

  registerMediaRouteProvider(
      providerId,
      mediaRouterProvider) {
    this.proxy.sendMessage(
        0,
        MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
        null,
        [
          providerId,
          mediaRouterProvider
        ]);
  }

  
  /**
   * @param { !mediaRouter_mojom_MediaRouteProviderId } providerId
   * @param { !string } mediaSource
   * @param { !Array<!MediaSink> } sinks
   * @param { !Array<!url_mojom_Origin> } origins
   */

  onSinksReceived(
      providerId,
      mediaSource,
      sinks,
      origins) {
    this.proxy.sendMessage(
        1,
        MediaRouter_OnSinksReceived_ParamsSpec.$,
        null,
        [
          providerId,
          mediaSource,
          sinks,
          origins
        ]);
  }

  
  /**
   * @param { !Issue } issue
   */

  onIssue(
      issue) {
    this.proxy.sendMessage(
        2,
        MediaRouter_OnIssue_ParamsSpec.$,
        null,
        [
          issue
        ]);
  }

  
  /**
   * @param { !mediaRouter_mojom_MediaRouteProviderId } providerId
   * @param { !Array<!MediaRoute> } routes
   */

  onRoutesUpdated(
      providerId,
      routes) {
    this.proxy.sendMessage(
        3,
        MediaRouter_OnRoutesUpdated_ParamsSpec.$,
        null,
        [
          providerId,
          routes
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !blink_mojom_PresentationConnectionState } state
   */

  onPresentationConnectionStateChanged(
      routeId,
      state) {
    this.proxy.sendMessage(
        4,
        MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
        null,
        [
          routeId,
          state
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !blink_mojom_PresentationConnectionCloseReason } reason
   * @param { !string } message
   */

  onPresentationConnectionClosed(
      routeId,
      reason,
      message) {
    this.proxy.sendMessage(
        5,
        MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
        null,
        [
          routeId,
          reason,
          message
        ]);
  }

  
  /**
   * @param { !string } routeId
   * @param { !Array<!RouteMessage> } messages
   */

  onRouteMessagesReceived(
      routeId,
      messages) {
    this.proxy.sendMessage(
        6,
        MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
        null,
        [
          routeId,
          messages
        ]);
  }

  
  /**
   * @return {!Promise<{
        status: !string,
   *  }>}
   */

  getMediaSinkServiceStatus() {
    return this.proxy.sendMessage(
        7,
        MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
        MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !mediaRouter_mojom_LoggerPendingReceiver } receiver
   */

  getLogger(
      receiver) {
    this.proxy.sendMessage(
        8,
        MediaRouter_GetLogger_ParamsSpec.$,
        null,
        [
          receiver
        ]);
  }

  
  /**
   * @return {!Promise<{
        logs: !string,
   *  }>}
   */

  getLogsAsString() {
    return this.proxy.sendMessage(
        9,
        MediaRouter_GetLogsAsString_ParamsSpec.$,
        MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
        [
        ]);
  }

  
  /**
   * @param { !number } frameTreeNodeId
   * @param { !mirroring_mojom_MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForTab(
      frameTreeNodeId,
      receiver) {
    this.proxy.sendMessage(
        10,
        MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
        null,
        [
          frameTreeNodeId,
          receiver
        ]);
  }

  
  /**
   * @param { !string } desktopStreamId
   * @param { !mirroring_mojom_MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForDesktop(
      desktopStreamId,
      receiver) {
    this.proxy.sendMessage(
        11,
        MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
        null,
        [
          desktopStreamId,
          receiver
        ]);
  }

  
  /**
   * @param { !url_mojom_Url } presentationUrl
   * @param { !string } presentationId
   * @param { !mirroring_mojom_MirroringServiceHostPendingReceiver } receiver
   */

  getMirroringServiceHostForOffscreenTab(
      presentationUrl,
      presentationId,
      receiver) {
    this.proxy.sendMessage(
        12,
        MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
        null,
        [
          presentationUrl,
          presentationId,
          receiver
        ]);
  }
}

/**
 * An object which receives request messages for the MediaRouter
 * mojom interface. Must be constructed over an object which implements that
 * interface.
 */
export class MediaRouterReceiver {
  /**
   * @param {!MediaRouterInterface } impl
   */
  constructor(impl) {
    /** @private {!mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal<!MediaRouterRemote>} */
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
        MediaRouterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaRouterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);


    this.helper_internal_.registerHandler(
        0,
        MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
        null,
        impl.registerMediaRouteProvider.bind(impl));
    this.helper_internal_.registerHandler(
        1,
        MediaRouter_OnSinksReceived_ParamsSpec.$,
        null,
        impl.onSinksReceived.bind(impl));
    this.helper_internal_.registerHandler(
        2,
        MediaRouter_OnIssue_ParamsSpec.$,
        null,
        impl.onIssue.bind(impl));
    this.helper_internal_.registerHandler(
        3,
        MediaRouter_OnRoutesUpdated_ParamsSpec.$,
        null,
        impl.onRoutesUpdated.bind(impl));
    this.helper_internal_.registerHandler(
        4,
        MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
        null,
        impl.onPresentationConnectionStateChanged.bind(impl));
    this.helper_internal_.registerHandler(
        5,
        MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
        null,
        impl.onPresentationConnectionClosed.bind(impl));
    this.helper_internal_.registerHandler(
        6,
        MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
        null,
        impl.onRouteMessagesReceived.bind(impl));
    this.helper_internal_.registerHandler(
        7,
        MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
        MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
        impl.getMediaSinkServiceStatus.bind(impl));
    this.helper_internal_.registerHandler(
        8,
        MediaRouter_GetLogger_ParamsSpec.$,
        null,
        impl.getLogger.bind(impl));
    this.helper_internal_.registerHandler(
        9,
        MediaRouter_GetLogsAsString_ParamsSpec.$,
        MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
        impl.getLogsAsString.bind(impl));
    this.helper_internal_.registerHandler(
        10,
        MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
        null,
        impl.getMirroringServiceHostForTab.bind(impl));
    this.helper_internal_.registerHandler(
        11,
        MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
        null,
        impl.getMirroringServiceHostForDesktop.bind(impl));
    this.helper_internal_.registerHandler(
        12,
        MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
        null,
        impl.getMirroringServiceHostForOffscreenTab.bind(impl));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }
}

export class MediaRouter {
  /**
   * @return {!string}
   */
  static get $interfaceName() {
    return "media_router.mojom.MediaRouter";
  }

  /**
   * Returns a remote for this interface which sends messages to the browser.
   * The browser must have an interface request binder registered for this
   * interface and accessible to the calling document's frame.
   *
   * @return {!MediaRouterRemote}
   */
  static getRemote() {
    let remote = new MediaRouterRemote;
    remote.$.bindNewPipeAndPassReceiver().bindInBrowser();
    return remote;
  }
}


/**
 * An object which receives request messages for the MediaRouter
 * mojom interface and dispatches them as callbacks. One callback receiver exists
 * on this object for each message defined in the mojom interface, and each
 * receiver can have any number of listeners added to it.
 */
export class MediaRouterCallbackRouter {
  constructor() {
    this.helper_internal_ = new mojo.internal.interfaceSupport.InterfaceReceiverHelperInternal(
      MediaRouterRemote);

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceReceiverHelper<!MediaRouterRemote>}
     */
    this.$ = new mojo.internal.interfaceSupport.InterfaceReceiverHelper(this.helper_internal_);

    this.router_ = new mojo.internal.interfaceSupport.CallbackRouter;

    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.registerMediaRouteProvider =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        0,
        MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
        null,
        this.registerMediaRouteProvider.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onSinksReceived =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        1,
        MediaRouter_OnSinksReceived_ParamsSpec.$,
        null,
        this.onSinksReceived.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onIssue =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        2,
        MediaRouter_OnIssue_ParamsSpec.$,
        null,
        this.onIssue.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRoutesUpdated =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        3,
        MediaRouter_OnRoutesUpdated_ParamsSpec.$,
        null,
        this.onRoutesUpdated.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPresentationConnectionStateChanged =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        4,
        MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
        null,
        this.onPresentationConnectionStateChanged.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onPresentationConnectionClosed =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        5,
        MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
        null,
        this.onPresentationConnectionClosed.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.onRouteMessagesReceived =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        6,
        MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
        null,
        this.onRouteMessagesReceived.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMediaSinkServiceStatus =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        7,
        MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
        MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
        this.getMediaSinkServiceStatus.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getLogger =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        8,
        MediaRouter_GetLogger_ParamsSpec.$,
        null,
        this.getLogger.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getLogsAsString =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        9,
        MediaRouter_GetLogsAsString_ParamsSpec.$,
        MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
        this.getLogsAsString.createReceiverHandler(true /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMirroringServiceHostForTab =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        10,
        MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
        null,
        this.getMirroringServiceHostForTab.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMirroringServiceHostForDesktop =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        11,
        MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
        null,
        this.getMirroringServiceHostForDesktop.createReceiverHandler(false /* expectsResponse */));
    /**
     * @public {!mojo.internal.interfaceSupport.InterfaceCallbackReceiver}
     */
    this.getMirroringServiceHostForOffscreenTab =
        new mojo.internal.interfaceSupport.InterfaceCallbackReceiver(
            this.router_);

    this.helper_internal_.registerHandler(
        12,
        MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
        null,
        this.getMirroringServiceHostForOffscreenTab.createReceiverHandler(false /* expectsResponse */));
    /** @public {!mojo.internal.interfaceSupport.ConnectionErrorEventRouter} */
    this.onConnectionError = this.helper_internal_.getConnectionErrorEventRouter();
  }

  /**
   * @param {number} id An ID returned by a prior call to addListener.
   * @return {boolean} True iff the identified listener was found and removed.
   */
  removeListener(id) {
    return this.router_.removeListener(id);
  }
}

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaSinkSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const DialMediaSinkSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CastMediaSinkSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const IssueSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RouteMessageSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const RoutePresentationConnectionSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CastSessionStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const CastProviderStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_CreateRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_CreateRoute_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_JoinRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_JoinRoute_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_TerminateRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_TerminateRoute_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_SendRouteMessage_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_StartObservingMediaSinks_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_StopObservingMediaSinks_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_DetachRoute_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_UpdateMediaSinks_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_CreateMediaRouteController_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_GetState_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouteProvider_GetState_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_RegisterMediaRouteProvider_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_OnSinksReceived_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_OnIssue_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_OnRoutesUpdated_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_OnPresentationConnectionClosed_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_OnRouteMessagesReceived_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetMediaSinkServiceStatus_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetLogger_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetLogsAsString_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetLogsAsString_ResponseParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetMirroringServiceHostForTab_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType}}
 */
export const MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const MediaSinkExtraDataSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };

/**
 * @const { {$:!mojo.internal.MojomType} }
 */
export const ProviderStateSpec =
    { $: /** @type {!mojo.internal.MojomType} */ ({}) };




mojo.internal.Struct(
    MediaSinkSpec.$,
    'MediaSink',
    [
      mojo.internal.StructField(
        'sinkId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'name', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'description', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'domain', 24,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'iconType', 32,
        0,
        SinkIconTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'providerId', 36,
        0,
        mediaRouter_mojom_MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'extraData', 40,
        0,
        MediaSinkExtraDataSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 64],]);



/**
 * @record
 */
export class MediaSink {
  constructor() {
    /** @type { !string } */
    this.sinkId;
    /** @type { !string } */
    this.name;
    /** @type { (string|undefined) } */
    this.description;
    /** @type { (string|undefined) } */
    this.domain;
    /** @type { !SinkIconType } */
    this.iconType;
    /** @type { !mediaRouter_mojom_MediaRouteProviderId } */
    this.providerId;
    /** @type { (MediaSinkExtraData|undefined) } */
    this.extraData;
  }
}



mojo.internal.Struct(
    DialMediaSinkSpec.$,
    'DialMediaSink',
    [
      mojo.internal.StructField(
        'ipAddress', 0,
        0,
        network_mojom_IPAddressSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'modelName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'appUrl', 16,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class DialMediaSink {
  constructor() {
    /** @type { !network_mojom_IPAddress } */
    this.ipAddress;
    /** @type { !string } */
    this.modelName;
    /** @type { !url_mojom_Url } */
    this.appUrl;
  }
}



mojo.internal.Struct(
    CastMediaSinkSpec.$,
    'CastMediaSink',
    [
      mojo.internal.StructField(
        'ipEndpoint', 0,
        0,
        network_mojom_IPEndPointSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'modelName', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'capabilities', 16,
        0,
        mojo.internal.Uint8,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'castChannelId', 20,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class CastMediaSink {
  constructor() {
    /** @type { !network_mojom_IPEndPoint } */
    this.ipEndpoint;
    /** @type { !string } */
    this.modelName;
    /** @type { !number } */
    this.capabilities;
    /** @type { !number } */
    this.castChannelId;
  }
}



mojo.internal.Struct(
    MediaRouteSpec.$,
    'MediaRoute',
    [
      mojo.internal.StructField(
        'mediaRouteId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'presentationId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaSource', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaSinkId', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaSinkName', 32,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'description', 40,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isLocal', 48,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'controllerType', 52,
        0,
        RouteControllerTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isOffTheRecord', 48,
        1,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isLocalPresentation', 48,
        2,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isConnecting', 48,
        3,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 64],]);



/**
 * @record
 */
export class MediaRoute {
  constructor() {
    /** @type { !string } */
    this.mediaRouteId;
    /** @type { !string } */
    this.presentationId;
    /** @type { (string|undefined) } */
    this.mediaSource;
    /** @type { !string } */
    this.mediaSinkId;
    /** @type { !string } */
    this.mediaSinkName;
    /** @type { !string } */
    this.description;
    /** @type { !boolean } */
    this.isLocal;
    /** @type { !boolean } */
    this.isOffTheRecord;
    /** @type { !boolean } */
    this.isLocalPresentation;
    /** @type { !boolean } */
    this.isConnecting;
    /** @type { !RouteControllerType } */
    this.controllerType;
  }
}


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const Issue_SeveritySpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const Issue_Severity = {
  
  FATAL: 0,
  WARNING: 1,
  NOTIFICATION: 2,
  MIN_VALUE: 0,
  MAX_VALUE: 2,
};

/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const Issue_ActionTypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const Issue_ActionType = {
  
  DISMISS: 0,
  LEARN_MORE: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    IssueSpec.$,
    'Issue',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'sinkId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'severity', 16,
        0,
        Issue_SeveritySpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'isBlocking', 20,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'title', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'message', 32,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'defaultAction', 40,
        0,
        Issue_ActionTypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'secondaryActions', 48,
        0,
        mojo.internal.Array(Issue_ActionTypeSpec.$, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'helpPageId', 44,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 64],]);



/**
 * @record
 */
export class Issue {
  constructor() {
    /** @type { !string } */
    this.routeId;
    /** @type { !string } */
    this.sinkId;
    /** @type { !Issue_Severity } */
    this.severity;
    /** @type { !boolean } */
    this.isBlocking;
    /** @type { !string } */
    this.title;
    /** @type { (string|undefined) } */
    this.message;
    /** @type { !Issue_ActionType } */
    this.defaultAction;
    /** @type { !number } */
    this.helpPageId;
    /** @type { !Array<!Issue_ActionType> } */
    this.secondaryActions;
  }
}


/**
 * @const { {$: !mojo.internal.MojomType} }
 */
export const RouteMessage_TypeSpec = { $: mojo.internal.Enum() };

/**
 * @enum {number}
 */
export const RouteMessage_Type = {
  
  TEXT: 0,
  BINARY: 1,
  MIN_VALUE: 0,
  MAX_VALUE: 1,
};


mojo.internal.Struct(
    RouteMessageSpec.$,
    'RouteMessage',
    [
      mojo.internal.StructField(
        'type', 0,
        0,
        RouteMessage_TypeSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'data', 16,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        true /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class RouteMessage {
  constructor() {
    /** @type { !RouteMessage_Type } */
    this.type;
    /** @type { (string|undefined) } */
    this.message;
    /** @type { (Array<!number>|undefined) } */
    this.data;
  }
}



mojo.internal.Struct(
    RoutePresentationConnectionSpec.$,
    'RoutePresentationConnection',
    [
      mojo.internal.StructField(
        'connectionRemote', 0,
        0,
        mojo.internal.InterfaceProxy(blink_mojom_PresentationConnectionRemote),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'connectionReceiver', 8,
        0,
        mojo.internal.InterfaceRequest(blink_mojom_PresentationConnectionPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class RoutePresentationConnection {
  constructor() {
    /** @type { !blink_mojom_PresentationConnectionRemote } */
    this.connectionRemote;
    /** @type { !blink_mojom_PresentationConnectionPendingReceiver } */
    this.connectionReceiver;
  }
}



mojo.internal.Struct(
    CastSessionStateSpec.$,
    'CastSessionState',
    [
      mojo.internal.StructField(
        'sinkId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'appId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'sessionId', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'routeDescription', 24,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class CastSessionState {
  constructor() {
    /** @type { !string } */
    this.sinkId;
    /** @type { !string } */
    this.appId;
    /** @type { !string } */
    this.sessionId;
    /** @type { !string } */
    this.routeDescription;
  }
}



mojo.internal.Struct(
    CastProviderStateSpec.$,
    'CastProviderState',
    [
      mojo.internal.StructField(
        'sessionState', 0,
        0,
        mojo.internal.Array(CastSessionStateSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class CastProviderState {
  constructor() {
    /** @type { !Array<!CastSessionState> } */
    this.sessionState;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_CreateRoute_ParamsSpec.$,
    'MediaRouteProvider_CreateRoute_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'sinkId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'originalPresentationId', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'origin', 24,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'frameTreeNodeId', 32,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'timeout', 40,
        0,
        mojoBase_mojom_TimeDeltaSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'offTheRecord', 36,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 56],]);



/**
 * @record
 */
export class MediaRouteProvider_CreateRoute_Params {
  constructor() {
    /** @type { !string } */
    this.mediaSource;
    /** @type { !string } */
    this.sinkId;
    /** @type { !string } */
    this.originalPresentationId;
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !number } */
    this.frameTreeNodeId;
    /** @type { !boolean } */
    this.offTheRecord;
    /** @type { !mojoBase_mojom_TimeDelta } */
    this.timeout;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_CreateRoute_ResponseParamsSpec.$,
    'MediaRouteProvider_CreateRoute_ResponseParams',
    [
      mojo.internal.StructField(
        'route', 0,
        0,
        MediaRouteSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'connection', 8,
        0,
        RoutePresentationConnectionSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'errorText', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'resultCode', 24,
        0,
        mediaRouter_mojom_RouteRequestResultCodeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class MediaRouteProvider_CreateRoute_ResponseParams {
  constructor() {
    /** @type { (MediaRoute|undefined) } */
    this.route;
    /** @type { (RoutePresentationConnection|undefined) } */
    this.connection;
    /** @type { (string|undefined) } */
    this.errorText;
    /** @type { !mediaRouter_mojom_RouteRequestResultCode } */
    this.resultCode;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_JoinRoute_ParamsSpec.$,
    'MediaRouteProvider_JoinRoute_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'presentationId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'origin', 16,
        0,
        url_mojom_OriginSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'frameTreeNodeId', 24,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'timeout', 32,
        0,
        mojoBase_mojom_TimeDeltaSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'offTheRecord', 28,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 48],]);



/**
 * @record
 */
export class MediaRouteProvider_JoinRoute_Params {
  constructor() {
    /** @type { !string } */
    this.mediaSource;
    /** @type { !string } */
    this.presentationId;
    /** @type { !url_mojom_Origin } */
    this.origin;
    /** @type { !number } */
    this.frameTreeNodeId;
    /** @type { !boolean } */
    this.offTheRecord;
    /** @type { !mojoBase_mojom_TimeDelta } */
    this.timeout;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_JoinRoute_ResponseParamsSpec.$,
    'MediaRouteProvider_JoinRoute_ResponseParams',
    [
      mojo.internal.StructField(
        'route', 0,
        0,
        MediaRouteSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'connection', 8,
        0,
        RoutePresentationConnectionSpec.$,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'errorText', 16,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'resultCode', 24,
        0,
        mediaRouter_mojom_RouteRequestResultCodeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class MediaRouteProvider_JoinRoute_ResponseParams {
  constructor() {
    /** @type { (MediaRoute|undefined) } */
    this.route;
    /** @type { (RoutePresentationConnection|undefined) } */
    this.connection;
    /** @type { (string|undefined) } */
    this.errorText;
    /** @type { !mediaRouter_mojom_RouteRequestResultCode } */
    this.resultCode;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_TerminateRoute_ParamsSpec.$,
    'MediaRouteProvider_TerminateRoute_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_TerminateRoute_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_TerminateRoute_ResponseParamsSpec.$,
    'MediaRouteProvider_TerminateRoute_ResponseParams',
    [
      mojo.internal.StructField(
        'errorText', 0,
        0,
        mojo.internal.String,
        null,
        true /* nullable */,
        0),
      mojo.internal.StructField(
        'resultCode', 8,
        0,
        mediaRouter_mojom_RouteRequestResultCodeSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouteProvider_TerminateRoute_ResponseParams {
  constructor() {
    /** @type { (string|undefined) } */
    this.errorText;
    /** @type { !mediaRouter_mojom_RouteRequestResultCode } */
    this.resultCode;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_SendRouteMessage_ParamsSpec.$,
    'MediaRouteProvider_SendRouteMessage_Params',
    [
      mojo.internal.StructField(
        'mediaRouteId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'message', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouteProvider_SendRouteMessage_Params {
  constructor() {
    /** @type { !string } */
    this.mediaRouteId;
    /** @type { !string } */
    this.message;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_SendRouteBinaryMessage_ParamsSpec.$,
    'MediaRouteProvider_SendRouteBinaryMessage_Params',
    [
      mojo.internal.StructField(
        'mediaRouteId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'data', 8,
        0,
        mojo.internal.Array(mojo.internal.Uint8, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouteProvider_SendRouteBinaryMessage_Params {
  constructor() {
    /** @type { !string } */
    this.mediaRouteId;
    /** @type { !Array<!number> } */
    this.data;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_StartObservingMediaSinks_ParamsSpec.$,
    'MediaRouteProvider_StartObservingMediaSinks_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_StartObservingMediaSinks_Params {
  constructor() {
    /** @type { !string } */
    this.mediaSource;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_StopObservingMediaSinks_ParamsSpec.$,
    'MediaRouteProvider_StopObservingMediaSinks_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_StopObservingMediaSinks_Params {
  constructor() {
    /** @type { !string } */
    this.mediaSource;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_StartObservingMediaRoutes_ParamsSpec.$,
    'MediaRouteProvider_StartObservingMediaRoutes_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaRouteProvider_StartObservingMediaRoutes_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaRouteProvider_StartListeningForRouteMessages_ParamsSpec.$,
    'MediaRouteProvider_StartListeningForRouteMessages_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_StartListeningForRouteMessages_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_StopListeningForRouteMessages_ParamsSpec.$,
    'MediaRouteProvider_StopListeningForRouteMessages_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_StopListeningForRouteMessages_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_DetachRoute_ParamsSpec.$,
    'MediaRouteProvider_DetachRoute_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_DetachRoute_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_EnableMdnsDiscovery_ParamsSpec.$,
    'MediaRouteProvider_EnableMdnsDiscovery_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaRouteProvider_EnableMdnsDiscovery_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaRouteProvider_UpdateMediaSinks_ParamsSpec.$,
    'MediaRouteProvider_UpdateMediaSinks_Params',
    [
      mojo.internal.StructField(
        'mediaSource', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_UpdateMediaSinks_Params {
  constructor() {
    /** @type { !string } */
    this.mediaSource;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_CreateMediaRouteController_ParamsSpec.$,
    'MediaRouteProvider_CreateMediaRouteController_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaController', 8,
        0,
        mojo.internal.InterfaceRequest(mediaRouter_mojom_MediaControllerPendingReceiver),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'observer', 12,
        0,
        mojo.internal.InterfaceProxy(mediaRouter_mojom_MediaStatusObserverRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class MediaRouteProvider_CreateMediaRouteController_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
    /** @type { !mediaRouter_mojom_MediaControllerPendingReceiver } */
    this.mediaController;
    /** @type { !mediaRouter_mojom_MediaStatusObserverRemote } */
    this.observer;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_CreateMediaRouteController_ResponseParamsSpec.$,
    'MediaRouteProvider_CreateMediaRouteController_ResponseParams',
    [
      mojo.internal.StructField(
        'success', 0,
        0,
        mojo.internal.Bool,
        false,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouteProvider_CreateMediaRouteController_ResponseParams {
  constructor() {
    /** @type { !boolean } */
    this.success;
  }
}



mojo.internal.Struct(
    MediaRouteProvider_GetState_ParamsSpec.$,
    'MediaRouteProvider_GetState_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaRouteProvider_GetState_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaRouteProvider_GetState_ResponseParamsSpec.$,
    'MediaRouteProvider_GetState_ResponseParams',
    [
      mojo.internal.StructField(
        'state', 0,
        0,
        ProviderStateSpec.$,
        null,
        true /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouteProvider_GetState_ResponseParams {
  constructor() {
    /** @type { (ProviderState|undefined) } */
    this.state;
  }
}



mojo.internal.Struct(
    MediaRouter_RegisterMediaRouteProvider_ParamsSpec.$,
    'MediaRouter_RegisterMediaRouteProvider_Params',
    [
      mojo.internal.StructField(
        'providerId', 0,
        0,
        mediaRouter_mojom_MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaRouterProvider', 4,
        0,
        mojo.internal.InterfaceProxy(MediaRouteProviderRemote),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouter_RegisterMediaRouteProvider_Params {
  constructor() {
    /** @type { !mediaRouter_mojom_MediaRouteProviderId } */
    this.providerId;
    /** @type { !MediaRouteProviderRemote } */
    this.mediaRouterProvider;
  }
}



mojo.internal.Struct(
    MediaRouter_OnSinksReceived_ParamsSpec.$,
    'MediaRouter_OnSinksReceived_Params',
    [
      mojo.internal.StructField(
        'providerId', 0,
        0,
        mediaRouter_mojom_MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'mediaSource', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'sinks', 16,
        0,
        mojo.internal.Array(MediaSinkSpec.$, false),
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'origins', 24,
        0,
        mojo.internal.Array(url_mojom_OriginSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 40],]);



/**
 * @record
 */
export class MediaRouter_OnSinksReceived_Params {
  constructor() {
    /** @type { !mediaRouter_mojom_MediaRouteProviderId } */
    this.providerId;
    /** @type { !string } */
    this.mediaSource;
    /** @type { !Array<!MediaSink> } */
    this.sinks;
    /** @type { !Array<!url_mojom_Origin> } */
    this.origins;
  }
}



mojo.internal.Struct(
    MediaRouter_OnIssue_ParamsSpec.$,
    'MediaRouter_OnIssue_Params',
    [
      mojo.internal.StructField(
        'issue', 0,
        0,
        IssueSpec.$,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouter_OnIssue_Params {
  constructor() {
    /** @type { !Issue } */
    this.issue;
  }
}



mojo.internal.Struct(
    MediaRouter_OnRoutesUpdated_ParamsSpec.$,
    'MediaRouter_OnRoutesUpdated_Params',
    [
      mojo.internal.StructField(
        'providerId', 0,
        0,
        mediaRouter_mojom_MediaRouteProviderIdSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'routes', 8,
        0,
        mojo.internal.Array(MediaRouteSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouter_OnRoutesUpdated_Params {
  constructor() {
    /** @type { !mediaRouter_mojom_MediaRouteProviderId } */
    this.providerId;
    /** @type { !Array<!MediaRoute> } */
    this.routes;
  }
}



mojo.internal.Struct(
    MediaRouter_OnPresentationConnectionStateChanged_ParamsSpec.$,
    'MediaRouter_OnPresentationConnectionStateChanged_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'state', 8,
        0,
        blink_mojom_PresentationConnectionStateSpec.$,
        0,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouter_OnPresentationConnectionStateChanged_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
    /** @type { !blink_mojom_PresentationConnectionState } */
    this.state;
  }
}



mojo.internal.Struct(
    MediaRouter_OnPresentationConnectionClosed_ParamsSpec.$,
    'MediaRouter_OnPresentationConnectionClosed_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'reason', 8,
        0,
        blink_mojom_PresentationConnectionCloseReasonSpec.$,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'message', 16,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class MediaRouter_OnPresentationConnectionClosed_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
    /** @type { !blink_mojom_PresentationConnectionCloseReason } */
    this.reason;
    /** @type { !string } */
    this.message;
  }
}



mojo.internal.Struct(
    MediaRouter_OnRouteMessagesReceived_ParamsSpec.$,
    'MediaRouter_OnRouteMessagesReceived_Params',
    [
      mojo.internal.StructField(
        'routeId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'messages', 8,
        0,
        mojo.internal.Array(RouteMessageSpec.$, false),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouter_OnRouteMessagesReceived_Params {
  constructor() {
    /** @type { !string } */
    this.routeId;
    /** @type { !Array<!RouteMessage> } */
    this.messages;
  }
}



mojo.internal.Struct(
    MediaRouter_GetMediaSinkServiceStatus_ParamsSpec.$,
    'MediaRouter_GetMediaSinkServiceStatus_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaRouter_GetMediaSinkServiceStatus_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaRouter_GetMediaSinkServiceStatus_ResponseParamsSpec.$,
    'MediaRouter_GetMediaSinkServiceStatus_ResponseParams',
    [
      mojo.internal.StructField(
        'status', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouter_GetMediaSinkServiceStatus_ResponseParams {
  constructor() {
    /** @type { !string } */
    this.status;
  }
}



mojo.internal.Struct(
    MediaRouter_GetLogger_ParamsSpec.$,
    'MediaRouter_GetLogger_Params',
    [
      mojo.internal.StructField(
        'receiver', 0,
        0,
        mojo.internal.InterfaceRequest(mediaRouter_mojom_LoggerPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouter_GetLogger_Params {
  constructor() {
    /** @type { !mediaRouter_mojom_LoggerPendingReceiver } */
    this.receiver;
  }
}



mojo.internal.Struct(
    MediaRouter_GetLogsAsString_ParamsSpec.$,
    'MediaRouter_GetLogsAsString_Params',
    [
    ],
    [[0, 8],]);



/**
 * @record
 */
export class MediaRouter_GetLogsAsString_Params {
  constructor() {
  }
}



mojo.internal.Struct(
    MediaRouter_GetLogsAsString_ResponseParamsSpec.$,
    'MediaRouter_GetLogsAsString_ResponseParams',
    [
      mojo.internal.StructField(
        'logs', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouter_GetLogsAsString_ResponseParams {
  constructor() {
    /** @type { !string } */
    this.logs;
  }
}



mojo.internal.Struct(
    MediaRouter_GetMirroringServiceHostForTab_ParamsSpec.$,
    'MediaRouter_GetMirroringServiceHostForTab_Params',
    [
      mojo.internal.StructField(
        'frameTreeNodeId', 0,
        0,
        mojo.internal.Int32,
        0,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'receiver', 4,
        0,
        mojo.internal.InterfaceRequest(mirroring_mojom_MirroringServiceHostPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 16],]);



/**
 * @record
 */
export class MediaRouter_GetMirroringServiceHostForTab_Params {
  constructor() {
    /** @type { !number } */
    this.frameTreeNodeId;
    /** @type { !mirroring_mojom_MirroringServiceHostPendingReceiver } */
    this.receiver;
  }
}



mojo.internal.Struct(
    MediaRouter_GetMirroringServiceHostForDesktop_ParamsSpec.$,
    'MediaRouter_GetMirroringServiceHostForDesktop_Params',
    [
      mojo.internal.StructField(
        'desktopStreamId', 0,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'receiver', 8,
        0,
        mojo.internal.InterfaceRequest(mirroring_mojom_MirroringServiceHostPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 24],]);



/**
 * @record
 */
export class MediaRouter_GetMirroringServiceHostForDesktop_Params {
  constructor() {
    /** @type { !string } */
    this.desktopStreamId;
    /** @type { !mirroring_mojom_MirroringServiceHostPendingReceiver } */
    this.receiver;
  }
}



mojo.internal.Struct(
    MediaRouter_GetMirroringServiceHostForOffscreenTab_ParamsSpec.$,
    'MediaRouter_GetMirroringServiceHostForOffscreenTab_Params',
    [
      mojo.internal.StructField(
        'presentationUrl', 0,
        0,
        url_mojom_UrlSpec.$,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'presentationId', 8,
        0,
        mojo.internal.String,
        null,
        false /* nullable */,
        0),
      mojo.internal.StructField(
        'receiver', 16,
        0,
        mojo.internal.InterfaceRequest(mirroring_mojom_MirroringServiceHostPendingReceiver),
        null,
        false /* nullable */,
        0),
    ],
    [[0, 32],]);



/**
 * @record
 */
export class MediaRouter_GetMirroringServiceHostForOffscreenTab_Params {
  constructor() {
    /** @type { !url_mojom_Url } */
    this.presentationUrl;
    /** @type { !string } */
    this.presentationId;
    /** @type { !mirroring_mojom_MirroringServiceHostPendingReceiver } */
    this.receiver;
  }
}

mojo.internal.Union(
    MediaSinkExtraDataSpec.$, 'MediaSinkExtraData',
    {
      'dialMediaSink': {
        'ordinal': 0,
        'type': DialMediaSinkSpec.$,
      },
      'castMediaSink': {
        'ordinal': 1,
        'type': CastMediaSinkSpec.$,
      },
    });

/**
 * @typedef { {
 *   dialMediaSink: (!DialMediaSink|undefined),
 *   castMediaSink: (!CastMediaSink|undefined),
 * } }
 */
export const MediaSinkExtraData = {};
mojo.internal.Union(
    ProviderStateSpec.$, 'ProviderState',
    {
      'castProviderState': {
        'ordinal': 0,
        'type': CastProviderStateSpec.$,
      },
    });

/**
 * @typedef { {
 *   castProviderState: (!CastProviderState|undefined),
 * } }
 */
export const ProviderState = {};
