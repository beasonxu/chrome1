// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: annotations.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_annotations_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_annotations_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "math.pb.h"
#include "dom.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_annotations_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_annotations_2eproto {
  static const uint32_t offsets[];
};
namespace userfeedback {
class Annotation;
struct AnnotationDefaultTypeInternal;
extern AnnotationDefaultTypeInternal _Annotation_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::Annotation* Arena::CreateMaybeMessage<::userfeedback::Annotation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class Annotation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Annotation) */ {
 public:
  inline Annotation() : Annotation(nullptr) {}
  ~Annotation() override;
  explicit PROTOBUF_CONSTEXPR Annotation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Annotation(const Annotation& from);
  Annotation(Annotation&& from) noexcept
    : Annotation() {
    *this = ::std::move(from);
  }

  inline Annotation& operator=(const Annotation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Annotation& operator=(Annotation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Annotation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Annotation* internal_default_instance() {
    return reinterpret_cast<const Annotation*>(
               &_Annotation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Annotation& a, Annotation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Annotation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Annotation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Annotation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Annotation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Annotation& from);
  void MergeFrom(const Annotation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Annotation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.Annotation";
  }
  protected:
  explicit Annotation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnippetFieldNumber = 2,
    kRectangleFieldNumber = 1,
    kAnnotatedElementPathFieldNumber = 3,
  };
  // optional string snippet = 2;
  bool has_snippet() const;
  private:
  bool _internal_has_snippet() const;
  public:
  void clear_snippet();
  const std::string& snippet() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snippet(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snippet();
  PROTOBUF_NODISCARD std::string* release_snippet();
  void set_allocated_snippet(std::string* snippet);
  private:
  const std::string& _internal_snippet() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snippet(const std::string& value);
  std::string* _internal_mutable_snippet();
  public:

  // required .userfeedback.Rectangle rectangle = 1;
  bool has_rectangle() const;
  private:
  bool _internal_has_rectangle() const;
  public:
  void clear_rectangle();
  const ::userfeedback::Rectangle& rectangle() const;
  PROTOBUF_NODISCARD ::userfeedback::Rectangle* release_rectangle();
  ::userfeedback::Rectangle* mutable_rectangle();
  void set_allocated_rectangle(::userfeedback::Rectangle* rectangle);
  private:
  const ::userfeedback::Rectangle& _internal_rectangle() const;
  ::userfeedback::Rectangle* _internal_mutable_rectangle();
  public:
  void unsafe_arena_set_allocated_rectangle(
      ::userfeedback::Rectangle* rectangle);
  ::userfeedback::Rectangle* unsafe_arena_release_rectangle();

  // optional .userfeedback.HtmlPath annotatedElementPath = 3;
  bool has_annotatedelementpath() const;
  private:
  bool _internal_has_annotatedelementpath() const;
  public:
  void clear_annotatedelementpath();
  const ::userfeedback::HtmlPath& annotatedelementpath() const;
  PROTOBUF_NODISCARD ::userfeedback::HtmlPath* release_annotatedelementpath();
  ::userfeedback::HtmlPath* mutable_annotatedelementpath();
  void set_allocated_annotatedelementpath(::userfeedback::HtmlPath* annotatedelementpath);
  private:
  const ::userfeedback::HtmlPath& _internal_annotatedelementpath() const;
  ::userfeedback::HtmlPath* _internal_mutable_annotatedelementpath();
  public:
  void unsafe_arena_set_allocated_annotatedelementpath(
      ::userfeedback::HtmlPath* annotatedelementpath);
  ::userfeedback::HtmlPath* unsafe_arena_release_annotatedelementpath();

  // @@protoc_insertion_point(class_scope:userfeedback.Annotation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snippet_;
  ::userfeedback::Rectangle* rectangle_;
  ::userfeedback::HtmlPath* annotatedelementpath_;
  friend struct ::TableStruct_annotations_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Annotation

// required .userfeedback.Rectangle rectangle = 1;
inline bool Annotation::_internal_has_rectangle() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || rectangle_ != nullptr);
  return value;
}
inline bool Annotation::has_rectangle() const {
  return _internal_has_rectangle();
}
inline const ::userfeedback::Rectangle& Annotation::_internal_rectangle() const {
  const ::userfeedback::Rectangle* p = rectangle_;
  return p != nullptr ? *p : reinterpret_cast<const ::userfeedback::Rectangle&>(
      ::userfeedback::_Rectangle_default_instance_);
}
inline const ::userfeedback::Rectangle& Annotation::rectangle() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.rectangle)
  return _internal_rectangle();
}
inline void Annotation::unsafe_arena_set_allocated_rectangle(
    ::userfeedback::Rectangle* rectangle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rectangle_);
  }
  rectangle_ = rectangle;
  if (rectangle) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userfeedback.Annotation.rectangle)
}
inline ::userfeedback::Rectangle* Annotation::release_rectangle() {
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::Rectangle* temp = rectangle_;
  rectangle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::userfeedback::Rectangle* Annotation::unsafe_arena_release_rectangle() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.rectangle)
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::Rectangle* temp = rectangle_;
  rectangle_ = nullptr;
  return temp;
}
inline ::userfeedback::Rectangle* Annotation::_internal_mutable_rectangle() {
  _has_bits_[0] |= 0x00000002u;
  if (rectangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::Rectangle>(GetArenaForAllocation());
    rectangle_ = p;
  }
  return rectangle_;
}
inline ::userfeedback::Rectangle* Annotation::mutable_rectangle() {
  ::userfeedback::Rectangle* _msg = _internal_mutable_rectangle();
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.rectangle)
  return _msg;
}
inline void Annotation::set_allocated_rectangle(::userfeedback::Rectangle* rectangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rectangle_);
  }
  if (rectangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rectangle));
    if (message_arena != submessage_arena) {
      rectangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.rectangle)
}

// optional string snippet = 2;
inline bool Annotation::_internal_has_snippet() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Annotation::has_snippet() const {
  return _internal_has_snippet();
}
inline void Annotation::clear_snippet() {
  snippet_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Annotation::snippet() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.snippet)
  return _internal_snippet();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Annotation::set_snippet(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 snippet_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Annotation.snippet)
}
inline std::string* Annotation::mutable_snippet() {
  std::string* _s = _internal_mutable_snippet();
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.snippet)
  return _s;
}
inline const std::string& Annotation::_internal_snippet() const {
  return snippet_.Get();
}
inline void Annotation::_internal_set_snippet(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  snippet_.Set(value, GetArenaForAllocation());
}
inline std::string* Annotation::_internal_mutable_snippet() {
  _has_bits_[0] |= 0x00000001u;
  return snippet_.Mutable(GetArenaForAllocation());
}
inline std::string* Annotation::release_snippet() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.snippet)
  if (!_internal_has_snippet()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = snippet_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (snippet_.IsDefault()) {
    snippet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Annotation::set_allocated_snippet(std::string* snippet) {
  if (snippet != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  snippet_.SetAllocated(snippet, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (snippet_.IsDefault()) {
    snippet_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.snippet)
}

// optional .userfeedback.HtmlPath annotatedElementPath = 3;
inline bool Annotation::_internal_has_annotatedelementpath() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || annotatedelementpath_ != nullptr);
  return value;
}
inline bool Annotation::has_annotatedelementpath() const {
  return _internal_has_annotatedelementpath();
}
inline const ::userfeedback::HtmlPath& Annotation::_internal_annotatedelementpath() const {
  const ::userfeedback::HtmlPath* p = annotatedelementpath_;
  return p != nullptr ? *p : reinterpret_cast<const ::userfeedback::HtmlPath&>(
      ::userfeedback::_HtmlPath_default_instance_);
}
inline const ::userfeedback::HtmlPath& Annotation::annotatedelementpath() const {
  // @@protoc_insertion_point(field_get:userfeedback.Annotation.annotatedElementPath)
  return _internal_annotatedelementpath();
}
inline void Annotation::unsafe_arena_set_allocated_annotatedelementpath(
    ::userfeedback::HtmlPath* annotatedelementpath) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotatedelementpath_);
  }
  annotatedelementpath_ = annotatedelementpath;
  if (annotatedelementpath) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userfeedback.Annotation.annotatedElementPath)
}
inline ::userfeedback::HtmlPath* Annotation::release_annotatedelementpath() {
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::HtmlPath* temp = annotatedelementpath_;
  annotatedelementpath_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::userfeedback::HtmlPath* Annotation::unsafe_arena_release_annotatedelementpath() {
  // @@protoc_insertion_point(field_release:userfeedback.Annotation.annotatedElementPath)
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::HtmlPath* temp = annotatedelementpath_;
  annotatedelementpath_ = nullptr;
  return temp;
}
inline ::userfeedback::HtmlPath* Annotation::_internal_mutable_annotatedelementpath() {
  _has_bits_[0] |= 0x00000004u;
  if (annotatedelementpath_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::HtmlPath>(GetArenaForAllocation());
    annotatedelementpath_ = p;
  }
  return annotatedelementpath_;
}
inline ::userfeedback::HtmlPath* Annotation::mutable_annotatedelementpath() {
  ::userfeedback::HtmlPath* _msg = _internal_mutable_annotatedelementpath();
  // @@protoc_insertion_point(field_mutable:userfeedback.Annotation.annotatedElementPath)
  return _msg;
}
inline void Annotation::set_allocated_annotatedelementpath(::userfeedback::HtmlPath* annotatedelementpath) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotatedelementpath_);
  }
  if (annotatedelementpath) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(annotatedelementpath));
    if (message_arena != submessage_arena) {
      annotatedelementpath = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, annotatedelementpath, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  annotatedelementpath_ = annotatedelementpath;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Annotation.annotatedElementPath)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_annotations_2eproto
