// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dom.proto

#include "dom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace userfeedback {
PROTOBUF_CONSTEXPR HtmlDocument::HtmlDocument(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , document_element_(nullptr){}
struct HtmlDocumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HtmlDocumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HtmlDocumentDefaultTypeInternal() {}
  union {
    HtmlDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HtmlDocumentDefaultTypeInternal _HtmlDocument_default_instance_;
PROTOBUF_CONSTEXPR HtmlElement::HtmlElement(
    ::_pbi::ConstantInitialized)
  : child_element_()
  , tag_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , class_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_content_document_(nullptr){}
struct HtmlElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HtmlElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HtmlElementDefaultTypeInternal() {}
  union {
    HtmlElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HtmlElementDefaultTypeInternal _HtmlElement_default_instance_;
PROTOBUF_CONSTEXPR Navigator::Navigator(
    ::_pbi::ConstantInitialized)
  : plugin_name_()
  , app_code_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , app_minor_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cpu_class_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , platform_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , browser_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , system_language_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_agent_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , cookie_enabled_(false)
  , on_line_(false)
  , java_enabled_(false)
  , taint_enabled_(false){}
struct NavigatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NavigatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NavigatorDefaultTypeInternal() {}
  union {
    Navigator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NavigatorDefaultTypeInternal _Navigator_default_instance_;
PROTOBUF_CONSTEXPR HtmlPath::HtmlPath(
    ::_pbi::ConstantInitialized)
  : index_(){}
struct HtmlPathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HtmlPathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HtmlPathDefaultTypeInternal() {}
  union {
    HtmlPath _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HtmlPathDefaultTypeInternal _HtmlPath_default_instance_;
}  // namespace userfeedback
namespace userfeedback {

// ===================================================================

class HtmlDocument::_Internal {
 public:
  using HasBits = decltype(std::declval<HtmlDocument>()._has_bits_);
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_title(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::userfeedback::HtmlElement& document_element(const HtmlDocument* msg);
  static void set_has_document_element(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::userfeedback::HtmlElement&
HtmlDocument::_Internal::document_element(const HtmlDocument* msg) {
  return *msg->document_element_;
}
HtmlDocument::HtmlDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.HtmlDocument)
}
HtmlDocument::HtmlDocument(const HtmlDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_title()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document_element()) {
    document_element_ = new ::userfeedback::HtmlElement(*from.document_element_);
  } else {
    document_element_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.HtmlDocument)
}

inline void HtmlDocument::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
document_element_ = nullptr;
}

HtmlDocument::~HtmlDocument() {
  // @@protoc_insertion_point(destructor:userfeedback.HtmlDocument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HtmlDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  title_.Destroy();
  if (this != internal_default_instance()) delete document_element_;
}

void HtmlDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HtmlDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.HtmlDocument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(document_element_ != nullptr);
      document_element_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HtmlDocument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string url = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.HtmlElement document_element = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_document_element(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HtmlDocument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.HtmlDocument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string url = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // optional .userfeedback.HtmlElement document_element = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::document_element(this),
        _Internal::document_element(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.HtmlDocument)
  return target;
}

size_t HtmlDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.HtmlDocument)
  size_t total_size = 0;

  // required string url = 1;
  if (_internal_has_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_title());
    }

    // optional .userfeedback.HtmlElement document_element = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *document_element_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HtmlDocument::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HtmlDocument*>(
      &from));
}

void HtmlDocument::MergeFrom(const HtmlDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.HtmlDocument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_title(from._internal_title());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_document_element()->::userfeedback::HtmlElement::MergeFrom(from._internal_document_element());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HtmlDocument::CopyFrom(const HtmlDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.HtmlDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlDocument::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_document_element()) {
    if (!document_element_->IsInitialized()) return false;
  }
  return true;
}

void HtmlDocument::InternalSwap(HtmlDocument* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  swap(document_element_, other->document_element_);
}

std::string HtmlDocument::GetTypeName() const {
  return "userfeedback.HtmlDocument";
}


// ===================================================================

class HtmlElement::_Internal {
 public:
  using HasBits = decltype(std::declval<HtmlElement>()._has_bits_);
  static void set_has_tag_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_class_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userfeedback::HtmlDocument& frame_content_document(const HtmlElement* msg);
  static void set_has_frame_content_document(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::userfeedback::HtmlDocument&
HtmlElement::_Internal::frame_content_document(const HtmlElement* msg) {
  return *msg->frame_content_document_;
}
HtmlElement::HtmlElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  child_element_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.HtmlElement)
}
HtmlElement::HtmlElement(const HtmlElement& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      child_element_(from.child_element_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  tag_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_tag_name()) {
    tag_name_.Set(from._internal_tag_name(), 
      GetArenaForAllocation());
  }
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_id()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_class_name()) {
    class_name_.Set(from._internal_class_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_frame_content_document()) {
    frame_content_document_ = new ::userfeedback::HtmlDocument(*from.frame_content_document_);
  } else {
    frame_content_document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.HtmlElement)
}

inline void HtmlElement::SharedCtor() {
tag_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
class_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  class_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
frame_content_document_ = nullptr;
}

HtmlElement::~HtmlElement() {
  // @@protoc_insertion_point(destructor:userfeedback.HtmlElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HtmlElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_name_.Destroy();
  id_.Destroy();
  class_name_.Destroy();
  if (this != internal_default_instance()) delete frame_content_document_;
}

void HtmlElement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HtmlElement::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.HtmlElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  child_element_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      tag_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      class_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(frame_content_document_ != nullptr);
      frame_content_document_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HtmlElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string tag_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .userfeedback.HtmlElement child_element = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_child_element(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.HtmlDocument frame_content_document = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_frame_content_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HtmlElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.HtmlElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tag_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag_name(), target);
  }

  // optional string id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // optional string class_name = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_class_name(), target);
  }

  // repeated .userfeedback.HtmlElement child_element = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_child_element_size()); i < n; i++) {
    const auto& repfield = this->_internal_child_element(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .userfeedback.HtmlDocument frame_content_document = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::frame_content_document(this),
        _Internal::frame_content_document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.HtmlElement)
  return target;
}

size_t HtmlElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.HtmlElement)
  size_t total_size = 0;

  // required string tag_name = 1;
  if (_internal_has_tag_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userfeedback.HtmlElement child_element = 4;
  total_size += 1UL * this->_internal_child_element_size();
  for (const auto& msg : this->child_element_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_id());
    }

    // optional string class_name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_class_name());
    }

    // optional .userfeedback.HtmlDocument frame_content_document = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *frame_content_document_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HtmlElement::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HtmlElement*>(
      &from));
}

void HtmlElement::MergeFrom(const HtmlElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.HtmlElement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  child_element_.MergeFrom(from.child_element_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tag_name(from._internal_tag_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_class_name(from._internal_class_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_frame_content_document()->::userfeedback::HtmlDocument::MergeFrom(from._internal_frame_content_document());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HtmlElement::CopyFrom(const HtmlElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.HtmlElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlElement::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(child_element_))
    return false;
  if (_internal_has_frame_content_document()) {
    if (!frame_content_document_->IsInitialized()) return false;
  }
  return true;
}

void HtmlElement::InternalSwap(HtmlElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  child_element_.InternalSwap(&other->child_element_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &tag_name_, lhs_arena,
      &other->tag_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &class_name_, lhs_arena,
      &other->class_name_, rhs_arena
  );
  swap(frame_content_document_, other->frame_content_document_);
}

std::string HtmlElement::GetTypeName() const {
  return "userfeedback.HtmlElement";
}


// ===================================================================

class Navigator::_Internal {
 public:
  using HasBits = decltype(std::declval<Navigator>()._has_bits_);
  static void set_has_app_code_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_app_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_app_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_app_minor_version(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cookie_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_cpu_class(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_on_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_platform(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_browser_language(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_system_language(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_user_agent(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_java_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_taint_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
};

Navigator::Navigator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  plugin_name_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.Navigator)
}
Navigator::Navigator(const Navigator& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      plugin_name_(from.plugin_name_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  app_code_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_code_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_code_name()) {
    app_code_name_.Set(from._internal_app_code_name(), 
      GetArenaForAllocation());
  }
  app_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_name()) {
    app_name_.Set(from._internal_app_name(), 
      GetArenaForAllocation());
  }
  app_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_version()) {
    app_version_.Set(from._internal_app_version(), 
      GetArenaForAllocation());
  }
  app_minor_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_minor_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_app_minor_version()) {
    app_minor_version_.Set(from._internal_app_minor_version(), 
      GetArenaForAllocation());
  }
  cpu_class_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cpu_class_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cpu_class()) {
    cpu_class_.Set(from._internal_cpu_class(), 
      GetArenaForAllocation());
  }
  platform_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    platform_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_platform()) {
    platform_.Set(from._internal_platform(), 
      GetArenaForAllocation());
  }
  browser_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    browser_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_browser_language()) {
    browser_language_.Set(from._internal_browser_language(), 
      GetArenaForAllocation());
  }
  system_language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    system_language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_system_language()) {
    system_language_.Set(from._internal_system_language(), 
      GetArenaForAllocation());
  }
  user_agent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_agent_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_agent()) {
    user_agent_.Set(from._internal_user_agent(), 
      GetArenaForAllocation());
  }
  ::memcpy(&cookie_enabled_, &from.cookie_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&taint_enabled_) -
    reinterpret_cast<char*>(&cookie_enabled_)) + sizeof(taint_enabled_));
  // @@protoc_insertion_point(copy_constructor:userfeedback.Navigator)
}

inline void Navigator::SharedCtor() {
app_code_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_code_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_minor_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_minor_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cpu_class_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cpu_class_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
platform_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  platform_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
browser_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  browser_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
system_language_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  system_language_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_agent_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_agent_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cookie_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&taint_enabled_) -
    reinterpret_cast<char*>(&cookie_enabled_)) + sizeof(taint_enabled_));
}

Navigator::~Navigator() {
  // @@protoc_insertion_point(destructor:userfeedback.Navigator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Navigator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_code_name_.Destroy();
  app_name_.Destroy();
  app_version_.Destroy();
  app_minor_version_.Destroy();
  cpu_class_.Destroy();
  platform_.Destroy();
  browser_language_.Destroy();
  system_language_.Destroy();
  user_agent_.Destroy();
}

void Navigator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Navigator::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.Navigator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      app_code_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      app_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      app_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      app_minor_version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      cpu_class_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      platform_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      browser_language_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      system_language_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    user_agent_.ClearNonDefaultToEmpty();
  }
  ::memset(&cookie_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&taint_enabled_) -
      reinterpret_cast<char*>(&cookie_enabled_)) + sizeof(taint_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Navigator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string app_code_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_code_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_app_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string app_minor_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_app_minor_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool cookie_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cookie_enabled(&has_bits);
          cookie_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string cpu_class = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cpu_class();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool on_line = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_on_line(&has_bits);
          on_line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string platform = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_platform();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string browser_language = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_browser_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string system_language = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_system_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_agent = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_user_agent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool java_enabled = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_java_enabled(&has_bits);
          java_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool taint_enabled = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_taint_enabled(&has_bits);
          taint_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string plugin_name = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_plugin_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Navigator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.Navigator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string app_code_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_code_name(), target);
  }

  // optional string app_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_name(), target);
  }

  // optional string app_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_app_version(), target);
  }

  // optional string app_minor_version = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_app_minor_version(), target);
  }

  // optional bool cookie_enabled = 5;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_cookie_enabled(), target);
  }

  // optional string cpu_class = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cpu_class(), target);
  }

  // optional bool on_line = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_on_line(), target);
  }

  // optional string platform = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_platform(), target);
  }

  // optional string browser_language = 9;
  if (cached_has_bits & 0x00000040u) {
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_browser_language(), target);
  }

  // optional string system_language = 10;
  if (cached_has_bits & 0x00000080u) {
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_system_language(), target);
  }

  // optional string user_agent = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_user_agent(), target);
  }

  // optional bool java_enabled = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_java_enabled(), target);
  }

  // optional bool taint_enabled = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_taint_enabled(), target);
  }

  // repeated string plugin_name = 14;
  for (int i = 0, n = this->_internal_plugin_name_size(); i < n; i++) {
    const auto& s = this->_internal_plugin_name(i);
    target = stream->WriteString(14, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.Navigator)
  return target;
}

size_t Navigator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.Navigator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string plugin_name = 14;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(plugin_name_.size());
  for (int i = 0, n = plugin_name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      plugin_name_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string app_code_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_code_name());
    }

    // optional string app_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_name());
    }

    // optional string app_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_version());
    }

    // optional string app_minor_version = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_app_minor_version());
    }

    // optional string cpu_class = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_cpu_class());
    }

    // optional string platform = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_platform());
    }

    // optional string browser_language = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_browser_language());
    }

    // optional string system_language = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_system_language());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional string user_agent = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_agent());
    }

    // optional bool cookie_enabled = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 1;
    }

    // optional bool on_line = 7;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool java_enabled = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool taint_enabled = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Navigator::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Navigator*>(
      &from));
}

void Navigator::MergeFrom(const Navigator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.Navigator)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  plugin_name_.MergeFrom(from.plugin_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_app_code_name(from._internal_app_code_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_app_name(from._internal_app_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_app_version(from._internal_app_version());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_app_minor_version(from._internal_app_minor_version());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_cpu_class(from._internal_cpu_class());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_platform(from._internal_platform());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_browser_language(from._internal_browser_language());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_system_language(from._internal_system_language());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_user_agent(from._internal_user_agent());
    }
    if (cached_has_bits & 0x00000200u) {
      cookie_enabled_ = from.cookie_enabled_;
    }
    if (cached_has_bits & 0x00000400u) {
      on_line_ = from.on_line_;
    }
    if (cached_has_bits & 0x00000800u) {
      java_enabled_ = from.java_enabled_;
    }
    if (cached_has_bits & 0x00001000u) {
      taint_enabled_ = from.taint_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Navigator::CopyFrom(const Navigator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.Navigator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Navigator::IsInitialized() const {
  return true;
}

void Navigator::InternalSwap(Navigator* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  plugin_name_.InternalSwap(&other->plugin_name_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_code_name_, lhs_arena,
      &other->app_code_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_name_, lhs_arena,
      &other->app_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_version_, lhs_arena,
      &other->app_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &app_minor_version_, lhs_arena,
      &other->app_minor_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &cpu_class_, lhs_arena,
      &other->cpu_class_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &platform_, lhs_arena,
      &other->platform_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &browser_language_, lhs_arena,
      &other->browser_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &system_language_, lhs_arena,
      &other->system_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_agent_, lhs_arena,
      &other->user_agent_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Navigator, taint_enabled_)
      + sizeof(Navigator::taint_enabled_)
      - PROTOBUF_FIELD_OFFSET(Navigator, cookie_enabled_)>(
          reinterpret_cast<char*>(&cookie_enabled_),
          reinterpret_cast<char*>(&other->cookie_enabled_));
}

std::string Navigator::GetTypeName() const {
  return "userfeedback.Navigator";
}


// ===================================================================

class HtmlPath::_Internal {
 public:
};

HtmlPath::HtmlPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  index_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.HtmlPath)
}
HtmlPath::HtmlPath(const HtmlPath& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      index_(from.index_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:userfeedback.HtmlPath)
}

inline void HtmlPath::SharedCtor() {
}

HtmlPath::~HtmlPath() {
  // @@protoc_insertion_point(destructor:userfeedback.HtmlPath)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HtmlPath::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HtmlPath::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HtmlPath::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.HtmlPath)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  index_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HtmlPath::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_index(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HtmlPath::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.HtmlPath)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 index = 1;
  for (int i = 0, n = this->_internal_index_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.HtmlPath)
  return target;
}

size_t HtmlPath::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.HtmlPath)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 index = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->index_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_index_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HtmlPath::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HtmlPath*>(
      &from));
}

void HtmlPath::MergeFrom(const HtmlPath& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.HtmlPath)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  index_.MergeFrom(from.index_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HtmlPath::CopyFrom(const HtmlPath& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.HtmlPath)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HtmlPath::IsInitialized() const {
  return true;
}

void HtmlPath::InternalSwap(HtmlPath* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  index_.InternalSwap(&other->index_);
}

std::string HtmlPath::GetTypeName() const {
  return "userfeedback.HtmlPath";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userfeedback::HtmlDocument*
Arena::CreateMaybeMessage< ::userfeedback::HtmlDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::HtmlDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::HtmlElement*
Arena::CreateMaybeMessage< ::userfeedback::HtmlElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::HtmlElement >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::Navigator*
Arena::CreateMaybeMessage< ::userfeedback::Navigator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::Navigator >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::HtmlPath*
Arena::CreateMaybeMessage< ::userfeedback::HtmlPath >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::HtmlPath >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
