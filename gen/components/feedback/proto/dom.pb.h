// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dom_2eproto {
  static const uint32_t offsets[];
};
namespace userfeedback {
class HtmlDocument;
struct HtmlDocumentDefaultTypeInternal;
extern HtmlDocumentDefaultTypeInternal _HtmlDocument_default_instance_;
class HtmlElement;
struct HtmlElementDefaultTypeInternal;
extern HtmlElementDefaultTypeInternal _HtmlElement_default_instance_;
class HtmlPath;
struct HtmlPathDefaultTypeInternal;
extern HtmlPathDefaultTypeInternal _HtmlPath_default_instance_;
class Navigator;
struct NavigatorDefaultTypeInternal;
extern NavigatorDefaultTypeInternal _Navigator_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::HtmlDocument* Arena::CreateMaybeMessage<::userfeedback::HtmlDocument>(Arena*);
template<> ::userfeedback::HtmlElement* Arena::CreateMaybeMessage<::userfeedback::HtmlElement>(Arena*);
template<> ::userfeedback::HtmlPath* Arena::CreateMaybeMessage<::userfeedback::HtmlPath>(Arena*);
template<> ::userfeedback::Navigator* Arena::CreateMaybeMessage<::userfeedback::Navigator>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

// ===================================================================

class HtmlDocument final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.HtmlDocument) */ {
 public:
  inline HtmlDocument() : HtmlDocument(nullptr) {}
  ~HtmlDocument() override;
  explicit PROTOBUF_CONSTEXPR HtmlDocument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HtmlDocument(const HtmlDocument& from);
  HtmlDocument(HtmlDocument&& from) noexcept
    : HtmlDocument() {
    *this = ::std::move(from);
  }

  inline HtmlDocument& operator=(const HtmlDocument& from) {
    CopyFrom(from);
    return *this;
  }
  inline HtmlDocument& operator=(HtmlDocument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HtmlDocument& default_instance() {
    return *internal_default_instance();
  }
  static inline const HtmlDocument* internal_default_instance() {
    return reinterpret_cast<const HtmlDocument*>(
               &_HtmlDocument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HtmlDocument& a, HtmlDocument& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HtmlDocument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HtmlDocument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HtmlDocument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HtmlDocument>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HtmlDocument& from);
  void MergeFrom(const HtmlDocument& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HtmlDocument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.HtmlDocument";
  }
  protected:
  explicit HtmlDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDocumentElementFieldNumber = 3,
  };
  // required string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // optional string title = 2;
  bool has_title() const;
  private:
  bool _internal_has_title() const;
  public:
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // optional .userfeedback.HtmlElement document_element = 3;
  bool has_document_element() const;
  private:
  bool _internal_has_document_element() const;
  public:
  void clear_document_element();
  const ::userfeedback::HtmlElement& document_element() const;
  PROTOBUF_NODISCARD ::userfeedback::HtmlElement* release_document_element();
  ::userfeedback::HtmlElement* mutable_document_element();
  void set_allocated_document_element(::userfeedback::HtmlElement* document_element);
  private:
  const ::userfeedback::HtmlElement& _internal_document_element() const;
  ::userfeedback::HtmlElement* _internal_mutable_document_element();
  public:
  void unsafe_arena_set_allocated_document_element(
      ::userfeedback::HtmlElement* document_element);
  ::userfeedback::HtmlElement* unsafe_arena_release_document_element();

  // @@protoc_insertion_point(class_scope:userfeedback.HtmlDocument)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::userfeedback::HtmlElement* document_element_;
  friend struct ::TableStruct_dom_2eproto;
};
// -------------------------------------------------------------------

class HtmlElement final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.HtmlElement) */ {
 public:
  inline HtmlElement() : HtmlElement(nullptr) {}
  ~HtmlElement() override;
  explicit PROTOBUF_CONSTEXPR HtmlElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HtmlElement(const HtmlElement& from);
  HtmlElement(HtmlElement&& from) noexcept
    : HtmlElement() {
    *this = ::std::move(from);
  }

  inline HtmlElement& operator=(const HtmlElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline HtmlElement& operator=(HtmlElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HtmlElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const HtmlElement* internal_default_instance() {
    return reinterpret_cast<const HtmlElement*>(
               &_HtmlElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HtmlElement& a, HtmlElement& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HtmlElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HtmlElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HtmlElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HtmlElement>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HtmlElement& from);
  void MergeFrom(const HtmlElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HtmlElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.HtmlElement";
  }
  protected:
  explicit HtmlElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildElementFieldNumber = 4,
    kTagNameFieldNumber = 1,
    kIdFieldNumber = 2,
    kClassNameFieldNumber = 3,
    kFrameContentDocumentFieldNumber = 5,
  };
  // repeated .userfeedback.HtmlElement child_element = 4;
  int child_element_size() const;
  private:
  int _internal_child_element_size() const;
  public:
  void clear_child_element();
  ::userfeedback::HtmlElement* mutable_child_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::HtmlElement >*
      mutable_child_element();
  private:
  const ::userfeedback::HtmlElement& _internal_child_element(int index) const;
  ::userfeedback::HtmlElement* _internal_add_child_element();
  public:
  const ::userfeedback::HtmlElement& child_element(int index) const;
  ::userfeedback::HtmlElement* add_child_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::HtmlElement >&
      child_element() const;

  // required string tag_name = 1;
  bool has_tag_name() const;
  private:
  bool _internal_has_tag_name() const;
  public:
  void clear_tag_name();
  const std::string& tag_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tag_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tag_name();
  PROTOBUF_NODISCARD std::string* release_tag_name();
  void set_allocated_tag_name(std::string* tag_name);
  private:
  const std::string& _internal_tag_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag_name(const std::string& value);
  std::string* _internal_mutable_tag_name();
  public:

  // optional string id = 2;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // optional string class_name = 3;
  bool has_class_name() const;
  private:
  bool _internal_has_class_name() const;
  public:
  void clear_class_name();
  const std::string& class_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_name();
  PROTOBUF_NODISCARD std::string* release_class_name();
  void set_allocated_class_name(std::string* class_name);
  private:
  const std::string& _internal_class_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_name(const std::string& value);
  std::string* _internal_mutable_class_name();
  public:

  // optional .userfeedback.HtmlDocument frame_content_document = 5;
  bool has_frame_content_document() const;
  private:
  bool _internal_has_frame_content_document() const;
  public:
  void clear_frame_content_document();
  const ::userfeedback::HtmlDocument& frame_content_document() const;
  PROTOBUF_NODISCARD ::userfeedback::HtmlDocument* release_frame_content_document();
  ::userfeedback::HtmlDocument* mutable_frame_content_document();
  void set_allocated_frame_content_document(::userfeedback::HtmlDocument* frame_content_document);
  private:
  const ::userfeedback::HtmlDocument& _internal_frame_content_document() const;
  ::userfeedback::HtmlDocument* _internal_mutable_frame_content_document();
  public:
  void unsafe_arena_set_allocated_frame_content_document(
      ::userfeedback::HtmlDocument* frame_content_document);
  ::userfeedback::HtmlDocument* unsafe_arena_release_frame_content_document();

  // @@protoc_insertion_point(class_scope:userfeedback.HtmlElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::HtmlElement > child_element_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_name_;
  ::userfeedback::HtmlDocument* frame_content_document_;
  friend struct ::TableStruct_dom_2eproto;
};
// -------------------------------------------------------------------

class Navigator final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.Navigator) */ {
 public:
  inline Navigator() : Navigator(nullptr) {}
  ~Navigator() override;
  explicit PROTOBUF_CONSTEXPR Navigator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Navigator(const Navigator& from);
  Navigator(Navigator&& from) noexcept
    : Navigator() {
    *this = ::std::move(from);
  }

  inline Navigator& operator=(const Navigator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Navigator& operator=(Navigator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Navigator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Navigator* internal_default_instance() {
    return reinterpret_cast<const Navigator*>(
               &_Navigator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Navigator& a, Navigator& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Navigator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Navigator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Navigator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Navigator>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Navigator& from);
  void MergeFrom(const Navigator& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Navigator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.Navigator";
  }
  protected:
  explicit Navigator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPluginNameFieldNumber = 14,
    kAppCodeNameFieldNumber = 1,
    kAppNameFieldNumber = 2,
    kAppVersionFieldNumber = 3,
    kAppMinorVersionFieldNumber = 4,
    kCpuClassFieldNumber = 6,
    kPlatformFieldNumber = 8,
    kBrowserLanguageFieldNumber = 9,
    kSystemLanguageFieldNumber = 10,
    kUserAgentFieldNumber = 11,
    kCookieEnabledFieldNumber = 5,
    kOnLineFieldNumber = 7,
    kJavaEnabledFieldNumber = 12,
    kTaintEnabledFieldNumber = 13,
  };
  // repeated string plugin_name = 14;
  int plugin_name_size() const;
  private:
  int _internal_plugin_name_size() const;
  public:
  void clear_plugin_name();
  const std::string& plugin_name(int index) const;
  std::string* mutable_plugin_name(int index);
  void set_plugin_name(int index, const std::string& value);
  void set_plugin_name(int index, std::string&& value);
  void set_plugin_name(int index, const char* value);
  void set_plugin_name(int index, const char* value, size_t size);
  std::string* add_plugin_name();
  void add_plugin_name(const std::string& value);
  void add_plugin_name(std::string&& value);
  void add_plugin_name(const char* value);
  void add_plugin_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& plugin_name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_plugin_name();
  private:
  const std::string& _internal_plugin_name(int index) const;
  std::string* _internal_add_plugin_name();
  public:

  // optional string app_code_name = 1;
  bool has_app_code_name() const;
  private:
  bool _internal_has_app_code_name() const;
  public:
  void clear_app_code_name();
  const std::string& app_code_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_code_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_code_name();
  PROTOBUF_NODISCARD std::string* release_app_code_name();
  void set_allocated_app_code_name(std::string* app_code_name);
  private:
  const std::string& _internal_app_code_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_code_name(const std::string& value);
  std::string* _internal_mutable_app_code_name();
  public:

  // optional string app_name = 2;
  bool has_app_name() const;
  private:
  bool _internal_has_app_name() const;
  public:
  void clear_app_name();
  const std::string& app_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_name();
  PROTOBUF_NODISCARD std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // optional string app_version = 3;
  bool has_app_version() const;
  private:
  bool _internal_has_app_version() const;
  public:
  void clear_app_version();
  const std::string& app_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_version();
  PROTOBUF_NODISCARD std::string* release_app_version();
  void set_allocated_app_version(std::string* app_version);
  private:
  const std::string& _internal_app_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_version(const std::string& value);
  std::string* _internal_mutable_app_version();
  public:

  // optional string app_minor_version = 4;
  bool has_app_minor_version() const;
  private:
  bool _internal_has_app_minor_version() const;
  public:
  void clear_app_minor_version();
  const std::string& app_minor_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_minor_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_minor_version();
  PROTOBUF_NODISCARD std::string* release_app_minor_version();
  void set_allocated_app_minor_version(std::string* app_minor_version);
  private:
  const std::string& _internal_app_minor_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_minor_version(const std::string& value);
  std::string* _internal_mutable_app_minor_version();
  public:

  // optional string cpu_class = 6;
  bool has_cpu_class() const;
  private:
  bool _internal_has_cpu_class() const;
  public:
  void clear_cpu_class();
  const std::string& cpu_class() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu_class(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu_class();
  PROTOBUF_NODISCARD std::string* release_cpu_class();
  void set_allocated_cpu_class(std::string* cpu_class);
  private:
  const std::string& _internal_cpu_class() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu_class(const std::string& value);
  std::string* _internal_mutable_cpu_class();
  public:

  // optional string platform = 8;
  bool has_platform() const;
  private:
  bool _internal_has_platform() const;
  public:
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_NODISCARD std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // optional string browser_language = 9;
  bool has_browser_language() const;
  private:
  bool _internal_has_browser_language() const;
  public:
  void clear_browser_language();
  const std::string& browser_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_browser_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_browser_language();
  PROTOBUF_NODISCARD std::string* release_browser_language();
  void set_allocated_browser_language(std::string* browser_language);
  private:
  const std::string& _internal_browser_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_browser_language(const std::string& value);
  std::string* _internal_mutable_browser_language();
  public:

  // optional string system_language = 10;
  bool has_system_language() const;
  private:
  bool _internal_has_system_language() const;
  public:
  void clear_system_language();
  const std::string& system_language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_system_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_system_language();
  PROTOBUF_NODISCARD std::string* release_system_language();
  void set_allocated_system_language(std::string* system_language);
  private:
  const std::string& _internal_system_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_language(const std::string& value);
  std::string* _internal_mutable_system_language();
  public:

  // optional string user_agent = 11;
  bool has_user_agent() const;
  private:
  bool _internal_has_user_agent() const;
  public:
  void clear_user_agent();
  const std::string& user_agent() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_agent(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_agent();
  PROTOBUF_NODISCARD std::string* release_user_agent();
  void set_allocated_user_agent(std::string* user_agent);
  private:
  const std::string& _internal_user_agent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_agent(const std::string& value);
  std::string* _internal_mutable_user_agent();
  public:

  // optional bool cookie_enabled = 5;
  bool has_cookie_enabled() const;
  private:
  bool _internal_has_cookie_enabled() const;
  public:
  void clear_cookie_enabled();
  bool cookie_enabled() const;
  void set_cookie_enabled(bool value);
  private:
  bool _internal_cookie_enabled() const;
  void _internal_set_cookie_enabled(bool value);
  public:

  // optional bool on_line = 7;
  bool has_on_line() const;
  private:
  bool _internal_has_on_line() const;
  public:
  void clear_on_line();
  bool on_line() const;
  void set_on_line(bool value);
  private:
  bool _internal_on_line() const;
  void _internal_set_on_line(bool value);
  public:

  // optional bool java_enabled = 12;
  bool has_java_enabled() const;
  private:
  bool _internal_has_java_enabled() const;
  public:
  void clear_java_enabled();
  bool java_enabled() const;
  void set_java_enabled(bool value);
  private:
  bool _internal_java_enabled() const;
  void _internal_set_java_enabled(bool value);
  public:

  // optional bool taint_enabled = 13;
  bool has_taint_enabled() const;
  private:
  bool _internal_has_taint_enabled() const;
  public:
  void clear_taint_enabled();
  bool taint_enabled() const;
  void set_taint_enabled(bool value);
  private:
  bool _internal_taint_enabled() const;
  void _internal_set_taint_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:userfeedback.Navigator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> plugin_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_code_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_minor_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_class_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr browser_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_agent_;
  bool cookie_enabled_;
  bool on_line_;
  bool java_enabled_;
  bool taint_enabled_;
  friend struct ::TableStruct_dom_2eproto;
};
// -------------------------------------------------------------------

class HtmlPath final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.HtmlPath) */ {
 public:
  inline HtmlPath() : HtmlPath(nullptr) {}
  ~HtmlPath() override;
  explicit PROTOBUF_CONSTEXPR HtmlPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HtmlPath(const HtmlPath& from);
  HtmlPath(HtmlPath&& from) noexcept
    : HtmlPath() {
    *this = ::std::move(from);
  }

  inline HtmlPath& operator=(const HtmlPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline HtmlPath& operator=(HtmlPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HtmlPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const HtmlPath* internal_default_instance() {
    return reinterpret_cast<const HtmlPath*>(
               &_HtmlPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HtmlPath& a, HtmlPath& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HtmlPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HtmlPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HtmlPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HtmlPath>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HtmlPath& from);
  void MergeFrom(const HtmlPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HtmlPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.HtmlPath";
  }
  protected:
  explicit HtmlPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // repeated int32 index = 1;
  int index_size() const;
  private:
  int _internal_index_size() const;
  public:
  void clear_index();
  private:
  int32_t _internal_index(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_index() const;
  void _internal_add_index(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_index();
  public:
  int32_t index(int index) const;
  void set_index(int index, int32_t value);
  void add_index(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      index() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_index();

  // @@protoc_insertion_point(class_scope:userfeedback.HtmlPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HtmlDocument

// required string url = 1;
inline bool HtmlDocument::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HtmlDocument::has_url() const {
  return _internal_has_url();
}
inline void HtmlDocument::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HtmlDocument::url() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HtmlDocument::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.HtmlDocument.url)
}
inline std::string* HtmlDocument::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.url)
  return _s;
}
inline const std::string& HtmlDocument::_internal_url() const {
  return url_.Get();
}
inline void HtmlDocument::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* HtmlDocument::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* HtmlDocument::release_url() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HtmlDocument::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.url)
}

// optional string title = 2;
inline bool HtmlDocument::_internal_has_title() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HtmlDocument::has_title() const {
  return _internal_has_title();
}
inline void HtmlDocument::clear_title() {
  title_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HtmlDocument::title() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HtmlDocument::set_title(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.HtmlDocument.title)
}
inline std::string* HtmlDocument::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.title)
  return _s;
}
inline const std::string& HtmlDocument::_internal_title() const {
  return title_.Get();
}
inline void HtmlDocument::_internal_set_title(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* HtmlDocument::_internal_mutable_title() {
  _has_bits_[0] |= 0x00000002u;
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* HtmlDocument::release_title() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.title)
  if (!_internal_has_title()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = title_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HtmlDocument::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.title)
}

// optional .userfeedback.HtmlElement document_element = 3;
inline bool HtmlDocument::_internal_has_document_element() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || document_element_ != nullptr);
  return value;
}
inline bool HtmlDocument::has_document_element() const {
  return _internal_has_document_element();
}
inline void HtmlDocument::clear_document_element() {
  if (document_element_ != nullptr) document_element_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::userfeedback::HtmlElement& HtmlDocument::_internal_document_element() const {
  const ::userfeedback::HtmlElement* p = document_element_;
  return p != nullptr ? *p : reinterpret_cast<const ::userfeedback::HtmlElement&>(
      ::userfeedback::_HtmlElement_default_instance_);
}
inline const ::userfeedback::HtmlElement& HtmlDocument::document_element() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlDocument.document_element)
  return _internal_document_element();
}
inline void HtmlDocument::unsafe_arena_set_allocated_document_element(
    ::userfeedback::HtmlElement* document_element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(document_element_);
  }
  document_element_ = document_element;
  if (document_element) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userfeedback.HtmlDocument.document_element)
}
inline ::userfeedback::HtmlElement* HtmlDocument::release_document_element() {
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::HtmlElement* temp = document_element_;
  document_element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::userfeedback::HtmlElement* HtmlDocument::unsafe_arena_release_document_element() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlDocument.document_element)
  _has_bits_[0] &= ~0x00000004u;
  ::userfeedback::HtmlElement* temp = document_element_;
  document_element_ = nullptr;
  return temp;
}
inline ::userfeedback::HtmlElement* HtmlDocument::_internal_mutable_document_element() {
  _has_bits_[0] |= 0x00000004u;
  if (document_element_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::HtmlElement>(GetArenaForAllocation());
    document_element_ = p;
  }
  return document_element_;
}
inline ::userfeedback::HtmlElement* HtmlDocument::mutable_document_element() {
  ::userfeedback::HtmlElement* _msg = _internal_mutable_document_element();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlDocument.document_element)
  return _msg;
}
inline void HtmlDocument::set_allocated_document_element(::userfeedback::HtmlElement* document_element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete document_element_;
  }
  if (document_element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(document_element);
    if (message_arena != submessage_arena) {
      document_element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, document_element, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  document_element_ = document_element;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlDocument.document_element)
}

// -------------------------------------------------------------------

// HtmlElement

// required string tag_name = 1;
inline bool HtmlElement::_internal_has_tag_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HtmlElement::has_tag_name() const {
  return _internal_has_tag_name();
}
inline void HtmlElement::clear_tag_name() {
  tag_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HtmlElement::tag_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.tag_name)
  return _internal_tag_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HtmlElement::set_tag_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 tag_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.tag_name)
}
inline std::string* HtmlElement::mutable_tag_name() {
  std::string* _s = _internal_mutable_tag_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.tag_name)
  return _s;
}
inline const std::string& HtmlElement::_internal_tag_name() const {
  return tag_name_.Get();
}
inline void HtmlElement::_internal_set_tag_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tag_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HtmlElement::_internal_mutable_tag_name() {
  _has_bits_[0] |= 0x00000001u;
  return tag_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HtmlElement::release_tag_name() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.tag_name)
  if (!_internal_has_tag_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = tag_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_name_.IsDefault()) {
    tag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HtmlElement::set_allocated_tag_name(std::string* tag_name) {
  if (tag_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tag_name_.SetAllocated(tag_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (tag_name_.IsDefault()) {
    tag_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.tag_name)
}

// optional string id = 2;
inline bool HtmlElement::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HtmlElement::has_id() const {
  return _internal_has_id();
}
inline void HtmlElement::clear_id() {
  id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HtmlElement::id() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HtmlElement::set_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.id)
}
inline std::string* HtmlElement::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.id)
  return _s;
}
inline const std::string& HtmlElement::_internal_id() const {
  return id_.Get();
}
inline void HtmlElement::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  id_.Set(value, GetArenaForAllocation());
}
inline std::string* HtmlElement::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000002u;
  return id_.Mutable(GetArenaForAllocation());
}
inline std::string* HtmlElement::release_id() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HtmlElement::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault()) {
    id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.id)
}

// optional string class_name = 3;
inline bool HtmlElement::_internal_has_class_name() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HtmlElement::has_class_name() const {
  return _internal_has_class_name();
}
inline void HtmlElement::clear_class_name() {
  class_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& HtmlElement::class_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.class_name)
  return _internal_class_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HtmlElement::set_class_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 class_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.HtmlElement.class_name)
}
inline std::string* HtmlElement::mutable_class_name() {
  std::string* _s = _internal_mutable_class_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.class_name)
  return _s;
}
inline const std::string& HtmlElement::_internal_class_name() const {
  return class_name_.Get();
}
inline void HtmlElement::_internal_set_class_name(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  class_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HtmlElement::_internal_mutable_class_name() {
  _has_bits_[0] |= 0x00000004u;
  return class_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HtmlElement::release_class_name() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.class_name)
  if (!_internal_has_class_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = class_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HtmlElement::set_allocated_class_name(std::string* class_name) {
  if (class_name != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  class_name_.SetAllocated(class_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (class_name_.IsDefault()) {
    class_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.class_name)
}

// repeated .userfeedback.HtmlElement child_element = 4;
inline int HtmlElement::_internal_child_element_size() const {
  return child_element_.size();
}
inline int HtmlElement::child_element_size() const {
  return _internal_child_element_size();
}
inline void HtmlElement::clear_child_element() {
  child_element_.Clear();
}
inline ::userfeedback::HtmlElement* HtmlElement::mutable_child_element(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.child_element)
  return child_element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::HtmlElement >*
HtmlElement::mutable_child_element() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.HtmlElement.child_element)
  return &child_element_;
}
inline const ::userfeedback::HtmlElement& HtmlElement::_internal_child_element(int index) const {
  return child_element_.Get(index);
}
inline const ::userfeedback::HtmlElement& HtmlElement::child_element(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.child_element)
  return _internal_child_element(index);
}
inline ::userfeedback::HtmlElement* HtmlElement::_internal_add_child_element() {
  return child_element_.Add();
}
inline ::userfeedback::HtmlElement* HtmlElement::add_child_element() {
  ::userfeedback::HtmlElement* _add = _internal_add_child_element();
  // @@protoc_insertion_point(field_add:userfeedback.HtmlElement.child_element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::userfeedback::HtmlElement >&
HtmlElement::child_element() const {
  // @@protoc_insertion_point(field_list:userfeedback.HtmlElement.child_element)
  return child_element_;
}

// optional .userfeedback.HtmlDocument frame_content_document = 5;
inline bool HtmlElement::_internal_has_frame_content_document() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || frame_content_document_ != nullptr);
  return value;
}
inline bool HtmlElement::has_frame_content_document() const {
  return _internal_has_frame_content_document();
}
inline void HtmlElement::clear_frame_content_document() {
  if (frame_content_document_ != nullptr) frame_content_document_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::userfeedback::HtmlDocument& HtmlElement::_internal_frame_content_document() const {
  const ::userfeedback::HtmlDocument* p = frame_content_document_;
  return p != nullptr ? *p : reinterpret_cast<const ::userfeedback::HtmlDocument&>(
      ::userfeedback::_HtmlDocument_default_instance_);
}
inline const ::userfeedback::HtmlDocument& HtmlElement::frame_content_document() const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlElement.frame_content_document)
  return _internal_frame_content_document();
}
inline void HtmlElement::unsafe_arena_set_allocated_frame_content_document(
    ::userfeedback::HtmlDocument* frame_content_document) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(frame_content_document_);
  }
  frame_content_document_ = frame_content_document;
  if (frame_content_document) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userfeedback.HtmlElement.frame_content_document)
}
inline ::userfeedback::HtmlDocument* HtmlElement::release_frame_content_document() {
  _has_bits_[0] &= ~0x00000008u;
  ::userfeedback::HtmlDocument* temp = frame_content_document_;
  frame_content_document_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::userfeedback::HtmlDocument* HtmlElement::unsafe_arena_release_frame_content_document() {
  // @@protoc_insertion_point(field_release:userfeedback.HtmlElement.frame_content_document)
  _has_bits_[0] &= ~0x00000008u;
  ::userfeedback::HtmlDocument* temp = frame_content_document_;
  frame_content_document_ = nullptr;
  return temp;
}
inline ::userfeedback::HtmlDocument* HtmlElement::_internal_mutable_frame_content_document() {
  _has_bits_[0] |= 0x00000008u;
  if (frame_content_document_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::HtmlDocument>(GetArenaForAllocation());
    frame_content_document_ = p;
  }
  return frame_content_document_;
}
inline ::userfeedback::HtmlDocument* HtmlElement::mutable_frame_content_document() {
  ::userfeedback::HtmlDocument* _msg = _internal_mutable_frame_content_document();
  // @@protoc_insertion_point(field_mutable:userfeedback.HtmlElement.frame_content_document)
  return _msg;
}
inline void HtmlElement::set_allocated_frame_content_document(::userfeedback::HtmlDocument* frame_content_document) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete frame_content_document_;
  }
  if (frame_content_document) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(frame_content_document);
    if (message_arena != submessage_arena) {
      frame_content_document = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, frame_content_document, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  frame_content_document_ = frame_content_document;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.HtmlElement.frame_content_document)
}

// -------------------------------------------------------------------

// Navigator

// optional string app_code_name = 1;
inline bool Navigator::_internal_has_app_code_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Navigator::has_app_code_name() const {
  return _internal_has_app_code_name();
}
inline void Navigator::clear_app_code_name() {
  app_code_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Navigator::app_code_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_code_name)
  return _internal_app_code_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_app_code_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_code_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_code_name)
}
inline std::string* Navigator::mutable_app_code_name() {
  std::string* _s = _internal_mutable_app_code_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_code_name)
  return _s;
}
inline const std::string& Navigator::_internal_app_code_name() const {
  return app_code_name_.Get();
}
inline void Navigator::_internal_set_app_code_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_code_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_app_code_name() {
  _has_bits_[0] |= 0x00000001u;
  return app_code_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_app_code_name() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_code_name)
  if (!_internal_has_app_code_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_code_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_code_name_.IsDefault()) {
    app_code_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_app_code_name(std::string* app_code_name) {
  if (app_code_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_code_name_.SetAllocated(app_code_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_code_name_.IsDefault()) {
    app_code_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_code_name)
}

// optional string app_name = 2;
inline bool Navigator::_internal_has_app_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Navigator::has_app_name() const {
  return _internal_has_app_name();
}
inline void Navigator::clear_app_name() {
  app_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Navigator::app_name() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_name)
  return _internal_app_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_app_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 app_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_name)
}
inline std::string* Navigator::mutable_app_name() {
  std::string* _s = _internal_mutable_app_name();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_name)
  return _s;
}
inline const std::string& Navigator::_internal_app_name() const {
  return app_name_.Get();
}
inline void Navigator::_internal_set_app_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  app_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_app_name() {
  _has_bits_[0] |= 0x00000002u;
  return app_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_app_name() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_name)
  if (!_internal_has_app_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = app_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault()) {
    app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  app_name_.SetAllocated(app_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_name_.IsDefault()) {
    app_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_name)
}

// optional string app_version = 3;
inline bool Navigator::_internal_has_app_version() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Navigator::has_app_version() const {
  return _internal_has_app_version();
}
inline void Navigator::clear_app_version() {
  app_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Navigator::app_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_version)
  return _internal_app_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_app_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 app_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_version)
}
inline std::string* Navigator::mutable_app_version() {
  std::string* _s = _internal_mutable_app_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_version)
  return _s;
}
inline const std::string& Navigator::_internal_app_version() const {
  return app_version_.Get();
}
inline void Navigator::_internal_set_app_version(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  app_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_app_version() {
  _has_bits_[0] |= 0x00000004u;
  return app_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_app_version() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_version)
  if (!_internal_has_app_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = app_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_version_.IsDefault()) {
    app_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_app_version(std::string* app_version) {
  if (app_version != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  app_version_.SetAllocated(app_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_version_.IsDefault()) {
    app_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_version)
}

// optional string app_minor_version = 4;
inline bool Navigator::_internal_has_app_minor_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Navigator::has_app_minor_version() const {
  return _internal_has_app_minor_version();
}
inline void Navigator::clear_app_minor_version() {
  app_minor_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Navigator::app_minor_version() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.app_minor_version)
  return _internal_app_minor_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_app_minor_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 app_minor_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.app_minor_version)
}
inline std::string* Navigator::mutable_app_minor_version() {
  std::string* _s = _internal_mutable_app_minor_version();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.app_minor_version)
  return _s;
}
inline const std::string& Navigator::_internal_app_minor_version() const {
  return app_minor_version_.Get();
}
inline void Navigator::_internal_set_app_minor_version(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  app_minor_version_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_app_minor_version() {
  _has_bits_[0] |= 0x00000008u;
  return app_minor_version_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_app_minor_version() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.app_minor_version)
  if (!_internal_has_app_minor_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = app_minor_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_minor_version_.IsDefault()) {
    app_minor_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_app_minor_version(std::string* app_minor_version) {
  if (app_minor_version != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  app_minor_version_.SetAllocated(app_minor_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_minor_version_.IsDefault()) {
    app_minor_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.app_minor_version)
}

// optional bool cookie_enabled = 5;
inline bool Navigator::_internal_has_cookie_enabled() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Navigator::has_cookie_enabled() const {
  return _internal_has_cookie_enabled();
}
inline void Navigator::clear_cookie_enabled() {
  cookie_enabled_ = false;
  _has_bits_[0] &= ~0x00000200u;
}
inline bool Navigator::_internal_cookie_enabled() const {
  return cookie_enabled_;
}
inline bool Navigator::cookie_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.cookie_enabled)
  return _internal_cookie_enabled();
}
inline void Navigator::_internal_set_cookie_enabled(bool value) {
  _has_bits_[0] |= 0x00000200u;
  cookie_enabled_ = value;
}
inline void Navigator::set_cookie_enabled(bool value) {
  _internal_set_cookie_enabled(value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.cookie_enabled)
}

// optional string cpu_class = 6;
inline bool Navigator::_internal_has_cpu_class() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Navigator::has_cpu_class() const {
  return _internal_has_cpu_class();
}
inline void Navigator::clear_cpu_class() {
  cpu_class_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& Navigator::cpu_class() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.cpu_class)
  return _internal_cpu_class();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_cpu_class(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000010u;
 cpu_class_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.cpu_class)
}
inline std::string* Navigator::mutable_cpu_class() {
  std::string* _s = _internal_mutable_cpu_class();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.cpu_class)
  return _s;
}
inline const std::string& Navigator::_internal_cpu_class() const {
  return cpu_class_.Get();
}
inline void Navigator::_internal_set_cpu_class(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  cpu_class_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_cpu_class() {
  _has_bits_[0] |= 0x00000010u;
  return cpu_class_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_cpu_class() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.cpu_class)
  if (!_internal_has_cpu_class()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  auto* p = cpu_class_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_class_.IsDefault()) {
    cpu_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_cpu_class(std::string* cpu_class) {
  if (cpu_class != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  cpu_class_.SetAllocated(cpu_class, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cpu_class_.IsDefault()) {
    cpu_class_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.cpu_class)
}

// optional bool on_line = 7;
inline bool Navigator::_internal_has_on_line() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Navigator::has_on_line() const {
  return _internal_has_on_line();
}
inline void Navigator::clear_on_line() {
  on_line_ = false;
  _has_bits_[0] &= ~0x00000400u;
}
inline bool Navigator::_internal_on_line() const {
  return on_line_;
}
inline bool Navigator::on_line() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.on_line)
  return _internal_on_line();
}
inline void Navigator::_internal_set_on_line(bool value) {
  _has_bits_[0] |= 0x00000400u;
  on_line_ = value;
}
inline void Navigator::set_on_line(bool value) {
  _internal_set_on_line(value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.on_line)
}

// optional string platform = 8;
inline bool Navigator::_internal_has_platform() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool Navigator::has_platform() const {
  return _internal_has_platform();
}
inline void Navigator::clear_platform() {
  platform_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& Navigator::platform() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_platform(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000020u;
 platform_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.platform)
}
inline std::string* Navigator::mutable_platform() {
  std::string* _s = _internal_mutable_platform();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.platform)
  return _s;
}
inline const std::string& Navigator::_internal_platform() const {
  return platform_.Get();
}
inline void Navigator::_internal_set_platform(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  platform_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_platform() {
  _has_bits_[0] |= 0x00000020u;
  return platform_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_platform() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.platform)
  if (!_internal_has_platform()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  auto* p = platform_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_.IsDefault()) {
    platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  platform_.SetAllocated(platform, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (platform_.IsDefault()) {
    platform_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.platform)
}

// optional string browser_language = 9;
inline bool Navigator::_internal_has_browser_language() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool Navigator::has_browser_language() const {
  return _internal_has_browser_language();
}
inline void Navigator::clear_browser_language() {
  browser_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& Navigator::browser_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.browser_language)
  return _internal_browser_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_browser_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000040u;
 browser_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.browser_language)
}
inline std::string* Navigator::mutable_browser_language() {
  std::string* _s = _internal_mutable_browser_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.browser_language)
  return _s;
}
inline const std::string& Navigator::_internal_browser_language() const {
  return browser_language_.Get();
}
inline void Navigator::_internal_set_browser_language(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  browser_language_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_browser_language() {
  _has_bits_[0] |= 0x00000040u;
  return browser_language_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_browser_language() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.browser_language)
  if (!_internal_has_browser_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  auto* p = browser_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (browser_language_.IsDefault()) {
    browser_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_browser_language(std::string* browser_language) {
  if (browser_language != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  browser_language_.SetAllocated(browser_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (browser_language_.IsDefault()) {
    browser_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.browser_language)
}

// optional string system_language = 10;
inline bool Navigator::_internal_has_system_language() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Navigator::has_system_language() const {
  return _internal_has_system_language();
}
inline void Navigator::clear_system_language() {
  system_language_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& Navigator::system_language() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.system_language)
  return _internal_system_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_system_language(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000080u;
 system_language_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.system_language)
}
inline std::string* Navigator::mutable_system_language() {
  std::string* _s = _internal_mutable_system_language();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.system_language)
  return _s;
}
inline const std::string& Navigator::_internal_system_language() const {
  return system_language_.Get();
}
inline void Navigator::_internal_set_system_language(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  system_language_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_system_language() {
  _has_bits_[0] |= 0x00000080u;
  return system_language_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_system_language() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.system_language)
  if (!_internal_has_system_language()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  auto* p = system_language_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (system_language_.IsDefault()) {
    system_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_system_language(std::string* system_language) {
  if (system_language != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  system_language_.SetAllocated(system_language, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (system_language_.IsDefault()) {
    system_language_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.system_language)
}

// optional string user_agent = 11;
inline bool Navigator::_internal_has_user_agent() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Navigator::has_user_agent() const {
  return _internal_has_user_agent();
}
inline void Navigator::clear_user_agent() {
  user_agent_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& Navigator::user_agent() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.user_agent)
  return _internal_user_agent();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Navigator::set_user_agent(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000100u;
 user_agent_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.user_agent)
}
inline std::string* Navigator::mutable_user_agent() {
  std::string* _s = _internal_mutable_user_agent();
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.user_agent)
  return _s;
}
inline const std::string& Navigator::_internal_user_agent() const {
  return user_agent_.Get();
}
inline void Navigator::_internal_set_user_agent(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  user_agent_.Set(value, GetArenaForAllocation());
}
inline std::string* Navigator::_internal_mutable_user_agent() {
  _has_bits_[0] |= 0x00000100u;
  return user_agent_.Mutable(GetArenaForAllocation());
}
inline std::string* Navigator::release_user_agent() {
  // @@protoc_insertion_point(field_release:userfeedback.Navigator.user_agent)
  if (!_internal_has_user_agent()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  auto* p = user_agent_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_agent_.IsDefault()) {
    user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Navigator::set_allocated_user_agent(std::string* user_agent) {
  if (user_agent != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  user_agent_.SetAllocated(user_agent, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_agent_.IsDefault()) {
    user_agent_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:userfeedback.Navigator.user_agent)
}

// optional bool java_enabled = 12;
inline bool Navigator::_internal_has_java_enabled() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Navigator::has_java_enabled() const {
  return _internal_has_java_enabled();
}
inline void Navigator::clear_java_enabled() {
  java_enabled_ = false;
  _has_bits_[0] &= ~0x00000800u;
}
inline bool Navigator::_internal_java_enabled() const {
  return java_enabled_;
}
inline bool Navigator::java_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.java_enabled)
  return _internal_java_enabled();
}
inline void Navigator::_internal_set_java_enabled(bool value) {
  _has_bits_[0] |= 0x00000800u;
  java_enabled_ = value;
}
inline void Navigator::set_java_enabled(bool value) {
  _internal_set_java_enabled(value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.java_enabled)
}

// optional bool taint_enabled = 13;
inline bool Navigator::_internal_has_taint_enabled() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Navigator::has_taint_enabled() const {
  return _internal_has_taint_enabled();
}
inline void Navigator::clear_taint_enabled() {
  taint_enabled_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool Navigator::_internal_taint_enabled() const {
  return taint_enabled_;
}
inline bool Navigator::taint_enabled() const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.taint_enabled)
  return _internal_taint_enabled();
}
inline void Navigator::_internal_set_taint_enabled(bool value) {
  _has_bits_[0] |= 0x00001000u;
  taint_enabled_ = value;
}
inline void Navigator::set_taint_enabled(bool value) {
  _internal_set_taint_enabled(value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.taint_enabled)
}

// repeated string plugin_name = 14;
inline int Navigator::_internal_plugin_name_size() const {
  return plugin_name_.size();
}
inline int Navigator::plugin_name_size() const {
  return _internal_plugin_name_size();
}
inline void Navigator::clear_plugin_name() {
  plugin_name_.Clear();
}
inline std::string* Navigator::add_plugin_name() {
  std::string* _s = _internal_add_plugin_name();
  // @@protoc_insertion_point(field_add_mutable:userfeedback.Navigator.plugin_name)
  return _s;
}
inline const std::string& Navigator::_internal_plugin_name(int index) const {
  return plugin_name_.Get(index);
}
inline const std::string& Navigator::plugin_name(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.Navigator.plugin_name)
  return _internal_plugin_name(index);
}
inline std::string* Navigator::mutable_plugin_name(int index) {
  // @@protoc_insertion_point(field_mutable:userfeedback.Navigator.plugin_name)
  return plugin_name_.Mutable(index);
}
inline void Navigator::set_plugin_name(int index, const std::string& value) {
  plugin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.plugin_name)
}
inline void Navigator::set_plugin_name(int index, std::string&& value) {
  plugin_name_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:userfeedback.Navigator.plugin_name)
}
inline void Navigator::set_plugin_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugin_name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:userfeedback.Navigator.plugin_name)
}
inline void Navigator::set_plugin_name(int index, const char* value, size_t size) {
  plugin_name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:userfeedback.Navigator.plugin_name)
}
inline std::string* Navigator::_internal_add_plugin_name() {
  return plugin_name_.Add();
}
inline void Navigator::add_plugin_name(const std::string& value) {
  plugin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:userfeedback.Navigator.plugin_name)
}
inline void Navigator::add_plugin_name(std::string&& value) {
  plugin_name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:userfeedback.Navigator.plugin_name)
}
inline void Navigator::add_plugin_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  plugin_name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:userfeedback.Navigator.plugin_name)
}
inline void Navigator::add_plugin_name(const char* value, size_t size) {
  plugin_name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:userfeedback.Navigator.plugin_name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Navigator::plugin_name() const {
  // @@protoc_insertion_point(field_list:userfeedback.Navigator.plugin_name)
  return plugin_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Navigator::mutable_plugin_name() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.Navigator.plugin_name)
  return &plugin_name_;
}

// -------------------------------------------------------------------

// HtmlPath

// repeated int32 index = 1;
inline int HtmlPath::_internal_index_size() const {
  return index_.size();
}
inline int HtmlPath::index_size() const {
  return _internal_index_size();
}
inline void HtmlPath::clear_index() {
  index_.Clear();
}
inline int32_t HtmlPath::_internal_index(int index) const {
  return index_.Get(index);
}
inline int32_t HtmlPath::index(int index) const {
  // @@protoc_insertion_point(field_get:userfeedback.HtmlPath.index)
  return _internal_index(index);
}
inline void HtmlPath::set_index(int index, int32_t value) {
  index_.Set(index, value);
  // @@protoc_insertion_point(field_set:userfeedback.HtmlPath.index)
}
inline void HtmlPath::_internal_add_index(int32_t value) {
  index_.Add(value);
}
inline void HtmlPath::add_index(int32_t value) {
  _internal_add_index(value);
  // @@protoc_insertion_point(field_add:userfeedback.HtmlPath.index)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HtmlPath::_internal_index() const {
  return index_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
HtmlPath::index() const {
  // @@protoc_insertion_point(field_list:userfeedback.HtmlPath.index)
  return _internal_index();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HtmlPath::_internal_mutable_index() {
  return &index_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
HtmlPath::mutable_index() {
  // @@protoc_insertion_point(field_mutable_list:userfeedback.HtmlPath.index)
  return _internal_mutable_index();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dom_2eproto
