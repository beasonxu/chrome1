// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chrome.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_chrome_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_chrome_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_chrome_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_chrome_2eproto {
  static const uint32_t offsets[];
};
namespace userfeedback {
class ChromeBrowserData;
struct ChromeBrowserDataDefaultTypeInternal;
extern ChromeBrowserDataDefaultTypeInternal _ChromeBrowserData_default_instance_;
class ChromeData;
struct ChromeDataDefaultTypeInternal;
extern ChromeDataDefaultTypeInternal _ChromeData_default_instance_;
class ChromeOsData;
struct ChromeOsDataDefaultTypeInternal;
extern ChromeOsDataDefaultTypeInternal _ChromeOsData_default_instance_;
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> ::userfeedback::ChromeBrowserData* Arena::CreateMaybeMessage<::userfeedback::ChromeBrowserData>(Arena*);
template<> ::userfeedback::ChromeData* Arena::CreateMaybeMessage<::userfeedback::ChromeData>(Arena*);
template<> ::userfeedback::ChromeOsData* Arena::CreateMaybeMessage<::userfeedback::ChromeOsData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace userfeedback {

enum ChromeData_ChromePlatform : int {
  ChromeData_ChromePlatform_CHROME_OS = 1,
  ChromeData_ChromePlatform_CHROME_BROWSER = 2
};
bool ChromeData_ChromePlatform_IsValid(int value);
constexpr ChromeData_ChromePlatform ChromeData_ChromePlatform_ChromePlatform_MIN = ChromeData_ChromePlatform_CHROME_OS;
constexpr ChromeData_ChromePlatform ChromeData_ChromePlatform_ChromePlatform_MAX = ChromeData_ChromePlatform_CHROME_BROWSER;
constexpr int ChromeData_ChromePlatform_ChromePlatform_ARRAYSIZE = ChromeData_ChromePlatform_ChromePlatform_MAX + 1;

const std::string& ChromeData_ChromePlatform_Name(ChromeData_ChromePlatform value);
template<typename T>
inline const std::string& ChromeData_ChromePlatform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeData_ChromePlatform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeData_ChromePlatform_Name.");
  return ChromeData_ChromePlatform_Name(static_cast<ChromeData_ChromePlatform>(enum_t_value));
}
bool ChromeData_ChromePlatform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeData_ChromePlatform* value);
enum ChromeOsData_ChromeOsCategory : int {
  ChromeOsData_ChromeOsCategory_CONNECTIVITY = 1,
  ChromeOsData_ChromeOsCategory_SYNC = 2,
  ChromeOsData_ChromeOsCategory_CRASH = 3,
  ChromeOsData_ChromeOsCategory_PAGE_FORMATTING_OR_LAYOUT = 4,
  ChromeOsData_ChromeOsCategory_EXTENSIONS_OR_APPS = 5,
  ChromeOsData_ChromeOsCategory_STANDBY_OR_RESUME = 6,
  ChromeOsData_ChromeOsCategory_PHISHING_PAGE = 7,
  ChromeOsData_ChromeOsCategory_OTHER = 8,
  ChromeOsData_ChromeOsCategory_AUTOFILL = 9
};
bool ChromeOsData_ChromeOsCategory_IsValid(int value);
constexpr ChromeOsData_ChromeOsCategory ChromeOsData_ChromeOsCategory_ChromeOsCategory_MIN = ChromeOsData_ChromeOsCategory_CONNECTIVITY;
constexpr ChromeOsData_ChromeOsCategory ChromeOsData_ChromeOsCategory_ChromeOsCategory_MAX = ChromeOsData_ChromeOsCategory_AUTOFILL;
constexpr int ChromeOsData_ChromeOsCategory_ChromeOsCategory_ARRAYSIZE = ChromeOsData_ChromeOsCategory_ChromeOsCategory_MAX + 1;

const std::string& ChromeOsData_ChromeOsCategory_Name(ChromeOsData_ChromeOsCategory value);
template<typename T>
inline const std::string& ChromeOsData_ChromeOsCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeOsData_ChromeOsCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeOsData_ChromeOsCategory_Name.");
  return ChromeOsData_ChromeOsCategory_Name(static_cast<ChromeOsData_ChromeOsCategory>(enum_t_value));
}
bool ChromeOsData_ChromeOsCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeOsData_ChromeOsCategory* value);
enum ChromeBrowserData_ChromeBrowserCategory : int {
  ChromeBrowserData_ChromeBrowserCategory_PAGE_FORMATTING_OR_LAYOUT = 1,
  ChromeBrowserData_ChromeBrowserCategory_PAGES_NOT_LOADING = 2,
  ChromeBrowserData_ChromeBrowserCategory_PLUGINS = 3,
  ChromeBrowserData_ChromeBrowserCategory_TABS_OR_WINDOWS = 4,
  ChromeBrowserData_ChromeBrowserCategory_SYNCED_PREFERENCES = 5,
  ChromeBrowserData_ChromeBrowserCategory_CRASH = 6,
  ChromeBrowserData_ChromeBrowserCategory_EXTENSIONS_OR_APPS = 7,
  ChromeBrowserData_ChromeBrowserCategory_PHISHING_PAGE = 8,
  ChromeBrowserData_ChromeBrowserCategory_OTHER = 9,
  ChromeBrowserData_ChromeBrowserCategory_AUTOFILL = 10
};
bool ChromeBrowserData_ChromeBrowserCategory_IsValid(int value);
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_MIN = ChromeBrowserData_ChromeBrowserCategory_PAGE_FORMATTING_OR_LAYOUT;
constexpr ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_MAX = ChromeBrowserData_ChromeBrowserCategory_AUTOFILL;
constexpr int ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_ARRAYSIZE = ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_MAX + 1;

const std::string& ChromeBrowserData_ChromeBrowserCategory_Name(ChromeBrowserData_ChromeBrowserCategory value);
template<typename T>
inline const std::string& ChromeBrowserData_ChromeBrowserCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChromeBrowserData_ChromeBrowserCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChromeBrowserData_ChromeBrowserCategory_Name.");
  return ChromeBrowserData_ChromeBrowserCategory_Name(static_cast<ChromeBrowserData_ChromeBrowserCategory>(enum_t_value));
}
bool ChromeBrowserData_ChromeBrowserCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChromeBrowserData_ChromeBrowserCategory* value);
// ===================================================================

class ChromeData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ChromeData) */ {
 public:
  inline ChromeData() : ChromeData(nullptr) {}
  ~ChromeData() override;
  explicit PROTOBUF_CONSTEXPR ChromeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeData(const ChromeData& from);
  ChromeData(ChromeData&& from) noexcept
    : ChromeData() {
    *this = ::std::move(from);
  }

  inline ChromeData& operator=(const ChromeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeData& operator=(ChromeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeData* internal_default_instance() {
    return reinterpret_cast<const ChromeData*>(
               &_ChromeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeData& a, ChromeData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeData& from);
  void MergeFrom(const ChromeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ChromeData";
  }
  protected:
  explicit ChromeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeData_ChromePlatform ChromePlatform;
  static constexpr ChromePlatform CHROME_OS =
    ChromeData_ChromePlatform_CHROME_OS;
  static constexpr ChromePlatform CHROME_BROWSER =
    ChromeData_ChromePlatform_CHROME_BROWSER;
  static inline bool ChromePlatform_IsValid(int value) {
    return ChromeData_ChromePlatform_IsValid(value);
  }
  static constexpr ChromePlatform ChromePlatform_MIN =
    ChromeData_ChromePlatform_ChromePlatform_MIN;
  static constexpr ChromePlatform ChromePlatform_MAX =
    ChromeData_ChromePlatform_ChromePlatform_MAX;
  static constexpr int ChromePlatform_ARRAYSIZE =
    ChromeData_ChromePlatform_ChromePlatform_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChromePlatform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChromePlatform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChromePlatform_Name.");
    return ChromeData_ChromePlatform_Name(enum_t_value);
  }
  static inline bool ChromePlatform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChromePlatform* value) {
    return ChromeData_ChromePlatform_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChromeOsDataFieldNumber = 2,
    kChromeBrowserDataFieldNumber = 3,
    kChromePlatformFieldNumber = 1,
  };
  // optional .userfeedback.ChromeOsData chrome_os_data = 2;
  bool has_chrome_os_data() const;
  private:
  bool _internal_has_chrome_os_data() const;
  public:
  void clear_chrome_os_data();
  const ::userfeedback::ChromeOsData& chrome_os_data() const;
  PROTOBUF_NODISCARD ::userfeedback::ChromeOsData* release_chrome_os_data();
  ::userfeedback::ChromeOsData* mutable_chrome_os_data();
  void set_allocated_chrome_os_data(::userfeedback::ChromeOsData* chrome_os_data);
  private:
  const ::userfeedback::ChromeOsData& _internal_chrome_os_data() const;
  ::userfeedback::ChromeOsData* _internal_mutable_chrome_os_data();
  public:
  void unsafe_arena_set_allocated_chrome_os_data(
      ::userfeedback::ChromeOsData* chrome_os_data);
  ::userfeedback::ChromeOsData* unsafe_arena_release_chrome_os_data();

  // optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
  bool has_chrome_browser_data() const;
  private:
  bool _internal_has_chrome_browser_data() const;
  public:
  void clear_chrome_browser_data();
  const ::userfeedback::ChromeBrowserData& chrome_browser_data() const;
  PROTOBUF_NODISCARD ::userfeedback::ChromeBrowserData* release_chrome_browser_data();
  ::userfeedback::ChromeBrowserData* mutable_chrome_browser_data();
  void set_allocated_chrome_browser_data(::userfeedback::ChromeBrowserData* chrome_browser_data);
  private:
  const ::userfeedback::ChromeBrowserData& _internal_chrome_browser_data() const;
  ::userfeedback::ChromeBrowserData* _internal_mutable_chrome_browser_data();
  public:
  void unsafe_arena_set_allocated_chrome_browser_data(
      ::userfeedback::ChromeBrowserData* chrome_browser_data);
  ::userfeedback::ChromeBrowserData* unsafe_arena_release_chrome_browser_data();

  // optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
  bool has_chrome_platform() const;
  private:
  bool _internal_has_chrome_platform() const;
  public:
  void clear_chrome_platform();
  ::userfeedback::ChromeData_ChromePlatform chrome_platform() const;
  void set_chrome_platform(::userfeedback::ChromeData_ChromePlatform value);
  private:
  ::userfeedback::ChromeData_ChromePlatform _internal_chrome_platform() const;
  void _internal_set_chrome_platform(::userfeedback::ChromeData_ChromePlatform value);
  public:

  // @@protoc_insertion_point(class_scope:userfeedback.ChromeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::userfeedback::ChromeOsData* chrome_os_data_;
  ::userfeedback::ChromeBrowserData* chrome_browser_data_;
  int chrome_platform_;
  friend struct ::TableStruct_chrome_2eproto;
};
// -------------------------------------------------------------------

class ChromeOsData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ChromeOsData) */ {
 public:
  inline ChromeOsData() : ChromeOsData(nullptr) {}
  ~ChromeOsData() override;
  explicit PROTOBUF_CONSTEXPR ChromeOsData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeOsData(const ChromeOsData& from);
  ChromeOsData(ChromeOsData&& from) noexcept
    : ChromeOsData() {
    *this = ::std::move(from);
  }

  inline ChromeOsData& operator=(const ChromeOsData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeOsData& operator=(ChromeOsData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeOsData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeOsData* internal_default_instance() {
    return reinterpret_cast<const ChromeOsData*>(
               &_ChromeOsData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ChromeOsData& a, ChromeOsData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeOsData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeOsData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeOsData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeOsData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeOsData& from);
  void MergeFrom(const ChromeOsData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeOsData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ChromeOsData";
  }
  protected:
  explicit ChromeOsData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeOsData_ChromeOsCategory ChromeOsCategory;
  static constexpr ChromeOsCategory CONNECTIVITY =
    ChromeOsData_ChromeOsCategory_CONNECTIVITY;
  static constexpr ChromeOsCategory SYNC =
    ChromeOsData_ChromeOsCategory_SYNC;
  static constexpr ChromeOsCategory CRASH =
    ChromeOsData_ChromeOsCategory_CRASH;
  static constexpr ChromeOsCategory PAGE_FORMATTING_OR_LAYOUT =
    ChromeOsData_ChromeOsCategory_PAGE_FORMATTING_OR_LAYOUT;
  static constexpr ChromeOsCategory EXTENSIONS_OR_APPS =
    ChromeOsData_ChromeOsCategory_EXTENSIONS_OR_APPS;
  static constexpr ChromeOsCategory STANDBY_OR_RESUME =
    ChromeOsData_ChromeOsCategory_STANDBY_OR_RESUME;
  static constexpr ChromeOsCategory PHISHING_PAGE =
    ChromeOsData_ChromeOsCategory_PHISHING_PAGE;
  static constexpr ChromeOsCategory OTHER =
    ChromeOsData_ChromeOsCategory_OTHER;
  static constexpr ChromeOsCategory AUTOFILL =
    ChromeOsData_ChromeOsCategory_AUTOFILL;
  static inline bool ChromeOsCategory_IsValid(int value) {
    return ChromeOsData_ChromeOsCategory_IsValid(value);
  }
  static constexpr ChromeOsCategory ChromeOsCategory_MIN =
    ChromeOsData_ChromeOsCategory_ChromeOsCategory_MIN;
  static constexpr ChromeOsCategory ChromeOsCategory_MAX =
    ChromeOsData_ChromeOsCategory_ChromeOsCategory_MAX;
  static constexpr int ChromeOsCategory_ARRAYSIZE =
    ChromeOsData_ChromeOsCategory_ChromeOsCategory_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChromeOsCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChromeOsCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChromeOsCategory_Name.");
    return ChromeOsData_ChromeOsCategory_Name(enum_t_value);
  }
  static inline bool ChromeOsCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChromeOsCategory* value) {
    return ChromeOsData_ChromeOsCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::userfeedback::ChromeOsData_ChromeOsCategory category() const;
  void set_category(::userfeedback::ChromeOsData_ChromeOsCategory value);
  private:
  ::userfeedback::ChromeOsData_ChromeOsCategory _internal_category() const;
  void _internal_set_category(::userfeedback::ChromeOsData_ChromeOsCategory value);
  public:

  // @@protoc_insertion_point(class_scope:userfeedback.ChromeOsData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int category_;
  friend struct ::TableStruct_chrome_2eproto;
};
// -------------------------------------------------------------------

class ChromeBrowserData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:userfeedback.ChromeBrowserData) */ {
 public:
  inline ChromeBrowserData() : ChromeBrowserData(nullptr) {}
  ~ChromeBrowserData() override;
  explicit PROTOBUF_CONSTEXPR ChromeBrowserData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeBrowserData(const ChromeBrowserData& from);
  ChromeBrowserData(ChromeBrowserData&& from) noexcept
    : ChromeBrowserData() {
    *this = ::std::move(from);
  }

  inline ChromeBrowserData& operator=(const ChromeBrowserData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeBrowserData& operator=(ChromeBrowserData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeBrowserData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeBrowserData* internal_default_instance() {
    return reinterpret_cast<const ChromeBrowserData*>(
               &_ChromeBrowserData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChromeBrowserData& a, ChromeBrowserData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeBrowserData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeBrowserData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeBrowserData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeBrowserData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeBrowserData& from);
  void MergeFrom(const ChromeBrowserData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeBrowserData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "userfeedback.ChromeBrowserData";
  }
  protected:
  explicit ChromeBrowserData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ChromeBrowserData_ChromeBrowserCategory ChromeBrowserCategory;
  static constexpr ChromeBrowserCategory PAGE_FORMATTING_OR_LAYOUT =
    ChromeBrowserData_ChromeBrowserCategory_PAGE_FORMATTING_OR_LAYOUT;
  static constexpr ChromeBrowserCategory PAGES_NOT_LOADING =
    ChromeBrowserData_ChromeBrowserCategory_PAGES_NOT_LOADING;
  static constexpr ChromeBrowserCategory PLUGINS =
    ChromeBrowserData_ChromeBrowserCategory_PLUGINS;
  static constexpr ChromeBrowserCategory TABS_OR_WINDOWS =
    ChromeBrowserData_ChromeBrowserCategory_TABS_OR_WINDOWS;
  static constexpr ChromeBrowserCategory SYNCED_PREFERENCES =
    ChromeBrowserData_ChromeBrowserCategory_SYNCED_PREFERENCES;
  static constexpr ChromeBrowserCategory CRASH =
    ChromeBrowserData_ChromeBrowserCategory_CRASH;
  static constexpr ChromeBrowserCategory EXTENSIONS_OR_APPS =
    ChromeBrowserData_ChromeBrowserCategory_EXTENSIONS_OR_APPS;
  static constexpr ChromeBrowserCategory PHISHING_PAGE =
    ChromeBrowserData_ChromeBrowserCategory_PHISHING_PAGE;
  static constexpr ChromeBrowserCategory OTHER =
    ChromeBrowserData_ChromeBrowserCategory_OTHER;
  static constexpr ChromeBrowserCategory AUTOFILL =
    ChromeBrowserData_ChromeBrowserCategory_AUTOFILL;
  static inline bool ChromeBrowserCategory_IsValid(int value) {
    return ChromeBrowserData_ChromeBrowserCategory_IsValid(value);
  }
  static constexpr ChromeBrowserCategory ChromeBrowserCategory_MIN =
    ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_MIN;
  static constexpr ChromeBrowserCategory ChromeBrowserCategory_MAX =
    ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_MAX;
  static constexpr int ChromeBrowserCategory_ARRAYSIZE =
    ChromeBrowserData_ChromeBrowserCategory_ChromeBrowserCategory_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ChromeBrowserCategory_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ChromeBrowserCategory>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ChromeBrowserCategory_Name.");
    return ChromeBrowserData_ChromeBrowserCategory_Name(enum_t_value);
  }
  static inline bool ChromeBrowserCategory_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ChromeBrowserCategory* value) {
    return ChromeBrowserData_ChromeBrowserCategory_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCategoryFieldNumber = 1,
  };
  // optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::userfeedback::ChromeBrowserData_ChromeBrowserCategory category() const;
  void set_category(::userfeedback::ChromeBrowserData_ChromeBrowserCategory value);
  private:
  ::userfeedback::ChromeBrowserData_ChromeBrowserCategory _internal_category() const;
  void _internal_set_category(::userfeedback::ChromeBrowserData_ChromeBrowserCategory value);
  public:

  // @@protoc_insertion_point(class_scope:userfeedback.ChromeBrowserData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int category_;
  friend struct ::TableStruct_chrome_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeData

// optional .userfeedback.ChromeData.ChromePlatform chrome_platform = 1 [default = CHROME_OS];
inline bool ChromeData::_internal_has_chrome_platform() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeData::has_chrome_platform() const {
  return _internal_has_chrome_platform();
}
inline void ChromeData::clear_chrome_platform() {
  chrome_platform_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::userfeedback::ChromeData_ChromePlatform ChromeData::_internal_chrome_platform() const {
  return static_cast< ::userfeedback::ChromeData_ChromePlatform >(chrome_platform_);
}
inline ::userfeedback::ChromeData_ChromePlatform ChromeData::chrome_platform() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_platform)
  return _internal_chrome_platform();
}
inline void ChromeData::_internal_set_chrome_platform(::userfeedback::ChromeData_ChromePlatform value) {
  assert(::userfeedback::ChromeData_ChromePlatform_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  chrome_platform_ = value;
}
inline void ChromeData::set_chrome_platform(::userfeedback::ChromeData_ChromePlatform value) {
  _internal_set_chrome_platform(value);
  // @@protoc_insertion_point(field_set:userfeedback.ChromeData.chrome_platform)
}

// optional .userfeedback.ChromeOsData chrome_os_data = 2;
inline bool ChromeData::_internal_has_chrome_os_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || chrome_os_data_ != nullptr);
  return value;
}
inline bool ChromeData::has_chrome_os_data() const {
  return _internal_has_chrome_os_data();
}
inline void ChromeData::clear_chrome_os_data() {
  if (chrome_os_data_ != nullptr) chrome_os_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::userfeedback::ChromeOsData& ChromeData::_internal_chrome_os_data() const {
  const ::userfeedback::ChromeOsData* p = chrome_os_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::userfeedback::ChromeOsData&>(
      ::userfeedback::_ChromeOsData_default_instance_);
}
inline const ::userfeedback::ChromeOsData& ChromeData::chrome_os_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_os_data)
  return _internal_chrome_os_data();
}
inline void ChromeData::unsafe_arena_set_allocated_chrome_os_data(
    ::userfeedback::ChromeOsData* chrome_os_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_os_data_);
  }
  chrome_os_data_ = chrome_os_data;
  if (chrome_os_data) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userfeedback.ChromeData.chrome_os_data)
}
inline ::userfeedback::ChromeOsData* ChromeData::release_chrome_os_data() {
  _has_bits_[0] &= ~0x00000001u;
  ::userfeedback::ChromeOsData* temp = chrome_os_data_;
  chrome_os_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::userfeedback::ChromeOsData* ChromeData::unsafe_arena_release_chrome_os_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ChromeData.chrome_os_data)
  _has_bits_[0] &= ~0x00000001u;
  ::userfeedback::ChromeOsData* temp = chrome_os_data_;
  chrome_os_data_ = nullptr;
  return temp;
}
inline ::userfeedback::ChromeOsData* ChromeData::_internal_mutable_chrome_os_data() {
  _has_bits_[0] |= 0x00000001u;
  if (chrome_os_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::ChromeOsData>(GetArenaForAllocation());
    chrome_os_data_ = p;
  }
  return chrome_os_data_;
}
inline ::userfeedback::ChromeOsData* ChromeData::mutable_chrome_os_data() {
  ::userfeedback::ChromeOsData* _msg = _internal_mutable_chrome_os_data();
  // @@protoc_insertion_point(field_mutable:userfeedback.ChromeData.chrome_os_data)
  return _msg;
}
inline void ChromeData::set_allocated_chrome_os_data(::userfeedback::ChromeOsData* chrome_os_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chrome_os_data_;
  }
  if (chrome_os_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_os_data);
    if (message_arena != submessage_arena) {
      chrome_os_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_os_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  chrome_os_data_ = chrome_os_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ChromeData.chrome_os_data)
}

// optional .userfeedback.ChromeBrowserData chrome_browser_data = 3;
inline bool ChromeData::_internal_has_chrome_browser_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || chrome_browser_data_ != nullptr);
  return value;
}
inline bool ChromeData::has_chrome_browser_data() const {
  return _internal_has_chrome_browser_data();
}
inline void ChromeData::clear_chrome_browser_data() {
  if (chrome_browser_data_ != nullptr) chrome_browser_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::userfeedback::ChromeBrowserData& ChromeData::_internal_chrome_browser_data() const {
  const ::userfeedback::ChromeBrowserData* p = chrome_browser_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::userfeedback::ChromeBrowserData&>(
      ::userfeedback::_ChromeBrowserData_default_instance_);
}
inline const ::userfeedback::ChromeBrowserData& ChromeData::chrome_browser_data() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeData.chrome_browser_data)
  return _internal_chrome_browser_data();
}
inline void ChromeData::unsafe_arena_set_allocated_chrome_browser_data(
    ::userfeedback::ChromeBrowserData* chrome_browser_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_browser_data_);
  }
  chrome_browser_data_ = chrome_browser_data;
  if (chrome_browser_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:userfeedback.ChromeData.chrome_browser_data)
}
inline ::userfeedback::ChromeBrowserData* ChromeData::release_chrome_browser_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::ChromeBrowserData* temp = chrome_browser_data_;
  chrome_browser_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::userfeedback::ChromeBrowserData* ChromeData::unsafe_arena_release_chrome_browser_data() {
  // @@protoc_insertion_point(field_release:userfeedback.ChromeData.chrome_browser_data)
  _has_bits_[0] &= ~0x00000002u;
  ::userfeedback::ChromeBrowserData* temp = chrome_browser_data_;
  chrome_browser_data_ = nullptr;
  return temp;
}
inline ::userfeedback::ChromeBrowserData* ChromeData::_internal_mutable_chrome_browser_data() {
  _has_bits_[0] |= 0x00000002u;
  if (chrome_browser_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::userfeedback::ChromeBrowserData>(GetArenaForAllocation());
    chrome_browser_data_ = p;
  }
  return chrome_browser_data_;
}
inline ::userfeedback::ChromeBrowserData* ChromeData::mutable_chrome_browser_data() {
  ::userfeedback::ChromeBrowserData* _msg = _internal_mutable_chrome_browser_data();
  // @@protoc_insertion_point(field_mutable:userfeedback.ChromeData.chrome_browser_data)
  return _msg;
}
inline void ChromeData::set_allocated_chrome_browser_data(::userfeedback::ChromeBrowserData* chrome_browser_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete chrome_browser_data_;
  }
  if (chrome_browser_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chrome_browser_data);
    if (message_arena != submessage_arena) {
      chrome_browser_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_browser_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  chrome_browser_data_ = chrome_browser_data;
  // @@protoc_insertion_point(field_set_allocated:userfeedback.ChromeData.chrome_browser_data)
}

// -------------------------------------------------------------------

// ChromeOsData

// optional .userfeedback.ChromeOsData.ChromeOsCategory category = 1 [default = OTHER];
inline bool ChromeOsData::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeOsData::has_category() const {
  return _internal_has_category();
}
inline void ChromeOsData::clear_category() {
  category_ = 8;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::userfeedback::ChromeOsData_ChromeOsCategory ChromeOsData::_internal_category() const {
  return static_cast< ::userfeedback::ChromeOsData_ChromeOsCategory >(category_);
}
inline ::userfeedback::ChromeOsData_ChromeOsCategory ChromeOsData::category() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeOsData.category)
  return _internal_category();
}
inline void ChromeOsData::_internal_set_category(::userfeedback::ChromeOsData_ChromeOsCategory value) {
  assert(::userfeedback::ChromeOsData_ChromeOsCategory_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  category_ = value;
}
inline void ChromeOsData::set_category(::userfeedback::ChromeOsData_ChromeOsCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:userfeedback.ChromeOsData.category)
}

// -------------------------------------------------------------------

// ChromeBrowserData

// optional .userfeedback.ChromeBrowserData.ChromeBrowserCategory category = 1 [default = OTHER];
inline bool ChromeBrowserData::_internal_has_category() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeBrowserData::has_category() const {
  return _internal_has_category();
}
inline void ChromeBrowserData::clear_category() {
  category_ = 9;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::userfeedback::ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::_internal_category() const {
  return static_cast< ::userfeedback::ChromeBrowserData_ChromeBrowserCategory >(category_);
}
inline ::userfeedback::ChromeBrowserData_ChromeBrowserCategory ChromeBrowserData::category() const {
  // @@protoc_insertion_point(field_get:userfeedback.ChromeBrowserData.category)
  return _internal_category();
}
inline void ChromeBrowserData::_internal_set_category(::userfeedback::ChromeBrowserData_ChromeBrowserCategory value) {
  assert(::userfeedback::ChromeBrowserData_ChromeBrowserCategory_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  category_ = value;
}
inline void ChromeBrowserData::set_category(::userfeedback::ChromeBrowserData_ChromeBrowserCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:userfeedback.ChromeBrowserData.category)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace userfeedback

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::userfeedback::ChromeData_ChromePlatform> : ::std::true_type {};
template <> struct is_proto_enum< ::userfeedback::ChromeOsData_ChromeOsCategory> : ::std::true_type {};
template <> struct is_proto_enum< ::userfeedback::ChromeBrowserData_ChromeBrowserCategory> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_chrome_2eproto
