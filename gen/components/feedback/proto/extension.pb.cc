// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: extension.proto

#include "extension.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace userfeedback {
PROTOBUF_CONSTEXPR ExtensionPageRequestParams::ExtensionPageRequestParams(
    ::_pbi::ConstantInitialized)
  : url_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extension_details_(nullptr){}
struct ExtensionPageRequestParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionPageRequestParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionPageRequestParamsDefaultTypeInternal() {}
  union {
    ExtensionPageRequestParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionPageRequestParamsDefaultTypeInternal _ExtensionPageRequestParams_default_instance_;
PROTOBUF_CONSTEXPR PostedScreenshot::PostedScreenshot(
    ::_pbi::ConstantInitialized)
  : mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , base64_content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , binary_content_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , dimensions_(nullptr){}
struct PostedScreenshotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PostedScreenshotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PostedScreenshotDefaultTypeInternal() {}
  union {
    PostedScreenshot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PostedScreenshotDefaultTypeInternal _PostedScreenshot_default_instance_;
PROTOBUF_CONSTEXPR ExtensionErrors::ExtensionErrors(
    ::_pbi::ConstantInitialized)
  : errors_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , number_of_attempts_(0){}
struct ExtensionErrorsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionErrorsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionErrorsDefaultTypeInternal() {}
  union {
    ExtensionErrors _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionErrorsDefaultTypeInternal _ExtensionErrors_default_instance_;
PROTOBUF_CONSTEXPR ExtensionSubmit::ExtensionSubmit(
    ::_pbi::ConstantInitialized)
  : product_specific_binary_data_()
  , category_tag_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , bucket_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , common_data_(nullptr)
  , web_data_(nullptr)
  , screenshot_(nullptr)
  , chrome_data_(nullptr)
  , type_id_(0)
  , product_id_(0){}
struct ExtensionSubmitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtensionSubmitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtensionSubmitDefaultTypeInternal() {}
  union {
    ExtensionSubmit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtensionSubmitDefaultTypeInternal _ExtensionSubmit_default_instance_;
PROTOBUF_CONSTEXPR SuggestQuery::SuggestQuery(
    ::_pbi::ConstantInitialized)
  : common_data_(nullptr)
  , web_data_(nullptr)
  , html_document_structure_(nullptr)
  , chrome_data_(nullptr)
  , type_id_(0){}
struct SuggestQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SuggestQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SuggestQueryDefaultTypeInternal() {}
  union {
    SuggestQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SuggestQueryDefaultTypeInternal _SuggestQuery_default_instance_;
}  // namespace userfeedback
namespace userfeedback {

// ===================================================================

class ExtensionPageRequestParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionPageRequestParams>()._has_bits_);
  static const ::userfeedback::ExtensionDetails& extension_details(const ExtensionPageRequestParams* msg);
  static void set_has_extension_details(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_url(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::userfeedback::ExtensionDetails&
ExtensionPageRequestParams::_Internal::extension_details(const ExtensionPageRequestParams* msg) {
  return *msg->extension_details_;
}
void ExtensionPageRequestParams::clear_extension_details() {
  if (extension_details_ != nullptr) extension_details_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
ExtensionPageRequestParams::ExtensionPageRequestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.ExtensionPageRequestParams)
}
ExtensionPageRequestParams::ExtensionPageRequestParams(const ExtensionPageRequestParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_url()) {
    url_.Set(from._internal_url(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_extension_details()) {
    extension_details_ = new ::userfeedback::ExtensionDetails(*from.extension_details_);
  } else {
    extension_details_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionPageRequestParams)
}

inline void ExtensionPageRequestParams::SharedCtor() {
url_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extension_details_ = nullptr;
}

ExtensionPageRequestParams::~ExtensionPageRequestParams() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionPageRequestParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionPageRequestParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  url_.Destroy();
  if (this != internal_default_instance()) delete extension_details_;
}

void ExtensionPageRequestParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionPageRequestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionPageRequestParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(extension_details_ != nullptr);
      extension_details_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionPageRequestParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .userfeedback.ExtensionDetails extension_details = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_extension_details(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionPageRequestParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.ExtensionPageRequestParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.ExtensionDetails extension_details = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::extension_details(this),
        _Internal::extension_details(this).GetCachedSize(), target, stream);
  }

  // required string url = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.ExtensionPageRequestParams)
  return target;
}

size_t ExtensionPageRequestParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionPageRequestParams)
  size_t total_size = 0;

  if (_internal_has_url()) {
    // required string url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (_internal_has_extension_details()) {
    // required .userfeedback.ExtensionDetails extension_details = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_details_);
  }

  return total_size;
}
size_t ExtensionPageRequestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionPageRequestParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string url = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());

    // required .userfeedback.ExtensionDetails extension_details = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *extension_details_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionPageRequestParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionPageRequestParams*>(
      &from));
}

void ExtensionPageRequestParams::MergeFrom(const ExtensionPageRequestParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionPageRequestParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_url(from._internal_url());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_extension_details()->::userfeedback::ExtensionDetails::MergeFrom(from._internal_extension_details());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionPageRequestParams::CopyFrom(const ExtensionPageRequestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionPageRequestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionPageRequestParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_extension_details()) {
    if (!extension_details_->IsInitialized()) return false;
  }
  return true;
}

void ExtensionPageRequestParams::InternalSwap(ExtensionPageRequestParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
  swap(extension_details_, other->extension_details_);
}

std::string ExtensionPageRequestParams::GetTypeName() const {
  return "userfeedback.ExtensionPageRequestParams";
}


// ===================================================================

class PostedScreenshot::_Internal {
 public:
  using HasBits = decltype(std::declval<PostedScreenshot>()._has_bits_);
  static void set_has_mime_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::userfeedback::Dimensions& dimensions(const PostedScreenshot* msg);
  static void set_has_dimensions(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_base64_content(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_binary_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000009) ^ 0x00000009) != 0;
  }
};

const ::userfeedback::Dimensions&
PostedScreenshot::_Internal::dimensions(const PostedScreenshot* msg) {
  return *msg->dimensions_;
}
void PostedScreenshot::clear_dimensions() {
  if (dimensions_ != nullptr) dimensions_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
PostedScreenshot::PostedScreenshot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.PostedScreenshot)
}
PostedScreenshot::PostedScreenshot(const PostedScreenshot& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_mime_type()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  base64_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base64_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_base64_content()) {
    base64_content_.Set(from._internal_base64_content(), 
      GetArenaForAllocation());
  }
  binary_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    binary_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_binary_content()) {
    binary_content_.Set(from._internal_binary_content(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_dimensions()) {
    dimensions_ = new ::userfeedback::Dimensions(*from.dimensions_);
  } else {
    dimensions_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:userfeedback.PostedScreenshot)
}

inline void PostedScreenshot::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base64_content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base64_content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
binary_content_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  binary_content_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dimensions_ = nullptr;
}

PostedScreenshot::~PostedScreenshot() {
  // @@protoc_insertion_point(destructor:userfeedback.PostedScreenshot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PostedScreenshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
  base64_content_.Destroy();
  binary_content_.Destroy();
  if (this != internal_default_instance()) delete dimensions_;
}

void PostedScreenshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PostedScreenshot::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.PostedScreenshot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mime_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      base64_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      binary_content_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(dimensions_ != nullptr);
      dimensions_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PostedScreenshot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string mime_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .userfeedback.Dimensions dimensions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_dimensions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string base64_content = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_base64_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes binary_content = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_binary_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PostedScreenshot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.PostedScreenshot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string mime_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // required .userfeedback.Dimensions dimensions = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dimensions(this),
        _Internal::dimensions(this).GetCachedSize(), target, stream);
  }

  // optional string base64_content = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_base64_content(), target);
  }

  // optional bytes binary_content = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_binary_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.PostedScreenshot)
  return target;
}

size_t PostedScreenshot::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.PostedScreenshot)
  size_t total_size = 0;

  if (_internal_has_mime_type()) {
    // required string mime_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  if (_internal_has_dimensions()) {
    // required .userfeedback.Dimensions dimensions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dimensions_);
  }

  return total_size;
}
size_t PostedScreenshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.PostedScreenshot)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000009) ^ 0x00000009) == 0) {  // All required fields are present.
    // required string mime_type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());

    // required .userfeedback.Dimensions dimensions = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dimensions_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional string base64_content = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_base64_content());
    }

    // optional bytes binary_content = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_content());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PostedScreenshot::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PostedScreenshot*>(
      &from));
}

void PostedScreenshot::MergeFrom(const PostedScreenshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.PostedScreenshot)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_mime_type(from._internal_mime_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_base64_content(from._internal_base64_content());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_binary_content(from._internal_binary_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_dimensions()->::userfeedback::Dimensions::MergeFrom(from._internal_dimensions());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PostedScreenshot::CopyFrom(const PostedScreenshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.PostedScreenshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PostedScreenshot::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_dimensions()) {
    if (!dimensions_->IsInitialized()) return false;
  }
  return true;
}

void PostedScreenshot::InternalSwap(PostedScreenshot* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &base64_content_, lhs_arena,
      &other->base64_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &binary_content_, lhs_arena,
      &other->binary_content_, rhs_arena
  );
  swap(dimensions_, other->dimensions_);
}

std::string PostedScreenshot::GetTypeName() const {
  return "userfeedback.PostedScreenshot";
}


// ===================================================================

class ExtensionErrors::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionErrors>()._has_bits_);
  static void set_has_number_of_attempts(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_errors(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

ExtensionErrors::ExtensionErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.ExtensionErrors)
}
ExtensionErrors::ExtensionErrors(const ExtensionErrors& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  errors_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    errors_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_errors()) {
    errors_.Set(from._internal_errors(), 
      GetArenaForAllocation());
  }
  number_of_attempts_ = from.number_of_attempts_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionErrors)
}

inline void ExtensionErrors::SharedCtor() {
errors_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  errors_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
number_of_attempts_ = 0;
}

ExtensionErrors::~ExtensionErrors() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionErrors)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionErrors::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  errors_.Destroy();
}

void ExtensionErrors::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionErrors::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionErrors)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    errors_.ClearNonDefaultToEmpty();
  }
  number_of_attempts_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionErrors::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 number_of_attempts = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_number_of_attempts(&has_bits);
          number_of_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_errors();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionErrors::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.ExtensionErrors)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 number_of_attempts = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_number_of_attempts(), target);
  }

  // required string errors = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_errors(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.ExtensionErrors)
  return target;
}

size_t ExtensionErrors::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionErrors)
  size_t total_size = 0;

  if (_internal_has_errors()) {
    // required string errors = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errors());
  }

  if (_internal_has_number_of_attempts()) {
    // required int32 number_of_attempts = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_attempts());
  }

  return total_size;
}
size_t ExtensionErrors::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionErrors)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string errors = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errors());

    // required int32 number_of_attempts = 1;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_number_of_attempts());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionErrors::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionErrors*>(
      &from));
}

void ExtensionErrors::MergeFrom(const ExtensionErrors& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionErrors)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_errors(from._internal_errors());
    }
    if (cached_has_bits & 0x00000002u) {
      number_of_attempts_ = from.number_of_attempts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionErrors::CopyFrom(const ExtensionErrors& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionErrors)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionErrors::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ExtensionErrors::InternalSwap(ExtensionErrors* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &errors_, lhs_arena,
      &other->errors_, rhs_arena
  );
  swap(number_of_attempts_, other->number_of_attempts_);
}

std::string ExtensionErrors::GetTypeName() const {
  return "userfeedback.ExtensionErrors";
}


// ===================================================================

class ExtensionSubmit::_Internal {
 public:
  using HasBits = decltype(std::declval<ExtensionSubmit>()._has_bits_);
  static const ::userfeedback::CommonData& common_data(const ExtensionSubmit* msg);
  static void set_has_common_data(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userfeedback::WebData& web_data(const ExtensionSubmit* msg);
  static void set_has_web_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::userfeedback::PostedScreenshot& screenshot(const ExtensionSubmit* msg);
  static void set_has_screenshot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::userfeedback::ChromeData& chrome_data(const ExtensionSubmit* msg);
  static void set_has_chrome_data(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_category_tag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_product_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_bucket(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000004c) ^ 0x0000004c) != 0;
  }
};

const ::userfeedback::CommonData&
ExtensionSubmit::_Internal::common_data(const ExtensionSubmit* msg) {
  return *msg->common_data_;
}
const ::userfeedback::WebData&
ExtensionSubmit::_Internal::web_data(const ExtensionSubmit* msg) {
  return *msg->web_data_;
}
const ::userfeedback::PostedScreenshot&
ExtensionSubmit::_Internal::screenshot(const ExtensionSubmit* msg) {
  return *msg->screenshot_;
}
const ::userfeedback::ChromeData&
ExtensionSubmit::_Internal::chrome_data(const ExtensionSubmit* msg) {
  return *msg->chrome_data_;
}
void ExtensionSubmit::clear_common_data() {
  if (common_data_ != nullptr) common_data_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void ExtensionSubmit::clear_web_data() {
  if (web_data_ != nullptr) web_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void ExtensionSubmit::clear_chrome_data() {
  if (chrome_data_ != nullptr) chrome_data_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
void ExtensionSubmit::clear_product_specific_binary_data() {
  product_specific_binary_data_.Clear();
}
ExtensionSubmit::ExtensionSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  product_specific_binary_data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.ExtensionSubmit)
}
ExtensionSubmit::ExtensionSubmit(const ExtensionSubmit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      product_specific_binary_data_(from.product_specific_binary_data_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  category_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    category_tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category_tag()) {
    category_tag_.Set(from._internal_category_tag(), 
      GetArenaForAllocation());
  }
  bucket_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    bucket_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_bucket()) {
    bucket_.Set(from._internal_bucket(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_common_data()) {
    common_data_ = new ::userfeedback::CommonData(*from.common_data_);
  } else {
    common_data_ = nullptr;
  }
  if (from._internal_has_web_data()) {
    web_data_ = new ::userfeedback::WebData(*from.web_data_);
  } else {
    web_data_ = nullptr;
  }
  if (from._internal_has_screenshot()) {
    screenshot_ = new ::userfeedback::PostedScreenshot(*from.screenshot_);
  } else {
    screenshot_ = nullptr;
  }
  if (from._internal_has_chrome_data()) {
    chrome_data_ = new ::userfeedback::ChromeData(*from.chrome_data_);
  } else {
    chrome_data_ = nullptr;
  }
  ::memcpy(&type_id_, &from.type_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&type_id_)) + sizeof(product_id_));
  // @@protoc_insertion_point(copy_constructor:userfeedback.ExtensionSubmit)
}

inline void ExtensionSubmit::SharedCtor() {
category_tag_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  category_tag_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
bucket_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  bucket_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&product_id_) -
    reinterpret_cast<char*>(&common_data_)) + sizeof(product_id_));
}

ExtensionSubmit::~ExtensionSubmit() {
  // @@protoc_insertion_point(destructor:userfeedback.ExtensionSubmit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtensionSubmit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  category_tag_.Destroy();
  bucket_.Destroy();
  if (this != internal_default_instance()) delete common_data_;
  if (this != internal_default_instance()) delete web_data_;
  if (this != internal_default_instance()) delete screenshot_;
  if (this != internal_default_instance()) delete chrome_data_;
}

void ExtensionSubmit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ExtensionSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.ExtensionSubmit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_specific_binary_data_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      category_tag_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bucket_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(common_data_ != nullptr);
      common_data_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(web_data_ != nullptr);
      web_data_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(screenshot_ != nullptr);
      screenshot_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(chrome_data_ != nullptr);
      chrome_data_->Clear();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&type_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&product_id_) -
        reinterpret_cast<char*>(&type_id_)) + sizeof(product_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ExtensionSubmit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .userfeedback.CommonData common_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .userfeedback.WebData web_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.PostedScreenshot screenshot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_screenshot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.ChromeData chrome_data = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_product_specific_binary_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional string category_tag = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_category_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 product_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _Internal::set_has_product_id(&has_bits);
          product_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string bucket = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_bucket();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtensionSubmit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.ExtensionSubmit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.CommonData common_data = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common_data(this),
        _Internal::common_data(this).GetCachedSize(), target, stream);
  }

  // required .userfeedback.WebData web_data = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::web_data(this),
        _Internal::web_data(this).GetCachedSize(), target, stream);
  }

  // required int32 type_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type_id(), target);
  }

  // optional .userfeedback.PostedScreenshot screenshot = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::screenshot(this),
        _Internal::screenshot(this).GetCachedSize(), target, stream);
  }

  // optional .userfeedback.ChromeData chrome_data = 14;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::chrome_data(this),
        _Internal::chrome_data(this).GetCachedSize(), target, stream);
  }

  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_product_specific_binary_data_size()); i < n; i++) {
    const auto& repfield = this->_internal_product_specific_binary_data(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string category_tag = 16;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_category_tag(), target);
  }

  // optional int32 product_id = 17;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_product_id(), target);
  }

  // optional string bucket = 18;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.ExtensionSubmit)
  return target;
}

size_t ExtensionSubmit::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.ExtensionSubmit)
  size_t total_size = 0;

  if (_internal_has_common_data()) {
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);
  }

  if (_internal_has_web_data()) {
    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);
  }

  if (_internal_has_type_id()) {
    // required int32 type_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
  }

  return total_size;
}
size_t ExtensionSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.ExtensionSubmit)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000004c) ^ 0x0000004c) == 0) {  // All required fields are present.
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);

    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);

    // required int32 type_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .userfeedback.ProductSpecificBinaryData product_specific_binary_data = 15;
  total_size += 1UL * this->_internal_product_specific_binary_data_size();
  for (const auto& msg : this->product_specific_binary_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string category_tag = 16;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_category_tag());
    }

    // optional string bucket = 18;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_bucket());
    }

  }
  if (cached_has_bits & 0x00000030u) {
    // optional .userfeedback.PostedScreenshot screenshot = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *screenshot_);
    }

    // optional .userfeedback.ChromeData chrome_data = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_data_);
    }

  }
  // optional int32 product_id = 17;
  if (cached_has_bits & 0x00000080u) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_product_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExtensionSubmit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ExtensionSubmit*>(
      &from));
}

void ExtensionSubmit::MergeFrom(const ExtensionSubmit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.ExtensionSubmit)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  product_specific_binary_data_.MergeFrom(from.product_specific_binary_data_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_category_tag(from._internal_category_tag());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bucket(from._internal_bucket());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_common_data()->::userfeedback::CommonData::MergeFrom(from._internal_common_data());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_web_data()->::userfeedback::WebData::MergeFrom(from._internal_web_data());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_screenshot()->::userfeedback::PostedScreenshot::MergeFrom(from._internal_screenshot());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_chrome_data()->::userfeedback::ChromeData::MergeFrom(from._internal_chrome_data());
    }
    if (cached_has_bits & 0x00000040u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      product_id_ = from.product_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ExtensionSubmit::CopyFrom(const ExtensionSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.ExtensionSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtensionSubmit::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(product_specific_binary_data_))
    return false;
  if (_internal_has_web_data()) {
    if (!web_data_->IsInitialized()) return false;
  }
  if (_internal_has_screenshot()) {
    if (!screenshot_->IsInitialized()) return false;
  }
  return true;
}

void ExtensionSubmit::InternalSwap(ExtensionSubmit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  product_specific_binary_data_.InternalSwap(&other->product_specific_binary_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &category_tag_, lhs_arena,
      &other->category_tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &bucket_, lhs_arena,
      &other->bucket_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtensionSubmit, product_id_)
      + sizeof(ExtensionSubmit::product_id_)
      - PROTOBUF_FIELD_OFFSET(ExtensionSubmit, common_data_)>(
          reinterpret_cast<char*>(&common_data_),
          reinterpret_cast<char*>(&other->common_data_));
}

std::string ExtensionSubmit::GetTypeName() const {
  return "userfeedback.ExtensionSubmit";
}


// ===================================================================

class SuggestQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<SuggestQuery>()._has_bits_);
  static const ::userfeedback::CommonData& common_data(const SuggestQuery* msg);
  static void set_has_common_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::userfeedback::WebData& web_data(const SuggestQuery* msg);
  static void set_has_web_data(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::userfeedback::HtmlDocument& html_document_structure(const SuggestQuery* msg);
  static void set_has_html_document_structure(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::userfeedback::ChromeData& chrome_data(const SuggestQuery* msg);
  static void set_has_chrome_data(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000013) ^ 0x00000013) != 0;
  }
};

const ::userfeedback::CommonData&
SuggestQuery::_Internal::common_data(const SuggestQuery* msg) {
  return *msg->common_data_;
}
const ::userfeedback::WebData&
SuggestQuery::_Internal::web_data(const SuggestQuery* msg) {
  return *msg->web_data_;
}
const ::userfeedback::HtmlDocument&
SuggestQuery::_Internal::html_document_structure(const SuggestQuery* msg) {
  return *msg->html_document_structure_;
}
const ::userfeedback::ChromeData&
SuggestQuery::_Internal::chrome_data(const SuggestQuery* msg) {
  return *msg->chrome_data_;
}
void SuggestQuery::clear_common_data() {
  if (common_data_ != nullptr) common_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SuggestQuery::clear_web_data() {
  if (web_data_ != nullptr) web_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void SuggestQuery::clear_html_document_structure() {
  if (html_document_structure_ != nullptr) html_document_structure_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void SuggestQuery::clear_chrome_data() {
  if (chrome_data_ != nullptr) chrome_data_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
SuggestQuery::SuggestQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.SuggestQuery)
}
SuggestQuery::SuggestQuery(const SuggestQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_common_data()) {
    common_data_ = new ::userfeedback::CommonData(*from.common_data_);
  } else {
    common_data_ = nullptr;
  }
  if (from._internal_has_web_data()) {
    web_data_ = new ::userfeedback::WebData(*from.web_data_);
  } else {
    web_data_ = nullptr;
  }
  if (from._internal_has_html_document_structure()) {
    html_document_structure_ = new ::userfeedback::HtmlDocument(*from.html_document_structure_);
  } else {
    html_document_structure_ = nullptr;
  }
  if (from._internal_has_chrome_data()) {
    chrome_data_ = new ::userfeedback::ChromeData(*from.chrome_data_);
  } else {
    chrome_data_ = nullptr;
  }
  type_id_ = from.type_id_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.SuggestQuery)
}

inline void SuggestQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&common_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_id_) -
    reinterpret_cast<char*>(&common_data_)) + sizeof(type_id_));
}

SuggestQuery::~SuggestQuery() {
  // @@protoc_insertion_point(destructor:userfeedback.SuggestQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SuggestQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete common_data_;
  if (this != internal_default_instance()) delete web_data_;
  if (this != internal_default_instance()) delete html_document_structure_;
  if (this != internal_default_instance()) delete chrome_data_;
}

void SuggestQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SuggestQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.SuggestQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(common_data_ != nullptr);
      common_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(web_data_ != nullptr);
      web_data_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(html_document_structure_ != nullptr);
      html_document_structure_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(chrome_data_ != nullptr);
      chrome_data_->Clear();
    }
  }
  type_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SuggestQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .userfeedback.CommonData common_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .userfeedback.WebData web_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 type_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_type_id(&has_bits);
          type_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.HtmlDocument html_document_structure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_html_document_structure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .userfeedback.ChromeData chrome_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SuggestQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.SuggestQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .userfeedback.CommonData common_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::common_data(this),
        _Internal::common_data(this).GetCachedSize(), target, stream);
  }

  // required .userfeedback.WebData web_data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::web_data(this),
        _Internal::web_data(this).GetCachedSize(), target, stream);
  }

  // required int32 type_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_type_id(), target);
  }

  // optional .userfeedback.HtmlDocument html_document_structure = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::html_document_structure(this),
        _Internal::html_document_structure(this).GetCachedSize(), target, stream);
  }

  // optional .userfeedback.ChromeData chrome_data = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::chrome_data(this),
        _Internal::chrome_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.SuggestQuery)
  return target;
}

size_t SuggestQuery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:userfeedback.SuggestQuery)
  size_t total_size = 0;

  if (_internal_has_common_data()) {
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);
  }

  if (_internal_has_web_data()) {
    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);
  }

  if (_internal_has_type_id()) {
    // required int32 type_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());
  }

  return total_size;
}
size_t SuggestQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.SuggestQuery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required .userfeedback.CommonData common_data = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_data_);

    // required .userfeedback.WebData web_data = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_data_);

    // required int32 type_id = 3;
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000cu) {
    // optional .userfeedback.HtmlDocument html_document_structure = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *html_document_structure_);
    }

    // optional .userfeedback.ChromeData chrome_data = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_data_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SuggestQuery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SuggestQuery*>(
      &from));
}

void SuggestQuery::MergeFrom(const SuggestQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.SuggestQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_common_data()->::userfeedback::CommonData::MergeFrom(from._internal_common_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_web_data()->::userfeedback::WebData::MergeFrom(from._internal_web_data());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_html_document_structure()->::userfeedback::HtmlDocument::MergeFrom(from._internal_html_document_structure());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_chrome_data()->::userfeedback::ChromeData::MergeFrom(from._internal_chrome_data());
    }
    if (cached_has_bits & 0x00000010u) {
      type_id_ = from.type_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SuggestQuery::CopyFrom(const SuggestQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.SuggestQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SuggestQuery::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_web_data()) {
    if (!web_data_->IsInitialized()) return false;
  }
  if (_internal_has_html_document_structure()) {
    if (!html_document_structure_->IsInitialized()) return false;
  }
  return true;
}

void SuggestQuery::InternalSwap(SuggestQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SuggestQuery, type_id_)
      + sizeof(SuggestQuery::type_id_)
      - PROTOBUF_FIELD_OFFSET(SuggestQuery, common_data_)>(
          reinterpret_cast<char*>(&common_data_),
          reinterpret_cast<char*>(&other->common_data_));
}

std::string SuggestQuery::GetTypeName() const {
  return "userfeedback.SuggestQuery";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userfeedback::ExtensionPageRequestParams*
Arena::CreateMaybeMessage< ::userfeedback::ExtensionPageRequestParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::ExtensionPageRequestParams >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::PostedScreenshot*
Arena::CreateMaybeMessage< ::userfeedback::PostedScreenshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::PostedScreenshot >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::ExtensionErrors*
Arena::CreateMaybeMessage< ::userfeedback::ExtensionErrors >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::ExtensionErrors >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::ExtensionSubmit*
Arena::CreateMaybeMessage< ::userfeedback::ExtensionSubmit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::ExtensionSubmit >(arena);
}
template<> PROTOBUF_NOINLINE ::userfeedback::SuggestQuery*
Arena::CreateMaybeMessage< ::userfeedback::SuggestQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::SuggestQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
