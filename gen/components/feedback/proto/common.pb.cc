// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace userfeedback {
PROTOBUF_CONSTEXPR CommonData::CommonData(
    ::_pbi::ConstantInitialized)
  : description_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , user_email_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , description_translated_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_description_language_(nullptr, ::_pbi::ConstantInitialized{})
  , ui_language_(nullptr, ::_pbi::ConstantInitialized{})
  , unique_report_identifier_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , gaia_id_(uint64_t{0u}){}
struct CommonDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonDataDefaultTypeInternal() {}
  union {
    CommonData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonDataDefaultTypeInternal _CommonData_default_instance_;
}  // namespace userfeedback
namespace userfeedback {

// ===================================================================

class CommonData::_Internal {
 public:
  using HasBits = decltype(std::declval<CommonData>()._has_bits_);
  static void set_has_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_description(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_description_translated(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_source_description_language(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ui_language(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_user_email(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unique_report_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CommonData::_i_give_permission_to_break_this_code_default_source_description_language_{{{"en", 2}}, {nullptr}};
const ::PROTOBUF_NAMESPACE_ID::internal::LazyString CommonData::_i_give_permission_to_break_this_code_default_ui_language_{{{"en_US", 5}}, {nullptr}};
CommonData::CommonData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:userfeedback.CommonData)
}
CommonData::CommonData(const CommonData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description()) {
    description_.Set(from._internal_description(), 
      GetArenaForAllocation());
  }
  user_email_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    user_email_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_user_email()) {
    user_email_.Set(from._internal_user_email(), 
      GetArenaForAllocation());
  }
  description_translated_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_translated_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_description_translated()) {
    description_translated_.Set(from._internal_description_translated(), 
      GetArenaForAllocation());
  }
  source_description_language_.InitDefault();
  if (from._internal_has_source_description_language()) {
    source_description_language_.Set(from._internal_source_description_language(), 
      GetArenaForAllocation());
  }
  ui_language_.InitDefault();
  if (from._internal_has_ui_language()) {
    ui_language_.Set(from._internal_ui_language(), 
      GetArenaForAllocation());
  }
  unique_report_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    unique_report_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_unique_report_identifier()) {
    unique_report_identifier_.Set(from._internal_unique_report_identifier(), 
      GetArenaForAllocation());
  }
  gaia_id_ = from.gaia_id_;
  // @@protoc_insertion_point(copy_constructor:userfeedback.CommonData)
}

inline void CommonData::SharedCtor() {
description_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
user_email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  user_email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_translated_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_translated_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_description_language_.InitDefault();
ui_language_.InitDefault();
unique_report_identifier_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  unique_report_identifier_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
gaia_id_ = uint64_t{0u};
}

CommonData::~CommonData() {
  // @@protoc_insertion_point(destructor:userfeedback.CommonData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommonData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  description_.Destroy();
  user_email_.Destroy();
  description_translated_.Destroy();
  source_description_language_.Destroy();
  ui_language_.Destroy();
  unique_report_identifier_.Destroy();
}

void CommonData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommonData::Clear() {
// @@protoc_insertion_point(message_clear_start:userfeedback.CommonData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      description_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      user_email_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      description_translated_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      source_description_language_.ClearToDefault(::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_source_description_language_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000010u) {
      ui_language_.ClearToDefault(::userfeedback::CommonData::_i_give_permission_to_break_this_code_default_ui_language_, GetArenaForAllocation());
       }
    if (cached_has_bits & 0x00000020u) {
      unique_report_identifier_.ClearNonDefaultToEmpty();
    }
  }
  gaia_id_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CommonData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 gaia_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_gaia_id(&has_bits);
          gaia_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // optional string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string user_email = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_user_email();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string description_translated = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description_translated();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source_description_language = 5 [default = "en"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_source_description_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string ui_language = 6 [default = "en_US"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ui_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string unique_report_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_unique_report_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:userfeedback.CommonData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 gaia_id = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_gaia_id(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // optional string user_email = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_user_email(), target);
  }

  // optional string description_translated = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description_translated(), target);
  }

  // optional string source_description_language = 5 [default = "en"];
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_source_description_language(), target);
  }

  // optional string ui_language = 6 [default = "en_US"];
  if (cached_has_bits & 0x00000010u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ui_language(), target);
  }

  // optional string unique_report_identifier = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_unique_report_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:userfeedback.CommonData)
  return target;
}

size_t CommonData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:userfeedback.CommonData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description());
    }

    // optional string user_email = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_user_email());
    }

    // optional string description_translated = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_description_translated());
    }

    // optional string source_description_language = 5 [default = "en"];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_description_language());
    }

    // optional string ui_language = 6 [default = "en_US"];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ui_language());
    }

    // optional string unique_report_identifier = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_unique_report_identifier());
    }

    // optional fixed64 gaia_id = 1;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommonData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CommonData*>(
      &from));
}

void CommonData::MergeFrom(const CommonData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:userfeedback.CommonData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_description(from._internal_description());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_user_email(from._internal_user_email());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_description_translated(from._internal_description_translated());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_source_description_language(from._internal_source_description_language());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_ui_language(from._internal_ui_language());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_unique_report_identifier(from._internal_unique_report_identifier());
    }
    if (cached_has_bits & 0x00000040u) {
      gaia_id_ = from.gaia_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CommonData::CopyFrom(const CommonData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:userfeedback.CommonData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonData::IsInitialized() const {
  return true;
}

void CommonData::InternalSwap(CommonData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &user_email_, lhs_arena,
      &other->user_email_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &description_translated_, lhs_arena,
      &other->description_translated_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_description_language_, lhs_arena,
      &other->source_description_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ui_language_, lhs_arena,
      &other->ui_language_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &unique_report_identifier_, lhs_arena,
      &other->unique_report_identifier_, rhs_arena
  );
  swap(gaia_id_, other->gaia_id_);
}

std::string CommonData::GetTypeName() const {
  return "userfeedback.CommonData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace userfeedback
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::userfeedback::CommonData*
Arena::CreateMaybeMessage< ::userfeedback::CommonData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::userfeedback::CommonData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
