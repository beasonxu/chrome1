// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/gcm_driver/GCMDriver

#ifndef org_chromium_components_gcm_driver_GCMDriver_JNI
#define org_chromium_components_gcm_driver_GCMDriver_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char
    kClassPath_org_chromium_components_gcm_1driver_GCMDriver[];
const char kClassPath_org_chromium_components_gcm_1driver_GCMDriver[] =
    "org/chromium/components/gcm_driver/GCMDriver";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_gcm_1driver_GCMDriver_clazz(nullptr);
#ifndef org_chromium_components_gcm_1driver_GCMDriver_clazz_defined
#define org_chromium_components_gcm_1driver_GCMDriver_clazz_defined
inline jclass org_chromium_components_gcm_1driver_GCMDriver_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_components_gcm_1driver_GCMDriver,
      &g_org_chromium_components_gcm_1driver_GCMDriver_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace gcm {

JNI_GENERATOR_EXPORT void Java_J_N_MOEO6cdX(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeGCMDriverAndroid,
    jobject caller,
    jstring appId,
    jstring registrationId,
    jboolean success) {
  GCMDriverAndroid* native = reinterpret_cast<GCMDriverAndroid*>(nativeGCMDriverAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnRegisterFinished");
  return native->OnRegisterFinished(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, appId), base::android::JavaParamRef<jstring>(env,
      registrationId), success);
}

JNI_GENERATOR_EXPORT void Java_J_N_MDziew73(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeGCMDriverAndroid,
    jobject caller,
    jstring appId,
    jboolean success) {
  GCMDriverAndroid* native = reinterpret_cast<GCMDriverAndroid*>(nativeGCMDriverAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnUnregisterFinished");
  return native->OnUnregisterFinished(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, appId), success);
}

JNI_GENERATOR_EXPORT void Java_J_N_M6eL4wmM(
    JNIEnv* env,
    jclass jcaller,
    jlong nativeGCMDriverAndroid,
    jobject caller,
    jstring appId,
    jstring senderId,
    jstring messageId,
    jstring collapseKey,
    jbyteArray rawData,
    jobjectArray dataKeysAndValues) {
  GCMDriverAndroid* native = reinterpret_cast<GCMDriverAndroid*>(nativeGCMDriverAndroid);
  CHECK_NATIVE_PTR(env, jcaller, native, "OnMessageReceived");
  return native->OnMessageReceived(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, appId), base::android::JavaParamRef<jstring>(env,
      senderId), base::android::JavaParamRef<jstring>(env, messageId),
      base::android::JavaParamRef<jstring>(env, collapseKey),
      base::android::JavaParamRef<jbyteArray>(env, rawData),
      base::android::JavaParamRef<jobjectArray>(env, dataKeysAndValues));
}


static std::atomic<jmethodID> g_org_chromium_components_gcm_1driver_GCMDriver_create(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_GCMDriver_create(JNIEnv* env, jlong
    nativeGCMDriverAndroid) {
  jclass clazz = org_chromium_components_gcm_1driver_GCMDriver_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_gcm_1driver_GCMDriver_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_STATIC>(
          env,
          clazz,
          "create",
          "(J)Lorg/chromium/components/gcm_driver/GCMDriver;",
          &g_org_chromium_components_gcm_1driver_GCMDriver_create);

  jobject ret =
      env->CallStaticObjectMethod(clazz,
          call_context.base.method_id, nativeGCMDriverAndroid);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

static std::atomic<jmethodID> g_org_chromium_components_gcm_1driver_GCMDriver_destroy(nullptr);
static void Java_GCMDriver_destroy(JNIEnv* env, const base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_gcm_1driver_GCMDriver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_GCMDriver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "destroy",
          "()V",
          &g_org_chromium_components_gcm_1driver_GCMDriver_destroy);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_gcm_1driver_GCMDriver_replayPersistedMessages(nullptr);
static void Java_GCMDriver_replayPersistedMessages(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj, const base::android::JavaRef<jstring>& appId) {
  jclass clazz = org_chromium_components_gcm_1driver_GCMDriver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_GCMDriver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "replayPersistedMessages",
          "(Ljava/lang/String;)V",
          &g_org_chromium_components_gcm_1driver_GCMDriver_replayPersistedMessages);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, appId.obj());
}

static std::atomic<jmethodID> g_org_chromium_components_gcm_1driver_GCMDriver_register(nullptr);
static void Java_GCMDriver_register(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jstring>& appId,
    const base::android::JavaRef<jstring>& senderId) {
  jclass clazz = org_chromium_components_gcm_1driver_GCMDriver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_GCMDriver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "register",
          "(Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_components_gcm_1driver_GCMDriver_register);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, appId.obj(), senderId.obj());
}

static std::atomic<jmethodID> g_org_chromium_components_gcm_1driver_GCMDriver_unregister(nullptr);
static void Java_GCMDriver_unregister(JNIEnv* env, const base::android::JavaRef<jobject>& obj, const
    base::android::JavaRef<jstring>& appId,
    const base::android::JavaRef<jstring>& senderId) {
  jclass clazz = org_chromium_components_gcm_1driver_GCMDriver_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_gcm_1driver_GCMDriver_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "unregister",
          "(Ljava/lang/String;Ljava/lang/String;)V",
          &g_org_chromium_components_gcm_1driver_GCMDriver_unregister);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, appId.obj(), senderId.obj());
}

}  // namespace gcm

#endif  // org_chromium_components_gcm_driver_GCMDriver_JNI
