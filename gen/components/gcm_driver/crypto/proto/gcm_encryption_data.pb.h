// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gcm_encryption_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gcm_5fencryption_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gcm_5fencryption_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gcm_5fencryption_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gcm_5fencryption_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace gcm {
class EncryptionData;
struct EncryptionDataDefaultTypeInternal;
extern EncryptionDataDefaultTypeInternal _EncryptionData_default_instance_;
class KeyPair;
struct KeyPairDefaultTypeInternal;
extern KeyPairDefaultTypeInternal _KeyPair_default_instance_;
}  // namespace gcm
PROTOBUF_NAMESPACE_OPEN
template<> ::gcm::EncryptionData* Arena::CreateMaybeMessage<::gcm::EncryptionData>(Arena*);
template<> ::gcm::KeyPair* Arena::CreateMaybeMessage<::gcm::KeyPair>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gcm {

enum KeyPair_KeyType : int {
  KeyPair_KeyType_ECDH_P256 = 0
};
bool KeyPair_KeyType_IsValid(int value);
constexpr KeyPair_KeyType KeyPair_KeyType_KeyType_MIN = KeyPair_KeyType_ECDH_P256;
constexpr KeyPair_KeyType KeyPair_KeyType_KeyType_MAX = KeyPair_KeyType_ECDH_P256;
constexpr int KeyPair_KeyType_KeyType_ARRAYSIZE = KeyPair_KeyType_KeyType_MAX + 1;

const std::string& KeyPair_KeyType_Name(KeyPair_KeyType value);
template<typename T>
inline const std::string& KeyPair_KeyType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyPair_KeyType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyPair_KeyType_Name.");
  return KeyPair_KeyType_Name(static_cast<KeyPair_KeyType>(enum_t_value));
}
bool KeyPair_KeyType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeyPair_KeyType* value);
// ===================================================================

class KeyPair final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:gcm.KeyPair) */ {
 public:
  inline KeyPair() : KeyPair(nullptr) {}
  ~KeyPair() override;
  explicit PROTOBUF_CONSTEXPR KeyPair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyPair(const KeyPair& from);
  KeyPair(KeyPair&& from) noexcept
    : KeyPair() {
    *this = ::std::move(from);
  }

  inline KeyPair& operator=(const KeyPair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyPair& operator=(KeyPair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const KeyPair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyPair* internal_default_instance() {
    return reinterpret_cast<const KeyPair*>(
               &_KeyPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(KeyPair& a, KeyPair& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(KeyPair* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyPair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KeyPair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KeyPair>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const KeyPair& from);
  void MergeFrom(const KeyPair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyPair* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gcm.KeyPair";
  }
  protected:
  explicit KeyPair(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef KeyPair_KeyType KeyType;
  static constexpr KeyType ECDH_P256 =
    KeyPair_KeyType_ECDH_P256;
  static inline bool KeyType_IsValid(int value) {
    return KeyPair_KeyType_IsValid(value);
  }
  static constexpr KeyType KeyType_MIN =
    KeyPair_KeyType_KeyType_MIN;
  static constexpr KeyType KeyType_MAX =
    KeyPair_KeyType_KeyType_MAX;
  static constexpr int KeyType_ARRAYSIZE =
    KeyPair_KeyType_KeyType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& KeyType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KeyType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KeyType_Name.");
    return KeyPair_KeyType_Name(enum_t_value);
  }
  static inline bool KeyType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      KeyType* value) {
    return KeyPair_KeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrivateKeyFieldNumber = 2,
    kPublicKeyFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional bytes private_key = 2;
  bool has_private_key() const;
  private:
  bool _internal_has_private_key() const;
  public:
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // optional bytes public_key = 4;
  bool has_public_key() const;
  private:
  bool _internal_has_public_key() const;
  public:
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // required .gcm.KeyPair.KeyType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gcm::KeyPair_KeyType type() const;
  void set_type(::gcm::KeyPair_KeyType value);
  private:
  ::gcm::KeyPair_KeyType _internal_type() const;
  void _internal_set_type(::gcm::KeyPair_KeyType value);
  public:

  // @@protoc_insertion_point(class_scope:gcm.KeyPair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  int type_;
  friend struct ::TableStruct_gcm_5fencryption_5fdata_2eproto;
};
// -------------------------------------------------------------------

class EncryptionData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:gcm.EncryptionData) */ {
 public:
  inline EncryptionData() : EncryptionData(nullptr) {}
  ~EncryptionData() override;
  explicit PROTOBUF_CONSTEXPR EncryptionData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptionData(const EncryptionData& from);
  EncryptionData(EncryptionData&& from) noexcept
    : EncryptionData() {
    *this = ::std::move(from);
  }

  inline EncryptionData& operator=(const EncryptionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptionData& operator=(EncryptionData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncryptionData& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptionData* internal_default_instance() {
    return reinterpret_cast<const EncryptionData*>(
               &_EncryptionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EncryptionData& a, EncryptionData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(EncryptionData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptionData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptionData& from);
  void MergeFrom(const EncryptionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptionData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gcm.EncryptionData";
  }
  protected:
  explicit EncryptionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeysFieldNumber = 2,
    kAppIdFieldNumber = 1,
    kAuthSecretFieldNumber = 3,
    kAuthorizedEntityFieldNumber = 4,
    kPrivateKeyFieldNumber = 5,
  };
  // repeated .gcm.KeyPair keys = 2;
  int keys_size() const;
  private:
  int _internal_keys_size() const;
  public:
  void clear_keys();
  ::gcm::KeyPair* mutable_keys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >*
      mutable_keys();
  private:
  const ::gcm::KeyPair& _internal_keys(int index) const;
  ::gcm::KeyPair* _internal_add_keys();
  public:
  const ::gcm::KeyPair& keys(int index) const;
  ::gcm::KeyPair* add_keys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >&
      keys() const;

  // required string app_id = 1;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // optional bytes auth_secret = 3;
  bool has_auth_secret() const;
  private:
  bool _internal_has_auth_secret() const;
  public:
  void clear_auth_secret();
  const std::string& auth_secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_auth_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_auth_secret();
  PROTOBUF_NODISCARD std::string* release_auth_secret();
  void set_allocated_auth_secret(std::string* auth_secret);
  private:
  const std::string& _internal_auth_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_auth_secret(const std::string& value);
  std::string* _internal_mutable_auth_secret();
  public:

  // optional string authorized_entity = 4;
  bool has_authorized_entity() const;
  private:
  bool _internal_has_authorized_entity() const;
  public:
  void clear_authorized_entity();
  const std::string& authorized_entity() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_authorized_entity(ArgT0&& arg0, ArgT... args);
  std::string* mutable_authorized_entity();
  PROTOBUF_NODISCARD std::string* release_authorized_entity();
  void set_allocated_authorized_entity(std::string* authorized_entity);
  private:
  const std::string& _internal_authorized_entity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_authorized_entity(const std::string& value);
  std::string* _internal_mutable_authorized_entity();
  public:

  // optional string private_key = 5;
  bool has_private_key() const;
  private:
  bool _internal_has_private_key() const;
  public:
  void clear_private_key();
  const std::string& private_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_private_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_private_key();
  PROTOBUF_NODISCARD std::string* release_private_key();
  void set_allocated_private_key(std::string* private_key);
  private:
  const std::string& _internal_private_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_private_key(const std::string& value);
  std::string* _internal_mutable_private_key();
  public:

  // @@protoc_insertion_point(class_scope:gcm.EncryptionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair > keys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr auth_secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr authorized_entity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr private_key_;
  friend struct ::TableStruct_gcm_5fencryption_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyPair

// required .gcm.KeyPair.KeyType type = 1;
inline bool KeyPair::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool KeyPair::has_type() const {
  return _internal_has_type();
}
inline void KeyPair::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::gcm::KeyPair_KeyType KeyPair::_internal_type() const {
  return static_cast< ::gcm::KeyPair_KeyType >(type_);
}
inline ::gcm::KeyPair_KeyType KeyPair::type() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.type)
  return _internal_type();
}
inline void KeyPair::_internal_set_type(::gcm::KeyPair_KeyType value) {
  assert(::gcm::KeyPair_KeyType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void KeyPair::set_type(::gcm::KeyPair_KeyType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gcm.KeyPair.type)
}

// optional bytes private_key = 2;
inline bool KeyPair::_internal_has_private_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool KeyPair::has_private_key() const {
  return _internal_has_private_key();
}
inline void KeyPair::clear_private_key() {
  private_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& KeyPair::private_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyPair::set_private_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 private_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gcm.KeyPair.private_key)
}
inline std::string* KeyPair::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.private_key)
  return _s;
}
inline const std::string& KeyPair::_internal_private_key() const {
  return private_key_.Get();
}
inline void KeyPair::_internal_set_private_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  private_key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyPair::_internal_mutable_private_key() {
  _has_bits_[0] |= 0x00000001u;
  return private_key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyPair::release_private_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.private_key)
  if (!_internal_has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = private_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault()) {
    private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeyPair::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  private_key_.SetAllocated(private_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault()) {
    private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.private_key)
}

// optional bytes public_key = 4;
inline bool KeyPair::_internal_has_public_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool KeyPair::has_public_key() const {
  return _internal_has_public_key();
}
inline void KeyPair::clear_public_key() {
  public_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& KeyPair::public_key() const {
  // @@protoc_insertion_point(field_get:gcm.KeyPair.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KeyPair::set_public_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 public_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gcm.KeyPair.public_key)
}
inline std::string* KeyPair::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:gcm.KeyPair.public_key)
  return _s;
}
inline const std::string& KeyPair::_internal_public_key() const {
  return public_key_.Get();
}
inline void KeyPair::_internal_set_public_key(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* KeyPair::_internal_mutable_public_key() {
  _has_bits_[0] |= 0x00000002u;
  return public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* KeyPair::release_public_key() {
  // @@protoc_insertion_point(field_release:gcm.KeyPair.public_key)
  if (!_internal_has_public_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = public_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void KeyPair::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (public_key_.IsDefault()) {
    public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gcm.KeyPair.public_key)
}

// -------------------------------------------------------------------

// EncryptionData

// required string app_id = 1;
inline bool EncryptionData::_internal_has_app_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EncryptionData::has_app_id() const {
  return _internal_has_app_id();
}
inline void EncryptionData::clear_app_id() {
  app_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptionData::app_id() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionData::set_app_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 app_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.app_id)
}
inline std::string* EncryptionData::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.app_id)
  return _s;
}
inline const std::string& EncryptionData::_internal_app_id() const {
  return app_id_.Get();
}
inline void EncryptionData::_internal_set_app_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  app_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionData::_internal_mutable_app_id() {
  _has_bits_[0] |= 0x00000001u;
  return app_id_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionData::release_app_id() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.app_id)
  if (!_internal_has_app_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = app_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionData::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  app_id_.SetAllocated(app_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault()) {
    app_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.app_id)
}

// optional string authorized_entity = 4;
inline bool EncryptionData::_internal_has_authorized_entity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EncryptionData::has_authorized_entity() const {
  return _internal_has_authorized_entity();
}
inline void EncryptionData::clear_authorized_entity() {
  authorized_entity_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EncryptionData::authorized_entity() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.authorized_entity)
  return _internal_authorized_entity();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionData::set_authorized_entity(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 authorized_entity_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.authorized_entity)
}
inline std::string* EncryptionData::mutable_authorized_entity() {
  std::string* _s = _internal_mutable_authorized_entity();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.authorized_entity)
  return _s;
}
inline const std::string& EncryptionData::_internal_authorized_entity() const {
  return authorized_entity_.Get();
}
inline void EncryptionData::_internal_set_authorized_entity(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  authorized_entity_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionData::_internal_mutable_authorized_entity() {
  _has_bits_[0] |= 0x00000004u;
  return authorized_entity_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionData::release_authorized_entity() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.authorized_entity)
  if (!_internal_has_authorized_entity()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = authorized_entity_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authorized_entity_.IsDefault()) {
    authorized_entity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionData::set_allocated_authorized_entity(std::string* authorized_entity) {
  if (authorized_entity != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  authorized_entity_.SetAllocated(authorized_entity, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (authorized_entity_.IsDefault()) {
    authorized_entity_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.authorized_entity)
}

// repeated .gcm.KeyPair keys = 2;
inline int EncryptionData::_internal_keys_size() const {
  return keys_.size();
}
inline int EncryptionData::keys_size() const {
  return _internal_keys_size();
}
inline void EncryptionData::clear_keys() {
  keys_.Clear();
}
inline ::gcm::KeyPair* EncryptionData::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.keys)
  return keys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >*
EncryptionData::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:gcm.EncryptionData.keys)
  return &keys_;
}
inline const ::gcm::KeyPair& EncryptionData::_internal_keys(int index) const {
  return keys_.Get(index);
}
inline const ::gcm::KeyPair& EncryptionData::keys(int index) const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.keys)
  return _internal_keys(index);
}
inline ::gcm::KeyPair* EncryptionData::_internal_add_keys() {
  return keys_.Add();
}
inline ::gcm::KeyPair* EncryptionData::add_keys() {
  ::gcm::KeyPair* _add = _internal_add_keys();
  // @@protoc_insertion_point(field_add:gcm.EncryptionData.keys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gcm::KeyPair >&
EncryptionData::keys() const {
  // @@protoc_insertion_point(field_list:gcm.EncryptionData.keys)
  return keys_;
}

// optional string private_key = 5;
inline bool EncryptionData::_internal_has_private_key() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EncryptionData::has_private_key() const {
  return _internal_has_private_key();
}
inline void EncryptionData::clear_private_key() {
  private_key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EncryptionData::private_key() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.private_key)
  return _internal_private_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionData::set_private_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 private_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.private_key)
}
inline std::string* EncryptionData::mutable_private_key() {
  std::string* _s = _internal_mutable_private_key();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.private_key)
  return _s;
}
inline const std::string& EncryptionData::_internal_private_key() const {
  return private_key_.Get();
}
inline void EncryptionData::_internal_set_private_key(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  private_key_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionData::_internal_mutable_private_key() {
  _has_bits_[0] |= 0x00000008u;
  return private_key_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionData::release_private_key() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.private_key)
  if (!_internal_has_private_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  auto* p = private_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault()) {
    private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionData::set_allocated_private_key(std::string* private_key) {
  if (private_key != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  private_key_.SetAllocated(private_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (private_key_.IsDefault()) {
    private_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.private_key)
}

// optional bytes auth_secret = 3;
inline bool EncryptionData::_internal_has_auth_secret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EncryptionData::has_auth_secret() const {
  return _internal_has_auth_secret();
}
inline void EncryptionData::clear_auth_secret() {
  auth_secret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EncryptionData::auth_secret() const {
  // @@protoc_insertion_point(field_get:gcm.EncryptionData.auth_secret)
  return _internal_auth_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EncryptionData::set_auth_secret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 auth_secret_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:gcm.EncryptionData.auth_secret)
}
inline std::string* EncryptionData::mutable_auth_secret() {
  std::string* _s = _internal_mutable_auth_secret();
  // @@protoc_insertion_point(field_mutable:gcm.EncryptionData.auth_secret)
  return _s;
}
inline const std::string& EncryptionData::_internal_auth_secret() const {
  return auth_secret_.Get();
}
inline void EncryptionData::_internal_set_auth_secret(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  auth_secret_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptionData::_internal_mutable_auth_secret() {
  _has_bits_[0] |= 0x00000002u;
  return auth_secret_.Mutable(GetArenaForAllocation());
}
inline std::string* EncryptionData::release_auth_secret() {
  // @@protoc_insertion_point(field_release:gcm.EncryptionData.auth_secret)
  if (!_internal_has_auth_secret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = auth_secret_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_secret_.IsDefault()) {
    auth_secret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void EncryptionData::set_allocated_auth_secret(std::string* auth_secret) {
  if (auth_secret != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  auth_secret_.SetAllocated(auth_secret, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (auth_secret_.IsDefault()) {
    auth_secret_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:gcm.EncryptionData.auth_secret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gcm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gcm::KeyPair_KeyType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gcm_5fencryption_5fdata_2eproto
