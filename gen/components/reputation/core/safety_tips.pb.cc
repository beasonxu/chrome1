// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: safety_tips.proto

#include "safety_tips.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace reputation {
PROTOBUF_CONSTEXPR FlaggedPage::FlaggedPage(
    ::_pbi::ConstantInitialized)
  : pattern_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(0)
{}
struct FlaggedPageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FlaggedPageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FlaggedPageDefaultTypeInternal() {}
  union {
    FlaggedPage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FlaggedPageDefaultTypeInternal _FlaggedPage_default_instance_;
PROTOBUF_CONSTEXPR UrlPattern::UrlPattern(
    ::_pbi::ConstantInitialized)
  : cohort_index_()
  , _cohort_index_cached_byte_size_(0)
  , pattern_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UrlPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UrlPatternDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UrlPatternDefaultTypeInternal() {}
  union {
    UrlPattern _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UrlPatternDefaultTypeInternal _UrlPattern_default_instance_;
PROTOBUF_CONSTEXPR HostPattern::HostPattern(
    ::_pbi::ConstantInitialized)
  : regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct HostPatternDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HostPatternDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HostPatternDefaultTypeInternal() {}
  union {
    HostPattern _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HostPatternDefaultTypeInternal _HostPattern_default_instance_;
PROTOBUF_CONSTEXPR HeuristicLaunchConfig::HeuristicLaunchConfig(
    ::_pbi::ConstantInitialized)
  : heuristic_(0)

  , launch_percentage_(0u){}
struct HeuristicLaunchConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeuristicLaunchConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeuristicLaunchConfigDefaultTypeInternal() {}
  union {
    HeuristicLaunchConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeuristicLaunchConfigDefaultTypeInternal _HeuristicLaunchConfig_default_instance_;
PROTOBUF_CONSTEXPR Cohort::Cohort(
    ::_pbi::ConstantInitialized)
  : allowed_index_()
  , _allowed_index_cached_byte_size_(0)
  , canonical_index_()
  , _canonical_index_cached_byte_size_(0){}
struct CohortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CohortDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CohortDefaultTypeInternal() {}
  union {
    Cohort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CohortDefaultTypeInternal _Cohort_default_instance_;
PROTOBUF_CONSTEXPR SafetyTipsConfig::SafetyTipsConfig(
    ::_pbi::ConstantInitialized)
  : flagged_page_()
  , allowed_pattern_()
  , allowed_target_pattern_()
  , common_word_()
  , launch_config_()
  , canonical_pattern_()
  , cohort_()
  , version_id_(0u){}
struct SafetyTipsConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SafetyTipsConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SafetyTipsConfigDefaultTypeInternal() {}
  union {
    SafetyTipsConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SafetyTipsConfigDefaultTypeInternal _SafetyTipsConfig_default_instance_;
}  // namespace reputation
namespace reputation {
bool FlaggedPage_FlagType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FlaggedPage_FlagType_strings[3] = {};

static const char FlaggedPage_FlagType_names[] =
  "BAD_REP"
  "UNKNOWN"
  "YOUNG_DOMAIN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FlaggedPage_FlagType_entries[] = {
  { {FlaggedPage_FlagType_names + 0, 7}, 1 },
  { {FlaggedPage_FlagType_names + 7, 7}, 0 },
  { {FlaggedPage_FlagType_names + 14, 12}, 2 },
};

static const int FlaggedPage_FlagType_entries_by_number[] = {
  1, // 0 -> UNKNOWN
  0, // 1 -> BAD_REP
  2, // 2 -> YOUNG_DOMAIN
};

const std::string& FlaggedPage_FlagType_Name(
    FlaggedPage_FlagType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FlaggedPage_FlagType_entries,
          FlaggedPage_FlagType_entries_by_number,
          3, FlaggedPage_FlagType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FlaggedPage_FlagType_entries,
      FlaggedPage_FlagType_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FlaggedPage_FlagType_strings[idx].get();
}
bool FlaggedPage_FlagType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FlaggedPage_FlagType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FlaggedPage_FlagType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<FlaggedPage_FlagType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FlaggedPage_FlagType FlaggedPage::UNKNOWN;
constexpr FlaggedPage_FlagType FlaggedPage::BAD_REP;
constexpr FlaggedPage_FlagType FlaggedPage::YOUNG_DOMAIN;
constexpr FlaggedPage_FlagType FlaggedPage::FlagType_MIN;
constexpr FlaggedPage_FlagType FlaggedPage::FlagType_MAX;
constexpr int FlaggedPage::FlagType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool HeuristicLaunchConfig_Heuristic_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> HeuristicLaunchConfig_Heuristic_strings[5] = {};

static const char HeuristicLaunchConfig_Heuristic_names[] =
  "HEURISTIC_CHARACTER_SWAP_ENGAGED_SITES"
  "HEURISTIC_CHARACTER_SWAP_TOP_SITES"
  "HEURISTIC_COMBO_SQUATTING_ENGAGED_SITES"
  "HEURISTIC_COMBO_SQUATTING_TOP_DOMAINS"
  "HEURISTIC_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry HeuristicLaunchConfig_Heuristic_entries[] = {
  { {HeuristicLaunchConfig_Heuristic_names + 0, 38}, 1 },
  { {HeuristicLaunchConfig_Heuristic_names + 38, 34}, 2 },
  { {HeuristicLaunchConfig_Heuristic_names + 72, 39}, 4 },
  { {HeuristicLaunchConfig_Heuristic_names + 111, 37}, 3 },
  { {HeuristicLaunchConfig_Heuristic_names + 148, 17}, 0 },
};

static const int HeuristicLaunchConfig_Heuristic_entries_by_number[] = {
  4, // 0 -> HEURISTIC_UNKNOWN
  0, // 1 -> HEURISTIC_CHARACTER_SWAP_ENGAGED_SITES
  1, // 2 -> HEURISTIC_CHARACTER_SWAP_TOP_SITES
  3, // 3 -> HEURISTIC_COMBO_SQUATTING_TOP_DOMAINS
  2, // 4 -> HEURISTIC_COMBO_SQUATTING_ENGAGED_SITES
};

const std::string& HeuristicLaunchConfig_Heuristic_Name(
    HeuristicLaunchConfig_Heuristic value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          HeuristicLaunchConfig_Heuristic_entries,
          HeuristicLaunchConfig_Heuristic_entries_by_number,
          5, HeuristicLaunchConfig_Heuristic_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      HeuristicLaunchConfig_Heuristic_entries,
      HeuristicLaunchConfig_Heuristic_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     HeuristicLaunchConfig_Heuristic_strings[idx].get();
}
bool HeuristicLaunchConfig_Heuristic_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HeuristicLaunchConfig_Heuristic* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      HeuristicLaunchConfig_Heuristic_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<HeuristicLaunchConfig_Heuristic>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::HEURISTIC_UNKNOWN;
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::HEURISTIC_CHARACTER_SWAP_ENGAGED_SITES;
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::HEURISTIC_CHARACTER_SWAP_TOP_SITES;
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::HEURISTIC_COMBO_SQUATTING_TOP_DOMAINS;
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::HEURISTIC_COMBO_SQUATTING_ENGAGED_SITES;
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::Heuristic_MIN;
constexpr HeuristicLaunchConfig_Heuristic HeuristicLaunchConfig::Heuristic_MAX;
constexpr int HeuristicLaunchConfig::Heuristic_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FlaggedPage::_Internal {
 public:
  using HasBits = decltype(std::declval<FlaggedPage>()._has_bits_);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

FlaggedPage::FlaggedPage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reputation.FlaggedPage)
}
FlaggedPage::FlaggedPage(const FlaggedPage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pattern()) {
    pattern_.Set(from._internal_pattern(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:reputation.FlaggedPage)
}

inline void FlaggedPage::SharedCtor() {
pattern_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pattern_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

FlaggedPage::~FlaggedPage() {
  // @@protoc_insertion_point(destructor:reputation.FlaggedPage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FlaggedPage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pattern_.Destroy();
}

void FlaggedPage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FlaggedPage::Clear() {
// @@protoc_insertion_point(message_clear_start:reputation.FlaggedPage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pattern_.ClearNonDefaultToEmpty();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FlaggedPage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .reputation.FlaggedPage.FlagType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reputation::FlaggedPage_FlagType_IsValid(val))) {
            _internal_set_type(static_cast<::reputation::FlaggedPage_FlagType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FlaggedPage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reputation.FlaggedPage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pattern(), target);
  }

  // optional .reputation.FlaggedPage.FlagType type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reputation.FlaggedPage)
  return target;
}

size_t FlaggedPage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reputation.FlaggedPage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string pattern = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_pattern());
    }

    // optional .reputation.FlaggedPage.FlagType type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FlaggedPage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FlaggedPage*>(
      &from));
}

void FlaggedPage::MergeFrom(const FlaggedPage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reputation.FlaggedPage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pattern(from._internal_pattern());
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FlaggedPage::CopyFrom(const FlaggedPage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reputation.FlaggedPage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlaggedPage::IsInitialized() const {
  return true;
}

void FlaggedPage::InternalSwap(FlaggedPage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pattern_, lhs_arena,
      &other->pattern_, rhs_arena
  );
  swap(type_, other->type_);
}

std::string FlaggedPage::GetTypeName() const {
  return "reputation.FlaggedPage";
}


// ===================================================================

class UrlPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<UrlPattern>()._has_bits_);
  static void set_has_pattern(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

UrlPattern::UrlPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  cohort_index_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reputation.UrlPattern)
}
UrlPattern::UrlPattern(const UrlPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      cohort_index_(from.cohort_index_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  pattern_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    pattern_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_pattern()) {
    pattern_.Set(from._internal_pattern(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:reputation.UrlPattern)
}

inline void UrlPattern::SharedCtor() {
pattern_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  pattern_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UrlPattern::~UrlPattern() {
  // @@protoc_insertion_point(destructor:reputation.UrlPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UrlPattern::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pattern_.Destroy();
}

void UrlPattern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UrlPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:reputation.UrlPattern)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cohort_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pattern_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UrlPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 cohort_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_cohort_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_cohort_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UrlPattern::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reputation.UrlPattern)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pattern = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_pattern(), target);
  }

  // repeated uint32 cohort_index = 2 [packed = true];
  {
    int byte_size = _cohort_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_cohort_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reputation.UrlPattern)
  return target;
}

size_t UrlPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reputation.UrlPattern)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 cohort_index = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->cohort_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _cohort_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional string pattern = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pattern());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UrlPattern::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UrlPattern*>(
      &from));
}

void UrlPattern::MergeFrom(const UrlPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reputation.UrlPattern)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cohort_index_.MergeFrom(from.cohort_index_);
  if (from._internal_has_pattern()) {
    _internal_set_pattern(from._internal_pattern());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UrlPattern::CopyFrom(const UrlPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reputation.UrlPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UrlPattern::IsInitialized() const {
  return true;
}

void UrlPattern::InternalSwap(UrlPattern* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  cohort_index_.InternalSwap(&other->cohort_index_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &pattern_, lhs_arena,
      &other->pattern_, rhs_arena
  );
}

std::string UrlPattern::GetTypeName() const {
  return "reputation.UrlPattern";
}


// ===================================================================

class HostPattern::_Internal {
 public:
  using HasBits = decltype(std::declval<HostPattern>()._has_bits_);
  static void set_has_regex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

HostPattern::HostPattern(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reputation.HostPattern)
}
HostPattern::HostPattern(const HostPattern& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_regex()) {
    regex_.Set(from._internal_regex(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:reputation.HostPattern)
}

inline void HostPattern::SharedCtor() {
regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HostPattern::~HostPattern() {
  // @@protoc_insertion_point(destructor:reputation.HostPattern)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HostPattern::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  regex_.Destroy();
}

void HostPattern::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HostPattern::Clear() {
// @@protoc_insertion_point(message_clear_start:reputation.HostPattern)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    regex_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HostPattern::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string regex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HostPattern::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reputation.HostPattern)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string regex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reputation.HostPattern)
  return target;
}

size_t HostPattern::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reputation.HostPattern)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string regex = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HostPattern::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HostPattern*>(
      &from));
}

void HostPattern::MergeFrom(const HostPattern& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reputation.HostPattern)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_regex()) {
    _internal_set_regex(from._internal_regex());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HostPattern::CopyFrom(const HostPattern& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reputation.HostPattern)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostPattern::IsInitialized() const {
  return true;
}

void HostPattern::InternalSwap(HostPattern* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &regex_, lhs_arena,
      &other->regex_, rhs_arena
  );
}

std::string HostPattern::GetTypeName() const {
  return "reputation.HostPattern";
}


// ===================================================================

class HeuristicLaunchConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<HeuristicLaunchConfig>()._has_bits_);
  static void set_has_heuristic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_launch_percentage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

HeuristicLaunchConfig::HeuristicLaunchConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reputation.HeuristicLaunchConfig)
}
HeuristicLaunchConfig::HeuristicLaunchConfig(const HeuristicLaunchConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&heuristic_, &from.heuristic_,
    static_cast<size_t>(reinterpret_cast<char*>(&launch_percentage_) -
    reinterpret_cast<char*>(&heuristic_)) + sizeof(launch_percentage_));
  // @@protoc_insertion_point(copy_constructor:reputation.HeuristicLaunchConfig)
}

inline void HeuristicLaunchConfig::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&heuristic_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&launch_percentage_) -
    reinterpret_cast<char*>(&heuristic_)) + sizeof(launch_percentage_));
}

HeuristicLaunchConfig::~HeuristicLaunchConfig() {
  // @@protoc_insertion_point(destructor:reputation.HeuristicLaunchConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeuristicLaunchConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeuristicLaunchConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeuristicLaunchConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:reputation.HeuristicLaunchConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&heuristic_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&launch_percentage_) -
        reinterpret_cast<char*>(&heuristic_)) + sizeof(launch_percentage_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeuristicLaunchConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .reputation.HeuristicLaunchConfig.Heuristic heuristic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::reputation::HeuristicLaunchConfig_Heuristic_IsValid(val))) {
            _internal_set_heuristic(static_cast<::reputation::HeuristicLaunchConfig_Heuristic>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 launch_percentage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_launch_percentage(&has_bits);
          launch_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeuristicLaunchConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reputation.HeuristicLaunchConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .reputation.HeuristicLaunchConfig.Heuristic heuristic = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_heuristic(), target);
  }

  // optional uint32 launch_percentage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_launch_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reputation.HeuristicLaunchConfig)
  return target;
}

size_t HeuristicLaunchConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reputation.HeuristicLaunchConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .reputation.HeuristicLaunchConfig.Heuristic heuristic = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_heuristic());
    }

    // optional uint32 launch_percentage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_launch_percentage());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeuristicLaunchConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeuristicLaunchConfig*>(
      &from));
}

void HeuristicLaunchConfig::MergeFrom(const HeuristicLaunchConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reputation.HeuristicLaunchConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      heuristic_ = from.heuristic_;
    }
    if (cached_has_bits & 0x00000002u) {
      launch_percentage_ = from.launch_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeuristicLaunchConfig::CopyFrom(const HeuristicLaunchConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reputation.HeuristicLaunchConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeuristicLaunchConfig::IsInitialized() const {
  return true;
}

void HeuristicLaunchConfig::InternalSwap(HeuristicLaunchConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeuristicLaunchConfig, launch_percentage_)
      + sizeof(HeuristicLaunchConfig::launch_percentage_)
      - PROTOBUF_FIELD_OFFSET(HeuristicLaunchConfig, heuristic_)>(
          reinterpret_cast<char*>(&heuristic_),
          reinterpret_cast<char*>(&other->heuristic_));
}

std::string HeuristicLaunchConfig::GetTypeName() const {
  return "reputation.HeuristicLaunchConfig";
}


// ===================================================================

class Cohort::_Internal {
 public:
};

Cohort::Cohort(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  allowed_index_(arena),
  canonical_index_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reputation.Cohort)
}
Cohort::Cohort(const Cohort& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      allowed_index_(from.allowed_index_),
      canonical_index_(from.canonical_index_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:reputation.Cohort)
}

inline void Cohort::SharedCtor() {
}

Cohort::~Cohort() {
  // @@protoc_insertion_point(destructor:reputation.Cohort)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Cohort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Cohort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cohort::Clear() {
// @@protoc_insertion_point(message_clear_start:reputation.Cohort)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_index_.Clear();
  canonical_index_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Cohort::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint32 allowed_index = 1 [packed = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_allowed_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_allowed_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 canonical_index = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_canonical_index(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_canonical_index(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cohort::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reputation.Cohort)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 allowed_index = 1 [packed = true];
  {
    int byte_size = _allowed_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, _internal_allowed_index(), byte_size, target);
    }
  }

  // repeated uint32 canonical_index = 2 [packed = true];
  {
    int byte_size = _canonical_index_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_canonical_index(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reputation.Cohort)
  return target;
}

size_t Cohort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reputation.Cohort)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 allowed_index = 1 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->allowed_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _allowed_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 canonical_index = 2 [packed = true];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->canonical_index_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _canonical_index_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cohort::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Cohort*>(
      &from));
}

void Cohort::MergeFrom(const Cohort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reputation.Cohort)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_index_.MergeFrom(from.allowed_index_);
  canonical_index_.MergeFrom(from.canonical_index_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Cohort::CopyFrom(const Cohort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reputation.Cohort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cohort::IsInitialized() const {
  return true;
}

void Cohort::InternalSwap(Cohort* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  allowed_index_.InternalSwap(&other->allowed_index_);
  canonical_index_.InternalSwap(&other->canonical_index_);
}

std::string Cohort::GetTypeName() const {
  return "reputation.Cohort";
}


// ===================================================================

class SafetyTipsConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SafetyTipsConfig>()._has_bits_);
  static void set_has_version_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SafetyTipsConfig::SafetyTipsConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  flagged_page_(arena),
  allowed_pattern_(arena),
  allowed_target_pattern_(arena),
  common_word_(arena),
  launch_config_(arena),
  canonical_pattern_(arena),
  cohort_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:reputation.SafetyTipsConfig)
}
SafetyTipsConfig::SafetyTipsConfig(const SafetyTipsConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      flagged_page_(from.flagged_page_),
      allowed_pattern_(from.allowed_pattern_),
      allowed_target_pattern_(from.allowed_target_pattern_),
      common_word_(from.common_word_),
      launch_config_(from.launch_config_),
      canonical_pattern_(from.canonical_pattern_),
      cohort_(from.cohort_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_id_ = from.version_id_;
  // @@protoc_insertion_point(copy_constructor:reputation.SafetyTipsConfig)
}

inline void SafetyTipsConfig::SharedCtor() {
version_id_ = 0u;
}

SafetyTipsConfig::~SafetyTipsConfig() {
  // @@protoc_insertion_point(destructor:reputation.SafetyTipsConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SafetyTipsConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SafetyTipsConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SafetyTipsConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:reputation.SafetyTipsConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flagged_page_.Clear();
  allowed_pattern_.Clear();
  allowed_target_pattern_.Clear();
  common_word_.Clear();
  launch_config_.Clear();
  canonical_pattern_.Clear();
  cohort_.Clear();
  version_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SafetyTipsConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 version_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version_id(&has_bits);
          version_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .reputation.FlaggedPage flagged_page = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flagged_page(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .reputation.UrlPattern allowed_pattern = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowed_pattern(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .reputation.HostPattern allowed_target_pattern = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allowed_target_pattern(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string common_word = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_common_word();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .reputation.HeuristicLaunchConfig launch_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_launch_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .reputation.UrlPattern canonical_pattern = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_canonical_pattern(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .reputation.Cohort cohort = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cohort(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SafetyTipsConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:reputation.SafetyTipsConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 version_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_version_id(), target);
  }

  // repeated .reputation.FlaggedPage flagged_page = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_flagged_page_size()); i < n; i++) {
    const auto& repfield = this->_internal_flagged_page(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .reputation.UrlPattern allowed_pattern = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allowed_pattern_size()); i < n; i++) {
    const auto& repfield = this->_internal_allowed_pattern(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .reputation.HostPattern allowed_target_pattern = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_allowed_target_pattern_size()); i < n; i++) {
    const auto& repfield = this->_internal_allowed_target_pattern(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string common_word = 5;
  for (int i = 0, n = this->_internal_common_word_size(); i < n; i++) {
    const auto& s = this->_internal_common_word(i);
    target = stream->WriteString(5, s, target);
  }

  // repeated .reputation.HeuristicLaunchConfig launch_config = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_launch_config_size()); i < n; i++) {
    const auto& repfield = this->_internal_launch_config(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .reputation.UrlPattern canonical_pattern = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_canonical_pattern_size()); i < n; i++) {
    const auto& repfield = this->_internal_canonical_pattern(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .reputation.Cohort cohort = 8;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cohort_size()); i < n; i++) {
    const auto& repfield = this->_internal_cohort(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(8, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:reputation.SafetyTipsConfig)
  return target;
}

size_t SafetyTipsConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:reputation.SafetyTipsConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .reputation.FlaggedPage flagged_page = 2;
  total_size += 1UL * this->_internal_flagged_page_size();
  for (const auto& msg : this->flagged_page_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .reputation.UrlPattern allowed_pattern = 3;
  total_size += 1UL * this->_internal_allowed_pattern_size();
  for (const auto& msg : this->allowed_pattern_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .reputation.HostPattern allowed_target_pattern = 4;
  total_size += 1UL * this->_internal_allowed_target_pattern_size();
  for (const auto& msg : this->allowed_target_pattern_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string common_word = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(common_word_.size());
  for (int i = 0, n = common_word_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      common_word_.Get(i));
  }

  // repeated .reputation.HeuristicLaunchConfig launch_config = 6;
  total_size += 1UL * this->_internal_launch_config_size();
  for (const auto& msg : this->launch_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .reputation.UrlPattern canonical_pattern = 7;
  total_size += 1UL * this->_internal_canonical_pattern_size();
  for (const auto& msg : this->canonical_pattern_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .reputation.Cohort cohort = 8;
  total_size += 1UL * this->_internal_cohort_size();
  for (const auto& msg : this->cohort_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional uint32 version_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SafetyTipsConfig::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SafetyTipsConfig*>(
      &from));
}

void SafetyTipsConfig::MergeFrom(const SafetyTipsConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:reputation.SafetyTipsConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  flagged_page_.MergeFrom(from.flagged_page_);
  allowed_pattern_.MergeFrom(from.allowed_pattern_);
  allowed_target_pattern_.MergeFrom(from.allowed_target_pattern_);
  common_word_.MergeFrom(from.common_word_);
  launch_config_.MergeFrom(from.launch_config_);
  canonical_pattern_.MergeFrom(from.canonical_pattern_);
  cohort_.MergeFrom(from.cohort_);
  if (from._internal_has_version_id()) {
    _internal_set_version_id(from._internal_version_id());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SafetyTipsConfig::CopyFrom(const SafetyTipsConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:reputation.SafetyTipsConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SafetyTipsConfig::IsInitialized() const {
  return true;
}

void SafetyTipsConfig::InternalSwap(SafetyTipsConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  flagged_page_.InternalSwap(&other->flagged_page_);
  allowed_pattern_.InternalSwap(&other->allowed_pattern_);
  allowed_target_pattern_.InternalSwap(&other->allowed_target_pattern_);
  common_word_.InternalSwap(&other->common_word_);
  launch_config_.InternalSwap(&other->launch_config_);
  canonical_pattern_.InternalSwap(&other->canonical_pattern_);
  cohort_.InternalSwap(&other->cohort_);
  swap(version_id_, other->version_id_);
}

std::string SafetyTipsConfig::GetTypeName() const {
  return "reputation.SafetyTipsConfig";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace reputation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::reputation::FlaggedPage*
Arena::CreateMaybeMessage< ::reputation::FlaggedPage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reputation::FlaggedPage >(arena);
}
template<> PROTOBUF_NOINLINE ::reputation::UrlPattern*
Arena::CreateMaybeMessage< ::reputation::UrlPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reputation::UrlPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::reputation::HostPattern*
Arena::CreateMaybeMessage< ::reputation::HostPattern >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reputation::HostPattern >(arena);
}
template<> PROTOBUF_NOINLINE ::reputation::HeuristicLaunchConfig*
Arena::CreateMaybeMessage< ::reputation::HeuristicLaunchConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reputation::HeuristicLaunchConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::reputation::Cohort*
Arena::CreateMaybeMessage< ::reputation::Cohort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reputation::Cohort >(arena);
}
template<> PROTOBUF_NOINLINE ::reputation::SafetyTipsConfig*
Arena::CreateMaybeMessage< ::reputation::SafetyTipsConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::reputation::SafetyTipsConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
