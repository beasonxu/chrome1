// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/send_tab_to_self/proto/send_tab_to_self.proto

#include "components/send_tab_to_self/proto/send_tab_to_self.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace send_tab_to_self {
PROTOBUF_CONSTEXPR SendTabToSelfLocal::SendTabToSelfLocal(
    ::_pbi::ConstantInitialized)
  : specifics_(nullptr){}
struct SendTabToSelfLocalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendTabToSelfLocalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendTabToSelfLocalDefaultTypeInternal() {}
  union {
    SendTabToSelfLocal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendTabToSelfLocalDefaultTypeInternal _SendTabToSelfLocal_default_instance_;
}  // namespace send_tab_to_self
namespace send_tab_to_self {

// ===================================================================

class SendTabToSelfLocal::_Internal {
 public:
  using HasBits = decltype(std::declval<SendTabToSelfLocal>()._has_bits_);
  static const ::sync_pb::SendTabToSelfSpecifics& specifics(const SendTabToSelfLocal* msg);
  static void set_has_specifics(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sync_pb::SendTabToSelfSpecifics&
SendTabToSelfLocal::_Internal::specifics(const SendTabToSelfLocal* msg) {
  return *msg->specifics_;
}
void SendTabToSelfLocal::clear_specifics() {
  if (specifics_ != nullptr) specifics_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
SendTabToSelfLocal::SendTabToSelfLocal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:send_tab_to_self.SendTabToSelfLocal)
}
SendTabToSelfLocal::SendTabToSelfLocal(const SendTabToSelfLocal& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_specifics()) {
    specifics_ = new ::sync_pb::SendTabToSelfSpecifics(*from.specifics_);
  } else {
    specifics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:send_tab_to_self.SendTabToSelfLocal)
}

inline void SendTabToSelfLocal::SharedCtor() {
specifics_ = nullptr;
}

SendTabToSelfLocal::~SendTabToSelfLocal() {
  // @@protoc_insertion_point(destructor:send_tab_to_self.SendTabToSelfLocal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendTabToSelfLocal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete specifics_;
}

void SendTabToSelfLocal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SendTabToSelfLocal::Clear() {
// @@protoc_insertion_point(message_clear_start:send_tab_to_self.SendTabToSelfLocal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(specifics_ != nullptr);
    specifics_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendTabToSelfLocal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .sync_pb.SendTabToSelfSpecifics specifics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_specifics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendTabToSelfLocal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:send_tab_to_self.SendTabToSelfLocal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sync_pb.SendTabToSelfSpecifics specifics = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::specifics(this),
        _Internal::specifics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:send_tab_to_self.SendTabToSelfLocal)
  return target;
}

size_t SendTabToSelfLocal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:send_tab_to_self.SendTabToSelfLocal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sync_pb.SendTabToSelfSpecifics specifics = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *specifics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendTabToSelfLocal::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendTabToSelfLocal*>(
      &from));
}

void SendTabToSelfLocal::MergeFrom(const SendTabToSelfLocal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:send_tab_to_self.SendTabToSelfLocal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_specifics()) {
    _internal_mutable_specifics()->::sync_pb::SendTabToSelfSpecifics::MergeFrom(from._internal_specifics());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendTabToSelfLocal::CopyFrom(const SendTabToSelfLocal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:send_tab_to_self.SendTabToSelfLocal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTabToSelfLocal::IsInitialized() const {
  return true;
}

void SendTabToSelfLocal::InternalSwap(SendTabToSelfLocal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(specifics_, other->specifics_);
}

std::string SendTabToSelfLocal::GetTypeName() const {
  return "send_tab_to_self.SendTabToSelfLocal";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace send_tab_to_self
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::send_tab_to_self::SendTabToSelfLocal*
Arena::CreateMaybeMessage< ::send_tab_to_self::SendTabToSelfLocal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::send_tab_to_self::SendTabToSelfLocal >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
