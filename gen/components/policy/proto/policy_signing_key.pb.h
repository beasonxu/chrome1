// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: policy_signing_key.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_policy_5fsigning_5fkey_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_policy_5fsigning_5fkey_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include "components/policy/proto/policy_proto_export.h"
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_policy_5fsigning_5fkey_2eproto POLICY_PROTO_EXPORT
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct POLICY_PROTO_EXPORT TableStruct_policy_5fsigning_5fkey_2eproto {
static const uint32_t offsets[];
};
namespace enterprise_management {
class PolicySigningKey;
struct PolicySigningKeyDefaultTypeInternal;
POLICY_PROTO_EXPORT extern PolicySigningKeyDefaultTypeInternal _PolicySigningKey_default_instance_;
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> POLICY_PROTO_EXPORT ::enterprise_management::PolicySigningKey* Arena::CreateMaybeMessage<::enterprise_management::PolicySigningKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace enterprise_management {

// ===================================================================

class POLICY_PROTO_EXPORT PolicySigningKey final :
public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:enterprise_management.PolicySigningKey) */ {
public:
inline PolicySigningKey() : PolicySigningKey(nullptr) {}
~PolicySigningKey() override;
explicit PROTOBUF_CONSTEXPR PolicySigningKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

PolicySigningKey(const PolicySigningKey& from);
PolicySigningKey(PolicySigningKey&& from) noexcept
: PolicySigningKey() {
*this = ::std::move(from);
}

inline PolicySigningKey& operator=(const PolicySigningKey& from) {
CopyFrom(from);
return *this;
}
inline PolicySigningKey& operator=(PolicySigningKey&& from) noexcept {
if (this == &from) return *this;
if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
&& GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
) {
InternalSwap(&from);
} else {
CopyFrom(from);
}
return *this;
}

inline const std::string& unknown_fields() const {
return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
}
inline std::string* mutable_unknown_fields() {
return _internal_metadata_.mutable_unknown_fields<std::string>();
}

static const PolicySigningKey& default_instance() {
return *internal_default_instance();
}
static inline const PolicySigningKey* internal_default_instance() {
return reinterpret_cast<const PolicySigningKey*>(
&_PolicySigningKey_default_instance_);
}
static constexpr int kIndexInFileMessages =
0;

friend void swap(PolicySigningKey& a, PolicySigningKey& b) {
a.Swap(&b);
}
PROTOBUF_NOINLINE void Swap(PolicySigningKey* other) {
if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() != nullptr &&
GetOwningArena() == other->GetOwningArena()) {
#else  // PROTOBUF_FORCE_COPY_IN_SWAP
if (GetOwningArena() == other->GetOwningArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
InternalSwap(other);
} else {
::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
}
}
void UnsafeArenaSwap(PolicySigningKey* other) {
if (other == this) return;
GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
InternalSwap(other);
}

// implements Message ----------------------------------------------

PolicySigningKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
return CreateMaybeMessage<PolicySigningKey>(arena);
}
void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
void CopyFrom(const PolicySigningKey& from);
void MergeFrom(const PolicySigningKey& from);
PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
bool IsInitialized() const final;

size_t ByteSizeLong() const final;
const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
uint8_t* _InternalSerialize(
uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
int GetCachedSize() const final { return _cached_size_.Get(); }

private:
void SharedCtor();
void SharedDtor();
void SetCachedSize(int size) const;
void InternalSwap(PolicySigningKey* other);

private:
friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
return "enterprise_management.PolicySigningKey";
}
protected:
explicit PolicySigningKey(::PROTOBUF_NAMESPACE_ID::Arena* arena,
bool is_message_owned = false);
public:

std::string GetTypeName() const final;

// nested types ----------------------------------------------------

// accessors -------------------------------------------------------

enum : int {
kSigningKeyFieldNumber = 1,
kSigningKeySignatureFieldNumber = 2,
kVerificationKeyFieldNumber = 3,
};
// optional bytes signing_key = 1;
bool has_signing_key() const;
private:
bool _internal_has_signing_key() const;
public:
void clear_signing_key();
const std::string& signing_key() const;
template <typename ArgT0 = const std::string&, typename... ArgT>
void set_signing_key(ArgT0&& arg0, ArgT... args);
std::string* mutable_signing_key();
PROTOBUF_NODISCARD std::string* release_signing_key();
void set_allocated_signing_key(std::string* signing_key);
private:
const std::string& _internal_signing_key() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_signing_key(const std::string& value);
std::string* _internal_mutable_signing_key();
public:

// optional bytes signing_key_signature = 2;
bool has_signing_key_signature() const;
private:
bool _internal_has_signing_key_signature() const;
public:
void clear_signing_key_signature();
const std::string& signing_key_signature() const;
template <typename ArgT0 = const std::string&, typename... ArgT>
void set_signing_key_signature(ArgT0&& arg0, ArgT... args);
std::string* mutable_signing_key_signature();
PROTOBUF_NODISCARD std::string* release_signing_key_signature();
void set_allocated_signing_key_signature(std::string* signing_key_signature);
private:
const std::string& _internal_signing_key_signature() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_signing_key_signature(const std::string& value);
std::string* _internal_mutable_signing_key_signature();
public:

// optional bytes verification_key = 3;
bool has_verification_key() const;
private:
bool _internal_has_verification_key() const;
public:
void clear_verification_key();
const std::string& verification_key() const;
template <typename ArgT0 = const std::string&, typename... ArgT>
void set_verification_key(ArgT0&& arg0, ArgT... args);
std::string* mutable_verification_key();
PROTOBUF_NODISCARD std::string* release_verification_key();
void set_allocated_verification_key(std::string* verification_key);
private:
const std::string& _internal_verification_key() const;
inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_key(const std::string& value);
std::string* _internal_mutable_verification_key();
public:

// @@protoc_insertion_point(class_scope:enterprise_management.PolicySigningKey)
private:
class _Internal;

template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
typedef void InternalArenaConstructable_;
typedef void DestructorSkippable_;
::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signing_key_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signing_key_signature_;
::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_key_;
friend struct ::TableStruct_policy_5fsigning_5fkey_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolicySigningKey

// optional bytes signing_key = 1;
inline bool PolicySigningKey::_internal_has_signing_key() const {
bool value = (_has_bits_[0] & 0x00000001u) != 0;
return value;
}
inline bool PolicySigningKey::has_signing_key() const {
return _internal_has_signing_key();
}
inline void PolicySigningKey::clear_signing_key() {
signing_key_.ClearToEmpty();
_has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PolicySigningKey::signing_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key)
return _internal_signing_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicySigningKey::set_signing_key(ArgT0&& arg0, ArgT... args) {
_has_bits_[0] |= 0x00000001u;
signing_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
// @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key)
}
inline std::string* PolicySigningKey::mutable_signing_key() {
std::string* _s = _internal_mutable_signing_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key)
return _s;
}
inline const std::string& PolicySigningKey::_internal_signing_key() const {
return signing_key_.Get();
}
inline void PolicySigningKey::_internal_set_signing_key(const std::string& value) {
_has_bits_[0] |= 0x00000001u;
signing_key_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicySigningKey::_internal_mutable_signing_key() {
_has_bits_[0] |= 0x00000001u;
return signing_key_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicySigningKey::release_signing_key() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key)
if (!_internal_has_signing_key()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000001u;
auto* p = signing_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (signing_key_.IsDefault()) {
signing_key_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
return p;
}
inline void PolicySigningKey::set_allocated_signing_key(std::string* signing_key) {
if (signing_key != nullptr) {
_has_bits_[0] |= 0x00000001u;
} else {
_has_bits_[0] &= ~0x00000001u;
}
signing_key_.SetAllocated(signing_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (signing_key_.IsDefault()) {
signing_key_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key)
}

// optional bytes signing_key_signature = 2;
inline bool PolicySigningKey::_internal_has_signing_key_signature() const {
bool value = (_has_bits_[0] & 0x00000002u) != 0;
return value;
}
inline bool PolicySigningKey::has_signing_key_signature() const {
return _internal_has_signing_key_signature();
}
inline void PolicySigningKey::clear_signing_key_signature() {
signing_key_signature_.ClearToEmpty();
_has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PolicySigningKey::signing_key_signature() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.signing_key_signature)
return _internal_signing_key_signature();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicySigningKey::set_signing_key_signature(ArgT0&& arg0, ArgT... args) {
_has_bits_[0] |= 0x00000002u;
signing_key_signature_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
// @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.signing_key_signature)
}
inline std::string* PolicySigningKey::mutable_signing_key_signature() {
std::string* _s = _internal_mutable_signing_key_signature();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.signing_key_signature)
return _s;
}
inline const std::string& PolicySigningKey::_internal_signing_key_signature() const {
return signing_key_signature_.Get();
}
inline void PolicySigningKey::_internal_set_signing_key_signature(const std::string& value) {
_has_bits_[0] |= 0x00000002u;
signing_key_signature_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicySigningKey::_internal_mutable_signing_key_signature() {
_has_bits_[0] |= 0x00000002u;
return signing_key_signature_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicySigningKey::release_signing_key_signature() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.signing_key_signature)
if (!_internal_has_signing_key_signature()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000002u;
auto* p = signing_key_signature_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (signing_key_signature_.IsDefault()) {
signing_key_signature_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
return p;
}
inline void PolicySigningKey::set_allocated_signing_key_signature(std::string* signing_key_signature) {
if (signing_key_signature != nullptr) {
_has_bits_[0] |= 0x00000002u;
} else {
_has_bits_[0] &= ~0x00000002u;
}
signing_key_signature_.SetAllocated(signing_key_signature, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (signing_key_signature_.IsDefault()) {
signing_key_signature_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.signing_key_signature)
}

// optional bytes verification_key = 3;
inline bool PolicySigningKey::_internal_has_verification_key() const {
bool value = (_has_bits_[0] & 0x00000004u) != 0;
return value;
}
inline bool PolicySigningKey::has_verification_key() const {
return _internal_has_verification_key();
}
inline void PolicySigningKey::clear_verification_key() {
verification_key_.ClearToEmpty();
_has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PolicySigningKey::verification_key() const {
// @@protoc_insertion_point(field_get:enterprise_management.PolicySigningKey.verification_key)
return _internal_verification_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicySigningKey::set_verification_key(ArgT0&& arg0, ArgT... args) {
_has_bits_[0] |= 0x00000004u;
verification_key_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
// @@protoc_insertion_point(field_set:enterprise_management.PolicySigningKey.verification_key)
}
inline std::string* PolicySigningKey::mutable_verification_key() {
std::string* _s = _internal_mutable_verification_key();
// @@protoc_insertion_point(field_mutable:enterprise_management.PolicySigningKey.verification_key)
return _s;
}
inline const std::string& PolicySigningKey::_internal_verification_key() const {
return verification_key_.Get();
}
inline void PolicySigningKey::_internal_set_verification_key(const std::string& value) {
_has_bits_[0] |= 0x00000004u;
verification_key_.Set(value, GetArenaForAllocation());
}
inline std::string* PolicySigningKey::_internal_mutable_verification_key() {
_has_bits_[0] |= 0x00000004u;
return verification_key_.Mutable(GetArenaForAllocation());
}
inline std::string* PolicySigningKey::release_verification_key() {
// @@protoc_insertion_point(field_release:enterprise_management.PolicySigningKey.verification_key)
if (!_internal_has_verification_key()) {
return nullptr;
}
_has_bits_[0] &= ~0x00000004u;
auto* p = verification_key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (verification_key_.IsDefault()) {
verification_key_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
return p;
}
inline void PolicySigningKey::set_allocated_verification_key(std::string* verification_key) {
if (verification_key != nullptr) {
_has_bits_[0] |= 0x00000004u;
} else {
_has_bits_[0] &= ~0x00000004u;
}
verification_key_.SetAllocated(verification_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
if (verification_key_.IsDefault()) {
verification_key_.Set("", GetArenaForAllocation());
}
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
// @@protoc_insertion_point(field_set_allocated:enterprise_management.PolicySigningKey.verification_key)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace enterprise_management

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_policy_5fsigning_5fkey_2eproto
