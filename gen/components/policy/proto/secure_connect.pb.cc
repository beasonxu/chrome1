// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: secure_connect.proto

#include "secure_connect.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace enterprise_management {
PROTOBUF_CONSTEXPR GetManagedAccountsSigninRestrictionResponse::GetManagedAccountsSigninRestrictionResponse(
    ::_pbi::ConstantInitialized)
  : policy_value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , policy_options_(nullptr)
  , has_error_(false){}
struct GetManagedAccountsSigninRestrictionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetManagedAccountsSigninRestrictionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetManagedAccountsSigninRestrictionResponseDefaultTypeInternal() {}
  union {
    GetManagedAccountsSigninRestrictionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetManagedAccountsSigninRestrictionResponseDefaultTypeInternal _GetManagedAccountsSigninRestrictionResponse_default_instance_;
}  // namespace enterprise_management
namespace enterprise_management {

// ===================================================================

class GetManagedAccountsSigninRestrictionResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetManagedAccountsSigninRestrictionResponse>()._has_bits_);
  static void set_has_policy_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::enterprise_management::PolicyOptions& policy_options(const GetManagedAccountsSigninRestrictionResponse* msg);
  static void set_has_policy_options(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_has_error(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::enterprise_management::PolicyOptions&
GetManagedAccountsSigninRestrictionResponse::_Internal::policy_options(const GetManagedAccountsSigninRestrictionResponse* msg) {
  return *msg->policy_options_;
}
void GetManagedAccountsSigninRestrictionResponse::clear_policy_options() {
  if (policy_options_ != nullptr) policy_options_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
GetManagedAccountsSigninRestrictionResponse::GetManagedAccountsSigninRestrictionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
}
GetManagedAccountsSigninRestrictionResponse::GetManagedAccountsSigninRestrictionResponse(const GetManagedAccountsSigninRestrictionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  policy_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_policy_value()) {
    policy_value_.Set(from._internal_policy_value(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_policy_options()) {
    policy_options_ = new ::enterprise_management::PolicyOptions(*from.policy_options_);
  } else {
    policy_options_ = nullptr;
  }
  has_error_ = from.has_error_;
  // @@protoc_insertion_point(copy_constructor:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
}

inline void GetManagedAccountsSigninRestrictionResponse::SharedCtor() {
policy_value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_options_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&has_error_) -
    reinterpret_cast<char*>(&policy_options_)) + sizeof(has_error_));
}

GetManagedAccountsSigninRestrictionResponse::~GetManagedAccountsSigninRestrictionResponse() {
  // @@protoc_insertion_point(destructor:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetManagedAccountsSigninRestrictionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policy_value_.Destroy();
  if (this != internal_default_instance()) delete policy_options_;
}

void GetManagedAccountsSigninRestrictionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetManagedAccountsSigninRestrictionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      policy_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(policy_options_ != nullptr);
      policy_options_->Clear();
    }
  }
  has_error_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetManagedAccountsSigninRestrictionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string policy_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .enterprise_management.PolicyOptions policy_options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool has_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_has_error(&has_bits);
          has_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetManagedAccountsSigninRestrictionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string policy_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_value(), target);
  }

  // optional .enterprise_management.PolicyOptions policy_options = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::policy_options(this),
        _Internal::policy_options(this).GetCachedSize(), target, stream);
  }

  // optional bool has_error = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_has_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  return target;
}

size_t GetManagedAccountsSigninRestrictionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string policy_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_policy_value());
    }

    // optional .enterprise_management.PolicyOptions policy_options = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *policy_options_);
    }

    // optional bool has_error = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetManagedAccountsSigninRestrictionResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetManagedAccountsSigninRestrictionResponse*>(
      &from));
}

void GetManagedAccountsSigninRestrictionResponse::MergeFrom(const GetManagedAccountsSigninRestrictionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_policy_value(from._internal_policy_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_policy_options()->::enterprise_management::PolicyOptions::MergeFrom(from._internal_policy_options());
    }
    if (cached_has_bits & 0x00000004u) {
      has_error_ = from.has_error_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetManagedAccountsSigninRestrictionResponse::CopyFrom(const GetManagedAccountsSigninRestrictionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:enterprise_management.GetManagedAccountsSigninRestrictionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetManagedAccountsSigninRestrictionResponse::IsInitialized() const {
  return true;
}

void GetManagedAccountsSigninRestrictionResponse::InternalSwap(GetManagedAccountsSigninRestrictionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &policy_value_, lhs_arena,
      &other->policy_value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetManagedAccountsSigninRestrictionResponse, has_error_)
      + sizeof(GetManagedAccountsSigninRestrictionResponse::has_error_)
      - PROTOBUF_FIELD_OFFSET(GetManagedAccountsSigninRestrictionResponse, policy_options_)>(
          reinterpret_cast<char*>(&policy_options_),
          reinterpret_cast<char*>(&other->policy_options_));
}

std::string GetManagedAccountsSigninRestrictionResponse::GetTypeName() const {
  return "enterprise_management.GetManagedAccountsSigninRestrictionResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace enterprise_management
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::enterprise_management::GetManagedAccountsSigninRestrictionResponse*
Arena::CreateMaybeMessage< ::enterprise_management::GetManagedAccountsSigninRestrictionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::enterprise_management::GetManagedAccountsSigninRestrictionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
