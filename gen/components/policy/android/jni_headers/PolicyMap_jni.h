// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/policy/PolicyMap

#ifndef org_chromium_components_policy_PolicyMap_JNI
#define org_chromium_components_policy_PolicyMap_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_components_policy_PolicyMap[];
const char kClassPath_org_chromium_components_policy_PolicyMap[] =
    "org/chromium/components/policy/PolicyMap";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_policy_PolicyMap_clazz(nullptr);
#ifndef org_chromium_components_policy_PolicyMap_clazz_defined
#define org_chromium_components_policy_PolicyMap_clazz_defined
inline jclass org_chromium_components_policy_PolicyMap_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_components_policy_PolicyMap,
      &g_org_chromium_components_policy_PolicyMap_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace policy {
namespace android {

JNI_GENERATOR_EXPORT jboolean Java_J_N_MImr1kgV(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jstring policy) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "HasValue", false);
  return native->HasValue(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policy));
}

JNI_GENERATOR_EXPORT jint Java_J_N_MNIDvfzY(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jstring policy) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetIntValue", 0);
  return native->GetIntValue(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policy));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MG3FgY5r(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jstring policy) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetBooleanValue", false);
  return native->GetBooleanValue(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policy));
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MEWWQoKk(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jstring policy) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetStringValue", NULL);
  return native->GetStringValue(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policy)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MQRev50_1(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jstring policy) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetListValue", NULL);
  return native->GetListValue(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policy)).Release();
}

JNI_GENERATOR_EXPORT jstring Java_J_N_MKY_1klU2(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jstring policy) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetDictValue", NULL);
  return native->GetDictValue(env, base::android::JavaParamRef<jobject>(env, caller),
      base::android::JavaParamRef<jstring>(env, policy)).Release();
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MiO_00024KcSn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyMap,
    jobject caller,
    jlong nativeOtherPolicyMap) {
  PolicyMapAndroid* native = reinterpret_cast<PolicyMapAndroid*>(nativePolicyMap);
  CHECK_NATIVE_PTR(env, jcaller, native, "Equals", false);
  return native->Equals(env, base::android::JavaParamRef<jobject>(env, caller),
      nativeOtherPolicyMap);
}


static std::atomic<jmethodID> g_org_chromium_components_policy_PolicyMap_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PolicyMap_Constructor(JNIEnv* env, jlong
    nativePolicyMap) {
  jclass clazz = org_chromium_components_policy_PolicyMap_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_policy_PolicyMap_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
          &g_org_chromium_components_policy_PolicyMap_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativePolicyMap);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android
}  // namespace policy

#endif  // org_chromium_components_policy_PolicyMap_JNI
