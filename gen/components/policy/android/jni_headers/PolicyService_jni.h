// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/policy/PolicyService

#ifndef org_chromium_components_policy_PolicyService_JNI
#define org_chromium_components_policy_PolicyService_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.

JNI_REGISTRATION_EXPORT extern const char kClassPath_org_chromium_components_policy_PolicyService[];
const char kClassPath_org_chromium_components_policy_PolicyService[] =
    "org/chromium/components/policy/PolicyService";
// Leaking this jclass as we cannot use LazyInstance from some threads.
JNI_REGISTRATION_EXPORT std::atomic<jclass>
    g_org_chromium_components_policy_PolicyService_clazz(nullptr);
#ifndef org_chromium_components_policy_PolicyService_clazz_defined
#define org_chromium_components_policy_PolicyService_clazz_defined
inline jclass org_chromium_components_policy_PolicyService_clazz(JNIEnv* env) {
  return base::android::LazyGetClass(env, kClassPath_org_chromium_components_policy_PolicyService,
      &g_org_chromium_components_policy_PolicyService_clazz);
}
#endif


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace policy {
namespace android {

JNI_GENERATOR_EXPORT void Java_J_N_M4YsjnbO(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyService,
    jobject caller) {
  PolicyServiceAndroid* native = reinterpret_cast<PolicyServiceAndroid*>(nativePolicyService);
  CHECK_NATIVE_PTR(env, jcaller, native, "AddObserver");
  return native->AddObserver(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT void Java_J_N_MU0pXsSP(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyService,
    jobject caller) {
  PolicyServiceAndroid* native = reinterpret_cast<PolicyServiceAndroid*>(nativePolicyService);
  CHECK_NATIVE_PTR(env, jcaller, native, "RemoveObserver");
  return native->RemoveObserver(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jboolean Java_J_N_MCCtS0px(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyService,
    jobject caller) {
  PolicyServiceAndroid* native = reinterpret_cast<PolicyServiceAndroid*>(nativePolicyService);
  CHECK_NATIVE_PTR(env, jcaller, native, "IsInitializationComplete", false);
  return native->IsInitializationComplete(env, base::android::JavaParamRef<jobject>(env, caller));
}

JNI_GENERATOR_EXPORT jobject Java_J_N_MtJKACFn(
    JNIEnv* env,
    jclass jcaller,
    jlong nativePolicyService,
    jobject caller) {
  PolicyServiceAndroid* native = reinterpret_cast<PolicyServiceAndroid*>(nativePolicyService);
  CHECK_NATIVE_PTR(env, jcaller, native, "GetPolicies", NULL);
  return native->GetPolicies(env, base::android::JavaParamRef<jobject>(env, caller)).Release();
}


static std::atomic<jmethodID>
    g_org_chromium_components_policy_PolicyService_onPolicyServiceInitialized(nullptr);
static void Java_PolicyService_onPolicyServiceInitialized(JNIEnv* env, const
    base::android::JavaRef<jobject>& obj) {
  jclass clazz = org_chromium_components_policy_PolicyService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_policy_PolicyService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPolicyServiceInitialized",
          "()V",
          &g_org_chromium_components_policy_PolicyService_onPolicyServiceInitialized);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id);
}

static std::atomic<jmethodID>
    g_org_chromium_components_policy_PolicyService_onPolicyUpdated(nullptr);
static void Java_PolicyService_onPolicyUpdated(JNIEnv* env, const base::android::JavaRef<jobject>&
    obj, const base::android::JavaRef<jobject>& previous,
    const base::android::JavaRef<jobject>& current) {
  jclass clazz = org_chromium_components_policy_PolicyService_clazz(env);
  CHECK_CLAZZ(env, obj.obj(),
      org_chromium_components_policy_PolicyService_clazz(env));

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "onPolicyUpdated",
          "(Lorg/chromium/components/policy/PolicyMap;Lorg/chromium/components/policy/PolicyMap;)V",
          &g_org_chromium_components_policy_PolicyService_onPolicyUpdated);

     env->CallVoidMethod(obj.obj(),
          call_context.base.method_id, previous.obj(), current.obj());
}

static std::atomic<jmethodID> g_org_chromium_components_policy_PolicyService_Constructor(nullptr);
static base::android::ScopedJavaLocalRef<jobject> Java_PolicyService_Constructor(JNIEnv* env, jlong
    nativePolicyService) {
  jclass clazz = org_chromium_components_policy_PolicyService_clazz(env);
  CHECK_CLAZZ(env, clazz,
      org_chromium_components_policy_PolicyService_clazz(env), NULL);

  jni_generator::JniJavaCallContextChecked call_context;
  call_context.Init<
      base::android::MethodID::TYPE_INSTANCE>(
          env,
          clazz,
          "<init>",
          "(J)V",
          &g_org_chromium_components_policy_PolicyService_Constructor);

  jobject ret =
      env->NewObject(clazz,
          call_context.base.method_id, nativePolicyService);
  return base::android::ScopedJavaLocalRef<jobject>(env, ret);
}

}  // namespace android
}  // namespace policy

#endif  // org_chromium_components_policy_PolicyService_JNI
