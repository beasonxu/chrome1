// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/page_entities_model_metadata.proto

#include "components/optimization_guide/proto/page_entities_model_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR PageEntitiesModelMetadata::PageEntitiesModelMetadata(
    ::_pbi::ConstantInitialized)
  : slice_()
  , max_model_format_feature_flag_(0){}
struct PageEntitiesModelMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageEntitiesModelMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageEntitiesModelMetadataDefaultTypeInternal() {}
  union {
    PageEntitiesModelMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageEntitiesModelMetadataDefaultTypeInternal _PageEntitiesModelMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {

// ===================================================================

class PageEntitiesModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PageEntitiesModelMetadata>()._has_bits_);
  static void set_has_max_model_format_feature_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PageEntitiesModelMetadata::PageEntitiesModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  slice_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageEntitiesModelMetadata)
}
PageEntitiesModelMetadata::PageEntitiesModelMetadata(const PageEntitiesModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      slice_(from.slice_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  max_model_format_feature_flag_ = from.max_model_format_feature_flag_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageEntitiesModelMetadata)
}

inline void PageEntitiesModelMetadata::SharedCtor() {
max_model_format_feature_flag_ = 0;
}

PageEntitiesModelMetadata::~PageEntitiesModelMetadata() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageEntitiesModelMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageEntitiesModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PageEntitiesModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageEntitiesModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageEntitiesModelMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_.Clear();
  max_model_format_feature_flag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageEntitiesModelMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_model_format_feature_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_model_format_feature_flag(&has_bits);
          max_model_format_feature_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_slice();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageEntitiesModelMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageEntitiesModelMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_model_format_feature_flag = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_model_format_feature_flag(), target);
  }

  // repeated string slice = 2;
  for (int i = 0, n = this->_internal_slice_size(); i < n; i++) {
    const auto& s = this->_internal_slice(i);
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageEntitiesModelMetadata)
  return target;
}

size_t PageEntitiesModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageEntitiesModelMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string slice = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(slice_.size());
  for (int i = 0, n = slice_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      slice_.Get(i));
  }

  // optional int32 max_model_format_feature_flag = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_model_format_feature_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageEntitiesModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageEntitiesModelMetadata*>(
      &from));
}

void PageEntitiesModelMetadata::MergeFrom(const PageEntitiesModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageEntitiesModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slice_.MergeFrom(from.slice_);
  if (from._internal_has_max_model_format_feature_flag()) {
    _internal_set_max_model_format_feature_flag(from._internal_max_model_format_feature_flag());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageEntitiesModelMetadata::CopyFrom(const PageEntitiesModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageEntitiesModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageEntitiesModelMetadata::IsInitialized() const {
  return true;
}

void PageEntitiesModelMetadata::InternalSwap(PageEntitiesModelMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  slice_.InternalSwap(&other->slice_);
  swap(max_model_format_feature_flag_, other->max_model_format_feature_flag_);
}

std::string PageEntitiesModelMetadata::GetTypeName() const {
  return "optimization_guide.proto.PageEntitiesModelMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageEntitiesModelMetadata*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageEntitiesModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageEntitiesModelMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
