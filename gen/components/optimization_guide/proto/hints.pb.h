// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/hints.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fhints_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fhints_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/optimization_guide/proto/common_types.pb.h"
#include "components/optimization_guide/proto/loading_predictor_metadata.pb.h"
#include "components/optimization_guide/proto/performance_hints_metadata.pb.h"
#include "components/optimization_guide/proto/public_image_metadata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2foptimization_5fguide_2fproto_2fhints_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto {
  static const uint32_t offsets[];
};
namespace optimization_guide {
namespace proto {
class BloomFilter;
struct BloomFilterDefaultTypeInternal;
extern BloomFilterDefaultTypeInternal _BloomFilter_default_instance_;
class Configuration;
struct ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class GetHintsRequest;
struct GetHintsRequestDefaultTypeInternal;
extern GetHintsRequestDefaultTypeInternal _GetHintsRequest_default_instance_;
class GetHintsResponse;
struct GetHintsResponseDefaultTypeInternal;
extern GetHintsResponseDefaultTypeInternal _GetHintsResponse_default_instance_;
class HashedHostInfos;
struct HashedHostInfosDefaultTypeInternal;
extern HashedHostInfosDefaultTypeInternal _HashedHostInfos_default_instance_;
class Hint;
struct HintDefaultTypeInternal;
extern HintDefaultTypeInternal _Hint_default_instance_;
class HostInfo;
struct HostInfoDefaultTypeInternal;
extern HostInfoDefaultTypeInternal _HostInfo_default_instance_;
class MatchedHintInfo;
struct MatchedHintInfoDefaultTypeInternal;
extern MatchedHintInfoDefaultTypeInternal _MatchedHintInfo_default_instance_;
class Optimization;
struct OptimizationDefaultTypeInternal;
extern OptimizationDefaultTypeInternal _Optimization_default_instance_;
class OptimizationFilter;
struct OptimizationFilterDefaultTypeInternal;
extern OptimizationFilterDefaultTypeInternal _OptimizationFilter_default_instance_;
class PageHint;
struct PageHintDefaultTypeInternal;
extern PageHintDefaultTypeInternal _PageHint_default_instance_;
class UrlInfo;
struct UrlInfoDefaultTypeInternal;
extern UrlInfoDefaultTypeInternal _UrlInfo_default_instance_;
class Version;
struct VersionDefaultTypeInternal;
extern VersionDefaultTypeInternal _Version_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> ::optimization_guide::proto::BloomFilter* Arena::CreateMaybeMessage<::optimization_guide::proto::BloomFilter>(Arena*);
template<> ::optimization_guide::proto::Configuration* Arena::CreateMaybeMessage<::optimization_guide::proto::Configuration>(Arena*);
template<> ::optimization_guide::proto::GetHintsRequest* Arena::CreateMaybeMessage<::optimization_guide::proto::GetHintsRequest>(Arena*);
template<> ::optimization_guide::proto::GetHintsResponse* Arena::CreateMaybeMessage<::optimization_guide::proto::GetHintsResponse>(Arena*);
template<> ::optimization_guide::proto::HashedHostInfos* Arena::CreateMaybeMessage<::optimization_guide::proto::HashedHostInfos>(Arena*);
template<> ::optimization_guide::proto::Hint* Arena::CreateMaybeMessage<::optimization_guide::proto::Hint>(Arena*);
template<> ::optimization_guide::proto::HostInfo* Arena::CreateMaybeMessage<::optimization_guide::proto::HostInfo>(Arena*);
template<> ::optimization_guide::proto::MatchedHintInfo* Arena::CreateMaybeMessage<::optimization_guide::proto::MatchedHintInfo>(Arena*);
template<> ::optimization_guide::proto::Optimization* Arena::CreateMaybeMessage<::optimization_guide::proto::Optimization>(Arena*);
template<> ::optimization_guide::proto::OptimizationFilter* Arena::CreateMaybeMessage<::optimization_guide::proto::OptimizationFilter>(Arena*);
template<> ::optimization_guide::proto::PageHint* Arena::CreateMaybeMessage<::optimization_guide::proto::PageHint>(Arena*);
template<> ::optimization_guide::proto::UrlInfo* Arena::CreateMaybeMessage<::optimization_guide::proto::UrlInfo>(Arena*);
template<> ::optimization_guide::proto::Version* Arena::CreateMaybeMessage<::optimization_guide::proto::Version>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace optimization_guide {
namespace proto {

enum OptimizationType : int {
  TYPE_UNSPECIFIED = 0,
  NOSCRIPT = 1,
  RESOURCE_LOADING = 2,
  LITE_PAGE_REDIRECT = 3,
  METADATA_FETCH_VALIDATION = 4,
  DEFER_ALL_SCRIPT = 5,
  PERFORMANCE_HINTS = 6,
  LITE_PAGE = 7,
  COMPRESS_PUBLIC_IMAGES = 8,
  LOADING_PREDICTOR = 9,
  FAST_HOST_HINTS = 10,
  LITE_VIDEO = 13,
  LINK_PERFORMANCE = 14,
  SHOPPING_PAGE_PREDICTOR = 15,
  LOGIN_DETECTION = 16,
  MERCHANT_TRUST_SIGNALS = 17,
  PRICE_TRACKING = 18,
  BLOOM_FILTER_VALIDATION = 19,
  ABOUT_THIS_SITE = 20,
  MERCHANT_TRUST_SIGNALS_V2 = 21,
  PAGE_ENTITIES = 22,
  HISTORY_CLUSTERS = 23,
  THANK_CREATOR_ELIGIBLE = 24,
  IBAN_AUTOFILL_BLOCKED = 25
};
bool OptimizationType_IsValid(int value);
constexpr OptimizationType OptimizationType_MIN = TYPE_UNSPECIFIED;
constexpr OptimizationType OptimizationType_MAX = IBAN_AUTOFILL_BLOCKED;
constexpr int OptimizationType_ARRAYSIZE = OptimizationType_MAX + 1;

const std::string& OptimizationType_Name(OptimizationType value);
template<typename T>
inline const std::string& OptimizationType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, OptimizationType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function OptimizationType_Name.");
  return OptimizationType_Name(static_cast<OptimizationType>(enum_t_value));
}
bool OptimizationType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, OptimizationType* value);
enum KeyRepresentation : int {
  REPRESENTATION_UNSPECIFIED = 0,
  HOST_SUFFIX PROTOBUF_DEPRECATED_ENUM = 1,
  FULL_URL = 2,
  HOST = 3,
  HASHED_HOST = 4
};
bool KeyRepresentation_IsValid(int value);
constexpr KeyRepresentation KeyRepresentation_MIN = REPRESENTATION_UNSPECIFIED;
constexpr KeyRepresentation KeyRepresentation_MAX = HASHED_HOST;
constexpr int KeyRepresentation_ARRAYSIZE = KeyRepresentation_MAX + 1;

const std::string& KeyRepresentation_Name(KeyRepresentation value);
template<typename T>
inline const std::string& KeyRepresentation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, KeyRepresentation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function KeyRepresentation_Name.");
  return KeyRepresentation_Name(static_cast<KeyRepresentation>(enum_t_value));
}
bool KeyRepresentation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, KeyRepresentation* value);
enum HintSource : int {
  HINT_SOURCE_UNKNOWN = 0,
  HINT_SOURCE_OPTIMIZATION_HINTS_COMPONENT = 1,
  HINT_SOURCE_OPTIMIZATION_GUIDE_SERVICE = 2
};
bool HintSource_IsValid(int value);
constexpr HintSource HintSource_MIN = HINT_SOURCE_UNKNOWN;
constexpr HintSource HintSource_MAX = HINT_SOURCE_OPTIMIZATION_GUIDE_SERVICE;
constexpr int HintSource_ARRAYSIZE = HintSource_MAX + 1;

const std::string& HintSource_Name(HintSource value);
template<typename T>
inline const std::string& HintSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HintSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HintSource_Name.");
  return HintSource_Name(static_cast<HintSource>(enum_t_value));
}
bool HintSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HintSource* value);
// ===================================================================

class MatchedHintInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.MatchedHintInfo) */ {
 public:
  inline MatchedHintInfo() : MatchedHintInfo(nullptr) {}
  ~MatchedHintInfo() override;
  explicit PROTOBUF_CONSTEXPR MatchedHintInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchedHintInfo(const MatchedHintInfo& from);
  MatchedHintInfo(MatchedHintInfo&& from) noexcept
    : MatchedHintInfo() {
    *this = ::std::move(from);
  }

  inline MatchedHintInfo& operator=(const MatchedHintInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchedHintInfo& operator=(MatchedHintInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MatchedHintInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchedHintInfo* internal_default_instance() {
    return reinterpret_cast<const MatchedHintInfo*>(
               &_MatchedHintInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatchedHintInfo& a, MatchedHintInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(MatchedHintInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchedHintInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MatchedHintInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MatchedHintInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MatchedHintInfo& from);
  void MergeFrom(const MatchedHintInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MatchedHintInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.MatchedHintInfo";
  }
  protected:
  explicit MatchedHintInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kVersionFieldNumber = 3,
    kKeyRepresentationFieldNumber = 1,
  };
  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional int64 version = 3;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  int64_t version() const;
  void set_version(int64_t value);
  private:
  int64_t _internal_version() const;
  void _internal_set_version(int64_t value);
  public:

  // optional .optimization_guide.proto.KeyRepresentation key_representation = 1;
  bool has_key_representation() const;
  private:
  bool _internal_has_key_representation() const;
  public:
  void clear_key_representation();
  ::optimization_guide::proto::KeyRepresentation key_representation() const;
  void set_key_representation(::optimization_guide::proto::KeyRepresentation value);
  private:
  ::optimization_guide::proto::KeyRepresentation _internal_key_representation() const;
  void _internal_set_key_representation(::optimization_guide::proto::KeyRepresentation value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.MatchedHintInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  int64_t version_;
  int key_representation_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class HostInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.HostInfo) */ {
 public:
  inline HostInfo() : HostInfo(nullptr) {}
  ~HostInfo() override;
  explicit PROTOBUF_CONSTEXPR HostInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostInfo(const HostInfo& from);
  HostInfo(HostInfo&& from) noexcept
    : HostInfo() {
    *this = ::std::move(from);
  }

  inline HostInfo& operator=(const HostInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostInfo& operator=(HostInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HostInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostInfo* internal_default_instance() {
    return reinterpret_cast<const HostInfo*>(
               &_HostInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostInfo& a, HostInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HostInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HostInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HostInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HostInfo& from);
  void MergeFrom(const HostInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.HostInfo";
  }
  protected:
  explicit HostInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostFieldNumber = 1,
    kMatchedHintFieldNumber = 2,
  };
  // optional string host = 1;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const std::string& host() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_host(ArgT0&& arg0, ArgT... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* host);
  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(const std::string& value);
  std::string* _internal_mutable_host();
  public:

  // optional .optimization_guide.proto.MatchedHintInfo matched_hint = 2;
  bool has_matched_hint() const;
  private:
  bool _internal_has_matched_hint() const;
  public:
  void clear_matched_hint();
  const ::optimization_guide::proto::MatchedHintInfo& matched_hint() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::MatchedHintInfo* release_matched_hint();
  ::optimization_guide::proto::MatchedHintInfo* mutable_matched_hint();
  void set_allocated_matched_hint(::optimization_guide::proto::MatchedHintInfo* matched_hint);
  private:
  const ::optimization_guide::proto::MatchedHintInfo& _internal_matched_hint() const;
  ::optimization_guide::proto::MatchedHintInfo* _internal_mutable_matched_hint();
  public:
  void unsafe_arena_set_allocated_matched_hint(
      ::optimization_guide::proto::MatchedHintInfo* matched_hint);
  ::optimization_guide::proto::MatchedHintInfo* unsafe_arena_release_matched_hint();

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.HostInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
  ::optimization_guide::proto::MatchedHintInfo* matched_hint_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class UrlInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.UrlInfo) */ {
 public:
  inline UrlInfo() : UrlInfo(nullptr) {}
  ~UrlInfo() override;
  explicit PROTOBUF_CONSTEXPR UrlInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UrlInfo(const UrlInfo& from);
  UrlInfo(UrlInfo&& from) noexcept
    : UrlInfo() {
    *this = ::std::move(from);
  }

  inline UrlInfo& operator=(const UrlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UrlInfo& operator=(UrlInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UrlInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UrlInfo* internal_default_instance() {
    return reinterpret_cast<const UrlInfo*>(
               &_UrlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UrlInfo& a, UrlInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UrlInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UrlInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UrlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UrlInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UrlInfo& from);
  void MergeFrom(const UrlInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UrlInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.UrlInfo";
  }
  protected:
  explicit UrlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
  };
  // optional string url = 1;
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.UrlInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class HashedHostInfos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.HashedHostInfos) */ {
 public:
  inline HashedHostInfos() : HashedHostInfos(nullptr) {}
  ~HashedHostInfos() override;
  explicit PROTOBUF_CONSTEXPR HashedHostInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HashedHostInfos(const HashedHostInfos& from);
  HashedHostInfos(HashedHostInfos&& from) noexcept
    : HashedHostInfos() {
    *this = ::std::move(from);
  }

  inline HashedHostInfos& operator=(const HashedHostInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline HashedHostInfos& operator=(HashedHostInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HashedHostInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const HashedHostInfos* internal_default_instance() {
    return reinterpret_cast<const HashedHostInfos*>(
               &_HashedHostInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HashedHostInfos& a, HashedHostInfos& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(HashedHostInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HashedHostInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HashedHostInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HashedHostInfos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HashedHostInfos& from);
  void MergeFrom(const HashedHostInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HashedHostInfos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.HashedHostInfos";
  }
  protected:
  explicit HashedHostInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartialHostHashesFieldNumber = 1,
    kNumHashBitsFieldNumber = 2,
  };
  // repeated uint32 partial_host_hashes = 1;
  int partial_host_hashes_size() const;
  private:
  int _internal_partial_host_hashes_size() const;
  public:
  void clear_partial_host_hashes();
  private:
  uint32_t _internal_partial_host_hashes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_partial_host_hashes() const;
  void _internal_add_partial_host_hashes(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_partial_host_hashes();
  public:
  uint32_t partial_host_hashes(int index) const;
  void set_partial_host_hashes(int index, uint32_t value);
  void add_partial_host_hashes(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      partial_host_hashes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_partial_host_hashes();

  // optional uint32 num_hash_bits = 2;
  bool has_num_hash_bits() const;
  private:
  bool _internal_has_num_hash_bits() const;
  public:
  void clear_num_hash_bits();
  uint32_t num_hash_bits() const;
  void set_num_hash_bits(uint32_t value);
  private:
  uint32_t _internal_num_hash_bits() const;
  void _internal_set_num_hash_bits(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.HashedHostInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > partial_host_hashes_;
  uint32_t num_hash_bits_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class GetHintsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.GetHintsRequest) */ {
 public:
  inline GetHintsRequest() : GetHintsRequest(nullptr) {}
  ~GetHintsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetHintsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHintsRequest(const GetHintsRequest& from);
  GetHintsRequest(GetHintsRequest&& from) noexcept
    : GetHintsRequest() {
    *this = ::std::move(from);
  }

  inline GetHintsRequest& operator=(const GetHintsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHintsRequest& operator=(GetHintsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetHintsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHintsRequest* internal_default_instance() {
    return reinterpret_cast<const GetHintsRequest*>(
               &_GetHintsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetHintsRequest& a, GetHintsRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GetHintsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHintsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHintsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHintsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetHintsRequest& from);
  void MergeFrom(const GetHintsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetHintsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.GetHintsRequest";
  }
  protected:
  explicit GetHintsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHostsFieldNumber = 1,
    kSupportedOptimizationsFieldNumber = 2,
    kUrlsFieldNumber = 4,
    kSupportedKeyRepresentationsFieldNumber = 5,
    kLocaleFieldNumber = 7,
    kHashedHostsFieldNumber = 8,
    kContextFieldNumber = 3,
  };
  // repeated .optimization_guide.proto.HostInfo hosts = 1;
  int hosts_size() const;
  private:
  int _internal_hosts_size() const;
  public:
  void clear_hosts();
  ::optimization_guide::proto::HostInfo* mutable_hosts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::HostInfo >*
      mutable_hosts();
  private:
  const ::optimization_guide::proto::HostInfo& _internal_hosts(int index) const;
  ::optimization_guide::proto::HostInfo* _internal_add_hosts();
  public:
  const ::optimization_guide::proto::HostInfo& hosts(int index) const;
  ::optimization_guide::proto::HostInfo* add_hosts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::HostInfo >&
      hosts() const;

  // repeated .optimization_guide.proto.OptimizationType supported_optimizations = 2;
  int supported_optimizations_size() const;
  private:
  int _internal_supported_optimizations_size() const;
  public:
  void clear_supported_optimizations();
  private:
  ::optimization_guide::proto::OptimizationType _internal_supported_optimizations(int index) const;
  void _internal_add_supported_optimizations(::optimization_guide::proto::OptimizationType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_optimizations();
  public:
  ::optimization_guide::proto::OptimizationType supported_optimizations(int index) const;
  void set_supported_optimizations(int index, ::optimization_guide::proto::OptimizationType value);
  void add_supported_optimizations(::optimization_guide::proto::OptimizationType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_optimizations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_optimizations();

  // repeated .optimization_guide.proto.UrlInfo urls = 4;
  int urls_size() const;
  private:
  int _internal_urls_size() const;
  public:
  void clear_urls();
  ::optimization_guide::proto::UrlInfo* mutable_urls(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::UrlInfo >*
      mutable_urls();
  private:
  const ::optimization_guide::proto::UrlInfo& _internal_urls(int index) const;
  ::optimization_guide::proto::UrlInfo* _internal_add_urls();
  public:
  const ::optimization_guide::proto::UrlInfo& urls(int index) const;
  ::optimization_guide::proto::UrlInfo* add_urls();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::UrlInfo >&
      urls() const;

  // repeated .optimization_guide.proto.KeyRepresentation supported_key_representations = 5;
  int supported_key_representations_size() const;
  private:
  int _internal_supported_key_representations_size() const;
  public:
  void clear_supported_key_representations();
  private:
  ::optimization_guide::proto::KeyRepresentation _internal_supported_key_representations(int index) const;
  void _internal_add_supported_key_representations(::optimization_guide::proto::KeyRepresentation value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_key_representations();
  public:
  ::optimization_guide::proto::KeyRepresentation supported_key_representations(int index) const;
  void set_supported_key_representations(int index, ::optimization_guide::proto::KeyRepresentation value);
  void add_supported_key_representations(::optimization_guide::proto::KeyRepresentation value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_key_representations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_key_representations();

  // optional string locale = 7;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional .optimization_guide.proto.HashedHostInfos hashed_hosts = 8;
  bool has_hashed_hosts() const;
  private:
  bool _internal_has_hashed_hosts() const;
  public:
  void clear_hashed_hosts();
  const ::optimization_guide::proto::HashedHostInfos& hashed_hosts() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::HashedHostInfos* release_hashed_hosts();
  ::optimization_guide::proto::HashedHostInfos* mutable_hashed_hosts();
  void set_allocated_hashed_hosts(::optimization_guide::proto::HashedHostInfos* hashed_hosts);
  private:
  const ::optimization_guide::proto::HashedHostInfos& _internal_hashed_hosts() const;
  ::optimization_guide::proto::HashedHostInfos* _internal_mutable_hashed_hosts();
  public:
  void unsafe_arena_set_allocated_hashed_hosts(
      ::optimization_guide::proto::HashedHostInfos* hashed_hosts);
  ::optimization_guide::proto::HashedHostInfos* unsafe_arena_release_hashed_hosts();

  // optional .optimization_guide.proto.RequestContext context = 3;
  bool has_context() const;
  private:
  bool _internal_has_context() const;
  public:
  void clear_context();
  ::optimization_guide::proto::RequestContext context() const;
  void set_context(::optimization_guide::proto::RequestContext value);
  private:
  ::optimization_guide::proto::RequestContext _internal_context() const;
  void _internal_set_context(::optimization_guide::proto::RequestContext value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.GetHintsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::HostInfo > hosts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_optimizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::UrlInfo > urls_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_key_representations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::optimization_guide::proto::HashedHostInfos* hashed_hosts_;
  int context_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class GetHintsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.GetHintsResponse) */ {
 public:
  inline GetHintsResponse() : GetHintsResponse(nullptr) {}
  ~GetHintsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetHintsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetHintsResponse(const GetHintsResponse& from);
  GetHintsResponse(GetHintsResponse&& from) noexcept
    : GetHintsResponse() {
    *this = ::std::move(from);
  }

  inline GetHintsResponse& operator=(const GetHintsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHintsResponse& operator=(GetHintsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetHintsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetHintsResponse* internal_default_instance() {
    return reinterpret_cast<const GetHintsResponse*>(
               &_GetHintsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetHintsResponse& a, GetHintsResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(GetHintsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHintsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetHintsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetHintsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetHintsResponse& from);
  void MergeFrom(const GetHintsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetHintsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.GetHintsResponse";
  }
  protected:
  explicit GetHintsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHintsFieldNumber = 1,
    kHintsToRemoveFieldNumber = 3,
    kMaxCacheDurationFieldNumber = 2,
  };
  // repeated .optimization_guide.proto.Hint hints = 1;
  int hints_size() const;
  private:
  int _internal_hints_size() const;
  public:
  void clear_hints();
  ::optimization_guide::proto::Hint* mutable_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >*
      mutable_hints();
  private:
  const ::optimization_guide::proto::Hint& _internal_hints(int index) const;
  ::optimization_guide::proto::Hint* _internal_add_hints();
  public:
  const ::optimization_guide::proto::Hint& hints(int index) const;
  ::optimization_guide::proto::Hint* add_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >&
      hints() const;

  // repeated .optimization_guide.proto.MatchedHintInfo hints_to_remove = 3;
  int hints_to_remove_size() const;
  private:
  int _internal_hints_to_remove_size() const;
  public:
  void clear_hints_to_remove();
  ::optimization_guide::proto::MatchedHintInfo* mutable_hints_to_remove(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::MatchedHintInfo >*
      mutable_hints_to_remove();
  private:
  const ::optimization_guide::proto::MatchedHintInfo& _internal_hints_to_remove(int index) const;
  ::optimization_guide::proto::MatchedHintInfo* _internal_add_hints_to_remove();
  public:
  const ::optimization_guide::proto::MatchedHintInfo& hints_to_remove(int index) const;
  ::optimization_guide::proto::MatchedHintInfo* add_hints_to_remove();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::MatchedHintInfo >&
      hints_to_remove() const;

  // optional .optimization_guide.proto.Duration max_cache_duration = 2;
  bool has_max_cache_duration() const;
  private:
  bool _internal_has_max_cache_duration() const;
  public:
  void clear_max_cache_duration();
  const ::optimization_guide::proto::Duration& max_cache_duration() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::Duration* release_max_cache_duration();
  ::optimization_guide::proto::Duration* mutable_max_cache_duration();
  void set_allocated_max_cache_duration(::optimization_guide::proto::Duration* max_cache_duration);
  private:
  const ::optimization_guide::proto::Duration& _internal_max_cache_duration() const;
  ::optimization_guide::proto::Duration* _internal_mutable_max_cache_duration();
  public:
  void unsafe_arena_set_allocated_max_cache_duration(
      ::optimization_guide::proto::Duration* max_cache_duration);
  ::optimization_guide::proto::Duration* unsafe_arena_release_max_cache_duration();

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.GetHintsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint > hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::MatchedHintInfo > hints_to_remove_;
  ::optimization_guide::proto::Duration* max_cache_duration_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class Optimization final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Optimization) */ {
 public:
  inline Optimization() : Optimization(nullptr) {}
  ~Optimization() override;
  explicit PROTOBUF_CONSTEXPR Optimization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Optimization(const Optimization& from);
  Optimization(Optimization&& from) noexcept
    : Optimization() {
    *this = ::std::move(from);
  }

  inline Optimization& operator=(const Optimization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Optimization& operator=(Optimization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Optimization& default_instance() {
    return *internal_default_instance();
  }
  enum MetadataCase {
    kPerformanceHintsMetadata = 11,
    kPublicImageMetadata = 12,
    kLoadingPredictorMetadata = 13,
    kAnyMetadata = 15,
    METADATA_NOT_SET = 0,
  };

  static inline const Optimization* internal_default_instance() {
    return reinterpret_cast<const Optimization*>(
               &_Optimization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Optimization& a, Optimization& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Optimization* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Optimization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Optimization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Optimization>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Optimization& from);
  void MergeFrom(const Optimization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Optimization* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Optimization";
  }
  protected:
  explicit Optimization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTuningVersionFieldNumber = 6,
    kOptimizationTypeFieldNumber = 1,
    kPerformanceHintsMetadataFieldNumber = 11,
    kPublicImageMetadataFieldNumber = 12,
    kLoadingPredictorMetadataFieldNumber = 13,
    kAnyMetadataFieldNumber = 15,
  };
  // optional uint64 tuning_version = 6;
  bool has_tuning_version() const;
  private:
  bool _internal_has_tuning_version() const;
  public:
  void clear_tuning_version();
  uint64_t tuning_version() const;
  void set_tuning_version(uint64_t value);
  private:
  uint64_t _internal_tuning_version() const;
  void _internal_set_tuning_version(uint64_t value);
  public:

  // optional .optimization_guide.proto.OptimizationType optimization_type = 1;
  bool has_optimization_type() const;
  private:
  bool _internal_has_optimization_type() const;
  public:
  void clear_optimization_type();
  ::optimization_guide::proto::OptimizationType optimization_type() const;
  void set_optimization_type(::optimization_guide::proto::OptimizationType value);
  private:
  ::optimization_guide::proto::OptimizationType _internal_optimization_type() const;
  void _internal_set_optimization_type(::optimization_guide::proto::OptimizationType value);
  public:

  // .optimization_guide.proto.PerformanceHintsMetadata performance_hints_metadata = 11;
  bool has_performance_hints_metadata() const;
  private:
  bool _internal_has_performance_hints_metadata() const;
  public:
  void clear_performance_hints_metadata();
  const ::optimization_guide::proto::PerformanceHintsMetadata& performance_hints_metadata() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::PerformanceHintsMetadata* release_performance_hints_metadata();
  ::optimization_guide::proto::PerformanceHintsMetadata* mutable_performance_hints_metadata();
  void set_allocated_performance_hints_metadata(::optimization_guide::proto::PerformanceHintsMetadata* performance_hints_metadata);
  private:
  const ::optimization_guide::proto::PerformanceHintsMetadata& _internal_performance_hints_metadata() const;
  ::optimization_guide::proto::PerformanceHintsMetadata* _internal_mutable_performance_hints_metadata();
  public:
  void unsafe_arena_set_allocated_performance_hints_metadata(
      ::optimization_guide::proto::PerformanceHintsMetadata* performance_hints_metadata);
  ::optimization_guide::proto::PerformanceHintsMetadata* unsafe_arena_release_performance_hints_metadata();

  // .optimization_guide.proto.PublicImageMetadata public_image_metadata = 12;
  bool has_public_image_metadata() const;
  private:
  bool _internal_has_public_image_metadata() const;
  public:
  void clear_public_image_metadata();
  const ::optimization_guide::proto::PublicImageMetadata& public_image_metadata() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::PublicImageMetadata* release_public_image_metadata();
  ::optimization_guide::proto::PublicImageMetadata* mutable_public_image_metadata();
  void set_allocated_public_image_metadata(::optimization_guide::proto::PublicImageMetadata* public_image_metadata);
  private:
  const ::optimization_guide::proto::PublicImageMetadata& _internal_public_image_metadata() const;
  ::optimization_guide::proto::PublicImageMetadata* _internal_mutable_public_image_metadata();
  public:
  void unsafe_arena_set_allocated_public_image_metadata(
      ::optimization_guide::proto::PublicImageMetadata* public_image_metadata);
  ::optimization_guide::proto::PublicImageMetadata* unsafe_arena_release_public_image_metadata();

  // .optimization_guide.proto.LoadingPredictorMetadata loading_predictor_metadata = 13;
  bool has_loading_predictor_metadata() const;
  private:
  bool _internal_has_loading_predictor_metadata() const;
  public:
  void clear_loading_predictor_metadata();
  const ::optimization_guide::proto::LoadingPredictorMetadata& loading_predictor_metadata() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::LoadingPredictorMetadata* release_loading_predictor_metadata();
  ::optimization_guide::proto::LoadingPredictorMetadata* mutable_loading_predictor_metadata();
  void set_allocated_loading_predictor_metadata(::optimization_guide::proto::LoadingPredictorMetadata* loading_predictor_metadata);
  private:
  const ::optimization_guide::proto::LoadingPredictorMetadata& _internal_loading_predictor_metadata() const;
  ::optimization_guide::proto::LoadingPredictorMetadata* _internal_mutable_loading_predictor_metadata();
  public:
  void unsafe_arena_set_allocated_loading_predictor_metadata(
      ::optimization_guide::proto::LoadingPredictorMetadata* loading_predictor_metadata);
  ::optimization_guide::proto::LoadingPredictorMetadata* unsafe_arena_release_loading_predictor_metadata();

  // .optimization_guide.proto.Any any_metadata = 15;
  bool has_any_metadata() const;
  private:
  bool _internal_has_any_metadata() const;
  public:
  void clear_any_metadata();
  const ::optimization_guide::proto::Any& any_metadata() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::Any* release_any_metadata();
  ::optimization_guide::proto::Any* mutable_any_metadata();
  void set_allocated_any_metadata(::optimization_guide::proto::Any* any_metadata);
  private:
  const ::optimization_guide::proto::Any& _internal_any_metadata() const;
  ::optimization_guide::proto::Any* _internal_mutable_any_metadata();
  public:
  void unsafe_arena_set_allocated_any_metadata(
      ::optimization_guide::proto::Any* any_metadata);
  ::optimization_guide::proto::Any* unsafe_arena_release_any_metadata();

  void clear_metadata();
  MetadataCase metadata_case() const;
  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Optimization)
 private:
  class _Internal;
  void set_has_performance_hints_metadata();
  void set_has_public_image_metadata();
  void set_has_loading_predictor_metadata();
  void set_has_any_metadata();

  inline bool has_metadata() const;
  inline void clear_has_metadata();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint64_t tuning_version_;
  int optimization_type_;
  union MetadataUnion {
    constexpr MetadataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::optimization_guide::proto::PerformanceHintsMetadata* performance_hints_metadata_;
    ::optimization_guide::proto::PublicImageMetadata* public_image_metadata_;
    ::optimization_guide::proto::LoadingPredictorMetadata* loading_predictor_metadata_;
    ::optimization_guide::proto::Any* any_metadata_;
  } metadata_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class PageHint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.PageHint) */ {
 public:
  inline PageHint() : PageHint(nullptr) {}
  ~PageHint() override;
  explicit PROTOBUF_CONSTEXPR PageHint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PageHint(const PageHint& from);
  PageHint(PageHint&& from) noexcept
    : PageHint() {
    *this = ::std::move(from);
  }

  inline PageHint& operator=(const PageHint& from) {
    CopyFrom(from);
    return *this;
  }
  inline PageHint& operator=(PageHint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PageHint& default_instance() {
    return *internal_default_instance();
  }
  static inline const PageHint* internal_default_instance() {
    return reinterpret_cast<const PageHint*>(
               &_PageHint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PageHint& a, PageHint& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PageHint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PageHint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PageHint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PageHint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PageHint& from);
  void MergeFrom(const PageHint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PageHint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.PageHint";
  }
  protected:
  explicit PageHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowlistedOptimizationsFieldNumber = 3,
    kPagePatternFieldNumber = 1,
  };
  // repeated .optimization_guide.proto.Optimization allowlisted_optimizations = 3;
  int allowlisted_optimizations_size() const;
  private:
  int _internal_allowlisted_optimizations_size() const;
  public:
  void clear_allowlisted_optimizations();
  ::optimization_guide::proto::Optimization* mutable_allowlisted_optimizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >*
      mutable_allowlisted_optimizations();
  private:
  const ::optimization_guide::proto::Optimization& _internal_allowlisted_optimizations(int index) const;
  ::optimization_guide::proto::Optimization* _internal_add_allowlisted_optimizations();
  public:
  const ::optimization_guide::proto::Optimization& allowlisted_optimizations(int index) const;
  ::optimization_guide::proto::Optimization* add_allowlisted_optimizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >&
      allowlisted_optimizations() const;

  // optional string page_pattern = 1;
  bool has_page_pattern() const;
  private:
  bool _internal_has_page_pattern() const;
  public:
  void clear_page_pattern();
  const std::string& page_pattern() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_page_pattern(ArgT0&& arg0, ArgT... args);
  std::string* mutable_page_pattern();
  PROTOBUF_NODISCARD std::string* release_page_pattern();
  void set_allocated_page_pattern(std::string* page_pattern);
  private:
  const std::string& _internal_page_pattern() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_pattern(const std::string& value);
  std::string* _internal_mutable_page_pattern();
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.PageHint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization > allowlisted_optimizations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_pattern_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class Hint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Hint) */ {
 public:
  inline Hint() : Hint(nullptr) {}
  ~Hint() override;
  explicit PROTOBUF_CONSTEXPR Hint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Hint(const Hint& from);
  Hint(Hint&& from) noexcept
    : Hint() {
    *this = ::std::move(from);
  }

  inline Hint& operator=(const Hint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hint& operator=(Hint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Hint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Hint* internal_default_instance() {
    return reinterpret_cast<const Hint*>(
               &_Hint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Hint& a, Hint& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Hint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Hint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Hint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Hint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Hint& from);
  void MergeFrom(const Hint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Hint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Hint";
  }
  protected:
  explicit Hint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowlistedOptimizationsFieldNumber = 3,
    kPageHintsFieldNumber = 4,
    kKeyFieldNumber = 2,
    kVersionFieldNumber = 5,
    kMaxCacheDurationFieldNumber = 6,
    kKeyRepresentationFieldNumber = 1,
  };
  // repeated .optimization_guide.proto.Optimization allowlisted_optimizations = 3;
  int allowlisted_optimizations_size() const;
  private:
  int _internal_allowlisted_optimizations_size() const;
  public:
  void clear_allowlisted_optimizations();
  ::optimization_guide::proto::Optimization* mutable_allowlisted_optimizations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >*
      mutable_allowlisted_optimizations();
  private:
  const ::optimization_guide::proto::Optimization& _internal_allowlisted_optimizations(int index) const;
  ::optimization_guide::proto::Optimization* _internal_add_allowlisted_optimizations();
  public:
  const ::optimization_guide::proto::Optimization& allowlisted_optimizations(int index) const;
  ::optimization_guide::proto::Optimization* add_allowlisted_optimizations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >&
      allowlisted_optimizations() const;

  // repeated .optimization_guide.proto.PageHint page_hints = 4;
  int page_hints_size() const;
  private:
  int _internal_page_hints_size() const;
  public:
  void clear_page_hints();
  ::optimization_guide::proto::PageHint* mutable_page_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PageHint >*
      mutable_page_hints();
  private:
  const ::optimization_guide::proto::PageHint& _internal_page_hints(int index) const;
  ::optimization_guide::proto::PageHint* _internal_add_page_hints();
  public:
  const ::optimization_guide::proto::PageHint& page_hints(int index) const;
  ::optimization_guide::proto::PageHint* add_page_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PageHint >&
      page_hints() const;

  // optional string key = 2;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // optional string version = 5;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // optional .optimization_guide.proto.Duration max_cache_duration = 6;
  bool has_max_cache_duration() const;
  private:
  bool _internal_has_max_cache_duration() const;
  public:
  void clear_max_cache_duration();
  const ::optimization_guide::proto::Duration& max_cache_duration() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::Duration* release_max_cache_duration();
  ::optimization_guide::proto::Duration* mutable_max_cache_duration();
  void set_allocated_max_cache_duration(::optimization_guide::proto::Duration* max_cache_duration);
  private:
  const ::optimization_guide::proto::Duration& _internal_max_cache_duration() const;
  ::optimization_guide::proto::Duration* _internal_mutable_max_cache_duration();
  public:
  void unsafe_arena_set_allocated_max_cache_duration(
      ::optimization_guide::proto::Duration* max_cache_duration);
  ::optimization_guide::proto::Duration* unsafe_arena_release_max_cache_duration();

  // optional .optimization_guide.proto.KeyRepresentation key_representation = 1;
  bool has_key_representation() const;
  private:
  bool _internal_has_key_representation() const;
  public:
  void clear_key_representation();
  ::optimization_guide::proto::KeyRepresentation key_representation() const;
  void set_key_representation(::optimization_guide::proto::KeyRepresentation value);
  private:
  ::optimization_guide::proto::KeyRepresentation _internal_key_representation() const;
  void _internal_set_key_representation(::optimization_guide::proto::KeyRepresentation value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Hint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization > allowlisted_optimizations_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PageHint > page_hints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::optimization_guide::proto::Duration* max_cache_duration_;
  int key_representation_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class BloomFilter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.BloomFilter) */ {
 public:
  inline BloomFilter() : BloomFilter(nullptr) {}
  ~BloomFilter() override;
  explicit PROTOBUF_CONSTEXPR BloomFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BloomFilter(const BloomFilter& from);
  BloomFilter(BloomFilter&& from) noexcept
    : BloomFilter() {
    *this = ::std::move(from);
  }

  inline BloomFilter& operator=(const BloomFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline BloomFilter& operator=(BloomFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const BloomFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const BloomFilter* internal_default_instance() {
    return reinterpret_cast<const BloomFilter*>(
               &_BloomFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BloomFilter& a, BloomFilter& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(BloomFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BloomFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BloomFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BloomFilter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const BloomFilter& from);
  void MergeFrom(const BloomFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BloomFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.BloomFilter";
  }
  protected:
  explicit BloomFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kNumHashFunctionsFieldNumber = 1,
    kNumBitsFieldNumber = 2,
  };
  // optional bytes data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // optional uint32 num_hash_functions = 1;
  bool has_num_hash_functions() const;
  private:
  bool _internal_has_num_hash_functions() const;
  public:
  void clear_num_hash_functions();
  uint32_t num_hash_functions() const;
  void set_num_hash_functions(uint32_t value);
  private:
  uint32_t _internal_num_hash_functions() const;
  void _internal_set_num_hash_functions(uint32_t value);
  public:

  // optional uint32 num_bits = 2;
  bool has_num_bits() const;
  private:
  bool _internal_has_num_bits() const;
  public:
  void clear_num_bits();
  uint32_t num_bits() const;
  void set_num_bits(uint32_t value);
  private:
  uint32_t _internal_num_bits() const;
  void _internal_set_num_bits(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.BloomFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t num_hash_functions_;
  uint32_t num_bits_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class OptimizationFilter final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.OptimizationFilter) */ {
 public:
  inline OptimizationFilter() : OptimizationFilter(nullptr) {}
  ~OptimizationFilter() override;
  explicit PROTOBUF_CONSTEXPR OptimizationFilter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OptimizationFilter(const OptimizationFilter& from);
  OptimizationFilter(OptimizationFilter&& from) noexcept
    : OptimizationFilter() {
    *this = ::std::move(from);
  }

  inline OptimizationFilter& operator=(const OptimizationFilter& from) {
    CopyFrom(from);
    return *this;
  }
  inline OptimizationFilter& operator=(OptimizationFilter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const OptimizationFilter& default_instance() {
    return *internal_default_instance();
  }
  static inline const OptimizationFilter* internal_default_instance() {
    return reinterpret_cast<const OptimizationFilter*>(
               &_OptimizationFilter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(OptimizationFilter& a, OptimizationFilter& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(OptimizationFilter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OptimizationFilter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OptimizationFilter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OptimizationFilter>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const OptimizationFilter& from);
  void MergeFrom(const OptimizationFilter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OptimizationFilter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.OptimizationFilter";
  }
  protected:
  explicit OptimizationFilter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegexpsFieldNumber = 3,
    kExclusionRegexpsFieldNumber = 5,
    kBloomFilterFieldNumber = 2,
    kOptimizationTypeFieldNumber = 1,
    kSkipHostSuffixCheckingFieldNumber = 4,
  };
  // repeated string regexps = 3;
  int regexps_size() const;
  private:
  int _internal_regexps_size() const;
  public:
  void clear_regexps();
  const std::string& regexps(int index) const;
  std::string* mutable_regexps(int index);
  void set_regexps(int index, const std::string& value);
  void set_regexps(int index, std::string&& value);
  void set_regexps(int index, const char* value);
  void set_regexps(int index, const char* value, size_t size);
  std::string* add_regexps();
  void add_regexps(const std::string& value);
  void add_regexps(std::string&& value);
  void add_regexps(const char* value);
  void add_regexps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& regexps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_regexps();
  private:
  const std::string& _internal_regexps(int index) const;
  std::string* _internal_add_regexps();
  public:

  // repeated string exclusion_regexps = 5;
  int exclusion_regexps_size() const;
  private:
  int _internal_exclusion_regexps_size() const;
  public:
  void clear_exclusion_regexps();
  const std::string& exclusion_regexps(int index) const;
  std::string* mutable_exclusion_regexps(int index);
  void set_exclusion_regexps(int index, const std::string& value);
  void set_exclusion_regexps(int index, std::string&& value);
  void set_exclusion_regexps(int index, const char* value);
  void set_exclusion_regexps(int index, const char* value, size_t size);
  std::string* add_exclusion_regexps();
  void add_exclusion_regexps(const std::string& value);
  void add_exclusion_regexps(std::string&& value);
  void add_exclusion_regexps(const char* value);
  void add_exclusion_regexps(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& exclusion_regexps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_exclusion_regexps();
  private:
  const std::string& _internal_exclusion_regexps(int index) const;
  std::string* _internal_add_exclusion_regexps();
  public:

  // optional .optimization_guide.proto.BloomFilter bloom_filter = 2;
  bool has_bloom_filter() const;
  private:
  bool _internal_has_bloom_filter() const;
  public:
  void clear_bloom_filter();
  const ::optimization_guide::proto::BloomFilter& bloom_filter() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::BloomFilter* release_bloom_filter();
  ::optimization_guide::proto::BloomFilter* mutable_bloom_filter();
  void set_allocated_bloom_filter(::optimization_guide::proto::BloomFilter* bloom_filter);
  private:
  const ::optimization_guide::proto::BloomFilter& _internal_bloom_filter() const;
  ::optimization_guide::proto::BloomFilter* _internal_mutable_bloom_filter();
  public:
  void unsafe_arena_set_allocated_bloom_filter(
      ::optimization_guide::proto::BloomFilter* bloom_filter);
  ::optimization_guide::proto::BloomFilter* unsafe_arena_release_bloom_filter();

  // optional .optimization_guide.proto.OptimizationType optimization_type = 1;
  bool has_optimization_type() const;
  private:
  bool _internal_has_optimization_type() const;
  public:
  void clear_optimization_type();
  ::optimization_guide::proto::OptimizationType optimization_type() const;
  void set_optimization_type(::optimization_guide::proto::OptimizationType value);
  private:
  ::optimization_guide::proto::OptimizationType _internal_optimization_type() const;
  void _internal_set_optimization_type(::optimization_guide::proto::OptimizationType value);
  public:

  // optional bool skip_host_suffix_checking = 4;
  bool has_skip_host_suffix_checking() const;
  private:
  bool _internal_has_skip_host_suffix_checking() const;
  public:
  void clear_skip_host_suffix_checking();
  bool skip_host_suffix_checking() const;
  void set_skip_host_suffix_checking(bool value);
  private:
  bool _internal_skip_host_suffix_checking() const;
  void _internal_set_skip_host_suffix_checking(bool value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.OptimizationFilter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> regexps_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> exclusion_regexps_;
  ::optimization_guide::proto::BloomFilter* bloom_filter_;
  int optimization_type_;
  bool skip_host_suffix_checking_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  ~Configuration() override;
  explicit PROTOBUF_CONSTEXPR Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Configuration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Configuration& from);
  void MergeFrom(const Configuration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Configuration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHintsFieldNumber = 1,
    kOptimizationBlocklistsFieldNumber = 2,
    kOptimizationAllowlistsFieldNumber = 3,
  };
  // repeated .optimization_guide.proto.Hint hints = 1;
  int hints_size() const;
  private:
  int _internal_hints_size() const;
  public:
  void clear_hints();
  ::optimization_guide::proto::Hint* mutable_hints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >*
      mutable_hints();
  private:
  const ::optimization_guide::proto::Hint& _internal_hints(int index) const;
  ::optimization_guide::proto::Hint* _internal_add_hints();
  public:
  const ::optimization_guide::proto::Hint& hints(int index) const;
  ::optimization_guide::proto::Hint* add_hints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >&
      hints() const;

  // repeated .optimization_guide.proto.OptimizationFilter optimization_blocklists = 2;
  int optimization_blocklists_size() const;
  private:
  int _internal_optimization_blocklists_size() const;
  public:
  void clear_optimization_blocklists();
  ::optimization_guide::proto::OptimizationFilter* mutable_optimization_blocklists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >*
      mutable_optimization_blocklists();
  private:
  const ::optimization_guide::proto::OptimizationFilter& _internal_optimization_blocklists(int index) const;
  ::optimization_guide::proto::OptimizationFilter* _internal_add_optimization_blocklists();
  public:
  const ::optimization_guide::proto::OptimizationFilter& optimization_blocklists(int index) const;
  ::optimization_guide::proto::OptimizationFilter* add_optimization_blocklists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >&
      optimization_blocklists() const;

  // repeated .optimization_guide.proto.OptimizationFilter optimization_allowlists = 3;
  int optimization_allowlists_size() const;
  private:
  int _internal_optimization_allowlists_size() const;
  public:
  void clear_optimization_allowlists();
  ::optimization_guide::proto::OptimizationFilter* mutable_optimization_allowlists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >*
      mutable_optimization_allowlists();
  private:
  const ::optimization_guide::proto::OptimizationFilter& _internal_optimization_allowlists(int index) const;
  ::optimization_guide::proto::OptimizationFilter* _internal_add_optimization_allowlists();
  public:
  const ::optimization_guide::proto::OptimizationFilter& optimization_allowlists(int index) const;
  ::optimization_guide::proto::OptimizationFilter* add_optimization_allowlists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >&
      optimization_allowlists() const;

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint > hints_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter > optimization_blocklists_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter > optimization_allowlists_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// -------------------------------------------------------------------

class Version final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:optimization_guide.proto.Version) */ {
 public:
  inline Version() : Version(nullptr) {}
  ~Version() override;
  explicit PROTOBUF_CONSTEXPR Version(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Version(const Version& from);
  Version(Version&& from) noexcept
    : Version() {
    *this = ::std::move(from);
  }

  inline Version& operator=(const Version& from) {
    CopyFrom(from);
    return *this;
  }
  inline Version& operator=(Version&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Version& default_instance() {
    return *internal_default_instance();
  }
  static inline const Version* internal_default_instance() {
    return reinterpret_cast<const Version*>(
               &_Version_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Version& a, Version& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Version* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Version* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Version* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Version>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Version& from);
  void MergeFrom(const Version& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Version* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "optimization_guide.proto.Version";
  }
  protected:
  explicit Version(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerationTimestampFieldNumber = 1,
    kHintSourceFieldNumber = 3,
  };
  // optional .optimization_guide.proto.Timestamp generation_timestamp = 1;
  bool has_generation_timestamp() const;
  private:
  bool _internal_has_generation_timestamp() const;
  public:
  void clear_generation_timestamp();
  const ::optimization_guide::proto::Timestamp& generation_timestamp() const;
  PROTOBUF_NODISCARD ::optimization_guide::proto::Timestamp* release_generation_timestamp();
  ::optimization_guide::proto::Timestamp* mutable_generation_timestamp();
  void set_allocated_generation_timestamp(::optimization_guide::proto::Timestamp* generation_timestamp);
  private:
  const ::optimization_guide::proto::Timestamp& _internal_generation_timestamp() const;
  ::optimization_guide::proto::Timestamp* _internal_mutable_generation_timestamp();
  public:
  void unsafe_arena_set_allocated_generation_timestamp(
      ::optimization_guide::proto::Timestamp* generation_timestamp);
  ::optimization_guide::proto::Timestamp* unsafe_arena_release_generation_timestamp();

  // optional .optimization_guide.proto.HintSource hint_source = 3;
  bool has_hint_source() const;
  private:
  bool _internal_has_hint_source() const;
  public:
  void clear_hint_source();
  ::optimization_guide::proto::HintSource hint_source() const;
  void set_hint_source(::optimization_guide::proto::HintSource value);
  private:
  ::optimization_guide::proto::HintSource _internal_hint_source() const;
  void _internal_set_hint_source(::optimization_guide::proto::HintSource value);
  public:

  // @@protoc_insertion_point(class_scope:optimization_guide.proto.Version)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::optimization_guide::proto::Timestamp* generation_timestamp_;
  int hint_source_;
  friend struct ::TableStruct_components_2foptimization_5fguide_2fproto_2fhints_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchedHintInfo

// optional .optimization_guide.proto.KeyRepresentation key_representation = 1;
inline bool MatchedHintInfo::_internal_has_key_representation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MatchedHintInfo::has_key_representation() const {
  return _internal_has_key_representation();
}
inline void MatchedHintInfo::clear_key_representation() {
  key_representation_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::optimization_guide::proto::KeyRepresentation MatchedHintInfo::_internal_key_representation() const {
  return static_cast< ::optimization_guide::proto::KeyRepresentation >(key_representation_);
}
inline ::optimization_guide::proto::KeyRepresentation MatchedHintInfo::key_representation() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.MatchedHintInfo.key_representation)
  return _internal_key_representation();
}
inline void MatchedHintInfo::_internal_set_key_representation(::optimization_guide::proto::KeyRepresentation value) {
  assert(::optimization_guide::proto::KeyRepresentation_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  key_representation_ = value;
}
inline void MatchedHintInfo::set_key_representation(::optimization_guide::proto::KeyRepresentation value) {
  _internal_set_key_representation(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.MatchedHintInfo.key_representation)
}

// optional string key = 2;
inline bool MatchedHintInfo::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MatchedHintInfo::has_key() const {
  return _internal_has_key();
}
inline void MatchedHintInfo::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MatchedHintInfo::key() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.MatchedHintInfo.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchedHintInfo::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.MatchedHintInfo.key)
}
inline std::string* MatchedHintInfo::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.MatchedHintInfo.key)
  return _s;
}
inline const std::string& MatchedHintInfo::_internal_key() const {
  return key_.Get();
}
inline void MatchedHintInfo::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* MatchedHintInfo::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* MatchedHintInfo::release_key() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.MatchedHintInfo.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MatchedHintInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.MatchedHintInfo.key)
}

// optional int64 version = 3;
inline bool MatchedHintInfo::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MatchedHintInfo::has_version() const {
  return _internal_has_version();
}
inline void MatchedHintInfo::clear_version() {
  version_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t MatchedHintInfo::_internal_version() const {
  return version_;
}
inline int64_t MatchedHintInfo::version() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.MatchedHintInfo.version)
  return _internal_version();
}
inline void MatchedHintInfo::_internal_set_version(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  version_ = value;
}
inline void MatchedHintInfo::set_version(int64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.MatchedHintInfo.version)
}

// -------------------------------------------------------------------

// HostInfo

// optional string host = 1;
inline bool HostInfo::_internal_has_host() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostInfo::has_host() const {
  return _internal_has_host();
}
inline void HostInfo::clear_host() {
  host_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HostInfo::host() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.HostInfo.host)
  return _internal_host();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HostInfo::set_host(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 host_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.HostInfo.host)
}
inline std::string* HostInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.HostInfo.host)
  return _s;
}
inline const std::string& HostInfo::_internal_host() const {
  return host_.Get();
}
inline void HostInfo::_internal_set_host(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  host_.Set(value, GetArenaForAllocation());
}
inline std::string* HostInfo::_internal_mutable_host() {
  _has_bits_[0] |= 0x00000001u;
  return host_.Mutable(GetArenaForAllocation());
}
inline std::string* HostInfo::release_host() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.HostInfo.host)
  if (!_internal_has_host()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = host_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault()) {
    host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void HostInfo::set_allocated_host(std::string* host) {
  if (host != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  host_.SetAllocated(host, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (host_.IsDefault()) {
    host_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.HostInfo.host)
}

// optional .optimization_guide.proto.MatchedHintInfo matched_hint = 2;
inline bool HostInfo::_internal_has_matched_hint() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || matched_hint_ != nullptr);
  return value;
}
inline bool HostInfo::has_matched_hint() const {
  return _internal_has_matched_hint();
}
inline void HostInfo::clear_matched_hint() {
  if (matched_hint_ != nullptr) matched_hint_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::optimization_guide::proto::MatchedHintInfo& HostInfo::_internal_matched_hint() const {
  const ::optimization_guide::proto::MatchedHintInfo* p = matched_hint_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::MatchedHintInfo&>(
      ::optimization_guide::proto::_MatchedHintInfo_default_instance_);
}
inline const ::optimization_guide::proto::MatchedHintInfo& HostInfo::matched_hint() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.HostInfo.matched_hint)
  return _internal_matched_hint();
}
inline void HostInfo::unsafe_arena_set_allocated_matched_hint(
    ::optimization_guide::proto::MatchedHintInfo* matched_hint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(matched_hint_);
  }
  matched_hint_ = matched_hint;
  if (matched_hint) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.HostInfo.matched_hint)
}
inline ::optimization_guide::proto::MatchedHintInfo* HostInfo::release_matched_hint() {
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::MatchedHintInfo* temp = matched_hint_;
  matched_hint_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::MatchedHintInfo* HostInfo::unsafe_arena_release_matched_hint() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.HostInfo.matched_hint)
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::MatchedHintInfo* temp = matched_hint_;
  matched_hint_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::MatchedHintInfo* HostInfo::_internal_mutable_matched_hint() {
  _has_bits_[0] |= 0x00000002u;
  if (matched_hint_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::MatchedHintInfo>(GetArenaForAllocation());
    matched_hint_ = p;
  }
  return matched_hint_;
}
inline ::optimization_guide::proto::MatchedHintInfo* HostInfo::mutable_matched_hint() {
  ::optimization_guide::proto::MatchedHintInfo* _msg = _internal_mutable_matched_hint();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.HostInfo.matched_hint)
  return _msg;
}
inline void HostInfo::set_allocated_matched_hint(::optimization_guide::proto::MatchedHintInfo* matched_hint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete matched_hint_;
  }
  if (matched_hint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(matched_hint);
    if (message_arena != submessage_arena) {
      matched_hint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matched_hint, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  matched_hint_ = matched_hint;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.HostInfo.matched_hint)
}

// -------------------------------------------------------------------

// UrlInfo

// optional string url = 1;
inline bool UrlInfo::_internal_has_url() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UrlInfo::has_url() const {
  return _internal_has_url();
}
inline void UrlInfo::clear_url() {
  url_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UrlInfo::url() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.UrlInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UrlInfo::set_url(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 url_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.UrlInfo.url)
}
inline std::string* UrlInfo::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.UrlInfo.url)
  return _s;
}
inline const std::string& UrlInfo::_internal_url() const {
  return url_.Get();
}
inline void UrlInfo::_internal_set_url(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  url_.Set(value, GetArenaForAllocation());
}
inline std::string* UrlInfo::_internal_mutable_url() {
  _has_bits_[0] |= 0x00000001u;
  return url_.Mutable(GetArenaForAllocation());
}
inline std::string* UrlInfo::release_url() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.UrlInfo.url)
  if (!_internal_has_url()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = url_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void UrlInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  url_.SetAllocated(url, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (url_.IsDefault()) {
    url_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.UrlInfo.url)
}

// -------------------------------------------------------------------

// HashedHostInfos

// repeated uint32 partial_host_hashes = 1;
inline int HashedHostInfos::_internal_partial_host_hashes_size() const {
  return partial_host_hashes_.size();
}
inline int HashedHostInfos::partial_host_hashes_size() const {
  return _internal_partial_host_hashes_size();
}
inline void HashedHostInfos::clear_partial_host_hashes() {
  partial_host_hashes_.Clear();
}
inline uint32_t HashedHostInfos::_internal_partial_host_hashes(int index) const {
  return partial_host_hashes_.Get(index);
}
inline uint32_t HashedHostInfos::partial_host_hashes(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.HashedHostInfos.partial_host_hashes)
  return _internal_partial_host_hashes(index);
}
inline void HashedHostInfos::set_partial_host_hashes(int index, uint32_t value) {
  partial_host_hashes_.Set(index, value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.HashedHostInfos.partial_host_hashes)
}
inline void HashedHostInfos::_internal_add_partial_host_hashes(uint32_t value) {
  partial_host_hashes_.Add(value);
}
inline void HashedHostInfos::add_partial_host_hashes(uint32_t value) {
  _internal_add_partial_host_hashes(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.HashedHostInfos.partial_host_hashes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
HashedHostInfos::_internal_partial_host_hashes() const {
  return partial_host_hashes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
HashedHostInfos::partial_host_hashes() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.HashedHostInfos.partial_host_hashes)
  return _internal_partial_host_hashes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
HashedHostInfos::_internal_mutable_partial_host_hashes() {
  return &partial_host_hashes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
HashedHostInfos::mutable_partial_host_hashes() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.HashedHostInfos.partial_host_hashes)
  return _internal_mutable_partial_host_hashes();
}

// optional uint32 num_hash_bits = 2;
inline bool HashedHostInfos::_internal_has_num_hash_bits() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HashedHostInfos::has_num_hash_bits() const {
  return _internal_has_num_hash_bits();
}
inline void HashedHostInfos::clear_num_hash_bits() {
  num_hash_bits_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline uint32_t HashedHostInfos::_internal_num_hash_bits() const {
  return num_hash_bits_;
}
inline uint32_t HashedHostInfos::num_hash_bits() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.HashedHostInfos.num_hash_bits)
  return _internal_num_hash_bits();
}
inline void HashedHostInfos::_internal_set_num_hash_bits(uint32_t value) {
  _has_bits_[0] |= 0x00000001u;
  num_hash_bits_ = value;
}
inline void HashedHostInfos::set_num_hash_bits(uint32_t value) {
  _internal_set_num_hash_bits(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.HashedHostInfos.num_hash_bits)
}

// -------------------------------------------------------------------

// GetHintsRequest

// repeated .optimization_guide.proto.HostInfo hosts = 1;
inline int GetHintsRequest::_internal_hosts_size() const {
  return hosts_.size();
}
inline int GetHintsRequest::hosts_size() const {
  return _internal_hosts_size();
}
inline void GetHintsRequest::clear_hosts() {
  hosts_.Clear();
}
inline ::optimization_guide::proto::HostInfo* GetHintsRequest::mutable_hosts(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsRequest.hosts)
  return hosts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::HostInfo >*
GetHintsRequest::mutable_hosts() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.GetHintsRequest.hosts)
  return &hosts_;
}
inline const ::optimization_guide::proto::HostInfo& GetHintsRequest::_internal_hosts(int index) const {
  return hosts_.Get(index);
}
inline const ::optimization_guide::proto::HostInfo& GetHintsRequest::hosts(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.hosts)
  return _internal_hosts(index);
}
inline ::optimization_guide::proto::HostInfo* GetHintsRequest::_internal_add_hosts() {
  return hosts_.Add();
}
inline ::optimization_guide::proto::HostInfo* GetHintsRequest::add_hosts() {
  ::optimization_guide::proto::HostInfo* _add = _internal_add_hosts();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.GetHintsRequest.hosts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::HostInfo >&
GetHintsRequest::hosts() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.GetHintsRequest.hosts)
  return hosts_;
}

// repeated .optimization_guide.proto.UrlInfo urls = 4;
inline int GetHintsRequest::_internal_urls_size() const {
  return urls_.size();
}
inline int GetHintsRequest::urls_size() const {
  return _internal_urls_size();
}
inline void GetHintsRequest::clear_urls() {
  urls_.Clear();
}
inline ::optimization_guide::proto::UrlInfo* GetHintsRequest::mutable_urls(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsRequest.urls)
  return urls_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::UrlInfo >*
GetHintsRequest::mutable_urls() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.GetHintsRequest.urls)
  return &urls_;
}
inline const ::optimization_guide::proto::UrlInfo& GetHintsRequest::_internal_urls(int index) const {
  return urls_.Get(index);
}
inline const ::optimization_guide::proto::UrlInfo& GetHintsRequest::urls(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.urls)
  return _internal_urls(index);
}
inline ::optimization_guide::proto::UrlInfo* GetHintsRequest::_internal_add_urls() {
  return urls_.Add();
}
inline ::optimization_guide::proto::UrlInfo* GetHintsRequest::add_urls() {
  ::optimization_guide::proto::UrlInfo* _add = _internal_add_urls();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.GetHintsRequest.urls)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::UrlInfo >&
GetHintsRequest::urls() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.GetHintsRequest.urls)
  return urls_;
}

// optional .optimization_guide.proto.HashedHostInfos hashed_hosts = 8;
inline bool GetHintsRequest::_internal_has_hashed_hosts() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || hashed_hosts_ != nullptr);
  return value;
}
inline bool GetHintsRequest::has_hashed_hosts() const {
  return _internal_has_hashed_hosts();
}
inline void GetHintsRequest::clear_hashed_hosts() {
  if (hashed_hosts_ != nullptr) hashed_hosts_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::optimization_guide::proto::HashedHostInfos& GetHintsRequest::_internal_hashed_hosts() const {
  const ::optimization_guide::proto::HashedHostInfos* p = hashed_hosts_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::HashedHostInfos&>(
      ::optimization_guide::proto::_HashedHostInfos_default_instance_);
}
inline const ::optimization_guide::proto::HashedHostInfos& GetHintsRequest::hashed_hosts() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.hashed_hosts)
  return _internal_hashed_hosts();
}
inline void GetHintsRequest::unsafe_arena_set_allocated_hashed_hosts(
    ::optimization_guide::proto::HashedHostInfos* hashed_hosts) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hashed_hosts_);
  }
  hashed_hosts_ = hashed_hosts;
  if (hashed_hosts) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.GetHintsRequest.hashed_hosts)
}
inline ::optimization_guide::proto::HashedHostInfos* GetHintsRequest::release_hashed_hosts() {
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::HashedHostInfos* temp = hashed_hosts_;
  hashed_hosts_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::HashedHostInfos* GetHintsRequest::unsafe_arena_release_hashed_hosts() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.GetHintsRequest.hashed_hosts)
  _has_bits_[0] &= ~0x00000002u;
  ::optimization_guide::proto::HashedHostInfos* temp = hashed_hosts_;
  hashed_hosts_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::HashedHostInfos* GetHintsRequest::_internal_mutable_hashed_hosts() {
  _has_bits_[0] |= 0x00000002u;
  if (hashed_hosts_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::HashedHostInfos>(GetArenaForAllocation());
    hashed_hosts_ = p;
  }
  return hashed_hosts_;
}
inline ::optimization_guide::proto::HashedHostInfos* GetHintsRequest::mutable_hashed_hosts() {
  ::optimization_guide::proto::HashedHostInfos* _msg = _internal_mutable_hashed_hosts();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsRequest.hashed_hosts)
  return _msg;
}
inline void GetHintsRequest::set_allocated_hashed_hosts(::optimization_guide::proto::HashedHostInfos* hashed_hosts) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hashed_hosts_;
  }
  if (hashed_hosts) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hashed_hosts);
    if (message_arena != submessage_arena) {
      hashed_hosts = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hashed_hosts, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hashed_hosts_ = hashed_hosts;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.GetHintsRequest.hashed_hosts)
}

// repeated .optimization_guide.proto.OptimizationType supported_optimizations = 2;
inline int GetHintsRequest::_internal_supported_optimizations_size() const {
  return supported_optimizations_.size();
}
inline int GetHintsRequest::supported_optimizations_size() const {
  return _internal_supported_optimizations_size();
}
inline void GetHintsRequest::clear_supported_optimizations() {
  supported_optimizations_.Clear();
}
inline ::optimization_guide::proto::OptimizationType GetHintsRequest::_internal_supported_optimizations(int index) const {
  return static_cast< ::optimization_guide::proto::OptimizationType >(supported_optimizations_.Get(index));
}
inline ::optimization_guide::proto::OptimizationType GetHintsRequest::supported_optimizations(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.supported_optimizations)
  return _internal_supported_optimizations(index);
}
inline void GetHintsRequest::set_supported_optimizations(int index, ::optimization_guide::proto::OptimizationType value) {
  assert(::optimization_guide::proto::OptimizationType_IsValid(value));
  supported_optimizations_.Set(index, value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.GetHintsRequest.supported_optimizations)
}
inline void GetHintsRequest::_internal_add_supported_optimizations(::optimization_guide::proto::OptimizationType value) {
  assert(::optimization_guide::proto::OptimizationType_IsValid(value));
  supported_optimizations_.Add(value);
}
inline void GetHintsRequest::add_supported_optimizations(::optimization_guide::proto::OptimizationType value) {
  _internal_add_supported_optimizations(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.GetHintsRequest.supported_optimizations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetHintsRequest::supported_optimizations() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.GetHintsRequest.supported_optimizations)
  return supported_optimizations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetHintsRequest::_internal_mutable_supported_optimizations() {
  return &supported_optimizations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetHintsRequest::mutable_supported_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.GetHintsRequest.supported_optimizations)
  return _internal_mutable_supported_optimizations();
}

// repeated .optimization_guide.proto.KeyRepresentation supported_key_representations = 5;
inline int GetHintsRequest::_internal_supported_key_representations_size() const {
  return supported_key_representations_.size();
}
inline int GetHintsRequest::supported_key_representations_size() const {
  return _internal_supported_key_representations_size();
}
inline void GetHintsRequest::clear_supported_key_representations() {
  supported_key_representations_.Clear();
}
inline ::optimization_guide::proto::KeyRepresentation GetHintsRequest::_internal_supported_key_representations(int index) const {
  return static_cast< ::optimization_guide::proto::KeyRepresentation >(supported_key_representations_.Get(index));
}
inline ::optimization_guide::proto::KeyRepresentation GetHintsRequest::supported_key_representations(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.supported_key_representations)
  return _internal_supported_key_representations(index);
}
inline void GetHintsRequest::set_supported_key_representations(int index, ::optimization_guide::proto::KeyRepresentation value) {
  assert(::optimization_guide::proto::KeyRepresentation_IsValid(value));
  supported_key_representations_.Set(index, value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.GetHintsRequest.supported_key_representations)
}
inline void GetHintsRequest::_internal_add_supported_key_representations(::optimization_guide::proto::KeyRepresentation value) {
  assert(::optimization_guide::proto::KeyRepresentation_IsValid(value));
  supported_key_representations_.Add(value);
}
inline void GetHintsRequest::add_supported_key_representations(::optimization_guide::proto::KeyRepresentation value) {
  _internal_add_supported_key_representations(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.GetHintsRequest.supported_key_representations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
GetHintsRequest::supported_key_representations() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.GetHintsRequest.supported_key_representations)
  return supported_key_representations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetHintsRequest::_internal_mutable_supported_key_representations() {
  return &supported_key_representations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
GetHintsRequest::mutable_supported_key_representations() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.GetHintsRequest.supported_key_representations)
  return _internal_mutable_supported_key_representations();
}

// optional .optimization_guide.proto.RequestContext context = 3;
inline bool GetHintsRequest::_internal_has_context() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetHintsRequest::has_context() const {
  return _internal_has_context();
}
inline void GetHintsRequest::clear_context() {
  context_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::optimization_guide::proto::RequestContext GetHintsRequest::_internal_context() const {
  return static_cast< ::optimization_guide::proto::RequestContext >(context_);
}
inline ::optimization_guide::proto::RequestContext GetHintsRequest::context() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.context)
  return _internal_context();
}
inline void GetHintsRequest::_internal_set_context(::optimization_guide::proto::RequestContext value) {
  assert(::optimization_guide::proto::RequestContext_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  context_ = value;
}
inline void GetHintsRequest::set_context(::optimization_guide::proto::RequestContext value) {
  _internal_set_context(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.GetHintsRequest.context)
}

// optional string locale = 7;
inline bool GetHintsRequest::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetHintsRequest::has_locale() const {
  return _internal_has_locale();
}
inline void GetHintsRequest::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetHintsRequest::locale() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsRequest.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetHintsRequest::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.GetHintsRequest.locale)
}
inline std::string* GetHintsRequest::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsRequest.locale)
  return _s;
}
inline const std::string& GetHintsRequest::_internal_locale() const {
  return locale_.Get();
}
inline void GetHintsRequest::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* GetHintsRequest::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* GetHintsRequest::release_locale() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.GetHintsRequest.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void GetHintsRequest::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.GetHintsRequest.locale)
}

// -------------------------------------------------------------------

// GetHintsResponse

// repeated .optimization_guide.proto.Hint hints = 1;
inline int GetHintsResponse::_internal_hints_size() const {
  return hints_.size();
}
inline int GetHintsResponse::hints_size() const {
  return _internal_hints_size();
}
inline void GetHintsResponse::clear_hints() {
  hints_.Clear();
}
inline ::optimization_guide::proto::Hint* GetHintsResponse::mutable_hints(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsResponse.hints)
  return hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >*
GetHintsResponse::mutable_hints() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.GetHintsResponse.hints)
  return &hints_;
}
inline const ::optimization_guide::proto::Hint& GetHintsResponse::_internal_hints(int index) const {
  return hints_.Get(index);
}
inline const ::optimization_guide::proto::Hint& GetHintsResponse::hints(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsResponse.hints)
  return _internal_hints(index);
}
inline ::optimization_guide::proto::Hint* GetHintsResponse::_internal_add_hints() {
  return hints_.Add();
}
inline ::optimization_guide::proto::Hint* GetHintsResponse::add_hints() {
  ::optimization_guide::proto::Hint* _add = _internal_add_hints();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.GetHintsResponse.hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >&
GetHintsResponse::hints() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.GetHintsResponse.hints)
  return hints_;
}

// optional .optimization_guide.proto.Duration max_cache_duration = 2;
inline bool GetHintsResponse::_internal_has_max_cache_duration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || max_cache_duration_ != nullptr);
  return value;
}
inline bool GetHintsResponse::has_max_cache_duration() const {
  return _internal_has_max_cache_duration();
}
inline const ::optimization_guide::proto::Duration& GetHintsResponse::_internal_max_cache_duration() const {
  const ::optimization_guide::proto::Duration* p = max_cache_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::Duration&>(
      ::optimization_guide::proto::_Duration_default_instance_);
}
inline const ::optimization_guide::proto::Duration& GetHintsResponse::max_cache_duration() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsResponse.max_cache_duration)
  return _internal_max_cache_duration();
}
inline void GetHintsResponse::unsafe_arena_set_allocated_max_cache_duration(
    ::optimization_guide::proto::Duration* max_cache_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_cache_duration_);
  }
  max_cache_duration_ = max_cache_duration;
  if (max_cache_duration) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.GetHintsResponse.max_cache_duration)
}
inline ::optimization_guide::proto::Duration* GetHintsResponse::release_max_cache_duration() {
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::Duration* temp = max_cache_duration_;
  max_cache_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::Duration* GetHintsResponse::unsafe_arena_release_max_cache_duration() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.GetHintsResponse.max_cache_duration)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::Duration* temp = max_cache_duration_;
  max_cache_duration_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::Duration* GetHintsResponse::_internal_mutable_max_cache_duration() {
  _has_bits_[0] |= 0x00000001u;
  if (max_cache_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::Duration>(GetArenaForAllocation());
    max_cache_duration_ = p;
  }
  return max_cache_duration_;
}
inline ::optimization_guide::proto::Duration* GetHintsResponse::mutable_max_cache_duration() {
  ::optimization_guide::proto::Duration* _msg = _internal_mutable_max_cache_duration();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsResponse.max_cache_duration)
  return _msg;
}
inline void GetHintsResponse::set_allocated_max_cache_duration(::optimization_guide::proto::Duration* max_cache_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_cache_duration_);
  }
  if (max_cache_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_cache_duration));
    if (message_arena != submessage_arena) {
      max_cache_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_cache_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  max_cache_duration_ = max_cache_duration;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.GetHintsResponse.max_cache_duration)
}

// repeated .optimization_guide.proto.MatchedHintInfo hints_to_remove = 3;
inline int GetHintsResponse::_internal_hints_to_remove_size() const {
  return hints_to_remove_.size();
}
inline int GetHintsResponse::hints_to_remove_size() const {
  return _internal_hints_to_remove_size();
}
inline void GetHintsResponse::clear_hints_to_remove() {
  hints_to_remove_.Clear();
}
inline ::optimization_guide::proto::MatchedHintInfo* GetHintsResponse::mutable_hints_to_remove(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.GetHintsResponse.hints_to_remove)
  return hints_to_remove_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::MatchedHintInfo >*
GetHintsResponse::mutable_hints_to_remove() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.GetHintsResponse.hints_to_remove)
  return &hints_to_remove_;
}
inline const ::optimization_guide::proto::MatchedHintInfo& GetHintsResponse::_internal_hints_to_remove(int index) const {
  return hints_to_remove_.Get(index);
}
inline const ::optimization_guide::proto::MatchedHintInfo& GetHintsResponse::hints_to_remove(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.GetHintsResponse.hints_to_remove)
  return _internal_hints_to_remove(index);
}
inline ::optimization_guide::proto::MatchedHintInfo* GetHintsResponse::_internal_add_hints_to_remove() {
  return hints_to_remove_.Add();
}
inline ::optimization_guide::proto::MatchedHintInfo* GetHintsResponse::add_hints_to_remove() {
  ::optimization_guide::proto::MatchedHintInfo* _add = _internal_add_hints_to_remove();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.GetHintsResponse.hints_to_remove)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::MatchedHintInfo >&
GetHintsResponse::hints_to_remove() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.GetHintsResponse.hints_to_remove)
  return hints_to_remove_;
}

// -------------------------------------------------------------------

// Optimization

// optional .optimization_guide.proto.OptimizationType optimization_type = 1;
inline bool Optimization::_internal_has_optimization_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Optimization::has_optimization_type() const {
  return _internal_has_optimization_type();
}
inline void Optimization::clear_optimization_type() {
  optimization_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::optimization_guide::proto::OptimizationType Optimization::_internal_optimization_type() const {
  return static_cast< ::optimization_guide::proto::OptimizationType >(optimization_type_);
}
inline ::optimization_guide::proto::OptimizationType Optimization::optimization_type() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Optimization.optimization_type)
  return _internal_optimization_type();
}
inline void Optimization::_internal_set_optimization_type(::optimization_guide::proto::OptimizationType value) {
  assert(::optimization_guide::proto::OptimizationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  optimization_type_ = value;
}
inline void Optimization::set_optimization_type(::optimization_guide::proto::OptimizationType value) {
  _internal_set_optimization_type(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Optimization.optimization_type)
}

// optional uint64 tuning_version = 6;
inline bool Optimization::_internal_has_tuning_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Optimization::has_tuning_version() const {
  return _internal_has_tuning_version();
}
inline void Optimization::clear_tuning_version() {
  tuning_version_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000001u;
}
inline uint64_t Optimization::_internal_tuning_version() const {
  return tuning_version_;
}
inline uint64_t Optimization::tuning_version() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Optimization.tuning_version)
  return _internal_tuning_version();
}
inline void Optimization::_internal_set_tuning_version(uint64_t value) {
  _has_bits_[0] |= 0x00000001u;
  tuning_version_ = value;
}
inline void Optimization::set_tuning_version(uint64_t value) {
  _internal_set_tuning_version(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Optimization.tuning_version)
}

// .optimization_guide.proto.PerformanceHintsMetadata performance_hints_metadata = 11;
inline bool Optimization::_internal_has_performance_hints_metadata() const {
  return metadata_case() == kPerformanceHintsMetadata;
}
inline bool Optimization::has_performance_hints_metadata() const {
  return _internal_has_performance_hints_metadata();
}
inline void Optimization::set_has_performance_hints_metadata() {
  _oneof_case_[0] = kPerformanceHintsMetadata;
}
inline ::optimization_guide::proto::PerformanceHintsMetadata* Optimization::release_performance_hints_metadata() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Optimization.performance_hints_metadata)
  if (_internal_has_performance_hints_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::PerformanceHintsMetadata* temp = metadata_.performance_hints_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_.performance_hints_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::optimization_guide::proto::PerformanceHintsMetadata& Optimization::_internal_performance_hints_metadata() const {
  return _internal_has_performance_hints_metadata()
      ? *metadata_.performance_hints_metadata_
      : reinterpret_cast< ::optimization_guide::proto::PerformanceHintsMetadata&>(::optimization_guide::proto::_PerformanceHintsMetadata_default_instance_);
}
inline const ::optimization_guide::proto::PerformanceHintsMetadata& Optimization::performance_hints_metadata() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Optimization.performance_hints_metadata)
  return _internal_performance_hints_metadata();
}
inline ::optimization_guide::proto::PerformanceHintsMetadata* Optimization::unsafe_arena_release_performance_hints_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:optimization_guide.proto.Optimization.performance_hints_metadata)
  if (_internal_has_performance_hints_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::PerformanceHintsMetadata* temp = metadata_.performance_hints_metadata_;
    metadata_.performance_hints_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Optimization::unsafe_arena_set_allocated_performance_hints_metadata(::optimization_guide::proto::PerformanceHintsMetadata* performance_hints_metadata) {
  clear_metadata();
  if (performance_hints_metadata) {
    set_has_performance_hints_metadata();
    metadata_.performance_hints_metadata_ = performance_hints_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.Optimization.performance_hints_metadata)
}
inline ::optimization_guide::proto::PerformanceHintsMetadata* Optimization::_internal_mutable_performance_hints_metadata() {
  if (!_internal_has_performance_hints_metadata()) {
    clear_metadata();
    set_has_performance_hints_metadata();
    metadata_.performance_hints_metadata_ = CreateMaybeMessage< ::optimization_guide::proto::PerformanceHintsMetadata >(GetArenaForAllocation());
  }
  return metadata_.performance_hints_metadata_;
}
inline ::optimization_guide::proto::PerformanceHintsMetadata* Optimization::mutable_performance_hints_metadata() {
  ::optimization_guide::proto::PerformanceHintsMetadata* _msg = _internal_mutable_performance_hints_metadata();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Optimization.performance_hints_metadata)
  return _msg;
}

// .optimization_guide.proto.PublicImageMetadata public_image_metadata = 12;
inline bool Optimization::_internal_has_public_image_metadata() const {
  return metadata_case() == kPublicImageMetadata;
}
inline bool Optimization::has_public_image_metadata() const {
  return _internal_has_public_image_metadata();
}
inline void Optimization::set_has_public_image_metadata() {
  _oneof_case_[0] = kPublicImageMetadata;
}
inline ::optimization_guide::proto::PublicImageMetadata* Optimization::release_public_image_metadata() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Optimization.public_image_metadata)
  if (_internal_has_public_image_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::PublicImageMetadata* temp = metadata_.public_image_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_.public_image_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::optimization_guide::proto::PublicImageMetadata& Optimization::_internal_public_image_metadata() const {
  return _internal_has_public_image_metadata()
      ? *metadata_.public_image_metadata_
      : reinterpret_cast< ::optimization_guide::proto::PublicImageMetadata&>(::optimization_guide::proto::_PublicImageMetadata_default_instance_);
}
inline const ::optimization_guide::proto::PublicImageMetadata& Optimization::public_image_metadata() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Optimization.public_image_metadata)
  return _internal_public_image_metadata();
}
inline ::optimization_guide::proto::PublicImageMetadata* Optimization::unsafe_arena_release_public_image_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:optimization_guide.proto.Optimization.public_image_metadata)
  if (_internal_has_public_image_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::PublicImageMetadata* temp = metadata_.public_image_metadata_;
    metadata_.public_image_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Optimization::unsafe_arena_set_allocated_public_image_metadata(::optimization_guide::proto::PublicImageMetadata* public_image_metadata) {
  clear_metadata();
  if (public_image_metadata) {
    set_has_public_image_metadata();
    metadata_.public_image_metadata_ = public_image_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.Optimization.public_image_metadata)
}
inline ::optimization_guide::proto::PublicImageMetadata* Optimization::_internal_mutable_public_image_metadata() {
  if (!_internal_has_public_image_metadata()) {
    clear_metadata();
    set_has_public_image_metadata();
    metadata_.public_image_metadata_ = CreateMaybeMessage< ::optimization_guide::proto::PublicImageMetadata >(GetArenaForAllocation());
  }
  return metadata_.public_image_metadata_;
}
inline ::optimization_guide::proto::PublicImageMetadata* Optimization::mutable_public_image_metadata() {
  ::optimization_guide::proto::PublicImageMetadata* _msg = _internal_mutable_public_image_metadata();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Optimization.public_image_metadata)
  return _msg;
}

// .optimization_guide.proto.LoadingPredictorMetadata loading_predictor_metadata = 13;
inline bool Optimization::_internal_has_loading_predictor_metadata() const {
  return metadata_case() == kLoadingPredictorMetadata;
}
inline bool Optimization::has_loading_predictor_metadata() const {
  return _internal_has_loading_predictor_metadata();
}
inline void Optimization::set_has_loading_predictor_metadata() {
  _oneof_case_[0] = kLoadingPredictorMetadata;
}
inline ::optimization_guide::proto::LoadingPredictorMetadata* Optimization::release_loading_predictor_metadata() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Optimization.loading_predictor_metadata)
  if (_internal_has_loading_predictor_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::LoadingPredictorMetadata* temp = metadata_.loading_predictor_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_.loading_predictor_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::optimization_guide::proto::LoadingPredictorMetadata& Optimization::_internal_loading_predictor_metadata() const {
  return _internal_has_loading_predictor_metadata()
      ? *metadata_.loading_predictor_metadata_
      : reinterpret_cast< ::optimization_guide::proto::LoadingPredictorMetadata&>(::optimization_guide::proto::_LoadingPredictorMetadata_default_instance_);
}
inline const ::optimization_guide::proto::LoadingPredictorMetadata& Optimization::loading_predictor_metadata() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Optimization.loading_predictor_metadata)
  return _internal_loading_predictor_metadata();
}
inline ::optimization_guide::proto::LoadingPredictorMetadata* Optimization::unsafe_arena_release_loading_predictor_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:optimization_guide.proto.Optimization.loading_predictor_metadata)
  if (_internal_has_loading_predictor_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::LoadingPredictorMetadata* temp = metadata_.loading_predictor_metadata_;
    metadata_.loading_predictor_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Optimization::unsafe_arena_set_allocated_loading_predictor_metadata(::optimization_guide::proto::LoadingPredictorMetadata* loading_predictor_metadata) {
  clear_metadata();
  if (loading_predictor_metadata) {
    set_has_loading_predictor_metadata();
    metadata_.loading_predictor_metadata_ = loading_predictor_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.Optimization.loading_predictor_metadata)
}
inline ::optimization_guide::proto::LoadingPredictorMetadata* Optimization::_internal_mutable_loading_predictor_metadata() {
  if (!_internal_has_loading_predictor_metadata()) {
    clear_metadata();
    set_has_loading_predictor_metadata();
    metadata_.loading_predictor_metadata_ = CreateMaybeMessage< ::optimization_guide::proto::LoadingPredictorMetadata >(GetArenaForAllocation());
  }
  return metadata_.loading_predictor_metadata_;
}
inline ::optimization_guide::proto::LoadingPredictorMetadata* Optimization::mutable_loading_predictor_metadata() {
  ::optimization_guide::proto::LoadingPredictorMetadata* _msg = _internal_mutable_loading_predictor_metadata();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Optimization.loading_predictor_metadata)
  return _msg;
}

// .optimization_guide.proto.Any any_metadata = 15;
inline bool Optimization::_internal_has_any_metadata() const {
  return metadata_case() == kAnyMetadata;
}
inline bool Optimization::has_any_metadata() const {
  return _internal_has_any_metadata();
}
inline void Optimization::set_has_any_metadata() {
  _oneof_case_[0] = kAnyMetadata;
}
inline ::optimization_guide::proto::Any* Optimization::release_any_metadata() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Optimization.any_metadata)
  if (_internal_has_any_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::Any* temp = metadata_.any_metadata_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    metadata_.any_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::optimization_guide::proto::Any& Optimization::_internal_any_metadata() const {
  return _internal_has_any_metadata()
      ? *metadata_.any_metadata_
      : reinterpret_cast< ::optimization_guide::proto::Any&>(::optimization_guide::proto::_Any_default_instance_);
}
inline const ::optimization_guide::proto::Any& Optimization::any_metadata() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Optimization.any_metadata)
  return _internal_any_metadata();
}
inline ::optimization_guide::proto::Any* Optimization::unsafe_arena_release_any_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:optimization_guide.proto.Optimization.any_metadata)
  if (_internal_has_any_metadata()) {
    clear_has_metadata();
    ::optimization_guide::proto::Any* temp = metadata_.any_metadata_;
    metadata_.any_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Optimization::unsafe_arena_set_allocated_any_metadata(::optimization_guide::proto::Any* any_metadata) {
  clear_metadata();
  if (any_metadata) {
    set_has_any_metadata();
    metadata_.any_metadata_ = any_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.Optimization.any_metadata)
}
inline ::optimization_guide::proto::Any* Optimization::_internal_mutable_any_metadata() {
  if (!_internal_has_any_metadata()) {
    clear_metadata();
    set_has_any_metadata();
    metadata_.any_metadata_ = CreateMaybeMessage< ::optimization_guide::proto::Any >(GetArenaForAllocation());
  }
  return metadata_.any_metadata_;
}
inline ::optimization_guide::proto::Any* Optimization::mutable_any_metadata() {
  ::optimization_guide::proto::Any* _msg = _internal_mutable_any_metadata();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Optimization.any_metadata)
  return _msg;
}

inline bool Optimization::has_metadata() const {
  return metadata_case() != METADATA_NOT_SET;
}
inline void Optimization::clear_has_metadata() {
  _oneof_case_[0] = METADATA_NOT_SET;
}
inline Optimization::MetadataCase Optimization::metadata_case() const {
  return Optimization::MetadataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PageHint

// optional string page_pattern = 1;
inline bool PageHint::_internal_has_page_pattern() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PageHint::has_page_pattern() const {
  return _internal_has_page_pattern();
}
inline void PageHint::clear_page_pattern() {
  page_pattern_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PageHint::page_pattern() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageHint.page_pattern)
  return _internal_page_pattern();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PageHint::set_page_pattern(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 page_pattern_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.PageHint.page_pattern)
}
inline std::string* PageHint::mutable_page_pattern() {
  std::string* _s = _internal_mutable_page_pattern();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageHint.page_pattern)
  return _s;
}
inline const std::string& PageHint::_internal_page_pattern() const {
  return page_pattern_.Get();
}
inline void PageHint::_internal_set_page_pattern(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  page_pattern_.Set(value, GetArenaForAllocation());
}
inline std::string* PageHint::_internal_mutable_page_pattern() {
  _has_bits_[0] |= 0x00000001u;
  return page_pattern_.Mutable(GetArenaForAllocation());
}
inline std::string* PageHint::release_page_pattern() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.PageHint.page_pattern)
  if (!_internal_has_page_pattern()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = page_pattern_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_pattern_.IsDefault()) {
    page_pattern_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PageHint::set_allocated_page_pattern(std::string* page_pattern) {
  if (page_pattern != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  page_pattern_.SetAllocated(page_pattern, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (page_pattern_.IsDefault()) {
    page_pattern_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.PageHint.page_pattern)
}

// repeated .optimization_guide.proto.Optimization allowlisted_optimizations = 3;
inline int PageHint::_internal_allowlisted_optimizations_size() const {
  return allowlisted_optimizations_.size();
}
inline int PageHint::allowlisted_optimizations_size() const {
  return _internal_allowlisted_optimizations_size();
}
inline void PageHint::clear_allowlisted_optimizations() {
  allowlisted_optimizations_.Clear();
}
inline ::optimization_guide::proto::Optimization* PageHint::mutable_allowlisted_optimizations(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.PageHint.allowlisted_optimizations)
  return allowlisted_optimizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >*
PageHint::mutable_allowlisted_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.PageHint.allowlisted_optimizations)
  return &allowlisted_optimizations_;
}
inline const ::optimization_guide::proto::Optimization& PageHint::_internal_allowlisted_optimizations(int index) const {
  return allowlisted_optimizations_.Get(index);
}
inline const ::optimization_guide::proto::Optimization& PageHint::allowlisted_optimizations(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.PageHint.allowlisted_optimizations)
  return _internal_allowlisted_optimizations(index);
}
inline ::optimization_guide::proto::Optimization* PageHint::_internal_add_allowlisted_optimizations() {
  return allowlisted_optimizations_.Add();
}
inline ::optimization_guide::proto::Optimization* PageHint::add_allowlisted_optimizations() {
  ::optimization_guide::proto::Optimization* _add = _internal_add_allowlisted_optimizations();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.PageHint.allowlisted_optimizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >&
PageHint::allowlisted_optimizations() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.PageHint.allowlisted_optimizations)
  return allowlisted_optimizations_;
}

// -------------------------------------------------------------------

// Hint

// optional .optimization_guide.proto.KeyRepresentation key_representation = 1;
inline bool Hint::_internal_has_key_representation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Hint::has_key_representation() const {
  return _internal_has_key_representation();
}
inline void Hint::clear_key_representation() {
  key_representation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::optimization_guide::proto::KeyRepresentation Hint::_internal_key_representation() const {
  return static_cast< ::optimization_guide::proto::KeyRepresentation >(key_representation_);
}
inline ::optimization_guide::proto::KeyRepresentation Hint::key_representation() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Hint.key_representation)
  return _internal_key_representation();
}
inline void Hint::_internal_set_key_representation(::optimization_guide::proto::KeyRepresentation value) {
  assert(::optimization_guide::proto::KeyRepresentation_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  key_representation_ = value;
}
inline void Hint::set_key_representation(::optimization_guide::proto::KeyRepresentation value) {
  _internal_set_key_representation(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Hint.key_representation)
}

// optional string key = 2;
inline bool Hint::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Hint::has_key() const {
  return _internal_has_key();
}
inline void Hint::clear_key() {
  key_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Hint::key() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Hint.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Hint::set_key(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Hint.key)
}
inline std::string* Hint::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Hint.key)
  return _s;
}
inline const std::string& Hint::_internal_key() const {
  return key_.Get();
}
inline void Hint::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(value, GetArenaForAllocation());
}
inline std::string* Hint::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(GetArenaForAllocation());
}
inline std::string* Hint::release_key() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Hint.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = key_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Hint::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault()) {
    key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Hint.key)
}

// repeated .optimization_guide.proto.Optimization allowlisted_optimizations = 3;
inline int Hint::_internal_allowlisted_optimizations_size() const {
  return allowlisted_optimizations_.size();
}
inline int Hint::allowlisted_optimizations_size() const {
  return _internal_allowlisted_optimizations_size();
}
inline void Hint::clear_allowlisted_optimizations() {
  allowlisted_optimizations_.Clear();
}
inline ::optimization_guide::proto::Optimization* Hint::mutable_allowlisted_optimizations(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Hint.allowlisted_optimizations)
  return allowlisted_optimizations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >*
Hint::mutable_allowlisted_optimizations() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.Hint.allowlisted_optimizations)
  return &allowlisted_optimizations_;
}
inline const ::optimization_guide::proto::Optimization& Hint::_internal_allowlisted_optimizations(int index) const {
  return allowlisted_optimizations_.Get(index);
}
inline const ::optimization_guide::proto::Optimization& Hint::allowlisted_optimizations(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Hint.allowlisted_optimizations)
  return _internal_allowlisted_optimizations(index);
}
inline ::optimization_guide::proto::Optimization* Hint::_internal_add_allowlisted_optimizations() {
  return allowlisted_optimizations_.Add();
}
inline ::optimization_guide::proto::Optimization* Hint::add_allowlisted_optimizations() {
  ::optimization_guide::proto::Optimization* _add = _internal_add_allowlisted_optimizations();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.Hint.allowlisted_optimizations)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Optimization >&
Hint::allowlisted_optimizations() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.Hint.allowlisted_optimizations)
  return allowlisted_optimizations_;
}

// repeated .optimization_guide.proto.PageHint page_hints = 4;
inline int Hint::_internal_page_hints_size() const {
  return page_hints_.size();
}
inline int Hint::page_hints_size() const {
  return _internal_page_hints_size();
}
inline void Hint::clear_page_hints() {
  page_hints_.Clear();
}
inline ::optimization_guide::proto::PageHint* Hint::mutable_page_hints(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Hint.page_hints)
  return page_hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PageHint >*
Hint::mutable_page_hints() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.Hint.page_hints)
  return &page_hints_;
}
inline const ::optimization_guide::proto::PageHint& Hint::_internal_page_hints(int index) const {
  return page_hints_.Get(index);
}
inline const ::optimization_guide::proto::PageHint& Hint::page_hints(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Hint.page_hints)
  return _internal_page_hints(index);
}
inline ::optimization_guide::proto::PageHint* Hint::_internal_add_page_hints() {
  return page_hints_.Add();
}
inline ::optimization_guide::proto::PageHint* Hint::add_page_hints() {
  ::optimization_guide::proto::PageHint* _add = _internal_add_page_hints();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.Hint.page_hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::PageHint >&
Hint::page_hints() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.Hint.page_hints)
  return page_hints_;
}

// optional string version = 5;
inline bool Hint::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Hint::has_version() const {
  return _internal_has_version();
}
inline void Hint::clear_version() {
  version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Hint::version() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Hint.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Hint::set_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Hint.version)
}
inline std::string* Hint::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Hint.version)
  return _s;
}
inline const std::string& Hint::_internal_version() const {
  return version_.Get();
}
inline void Hint::_internal_set_version(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  version_.Set(value, GetArenaForAllocation());
}
inline std::string* Hint::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000002u;
  return version_.Mutable(GetArenaForAllocation());
}
inline std::string* Hint::release_version() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Hint.version)
  if (!_internal_has_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Hint::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault()) {
    version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Hint.version)
}

// optional .optimization_guide.proto.Duration max_cache_duration = 6;
inline bool Hint::_internal_has_max_cache_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || max_cache_duration_ != nullptr);
  return value;
}
inline bool Hint::has_max_cache_duration() const {
  return _internal_has_max_cache_duration();
}
inline const ::optimization_guide::proto::Duration& Hint::_internal_max_cache_duration() const {
  const ::optimization_guide::proto::Duration* p = max_cache_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::Duration&>(
      ::optimization_guide::proto::_Duration_default_instance_);
}
inline const ::optimization_guide::proto::Duration& Hint::max_cache_duration() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Hint.max_cache_duration)
  return _internal_max_cache_duration();
}
inline void Hint::unsafe_arena_set_allocated_max_cache_duration(
    ::optimization_guide::proto::Duration* max_cache_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_cache_duration_);
  }
  max_cache_duration_ = max_cache_duration;
  if (max_cache_duration) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.Hint.max_cache_duration)
}
inline ::optimization_guide::proto::Duration* Hint::release_max_cache_duration() {
  _has_bits_[0] &= ~0x00000004u;
  ::optimization_guide::proto::Duration* temp = max_cache_duration_;
  max_cache_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::Duration* Hint::unsafe_arena_release_max_cache_duration() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Hint.max_cache_duration)
  _has_bits_[0] &= ~0x00000004u;
  ::optimization_guide::proto::Duration* temp = max_cache_duration_;
  max_cache_duration_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::Duration* Hint::_internal_mutable_max_cache_duration() {
  _has_bits_[0] |= 0x00000004u;
  if (max_cache_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::Duration>(GetArenaForAllocation());
    max_cache_duration_ = p;
  }
  return max_cache_duration_;
}
inline ::optimization_guide::proto::Duration* Hint::mutable_max_cache_duration() {
  ::optimization_guide::proto::Duration* _msg = _internal_mutable_max_cache_duration();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Hint.max_cache_duration)
  return _msg;
}
inline void Hint::set_allocated_max_cache_duration(::optimization_guide::proto::Duration* max_cache_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_cache_duration_);
  }
  if (max_cache_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(max_cache_duration));
    if (message_arena != submessage_arena) {
      max_cache_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, max_cache_duration, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  max_cache_duration_ = max_cache_duration;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Hint.max_cache_duration)
}

// -------------------------------------------------------------------

// BloomFilter

// optional uint32 num_hash_functions = 1;
inline bool BloomFilter::_internal_has_num_hash_functions() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BloomFilter::has_num_hash_functions() const {
  return _internal_has_num_hash_functions();
}
inline void BloomFilter::clear_num_hash_functions() {
  num_hash_functions_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t BloomFilter::_internal_num_hash_functions() const {
  return num_hash_functions_;
}
inline uint32_t BloomFilter::num_hash_functions() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.BloomFilter.num_hash_functions)
  return _internal_num_hash_functions();
}
inline void BloomFilter::_internal_set_num_hash_functions(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_hash_functions_ = value;
}
inline void BloomFilter::set_num_hash_functions(uint32_t value) {
  _internal_set_num_hash_functions(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.BloomFilter.num_hash_functions)
}

// optional uint32 num_bits = 2;
inline bool BloomFilter::_internal_has_num_bits() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BloomFilter::has_num_bits() const {
  return _internal_has_num_bits();
}
inline void BloomFilter::clear_num_bits() {
  num_bits_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t BloomFilter::_internal_num_bits() const {
  return num_bits_;
}
inline uint32_t BloomFilter::num_bits() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.BloomFilter.num_bits)
  return _internal_num_bits();
}
inline void BloomFilter::_internal_set_num_bits(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  num_bits_ = value;
}
inline void BloomFilter::set_num_bits(uint32_t value) {
  _internal_set_num_bits(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.BloomFilter.num_bits)
}

// optional bytes data = 3;
inline bool BloomFilter::_internal_has_data() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BloomFilter::has_data() const {
  return _internal_has_data();
}
inline void BloomFilter::clear_data() {
  data_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BloomFilter::data() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.BloomFilter.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BloomFilter::set_data(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:optimization_guide.proto.BloomFilter.data)
}
inline std::string* BloomFilter::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.BloomFilter.data)
  return _s;
}
inline const std::string& BloomFilter::_internal_data() const {
  return data_.Get();
}
inline void BloomFilter::_internal_set_data(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* BloomFilter::_internal_mutable_data() {
  _has_bits_[0] |= 0x00000001u;
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* BloomFilter::release_data() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.BloomFilter.data)
  if (!_internal_has_data()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = data_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void BloomFilter::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.BloomFilter.data)
}

// -------------------------------------------------------------------

// OptimizationFilter

// optional .optimization_guide.proto.OptimizationType optimization_type = 1;
inline bool OptimizationFilter::_internal_has_optimization_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OptimizationFilter::has_optimization_type() const {
  return _internal_has_optimization_type();
}
inline void OptimizationFilter::clear_optimization_type() {
  optimization_type_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::optimization_guide::proto::OptimizationType OptimizationFilter::_internal_optimization_type() const {
  return static_cast< ::optimization_guide::proto::OptimizationType >(optimization_type_);
}
inline ::optimization_guide::proto::OptimizationType OptimizationFilter::optimization_type() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.OptimizationFilter.optimization_type)
  return _internal_optimization_type();
}
inline void OptimizationFilter::_internal_set_optimization_type(::optimization_guide::proto::OptimizationType value) {
  assert(::optimization_guide::proto::OptimizationType_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  optimization_type_ = value;
}
inline void OptimizationFilter::set_optimization_type(::optimization_guide::proto::OptimizationType value) {
  _internal_set_optimization_type(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.OptimizationFilter.optimization_type)
}

// optional .optimization_guide.proto.BloomFilter bloom_filter = 2;
inline bool OptimizationFilter::_internal_has_bloom_filter() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || bloom_filter_ != nullptr);
  return value;
}
inline bool OptimizationFilter::has_bloom_filter() const {
  return _internal_has_bloom_filter();
}
inline void OptimizationFilter::clear_bloom_filter() {
  if (bloom_filter_ != nullptr) bloom_filter_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::optimization_guide::proto::BloomFilter& OptimizationFilter::_internal_bloom_filter() const {
  const ::optimization_guide::proto::BloomFilter* p = bloom_filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::BloomFilter&>(
      ::optimization_guide::proto::_BloomFilter_default_instance_);
}
inline const ::optimization_guide::proto::BloomFilter& OptimizationFilter::bloom_filter() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.OptimizationFilter.bloom_filter)
  return _internal_bloom_filter();
}
inline void OptimizationFilter::unsafe_arena_set_allocated_bloom_filter(
    ::optimization_guide::proto::BloomFilter* bloom_filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bloom_filter_);
  }
  bloom_filter_ = bloom_filter;
  if (bloom_filter) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.OptimizationFilter.bloom_filter)
}
inline ::optimization_guide::proto::BloomFilter* OptimizationFilter::release_bloom_filter() {
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::BloomFilter* temp = bloom_filter_;
  bloom_filter_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::BloomFilter* OptimizationFilter::unsafe_arena_release_bloom_filter() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.OptimizationFilter.bloom_filter)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::BloomFilter* temp = bloom_filter_;
  bloom_filter_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::BloomFilter* OptimizationFilter::_internal_mutable_bloom_filter() {
  _has_bits_[0] |= 0x00000001u;
  if (bloom_filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::BloomFilter>(GetArenaForAllocation());
    bloom_filter_ = p;
  }
  return bloom_filter_;
}
inline ::optimization_guide::proto::BloomFilter* OptimizationFilter::mutable_bloom_filter() {
  ::optimization_guide::proto::BloomFilter* _msg = _internal_mutable_bloom_filter();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.OptimizationFilter.bloom_filter)
  return _msg;
}
inline void OptimizationFilter::set_allocated_bloom_filter(::optimization_guide::proto::BloomFilter* bloom_filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete bloom_filter_;
  }
  if (bloom_filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bloom_filter);
    if (message_arena != submessage_arena) {
      bloom_filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bloom_filter, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bloom_filter_ = bloom_filter;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.OptimizationFilter.bloom_filter)
}

// repeated string regexps = 3;
inline int OptimizationFilter::_internal_regexps_size() const {
  return regexps_.size();
}
inline int OptimizationFilter::regexps_size() const {
  return _internal_regexps_size();
}
inline void OptimizationFilter::clear_regexps() {
  regexps_.Clear();
}
inline std::string* OptimizationFilter::add_regexps() {
  std::string* _s = _internal_add_regexps();
  // @@protoc_insertion_point(field_add_mutable:optimization_guide.proto.OptimizationFilter.regexps)
  return _s;
}
inline const std::string& OptimizationFilter::_internal_regexps(int index) const {
  return regexps_.Get(index);
}
inline const std::string& OptimizationFilter::regexps(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.OptimizationFilter.regexps)
  return _internal_regexps(index);
}
inline std::string* OptimizationFilter::mutable_regexps(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.OptimizationFilter.regexps)
  return regexps_.Mutable(index);
}
inline void OptimizationFilter::set_regexps(int index, const std::string& value) {
  regexps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.OptimizationFilter.regexps)
}
inline void OptimizationFilter::set_regexps(int index, std::string&& value) {
  regexps_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:optimization_guide.proto.OptimizationFilter.regexps)
}
inline void OptimizationFilter::set_regexps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  regexps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:optimization_guide.proto.OptimizationFilter.regexps)
}
inline void OptimizationFilter::set_regexps(int index, const char* value, size_t size) {
  regexps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:optimization_guide.proto.OptimizationFilter.regexps)
}
inline std::string* OptimizationFilter::_internal_add_regexps() {
  return regexps_.Add();
}
inline void OptimizationFilter::add_regexps(const std::string& value) {
  regexps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.OptimizationFilter.regexps)
}
inline void OptimizationFilter::add_regexps(std::string&& value) {
  regexps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:optimization_guide.proto.OptimizationFilter.regexps)
}
inline void OptimizationFilter::add_regexps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  regexps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:optimization_guide.proto.OptimizationFilter.regexps)
}
inline void OptimizationFilter::add_regexps(const char* value, size_t size) {
  regexps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:optimization_guide.proto.OptimizationFilter.regexps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OptimizationFilter::regexps() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.OptimizationFilter.regexps)
  return regexps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OptimizationFilter::mutable_regexps() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.OptimizationFilter.regexps)
  return &regexps_;
}

// repeated string exclusion_regexps = 5;
inline int OptimizationFilter::_internal_exclusion_regexps_size() const {
  return exclusion_regexps_.size();
}
inline int OptimizationFilter::exclusion_regexps_size() const {
  return _internal_exclusion_regexps_size();
}
inline void OptimizationFilter::clear_exclusion_regexps() {
  exclusion_regexps_.Clear();
}
inline std::string* OptimizationFilter::add_exclusion_regexps() {
  std::string* _s = _internal_add_exclusion_regexps();
  // @@protoc_insertion_point(field_add_mutable:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
  return _s;
}
inline const std::string& OptimizationFilter::_internal_exclusion_regexps(int index) const {
  return exclusion_regexps_.Get(index);
}
inline const std::string& OptimizationFilter::exclusion_regexps(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
  return _internal_exclusion_regexps(index);
}
inline std::string* OptimizationFilter::mutable_exclusion_regexps(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
  return exclusion_regexps_.Mutable(index);
}
inline void OptimizationFilter::set_exclusion_regexps(int index, const std::string& value) {
  exclusion_regexps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline void OptimizationFilter::set_exclusion_regexps(int index, std::string&& value) {
  exclusion_regexps_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline void OptimizationFilter::set_exclusion_regexps(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclusion_regexps_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline void OptimizationFilter::set_exclusion_regexps(int index, const char* value, size_t size) {
  exclusion_regexps_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline std::string* OptimizationFilter::_internal_add_exclusion_regexps() {
  return exclusion_regexps_.Add();
}
inline void OptimizationFilter::add_exclusion_regexps(const std::string& value) {
  exclusion_regexps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline void OptimizationFilter::add_exclusion_regexps(std::string&& value) {
  exclusion_regexps_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline void OptimizationFilter::add_exclusion_regexps(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  exclusion_regexps_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline void OptimizationFilter::add_exclusion_regexps(const char* value, size_t size) {
  exclusion_regexps_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
OptimizationFilter::exclusion_regexps() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
  return exclusion_regexps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
OptimizationFilter::mutable_exclusion_regexps() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.OptimizationFilter.exclusion_regexps)
  return &exclusion_regexps_;
}

// optional bool skip_host_suffix_checking = 4;
inline bool OptimizationFilter::_internal_has_skip_host_suffix_checking() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OptimizationFilter::has_skip_host_suffix_checking() const {
  return _internal_has_skip_host_suffix_checking();
}
inline void OptimizationFilter::clear_skip_host_suffix_checking() {
  skip_host_suffix_checking_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool OptimizationFilter::_internal_skip_host_suffix_checking() const {
  return skip_host_suffix_checking_;
}
inline bool OptimizationFilter::skip_host_suffix_checking() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.OptimizationFilter.skip_host_suffix_checking)
  return _internal_skip_host_suffix_checking();
}
inline void OptimizationFilter::_internal_set_skip_host_suffix_checking(bool value) {
  _has_bits_[0] |= 0x00000004u;
  skip_host_suffix_checking_ = value;
}
inline void OptimizationFilter::set_skip_host_suffix_checking(bool value) {
  _internal_set_skip_host_suffix_checking(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.OptimizationFilter.skip_host_suffix_checking)
}

// -------------------------------------------------------------------

// Configuration

// repeated .optimization_guide.proto.Hint hints = 1;
inline int Configuration::_internal_hints_size() const {
  return hints_.size();
}
inline int Configuration::hints_size() const {
  return _internal_hints_size();
}
inline void Configuration::clear_hints() {
  hints_.Clear();
}
inline ::optimization_guide::proto::Hint* Configuration::mutable_hints(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Configuration.hints)
  return hints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >*
Configuration::mutable_hints() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.Configuration.hints)
  return &hints_;
}
inline const ::optimization_guide::proto::Hint& Configuration::_internal_hints(int index) const {
  return hints_.Get(index);
}
inline const ::optimization_guide::proto::Hint& Configuration::hints(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Configuration.hints)
  return _internal_hints(index);
}
inline ::optimization_guide::proto::Hint* Configuration::_internal_add_hints() {
  return hints_.Add();
}
inline ::optimization_guide::proto::Hint* Configuration::add_hints() {
  ::optimization_guide::proto::Hint* _add = _internal_add_hints();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.Configuration.hints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::Hint >&
Configuration::hints() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.Configuration.hints)
  return hints_;
}

// repeated .optimization_guide.proto.OptimizationFilter optimization_blocklists = 2;
inline int Configuration::_internal_optimization_blocklists_size() const {
  return optimization_blocklists_.size();
}
inline int Configuration::optimization_blocklists_size() const {
  return _internal_optimization_blocklists_size();
}
inline void Configuration::clear_optimization_blocklists() {
  optimization_blocklists_.Clear();
}
inline ::optimization_guide::proto::OptimizationFilter* Configuration::mutable_optimization_blocklists(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Configuration.optimization_blocklists)
  return optimization_blocklists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >*
Configuration::mutable_optimization_blocklists() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.Configuration.optimization_blocklists)
  return &optimization_blocklists_;
}
inline const ::optimization_guide::proto::OptimizationFilter& Configuration::_internal_optimization_blocklists(int index) const {
  return optimization_blocklists_.Get(index);
}
inline const ::optimization_guide::proto::OptimizationFilter& Configuration::optimization_blocklists(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Configuration.optimization_blocklists)
  return _internal_optimization_blocklists(index);
}
inline ::optimization_guide::proto::OptimizationFilter* Configuration::_internal_add_optimization_blocklists() {
  return optimization_blocklists_.Add();
}
inline ::optimization_guide::proto::OptimizationFilter* Configuration::add_optimization_blocklists() {
  ::optimization_guide::proto::OptimizationFilter* _add = _internal_add_optimization_blocklists();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.Configuration.optimization_blocklists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >&
Configuration::optimization_blocklists() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.Configuration.optimization_blocklists)
  return optimization_blocklists_;
}

// repeated .optimization_guide.proto.OptimizationFilter optimization_allowlists = 3;
inline int Configuration::_internal_optimization_allowlists_size() const {
  return optimization_allowlists_.size();
}
inline int Configuration::optimization_allowlists_size() const {
  return _internal_optimization_allowlists_size();
}
inline void Configuration::clear_optimization_allowlists() {
  optimization_allowlists_.Clear();
}
inline ::optimization_guide::proto::OptimizationFilter* Configuration::mutable_optimization_allowlists(int index) {
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Configuration.optimization_allowlists)
  return optimization_allowlists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >*
Configuration::mutable_optimization_allowlists() {
  // @@protoc_insertion_point(field_mutable_list:optimization_guide.proto.Configuration.optimization_allowlists)
  return &optimization_allowlists_;
}
inline const ::optimization_guide::proto::OptimizationFilter& Configuration::_internal_optimization_allowlists(int index) const {
  return optimization_allowlists_.Get(index);
}
inline const ::optimization_guide::proto::OptimizationFilter& Configuration::optimization_allowlists(int index) const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Configuration.optimization_allowlists)
  return _internal_optimization_allowlists(index);
}
inline ::optimization_guide::proto::OptimizationFilter* Configuration::_internal_add_optimization_allowlists() {
  return optimization_allowlists_.Add();
}
inline ::optimization_guide::proto::OptimizationFilter* Configuration::add_optimization_allowlists() {
  ::optimization_guide::proto::OptimizationFilter* _add = _internal_add_optimization_allowlists();
  // @@protoc_insertion_point(field_add:optimization_guide.proto.Configuration.optimization_allowlists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::optimization_guide::proto::OptimizationFilter >&
Configuration::optimization_allowlists() const {
  // @@protoc_insertion_point(field_list:optimization_guide.proto.Configuration.optimization_allowlists)
  return optimization_allowlists_;
}

// -------------------------------------------------------------------

// Version

// optional .optimization_guide.proto.Timestamp generation_timestamp = 1;
inline bool Version::_internal_has_generation_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || generation_timestamp_ != nullptr);
  return value;
}
inline bool Version::has_generation_timestamp() const {
  return _internal_has_generation_timestamp();
}
inline const ::optimization_guide::proto::Timestamp& Version::_internal_generation_timestamp() const {
  const ::optimization_guide::proto::Timestamp* p = generation_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::optimization_guide::proto::Timestamp&>(
      ::optimization_guide::proto::_Timestamp_default_instance_);
}
inline const ::optimization_guide::proto::Timestamp& Version::generation_timestamp() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Version.generation_timestamp)
  return _internal_generation_timestamp();
}
inline void Version::unsafe_arena_set_allocated_generation_timestamp(
    ::optimization_guide::proto::Timestamp* generation_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generation_timestamp_);
  }
  generation_timestamp_ = generation_timestamp;
  if (generation_timestamp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:optimization_guide.proto.Version.generation_timestamp)
}
inline ::optimization_guide::proto::Timestamp* Version::release_generation_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::Timestamp* temp = generation_timestamp_;
  generation_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::optimization_guide::proto::Timestamp* Version::unsafe_arena_release_generation_timestamp() {
  // @@protoc_insertion_point(field_release:optimization_guide.proto.Version.generation_timestamp)
  _has_bits_[0] &= ~0x00000001u;
  ::optimization_guide::proto::Timestamp* temp = generation_timestamp_;
  generation_timestamp_ = nullptr;
  return temp;
}
inline ::optimization_guide::proto::Timestamp* Version::_internal_mutable_generation_timestamp() {
  _has_bits_[0] |= 0x00000001u;
  if (generation_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::optimization_guide::proto::Timestamp>(GetArenaForAllocation());
    generation_timestamp_ = p;
  }
  return generation_timestamp_;
}
inline ::optimization_guide::proto::Timestamp* Version::mutable_generation_timestamp() {
  ::optimization_guide::proto::Timestamp* _msg = _internal_mutable_generation_timestamp();
  // @@protoc_insertion_point(field_mutable:optimization_guide.proto.Version.generation_timestamp)
  return _msg;
}
inline void Version::set_allocated_generation_timestamp(::optimization_guide::proto::Timestamp* generation_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(generation_timestamp_);
  }
  if (generation_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(generation_timestamp));
    if (message_arena != submessage_arena) {
      generation_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generation_timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  generation_timestamp_ = generation_timestamp;
  // @@protoc_insertion_point(field_set_allocated:optimization_guide.proto.Version.generation_timestamp)
}

// optional .optimization_guide.proto.HintSource hint_source = 3;
inline bool Version::_internal_has_hint_source() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Version::has_hint_source() const {
  return _internal_has_hint_source();
}
inline void Version::clear_hint_source() {
  hint_source_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::optimization_guide::proto::HintSource Version::_internal_hint_source() const {
  return static_cast< ::optimization_guide::proto::HintSource >(hint_source_);
}
inline ::optimization_guide::proto::HintSource Version::hint_source() const {
  // @@protoc_insertion_point(field_get:optimization_guide.proto.Version.hint_source)
  return _internal_hint_source();
}
inline void Version::_internal_set_hint_source(::optimization_guide::proto::HintSource value) {
  assert(::optimization_guide::proto::HintSource_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  hint_source_ = value;
}
inline void Version::set_hint_source(::optimization_guide::proto::HintSource value) {
  _internal_set_hint_source(value);
  // @@protoc_insertion_point(field_set:optimization_guide.proto.Version.hint_source)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace optimization_guide

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::optimization_guide::proto::OptimizationType> : ::std::true_type {};
template <> struct is_proto_enum< ::optimization_guide::proto::KeyRepresentation> : ::std::true_type {};
template <> struct is_proto_enum< ::optimization_guide::proto::HintSource> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2foptimization_5fguide_2fproto_2fhints_2eproto
