// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/performance_hints_metadata.proto

#include "components/optimization_guide/proto/performance_hints_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR PerformanceHint::PerformanceHint(
    ::_pbi::ConstantInitialized)
  : performance_class_(0)

  , _oneof_case_{}{}
struct PerformanceHintDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceHintDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceHintDefaultTypeInternal() {}
  union {
    PerformanceHint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceHintDefaultTypeInternal _PerformanceHint_default_instance_;
PROTOBUF_CONSTEXPR PerformanceHintsMetadata::PerformanceHintsMetadata(
    ::_pbi::ConstantInitialized)
  : performance_hints_()
  , page_hint_(nullptr){}
struct PerformanceHintsMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PerformanceHintsMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PerformanceHintsMetadataDefaultTypeInternal() {}
  union {
    PerformanceHintsMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PerformanceHintsMetadataDefaultTypeInternal _PerformanceHintsMetadata_default_instance_;
PROTOBUF_CONSTEXPR LinkPerformanceMetadata::LinkPerformanceMetadata(
    ::_pbi::ConstantInitialized)
  : link_hints_(){}
struct LinkPerformanceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LinkPerformanceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LinkPerformanceMetadataDefaultTypeInternal() {}
  union {
    LinkPerformanceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LinkPerformanceMetadataDefaultTypeInternal _LinkPerformanceMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {
bool PerformanceClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PerformanceClass_strings[4] = {};

static const char PerformanceClass_names[] =
  "PERFORMANCE_FAST"
  "PERFORMANCE_NORMAL"
  "PERFORMANCE_SLOW"
  "PERFORMANCE_UNKNOWN";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PerformanceClass_entries[] = {
  { {PerformanceClass_names + 0, 16}, 2 },
  { {PerformanceClass_names + 16, 18}, 3 },
  { {PerformanceClass_names + 34, 16}, 1 },
  { {PerformanceClass_names + 50, 19}, 0 },
};

static const int PerformanceClass_entries_by_number[] = {
  3, // 0 -> PERFORMANCE_UNKNOWN
  2, // 1 -> PERFORMANCE_SLOW
  0, // 2 -> PERFORMANCE_FAST
  1, // 3 -> PERFORMANCE_NORMAL
};

const std::string& PerformanceClass_Name(
    PerformanceClass value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PerformanceClass_entries,
          PerformanceClass_entries_by_number,
          4, PerformanceClass_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PerformanceClass_entries,
      PerformanceClass_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PerformanceClass_strings[idx].get();
}
bool PerformanceClass_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PerformanceClass* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PerformanceClass_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<PerformanceClass>(int_value);
  }
  return success;
}

// ===================================================================

class PerformanceHint::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformanceHint>()._has_bits_);
  static void set_has_performance_class(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PerformanceHint::PerformanceHint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PerformanceHint)
}
PerformanceHint::PerformanceHint(const PerformanceHint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  performance_class_ = from.performance_class_;
  clear_has_key();
  switch (from.key_case()) {
    case kWildcardPattern: {
      _internal_set_wildcard_pattern(from._internal_wildcard_pattern());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PerformanceHint)
}

inline void PerformanceHint::SharedCtor() {
performance_class_ = 0;
clear_has_key();
}

PerformanceHint::~PerformanceHint() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PerformanceHint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformanceHint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_key()) {
    clear_key();
  }
}

void PerformanceHint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerformanceHint::clear_key() {
// @@protoc_insertion_point(one_of_clear_start:optimization_guide.proto.PerformanceHint)
  switch (key_case()) {
    case kWildcardPattern: {
      key_.wildcard_pattern_.Destroy();
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KEY_NOT_SET;
}


void PerformanceHint::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PerformanceHint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  performance_class_ = 0;
  clear_key();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerformanceHint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string wildcard_pattern = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_wildcard_pattern();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::PerformanceClass_IsValid(val))) {
            _internal_set_performance_class(static_cast<::optimization_guide::proto::PerformanceClass>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformanceHint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PerformanceHint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string wildcard_pattern = 1;
  if (_internal_has_wildcard_pattern()) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_wildcard_pattern(), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_performance_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PerformanceHint)
  return target;
}

size_t PerformanceHint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PerformanceHint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .optimization_guide.proto.PerformanceClass performance_class = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_performance_class());
  }

  switch (key_case()) {
    // string wildcard_pattern = 1;
    case kWildcardPattern: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_wildcard_pattern());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformanceHint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerformanceHint*>(
      &from));
}

void PerformanceHint::MergeFrom(const PerformanceHint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PerformanceHint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_performance_class()) {
    _internal_set_performance_class(from._internal_performance_class());
  }
  switch (from.key_case()) {
    case kWildcardPattern: {
      _internal_set_wildcard_pattern(from._internal_wildcard_pattern());
      break;
    }
    case KEY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerformanceHint::CopyFrom(const PerformanceHint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PerformanceHint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceHint::IsInitialized() const {
  return true;
}

void PerformanceHint::InternalSwap(PerformanceHint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(performance_class_, other->performance_class_);
  swap(key_, other->key_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string PerformanceHint::GetTypeName() const {
  return "optimization_guide.proto.PerformanceHint";
}


// ===================================================================

class PerformanceHintsMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PerformanceHintsMetadata>()._has_bits_);
  static const ::optimization_guide::proto::PerformanceHint& page_hint(const PerformanceHintsMetadata* msg);
  static void set_has_page_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::optimization_guide::proto::PerformanceHint&
PerformanceHintsMetadata::_Internal::page_hint(const PerformanceHintsMetadata* msg) {
  return *msg->page_hint_;
}
PerformanceHintsMetadata::PerformanceHintsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  performance_hints_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PerformanceHintsMetadata)
}
PerformanceHintsMetadata::PerformanceHintsMetadata(const PerformanceHintsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      performance_hints_(from.performance_hints_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_page_hint()) {
    page_hint_ = new ::optimization_guide::proto::PerformanceHint(*from.page_hint_);
  } else {
    page_hint_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PerformanceHintsMetadata)
}

inline void PerformanceHintsMetadata::SharedCtor() {
page_hint_ = nullptr;
}

PerformanceHintsMetadata::~PerformanceHintsMetadata() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PerformanceHintsMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PerformanceHintsMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete page_hint_;
}

void PerformanceHintsMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PerformanceHintsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PerformanceHintsMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  performance_hints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(page_hint_ != nullptr);
    page_hint_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PerformanceHintsMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_performance_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_page_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PerformanceHintsMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PerformanceHintsMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_performance_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_performance_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::page_hint(this),
        _Internal::page_hint(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PerformanceHintsMetadata)
  return target;
}

size_t PerformanceHintsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PerformanceHintsMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PerformanceHint performance_hints = 1;
  total_size += 1UL * this->_internal_performance_hints_size();
  for (const auto& msg : this->performance_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .optimization_guide.proto.PerformanceHint page_hint = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *page_hint_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PerformanceHintsMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PerformanceHintsMetadata*>(
      &from));
}

void PerformanceHintsMetadata::MergeFrom(const PerformanceHintsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PerformanceHintsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  performance_hints_.MergeFrom(from.performance_hints_);
  if (from._internal_has_page_hint()) {
    _internal_mutable_page_hint()->::optimization_guide::proto::PerformanceHint::MergeFrom(from._internal_page_hint());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PerformanceHintsMetadata::CopyFrom(const PerformanceHintsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PerformanceHintsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerformanceHintsMetadata::IsInitialized() const {
  return true;
}

void PerformanceHintsMetadata::InternalSwap(PerformanceHintsMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  performance_hints_.InternalSwap(&other->performance_hints_);
  swap(page_hint_, other->page_hint_);
}

std::string PerformanceHintsMetadata::GetTypeName() const {
  return "optimization_guide.proto.PerformanceHintsMetadata";
}


// ===================================================================

class LinkPerformanceMetadata::_Internal {
 public:
};

LinkPerformanceMetadata::LinkPerformanceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  link_hints_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.LinkPerformanceMetadata)
}
LinkPerformanceMetadata::LinkPerformanceMetadata(const LinkPerformanceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      link_hints_(from.link_hints_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.LinkPerformanceMetadata)
}

inline void LinkPerformanceMetadata::SharedCtor() {
}

LinkPerformanceMetadata::~LinkPerformanceMetadata() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.LinkPerformanceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LinkPerformanceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LinkPerformanceMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LinkPerformanceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.LinkPerformanceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  link_hints_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LinkPerformanceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.PerformanceHint link_hints = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link_hints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LinkPerformanceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.LinkPerformanceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PerformanceHint link_hints = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_link_hints_size()); i < n; i++) {
    const auto& repfield = this->_internal_link_hints(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.LinkPerformanceMetadata)
  return target;
}

size_t LinkPerformanceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.LinkPerformanceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PerformanceHint link_hints = 1;
  total_size += 1UL * this->_internal_link_hints_size();
  for (const auto& msg : this->link_hints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LinkPerformanceMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LinkPerformanceMetadata*>(
      &from));
}

void LinkPerformanceMetadata::MergeFrom(const LinkPerformanceMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.LinkPerformanceMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  link_hints_.MergeFrom(from.link_hints_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LinkPerformanceMetadata::CopyFrom(const LinkPerformanceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.LinkPerformanceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkPerformanceMetadata::IsInitialized() const {
  return true;
}

void LinkPerformanceMetadata::InternalSwap(LinkPerformanceMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  link_hints_.InternalSwap(&other->link_hints_);
}

std::string LinkPerformanceMetadata::GetTypeName() const {
  return "optimization_guide.proto.LinkPerformanceMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PerformanceHint*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PerformanceHint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PerformanceHint >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PerformanceHintsMetadata*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PerformanceHintsMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PerformanceHintsMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::LinkPerformanceMetadata*
Arena::CreateMaybeMessage< ::optimization_guide::proto::LinkPerformanceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::LinkPerformanceMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
