// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/hint_cache.proto

#include "components/optimization_guide/proto/hint_cache.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR StoreEntry::StoreEntry(
    ::_pbi::ConstantInitialized)
  : version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hint_(nullptr)
  , prediction_model_(nullptr)
  , host_model_features_(nullptr)
  , update_time_secs_(int64_t{0})
  , expiry_time_secs_(int64_t{0})
  , entry_type_(0)

  , keep_beyond_valid_duration_(false){}
struct StoreEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StoreEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StoreEntryDefaultTypeInternal() {}
  union {
    StoreEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StoreEntryDefaultTypeInternal _StoreEntry_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {
bool StoreEntryType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> StoreEntryType_strings[6] = {};

static const char StoreEntryType_names[] =
  "COMPONENT_HINT"
  "EMPTY"
  "FETCHED_HINT"
  "HOST_MODEL_FEATURES"
  "METADATA"
  "PREDICTION_MODEL";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry StoreEntryType_entries[] = {
  { {StoreEntryType_names + 0, 14}, 2 },
  { {StoreEntryType_names + 14, 5}, 0 },
  { {StoreEntryType_names + 19, 12}, 3 },
  { {StoreEntryType_names + 31, 19}, 5 },
  { {StoreEntryType_names + 50, 8}, 1 },
  { {StoreEntryType_names + 58, 16}, 4 },
};

static const int StoreEntryType_entries_by_number[] = {
  1, // 0 -> EMPTY
  4, // 1 -> METADATA
  0, // 2 -> COMPONENT_HINT
  2, // 3 -> FETCHED_HINT
  5, // 4 -> PREDICTION_MODEL
  3, // 5 -> HOST_MODEL_FEATURES
};

const std::string& StoreEntryType_Name(
    StoreEntryType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          StoreEntryType_entries,
          StoreEntryType_entries_by_number,
          6, StoreEntryType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      StoreEntryType_entries,
      StoreEntryType_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     StoreEntryType_strings[idx].get();
}
bool StoreEntryType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, StoreEntryType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      StoreEntryType_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<StoreEntryType>(int_value);
  }
  return success;
}

// ===================================================================

class StoreEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<StoreEntry>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::Hint& hint(const StoreEntry* msg);
  static void set_has_hint(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_update_time_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_entry_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_expiry_time_secs(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::optimization_guide::proto::PredictionModel& prediction_model(const StoreEntry* msg);
  static void set_has_prediction_model(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::optimization_guide::proto::HostModelFeatures& host_model_features(const StoreEntry* msg);
  static void set_has_host_model_features(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_keep_beyond_valid_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

const ::optimization_guide::proto::Hint&
StoreEntry::_Internal::hint(const StoreEntry* msg) {
  return *msg->hint_;
}
const ::optimization_guide::proto::PredictionModel&
StoreEntry::_Internal::prediction_model(const StoreEntry* msg) {
  return *msg->prediction_model_;
}
const ::optimization_guide::proto::HostModelFeatures&
StoreEntry::_Internal::host_model_features(const StoreEntry* msg) {
  return *msg->host_model_features_;
}
void StoreEntry::clear_hint() {
  if (hint_ != nullptr) hint_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void StoreEntry::clear_prediction_model() {
  if (prediction_model_ != nullptr) prediction_model_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void StoreEntry::clear_host_model_features() {
  if (host_model_features_ != nullptr) host_model_features_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
StoreEntry::StoreEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.StoreEntry)
}
StoreEntry::StoreEntry(const StoreEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_version()) {
    version_.Set(from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_hint()) {
    hint_ = new ::optimization_guide::proto::Hint(*from.hint_);
  } else {
    hint_ = nullptr;
  }
  if (from._internal_has_prediction_model()) {
    prediction_model_ = new ::optimization_guide::proto::PredictionModel(*from.prediction_model_);
  } else {
    prediction_model_ = nullptr;
  }
  if (from._internal_has_host_model_features()) {
    host_model_features_ = new ::optimization_guide::proto::HostModelFeatures(*from.host_model_features_);
  } else {
    host_model_features_ = nullptr;
  }
  ::memcpy(&update_time_secs_, &from.update_time_secs_,
    static_cast<size_t>(reinterpret_cast<char*>(&keep_beyond_valid_duration_) -
    reinterpret_cast<char*>(&update_time_secs_)) + sizeof(keep_beyond_valid_duration_));
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.StoreEntry)
}

inline void StoreEntry::SharedCtor() {
version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hint_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&keep_beyond_valid_duration_) -
    reinterpret_cast<char*>(&hint_)) + sizeof(keep_beyond_valid_duration_));
}

StoreEntry::~StoreEntry() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.StoreEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StoreEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  version_.Destroy();
  if (this != internal_default_instance()) delete hint_;
  if (this != internal_default_instance()) delete prediction_model_;
  if (this != internal_default_instance()) delete host_model_features_;
}

void StoreEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StoreEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.StoreEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      version_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(hint_ != nullptr);
      hint_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(prediction_model_ != nullptr);
      prediction_model_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(host_model_features_ != nullptr);
      host_model_features_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&update_time_secs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&keep_beyond_valid_duration_) -
        reinterpret_cast<char*>(&update_time_secs_)) + sizeof(keep_beyond_valid_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StoreEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.Hint hint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_hint(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 update_time_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_update_time_secs(&has_bits);
          update_time_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::StoreEntryType_IsValid(val))) {
            _internal_set_entry_type(static_cast<::optimization_guide::proto::StoreEntryType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional int64 expiry_time_secs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_expiry_time_secs(&has_bits);
          expiry_time_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_prediction_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_host_model_features(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool keep_beyond_valid_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _Internal::set_has_keep_beyond_valid_duration(&has_bits);
          keep_beyond_valid_duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StoreEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.StoreEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_version(), target);
  }

  // optional .optimization_guide.proto.Hint hint = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::hint(this),
        _Internal::hint(this).GetCachedSize(), target, stream);
  }

  // optional int64 update_time_secs = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_update_time_secs(), target);
  }

  // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_entry_type(), target);
  }

  // optional int64 expiry_time_secs = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_expiry_time_secs(), target);
  }

  // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::prediction_model(this),
        _Internal::prediction_model(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::host_model_features(this),
        _Internal::host_model_features(this).GetCachedSize(), target, stream);
  }

  // optional bool keep_beyond_valid_duration = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_keep_beyond_valid_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.StoreEntry)
  return target;
}

size_t StoreEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.StoreEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string version = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_version());
    }

    // optional .optimization_guide.proto.Hint hint = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hint_);
    }

    // optional .optimization_guide.proto.PredictionModel prediction_model = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *prediction_model_);
    }

    // optional .optimization_guide.proto.HostModelFeatures host_model_features = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *host_model_features_);
    }

    // optional int64 update_time_secs = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_time_secs());
    }

    // optional int64 expiry_time_secs = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_expiry_time_secs());
    }

    // optional .optimization_guide.proto.StoreEntryType entry_type = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_entry_type());
    }

    // optional bool keep_beyond_valid_duration = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StoreEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StoreEntry*>(
      &from));
}

void StoreEntry::MergeFrom(const StoreEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.StoreEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_version(from._internal_version());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_hint()->::optimization_guide::proto::Hint::MergeFrom(from._internal_hint());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_prediction_model()->::optimization_guide::proto::PredictionModel::MergeFrom(from._internal_prediction_model());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_host_model_features()->::optimization_guide::proto::HostModelFeatures::MergeFrom(from._internal_host_model_features());
    }
    if (cached_has_bits & 0x00000010u) {
      update_time_secs_ = from.update_time_secs_;
    }
    if (cached_has_bits & 0x00000020u) {
      expiry_time_secs_ = from.expiry_time_secs_;
    }
    if (cached_has_bits & 0x00000040u) {
      entry_type_ = from.entry_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      keep_beyond_valid_duration_ = from.keep_beyond_valid_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StoreEntry::CopyFrom(const StoreEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.StoreEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreEntry::IsInitialized() const {
  return true;
}

void StoreEntry::InternalSwap(StoreEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StoreEntry, keep_beyond_valid_duration_)
      + sizeof(StoreEntry::keep_beyond_valid_duration_)
      - PROTOBUF_FIELD_OFFSET(StoreEntry, hint_)>(
          reinterpret_cast<char*>(&hint_),
          reinterpret_cast<char*>(&other->hint_));
}

std::string StoreEntry::GetTypeName() const {
  return "optimization_guide.proto.StoreEntry";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::StoreEntry*
Arena::CreateMaybeMessage< ::optimization_guide::proto::StoreEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::StoreEntry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
