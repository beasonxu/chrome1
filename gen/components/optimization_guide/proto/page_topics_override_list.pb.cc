// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/page_topics_override_list.proto

#include "components/optimization_guide/proto/page_topics_override_list.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR PageTopicsOverrideList::PageTopicsOverrideList(
    ::_pbi::ConstantInitialized)
  : entries_(){}
struct PageTopicsOverrideListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageTopicsOverrideListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageTopicsOverrideListDefaultTypeInternal() {}
  union {
    PageTopicsOverrideList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageTopicsOverrideListDefaultTypeInternal _PageTopicsOverrideList_default_instance_;
PROTOBUF_CONSTEXPR PageTopicsOverrideEntry::PageTopicsOverrideEntry(
    ::_pbi::ConstantInitialized)
  : domain_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , topics_(nullptr){}
struct PageTopicsOverrideEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageTopicsOverrideEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageTopicsOverrideEntryDefaultTypeInternal() {}
  union {
    PageTopicsOverrideEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageTopicsOverrideEntryDefaultTypeInternal _PageTopicsOverrideEntry_default_instance_;
PROTOBUF_CONSTEXPR AnnotatedPageTopics::AnnotatedPageTopics(
    ::_pbi::ConstantInitialized)
  : topic_ids_(){}
struct AnnotatedPageTopicsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnnotatedPageTopicsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnnotatedPageTopicsDefaultTypeInternal() {}
  union {
    AnnotatedPageTopics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnnotatedPageTopicsDefaultTypeInternal _AnnotatedPageTopics_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {

// ===================================================================

class PageTopicsOverrideList::_Internal {
 public:
};

PageTopicsOverrideList::PageTopicsOverrideList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  entries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageTopicsOverrideList)
}
PageTopicsOverrideList::PageTopicsOverrideList(const PageTopicsOverrideList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageTopicsOverrideList)
}

inline void PageTopicsOverrideList::SharedCtor() {
}

PageTopicsOverrideList::~PageTopicsOverrideList() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageTopicsOverrideList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageTopicsOverrideList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PageTopicsOverrideList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTopicsOverrideList::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageTopicsOverrideList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageTopicsOverrideList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .optimization_guide.proto.PageTopicsOverrideEntry entries = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageTopicsOverrideList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageTopicsOverrideList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PageTopicsOverrideEntry entries = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entries_size()); i < n; i++) {
    const auto& repfield = this->_internal_entries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageTopicsOverrideList)
  return target;
}

size_t PageTopicsOverrideList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageTopicsOverrideList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PageTopicsOverrideEntry entries = 1;
  total_size += 1UL * this->_internal_entries_size();
  for (const auto& msg : this->entries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTopicsOverrideList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageTopicsOverrideList*>(
      &from));
}

void PageTopicsOverrideList::MergeFrom(const PageTopicsOverrideList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageTopicsOverrideList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageTopicsOverrideList::CopyFrom(const PageTopicsOverrideList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageTopicsOverrideList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTopicsOverrideList::IsInitialized() const {
  return true;
}

void PageTopicsOverrideList::InternalSwap(PageTopicsOverrideList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  entries_.InternalSwap(&other->entries_);
}

std::string PageTopicsOverrideList::GetTypeName() const {
  return "optimization_guide.proto.PageTopicsOverrideList";
}


// ===================================================================

class PageTopicsOverrideEntry::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTopicsOverrideEntry>()._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::AnnotatedPageTopics& topics(const PageTopicsOverrideEntry* msg);
  static void set_has_topics(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::optimization_guide::proto::AnnotatedPageTopics&
PageTopicsOverrideEntry::_Internal::topics(const PageTopicsOverrideEntry* msg) {
  return *msg->topics_;
}
PageTopicsOverrideEntry::PageTopicsOverrideEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageTopicsOverrideEntry)
}
PageTopicsOverrideEntry::PageTopicsOverrideEntry(const PageTopicsOverrideEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    domain_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_domain()) {
    domain_.Set(from._internal_domain(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_topics()) {
    topics_ = new ::optimization_guide::proto::AnnotatedPageTopics(*from.topics_);
  } else {
    topics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageTopicsOverrideEntry)
}

inline void PageTopicsOverrideEntry::SharedCtor() {
domain_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  domain_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
topics_ = nullptr;
}

PageTopicsOverrideEntry::~PageTopicsOverrideEntry() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageTopicsOverrideEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageTopicsOverrideEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  domain_.Destroy();
  if (this != internal_default_instance()) delete topics_;
}

void PageTopicsOverrideEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTopicsOverrideEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageTopicsOverrideEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(topics_ != nullptr);
      topics_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageTopicsOverrideEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.AnnotatedPageTopics topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageTopicsOverrideEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageTopicsOverrideEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_domain(), target);
  }

  // optional .optimization_guide.proto.AnnotatedPageTopics topics = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::topics(this),
        _Internal::topics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageTopicsOverrideEntry)
  return target;
}

size_t PageTopicsOverrideEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageTopicsOverrideEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_domain());
    }

    // optional .optimization_guide.proto.AnnotatedPageTopics topics = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topics_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTopicsOverrideEntry::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageTopicsOverrideEntry*>(
      &from));
}

void PageTopicsOverrideEntry::MergeFrom(const PageTopicsOverrideEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageTopicsOverrideEntry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_topics()->::optimization_guide::proto::AnnotatedPageTopics::MergeFrom(from._internal_topics());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageTopicsOverrideEntry::CopyFrom(const PageTopicsOverrideEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageTopicsOverrideEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTopicsOverrideEntry::IsInitialized() const {
  return true;
}

void PageTopicsOverrideEntry::InternalSwap(PageTopicsOverrideEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &domain_, lhs_arena,
      &other->domain_, rhs_arena
  );
  swap(topics_, other->topics_);
}

std::string PageTopicsOverrideEntry::GetTypeName() const {
  return "optimization_guide.proto.PageTopicsOverrideEntry";
}


// ===================================================================

class AnnotatedPageTopics::_Internal {
 public:
};

AnnotatedPageTopics::AnnotatedPageTopics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  topic_ids_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.AnnotatedPageTopics)
}
AnnotatedPageTopics::AnnotatedPageTopics(const AnnotatedPageTopics& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      topic_ids_(from.topic_ids_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.AnnotatedPageTopics)
}

inline void AnnotatedPageTopics::SharedCtor() {
}

AnnotatedPageTopics::~AnnotatedPageTopics() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.AnnotatedPageTopics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnnotatedPageTopics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnnotatedPageTopics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnnotatedPageTopics::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.AnnotatedPageTopics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_ids_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AnnotatedPageTopics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 topic_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_topic_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_topic_ids(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnnotatedPageTopics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.AnnotatedPageTopics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 topic_ids = 1;
  for (int i = 0, n = this->_internal_topic_ids_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_topic_ids(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.AnnotatedPageTopics)
  return target;
}

size_t AnnotatedPageTopics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.AnnotatedPageTopics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 topic_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->topic_ids_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_topic_ids_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AnnotatedPageTopics::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AnnotatedPageTopics*>(
      &from));
}

void AnnotatedPageTopics::MergeFrom(const AnnotatedPageTopics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.AnnotatedPageTopics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  topic_ids_.MergeFrom(from.topic_ids_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AnnotatedPageTopics::CopyFrom(const AnnotatedPageTopics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.AnnotatedPageTopics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnnotatedPageTopics::IsInitialized() const {
  return true;
}

void AnnotatedPageTopics::InternalSwap(AnnotatedPageTopics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  topic_ids_.InternalSwap(&other->topic_ids_);
}

std::string AnnotatedPageTopics::GetTypeName() const {
  return "optimization_guide.proto.AnnotatedPageTopics";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageTopicsOverrideList*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageTopicsOverrideList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageTopicsOverrideList >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageTopicsOverrideEntry*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageTopicsOverrideEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageTopicsOverrideEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::AnnotatedPageTopics*
Arena::CreateMaybeMessage< ::optimization_guide::proto::AnnotatedPageTopics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::AnnotatedPageTopics >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
