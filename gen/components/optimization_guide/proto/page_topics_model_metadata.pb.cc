// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/optimization_guide/proto/page_topics_model_metadata.proto

#include "components/optimization_guide/proto/page_topics_model_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace optimization_guide {
namespace proto {
PROTOBUF_CONSTEXPR PageTopicsVisibilityPostprocessingParams::PageTopicsVisibilityPostprocessingParams(
    ::_pbi::ConstantInitialized)
  : category_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct PageTopicsVisibilityPostprocessingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageTopicsVisibilityPostprocessingParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageTopicsVisibilityPostprocessingParamsDefaultTypeInternal() {}
  union {
    PageTopicsVisibilityPostprocessingParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageTopicsVisibilityPostprocessingParamsDefaultTypeInternal _PageTopicsVisibilityPostprocessingParams_default_instance_;
PROTOBUF_CONSTEXPR PageTopicsCategoryPostprocessingParams::PageTopicsCategoryPostprocessingParams(
    ::_pbi::ConstantInitialized)
  : max_categories_(0)
  , min_category_weight_(0)
  , min_normalized_weight_within_top_n_(0)
  , min_none_weight_(0){}
struct PageTopicsCategoryPostprocessingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageTopicsCategoryPostprocessingParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageTopicsCategoryPostprocessingParamsDefaultTypeInternal() {}
  union {
    PageTopicsCategoryPostprocessingParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageTopicsCategoryPostprocessingParamsDefaultTypeInternal _PageTopicsCategoryPostprocessingParams_default_instance_;
PROTOBUF_CONSTEXPR PageTopicsOutputPostprocessingParams::PageTopicsOutputPostprocessingParams(
    ::_pbi::ConstantInitialized)
  : visibility_params_(nullptr)
  , category_params_(nullptr){}
struct PageTopicsOutputPostprocessingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageTopicsOutputPostprocessingParamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageTopicsOutputPostprocessingParamsDefaultTypeInternal() {}
  union {
    PageTopicsOutputPostprocessingParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageTopicsOutputPostprocessingParamsDefaultTypeInternal _PageTopicsOutputPostprocessingParams_default_instance_;
PROTOBUF_CONSTEXPR Topic::Topic(
    ::_pbi::ConstantInitialized)
  : topic_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , topic_id_(int64_t{0}){}
struct TopicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicDefaultTypeInternal() {}
  union {
    Topic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicDefaultTypeInternal _Topic_default_instance_;
PROTOBUF_CONSTEXPR TopicTaxonomy::TopicTaxonomy(
    ::_pbi::ConstantInitialized)
  : topics_()
  , version_(int64_t{0}){}
struct TopicTaxonomyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopicTaxonomyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopicTaxonomyDefaultTypeInternal() {}
  union {
    TopicTaxonomy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopicTaxonomyDefaultTypeInternal _TopicTaxonomy_default_instance_;
PROTOBUF_CONSTEXPR PageTopicsModelMetadata::PageTopicsModelMetadata(
    ::_pbi::ConstantInitialized)
  : supported_output_()
  , output_postprocessing_params_(nullptr)
  , topic_taxonomy_(nullptr)
  , version_(int64_t{0}){}
struct PageTopicsModelMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PageTopicsModelMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PageTopicsModelMetadataDefaultTypeInternal() {}
  union {
    PageTopicsModelMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PageTopicsModelMetadataDefaultTypeInternal _PageTopicsModelMetadata_default_instance_;
}  // namespace proto
}  // namespace optimization_guide
namespace optimization_guide {
namespace proto {
bool PageTopicsSupportedOutput_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> PageTopicsSupportedOutput_strings[3] = {};

static const char PageTopicsSupportedOutput_names[] =
  "PAGE_TOPICS_SUPPORTED_OUTPUT_CATEGORIES"
  "PAGE_TOPICS_SUPPORTED_OUTPUT_UNKNOWN"
  "PAGE_TOPICS_SUPPORTED_OUTPUT_VISIBILITY";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PageTopicsSupportedOutput_entries[] = {
  { {PageTopicsSupportedOutput_names + 0, 39}, 2 },
  { {PageTopicsSupportedOutput_names + 39, 36}, 0 },
  { {PageTopicsSupportedOutput_names + 75, 39}, 1 },
};

static const int PageTopicsSupportedOutput_entries_by_number[] = {
  1, // 0 -> PAGE_TOPICS_SUPPORTED_OUTPUT_UNKNOWN
  2, // 1 -> PAGE_TOPICS_SUPPORTED_OUTPUT_VISIBILITY
  0, // 2 -> PAGE_TOPICS_SUPPORTED_OUTPUT_CATEGORIES
};

const std::string& PageTopicsSupportedOutput_Name(
    PageTopicsSupportedOutput value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PageTopicsSupportedOutput_entries,
          PageTopicsSupportedOutput_entries_by_number,
          3, PageTopicsSupportedOutput_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PageTopicsSupportedOutput_entries,
      PageTopicsSupportedOutput_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     PageTopicsSupportedOutput_strings[idx].get();
}
bool PageTopicsSupportedOutput_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PageTopicsSupportedOutput* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PageTopicsSupportedOutput_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PageTopicsSupportedOutput>(int_value);
  }
  return success;
}

// ===================================================================

class PageTopicsVisibilityPostprocessingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTopicsVisibilityPostprocessingParams>()._has_bits_);
  static void set_has_category_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PageTopicsVisibilityPostprocessingParams::PageTopicsVisibilityPostprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
}
PageTopicsVisibilityPostprocessingParams::PageTopicsVisibilityPostprocessingParams(const PageTopicsVisibilityPostprocessingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  category_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    category_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_category_name()) {
    category_name_.Set(from._internal_category_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
}

inline void PageTopicsVisibilityPostprocessingParams::SharedCtor() {
category_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  category_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PageTopicsVisibilityPostprocessingParams::~PageTopicsVisibilityPostprocessingParams() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageTopicsVisibilityPostprocessingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  category_name_.Destroy();
}

void PageTopicsVisibilityPostprocessingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTopicsVisibilityPostprocessingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    category_name_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageTopicsVisibilityPostprocessingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string category_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_category_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageTopicsVisibilityPostprocessingParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string category_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_category_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  return target;
}

size_t PageTopicsVisibilityPostprocessingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string category_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_category_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTopicsVisibilityPostprocessingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageTopicsVisibilityPostprocessingParams*>(
      &from));
}

void PageTopicsVisibilityPostprocessingParams::MergeFrom(const PageTopicsVisibilityPostprocessingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_category_name()) {
    _internal_set_category_name(from._internal_category_name());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageTopicsVisibilityPostprocessingParams::CopyFrom(const PageTopicsVisibilityPostprocessingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageTopicsVisibilityPostprocessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTopicsVisibilityPostprocessingParams::IsInitialized() const {
  return true;
}

void PageTopicsVisibilityPostprocessingParams::InternalSwap(PageTopicsVisibilityPostprocessingParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &category_name_, lhs_arena,
      &other->category_name_, rhs_arena
  );
}

std::string PageTopicsVisibilityPostprocessingParams::GetTypeName() const {
  return "optimization_guide.proto.PageTopicsVisibilityPostprocessingParams";
}


// ===================================================================

class PageTopicsCategoryPostprocessingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTopicsCategoryPostprocessingParams>()._has_bits_);
  static void set_has_max_categories(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_min_category_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_min_normalized_weight_within_top_n(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_min_none_weight(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

PageTopicsCategoryPostprocessingParams::PageTopicsCategoryPostprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
}
PageTopicsCategoryPostprocessingParams::PageTopicsCategoryPostprocessingParams(const PageTopicsCategoryPostprocessingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&max_categories_, &from.max_categories_,
    static_cast<size_t>(reinterpret_cast<char*>(&min_none_weight_) -
    reinterpret_cast<char*>(&max_categories_)) + sizeof(min_none_weight_));
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
}

inline void PageTopicsCategoryPostprocessingParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_categories_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&min_none_weight_) -
    reinterpret_cast<char*>(&max_categories_)) + sizeof(min_none_weight_));
}

PageTopicsCategoryPostprocessingParams::~PageTopicsCategoryPostprocessingParams() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageTopicsCategoryPostprocessingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PageTopicsCategoryPostprocessingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTopicsCategoryPostprocessingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&max_categories_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&min_none_weight_) -
        reinterpret_cast<char*>(&max_categories_)) + sizeof(min_none_weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageTopicsCategoryPostprocessingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 max_categories = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_max_categories(&has_bits);
          max_categories_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float min_category_weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_min_category_weight(&has_bits);
          min_category_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_normalized_weight_within_top_n = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_min_normalized_weight_within_top_n(&has_bits);
          min_normalized_weight_within_top_n_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float min_none_weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_min_none_weight(&has_bits);
          min_none_weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageTopicsCategoryPostprocessingParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 max_categories = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_categories(), target);
  }

  // optional float min_category_weight = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_min_category_weight(), target);
  }

  // optional float min_normalized_weight_within_top_n = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_min_normalized_weight_within_top_n(), target);
  }

  // optional float min_none_weight = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_min_none_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  return target;
}

size_t PageTopicsCategoryPostprocessingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 max_categories = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_categories());
    }

    // optional float min_category_weight = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_normalized_weight_within_top_n = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float min_none_weight = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTopicsCategoryPostprocessingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageTopicsCategoryPostprocessingParams*>(
      &from));
}

void PageTopicsCategoryPostprocessingParams::MergeFrom(const PageTopicsCategoryPostprocessingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      max_categories_ = from.max_categories_;
    }
    if (cached_has_bits & 0x00000002u) {
      min_category_weight_ = from.min_category_weight_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_normalized_weight_within_top_n_ = from.min_normalized_weight_within_top_n_;
    }
    if (cached_has_bits & 0x00000008u) {
      min_none_weight_ = from.min_none_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageTopicsCategoryPostprocessingParams::CopyFrom(const PageTopicsCategoryPostprocessingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageTopicsCategoryPostprocessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTopicsCategoryPostprocessingParams::IsInitialized() const {
  return true;
}

void PageTopicsCategoryPostprocessingParams::InternalSwap(PageTopicsCategoryPostprocessingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageTopicsCategoryPostprocessingParams, min_none_weight_)
      + sizeof(PageTopicsCategoryPostprocessingParams::min_none_weight_)
      - PROTOBUF_FIELD_OFFSET(PageTopicsCategoryPostprocessingParams, max_categories_)>(
          reinterpret_cast<char*>(&max_categories_),
          reinterpret_cast<char*>(&other->max_categories_));
}

std::string PageTopicsCategoryPostprocessingParams::GetTypeName() const {
  return "optimization_guide.proto.PageTopicsCategoryPostprocessingParams";
}


// ===================================================================

class PageTopicsOutputPostprocessingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTopicsOutputPostprocessingParams>()._has_bits_);
  static const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams& visibility_params(const PageTopicsOutputPostprocessingParams* msg);
  static void set_has_visibility_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams& category_params(const PageTopicsOutputPostprocessingParams* msg);
  static void set_has_category_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams&
PageTopicsOutputPostprocessingParams::_Internal::visibility_params(const PageTopicsOutputPostprocessingParams* msg) {
  return *msg->visibility_params_;
}
const ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams&
PageTopicsOutputPostprocessingParams::_Internal::category_params(const PageTopicsOutputPostprocessingParams* msg) {
  return *msg->category_params_;
}
PageTopicsOutputPostprocessingParams::PageTopicsOutputPostprocessingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
}
PageTopicsOutputPostprocessingParams::PageTopicsOutputPostprocessingParams(const PageTopicsOutputPostprocessingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_visibility_params()) {
    visibility_params_ = new ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams(*from.visibility_params_);
  } else {
    visibility_params_ = nullptr;
  }
  if (from._internal_has_category_params()) {
    category_params_ = new ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams(*from.category_params_);
  } else {
    category_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
}

inline void PageTopicsOutputPostprocessingParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&visibility_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&category_params_) -
    reinterpret_cast<char*>(&visibility_params_)) + sizeof(category_params_));
}

PageTopicsOutputPostprocessingParams::~PageTopicsOutputPostprocessingParams() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageTopicsOutputPostprocessingParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete visibility_params_;
  if (this != internal_default_instance()) delete category_params_;
}

void PageTopicsOutputPostprocessingParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTopicsOutputPostprocessingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(visibility_params_ != nullptr);
      visibility_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(category_params_ != nullptr);
      category_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageTopicsOutputPostprocessingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .optimization_guide.proto.PageTopicsVisibilityPostprocessingParams visibility_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_visibility_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PageTopicsCategoryPostprocessingParams category_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_category_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageTopicsOutputPostprocessingParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .optimization_guide.proto.PageTopicsVisibilityPostprocessingParams visibility_params = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::visibility_params(this),
        _Internal::visibility_params(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.PageTopicsCategoryPostprocessingParams category_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::category_params(this),
        _Internal::category_params(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  return target;
}

size_t PageTopicsOutputPostprocessingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .optimization_guide.proto.PageTopicsVisibilityPostprocessingParams visibility_params = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *visibility_params_);
    }

    // optional .optimization_guide.proto.PageTopicsCategoryPostprocessingParams category_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *category_params_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTopicsOutputPostprocessingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageTopicsOutputPostprocessingParams*>(
      &from));
}

void PageTopicsOutputPostprocessingParams::MergeFrom(const PageTopicsOutputPostprocessingParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_visibility_params()->::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams::MergeFrom(from._internal_visibility_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_category_params()->::optimization_guide::proto::PageTopicsCategoryPostprocessingParams::MergeFrom(from._internal_category_params());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageTopicsOutputPostprocessingParams::CopyFrom(const PageTopicsOutputPostprocessingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageTopicsOutputPostprocessingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTopicsOutputPostprocessingParams::IsInitialized() const {
  return true;
}

void PageTopicsOutputPostprocessingParams::InternalSwap(PageTopicsOutputPostprocessingParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageTopicsOutputPostprocessingParams, category_params_)
      + sizeof(PageTopicsOutputPostprocessingParams::category_params_)
      - PROTOBUF_FIELD_OFFSET(PageTopicsOutputPostprocessingParams, visibility_params_)>(
          reinterpret_cast<char*>(&visibility_params_),
          reinterpret_cast<char*>(&other->visibility_params_));
}

std::string PageTopicsOutputPostprocessingParams::GetTypeName() const {
  return "optimization_guide.proto.PageTopicsOutputPostprocessingParams";
}


// ===================================================================

class Topic::_Internal {
 public:
  using HasBits = decltype(std::declval<Topic>()._has_bits_);
  static void set_has_topic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_topic_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Topic::Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.Topic)
}
Topic::Topic(const Topic& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  topic_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    topic_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_topic_name()) {
    topic_name_.Set(from._internal_topic_name(), 
      GetArenaForAllocation());
  }
  topic_id_ = from.topic_id_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.Topic)
}

inline void Topic::SharedCtor() {
topic_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  topic_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
topic_id_ = int64_t{0};
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.Topic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Topic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  topic_name_.Destroy();
}

void Topic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.Topic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    topic_name_.ClearNonDefaultToEmpty();
  }
  topic_id_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Topic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string topic_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 topic_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_topic_id(&has_bits);
          topic_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Topic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.Topic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string topic_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // optional int64 topic_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_topic_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.Topic)
  return target;
}

size_t Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.Topic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string topic_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic_name());
    }

    // optional int64 topic_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_topic_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topic::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Topic*>(
      &from));
}

void Topic::MergeFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_topic_name(from._internal_topic_name());
    }
    if (cached_has_bits & 0x00000002u) {
      topic_id_ = from.topic_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Topic::CopyFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {
  return true;
}

void Topic::InternalSwap(Topic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &topic_name_, lhs_arena,
      &other->topic_name_, rhs_arena
  );
  swap(topic_id_, other->topic_id_);
}

std::string Topic::GetTypeName() const {
  return "optimization_guide.proto.Topic";
}


// ===================================================================

class TopicTaxonomy::_Internal {
 public:
  using HasBits = decltype(std::declval<TopicTaxonomy>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

TopicTaxonomy::TopicTaxonomy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  topics_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.TopicTaxonomy)
}
TopicTaxonomy::TopicTaxonomy(const TopicTaxonomy& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.TopicTaxonomy)
}

inline void TopicTaxonomy::SharedCtor() {
version_ = int64_t{0};
}

TopicTaxonomy::~TopicTaxonomy() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.TopicTaxonomy)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopicTaxonomy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TopicTaxonomy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TopicTaxonomy::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.TopicTaxonomy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  version_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* TopicTaxonomy::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .optimization_guide.proto.Topic topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopicTaxonomy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.TopicTaxonomy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // repeated .optimization_guide.proto.Topic topics = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_topics_size()); i < n; i++) {
    const auto& repfield = this->_internal_topics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.TopicTaxonomy)
  return target;
}

size_t TopicTaxonomy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.TopicTaxonomy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.Topic topics = 2;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int64 version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicTaxonomy::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const TopicTaxonomy*>(
      &from));
}

void TopicTaxonomy::MergeFrom(const TopicTaxonomy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.TopicTaxonomy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from._internal_has_version()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void TopicTaxonomy::CopyFrom(const TopicTaxonomy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.TopicTaxonomy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicTaxonomy::IsInitialized() const {
  return true;
}

void TopicTaxonomy::InternalSwap(TopicTaxonomy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  topics_.InternalSwap(&other->topics_);
  swap(version_, other->version_);
}

std::string TopicTaxonomy::GetTypeName() const {
  return "optimization_guide.proto.TopicTaxonomy";
}


// ===================================================================

class PageTopicsModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<PageTopicsModelMetadata>()._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams& output_postprocessing_params(const PageTopicsModelMetadata* msg);
  static void set_has_output_postprocessing_params(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::optimization_guide::proto::TopicTaxonomy& topic_taxonomy(const PageTopicsModelMetadata* msg);
  static void set_has_topic_taxonomy(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::optimization_guide::proto::PageTopicsOutputPostprocessingParams&
PageTopicsModelMetadata::_Internal::output_postprocessing_params(const PageTopicsModelMetadata* msg) {
  return *msg->output_postprocessing_params_;
}
const ::optimization_guide::proto::TopicTaxonomy&
PageTopicsModelMetadata::_Internal::topic_taxonomy(const PageTopicsModelMetadata* msg) {
  return *msg->topic_taxonomy_;
}
PageTopicsModelMetadata::PageTopicsModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  supported_output_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:optimization_guide.proto.PageTopicsModelMetadata)
}
PageTopicsModelMetadata::PageTopicsModelMetadata(const PageTopicsModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      supported_output_(from.supported_output_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_output_postprocessing_params()) {
    output_postprocessing_params_ = new ::optimization_guide::proto::PageTopicsOutputPostprocessingParams(*from.output_postprocessing_params_);
  } else {
    output_postprocessing_params_ = nullptr;
  }
  if (from._internal_has_topic_taxonomy()) {
    topic_taxonomy_ = new ::optimization_guide::proto::TopicTaxonomy(*from.topic_taxonomy_);
  } else {
    topic_taxonomy_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:optimization_guide.proto.PageTopicsModelMetadata)
}

inline void PageTopicsModelMetadata::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&output_postprocessing_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&output_postprocessing_params_)) + sizeof(version_));
}

PageTopicsModelMetadata::~PageTopicsModelMetadata() {
  // @@protoc_insertion_point(destructor:optimization_guide.proto.PageTopicsModelMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PageTopicsModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete output_postprocessing_params_;
  if (this != internal_default_instance()) delete topic_taxonomy_;
}

void PageTopicsModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PageTopicsModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:optimization_guide.proto.PageTopicsModelMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_output_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(output_postprocessing_params_ != nullptr);
      output_postprocessing_params_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(topic_taxonomy_ != nullptr);
      topic_taxonomy_->Clear();
    }
  }
  version_ = int64_t{0};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PageTopicsModelMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .optimization_guide.proto.PageTopicsSupportedOutput supported_output = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::optimization_guide::proto::PageTopicsSupportedOutput_IsValid(val))) {
              _internal_add_supported_output(static_cast<::optimization_guide::proto::PageTopicsSupportedOutput>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<std::string>(_internal_mutable_supported_output(), ptr, ctx, ::optimization_guide::proto::PageTopicsSupportedOutput_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.PageTopicsOutputPostprocessingParams output_postprocessing_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_output_postprocessing_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .optimization_guide.proto.TopicTaxonomy topic_taxonomy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_taxonomy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PageTopicsModelMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:optimization_guide.proto.PageTopicsModelMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // repeated .optimization_guide.proto.PageTopicsSupportedOutput supported_output = 2;
  for (int i = 0, n = this->_internal_supported_output_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_supported_output(i), target);
  }

  // optional .optimization_guide.proto.PageTopicsOutputPostprocessingParams output_postprocessing_params = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::output_postprocessing_params(this),
        _Internal::output_postprocessing_params(this).GetCachedSize(), target, stream);
  }

  // optional .optimization_guide.proto.TopicTaxonomy topic_taxonomy = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::topic_taxonomy(this),
        _Internal::topic_taxonomy(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:optimization_guide.proto.PageTopicsModelMetadata)
  return target;
}

size_t PageTopicsModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:optimization_guide.proto.PageTopicsModelMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .optimization_guide.proto.PageTopicsSupportedOutput supported_output = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_supported_output_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_supported_output(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .optimization_guide.proto.PageTopicsOutputPostprocessingParams output_postprocessing_params = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *output_postprocessing_params_);
    }

    // optional .optimization_guide.proto.TopicTaxonomy topic_taxonomy = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topic_taxonomy_);
    }

    // optional int64 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PageTopicsModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PageTopicsModelMetadata*>(
      &from));
}

void PageTopicsModelMetadata::MergeFrom(const PageTopicsModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:optimization_guide.proto.PageTopicsModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_output_.MergeFrom(from.supported_output_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_output_postprocessing_params()->::optimization_guide::proto::PageTopicsOutputPostprocessingParams::MergeFrom(from._internal_output_postprocessing_params());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_topic_taxonomy()->::optimization_guide::proto::TopicTaxonomy::MergeFrom(from._internal_topic_taxonomy());
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PageTopicsModelMetadata::CopyFrom(const PageTopicsModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:optimization_guide.proto.PageTopicsModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PageTopicsModelMetadata::IsInitialized() const {
  return true;
}

void PageTopicsModelMetadata::InternalSwap(PageTopicsModelMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supported_output_.InternalSwap(&other->supported_output_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PageTopicsModelMetadata, version_)
      + sizeof(PageTopicsModelMetadata::version_)
      - PROTOBUF_FIELD_OFFSET(PageTopicsModelMetadata, output_postprocessing_params_)>(
          reinterpret_cast<char*>(&output_postprocessing_params_),
          reinterpret_cast<char*>(&other->output_postprocessing_params_));
}

std::string PageTopicsModelMetadata::GetTypeName() const {
  return "optimization_guide.proto.PageTopicsModelMetadata";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace optimization_guide
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageTopicsVisibilityPostprocessingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageTopicsCategoryPostprocessingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageTopicsOutputPostprocessingParams*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageTopicsOutputPostprocessingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageTopicsOutputPostprocessingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::Topic*
Arena::CreateMaybeMessage< ::optimization_guide::proto::Topic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::Topic >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::TopicTaxonomy*
Arena::CreateMaybeMessage< ::optimization_guide::proto::TopicTaxonomy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::TopicTaxonomy >(arena);
}
template<> PROTOBUF_NOINLINE ::optimization_guide::proto::PageTopicsModelMetadata*
Arena::CreateMaybeMessage< ::optimization_guide::proto::PageTopicsModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::optimization_guide::proto::PageTopicsModelMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
