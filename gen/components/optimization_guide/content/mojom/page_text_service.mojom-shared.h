// components/optimization_guide/content/mojom/page_text_service.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_OPTIMIZATION_GUIDE_CONTENT_MOJOM_PAGE_TEXT_SERVICE_MOJOM_SHARED_H_
#define COMPONENTS_OPTIMIZATION_GUIDE_CONTENT_MOJOM_PAGE_TEXT_SERVICE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/optimization_guide/content/mojom/page_text_service.mojom-shared-internal.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace optimization_guide {
namespace mojom {
class PageTextDumpRequestDataView;



}  // namespace mojom
}  // namespace optimization_guide

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::optimization_guide::mojom::PageTextDumpRequestDataView> {
  using Data = ::optimization_guide::mojom::internal::PageTextDumpRequest_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace optimization_guide {
namespace mojom {


enum class TextDumpEvent : int32_t {
  
  kFirstLayout = 0,
  
  kFinishedLoad = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, TextDumpEvent value);
inline bool IsKnownEnumValue(TextDumpEvent value) {
  return internal::TextDumpEvent_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PageTextConsumerInterfaceBase {};

using PageTextConsumerPtrDataView =
    mojo::InterfacePtrDataView<PageTextConsumerInterfaceBase>;
using PageTextConsumerRequestDataView =
    mojo::InterfaceRequestDataView<PageTextConsumerInterfaceBase>;
using PageTextConsumerAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageTextConsumerInterfaceBase>;
using PageTextConsumerAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageTextConsumerInterfaceBase>;
class PageTextServiceInterfaceBase {};

using PageTextServicePtrDataView =
    mojo::InterfacePtrDataView<PageTextServiceInterfaceBase>;
using PageTextServiceRequestDataView =
    mojo::InterfaceRequestDataView<PageTextServiceInterfaceBase>;
using PageTextServiceAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PageTextServiceInterfaceBase>;
using PageTextServiceAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PageTextServiceInterfaceBase>;


class PageTextDumpRequestDataView {
 public:
  PageTextDumpRequestDataView() = default;

  PageTextDumpRequestDataView(
      internal::PageTextDumpRequest_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint32_t max_size() const {
    return data_->max_size;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadEvent(UserType* output) const {
    auto data_value = data_->event;
    return mojo::internal::Deserialize<::optimization_guide::mojom::TextDumpEvent>(
        data_value, output);
  }
  TextDumpEvent event() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::optimization_guide::mojom::TextDumpEvent>(data_->event));
  }
 private:
  internal::PageTextDumpRequest_Data* data_ = nullptr;
};



}  // namespace mojom
}  // namespace optimization_guide

namespace std {

template <>
struct hash<::optimization_guide::mojom::TextDumpEvent>
    : public mojo::internal::EnumHashImpl<::optimization_guide::mojom::TextDumpEvent> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::optimization_guide::mojom::TextDumpEvent, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::optimization_guide::mojom::TextDumpEvent, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::optimization_guide::mojom::TextDumpEvent>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::optimization_guide::mojom::PageTextDumpRequestDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::optimization_guide::mojom::PageTextDumpRequestDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::optimization_guide::mojom::internal::PageTextDumpRequest_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->max_size = Traits::max_size(input);
    mojo::internal::Serialize<::optimization_guide::mojom::TextDumpEvent>(
        Traits::event(input), &fragment->event);
  }

  static bool Deserialize(::optimization_guide::mojom::internal::PageTextDumpRequest_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::optimization_guide::mojom::PageTextDumpRequestDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace optimization_guide {
namespace mojom {




}  // namespace mojom
}  // namespace optimization_guide

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::optimization_guide::mojom::TextDumpEvent> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::optimization_guide::mojom::TextDumpEvent value);
};

} // namespace perfetto

#endif  // COMPONENTS_OPTIMIZATION_GUIDE_CONTENT_MOJOM_PAGE_TEXT_SERVICE_MOJOM_SHARED_H_