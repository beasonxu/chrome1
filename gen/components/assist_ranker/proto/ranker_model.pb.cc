// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_model.proto

#include "ranker_model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace assist_ranker {
PROTOBUF_CONSTEXPR RankerModelMetadata::RankerModelMetadata(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , source_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , last_modified_sec_(int64_t{0})
  , cache_duration_sec_(int64_t{0})
  , model_version_(0u)
  , input_features_names_are_hex_hashes_(false){}
struct RankerModelMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankerModelMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankerModelMetadataDefaultTypeInternal() {}
  union {
    RankerModelMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankerModelMetadataDefaultTypeInternal _RankerModelMetadata_default_instance_;
PROTOBUF_CONSTEXPR RankerModelProto::RankerModelProto(
    ::_pbi::ConstantInitialized)
  : metadata_(nullptr)
  , _oneof_case_{}{}
struct RankerModelProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankerModelProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankerModelProtoDefaultTypeInternal() {}
  union {
    RankerModelProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankerModelProtoDefaultTypeInternal _RankerModelProto_default_instance_;
}  // namespace assist_ranker
namespace assist_ranker {

// ===================================================================

class RankerModelMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<RankerModelMetadata>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_label(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_last_modified_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cache_duration_sec(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_model_version(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_input_features_names_are_hex_hashes(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

RankerModelMetadata::RankerModelMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.RankerModelMetadata)
}
RankerModelMetadata::RankerModelMetadata(const RankerModelMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_label()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_source()) {
    source_.Set(from._internal_source(), 
      GetArenaForAllocation());
  }
  ::memcpy(&last_modified_sec_, &from.last_modified_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&input_features_names_are_hex_hashes_) -
    reinterpret_cast<char*>(&last_modified_sec_)) + sizeof(input_features_names_are_hex_hashes_));
  // @@protoc_insertion_point(copy_constructor:assist_ranker.RankerModelMetadata)
}

inline void RankerModelMetadata::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
source_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  source_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&last_modified_sec_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&input_features_names_are_hex_hashes_) -
    reinterpret_cast<char*>(&last_modified_sec_)) + sizeof(input_features_names_are_hex_hashes_));
}

RankerModelMetadata::~RankerModelMetadata() {
  // @@protoc_insertion_point(destructor:assist_ranker.RankerModelMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankerModelMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  label_.Destroy();
  source_.Destroy();
}

void RankerModelMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RankerModelMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.RankerModelMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      label_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      source_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&last_modified_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&input_features_names_are_hex_hashes_) -
        reinterpret_cast<char*>(&last_modified_sec_)) + sizeof(input_features_names_are_hex_hashes_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RankerModelMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string source = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_modified_sec = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_last_modified_sec(&has_bits);
          last_modified_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 cache_duration_sec = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_cache_duration_sec(&has_bits);
          cache_duration_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 model_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_model_version(&has_bits);
          model_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool input_features_names_are_hex_hashes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _Internal::set_has_input_features_names_are_hex_hashes(&has_bits);
          input_features_names_are_hex_hashes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankerModelMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.RankerModelMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional string label = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // optional string source = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_source(), target);
  }

  // optional int64 last_modified_sec = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_last_modified_sec(), target);
  }

  // optional int64 cache_duration_sec = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_cache_duration_sec(), target);
  }

  // optional uint32 model_version = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_model_version(), target);
  }

  // optional bool input_features_names_are_hex_hashes = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_input_features_names_are_hex_hashes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.RankerModelMetadata)
  return target;
}

size_t RankerModelMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.RankerModelMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string label = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_label());
    }

    // optional string source = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source());
    }

    // optional int64 last_modified_sec = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified_sec());
    }

    // optional int64 cache_duration_sec = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cache_duration_sec());
    }

    // optional uint32 model_version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_model_version());
    }

    // optional bool input_features_names_are_hex_hashes = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankerModelMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RankerModelMetadata*>(
      &from));
}

void RankerModelMetadata::MergeFrom(const RankerModelMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.RankerModelMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_label(from._internal_label());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_source(from._internal_source());
    }
    if (cached_has_bits & 0x00000008u) {
      last_modified_sec_ = from.last_modified_sec_;
    }
    if (cached_has_bits & 0x00000010u) {
      cache_duration_sec_ = from.cache_duration_sec_;
    }
    if (cached_has_bits & 0x00000020u) {
      model_version_ = from.model_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      input_features_names_are_hex_hashes_ = from.input_features_names_are_hex_hashes_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RankerModelMetadata::CopyFrom(const RankerModelMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.RankerModelMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerModelMetadata::IsInitialized() const {
  return true;
}

void RankerModelMetadata::InternalSwap(RankerModelMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &source_, lhs_arena,
      &other->source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RankerModelMetadata, input_features_names_are_hex_hashes_)
      + sizeof(RankerModelMetadata::input_features_names_are_hex_hashes_)
      - PROTOBUF_FIELD_OFFSET(RankerModelMetadata, last_modified_sec_)>(
          reinterpret_cast<char*>(&last_modified_sec_),
          reinterpret_cast<char*>(&other->last_modified_sec_));
}

std::string RankerModelMetadata::GetTypeName() const {
  return "assist_ranker.RankerModelMetadata";
}


// ===================================================================

class RankerModelProto::_Internal {
 public:
  using HasBits = decltype(std::declval<RankerModelProto>()._has_bits_);
  static const ::assist_ranker::RankerModelMetadata& metadata(const RankerModelProto* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::assist_ranker::TranslateRankerModel& translate(const RankerModelProto* msg);
  static const ::assist_ranker::GenericLogisticRegressionModel& logistic_regression(const RankerModelProto* msg);
  static const ::assist_ranker::NNClassifierModel& nn_classifier(const RankerModelProto* msg);
};

const ::assist_ranker::RankerModelMetadata&
RankerModelProto::_Internal::metadata(const RankerModelProto* msg) {
  return *msg->metadata_;
}
const ::assist_ranker::TranslateRankerModel&
RankerModelProto::_Internal::translate(const RankerModelProto* msg) {
  return *msg->model_.translate_;
}
const ::assist_ranker::GenericLogisticRegressionModel&
RankerModelProto::_Internal::logistic_regression(const RankerModelProto* msg) {
  return *msg->model_.logistic_regression_;
}
const ::assist_ranker::NNClassifierModel&
RankerModelProto::_Internal::nn_classifier(const RankerModelProto* msg) {
  return *msg->model_.nn_classifier_;
}
void RankerModelProto::set_allocated_translate(::assist_ranker::TranslateRankerModel* translate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (translate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translate));
    if (message_arena != submessage_arena) {
      translate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translate, submessage_arena);
    }
    set_has_translate();
    model_.translate_ = translate;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.translate)
}
void RankerModelProto::clear_translate() {
  if (_internal_has_translate()) {
    if (GetArenaForAllocation() == nullptr) {
      delete model_.translate_;
    }
    clear_has_model();
  }
}
void RankerModelProto::set_allocated_logistic_regression(::assist_ranker::GenericLogisticRegressionModel* logistic_regression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (logistic_regression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logistic_regression));
    if (message_arena != submessage_arena) {
      logistic_regression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logistic_regression, submessage_arena);
    }
    set_has_logistic_regression();
    model_.logistic_regression_ = logistic_regression;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.logistic_regression)
}
void RankerModelProto::clear_logistic_regression() {
  if (_internal_has_logistic_regression()) {
    if (GetArenaForAllocation() == nullptr) {
      delete model_.logistic_regression_;
    }
    clear_has_model();
  }
}
void RankerModelProto::set_allocated_nn_classifier(::assist_ranker::NNClassifierModel* nn_classifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (nn_classifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nn_classifier));
    if (message_arena != submessage_arena) {
      nn_classifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nn_classifier, submessage_arena);
    }
    set_has_nn_classifier();
    model_.nn_classifier_ = nn_classifier;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerModelProto.nn_classifier)
}
void RankerModelProto::clear_nn_classifier() {
  if (_internal_has_nn_classifier()) {
    if (GetArenaForAllocation() == nullptr) {
      delete model_.nn_classifier_;
    }
    clear_has_model();
  }
}
RankerModelProto::RankerModelProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.RankerModelProto)
}
RankerModelProto::RankerModelProto(const RankerModelProto& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::assist_ranker::RankerModelMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  clear_has_model();
  switch (from.model_case()) {
    case kTranslate: {
      _internal_mutable_translate()->::assist_ranker::TranslateRankerModel::MergeFrom(from._internal_translate());
      break;
    }
    case kLogisticRegression: {
      _internal_mutable_logistic_regression()->::assist_ranker::GenericLogisticRegressionModel::MergeFrom(from._internal_logistic_regression());
      break;
    }
    case kNnClassifier: {
      _internal_mutable_nn_classifier()->::assist_ranker::NNClassifierModel::MergeFrom(from._internal_nn_classifier());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.RankerModelProto)
}

inline void RankerModelProto::SharedCtor() {
metadata_ = nullptr;
clear_has_model();
}

RankerModelProto::~RankerModelProto() {
  // @@protoc_insertion_point(destructor:assist_ranker.RankerModelProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankerModelProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (has_model()) {
    clear_model();
  }
}

void RankerModelProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RankerModelProto::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.RankerModelProto)
  switch (model_case()) {
    case kTranslate: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.translate_;
      }
      break;
    }
    case kLogisticRegression: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.logistic_regression_;
      }
      break;
    }
    case kNnClassifier: {
      if (GetArenaForAllocation() == nullptr) {
        delete model_.nn_classifier_;
      }
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODEL_NOT_SET;
}


void RankerModelProto::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.RankerModelProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  clear_model();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RankerModelProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .assist_ranker.RankerModelMetadata metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.TranslateRankerModel translate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_translate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_logistic_regression(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.NNClassifierModel nn_classifier = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_nn_classifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankerModelProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.RankerModelProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.RankerModelMetadata metadata = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  switch (model_case()) {
    case kTranslate: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, _Internal::translate(this),
          _Internal::translate(this).GetCachedSize(), target, stream);
      break;
    }
    case kLogisticRegression: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::logistic_regression(this),
          _Internal::logistic_regression(this).GetCachedSize(), target, stream);
      break;
    }
    case kNnClassifier: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::nn_classifier(this),
          _Internal::nn_classifier(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.RankerModelProto)
  return target;
}

size_t RankerModelProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.RankerModelProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .assist_ranker.RankerModelMetadata metadata = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  switch (model_case()) {
    // .assist_ranker.TranslateRankerModel translate = 2;
    case kTranslate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.translate_);
      break;
    }
    // .assist_ranker.GenericLogisticRegressionModel logistic_regression = 3;
    case kLogisticRegression: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.logistic_regression_);
      break;
    }
    // .assist_ranker.NNClassifierModel nn_classifier = 4;
    case kNnClassifier: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *model_.nn_classifier_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankerModelProto::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RankerModelProto*>(
      &from));
}

void RankerModelProto::MergeFrom(const RankerModelProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.RankerModelProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::assist_ranker::RankerModelMetadata::MergeFrom(from._internal_metadata());
  }
  switch (from.model_case()) {
    case kTranslate: {
      _internal_mutable_translate()->::assist_ranker::TranslateRankerModel::MergeFrom(from._internal_translate());
      break;
    }
    case kLogisticRegression: {
      _internal_mutable_logistic_regression()->::assist_ranker::GenericLogisticRegressionModel::MergeFrom(from._internal_logistic_regression());
      break;
    }
    case kNnClassifier: {
      _internal_mutable_nn_classifier()->::assist_ranker::NNClassifierModel::MergeFrom(from._internal_nn_classifier());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RankerModelProto::CopyFrom(const RankerModelProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.RankerModelProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerModelProto::IsInitialized() const {
  return true;
}

void RankerModelProto::InternalSwap(RankerModelProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(metadata_, other->metadata_);
  swap(model_, other->model_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string RankerModelProto::GetTypeName() const {
  return "assist_ranker.RankerModelProto";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::RankerModelMetadata*
Arena::CreateMaybeMessage< ::assist_ranker::RankerModelMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::RankerModelMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::RankerModelProto*
Arena::CreateMaybeMessage< ::assist_ranker::RankerModelProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::RankerModelProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
