// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: nn_classifier.proto

#include "nn_classifier.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace assist_ranker {
PROTOBUF_CONSTEXPR FloatVector::FloatVector(
    ::_pbi::ConstantInitialized)
  : values_(){}
struct FloatVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatVectorDefaultTypeInternal() {}
  union {
    FloatVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatVectorDefaultTypeInternal _FloatVector_default_instance_;
PROTOBUF_CONSTEXPR NNLayer::NNLayer(
    ::_pbi::ConstantInitialized)
  : weights_()
  , biases_(nullptr){}
struct NNLayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NNLayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NNLayerDefaultTypeInternal() {}
  union {
    NNLayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NNLayerDefaultTypeInternal _NNLayer_default_instance_;
PROTOBUF_CONSTEXPR NNClassifierModel::NNClassifierModel(
    ::_pbi::ConstantInitialized)
  : hidden_layer_(nullptr)
  , logits_layer_(nullptr)
  , preprocessor_config_(nullptr){}
struct NNClassifierModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NNClassifierModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NNClassifierModelDefaultTypeInternal() {}
  union {
    NNClassifierModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NNClassifierModelDefaultTypeInternal _NNClassifierModel_default_instance_;
}  // namespace assist_ranker
namespace assist_ranker {

// ===================================================================

class FloatVector::_Internal {
 public:
};

FloatVector::FloatVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.FloatVector)
}
FloatVector::FloatVector(const FloatVector& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FloatVector)
}

inline void FloatVector::SharedCtor() {
}

FloatVector::~FloatVector() {
  // @@protoc_insertion_point(destructor:assist_ranker.FloatVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatVector::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FloatVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FloatVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.FloatVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_values(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.FloatVector)
  return target;
}

size_t FloatVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FloatVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_values_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatVector::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FloatVector*>(
      &from));
}

void FloatVector::MergeFrom(const FloatVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FloatVector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FloatVector::CopyFrom(const FloatVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FloatVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatVector::IsInitialized() const {
  return true;
}

void FloatVector::InternalSwap(FloatVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

std::string FloatVector::GetTypeName() const {
  return "assist_ranker.FloatVector";
}


// ===================================================================

class NNLayer::_Internal {
 public:
  using HasBits = decltype(std::declval<NNLayer>()._has_bits_);
  static const ::assist_ranker::FloatVector& biases(const NNLayer* msg);
  static void set_has_biases(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::assist_ranker::FloatVector&
NNLayer::_Internal::biases(const NNLayer* msg) {
  return *msg->biases_;
}
NNLayer::NNLayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  weights_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.NNLayer)
}
NNLayer::NNLayer(const NNLayer& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      weights_(from.weights_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_biases()) {
    biases_ = new ::assist_ranker::FloatVector(*from.biases_);
  } else {
    biases_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.NNLayer)
}

inline void NNLayer::SharedCtor() {
biases_ = nullptr;
}

NNLayer::~NNLayer() {
  // @@protoc_insertion_point(destructor:assist_ranker.NNLayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NNLayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete biases_;
}

void NNLayer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NNLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.NNLayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  weights_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(biases_ != nullptr);
    biases_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NNLayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .assist_ranker.FloatVector weights = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_weights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .assist_ranker.FloatVector biases = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_biases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NNLayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.NNLayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .assist_ranker.FloatVector weights = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_weights_size()); i < n; i++) {
    const auto& repfield = this->_internal_weights(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.FloatVector biases = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::biases(this),
        _Internal::biases(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.NNLayer)
  return target;
}

size_t NNLayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.NNLayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .assist_ranker.FloatVector weights = 1;
  total_size += 1UL * this->_internal_weights_size();
  for (const auto& msg : this->weights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional .assist_ranker.FloatVector biases = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *biases_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NNLayer::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NNLayer*>(
      &from));
}

void NNLayer::MergeFrom(const NNLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.NNLayer)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  weights_.MergeFrom(from.weights_);
  if (from._internal_has_biases()) {
    _internal_mutable_biases()->::assist_ranker::FloatVector::MergeFrom(from._internal_biases());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NNLayer::CopyFrom(const NNLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.NNLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNLayer::IsInitialized() const {
  return true;
}

void NNLayer::InternalSwap(NNLayer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  weights_.InternalSwap(&other->weights_);
  swap(biases_, other->biases_);
}

std::string NNLayer::GetTypeName() const {
  return "assist_ranker.NNLayer";
}


// ===================================================================

class NNClassifierModel::_Internal {
 public:
  using HasBits = decltype(std::declval<NNClassifierModel>()._has_bits_);
  static const ::assist_ranker::NNLayer& hidden_layer(const NNClassifierModel* msg);
  static void set_has_hidden_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::assist_ranker::NNLayer& logits_layer(const NNClassifierModel* msg);
  static void set_has_logits_layer(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::assist_ranker::ExamplePreprocessorConfig& preprocessor_config(const NNClassifierModel* msg);
  static void set_has_preprocessor_config(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::assist_ranker::NNLayer&
NNClassifierModel::_Internal::hidden_layer(const NNClassifierModel* msg) {
  return *msg->hidden_layer_;
}
const ::assist_ranker::NNLayer&
NNClassifierModel::_Internal::logits_layer(const NNClassifierModel* msg) {
  return *msg->logits_layer_;
}
const ::assist_ranker::ExamplePreprocessorConfig&
NNClassifierModel::_Internal::preprocessor_config(const NNClassifierModel* msg) {
  return *msg->preprocessor_config_;
}
void NNClassifierModel::clear_preprocessor_config() {
  if (preprocessor_config_ != nullptr) preprocessor_config_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
NNClassifierModel::NNClassifierModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.NNClassifierModel)
}
NNClassifierModel::NNClassifierModel(const NNClassifierModel& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_hidden_layer()) {
    hidden_layer_ = new ::assist_ranker::NNLayer(*from.hidden_layer_);
  } else {
    hidden_layer_ = nullptr;
  }
  if (from._internal_has_logits_layer()) {
    logits_layer_ = new ::assist_ranker::NNLayer(*from.logits_layer_);
  } else {
    logits_layer_ = nullptr;
  }
  if (from._internal_has_preprocessor_config()) {
    preprocessor_config_ = new ::assist_ranker::ExamplePreprocessorConfig(*from.preprocessor_config_);
  } else {
    preprocessor_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.NNClassifierModel)
}

inline void NNClassifierModel::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&hidden_layer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preprocessor_config_) -
    reinterpret_cast<char*>(&hidden_layer_)) + sizeof(preprocessor_config_));
}

NNClassifierModel::~NNClassifierModel() {
  // @@protoc_insertion_point(destructor:assist_ranker.NNClassifierModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NNClassifierModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete hidden_layer_;
  if (this != internal_default_instance()) delete logits_layer_;
  if (this != internal_default_instance()) delete preprocessor_config_;
}

void NNClassifierModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NNClassifierModel::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.NNClassifierModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(hidden_layer_ != nullptr);
      hidden_layer_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(logits_layer_ != nullptr);
      logits_layer_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(preprocessor_config_ != nullptr);
      preprocessor_config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* NNClassifierModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .assist_ranker.NNLayer hidden_layer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_hidden_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .assist_ranker.NNLayer logits_layer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_logits_layer(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_preprocessor_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NNClassifierModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.NNClassifierModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.NNLayer hidden_layer = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::hidden_layer(this),
        _Internal::hidden_layer(this).GetCachedSize(), target, stream);
  }

  // optional .assist_ranker.NNLayer logits_layer = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::logits_layer(this),
        _Internal::logits_layer(this).GetCachedSize(), target, stream);
  }

  // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::preprocessor_config(this),
        _Internal::preprocessor_config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.NNClassifierModel)
  return target;
}

size_t NNClassifierModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.NNClassifierModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .assist_ranker.NNLayer hidden_layer = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *hidden_layer_);
    }

    // optional .assist_ranker.NNLayer logits_layer = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *logits_layer_);
    }

    // optional .assist_ranker.ExamplePreprocessorConfig preprocessor_config = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *preprocessor_config_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NNClassifierModel::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const NNClassifierModel*>(
      &from));
}

void NNClassifierModel::MergeFrom(const NNClassifierModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.NNClassifierModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_hidden_layer()->::assist_ranker::NNLayer::MergeFrom(from._internal_hidden_layer());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_logits_layer()->::assist_ranker::NNLayer::MergeFrom(from._internal_logits_layer());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_preprocessor_config()->::assist_ranker::ExamplePreprocessorConfig::MergeFrom(from._internal_preprocessor_config());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void NNClassifierModel::CopyFrom(const NNClassifierModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.NNClassifierModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NNClassifierModel::IsInitialized() const {
  return true;
}

void NNClassifierModel::InternalSwap(NNClassifierModel* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NNClassifierModel, preprocessor_config_)
      + sizeof(NNClassifierModel::preprocessor_config_)
      - PROTOBUF_FIELD_OFFSET(NNClassifierModel, hidden_layer_)>(
          reinterpret_cast<char*>(&hidden_layer_),
          reinterpret_cast<char*>(&other->hidden_layer_));
}

std::string NNClassifierModel::GetTypeName() const {
  return "assist_ranker.NNClassifierModel";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::FloatVector*
Arena::CreateMaybeMessage< ::assist_ranker::FloatVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::FloatVector >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::NNLayer*
Arena::CreateMaybeMessage< ::assist_ranker::NNLayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::NNLayer >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::NNClassifierModel*
Arena::CreateMaybeMessage< ::assist_ranker::NNClassifierModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::NNClassifierModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
