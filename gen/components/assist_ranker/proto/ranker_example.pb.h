// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_example.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ranker_5fexample_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ranker_5fexample_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry_lite.h>
#include <google/protobuf/map_field_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ranker_5fexample_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ranker_5fexample_2eproto {
  static const uint32_t offsets[];
};
namespace assist_ranker {
class Feature;
struct FeatureDefaultTypeInternal;
extern FeatureDefaultTypeInternal _Feature_default_instance_;
class FloatList;
struct FloatListDefaultTypeInternal;
extern FloatListDefaultTypeInternal _FloatList_default_instance_;
class RankerExample;
struct RankerExampleDefaultTypeInternal;
extern RankerExampleDefaultTypeInternal _RankerExample_default_instance_;
class RankerExample_FeaturesEntry_DoNotUse;
struct RankerExample_FeaturesEntry_DoNotUseDefaultTypeInternal;
extern RankerExample_FeaturesEntry_DoNotUseDefaultTypeInternal _RankerExample_FeaturesEntry_DoNotUse_default_instance_;
class StringList;
struct StringListDefaultTypeInternal;
extern StringListDefaultTypeInternal _StringList_default_instance_;
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> ::assist_ranker::Feature* Arena::CreateMaybeMessage<::assist_ranker::Feature>(Arena*);
template<> ::assist_ranker::FloatList* Arena::CreateMaybeMessage<::assist_ranker::FloatList>(Arena*);
template<> ::assist_ranker::RankerExample* Arena::CreateMaybeMessage<::assist_ranker::RankerExample>(Arena*);
template<> ::assist_ranker::RankerExample_FeaturesEntry_DoNotUse* Arena::CreateMaybeMessage<::assist_ranker::RankerExample_FeaturesEntry_DoNotUse>(Arena*);
template<> ::assist_ranker::StringList* Arena::CreateMaybeMessage<::assist_ranker::StringList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace assist_ranker {

// ===================================================================

class StringList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.StringList) */ {
 public:
  inline StringList() : StringList(nullptr) {}
  ~StringList() override;
  explicit PROTOBUF_CONSTEXPR StringList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StringList(const StringList& from);
  StringList(StringList&& from) noexcept
    : StringList() {
    *this = ::std::move(from);
  }

  inline StringList& operator=(const StringList& from) {
    CopyFrom(from);
    return *this;
  }
  inline StringList& operator=(StringList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StringList& default_instance() {
    return *internal_default_instance();
  }
  static inline const StringList* internal_default_instance() {
    return reinterpret_cast<const StringList*>(
               &_StringList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StringList& a, StringList& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StringList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StringList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StringList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StringList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StringList& from);
  void MergeFrom(const StringList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StringList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.StringList";
  }
  protected:
  explicit StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStringValueFieldNumber = 1,
  };
  // repeated bytes string_value = 1;
  int string_value_size() const;
  private:
  int _internal_string_value_size() const;
  public:
  void clear_string_value();
  const std::string& string_value(int index) const;
  std::string* mutable_string_value(int index);
  void set_string_value(int index, const std::string& value);
  void set_string_value(int index, std::string&& value);
  void set_string_value(int index, const char* value);
  void set_string_value(int index, const void* value, size_t size);
  std::string* add_string_value();
  void add_string_value(const std::string& value);
  void add_string_value(std::string&& value);
  void add_string_value(const char* value);
  void add_string_value(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_value();
  private:
  const std::string& _internal_string_value(int index) const;
  std::string* _internal_add_string_value();
  public:

  // @@protoc_insertion_point(class_scope:assist_ranker.StringList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ranker_5fexample_2eproto;
};
// -------------------------------------------------------------------

class FloatList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.FloatList) */ {
 public:
  inline FloatList() : FloatList(nullptr) {}
  ~FloatList() override;
  explicit PROTOBUF_CONSTEXPR FloatList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FloatList(const FloatList& from);
  FloatList(FloatList&& from) noexcept
    : FloatList() {
    *this = ::std::move(from);
  }

  inline FloatList& operator=(const FloatList& from) {
    CopyFrom(from);
    return *this;
  }
  inline FloatList& operator=(FloatList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FloatList& default_instance() {
    return *internal_default_instance();
  }
  static inline const FloatList* internal_default_instance() {
    return reinterpret_cast<const FloatList*>(
               &_FloatList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FloatList& a, FloatList& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FloatList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FloatList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FloatList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FloatList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FloatList& from);
  void MergeFrom(const FloatList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FloatList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.FloatList";
  }
  protected:
  explicit FloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValueFieldNumber = 1,
  };
  // repeated float float_value = 1;
  int float_value_size() const;
  private:
  int _internal_float_value_size() const;
  public:
  void clear_float_value();
  private:
  float _internal_float_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_value() const;
  void _internal_add_float_value(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_value();
  public:
  float float_value(int index) const;
  void set_float_value(int index, float value);
  void add_float_value(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_value();

  // @@protoc_insertion_point(class_scope:assist_ranker.FloatList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ranker_5fexample_2eproto;
};
// -------------------------------------------------------------------

class Feature final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.Feature) */ {
 public:
  inline Feature() : Feature(nullptr) {}
  ~Feature() override;
  explicit PROTOBUF_CONSTEXPR Feature(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Feature(const Feature& from);
  Feature(Feature&& from) noexcept
    : Feature() {
    *this = ::std::move(from);
  }

  inline Feature& operator=(const Feature& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature& operator=(Feature&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Feature& default_instance() {
    return *internal_default_instance();
  }
  enum FeatureTypeCase {
    kBoolValue = 1,
    kFloatValue = 2,
    kInt32Value = 3,
    kStringValue = 4,
    kStringList = 5,
    kFloatList = 6,
    FEATURE_TYPE_NOT_SET = 0,
  };

  static inline const Feature* internal_default_instance() {
    return reinterpret_cast<const Feature*>(
               &_Feature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Feature& a, Feature& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Feature* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Feature* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Feature>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Feature& from);
  void MergeFrom(const Feature& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Feature* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.Feature";
  }
  protected:
  explicit Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoolValueFieldNumber = 1,
    kFloatValueFieldNumber = 2,
    kInt32ValueFieldNumber = 3,
    kStringValueFieldNumber = 4,
    kStringListFieldNumber = 5,
    kFloatListFieldNumber = 6,
  };
  // bool bool_value = 1;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // float float_value = 2;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // int32 int32_value = 3;
  bool has_int32_value() const;
  private:
  bool _internal_has_int32_value() const;
  public:
  void clear_int32_value();
  int32_t int32_value() const;
  void set_int32_value(int32_t value);
  private:
  int32_t _internal_int32_value() const;
  void _internal_set_int32_value(int32_t value);
  public:

  // bytes string_value = 4;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // .assist_ranker.StringList string_list = 5;
  bool has_string_list() const;
  private:
  bool _internal_has_string_list() const;
  public:
  void clear_string_list();
  const ::assist_ranker::StringList& string_list() const;
  PROTOBUF_NODISCARD ::assist_ranker::StringList* release_string_list();
  ::assist_ranker::StringList* mutable_string_list();
  void set_allocated_string_list(::assist_ranker::StringList* string_list);
  private:
  const ::assist_ranker::StringList& _internal_string_list() const;
  ::assist_ranker::StringList* _internal_mutable_string_list();
  public:
  void unsafe_arena_set_allocated_string_list(
      ::assist_ranker::StringList* string_list);
  ::assist_ranker::StringList* unsafe_arena_release_string_list();

  // .assist_ranker.FloatList float_list = 6;
  bool has_float_list() const;
  private:
  bool _internal_has_float_list() const;
  public:
  void clear_float_list();
  const ::assist_ranker::FloatList& float_list() const;
  PROTOBUF_NODISCARD ::assist_ranker::FloatList* release_float_list();
  ::assist_ranker::FloatList* mutable_float_list();
  void set_allocated_float_list(::assist_ranker::FloatList* float_list);
  private:
  const ::assist_ranker::FloatList& _internal_float_list() const;
  ::assist_ranker::FloatList* _internal_mutable_float_list();
  public:
  void unsafe_arena_set_allocated_float_list(
      ::assist_ranker::FloatList* float_list);
  ::assist_ranker::FloatList* unsafe_arena_release_float_list();

  void clear_feature_type();
  FeatureTypeCase feature_type_case() const;
  // @@protoc_insertion_point(class_scope:assist_ranker.Feature)
 private:
  class _Internal;
  void set_has_bool_value();
  void set_has_float_value();
  void set_has_int32_value();
  void set_has_string_value();
  void set_has_string_list();
  void set_has_float_list();

  inline bool has_feature_type() const;
  inline void clear_has_feature_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union FeatureTypeUnion {
    constexpr FeatureTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    bool bool_value_;
    float float_value_;
    int32_t int32_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
    ::assist_ranker::StringList* string_list_;
    ::assist_ranker::FloatList* float_list_;
  } feature_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_ranker_5fexample_2eproto;
};
// -------------------------------------------------------------------

class RankerExample_FeaturesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<RankerExample_FeaturesEntry_DoNotUse, 
    std::string, ::assist_ranker::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntryLite<RankerExample_FeaturesEntry_DoNotUse, 
    std::string, ::assist_ranker::Feature,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  RankerExample_FeaturesEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR RankerExample_FeaturesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit RankerExample_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const RankerExample_FeaturesEntry_DoNotUse& other);
  static const RankerExample_FeaturesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RankerExample_FeaturesEntry_DoNotUse*>(&_RankerExample_FeaturesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  friend struct ::TableStruct_ranker_5fexample_2eproto;
};

// -------------------------------------------------------------------

class RankerExample final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:assist_ranker.RankerExample) */ {
 public:
  inline RankerExample() : RankerExample(nullptr) {}
  ~RankerExample() override;
  explicit PROTOBUF_CONSTEXPR RankerExample(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RankerExample(const RankerExample& from);
  RankerExample(RankerExample&& from) noexcept
    : RankerExample() {
    *this = ::std::move(from);
  }

  inline RankerExample& operator=(const RankerExample& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankerExample& operator=(RankerExample&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RankerExample& default_instance() {
    return *internal_default_instance();
  }
  static inline const RankerExample* internal_default_instance() {
    return reinterpret_cast<const RankerExample*>(
               &_RankerExample_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RankerExample& a, RankerExample& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RankerExample* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankerExample* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RankerExample* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RankerExample>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RankerExample& from);
  void MergeFrom(const RankerExample& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RankerExample* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "assist_ranker.RankerExample";
  }
  protected:
  explicit RankerExample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // map<string, .assist_ranker.Feature> features = 1;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >&
      _internal_features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >*
      _internal_mutable_features();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >*
      mutable_features();

  // optional .assist_ranker.Feature target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::assist_ranker::Feature& target() const;
  PROTOBUF_NODISCARD ::assist_ranker::Feature* release_target();
  ::assist_ranker::Feature* mutable_target();
  void set_allocated_target(::assist_ranker::Feature* target);
  private:
  const ::assist_ranker::Feature& _internal_target() const;
  ::assist_ranker::Feature* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::assist_ranker::Feature* target);
  ::assist_ranker::Feature* unsafe_arena_release_target();

  // @@protoc_insertion_point(class_scope:assist_ranker.RankerExample)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapFieldLite<
      RankerExample_FeaturesEntry_DoNotUse,
      std::string, ::assist_ranker::Feature,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> features_;
  ::assist_ranker::Feature* target_;
  friend struct ::TableStruct_ranker_5fexample_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StringList

// repeated bytes string_value = 1;
inline int StringList::_internal_string_value_size() const {
  return string_value_.size();
}
inline int StringList::string_value_size() const {
  return _internal_string_value_size();
}
inline void StringList::clear_string_value() {
  string_value_.Clear();
}
inline std::string* StringList::add_string_value() {
  std::string* _s = _internal_add_string_value();
  // @@protoc_insertion_point(field_add_mutable:assist_ranker.StringList.string_value)
  return _s;
}
inline const std::string& StringList::_internal_string_value(int index) const {
  return string_value_.Get(index);
}
inline const std::string& StringList::string_value(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.StringList.string_value)
  return _internal_string_value(index);
}
inline std::string* StringList::mutable_string_value(int index) {
  // @@protoc_insertion_point(field_mutable:assist_ranker.StringList.string_value)
  return string_value_.Mutable(index);
}
inline void StringList::set_string_value(int index, const std::string& value) {
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:assist_ranker.StringList.string_value)
}
inline void StringList::set_string_value(int index, std::string&& value) {
  string_value_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:assist_ranker.StringList.string_value)
}
inline void StringList::set_string_value(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:assist_ranker.StringList.string_value)
}
inline void StringList::set_string_value(int index, const void* value, size_t size) {
  string_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:assist_ranker.StringList.string_value)
}
inline std::string* StringList::_internal_add_string_value() {
  return string_value_.Add();
}
inline void StringList::add_string_value(const std::string& value) {
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:assist_ranker.StringList.string_value)
}
inline void StringList::add_string_value(std::string&& value) {
  string_value_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:assist_ranker.StringList.string_value)
}
inline void StringList::add_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:assist_ranker.StringList.string_value)
}
inline void StringList::add_string_value(const void* value, size_t size) {
  string_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:assist_ranker.StringList.string_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StringList::string_value() const {
  // @@protoc_insertion_point(field_list:assist_ranker.StringList.string_value)
  return string_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StringList::mutable_string_value() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.StringList.string_value)
  return &string_value_;
}

// -------------------------------------------------------------------

// FloatList

// repeated float float_value = 1;
inline int FloatList::_internal_float_value_size() const {
  return float_value_.size();
}
inline int FloatList::float_value_size() const {
  return _internal_float_value_size();
}
inline void FloatList::clear_float_value() {
  float_value_.Clear();
}
inline float FloatList::_internal_float_value(int index) const {
  return float_value_.Get(index);
}
inline float FloatList::float_value(int index) const {
  // @@protoc_insertion_point(field_get:assist_ranker.FloatList.float_value)
  return _internal_float_value(index);
}
inline void FloatList::set_float_value(int index, float value) {
  float_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:assist_ranker.FloatList.float_value)
}
inline void FloatList::_internal_add_float_value(float value) {
  float_value_.Add(value);
}
inline void FloatList::add_float_value(float value) {
  _internal_add_float_value(value);
  // @@protoc_insertion_point(field_add:assist_ranker.FloatList.float_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatList::_internal_float_value() const {
  return float_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
FloatList::float_value() const {
  // @@protoc_insertion_point(field_list:assist_ranker.FloatList.float_value)
  return _internal_float_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatList::_internal_mutable_float_value() {
  return &float_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
FloatList::mutable_float_value() {
  // @@protoc_insertion_point(field_mutable_list:assist_ranker.FloatList.float_value)
  return _internal_mutable_float_value();
}

// -------------------------------------------------------------------

// Feature

// bool bool_value = 1;
inline bool Feature::_internal_has_bool_value() const {
  return feature_type_case() == kBoolValue;
}
inline bool Feature::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void Feature::set_has_bool_value() {
  _oneof_case_[0] = kBoolValue;
}
inline void Feature::clear_bool_value() {
  if (_internal_has_bool_value()) {
    feature_type_.bool_value_ = false;
    clear_has_feature_type();
  }
}
inline bool Feature::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return feature_type_.bool_value_;
  }
  return false;
}
inline void Feature::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_feature_type();
    set_has_bool_value();
  }
  feature_type_.bool_value_ = value;
}
inline bool Feature::bool_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.bool_value)
  return _internal_bool_value();
}
inline void Feature::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.bool_value)
}

// float float_value = 2;
inline bool Feature::_internal_has_float_value() const {
  return feature_type_case() == kFloatValue;
}
inline bool Feature::has_float_value() const {
  return _internal_has_float_value();
}
inline void Feature::set_has_float_value() {
  _oneof_case_[0] = kFloatValue;
}
inline void Feature::clear_float_value() {
  if (_internal_has_float_value()) {
    feature_type_.float_value_ = 0;
    clear_has_feature_type();
  }
}
inline float Feature::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return feature_type_.float_value_;
  }
  return 0;
}
inline void Feature::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_feature_type();
    set_has_float_value();
  }
  feature_type_.float_value_ = value;
}
inline float Feature::float_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.float_value)
  return _internal_float_value();
}
inline void Feature::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.float_value)
}

// int32 int32_value = 3;
inline bool Feature::_internal_has_int32_value() const {
  return feature_type_case() == kInt32Value;
}
inline bool Feature::has_int32_value() const {
  return _internal_has_int32_value();
}
inline void Feature::set_has_int32_value() {
  _oneof_case_[0] = kInt32Value;
}
inline void Feature::clear_int32_value() {
  if (_internal_has_int32_value()) {
    feature_type_.int32_value_ = 0;
    clear_has_feature_type();
  }
}
inline int32_t Feature::_internal_int32_value() const {
  if (_internal_has_int32_value()) {
    return feature_type_.int32_value_;
  }
  return 0;
}
inline void Feature::_internal_set_int32_value(int32_t value) {
  if (!_internal_has_int32_value()) {
    clear_feature_type();
    set_has_int32_value();
  }
  feature_type_.int32_value_ = value;
}
inline int32_t Feature::int32_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.int32_value)
  return _internal_int32_value();
}
inline void Feature::set_int32_value(int32_t value) {
  _internal_set_int32_value(value);
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.int32_value)
}

// bytes string_value = 4;
inline bool Feature::_internal_has_string_value() const {
  return feature_type_case() == kStringValue;
}
inline bool Feature::has_string_value() const {
  return _internal_has_string_value();
}
inline void Feature::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void Feature::clear_string_value() {
  if (_internal_has_string_value()) {
    feature_type_.string_value_.Destroy();
    clear_has_feature_type();
  }
}
inline const std::string& Feature::string_value() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void Feature::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.InitDefault();
  }
  feature_type_.string_value_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:assist_ranker.Feature.string_value)
}
inline std::string* Feature::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.string_value)
  return _s;
}
inline const std::string& Feature::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return feature_type_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Feature::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.InitDefault();
  }
  feature_type_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* Feature::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_feature_type();
    set_has_string_value();
    feature_type_.string_value_.InitDefault();
  }
  return feature_type_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* Feature::release_string_value() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.string_value)
  if (_internal_has_string_value()) {
    clear_has_feature_type();
    return feature_type_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void Feature::set_allocated_string_value(std::string* string_value) {
  if (has_feature_type()) {
    clear_feature_type();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    feature_type_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.string_value)
}

// .assist_ranker.StringList string_list = 5;
inline bool Feature::_internal_has_string_list() const {
  return feature_type_case() == kStringList;
}
inline bool Feature::has_string_list() const {
  return _internal_has_string_list();
}
inline void Feature::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline void Feature::clear_string_list() {
  if (_internal_has_string_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete feature_type_.string_list_;
    }
    clear_has_feature_type();
  }
}
inline ::assist_ranker::StringList* Feature::release_string_list() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.string_list)
  if (_internal_has_string_list()) {
    clear_has_feature_type();
    ::assist_ranker::StringList* temp = feature_type_.string_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feature_type_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::StringList& Feature::_internal_string_list() const {
  return _internal_has_string_list()
      ? *feature_type_.string_list_
      : reinterpret_cast< ::assist_ranker::StringList&>(::assist_ranker::_StringList_default_instance_);
}
inline const ::assist_ranker::StringList& Feature::string_list() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.string_list)
  return _internal_string_list();
}
inline ::assist_ranker::StringList* Feature::unsafe_arena_release_string_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:assist_ranker.Feature.string_list)
  if (_internal_has_string_list()) {
    clear_has_feature_type();
    ::assist_ranker::StringList* temp = feature_type_.string_list_;
    feature_type_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feature::unsafe_arena_set_allocated_string_list(::assist_ranker::StringList* string_list) {
  clear_feature_type();
  if (string_list) {
    set_has_string_list();
    feature_type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.Feature.string_list)
}
inline ::assist_ranker::StringList* Feature::_internal_mutable_string_list() {
  if (!_internal_has_string_list()) {
    clear_feature_type();
    set_has_string_list();
    feature_type_.string_list_ = CreateMaybeMessage< ::assist_ranker::StringList >(GetArenaForAllocation());
  }
  return feature_type_.string_list_;
}
inline ::assist_ranker::StringList* Feature::mutable_string_list() {
  ::assist_ranker::StringList* _msg = _internal_mutable_string_list();
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.string_list)
  return _msg;
}

// .assist_ranker.FloatList float_list = 6;
inline bool Feature::_internal_has_float_list() const {
  return feature_type_case() == kFloatList;
}
inline bool Feature::has_float_list() const {
  return _internal_has_float_list();
}
inline void Feature::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
inline void Feature::clear_float_list() {
  if (_internal_has_float_list()) {
    if (GetArenaForAllocation() == nullptr) {
      delete feature_type_.float_list_;
    }
    clear_has_feature_type();
  }
}
inline ::assist_ranker::FloatList* Feature::release_float_list() {
  // @@protoc_insertion_point(field_release:assist_ranker.Feature.float_list)
  if (_internal_has_float_list()) {
    clear_has_feature_type();
    ::assist_ranker::FloatList* temp = feature_type_.float_list_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    feature_type_.float_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::assist_ranker::FloatList& Feature::_internal_float_list() const {
  return _internal_has_float_list()
      ? *feature_type_.float_list_
      : reinterpret_cast< ::assist_ranker::FloatList&>(::assist_ranker::_FloatList_default_instance_);
}
inline const ::assist_ranker::FloatList& Feature::float_list() const {
  // @@protoc_insertion_point(field_get:assist_ranker.Feature.float_list)
  return _internal_float_list();
}
inline ::assist_ranker::FloatList* Feature::unsafe_arena_release_float_list() {
  // @@protoc_insertion_point(field_unsafe_arena_release:assist_ranker.Feature.float_list)
  if (_internal_has_float_list()) {
    clear_has_feature_type();
    ::assist_ranker::FloatList* temp = feature_type_.float_list_;
    feature_type_.float_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Feature::unsafe_arena_set_allocated_float_list(::assist_ranker::FloatList* float_list) {
  clear_feature_type();
  if (float_list) {
    set_has_float_list();
    feature_type_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.Feature.float_list)
}
inline ::assist_ranker::FloatList* Feature::_internal_mutable_float_list() {
  if (!_internal_has_float_list()) {
    clear_feature_type();
    set_has_float_list();
    feature_type_.float_list_ = CreateMaybeMessage< ::assist_ranker::FloatList >(GetArenaForAllocation());
  }
  return feature_type_.float_list_;
}
inline ::assist_ranker::FloatList* Feature::mutable_float_list() {
  ::assist_ranker::FloatList* _msg = _internal_mutable_float_list();
  // @@protoc_insertion_point(field_mutable:assist_ranker.Feature.float_list)
  return _msg;
}

inline bool Feature::has_feature_type() const {
  return feature_type_case() != FEATURE_TYPE_NOT_SET;
}
inline void Feature::clear_has_feature_type() {
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}
inline Feature::FeatureTypeCase Feature::feature_type_case() const {
  return Feature::FeatureTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RankerExample

// map<string, .assist_ranker.Feature> features = 1;
inline int RankerExample::_internal_features_size() const {
  return features_.size();
}
inline int RankerExample::features_size() const {
  return _internal_features_size();
}
inline void RankerExample::clear_features() {
  features_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >&
RankerExample::_internal_features() const {
  return features_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >&
RankerExample::features() const {
  // @@protoc_insertion_point(field_map:assist_ranker.RankerExample.features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >*
RankerExample::_internal_mutable_features() {
  return features_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >*
RankerExample::mutable_features() {
  // @@protoc_insertion_point(field_mutable_map:assist_ranker.RankerExample.features)
  return _internal_mutable_features();
}

// optional .assist_ranker.Feature target = 2;
inline bool RankerExample::_internal_has_target() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || target_ != nullptr);
  return value;
}
inline bool RankerExample::has_target() const {
  return _internal_has_target();
}
inline void RankerExample::clear_target() {
  if (target_ != nullptr) target_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::assist_ranker::Feature& RankerExample::_internal_target() const {
  const ::assist_ranker::Feature* p = target_;
  return p != nullptr ? *p : reinterpret_cast<const ::assist_ranker::Feature&>(
      ::assist_ranker::_Feature_default_instance_);
}
inline const ::assist_ranker::Feature& RankerExample::target() const {
  // @@protoc_insertion_point(field_get:assist_ranker.RankerExample.target)
  return _internal_target();
}
inline void RankerExample::unsafe_arena_set_allocated_target(
    ::assist_ranker::Feature* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:assist_ranker.RankerExample.target)
}
inline ::assist_ranker::Feature* RankerExample::release_target() {
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::Feature* temp = target_;
  target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::assist_ranker::Feature* RankerExample::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:assist_ranker.RankerExample.target)
  _has_bits_[0] &= ~0x00000001u;
  ::assist_ranker::Feature* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::assist_ranker::Feature* RankerExample::_internal_mutable_target() {
  _has_bits_[0] |= 0x00000001u;
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::assist_ranker::Feature>(GetArenaForAllocation());
    target_ = p;
  }
  return target_;
}
inline ::assist_ranker::Feature* RankerExample::mutable_target() {
  ::assist_ranker::Feature* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:assist_ranker.RankerExample.target)
  return _msg;
}
inline void RankerExample::set_allocated_target(::assist_ranker::Feature* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.RankerExample.target)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace assist_ranker

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ranker_5fexample_2eproto
