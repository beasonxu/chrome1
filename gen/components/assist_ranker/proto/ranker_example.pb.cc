// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranker_example.proto

#include "ranker_example.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace assist_ranker {
PROTOBUF_CONSTEXPR StringList::StringList(
    ::_pbi::ConstantInitialized)
  : string_value_(){}
struct StringListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StringListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StringListDefaultTypeInternal() {}
  union {
    StringList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StringListDefaultTypeInternal _StringList_default_instance_;
PROTOBUF_CONSTEXPR FloatList::FloatList(
    ::_pbi::ConstantInitialized)
  : float_value_(){}
struct FloatListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FloatListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FloatListDefaultTypeInternal() {}
  union {
    FloatList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FloatListDefaultTypeInternal _FloatList_default_instance_;
PROTOBUF_CONSTEXPR Feature::Feature(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct FeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeatureDefaultTypeInternal() {}
  union {
    Feature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeatureDefaultTypeInternal _Feature_default_instance_;
PROTOBUF_CONSTEXPR RankerExample_FeaturesEntry_DoNotUse::RankerExample_FeaturesEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct RankerExample_FeaturesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankerExample_FeaturesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankerExample_FeaturesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RankerExample_FeaturesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankerExample_FeaturesEntry_DoNotUseDefaultTypeInternal _RankerExample_FeaturesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RankerExample::RankerExample(
    ::_pbi::ConstantInitialized)
  : features_()
  , target_(nullptr){}
struct RankerExampleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RankerExampleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RankerExampleDefaultTypeInternal() {}
  union {
    RankerExample _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RankerExampleDefaultTypeInternal _RankerExample_default_instance_;
}  // namespace assist_ranker
namespace assist_ranker {

// ===================================================================

class StringList::_Internal {
 public:
};

StringList::StringList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  string_value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.StringList)
}
StringList::StringList(const StringList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      string_value_(from.string_value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.StringList)
}

inline void StringList::SharedCtor() {
}

StringList::~StringList() {
  // @@protoc_insertion_point(destructor:assist_ranker.StringList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StringList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StringList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StringList::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.StringList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  string_value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StringList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated bytes string_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_value();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StringList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.StringList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes string_value = 1;
  for (int i = 0, n = this->_internal_string_value_size(); i < n; i++) {
    const auto& s = this->_internal_string_value(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.StringList)
  return target;
}

size_t StringList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.StringList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes string_value = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_value_.size());
  for (int i = 0, n = string_value_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      string_value_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StringList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StringList*>(
      &from));
}

void StringList::MergeFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.StringList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  string_value_.MergeFrom(from.string_value_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StringList::CopyFrom(const StringList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.StringList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringList::IsInitialized() const {
  return true;
}

void StringList::InternalSwap(StringList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  string_value_.InternalSwap(&other->string_value_);
}

std::string StringList::GetTypeName() const {
  return "assist_ranker.StringList";
}


// ===================================================================

class FloatList::_Internal {
 public:
};

FloatList::FloatList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  float_value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.FloatList)
}
FloatList::FloatList(const FloatList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      float_value_(from.float_value_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:assist_ranker.FloatList)
}

inline void FloatList::SharedCtor() {
}

FloatList::~FloatList() {
  // @@protoc_insertion_point(destructor:assist_ranker.FloatList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FloatList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FloatList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FloatList::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.FloatList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  float_value_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FloatList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float float_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<13>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_float_value(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FloatList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.FloatList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float float_value = 1;
  for (int i = 0, n = this->_internal_float_value_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_float_value(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.FloatList)
  return target;
}

size_t FloatList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.FloatList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float float_value = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_float_value_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_float_value_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FloatList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FloatList*>(
      &from));
}

void FloatList::MergeFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.FloatList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  float_value_.MergeFrom(from.float_value_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FloatList::CopyFrom(const FloatList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.FloatList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FloatList::IsInitialized() const {
  return true;
}

void FloatList::InternalSwap(FloatList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  float_value_.InternalSwap(&other->float_value_);
}

std::string FloatList::GetTypeName() const {
  return "assist_ranker.FloatList";
}


// ===================================================================

class Feature::_Internal {
 public:
  static const ::assist_ranker::StringList& string_list(const Feature* msg);
  static const ::assist_ranker::FloatList& float_list(const Feature* msg);
};

const ::assist_ranker::StringList&
Feature::_Internal::string_list(const Feature* msg) {
  return *msg->feature_type_.string_list_;
}
const ::assist_ranker::FloatList&
Feature::_Internal::float_list(const Feature* msg) {
  return *msg->feature_type_.float_list_;
}
void Feature::set_allocated_string_list(::assist_ranker::StringList* string_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feature_type();
  if (string_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(string_list);
    if (message_arena != submessage_arena) {
      string_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    feature_type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.string_list)
}
void Feature::set_allocated_float_list(::assist_ranker::FloatList* float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_feature_type();
  if (float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(float_list);
    if (message_arena != submessage_arena) {
      float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_list, submessage_arena);
    }
    set_has_float_list();
    feature_type_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:assist_ranker.Feature.float_list)
}
Feature::Feature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.Feature)
}
Feature::Feature(const Feature& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_feature_type();
  switch (from.feature_type_case()) {
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::assist_ranker::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kFloatList: {
      _internal_mutable_float_list()->::assist_ranker::FloatList::MergeFrom(from._internal_float_list());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.Feature)
}

inline void Feature::SharedCtor() {
clear_has_feature_type();
}

Feature::~Feature() {
  // @@protoc_insertion_point(destructor:assist_ranker.Feature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Feature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_feature_type()) {
    clear_feature_type();
  }
}

void Feature::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Feature::clear_feature_type() {
// @@protoc_insertion_point(one_of_clear_start:assist_ranker.Feature)
  switch (feature_type_case()) {
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kFloatValue: {
      // No need to clear
      break;
    }
    case kInt32Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      feature_type_.string_value_.Destroy();
      break;
    }
    case kStringList: {
      if (GetArenaForAllocation() == nullptr) {
        delete feature_type_.string_list_;
      }
      break;
    }
    case kFloatList: {
      if (GetArenaForAllocation() == nullptr) {
        delete feature_type_.float_list_;
      }
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = FEATURE_TYPE_NOT_SET;
}


void Feature::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.Feature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_feature_type();
  _internal_metadata_.Clear<std::string>();
}

const char* Feature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool bool_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float float_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_float_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 int32_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_int32_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes string_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.StringList string_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .assist_ranker.FloatList float_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Feature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.Feature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (feature_type_case()) {
    case kBoolValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_value(), target);
      break;
    }
    case kFloatValue: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_float_value(), target);
      break;
    }
    case kInt32Value: {
      target = stream->EnsureSpace(target);
      target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_int32_value(), target);
      break;
    }
    case kStringValue: {
      target = stream->WriteBytesMaybeAliased(
          4, this->_internal_string_value(), target);
      break;
    }
    case kStringList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::string_list(this),
          _Internal::string_list(this).GetCachedSize(), target, stream);
      break;
    }
    case kFloatList: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::float_list(this),
          _Internal::float_list(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.Feature)
  return target;
}

size_t Feature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.Feature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (feature_type_case()) {
    // bool bool_value = 1;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // float float_value = 2;
    case kFloatValue: {
      total_size += 1 + 4;
      break;
    }
    // int32 int32_value = 3;
    case kInt32Value: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_int32_value());
      break;
    }
    // bytes string_value = 4;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_string_value());
      break;
    }
    // .assist_ranker.StringList string_list = 5;
    case kStringList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.string_list_);
      break;
    }
    // .assist_ranker.FloatList float_list = 6;
    case kFloatList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feature_type_.float_list_);
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Feature*>(
      &from));
}

void Feature::MergeFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.Feature)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.feature_type_case()) {
    case kBoolValue: {
      _internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kFloatValue: {
      _internal_set_float_value(from._internal_float_value());
      break;
    }
    case kInt32Value: {
      _internal_set_int32_value(from._internal_int32_value());
      break;
    }
    case kStringValue: {
      _internal_set_string_value(from._internal_string_value());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::assist_ranker::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kFloatList: {
      _internal_mutable_float_list()->::assist_ranker::FloatList::MergeFrom(from._internal_float_list());
      break;
    }
    case FEATURE_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Feature::CopyFrom(const Feature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.Feature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature::IsInitialized() const {
  return true;
}

void Feature::InternalSwap(Feature* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(feature_type_, other->feature_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string Feature::GetTypeName() const {
  return "assist_ranker.Feature";
}


// ===================================================================

RankerExample_FeaturesEntry_DoNotUse::RankerExample_FeaturesEntry_DoNotUse() {}
RankerExample_FeaturesEntry_DoNotUse::RankerExample_FeaturesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RankerExample_FeaturesEntry_DoNotUse::MergeFrom(const RankerExample_FeaturesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}

// ===================================================================

class RankerExample::_Internal {
 public:
  using HasBits = decltype(std::declval<RankerExample>()._has_bits_);
  static const ::assist_ranker::Feature& target(const RankerExample* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::assist_ranker::Feature&
RankerExample::_Internal::target(const RankerExample* msg) {
  return *msg->target_;
}
RankerExample::RankerExample(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  features_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:assist_ranker.RankerExample)
}
RankerExample::RankerExample(const RankerExample& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  features_.MergeFrom(from.features_);
  if (from._internal_has_target()) {
    target_ = new ::assist_ranker::Feature(*from.target_);
  } else {
    target_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:assist_ranker.RankerExample)
}

inline void RankerExample::SharedCtor() {
target_ = nullptr;
}

RankerExample::~RankerExample() {
  // @@protoc_insertion_point(destructor:assist_ranker.RankerExample)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RankerExample::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  features_.Destruct();
  if (this != internal_default_instance()) delete target_;
}

void RankerExample::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RankerExample::Clear() {
// @@protoc_insertion_point(message_clear_start:assist_ranker.RankerExample)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  features_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(target_ != nullptr);
    target_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RankerExample::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .assist_ranker.Feature> features = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&features_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .assist_ranker.Feature target = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RankerExample::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:assist_ranker.RankerExample)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .assist_ranker.Feature> features = 1;
  if (!this->_internal_features().empty()) {
    using MapType = ::_pb::Map<std::string, ::assist_ranker::Feature>;
    using WireHelper = RankerExample_FeaturesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_features();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  cached_has_bits = _has_bits_[0];
  // optional .assist_ranker.Feature target = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:assist_ranker.RankerExample)
  return target;
}

size_t RankerExample::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:assist_ranker.RankerExample)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .assist_ranker.Feature> features = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_features_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::assist_ranker::Feature >::const_iterator
      it = this->_internal_features().begin();
      it != this->_internal_features().end(); ++it) {
    total_size += RankerExample_FeaturesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional .assist_ranker.Feature target = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RankerExample::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RankerExample*>(
      &from));
}

void RankerExample::MergeFrom(const RankerExample& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:assist_ranker.RankerExample)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  features_.MergeFrom(from.features_);
  if (from._internal_has_target()) {
    _internal_mutable_target()->::assist_ranker::Feature::MergeFrom(from._internal_target());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RankerExample::CopyFrom(const RankerExample& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:assist_ranker.RankerExample)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankerExample::IsInitialized() const {
  return true;
}

void RankerExample::InternalSwap(RankerExample* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  features_.InternalSwap(&other->features_);
  swap(target_, other->target_);
}

std::string RankerExample::GetTypeName() const {
  return "assist_ranker.RankerExample";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace assist_ranker
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::assist_ranker::StringList*
Arena::CreateMaybeMessage< ::assist_ranker::StringList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::StringList >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::FloatList*
Arena::CreateMaybeMessage< ::assist_ranker::FloatList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::FloatList >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::Feature*
Arena::CreateMaybeMessage< ::assist_ranker::Feature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::Feature >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::RankerExample_FeaturesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::assist_ranker::RankerExample_FeaturesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::RankerExample_FeaturesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::assist_ranker::RankerExample*
Arena::CreateMaybeMessage< ::assist_ranker::RankerExample >(Arena* arena) {
  return Arena::CreateMessageInternal< ::assist_ranker::RankerExample >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
