// components/autofill/content/common/mojom/autofill_agent.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_TEST_UTILS_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_TEST_UTILS_H_

#include "components/autofill/content/common/mojom/autofill_agent.mojom.h"


namespace autofill {
namespace mojom {


class  AutofillAgentInterceptorForTesting : public AutofillAgent {
  virtual AutofillAgent* GetForwardingInterface() = 0;
  void TriggerReparse() override;
  void FillOrPreviewForm(int32_t query_id, const ::autofill::FormData& form, ::autofill::mojom::RendererFormDataAction action) override;
  void FieldTypePredictionsAvailable(const std::vector<::autofill::FormDataPredictions>& forms) override;
  void ClearSection() override;
  void ClearPreviewedForm() override;
  void FillFieldWithValue(::autofill::FieldRendererId field, const ::std::u16string& value) override;
  void PreviewFieldWithValue(::autofill::FieldRendererId field, const ::std::u16string& value) override;
  void SetSuggestionAvailability(::autofill::FieldRendererId field, ::autofill::mojom::AutofillState type) override;
  void AcceptDataListSuggestion(::autofill::FieldRendererId field, const ::std::u16string& value) override;
  void FillPasswordSuggestion(const ::std::u16string& username, const ::std::u16string& password) override;
  void PreviewPasswordSuggestion(const ::std::u16string& username, const ::std::u16string& password) override;
  void SetUserGestureRequired(bool required) override;
  void SetSecureContextRequired(bool required) override;
  void SetFocusRequiresScroll(bool require) override;
  void SetQueryPasswordSuggestion(bool query) override;
  void GetElementFormAndFieldDataForDevToolsNodeId(int32_t backend_node_id, GetElementFormAndFieldDataForDevToolsNodeIdCallback callback) override;
  void SetAssistantKeyboardSuppressState(bool suppress) override;
  void EnableHeavyFormDataScraping() override;
  void SetFieldsEligibleForManualFilling(const std::vector<::autofill::FieldRendererId>& fields) override;
};
class  AutofillAgentAsyncWaiter {
 public:
  explicit AutofillAgentAsyncWaiter(AutofillAgent* proxy);

  AutofillAgentAsyncWaiter(const AutofillAgentAsyncWaiter&) = delete;
  AutofillAgentAsyncWaiter& operator=(const AutofillAgentAsyncWaiter&) = delete;

  ~AutofillAgentAsyncWaiter();
  void GetElementFormAndFieldDataForDevToolsNodeId(
      int32_t backend_node_id, ::autofill::FormData* out_form, ::autofill::FormFieldData* out_field);

 private:
  AutofillAgent* const proxy_;
};


class  PasswordAutofillAgentInterceptorForTesting : public PasswordAutofillAgent {
  virtual PasswordAutofillAgent* GetForwardingInterface() = 0;
  void FillPasswordForm(const ::autofill::PasswordFormFillData& form_data) override;
  void InformNoSavedCredentials(bool should_show_popup_without_passwords) override;
  void FillIntoFocusedField(bool is_password, const ::std::u16string& credential) override;
  void SetLoggingState(bool active) override;
  void TouchToFillClosed(bool show_virtual_keyboard) override;
  void TriggerFormSubmission() override;
  void AnnotateFieldsWithParsingResult(const ::autofill::ParsingResult& parsing_result) override;
};
class  PasswordAutofillAgentAsyncWaiter {
 public:
  explicit PasswordAutofillAgentAsyncWaiter(PasswordAutofillAgent* proxy);

  PasswordAutofillAgentAsyncWaiter(const PasswordAutofillAgentAsyncWaiter&) = delete;
  PasswordAutofillAgentAsyncWaiter& operator=(const PasswordAutofillAgentAsyncWaiter&) = delete;

  ~PasswordAutofillAgentAsyncWaiter();

 private:
  PasswordAutofillAgent* const proxy_;
};


class  PasswordGenerationAgentInterceptorForTesting : public PasswordGenerationAgent {
  virtual PasswordGenerationAgent* GetForwardingInterface() = 0;
  void GeneratedPasswordAccepted(const ::std::u16string& generated_password) override;
  void TriggeredGeneratePassword(TriggeredGeneratePasswordCallback callback) override;
  void FoundFormEligibleForGeneration(const ::autofill::PasswordFormGenerationData& form) override;
};
class  PasswordGenerationAgentAsyncWaiter {
 public:
  explicit PasswordGenerationAgentAsyncWaiter(PasswordGenerationAgent* proxy);

  PasswordGenerationAgentAsyncWaiter(const PasswordGenerationAgentAsyncWaiter&) = delete;
  PasswordGenerationAgentAsyncWaiter& operator=(const PasswordGenerationAgentAsyncWaiter&) = delete;

  ~PasswordGenerationAgentAsyncWaiter();
  void TriggeredGeneratePassword(
      absl::optional<::autofill::password_generation::PasswordGenerationUIData>* out_data);

 private:
  PasswordGenerationAgent* const proxy_;
};




}  // namespace mojom
}  // namespace autofill

#endif  // COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_TEST_UTILS_H_