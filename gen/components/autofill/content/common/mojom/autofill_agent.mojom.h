// components/autofill/content/common/mojom/autofill_agent.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_H_
#define COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/autofill/content/common/mojom/autofill_agent.mojom-shared.h"
#include "components/autofill/content/common/mojom/autofill_agent.mojom-forward.h"
#include "components/autofill/core/common/mojom/autofill_types.mojom.h"
#include "mojo/public/mojom/base/string16.mojom.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace autofill {
namespace mojom {

class AutofillAgentProxy;

template <typename ImplRefTraits>
class AutofillAgentStub;

class AutofillAgentRequestValidator;
class AutofillAgentResponseValidator;


class  AutofillAgent
    : public AutofillAgentInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AutofillAgentInterfaceBase;
  using Proxy_ = AutofillAgentProxy;

  template <typename ImplRefTraits>
  using Stub_ = AutofillAgentStub<ImplRefTraits>;

  using RequestValidator_ = AutofillAgentRequestValidator;
  using ResponseValidator_ = AutofillAgentResponseValidator;
  enum MethodMinVersions : uint32_t {
    kTriggerReparseMinVersion = 0,
    kFillOrPreviewFormMinVersion = 0,
    kFieldTypePredictionsAvailableMinVersion = 0,
    kClearSectionMinVersion = 0,
    kClearPreviewedFormMinVersion = 0,
    kFillFieldWithValueMinVersion = 0,
    kPreviewFieldWithValueMinVersion = 0,
    kSetSuggestionAvailabilityMinVersion = 0,
    kAcceptDataListSuggestionMinVersion = 0,
    kFillPasswordSuggestionMinVersion = 0,
    kPreviewPasswordSuggestionMinVersion = 0,
    kSetUserGestureRequiredMinVersion = 0,
    kSetSecureContextRequiredMinVersion = 0,
    kSetFocusRequiresScrollMinVersion = 0,
    kSetQueryPasswordSuggestionMinVersion = 0,
    kGetElementFormAndFieldDataForDevToolsNodeIdMinVersion = 0,
    kSetAssistantKeyboardSuppressStateMinVersion = 0,
    kEnableHeavyFormDataScrapingMinVersion = 0,
    kSetFieldsEligibleForManualFillingMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct TriggerReparse_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FillOrPreviewForm_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FieldTypePredictionsAvailable_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ClearSection_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ClearPreviewedForm_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FillFieldWithValue_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PreviewFieldWithValue_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetSuggestionAvailability_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AcceptDataListSuggestion_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FillPasswordSuggestion_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PreviewPasswordSuggestion_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetUserGestureRequired_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetSecureContextRequired_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetFocusRequiresScroll_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetQueryPasswordSuggestion_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetElementFormAndFieldDataForDevToolsNodeId_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetAssistantKeyboardSuppressState_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct EnableHeavyFormDataScraping_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetFieldsEligibleForManualFilling_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AutofillAgent() = default;

  
  virtual void TriggerReparse() = 0;

  
  virtual void FillOrPreviewForm(int32_t query_id, const ::autofill::FormData& form, ::autofill::mojom::RendererFormDataAction action) = 0;

  
  virtual void FieldTypePredictionsAvailable(const std::vector<::autofill::FormDataPredictions>& forms) = 0;

  
  virtual void ClearSection() = 0;

  
  virtual void ClearPreviewedForm() = 0;

  
  virtual void FillFieldWithValue(::autofill::FieldRendererId field, const ::std::u16string& value) = 0;

  
  virtual void PreviewFieldWithValue(::autofill::FieldRendererId field, const ::std::u16string& value) = 0;

  
  virtual void SetSuggestionAvailability(::autofill::FieldRendererId field, ::autofill::mojom::AutofillState type) = 0;

  
  virtual void AcceptDataListSuggestion(::autofill::FieldRendererId field, const ::std::u16string& value) = 0;

  
  virtual void FillPasswordSuggestion(const ::std::u16string& username, const ::std::u16string& password) = 0;

  
  virtual void PreviewPasswordSuggestion(const ::std::u16string& username, const ::std::u16string& password) = 0;

  
  virtual void SetUserGestureRequired(bool required) = 0;

  
  virtual void SetSecureContextRequired(bool required) = 0;

  
  virtual void SetFocusRequiresScroll(bool require) = 0;

  
  virtual void SetQueryPasswordSuggestion(bool query) = 0;


  using GetElementFormAndFieldDataForDevToolsNodeIdCallback = base::OnceCallback<void(const ::autofill::FormData&, const ::autofill::FormFieldData&)>;
  
  virtual void GetElementFormAndFieldDataForDevToolsNodeId(int32_t backend_node_id, GetElementFormAndFieldDataForDevToolsNodeIdCallback callback) = 0;

  
  virtual void SetAssistantKeyboardSuppressState(bool suppress) = 0;

  
  virtual void EnableHeavyFormDataScraping() = 0;

  
  virtual void SetFieldsEligibleForManualFilling(const std::vector<::autofill::FieldRendererId>& fields) = 0;
};

class PasswordAutofillAgentProxy;

template <typename ImplRefTraits>
class PasswordAutofillAgentStub;

class PasswordAutofillAgentRequestValidator;


class  PasswordAutofillAgent
    : public PasswordAutofillAgentInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PasswordAutofillAgentInterfaceBase;
  using Proxy_ = PasswordAutofillAgentProxy;

  template <typename ImplRefTraits>
  using Stub_ = PasswordAutofillAgentStub<ImplRefTraits>;

  using RequestValidator_ = PasswordAutofillAgentRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kFillPasswordFormMinVersion = 0,
    kInformNoSavedCredentialsMinVersion = 0,
    kFillIntoFocusedFieldMinVersion = 0,
    kSetLoggingStateMinVersion = 0,
    kTouchToFillClosedMinVersion = 0,
    kTriggerFormSubmissionMinVersion = 0,
    kAnnotateFieldsWithParsingResultMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct FillPasswordForm_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct InformNoSavedCredentials_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FillIntoFocusedField_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetLoggingState_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct TouchToFillClosed_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct TriggerFormSubmission_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AnnotateFieldsWithParsingResult_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PasswordAutofillAgent() = default;

  
  virtual void FillPasswordForm(const ::autofill::PasswordFormFillData& form_data) = 0;

  
  virtual void InformNoSavedCredentials(bool should_show_popup_without_passwords) = 0;

  
  virtual void FillIntoFocusedField(bool is_password, const ::std::u16string& credential) = 0;

  
  virtual void SetLoggingState(bool active) = 0;

  
  virtual void TouchToFillClosed(bool show_virtual_keyboard) = 0;

  
  virtual void TriggerFormSubmission() = 0;

  
  virtual void AnnotateFieldsWithParsingResult(const ::autofill::ParsingResult& parsing_result) = 0;
};

class PasswordGenerationAgentProxy;

template <typename ImplRefTraits>
class PasswordGenerationAgentStub;

class PasswordGenerationAgentRequestValidator;
class PasswordGenerationAgentResponseValidator;


class  PasswordGenerationAgent
    : public PasswordGenerationAgentInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PasswordGenerationAgentInterfaceBase;
  using Proxy_ = PasswordGenerationAgentProxy;

  template <typename ImplRefTraits>
  using Stub_ = PasswordGenerationAgentStub<ImplRefTraits>;

  using RequestValidator_ = PasswordGenerationAgentRequestValidator;
  using ResponseValidator_ = PasswordGenerationAgentResponseValidator;
  enum MethodMinVersions : uint32_t {
    kGeneratedPasswordAcceptedMinVersion = 0,
    kTriggeredGeneratePasswordMinVersion = 0,
    kFoundFormEligibleForGenerationMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct GeneratedPasswordAccepted_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct TriggeredGeneratePassword_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct FoundFormEligibleForGeneration_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~PasswordGenerationAgent() = default;

  
  virtual void GeneratedPasswordAccepted(const ::std::u16string& generated_password) = 0;


  using TriggeredGeneratePasswordCallback = base::OnceCallback<void(const absl::optional<::autofill::password_generation::PasswordGenerationUIData>&)>;
  
  virtual void TriggeredGeneratePassword(TriggeredGeneratePasswordCallback callback) = 0;

  
  virtual void FoundFormEligibleForGeneration(const ::autofill::PasswordFormGenerationData& form) = 0;
};



class  AutofillAgentProxy
    : public AutofillAgent {
 public:
  using InterfaceType = AutofillAgent;

  explicit AutofillAgentProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void TriggerReparse() final;
  
  void FillOrPreviewForm(int32_t query_id, const ::autofill::FormData& form, ::autofill::mojom::RendererFormDataAction action) final;
  
  void FieldTypePredictionsAvailable(const std::vector<::autofill::FormDataPredictions>& forms) final;
  
  void ClearSection() final;
  
  void ClearPreviewedForm() final;
  
  void FillFieldWithValue(::autofill::FieldRendererId field, const ::std::u16string& value) final;
  
  void PreviewFieldWithValue(::autofill::FieldRendererId field, const ::std::u16string& value) final;
  
  void SetSuggestionAvailability(::autofill::FieldRendererId field, ::autofill::mojom::AutofillState type) final;
  
  void AcceptDataListSuggestion(::autofill::FieldRendererId field, const ::std::u16string& value) final;
  
  void FillPasswordSuggestion(const ::std::u16string& username, const ::std::u16string& password) final;
  
  void PreviewPasswordSuggestion(const ::std::u16string& username, const ::std::u16string& password) final;
  
  void SetUserGestureRequired(bool required) final;
  
  void SetSecureContextRequired(bool required) final;
  
  void SetFocusRequiresScroll(bool require) final;
  
  void SetQueryPasswordSuggestion(bool query) final;
  
  void GetElementFormAndFieldDataForDevToolsNodeId(int32_t backend_node_id, GetElementFormAndFieldDataForDevToolsNodeIdCallback callback) final;
  
  void SetAssistantKeyboardSuppressState(bool suppress) final;
  
  void EnableHeavyFormDataScraping() final;
  
  void SetFieldsEligibleForManualFilling(const std::vector<::autofill::FieldRendererId>& fields) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  PasswordAutofillAgentProxy
    : public PasswordAutofillAgent {
 public:
  using InterfaceType = PasswordAutofillAgent;

  explicit PasswordAutofillAgentProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void FillPasswordForm(const ::autofill::PasswordFormFillData& form_data) final;
  
  void InformNoSavedCredentials(bool should_show_popup_without_passwords) final;
  
  void FillIntoFocusedField(bool is_password, const ::std::u16string& credential) final;
  
  void SetLoggingState(bool active) final;
  
  void TouchToFillClosed(bool show_virtual_keyboard) final;
  
  void TriggerFormSubmission() final;
  
  void AnnotateFieldsWithParsingResult(const ::autofill::ParsingResult& parsing_result) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  PasswordGenerationAgentProxy
    : public PasswordGenerationAgent {
 public:
  using InterfaceType = PasswordGenerationAgent;

  explicit PasswordGenerationAgentProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void GeneratedPasswordAccepted(const ::std::u16string& generated_password) final;
  
  void TriggeredGeneratePassword(TriggeredGeneratePasswordCallback callback) final;
  
  void FoundFormEligibleForGeneration(const ::autofill::PasswordFormGenerationData& form) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  AutofillAgentStubDispatch {
 public:
  static bool Accept(AutofillAgent* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AutofillAgent* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AutofillAgent>>
class AutofillAgentStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AutofillAgentStub() = default;
  ~AutofillAgentStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AutofillAgentStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AutofillAgentStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PasswordAutofillAgentStubDispatch {
 public:
  static bool Accept(PasswordAutofillAgent* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PasswordAutofillAgent* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PasswordAutofillAgent>>
class PasswordAutofillAgentStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PasswordAutofillAgentStub() = default;
  ~PasswordAutofillAgentStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordAutofillAgentStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordAutofillAgentStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PasswordGenerationAgentStubDispatch {
 public:
  static bool Accept(PasswordGenerationAgent* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      PasswordGenerationAgent* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<PasswordGenerationAgent>>
class PasswordGenerationAgentStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PasswordGenerationAgentStub() = default;
  ~PasswordGenerationAgentStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordGenerationAgentStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PasswordGenerationAgentStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AutofillAgentRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PasswordAutofillAgentRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PasswordGenerationAgentRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AutofillAgentResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PasswordGenerationAgentResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





}  // namespace mojom
}  // namespace autofill

namespace mojo {

}  // namespace mojo

#endif  // COMPONENTS_AUTOFILL_CONTENT_COMMON_MOJOM_AUTOFILL_AGENT_MOJOM_H_