// components/autofill/core/common/mojom/autofill_types.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_AUTOFILL_CORE_COMMON_MOJOM_AUTOFILL_TYPES_MOJOM_SHARED_H_
#define COMPONENTS_AUTOFILL_CORE_COMMON_MOJOM_AUTOFILL_TYPES_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/autofill/core/common/mojom/autofill_types.mojom-shared-internal.h"
#include "mojo/public/mojom/base/text_direction.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "url/mojom/origin.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"







namespace autofill {
namespace mojom {
class FrameTokenDataView;

class FrameTokenWithPredecessorDataView;

class FormRendererIdDataView;

class FieldRendererIdDataView;

class SelectOptionDataView;

class SectionAutocompleteDataView;

class SectionFieldIdentifierDataView;

class SectionDataView;

class FormFieldDataDataView;

class ButtonTitleInfoDataView;

class FormDataDataView;

class FormFieldDataPredictionsDataView;

class FormDataPredictionsDataView;

class PasswordAndMetadataDataView;

class PasswordFormFillDataDataView;

class PasswordFormGenerationDataDataView;

class PasswordGenerationUIDataDataView;

class ParsingResultDataView;

class TouchToFillEligibleDataView;

class SectionPrefixDataView;


}  // namespace mojom
}  // namespace autofill

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::autofill::mojom::FrameTokenDataView> {
  using Data = ::autofill::mojom::internal::FrameToken_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FrameTokenWithPredecessorDataView> {
  using Data = ::autofill::mojom::internal::FrameTokenWithPredecessor_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FormRendererIdDataView> {
  using Data = ::autofill::mojom::internal::FormRendererId_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FieldRendererIdDataView> {
  using Data = ::autofill::mojom::internal::FieldRendererId_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::SelectOptionDataView> {
  using Data = ::autofill::mojom::internal::SelectOption_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::SectionAutocompleteDataView> {
  using Data = ::autofill::mojom::internal::SectionAutocomplete_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::SectionFieldIdentifierDataView> {
  using Data = ::autofill::mojom::internal::SectionFieldIdentifier_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::SectionDataView> {
  using Data = ::autofill::mojom::internal::Section_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FormFieldDataDataView> {
  using Data = ::autofill::mojom::internal::FormFieldData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::ButtonTitleInfoDataView> {
  using Data = ::autofill::mojom::internal::ButtonTitleInfo_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FormDataDataView> {
  using Data = ::autofill::mojom::internal::FormData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FormFieldDataPredictionsDataView> {
  using Data = ::autofill::mojom::internal::FormFieldDataPredictions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::FormDataPredictionsDataView> {
  using Data = ::autofill::mojom::internal::FormDataPredictions_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::PasswordAndMetadataDataView> {
  using Data = ::autofill::mojom::internal::PasswordAndMetadata_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::PasswordFormFillDataDataView> {
  using Data = ::autofill::mojom::internal::PasswordFormFillData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::PasswordFormGenerationDataDataView> {
  using Data = ::autofill::mojom::internal::PasswordFormGenerationData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::PasswordGenerationUIDataDataView> {
  using Data = ::autofill::mojom::internal::PasswordGenerationUIData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::ParsingResultDataView> {
  using Data = ::autofill::mojom::internal::ParsingResult_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::TouchToFillEligibleDataView> {
  using Data = ::autofill::mojom::internal::TouchToFillEligible_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::autofill::mojom::SectionPrefixDataView> {
  using Data = ::autofill::mojom::internal::SectionPrefix_Data;
  using DataAsArrayElement = Data;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kUnion;
};

}  // namespace internal
}  // namespace mojo


namespace autofill {
namespace mojom {


enum class SubmissionIndicatorEvent : int32_t {
  
  NONE = 0,
  
  HTML_FORM_SUBMISSION = 1,
  
  SAME_DOCUMENT_NAVIGATION = 2,
  
  XHR_SUCCEEDED = 3,
  
  FRAME_DETACHED = 4,
  
  DOM_MUTATION_AFTER_XHR = 6,
  
  PROVISIONALLY_SAVED_FORM_ON_START_PROVISIONAL_LOAD = 7,
  
  PROBABLE_FORM_SUBMISSION = 10,
  
  CHANGE_PASSWORD_FORM_CLEARED = 11,
  kMinValue = 0,
  kMaxValue = 11,
};

 std::ostream& operator<<(std::ostream& os, SubmissionIndicatorEvent value);
inline bool IsKnownEnumValue(SubmissionIndicatorEvent value) {
  return internal::SubmissionIndicatorEvent_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class SubmissionSource : int32_t {
  
  NONE = 0,
  
  SAME_DOCUMENT_NAVIGATION = 1,
  
  XHR_SUCCEEDED = 2,
  
  FRAME_DETACHED = 3,
  
  DOM_MUTATION_AFTER_XHR = 4,
  
  PROBABLY_FORM_SUBMITTED = 5,
  
  FORM_SUBMISSION = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

 std::ostream& operator<<(std::ostream& os, SubmissionSource value);
inline bool IsKnownEnumValue(SubmissionSource value) {
  return internal::SubmissionSource_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FocusedFieldType : int32_t {
  
  kUnknown = 0,
  
  kUnfillableElement = 1,
  
  kFillableTextArea = 2,
  
  kFillableSearchField = 3,
  
  kFillableNonSearchField = 4,
  
  kFillableUsernameField = 5,
  
  kFillablePasswordField = 6,
  kMinValue = 0,
  kMaxValue = 6,
};

 std::ostream& operator<<(std::ostream& os, FocusedFieldType value);
inline bool IsKnownEnumValue(FocusedFieldType value) {
  return internal::FocusedFieldType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class ButtonTitleType : int32_t {
  
  NONE = 0,
  
  BUTTON_ELEMENT_SUBMIT_TYPE = 1,
  
  BUTTON_ELEMENT_BUTTON_TYPE = 2,
  
  INPUT_ELEMENT_SUBMIT_TYPE = 3,
  
  INPUT_ELEMENT_BUTTON_TYPE = 4,
  
  HYPERLINK = 5,
  
  DIV = 6,
  
  SPAN = 7,
  kMinValue = 0,
  kMaxValue = 7,
};

 std::ostream& operator<<(std::ostream& os, ButtonTitleType value);
inline bool IsKnownEnumValue(ButtonTitleType value) {
  return internal::ButtonTitleType_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class SubmissionReadinessState : int32_t {
  
  kNoInformation = 0,
  
  kError = 1,
  
  kNoUsernameField = 2,
  
  kFieldBetweenUsernameAndPassword = 3,
  
  kFieldAfterPasswordField = 4,
  
  kEmptyFields = 5,
  
  kMoreThanTwoFields = 6,
  
  kTwoFields = 7,
  kMinValue = 0,
  kMaxValue = 7,
};

 std::ostream& operator<<(std::ostream& os, SubmissionReadinessState value);
inline bool IsKnownEnumValue(SubmissionReadinessState value) {
  return internal::SubmissionReadinessState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class AutofillState : int32_t {
  
  kNoSuggestions = 0,
  
  kAutofillAvailable = 1,
  
  kAutocompleteAvailable = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, AutofillState value);
inline bool IsKnownEnumValue(AutofillState value) {
  return internal::AutofillState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class RendererFormDataAction : int32_t {
  
  kFill = 0,
  
  kPreview = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, RendererFormDataAction value);
inline bool IsKnownEnumValue(RendererFormDataAction value) {
  return internal::RendererFormDataAction_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FormFieldData_CheckStatus : int32_t {
  
  kNotCheckable = 0,
  
  kCheckableButUnchecked = 1,
  
  kChecked = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, FormFieldData_CheckStatus value);
inline bool IsKnownEnumValue(FormFieldData_CheckStatus value) {
  return internal::FormFieldData_CheckStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FormFieldData_RoleAttribute : int32_t {
  
  kPresentation = 0,
  
  kOther = 1,
  kMinValue = 0,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, FormFieldData_RoleAttribute value);
inline bool IsKnownEnumValue(FormFieldData_RoleAttribute value) {
  return internal::FormFieldData_RoleAttribute_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class FormFieldData_LabelSource : int32_t {
  
  kUnknown = 0,
  
  kLabelTag = 1,
  
  kPTag = 2,
  
  kDivTable = 3,
  
  kTdTag = 4,
  
  kDdTag = 5,
  
  kLiTag = 6,
  
  kPlaceHolder = 7,
  
  kAriaLabel = 8,
  
  kCombined = 9,
  
  kValue = 10,
  kMinValue = 0,
  kMaxValue = 10,
};

 std::ostream& operator<<(std::ostream& os, FormFieldData_LabelSource value);
inline bool IsKnownEnumValue(FormFieldData_LabelSource value) {
  return internal::FormFieldData_LabelSource_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


class FrameTokenDataView {
 public:
  FrameTokenDataView() = default;

  FrameTokenDataView(
      internal::FrameToken_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  bool is_local() const {
    return data_->is_local;
  }
 private:
  internal::FrameToken_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameTokenWithPredecessorDataView {
 public:
  FrameTokenWithPredecessorDataView() = default;

  FrameTokenWithPredecessorDataView(
      internal::FrameTokenWithPredecessor_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTokenDataView(
      FrameTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadToken(UserType* output) {
    
    auto* pointer = data_->token.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FrameTokenDataView>(
        pointer, output, message_);
  }
  int32_t predecessor() const {
    return data_->predecessor;
  }
 private:
  internal::FrameTokenWithPredecessor_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FormRendererIdDataView {
 public:
  FormRendererIdDataView() = default;

  FormRendererIdDataView(
      internal::FormRendererId_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t id() const {
    return data_->id;
  }
 private:
  internal::FormRendererId_Data* data_ = nullptr;
};



class FieldRendererIdDataView {
 public:
  FieldRendererIdDataView() = default;

  FieldRendererIdDataView(
      internal::FieldRendererId_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t id() const {
    return data_->id;
  }
 private:
  internal::FieldRendererId_Data* data_ = nullptr;
};



class SelectOptionDataView {
 public:
  SelectOptionDataView() = default;

  SelectOptionDataView(
      internal::SelectOption_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetContentDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadContent(UserType* output) {
    
    auto* pointer = data_->content.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::SelectOption_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SectionAutocompleteDataView {
 public:
  SectionAutocompleteDataView() = default;

  SectionAutocompleteDataView(
      internal::SectionAutocomplete_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSectionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSection(UserType* output) {
    
    auto* pointer = data_->section.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  uint8_t html_field_mode() const {
    return data_->html_field_mode;
  }
 private:
  internal::SectionAutocomplete_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SectionFieldIdentifierDataView {
 public:
  SectionFieldIdentifierDataView() = default;

  SectionFieldIdentifierDataView(
      internal::SectionFieldIdentifier_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFieldNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFieldName(UserType* output) {
    
    auto* pointer = data_->field_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  uint64_t local_frame_id() const {
    return data_->local_frame_id;
  }
  inline void GetFieldRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFieldRendererId(UserType* output) {
    
    auto* pointer = data_->field_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::SectionFieldIdentifier_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SectionDataView {
 public:
  SectionDataView() = default;

  SectionDataView(
      internal::Section_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  uint8_t field_type_group() const {
    return data_->field_type_group;
  }
  inline void GetPrefixDataView(
      SectionPrefixDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPrefix(UserType* output) {
    
    auto* pointer = !data_->prefix.is_null() ? &data_->prefix : nullptr;
    return mojo::internal::Deserialize<::autofill::mojom::SectionPrefixDataView>(
        pointer, output, message_);
  }
 private:
  internal::Section_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FormFieldDataDataView {
 public:
  FormFieldDataDataView() = default;

  FormFieldDataDataView(
      internal::FormFieldData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetLabelDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadLabel(UserType* output) {
    
    auto* pointer = data_->label.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetIdAttributeDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIdAttribute(UserType* output) {
    
    auto* pointer = data_->id_attribute.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetNameAttributeDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNameAttribute(UserType* output) {
    
    auto* pointer = data_->name_attribute.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetValueDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetFormControlTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFormControlType(UserType* output) {
    
    auto* pointer = data_->form_control_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetAutocompleteAttributeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAutocompleteAttribute(UserType* output) {
    
    auto* pointer = data_->autocomplete_attribute.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetPlaceholderDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPlaceholder(UserType* output) {
    
    auto* pointer = data_->placeholder.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetCssClassesDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCssClasses(UserType* output) {
    
    auto* pointer = data_->css_classes.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetAriaLabelDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAriaLabel(UserType* output) {
    
    auto* pointer = data_->aria_label.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetAriaDescriptionDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAriaDescription(UserType* output) {
    
    auto* pointer = data_->aria_description.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetUniqueRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUniqueRendererId(UserType* output) {
    
    auto* pointer = data_->unique_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetHostFormIdDataView(
      FormRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHostFormId(UserType* output) {
    
    auto* pointer = data_->host_form_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormRendererIdDataView>(
        pointer, output, message_);
  }
  uint32_t properties_mask() const {
    return data_->properties_mask;
  }
  int32_t form_control_ax_id() const {
    return data_->form_control_ax_id;
  }
  uint64_t max_length() const {
    return data_->max_length;
  }
  bool is_autofilled() const {
    return data_->is_autofilled;
  }
  inline void GetSectionDataView(
      SectionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSection(UserType* output) {
    
    auto* pointer = data_->section.Get();
    return mojo::internal::Deserialize<::autofill::mojom::SectionDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCheckStatus(UserType* output) const {
    auto data_value = data_->check_status;
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldData_CheckStatus>(
        data_value, output);
  }
  FormFieldData_CheckStatus check_status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::autofill::mojom::FormFieldData_CheckStatus>(data_->check_status));
  }
  bool is_focusable() const {
    return data_->is_focusable;
  }
  bool is_visible() const {
    return data_->is_visible;
  }
  bool should_autocomplete() const {
    return data_->should_autocomplete;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadRole(UserType* output) const {
    auto data_value = data_->role;
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldData_RoleAttribute>(
        data_value, output);
  }
  FormFieldData_RoleAttribute role() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::autofill::mojom::FormFieldData_RoleAttribute>(data_->role));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTextDirection(UserType* output) const {
    auto data_value = data_->text_direction;
    return mojo::internal::Deserialize<::mojo_base::mojom::TextDirection>(
        data_value, output);
  }
  ::mojo_base::mojom::TextDirection text_direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::TextDirection>(data_->text_direction));
  }
  bool is_enabled() const {
    return data_->is_enabled;
  }
  bool is_readonly() const {
    return data_->is_readonly;
  }
  inline void GetUserInputDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUserInput(UserType* output) {
    
    auto* pointer = data_->user_input.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetOptionsDataView(
      mojo::ArrayDataView<SelectOptionDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOptions(UserType* output) {
    
    auto* pointer = data_->options.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::SelectOptionDataView>>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadLabelSource(UserType* output) const {
    auto data_value = data_->label_source;
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldData_LabelSource>(
        data_value, output);
  }
  FormFieldData_LabelSource label_source() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::autofill::mojom::FormFieldData_LabelSource>(data_->label_source));
  }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  inline void GetDatalistValuesDataView(
      mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDatalistValues(UserType* output) {
    
    auto* pointer = data_->datalist_values.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        pointer, output, message_);
  }
  inline void GetDatalistLabelsDataView(
      mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDatalistLabels(UserType* output) {
    
    auto* pointer = data_->datalist_labels.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        pointer, output, message_);
  }
  bool force_override() const {
    return data_->force_override;
  }
 private:
  internal::FormFieldData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ButtonTitleInfoDataView {
 public:
  ButtonTitleInfoDataView() = default;

  ButtonTitleInfoDataView(
      internal::ButtonTitleInfo_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetTitleDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTitle(UserType* output) {
    
    auto* pointer = data_->title.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadType(UserType* output) const {
    auto data_value = data_->type;
    return mojo::internal::Deserialize<::autofill::mojom::ButtonTitleType>(
        data_value, output);
  }
  ButtonTitleType type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::autofill::mojom::ButtonTitleType>(data_->type));
  }
 private:
  internal::ButtonTitleInfo_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FormDataDataView {
 public:
  FormDataDataView() = default;

  FormDataDataView(
      internal::FormData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetIdAttributeDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadIdAttribute(UserType* output) {
    
    auto* pointer = data_->id_attribute.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetNameAttributeDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNameAttribute(UserType* output) {
    
    auto* pointer = data_->name_attribute.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadName(UserType* output) {
    
    auto* pointer = data_->name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetButtonTitlesDataView(
      mojo::ArrayDataView<ButtonTitleInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadButtonTitles(UserType* output) {
    
    auto* pointer = data_->button_titles.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::ButtonTitleInfoDataView>>(
        pointer, output, message_);
  }
  inline void GetActionDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) {
    
    auto* pointer = data_->action.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  bool is_action_empty() const {
    return data_->is_action_empty;
  }
  bool is_form_tag() const {
    return data_->is_form_tag;
  }
  inline void GetUniqueRendererIdDataView(
      FormRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUniqueRendererId(UserType* output) {
    
    auto* pointer = data_->unique_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetChildFramesDataView(
      mojo::ArrayDataView<FrameTokenWithPredecessorDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadChildFrames(UserType* output) {
    
    auto* pointer = data_->child_frames.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FrameTokenWithPredecessorDataView>>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadSubmissionEvent(UserType* output) const {
    auto data_value = data_->submission_event;
    return mojo::internal::Deserialize<::autofill::mojom::SubmissionIndicatorEvent>(
        data_value, output);
  }
  SubmissionIndicatorEvent submission_event() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::autofill::mojom::SubmissionIndicatorEvent>(data_->submission_event));
  }
  inline void GetFieldsDataView(
      mojo::ArrayDataView<FormFieldDataDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFields(UserType* output) {
    
    auto* pointer = data_->fields.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FormFieldDataDataView>>(
        pointer, output, message_);
  }
  inline void GetUsernamePredictionsDataView(
      mojo::ArrayDataView<FieldRendererIdDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsernamePredictions(UserType* output) {
    
    auto* pointer = data_->username_predictions.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FieldRendererIdDataView>>(
        pointer, output, message_);
  }
  bool is_gaia_with_skip_save_password_form() const {
    return data_->is_gaia_with_skip_save_password_form;
  }
 private:
  internal::FormData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FormFieldDataPredictionsDataView {
 public:
  FormFieldDataPredictionsDataView() = default;

  FormFieldDataPredictionsDataView(
      internal::FormFieldDataPredictions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetHostFormSignatureDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHostFormSignature(UserType* output) {
    
    auto* pointer = data_->host_form_signature.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSignatureDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSignature(UserType* output) {
    
    auto* pointer = data_->signature.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetHeuristicTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadHeuristicType(UserType* output) {
    
    auto* pointer = data_->heuristic_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetServerTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadServerType(UserType* output) {
    
    auto* pointer = data_->server_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetOverallTypeDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadOverallType(UserType* output) {
    
    auto* pointer = data_->overall_type.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetParseableNameDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadParseableName(UserType* output) {
    
    auto* pointer = data_->parseable_name.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetSectionDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSection(UserType* output) {
    
    auto* pointer = data_->section.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::FormFieldDataPredictions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FormDataPredictionsDataView {
 public:
  FormDataPredictionsDataView() = default;

  FormDataPredictionsDataView(
      internal::FormDataPredictions_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetDataDataView(
      FormDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadData(UserType* output) {
    
    auto* pointer = data_->data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, message_);
  }
  inline void GetSignatureDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSignature(UserType* output) {
    
    auto* pointer = data_->signature.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetFieldsDataView(
      mojo::ArrayDataView<FormFieldDataPredictionsDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFields(UserType* output) {
    
    auto* pointer = data_->fields.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::FormFieldDataPredictionsDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FormDataPredictions_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PasswordAndMetadataDataView {
 public:
  PasswordAndMetadataDataView() = default;

  PasswordAndMetadataDataView(
      internal::PasswordAndMetadata_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUsernameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsername(UserType* output) {
    
    auto* pointer = data_->username.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetPasswordDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPassword(UserType* output) {
    
    auto* pointer = data_->password.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetRealmDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRealm(UserType* output) {
    
    auto* pointer = data_->realm.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool uses_account_store() const {
    return data_->uses_account_store;
  }
 private:
  internal::PasswordAndMetadata_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PasswordFormFillDataDataView {
 public:
  PasswordFormFillDataDataView() = default;

  PasswordFormFillDataDataView(
      internal::PasswordFormFillData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFormRendererIdDataView(
      FormRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFormRendererId(UserType* output) {
    
    auto* pointer = data_->form_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetActionDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAction(UserType* output) {
    
    auto* pointer = data_->action.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
  inline void GetUsernameFieldDataView(
      FormFieldDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsernameField(UserType* output) {
    
    auto* pointer = data_->username_field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, message_);
  }
  inline void GetPasswordFieldDataView(
      FormFieldDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPasswordField(UserType* output) {
    
    auto* pointer = data_->password_field.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormFieldDataDataView>(
        pointer, output, message_);
  }
  bool username_may_use_prefilled_placeholder() const {
    return data_->username_may_use_prefilled_placeholder;
  }
  inline void GetPreferredRealmDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPreferredRealm(UserType* output) {
    
    auto* pointer = data_->preferred_realm.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool uses_account_store() const {
    return data_->uses_account_store;
  }
  inline void GetAdditionalLoginsDataView(
      mojo::ArrayDataView<PasswordAndMetadataDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadAdditionalLogins(UserType* output) {
    
    auto* pointer = data_->additional_logins.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::autofill::mojom::PasswordAndMetadataDataView>>(
        pointer, output, message_);
  }
  bool wait_for_username() const {
    return data_->wait_for_username;
  }
 private:
  internal::PasswordFormFillData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PasswordFormGenerationDataDataView {
 public:
  PasswordFormGenerationDataDataView() = default;

  PasswordFormGenerationDataDataView(
      internal::PasswordFormGenerationData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNewPasswordRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewPasswordRendererId(UserType* output) {
    
    auto* pointer = data_->new_password_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetConfirmationPasswordRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfirmationPasswordRendererId(UserType* output) {
    
    auto* pointer = data_->confirmation_password_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::PasswordFormGenerationData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PasswordGenerationUIDataDataView {
 public:
  PasswordGenerationUIDataDataView() = default;

  PasswordGenerationUIDataDataView(
      internal::PasswordGenerationUIData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBoundsDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBounds(UserType* output) {
    
    auto* pointer = data_->bounds.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
  int32_t max_length() const {
    return data_->max_length;
  }
  inline void GetGenerationElementDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGenerationElement(UserType* output) {
    
    auto* pointer = data_->generation_element.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetGenerationElementIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadGenerationElementId(UserType* output) {
    
    auto* pointer = data_->generation_element_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
  bool is_generation_element_password_type() const {
    return data_->is_generation_element_password_type;
  }
  template <typename UserType>
  [[nodiscard]] bool ReadTextDirection(UserType* output) const {
    auto data_value = data_->text_direction;
    return mojo::internal::Deserialize<::mojo_base::mojom::TextDirection>(
        data_value, output);
  }
  ::mojo_base::mojom::TextDirection text_direction() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::TextDirection>(data_->text_direction));
  }
  inline void GetFormDataDataView(
      FormDataDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFormData(UserType* output) {
    
    auto* pointer = data_->form_data.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FormDataDataView>(
        pointer, output, message_);
  }
 private:
  internal::PasswordGenerationUIData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class ParsingResultDataView {
 public:
  ParsingResultDataView() = default;

  ParsingResultDataView(
      internal::ParsingResult_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUsernameRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUsernameRendererId(UserType* output) {
    
    auto* pointer = data_->username_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetPasswordRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPasswordRendererId(UserType* output) {
    
    auto* pointer = data_->password_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetNewPasswordRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNewPasswordRendererId(UserType* output) {
    
    auto* pointer = data_->new_password_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
  inline void GetConfirmPasswordRendererIdDataView(
      FieldRendererIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadConfirmPasswordRendererId(UserType* output) {
    
    auto* pointer = data_->confirm_password_renderer_id.Get();
    return mojo::internal::Deserialize<::autofill::mojom::FieldRendererIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::ParsingResult_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class TouchToFillEligibleDataView {
 public:
  TouchToFillEligibleDataView() = default;

  TouchToFillEligibleDataView(
      internal::TouchToFillEligible_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool eligible() const {
    return data_->eligible;
  }
 private:
  internal::TouchToFillEligible_Data* data_ = nullptr;
};



class SectionPrefixDataView {
 public:
  using Tag = internal::SectionPrefix_Data::SectionPrefix_Tag;

  SectionPrefixDataView() = default;

  SectionPrefixDataView(
      internal::SectionPrefix_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const {
    // For inlined unions, |data_| is always non-null. In that case we need to
    // check |data_->is_null()|.
    return !data_ || data_->is_null();
  }

  Tag tag() const { return data_->tag; }
  bool is_default_prefix() const { return data_->tag == Tag::kDefaultPrefix; }
  bool default_prefix() const {
    CHECK(is_default_prefix());
    return data_->data.f_default_prefix;
  }
  bool is_autocomplete_section_prefix() const { return data_->tag == Tag::kAutocompleteSectionPrefix; }
  inline void GetAutocompleteSectionPrefixDataView(
      SectionAutocompleteDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadAutocompleteSectionPrefix(UserType* output) const {
    
    CHECK(is_autocomplete_section_prefix());
    return mojo::internal::Deserialize<::autofill::mojom::SectionAutocompleteDataView>(
        data_->data.f_autocomplete_section_prefix.Get(), output, message_);
  }
  bool is_from_field_prefix() const { return data_->tag == Tag::kFromFieldPrefix; }
  inline void GetFromFieldPrefixDataView(
      SectionFieldIdentifierDataView* output) const;

  template <typename UserType>
  [[nodiscard]] bool ReadFromFieldPrefix(UserType* output) const {
    
    CHECK(is_from_field_prefix());
    return mojo::internal::Deserialize<::autofill::mojom::SectionFieldIdentifierDataView>(
        data_->data.f_from_field_prefix.Get(), output, message_);
  }
  bool is_credit_card_prefix() const { return data_->tag == Tag::kCreditCardPrefix; }
  bool credit_card_prefix() const {
    CHECK(is_credit_card_prefix());
    return data_->data.f_credit_card_prefix;
  }

 private:
  internal::SectionPrefix_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace autofill

namespace std {

template <>
struct hash<::autofill::mojom::SubmissionIndicatorEvent>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::SubmissionIndicatorEvent> {};

template <>
struct hash<::autofill::mojom::SubmissionSource>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::SubmissionSource> {};

template <>
struct hash<::autofill::mojom::FocusedFieldType>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::FocusedFieldType> {};

template <>
struct hash<::autofill::mojom::ButtonTitleType>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::ButtonTitleType> {};

template <>
struct hash<::autofill::mojom::SubmissionReadinessState>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::SubmissionReadinessState> {};

template <>
struct hash<::autofill::mojom::AutofillState>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::AutofillState> {};

template <>
struct hash<::autofill::mojom::RendererFormDataAction>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::RendererFormDataAction> {};

template <>
struct hash<::autofill::mojom::FormFieldData_CheckStatus>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::FormFieldData_CheckStatus> {};

template <>
struct hash<::autofill::mojom::FormFieldData_RoleAttribute>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::FormFieldData_RoleAttribute> {};

template <>
struct hash<::autofill::mojom::FormFieldData_LabelSource>
    : public mojo::internal::EnumHashImpl<::autofill::mojom::FormFieldData_LabelSource> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SubmissionIndicatorEvent, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::SubmissionIndicatorEvent, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::SubmissionIndicatorEvent>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SubmissionSource, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::SubmissionSource, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::SubmissionSource>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FocusedFieldType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::FocusedFieldType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::FocusedFieldType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::ButtonTitleType, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::ButtonTitleType, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::ButtonTitleType>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SubmissionReadinessState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::SubmissionReadinessState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::SubmissionReadinessState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::AutofillState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::AutofillState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::AutofillState>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::RendererFormDataAction, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::RendererFormDataAction, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::RendererFormDataAction>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormFieldData_CheckStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::FormFieldData_CheckStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::FormFieldData_CheckStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormFieldData_RoleAttribute, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::FormFieldData_RoleAttribute, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::FormFieldData_RoleAttribute>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormFieldData_LabelSource, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::autofill::mojom::FormFieldData_LabelSource, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::autofill::mojom::FormFieldData_LabelSource>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FrameTokenDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FrameTokenDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FrameToken_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::token(input)) in_token = Traits::token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->token)::BaseType> token_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_token, token_fragment);
    fragment->token.Set(
        token_fragment.is_null() ? nullptr : token_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null token in FrameToken struct");
    fragment->is_local = Traits::is_local(input);
  }

  static bool Deserialize(::autofill::mojom::internal::FrameToken_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FrameTokenDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FrameTokenWithPredecessorDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FrameTokenWithPredecessorDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FrameTokenWithPredecessor_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::token(input)) in_token = Traits::token(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->token)::BaseType> token_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FrameTokenDataView>(
        in_token, token_fragment);
    fragment->token.Set(
        token_fragment.is_null() ? nullptr : token_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->token.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null token in FrameTokenWithPredecessor struct");
    fragment->predecessor = Traits::predecessor(input);
  }

  static bool Deserialize(::autofill::mojom::internal::FrameTokenWithPredecessor_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FrameTokenWithPredecessorDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormRendererIdDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FormRendererIdDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FormRendererId_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->id = Traits::id(input);
  }

  static bool Deserialize(::autofill::mojom::internal::FormRendererId_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FormRendererIdDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FieldRendererIdDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FieldRendererIdDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FieldRendererId_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->id = Traits::id(input);
  }

  static bool Deserialize(::autofill::mojom::internal::FieldRendererId_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FieldRendererIdDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SelectOptionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::SelectOptionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::SelectOption_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::value(input)) in_value = Traits::value(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->value)::BaseType> value_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_value, value_fragment);
    fragment->value.Set(
        value_fragment.is_null() ? nullptr : value_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null value in SelectOption struct");
    decltype(Traits::content(input)) in_content = Traits::content(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->content)::BaseType> content_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_content, content_fragment);
    fragment->content.Set(
        content_fragment.is_null() ? nullptr : content_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->content.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null content in SelectOption struct");
  }

  static bool Deserialize(::autofill::mojom::internal::SelectOption_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::SelectOptionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SectionAutocompleteDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::SectionAutocompleteDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::SectionAutocomplete_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::section(input)) in_section = Traits::section(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->section)::BaseType> section_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_section, section_fragment);
    fragment->section.Set(
        section_fragment.is_null() ? nullptr : section_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->section.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null section in SectionAutocomplete struct");
    fragment->html_field_mode = Traits::html_field_mode(input);
  }

  static bool Deserialize(::autofill::mojom::internal::SectionAutocomplete_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::SectionAutocompleteDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SectionFieldIdentifierDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::SectionFieldIdentifierDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::SectionFieldIdentifier_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::field_name(input)) in_field_name = Traits::field_name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->field_name)::BaseType> field_name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_field_name, field_name_fragment);
    fragment->field_name.Set(
        field_name_fragment.is_null() ? nullptr : field_name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->field_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null field_name in SectionFieldIdentifier struct");
    fragment->local_frame_id = Traits::local_frame_id(input);
    decltype(Traits::field_renderer_id(input)) in_field_renderer_id = Traits::field_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->field_renderer_id)::BaseType> field_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_field_renderer_id, field_renderer_id_fragment);
    fragment->field_renderer_id.Set(
        field_renderer_id_fragment.is_null() ? nullptr : field_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->field_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null field_renderer_id in SectionFieldIdentifier struct");
  }

  static bool Deserialize(::autofill::mojom::internal::SectionFieldIdentifier_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::SectionFieldIdentifierDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SectionDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::SectionDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::Section_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->field_type_group = Traits::field_type_group(input);
    decltype(Traits::prefix(input)) in_prefix = Traits::prefix(input);
    mojo::internal::MessageFragment<decltype(fragment->prefix)>
        prefix_fragment(fragment.message());
    prefix_fragment.Claim(&fragment->prefix);
    mojo::internal::Serialize<::autofill::mojom::SectionPrefixDataView>(
        in_prefix, prefix_fragment, true);
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->prefix.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null prefix in Section struct");
  }

  static bool Deserialize(::autofill::mojom::internal::Section_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::SectionDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormFieldDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FormFieldDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FormFieldData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::label(input)) in_label = Traits::label(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->label)::BaseType> label_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_label, label_fragment);
    fragment->label.Set(
        label_fragment.is_null() ? nullptr : label_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->label.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null label in FormFieldData struct");
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in FormFieldData struct");
    decltype(Traits::id_attribute(input)) in_id_attribute = Traits::id_attribute(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->id_attribute)::BaseType> id_attribute_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_id_attribute, id_attribute_fragment);
    fragment->id_attribute.Set(
        id_attribute_fragment.is_null() ? nullptr : id_attribute_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->id_attribute.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id_attribute in FormFieldData struct");
    decltype(Traits::name_attribute(input)) in_name_attribute = Traits::name_attribute(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name_attribute)::BaseType> name_attribute_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_name_attribute, name_attribute_fragment);
    fragment->name_attribute.Set(
        name_attribute_fragment.is_null() ? nullptr : name_attribute_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name_attribute.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name_attribute in FormFieldData struct");
    decltype(Traits::value(input)) in_value = Traits::value(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->value)::BaseType> value_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_value, value_fragment);
    fragment->value.Set(
        value_fragment.is_null() ? nullptr : value_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->value.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null value in FormFieldData struct");
    decltype(Traits::form_control_type(input)) in_form_control_type = Traits::form_control_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->form_control_type)::BaseType> form_control_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_form_control_type, form_control_type_fragment);
    fragment->form_control_type.Set(
        form_control_type_fragment.is_null() ? nullptr : form_control_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->form_control_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null form_control_type in FormFieldData struct");
    decltype(Traits::autocomplete_attribute(input)) in_autocomplete_attribute = Traits::autocomplete_attribute(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->autocomplete_attribute)::BaseType> autocomplete_attribute_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_autocomplete_attribute, autocomplete_attribute_fragment);
    fragment->autocomplete_attribute.Set(
        autocomplete_attribute_fragment.is_null() ? nullptr : autocomplete_attribute_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->autocomplete_attribute.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null autocomplete_attribute in FormFieldData struct");
    decltype(Traits::placeholder(input)) in_placeholder = Traits::placeholder(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->placeholder)::BaseType> placeholder_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_placeholder, placeholder_fragment);
    fragment->placeholder.Set(
        placeholder_fragment.is_null() ? nullptr : placeholder_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->placeholder.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null placeholder in FormFieldData struct");
    decltype(Traits::css_classes(input)) in_css_classes = Traits::css_classes(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->css_classes)::BaseType> css_classes_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_css_classes, css_classes_fragment);
    fragment->css_classes.Set(
        css_classes_fragment.is_null() ? nullptr : css_classes_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->css_classes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null css_classes in FormFieldData struct");
    decltype(Traits::aria_label(input)) in_aria_label = Traits::aria_label(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->aria_label)::BaseType> aria_label_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_aria_label, aria_label_fragment);
    fragment->aria_label.Set(
        aria_label_fragment.is_null() ? nullptr : aria_label_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->aria_label.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null aria_label in FormFieldData struct");
    decltype(Traits::aria_description(input)) in_aria_description = Traits::aria_description(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->aria_description)::BaseType> aria_description_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_aria_description, aria_description_fragment);
    fragment->aria_description.Set(
        aria_description_fragment.is_null() ? nullptr : aria_description_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->aria_description.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null aria_description in FormFieldData struct");
    decltype(Traits::unique_renderer_id(input)) in_unique_renderer_id = Traits::unique_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->unique_renderer_id)::BaseType> unique_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_unique_renderer_id, unique_renderer_id_fragment);
    fragment->unique_renderer_id.Set(
        unique_renderer_id_fragment.is_null() ? nullptr : unique_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->unique_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null unique_renderer_id in FormFieldData struct");
    decltype(Traits::host_form_id(input)) in_host_form_id = Traits::host_form_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->host_form_id)::BaseType> host_form_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormRendererIdDataView>(
        in_host_form_id, host_form_id_fragment);
    fragment->host_form_id.Set(
        host_form_id_fragment.is_null() ? nullptr : host_form_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->host_form_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null host_form_id in FormFieldData struct");
    fragment->properties_mask = Traits::properties_mask(input);
    fragment->form_control_ax_id = Traits::form_control_ax_id(input);
    fragment->max_length = Traits::max_length(input);
    fragment->is_autofilled = Traits::is_autofilled(input);
    decltype(Traits::section(input)) in_section = Traits::section(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->section)::BaseType> section_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::SectionDataView>(
        in_section, section_fragment);
    fragment->section.Set(
        section_fragment.is_null() ? nullptr : section_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->section.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null section in FormFieldData struct");
    mojo::internal::Serialize<::autofill::mojom::FormFieldData_CheckStatus>(
        Traits::check_status(input), &fragment->check_status);
    fragment->is_focusable = Traits::is_focusable(input);
    fragment->is_visible = Traits::is_visible(input);
    fragment->should_autocomplete = Traits::should_autocomplete(input);
    mojo::internal::Serialize<::autofill::mojom::FormFieldData_RoleAttribute>(
        Traits::role(input), &fragment->role);
    mojo::internal::Serialize<::mojo_base::mojom::TextDirection>(
        Traits::text_direction(input), &fragment->text_direction);
    fragment->is_enabled = Traits::is_enabled(input);
    fragment->is_readonly = Traits::is_readonly(input);
    decltype(Traits::user_input(input)) in_user_input = Traits::user_input(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->user_input)::BaseType> user_input_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_user_input, user_input_fragment);
    fragment->user_input.Set(
        user_input_fragment.is_null() ? nullptr : user_input_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->user_input.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null user_input in FormFieldData struct");
    decltype(Traits::options(input)) in_options = Traits::options(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->options)::BaseType>
        options_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams options_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::SelectOptionDataView>>(
        in_options, options_fragment, &options_validate_params);
    fragment->options.Set(
        options_fragment.is_null() ? nullptr : options_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->options.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null options in FormFieldData struct");
    mojo::internal::Serialize<::autofill::mojom::FormFieldData_LabelSource>(
        Traits::label_source(input), &fragment->label_source);
    decltype(Traits::bounds(input)) in_bounds = Traits::bounds(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bounds)::BaseType> bounds_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_bounds, bounds_fragment);
    fragment->bounds.Set(
        bounds_fragment.is_null() ? nullptr : bounds_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bounds.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bounds in FormFieldData struct");
    decltype(Traits::datalist_values(input)) in_datalist_values = Traits::datalist_values(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->datalist_values)::BaseType>
        datalist_values_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams datalist_values_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        in_datalist_values, datalist_values_fragment, &datalist_values_validate_params);
    fragment->datalist_values.Set(
        datalist_values_fragment.is_null() ? nullptr : datalist_values_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->datalist_values.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null datalist_values in FormFieldData struct");
    decltype(Traits::datalist_labels(input)) in_datalist_labels = Traits::datalist_labels(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->datalist_labels)::BaseType>
        datalist_labels_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams datalist_labels_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::mojo_base::mojom::String16DataView>>(
        in_datalist_labels, datalist_labels_fragment, &datalist_labels_validate_params);
    fragment->datalist_labels.Set(
        datalist_labels_fragment.is_null() ? nullptr : datalist_labels_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->datalist_labels.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null datalist_labels in FormFieldData struct");
    fragment->force_override = Traits::force_override(input);
  }

  static bool Deserialize(::autofill::mojom::internal::FormFieldData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FormFieldDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::ButtonTitleInfoDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::ButtonTitleInfoDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::ButtonTitleInfo_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::title(input)) in_title = Traits::title(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->title)::BaseType> title_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_title, title_fragment);
    fragment->title.Set(
        title_fragment.is_null() ? nullptr : title_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->title.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null title in ButtonTitleInfo struct");
    mojo::internal::Serialize<::autofill::mojom::ButtonTitleType>(
        Traits::type(input), &fragment->type);
  }

  static bool Deserialize(::autofill::mojom::internal::ButtonTitleInfo_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::ButtonTitleInfoDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FormDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FormData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::id_attribute(input)) in_id_attribute = Traits::id_attribute(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->id_attribute)::BaseType> id_attribute_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_id_attribute, id_attribute_fragment);
    fragment->id_attribute.Set(
        id_attribute_fragment.is_null() ? nullptr : id_attribute_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->id_attribute.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null id_attribute in FormData struct");
    decltype(Traits::name_attribute(input)) in_name_attribute = Traits::name_attribute(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name_attribute)::BaseType> name_attribute_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_name_attribute, name_attribute_fragment);
    fragment->name_attribute.Set(
        name_attribute_fragment.is_null() ? nullptr : name_attribute_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name_attribute.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name_attribute in FormData struct");
    decltype(Traits::name(input)) in_name = Traits::name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->name)::BaseType> name_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_name, name_fragment);
    fragment->name.Set(
        name_fragment.is_null() ? nullptr : name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null name in FormData struct");
    decltype(Traits::button_titles(input)) in_button_titles = Traits::button_titles(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->button_titles)::BaseType>
        button_titles_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams button_titles_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::ButtonTitleInfoDataView>>(
        in_button_titles, button_titles_fragment, &button_titles_validate_params);
    fragment->button_titles.Set(
        button_titles_fragment.is_null() ? nullptr : button_titles_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->button_titles.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null button_titles in FormData struct");
    decltype(Traits::action(input)) in_action = Traits::action(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->action)::BaseType> action_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_action, action_fragment);
    fragment->action.Set(
        action_fragment.is_null() ? nullptr : action_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->action.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null action in FormData struct");
    fragment->is_action_empty = Traits::is_action_empty(input);
    fragment->is_form_tag = Traits::is_form_tag(input);
    decltype(Traits::unique_renderer_id(input)) in_unique_renderer_id = Traits::unique_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->unique_renderer_id)::BaseType> unique_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormRendererIdDataView>(
        in_unique_renderer_id, unique_renderer_id_fragment);
    fragment->unique_renderer_id.Set(
        unique_renderer_id_fragment.is_null() ? nullptr : unique_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->unique_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null unique_renderer_id in FormData struct");
    decltype(Traits::child_frames(input)) in_child_frames = Traits::child_frames(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->child_frames)::BaseType>
        child_frames_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams child_frames_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::FrameTokenWithPredecessorDataView>>(
        in_child_frames, child_frames_fragment, &child_frames_validate_params);
    fragment->child_frames.Set(
        child_frames_fragment.is_null() ? nullptr : child_frames_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->child_frames.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null child_frames in FormData struct");
    mojo::internal::Serialize<::autofill::mojom::SubmissionIndicatorEvent>(
        Traits::submission_event(input), &fragment->submission_event);
    decltype(Traits::fields(input)) in_fields = Traits::fields(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->fields)::BaseType>
        fields_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams fields_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::FormFieldDataDataView>>(
        in_fields, fields_fragment, &fields_validate_params);
    fragment->fields.Set(
        fields_fragment.is_null() ? nullptr : fields_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->fields.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null fields in FormData struct");
    decltype(Traits::username_predictions(input)) in_username_predictions = Traits::username_predictions(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->username_predictions)::BaseType>
        username_predictions_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams username_predictions_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::FieldRendererIdDataView>>(
        in_username_predictions, username_predictions_fragment, &username_predictions_validate_params);
    fragment->username_predictions.Set(
        username_predictions_fragment.is_null() ? nullptr : username_predictions_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->username_predictions.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null username_predictions in FormData struct");
    fragment->is_gaia_with_skip_save_password_form = Traits::is_gaia_with_skip_save_password_form(input);
  }

  static bool Deserialize(::autofill::mojom::internal::FormData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FormDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormFieldDataPredictionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FormFieldDataPredictionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FormFieldDataPredictions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::host_form_signature(input)) in_host_form_signature = Traits::host_form_signature(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->host_form_signature)::BaseType> host_form_signature_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_host_form_signature, host_form_signature_fragment);
    fragment->host_form_signature.Set(
        host_form_signature_fragment.is_null() ? nullptr : host_form_signature_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->host_form_signature.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null host_form_signature in FormFieldDataPredictions struct");
    decltype(Traits::signature(input)) in_signature = Traits::signature(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->signature)::BaseType> signature_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_signature, signature_fragment);
    fragment->signature.Set(
        signature_fragment.is_null() ? nullptr : signature_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->signature.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null signature in FormFieldDataPredictions struct");
    decltype(Traits::heuristic_type(input)) in_heuristic_type = Traits::heuristic_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->heuristic_type)::BaseType> heuristic_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_heuristic_type, heuristic_type_fragment);
    fragment->heuristic_type.Set(
        heuristic_type_fragment.is_null() ? nullptr : heuristic_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->heuristic_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null heuristic_type in FormFieldDataPredictions struct");
    decltype(Traits::server_type(input)) in_server_type = Traits::server_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->server_type)::BaseType> server_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_server_type, server_type_fragment);
    fragment->server_type.Set(
        server_type_fragment.is_null() ? nullptr : server_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->server_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null server_type in FormFieldDataPredictions struct");
    decltype(Traits::overall_type(input)) in_overall_type = Traits::overall_type(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->overall_type)::BaseType> overall_type_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_overall_type, overall_type_fragment);
    fragment->overall_type.Set(
        overall_type_fragment.is_null() ? nullptr : overall_type_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->overall_type.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null overall_type in FormFieldDataPredictions struct");
    decltype(Traits::parseable_name(input)) in_parseable_name = Traits::parseable_name(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->parseable_name)::BaseType> parseable_name_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_parseable_name, parseable_name_fragment);
    fragment->parseable_name.Set(
        parseable_name_fragment.is_null() ? nullptr : parseable_name_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->parseable_name.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null parseable_name in FormFieldDataPredictions struct");
    decltype(Traits::section(input)) in_section = Traits::section(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->section)::BaseType> section_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_section, section_fragment);
    fragment->section.Set(
        section_fragment.is_null() ? nullptr : section_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->section.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null section in FormFieldDataPredictions struct");
  }

  static bool Deserialize(::autofill::mojom::internal::FormFieldDataPredictions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FormFieldDataPredictionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::FormDataPredictionsDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::FormDataPredictionsDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::FormDataPredictions_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::data(input)) in_data = Traits::data(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->data)::BaseType> data_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormDataDataView>(
        in_data, data_fragment);
    fragment->data.Set(
        data_fragment.is_null() ? nullptr : data_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null data in FormDataPredictions struct");
    decltype(Traits::signature(input)) in_signature = Traits::signature(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->signature)::BaseType> signature_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_signature, signature_fragment);
    fragment->signature.Set(
        signature_fragment.is_null() ? nullptr : signature_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->signature.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null signature in FormDataPredictions struct");
    decltype(Traits::fields(input)) in_fields = Traits::fields(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->fields)::BaseType>
        fields_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams fields_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::FormFieldDataPredictionsDataView>>(
        in_fields, fields_fragment, &fields_validate_params);
    fragment->fields.Set(
        fields_fragment.is_null() ? nullptr : fields_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->fields.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null fields in FormDataPredictions struct");
  }

  static bool Deserialize(::autofill::mojom::internal::FormDataPredictions_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::FormDataPredictionsDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::PasswordAndMetadataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::PasswordAndMetadataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::PasswordAndMetadata_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::username(input)) in_username = Traits::username(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->username)::BaseType> username_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_username, username_fragment);
    fragment->username.Set(
        username_fragment.is_null() ? nullptr : username_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->username.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null username in PasswordAndMetadata struct");
    decltype(Traits::password(input)) in_password = Traits::password(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->password)::BaseType> password_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_password, password_fragment);
    fragment->password.Set(
        password_fragment.is_null() ? nullptr : password_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->password.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null password in PasswordAndMetadata struct");
    decltype(Traits::realm(input)) in_realm = Traits::realm(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->realm)::BaseType> realm_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_realm, realm_fragment);
    fragment->realm.Set(
        realm_fragment.is_null() ? nullptr : realm_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->realm.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null realm in PasswordAndMetadata struct");
    fragment->uses_account_store = Traits::uses_account_store(input);
  }

  static bool Deserialize(::autofill::mojom::internal::PasswordAndMetadata_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::PasswordAndMetadataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::PasswordFormFillDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::PasswordFormFillDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::PasswordFormFillData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::form_renderer_id(input)) in_form_renderer_id = Traits::form_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->form_renderer_id)::BaseType> form_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormRendererIdDataView>(
        in_form_renderer_id, form_renderer_id_fragment);
    fragment->form_renderer_id.Set(
        form_renderer_id_fragment.is_null() ? nullptr : form_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->form_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null form_renderer_id in PasswordFormFillData struct");
    decltype(Traits::url(input)) in_url = Traits::url(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->url)::BaseType> url_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_url, url_fragment);
    fragment->url.Set(
        url_fragment.is_null() ? nullptr : url_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->url.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null url in PasswordFormFillData struct");
    decltype(Traits::action(input)) in_action = Traits::action(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->action)::BaseType> action_fragment(
            fragment.message());
    mojo::internal::Serialize<::url::mojom::UrlDataView>(
        in_action, action_fragment);
    fragment->action.Set(
        action_fragment.is_null() ? nullptr : action_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->action.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null action in PasswordFormFillData struct");
    decltype(Traits::username_field(input)) in_username_field = Traits::username_field(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->username_field)::BaseType> username_field_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormFieldDataDataView>(
        in_username_field, username_field_fragment);
    fragment->username_field.Set(
        username_field_fragment.is_null() ? nullptr : username_field_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->username_field.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null username_field in PasswordFormFillData struct");
    decltype(Traits::password_field(input)) in_password_field = Traits::password_field(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->password_field)::BaseType> password_field_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormFieldDataDataView>(
        in_password_field, password_field_fragment);
    fragment->password_field.Set(
        password_field_fragment.is_null() ? nullptr : password_field_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->password_field.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null password_field in PasswordFormFillData struct");
    fragment->username_may_use_prefilled_placeholder = Traits::username_may_use_prefilled_placeholder(input);
    decltype(Traits::preferred_realm(input)) in_preferred_realm = Traits::preferred_realm(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->preferred_realm)::BaseType> preferred_realm_fragment(
            fragment.message());
    mojo::internal::Serialize<mojo::StringDataView>(
        in_preferred_realm, preferred_realm_fragment);
    fragment->preferred_realm.Set(
        preferred_realm_fragment.is_null() ? nullptr : preferred_realm_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->preferred_realm.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null preferred_realm in PasswordFormFillData struct");
    fragment->uses_account_store = Traits::uses_account_store(input);
    decltype(Traits::additional_logins(input)) in_additional_logins = Traits::additional_logins(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->additional_logins)::BaseType>
        additional_logins_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams additional_logins_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::autofill::mojom::PasswordAndMetadataDataView>>(
        in_additional_logins, additional_logins_fragment, &additional_logins_validate_params);
    fragment->additional_logins.Set(
        additional_logins_fragment.is_null() ? nullptr : additional_logins_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->additional_logins.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null additional_logins in PasswordFormFillData struct");
    fragment->wait_for_username = Traits::wait_for_username(input);
  }

  static bool Deserialize(::autofill::mojom::internal::PasswordFormFillData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::PasswordFormFillDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::PasswordFormGenerationDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::PasswordFormGenerationDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::PasswordFormGenerationData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::new_password_renderer_id(input)) in_new_password_renderer_id = Traits::new_password_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->new_password_renderer_id)::BaseType> new_password_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_new_password_renderer_id, new_password_renderer_id_fragment);
    fragment->new_password_renderer_id.Set(
        new_password_renderer_id_fragment.is_null() ? nullptr : new_password_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->new_password_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null new_password_renderer_id in PasswordFormGenerationData struct");
    decltype(Traits::confirmation_password_renderer_id(input)) in_confirmation_password_renderer_id = Traits::confirmation_password_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->confirmation_password_renderer_id)::BaseType> confirmation_password_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_confirmation_password_renderer_id, confirmation_password_renderer_id_fragment);
    fragment->confirmation_password_renderer_id.Set(
        confirmation_password_renderer_id_fragment.is_null() ? nullptr : confirmation_password_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->confirmation_password_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null confirmation_password_renderer_id in PasswordFormGenerationData struct");
  }

  static bool Deserialize(::autofill::mojom::internal::PasswordFormGenerationData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::PasswordFormGenerationDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::PasswordGenerationUIDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::PasswordGenerationUIDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::PasswordGenerationUIData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::bounds(input)) in_bounds = Traits::bounds(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->bounds)::BaseType> bounds_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_bounds, bounds_fragment);
    fragment->bounds.Set(
        bounds_fragment.is_null() ? nullptr : bounds_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->bounds.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null bounds in PasswordGenerationUIData struct");
    fragment->max_length = Traits::max_length(input);
    decltype(Traits::generation_element(input)) in_generation_element = Traits::generation_element(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->generation_element)::BaseType> generation_element_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
        in_generation_element, generation_element_fragment);
    fragment->generation_element.Set(
        generation_element_fragment.is_null() ? nullptr : generation_element_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->generation_element.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null generation_element in PasswordGenerationUIData struct");
    decltype(Traits::generation_element_id(input)) in_generation_element_id = Traits::generation_element_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->generation_element_id)::BaseType> generation_element_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_generation_element_id, generation_element_id_fragment);
    fragment->generation_element_id.Set(
        generation_element_id_fragment.is_null() ? nullptr : generation_element_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->generation_element_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null generation_element_id in PasswordGenerationUIData struct");
    fragment->is_generation_element_password_type = Traits::is_generation_element_password_type(input);
    mojo::internal::Serialize<::mojo_base::mojom::TextDirection>(
        Traits::text_direction(input), &fragment->text_direction);
    decltype(Traits::form_data(input)) in_form_data = Traits::form_data(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->form_data)::BaseType> form_data_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FormDataDataView>(
        in_form_data, form_data_fragment);
    fragment->form_data.Set(
        form_data_fragment.is_null() ? nullptr : form_data_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->form_data.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null form_data in PasswordGenerationUIData struct");
  }

  static bool Deserialize(::autofill::mojom::internal::PasswordGenerationUIData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::PasswordGenerationUIDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::ParsingResultDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::ParsingResultDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::ParsingResult_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::username_renderer_id(input)) in_username_renderer_id = Traits::username_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->username_renderer_id)::BaseType> username_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_username_renderer_id, username_renderer_id_fragment);
    fragment->username_renderer_id.Set(
        username_renderer_id_fragment.is_null() ? nullptr : username_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->username_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null username_renderer_id in ParsingResult struct");
    decltype(Traits::password_renderer_id(input)) in_password_renderer_id = Traits::password_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->password_renderer_id)::BaseType> password_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_password_renderer_id, password_renderer_id_fragment);
    fragment->password_renderer_id.Set(
        password_renderer_id_fragment.is_null() ? nullptr : password_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->password_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null password_renderer_id in ParsingResult struct");
    decltype(Traits::new_password_renderer_id(input)) in_new_password_renderer_id = Traits::new_password_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->new_password_renderer_id)::BaseType> new_password_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_new_password_renderer_id, new_password_renderer_id_fragment);
    fragment->new_password_renderer_id.Set(
        new_password_renderer_id_fragment.is_null() ? nullptr : new_password_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->new_password_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null new_password_renderer_id in ParsingResult struct");
    decltype(Traits::confirm_password_renderer_id(input)) in_confirm_password_renderer_id = Traits::confirm_password_renderer_id(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->confirm_password_renderer_id)::BaseType> confirm_password_renderer_id_fragment(
            fragment.message());
    mojo::internal::Serialize<::autofill::mojom::FieldRendererIdDataView>(
        in_confirm_password_renderer_id, confirm_password_renderer_id_fragment);
    fragment->confirm_password_renderer_id.Set(
        confirm_password_renderer_id_fragment.is_null() ? nullptr : confirm_password_renderer_id_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->confirm_password_renderer_id.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null confirm_password_renderer_id in ParsingResult struct");
  }

  static bool Deserialize(::autofill::mojom::internal::ParsingResult_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::ParsingResultDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::TouchToFillEligibleDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::autofill::mojom::TouchToFillEligibleDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::autofill::mojom::internal::TouchToFillEligible_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    fragment->eligible = Traits::eligible(input);
  }

  static bool Deserialize(::autofill::mojom::internal::TouchToFillEligible_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::TouchToFillEligibleDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::autofill::mojom::SectionPrefixDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = UnionTraits<::autofill::mojom::SectionPrefixDataView, UserType>;

  static void Serialize(MaybeConstUserType& input,
                        MessageFragment<::autofill::mojom::internal::SectionPrefix_Data>& fragment,
                        bool inlined) {
    if (CallIsNullIfExists<Traits>(input)) {
       if (inlined)
        fragment->set_null();
      return;
    }

    if (!inlined)
      fragment.Allocate();

    // TODO(azani): Handle unknown and objects.
    // Set the not-null flag.
    fragment->size = kUnionDataSize;
    fragment->tag = Traits::GetTag(input);
    switch (fragment->tag) {
      case ::autofill::mojom::SectionPrefixDataView::Tag::kDefaultPrefix: {
        decltype(Traits::default_prefix(input))
            in_default_prefix = Traits::default_prefix(input);
        fragment->data.f_default_prefix = in_default_prefix;
        break;
      }
      case ::autofill::mojom::SectionPrefixDataView::Tag::kAutocompleteSectionPrefix: {
        decltype(Traits::autocomplete_section_prefix(input))
            in_autocomplete_section_prefix = Traits::autocomplete_section_prefix(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_autocomplete_section_prefix)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::autofill::mojom::SectionAutocompleteDataView>(
            in_autocomplete_section_prefix, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null autocomplete_section_prefix in SectionPrefix union");
        fragment->data.f_autocomplete_section_prefix.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::autofill::mojom::SectionPrefixDataView::Tag::kFromFieldPrefix: {
        decltype(Traits::from_field_prefix(input))
            in_from_field_prefix = Traits::from_field_prefix(input);
        mojo::internal::MessageFragment<
            typename decltype(fragment->data.f_from_field_prefix)::BaseType>
            value_fragment(fragment.message());
        mojo::internal::Serialize<::autofill::mojom::SectionFieldIdentifierDataView>(
            in_from_field_prefix, value_fragment);
        MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
            value_fragment.is_null(),
            mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
            "null from_field_prefix in SectionPrefix union");
        fragment->data.f_from_field_prefix.Set(
            value_fragment.is_null() ? nullptr : value_fragment.data());
        break;
      }
      case ::autofill::mojom::SectionPrefixDataView::Tag::kCreditCardPrefix: {
        decltype(Traits::credit_card_prefix(input))
            in_credit_card_prefix = Traits::credit_card_prefix(input);
        fragment->data.f_credit_card_prefix = in_credit_card_prefix;
        break;
      }
    }
  }

  static bool Deserialize(::autofill::mojom::internal::SectionPrefix_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input || input->is_null())
      return CallSetToNullIfExists<Traits>(output);

    ::autofill::mojom::SectionPrefixDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace autofill {
namespace mojom {

inline void FrameTokenDataView::GetTokenDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}


inline void FrameTokenWithPredecessorDataView::GetTokenDataView(
    FrameTokenDataView* output) {
  auto pointer = data_->token.Get();
  *output = FrameTokenDataView(pointer, message_);
}






inline void SelectOptionDataView::GetValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void SelectOptionDataView::GetContentDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->content.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void SectionAutocompleteDataView::GetSectionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->section.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void SectionFieldIdentifierDataView::GetFieldNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->field_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SectionFieldIdentifierDataView::GetFieldRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->field_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}


inline void SectionDataView::GetPrefixDataView(
    SectionPrefixDataView* output) {
  auto pointer = &data_->prefix;
  *output = SectionPrefixDataView(pointer, message_);
}


inline void FormFieldDataDataView::GetLabelDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->label.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetIdAttributeDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->id_attribute.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetNameAttributeDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name_attribute.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetValueDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->value.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetFormControlTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->form_control_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataDataView::GetAutocompleteAttributeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->autocomplete_attribute.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataDataView::GetPlaceholderDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->placeholder.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetCssClassesDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->css_classes.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetAriaLabelDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->aria_label.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetAriaDescriptionDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->aria_description.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetUniqueRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->unique_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}
inline void FormFieldDataDataView::GetHostFormIdDataView(
    FormRendererIdDataView* output) {
  auto pointer = data_->host_form_id.Get();
  *output = FormRendererIdDataView(pointer, message_);
}
inline void FormFieldDataDataView::GetSectionDataView(
    SectionDataView* output) {
  auto pointer = data_->section.Get();
  *output = SectionDataView(pointer, message_);
}
inline void FormFieldDataDataView::GetUserInputDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->user_input.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormFieldDataDataView::GetOptionsDataView(
    mojo::ArrayDataView<SelectOptionDataView>* output) {
  auto pointer = data_->options.Get();
  *output = mojo::ArrayDataView<SelectOptionDataView>(pointer, message_);
}
inline void FormFieldDataDataView::GetBoundsDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void FormFieldDataDataView::GetDatalistValuesDataView(
    mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output) {
  auto pointer = data_->datalist_values.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::String16DataView>(pointer, message_);
}
inline void FormFieldDataDataView::GetDatalistLabelsDataView(
    mojo::ArrayDataView<::mojo_base::mojom::String16DataView>* output) {
  auto pointer = data_->datalist_labels.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::String16DataView>(pointer, message_);
}


inline void ButtonTitleInfoDataView::GetTitleDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->title.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void FormDataDataView::GetIdAttributeDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->id_attribute.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormDataDataView::GetNameAttributeDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name_attribute.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormDataDataView::GetNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void FormDataDataView::GetButtonTitlesDataView(
    mojo::ArrayDataView<ButtonTitleInfoDataView>* output) {
  auto pointer = data_->button_titles.Get();
  *output = mojo::ArrayDataView<ButtonTitleInfoDataView>(pointer, message_);
}
inline void FormDataDataView::GetActionDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->action.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void FormDataDataView::GetUniqueRendererIdDataView(
    FormRendererIdDataView* output) {
  auto pointer = data_->unique_renderer_id.Get();
  *output = FormRendererIdDataView(pointer, message_);
}
inline void FormDataDataView::GetChildFramesDataView(
    mojo::ArrayDataView<FrameTokenWithPredecessorDataView>* output) {
  auto pointer = data_->child_frames.Get();
  *output = mojo::ArrayDataView<FrameTokenWithPredecessorDataView>(pointer, message_);
}
inline void FormDataDataView::GetFieldsDataView(
    mojo::ArrayDataView<FormFieldDataDataView>* output) {
  auto pointer = data_->fields.Get();
  *output = mojo::ArrayDataView<FormFieldDataDataView>(pointer, message_);
}
inline void FormDataDataView::GetUsernamePredictionsDataView(
    mojo::ArrayDataView<FieldRendererIdDataView>* output) {
  auto pointer = data_->username_predictions.Get();
  *output = mojo::ArrayDataView<FieldRendererIdDataView>(pointer, message_);
}


inline void FormFieldDataPredictionsDataView::GetHostFormSignatureDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->host_form_signature.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataPredictionsDataView::GetSignatureDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->signature.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataPredictionsDataView::GetHeuristicTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->heuristic_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataPredictionsDataView::GetServerTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->server_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataPredictionsDataView::GetOverallTypeDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->overall_type.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataPredictionsDataView::GetParseableNameDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->parseable_name.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormFieldDataPredictionsDataView::GetSectionDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->section.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void FormDataPredictionsDataView::GetDataDataView(
    FormDataDataView* output) {
  auto pointer = data_->data.Get();
  *output = FormDataDataView(pointer, message_);
}
inline void FormDataPredictionsDataView::GetSignatureDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->signature.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void FormDataPredictionsDataView::GetFieldsDataView(
    mojo::ArrayDataView<FormFieldDataPredictionsDataView>* output) {
  auto pointer = data_->fields.Get();
  *output = mojo::ArrayDataView<FormFieldDataPredictionsDataView>(pointer, message_);
}


inline void PasswordAndMetadataDataView::GetUsernameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->username.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void PasswordAndMetadataDataView::GetPasswordDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->password.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void PasswordAndMetadataDataView::GetRealmDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->realm.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void PasswordFormFillDataDataView::GetFormRendererIdDataView(
    FormRendererIdDataView* output) {
  auto pointer = data_->form_renderer_id.Get();
  *output = FormRendererIdDataView(pointer, message_);
}
inline void PasswordFormFillDataDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PasswordFormFillDataDataView::GetActionDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->action.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}
inline void PasswordFormFillDataDataView::GetUsernameFieldDataView(
    FormFieldDataDataView* output) {
  auto pointer = data_->username_field.Get();
  *output = FormFieldDataDataView(pointer, message_);
}
inline void PasswordFormFillDataDataView::GetPasswordFieldDataView(
    FormFieldDataDataView* output) {
  auto pointer = data_->password_field.Get();
  *output = FormFieldDataDataView(pointer, message_);
}
inline void PasswordFormFillDataDataView::GetPreferredRealmDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->preferred_realm.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void PasswordFormFillDataDataView::GetAdditionalLoginsDataView(
    mojo::ArrayDataView<PasswordAndMetadataDataView>* output) {
  auto pointer = data_->additional_logins.Get();
  *output = mojo::ArrayDataView<PasswordAndMetadataDataView>(pointer, message_);
}


inline void PasswordFormGenerationDataDataView::GetNewPasswordRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->new_password_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}
inline void PasswordFormGenerationDataDataView::GetConfirmationPasswordRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->confirmation_password_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}


inline void PasswordGenerationUIDataDataView::GetBoundsDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->bounds.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}
inline void PasswordGenerationUIDataDataView::GetGenerationElementDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->generation_element.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void PasswordGenerationUIDataDataView::GetGenerationElementIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->generation_element_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}
inline void PasswordGenerationUIDataDataView::GetFormDataDataView(
    FormDataDataView* output) {
  auto pointer = data_->form_data.Get();
  *output = FormDataDataView(pointer, message_);
}


inline void ParsingResultDataView::GetUsernameRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->username_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}
inline void ParsingResultDataView::GetPasswordRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->password_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}
inline void ParsingResultDataView::GetNewPasswordRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->new_password_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}
inline void ParsingResultDataView::GetConfirmPasswordRendererIdDataView(
    FieldRendererIdDataView* output) {
  auto pointer = data_->confirm_password_renderer_id.Get();
  *output = FieldRendererIdDataView(pointer, message_);
}




inline void SectionPrefixDataView::GetAutocompleteSectionPrefixDataView(
    SectionAutocompleteDataView* output) const {
  CHECK(is_autocomplete_section_prefix());
  *output = SectionAutocompleteDataView(data_->data.f_autocomplete_section_prefix.Get(), message_);
}
inline void SectionPrefixDataView::GetFromFieldPrefixDataView(
    SectionFieldIdentifierDataView* output) const {
  CHECK(is_from_field_prefix());
  *output = SectionFieldIdentifierDataView(data_->data.f_from_field_prefix.Get(), message_);
}


}  // namespace mojom
}  // namespace autofill

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::SubmissionIndicatorEvent> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::SubmissionIndicatorEvent value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::SubmissionSource> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::SubmissionSource value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::FocusedFieldType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::FocusedFieldType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::ButtonTitleType> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::ButtonTitleType value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::SubmissionReadinessState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::SubmissionReadinessState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::AutofillState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::AutofillState value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::RendererFormDataAction> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::RendererFormDataAction value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::FormFieldData_CheckStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::FormFieldData_CheckStatus value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::FormFieldData_RoleAttribute> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::FormFieldData_RoleAttribute value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::autofill::mojom::FormFieldData_LabelSource> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::autofill::mojom::FormFieldData_LabelSource value);
};

} // namespace perfetto

#endif  // COMPONENTS_AUTOFILL_CORE_COMMON_MOJOM_AUTOFILL_TYPES_MOJOM_SHARED_H_