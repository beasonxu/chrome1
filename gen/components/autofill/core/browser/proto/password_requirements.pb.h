// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: password_requirements.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_password_5frequirements_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_password_5frequirements_2eproto {
  static const uint32_t offsets[];
};
namespace autofill {
class DomainSuggestions;
struct DomainSuggestionsDefaultTypeInternal;
extern DomainSuggestionsDefaultTypeInternal _DomainSuggestions_default_instance_;
class PasswordRequirementsSpec;
struct PasswordRequirementsSpecDefaultTypeInternal;
extern PasswordRequirementsSpecDefaultTypeInternal _PasswordRequirementsSpec_default_instance_;
class PasswordRequirementsSpec_CharacterClass;
struct PasswordRequirementsSpec_CharacterClassDefaultTypeInternal;
extern PasswordRequirementsSpec_CharacterClassDefaultTypeInternal _PasswordRequirementsSpec_CharacterClass_default_instance_;
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill::DomainSuggestions* Arena::CreateMaybeMessage<::autofill::DomainSuggestions>(Arena*);
template<> ::autofill::PasswordRequirementsSpec* Arena::CreateMaybeMessage<::autofill::PasswordRequirementsSpec>(Arena*);
template<> ::autofill::PasswordRequirementsSpec_CharacterClass* Arena::CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill {

// ===================================================================

class PasswordRequirementsSpec_CharacterClass final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.PasswordRequirementsSpec.CharacterClass) */ {
 public:
  inline PasswordRequirementsSpec_CharacterClass() : PasswordRequirementsSpec_CharacterClass(nullptr) {}
  ~PasswordRequirementsSpec_CharacterClass() override;
  explicit PROTOBUF_CONSTEXPR PasswordRequirementsSpec_CharacterClass(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordRequirementsSpec_CharacterClass(const PasswordRequirementsSpec_CharacterClass& from);
  PasswordRequirementsSpec_CharacterClass(PasswordRequirementsSpec_CharacterClass&& from) noexcept
    : PasswordRequirementsSpec_CharacterClass() {
    *this = ::std::move(from);
  }

  inline PasswordRequirementsSpec_CharacterClass& operator=(const PasswordRequirementsSpec_CharacterClass& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordRequirementsSpec_CharacterClass& operator=(PasswordRequirementsSpec_CharacterClass&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordRequirementsSpec_CharacterClass& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordRequirementsSpec_CharacterClass* internal_default_instance() {
    return reinterpret_cast<const PasswordRequirementsSpec_CharacterClass*>(
               &_PasswordRequirementsSpec_CharacterClass_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PasswordRequirementsSpec_CharacterClass& a, PasswordRequirementsSpec_CharacterClass& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordRequirementsSpec_CharacterClass* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordRequirementsSpec_CharacterClass* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordRequirementsSpec_CharacterClass* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordRequirementsSpec_CharacterClass>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordRequirementsSpec_CharacterClass& from);
  void MergeFrom(const PasswordRequirementsSpec_CharacterClass& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordRequirementsSpec_CharacterClass* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.PasswordRequirementsSpec.CharacterClass";
  }
  protected:
  explicit PasswordRequirementsSpec_CharacterClass(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCharacterSetFieldNumber = 1,
    kMinFieldNumber = 2,
    kMaxFieldNumber = 3,
  };
  // optional string character_set = 1;
  bool has_character_set() const;
  private:
  bool _internal_has_character_set() const;
  public:
  void clear_character_set();
  const std::string& character_set() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_character_set(ArgT0&& arg0, ArgT... args);
  std::string* mutable_character_set();
  PROTOBUF_NODISCARD std::string* release_character_set();
  void set_allocated_character_set(std::string* character_set);
  private:
  const std::string& _internal_character_set() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_character_set(const std::string& value);
  std::string* _internal_mutable_character_set();
  public:

  // optional uint32 min = 2;
  bool has_min() const;
  private:
  bool _internal_has_min() const;
  public:
  void clear_min();
  uint32_t min() const;
  void set_min(uint32_t value);
  private:
  uint32_t _internal_min() const;
  void _internal_set_min(uint32_t value);
  public:

  // optional uint32 max = 3;
  bool has_max() const;
  private:
  bool _internal_has_max() const;
  public:
  void clear_max();
  uint32_t max() const;
  void set_max(uint32_t value);
  private:
  uint32_t _internal_max() const;
  void _internal_set_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.PasswordRequirementsSpec.CharacterClass)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr character_set_;
  uint32_t min_;
  uint32_t max_;
  friend struct ::TableStruct_password_5frequirements_2eproto;
};
// -------------------------------------------------------------------

class PasswordRequirementsSpec final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.PasswordRequirementsSpec) */ {
 public:
  inline PasswordRequirementsSpec() : PasswordRequirementsSpec(nullptr) {}
  ~PasswordRequirementsSpec() override;
  explicit PROTOBUF_CONSTEXPR PasswordRequirementsSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PasswordRequirementsSpec(const PasswordRequirementsSpec& from);
  PasswordRequirementsSpec(PasswordRequirementsSpec&& from) noexcept
    : PasswordRequirementsSpec() {
    *this = ::std::move(from);
  }

  inline PasswordRequirementsSpec& operator=(const PasswordRequirementsSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline PasswordRequirementsSpec& operator=(PasswordRequirementsSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PasswordRequirementsSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const PasswordRequirementsSpec* internal_default_instance() {
    return reinterpret_cast<const PasswordRequirementsSpec*>(
               &_PasswordRequirementsSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PasswordRequirementsSpec& a, PasswordRequirementsSpec& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(PasswordRequirementsSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PasswordRequirementsSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PasswordRequirementsSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PasswordRequirementsSpec>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PasswordRequirementsSpec& from);
  void MergeFrom(const PasswordRequirementsSpec& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PasswordRequirementsSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.PasswordRequirementsSpec";
  }
  protected:
  explicit PasswordRequirementsSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef PasswordRequirementsSpec_CharacterClass CharacterClass;

  // accessors -------------------------------------------------------

  enum : int {
    kLowerCaseFieldNumber = 6,
    kUpperCaseFieldNumber = 7,
    kAlphabeticFieldNumber = 8,
    kNumericFieldNumber = 9,
    kSymbolsFieldNumber = 10,
    kPriorityFieldNumber = 1,
    kSpecVersionFieldNumber = 2,
    kMinLengthFieldNumber = 4,
    kMaxLengthFieldNumber = 5,
  };
  // optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
  bool has_lower_case() const;
  private:
  bool _internal_has_lower_case() const;
  public:
  void clear_lower_case();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& lower_case() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec_CharacterClass* release_lower_case();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_lower_case();
  void set_allocated_lower_case(::autofill::PasswordRequirementsSpec_CharacterClass* lower_case);
  private:
  const ::autofill::PasswordRequirementsSpec_CharacterClass& _internal_lower_case() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* _internal_mutable_lower_case();
  public:
  void unsafe_arena_set_allocated_lower_case(
      ::autofill::PasswordRequirementsSpec_CharacterClass* lower_case);
  ::autofill::PasswordRequirementsSpec_CharacterClass* unsafe_arena_release_lower_case();

  // optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
  bool has_upper_case() const;
  private:
  bool _internal_has_upper_case() const;
  public:
  void clear_upper_case();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& upper_case() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec_CharacterClass* release_upper_case();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_upper_case();
  void set_allocated_upper_case(::autofill::PasswordRequirementsSpec_CharacterClass* upper_case);
  private:
  const ::autofill::PasswordRequirementsSpec_CharacterClass& _internal_upper_case() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* _internal_mutable_upper_case();
  public:
  void unsafe_arena_set_allocated_upper_case(
      ::autofill::PasswordRequirementsSpec_CharacterClass* upper_case);
  ::autofill::PasswordRequirementsSpec_CharacterClass* unsafe_arena_release_upper_case();

  // optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
  bool has_alphabetic() const;
  private:
  bool _internal_has_alphabetic() const;
  public:
  void clear_alphabetic();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& alphabetic() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec_CharacterClass* release_alphabetic();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_alphabetic();
  void set_allocated_alphabetic(::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic);
  private:
  const ::autofill::PasswordRequirementsSpec_CharacterClass& _internal_alphabetic() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* _internal_mutable_alphabetic();
  public:
  void unsafe_arena_set_allocated_alphabetic(
      ::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic);
  ::autofill::PasswordRequirementsSpec_CharacterClass* unsafe_arena_release_alphabetic();

  // optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
  bool has_numeric() const;
  private:
  bool _internal_has_numeric() const;
  public:
  void clear_numeric();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& numeric() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec_CharacterClass* release_numeric();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_numeric();
  void set_allocated_numeric(::autofill::PasswordRequirementsSpec_CharacterClass* numeric);
  private:
  const ::autofill::PasswordRequirementsSpec_CharacterClass& _internal_numeric() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* _internal_mutable_numeric();
  public:
  void unsafe_arena_set_allocated_numeric(
      ::autofill::PasswordRequirementsSpec_CharacterClass* numeric);
  ::autofill::PasswordRequirementsSpec_CharacterClass* unsafe_arena_release_numeric();

  // optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
  bool has_symbols() const;
  private:
  bool _internal_has_symbols() const;
  public:
  void clear_symbols();
  const ::autofill::PasswordRequirementsSpec_CharacterClass& symbols() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec_CharacterClass* release_symbols();
  ::autofill::PasswordRequirementsSpec_CharacterClass* mutable_symbols();
  void set_allocated_symbols(::autofill::PasswordRequirementsSpec_CharacterClass* symbols);
  private:
  const ::autofill::PasswordRequirementsSpec_CharacterClass& _internal_symbols() const;
  ::autofill::PasswordRequirementsSpec_CharacterClass* _internal_mutable_symbols();
  public:
  void unsafe_arena_set_allocated_symbols(
      ::autofill::PasswordRequirementsSpec_CharacterClass* symbols);
  ::autofill::PasswordRequirementsSpec_CharacterClass* unsafe_arena_release_symbols();

  // optional uint32 priority = 1;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  uint32_t priority() const;
  void set_priority(uint32_t value);
  private:
  uint32_t _internal_priority() const;
  void _internal_set_priority(uint32_t value);
  public:

  // optional uint32 spec_version = 2;
  bool has_spec_version() const;
  private:
  bool _internal_has_spec_version() const;
  public:
  void clear_spec_version();
  uint32_t spec_version() const;
  void set_spec_version(uint32_t value);
  private:
  uint32_t _internal_spec_version() const;
  void _internal_set_spec_version(uint32_t value);
  public:

  // optional uint32 min_length = 4;
  bool has_min_length() const;
  private:
  bool _internal_has_min_length() const;
  public:
  void clear_min_length();
  uint32_t min_length() const;
  void set_min_length(uint32_t value);
  private:
  uint32_t _internal_min_length() const;
  void _internal_set_min_length(uint32_t value);
  public:

  // optional uint32 max_length = 5;
  bool has_max_length() const;
  private:
  bool _internal_has_max_length() const;
  public:
  void clear_max_length();
  uint32_t max_length() const;
  void set_max_length(uint32_t value);
  private:
  uint32_t _internal_max_length() const;
  void _internal_set_max_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.PasswordRequirementsSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* lower_case_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* upper_case_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* numeric_;
  ::autofill::PasswordRequirementsSpec_CharacterClass* symbols_;
  uint32_t priority_;
  uint32_t spec_version_;
  uint32_t min_length_;
  uint32_t max_length_;
  friend struct ::TableStruct_password_5frequirements_2eproto;
};
// -------------------------------------------------------------------

class DomainSuggestions final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.DomainSuggestions) */ {
 public:
  inline DomainSuggestions() : DomainSuggestions(nullptr) {}
  ~DomainSuggestions() override;
  explicit PROTOBUF_CONSTEXPR DomainSuggestions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DomainSuggestions(const DomainSuggestions& from);
  DomainSuggestions(DomainSuggestions&& from) noexcept
    : DomainSuggestions() {
    *this = ::std::move(from);
  }

  inline DomainSuggestions& operator=(const DomainSuggestions& from) {
    CopyFrom(from);
    return *this;
  }
  inline DomainSuggestions& operator=(DomainSuggestions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DomainSuggestions& default_instance() {
    return *internal_default_instance();
  }
  static inline const DomainSuggestions* internal_default_instance() {
    return reinterpret_cast<const DomainSuggestions*>(
               &_DomainSuggestions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DomainSuggestions& a, DomainSuggestions& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DomainSuggestions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DomainSuggestions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DomainSuggestions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DomainSuggestions>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DomainSuggestions& from);
  void MergeFrom(const DomainSuggestions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DomainSuggestions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.DomainSuggestions";
  }
  protected:
  explicit DomainSuggestions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPasswordRequirementsFieldNumber = 1,
  };
  // optional .autofill.PasswordRequirementsSpec password_requirements = 1;
  bool has_password_requirements() const;
  private:
  bool _internal_has_password_requirements() const;
  public:
  void clear_password_requirements();
  const ::autofill::PasswordRequirementsSpec& password_requirements() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec* release_password_requirements();
  ::autofill::PasswordRequirementsSpec* mutable_password_requirements();
  void set_allocated_password_requirements(::autofill::PasswordRequirementsSpec* password_requirements);
  private:
  const ::autofill::PasswordRequirementsSpec& _internal_password_requirements() const;
  ::autofill::PasswordRequirementsSpec* _internal_mutable_password_requirements();
  public:
  void unsafe_arena_set_allocated_password_requirements(
      ::autofill::PasswordRequirementsSpec* password_requirements);
  ::autofill::PasswordRequirementsSpec* unsafe_arena_release_password_requirements();

  // @@protoc_insertion_point(class_scope:autofill.DomainSuggestions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill::PasswordRequirementsSpec* password_requirements_;
  friend struct ::TableStruct_password_5frequirements_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PasswordRequirementsSpec_CharacterClass

// optional string character_set = 1;
inline bool PasswordRequirementsSpec_CharacterClass::_internal_has_character_set() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec_CharacterClass::has_character_set() const {
  return _internal_has_character_set();
}
inline void PasswordRequirementsSpec_CharacterClass::clear_character_set() {
  character_set_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PasswordRequirementsSpec_CharacterClass::character_set() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
  return _internal_character_set();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PasswordRequirementsSpec_CharacterClass::set_character_set(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 character_set_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}
inline std::string* PasswordRequirementsSpec_CharacterClass::mutable_character_set() {
  std::string* _s = _internal_mutable_character_set();
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
  return _s;
}
inline const std::string& PasswordRequirementsSpec_CharacterClass::_internal_character_set() const {
  return character_set_.Get();
}
inline void PasswordRequirementsSpec_CharacterClass::_internal_set_character_set(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  character_set_.Set(value, GetArenaForAllocation());
}
inline std::string* PasswordRequirementsSpec_CharacterClass::_internal_mutable_character_set() {
  _has_bits_[0] |= 0x00000001u;
  return character_set_.Mutable(GetArenaForAllocation());
}
inline std::string* PasswordRequirementsSpec_CharacterClass::release_character_set() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
  if (!_internal_has_character_set()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = character_set_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (character_set_.IsDefault()) {
    character_set_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PasswordRequirementsSpec_CharacterClass::set_allocated_character_set(std::string* character_set) {
  if (character_set != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  character_set_.SetAllocated(character_set, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (character_set_.IsDefault()) {
    character_set_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.CharacterClass.character_set)
}

// optional uint32 min = 2;
inline bool PasswordRequirementsSpec_CharacterClass::_internal_has_min() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec_CharacterClass::has_min() const {
  return _internal_has_min();
}
inline void PasswordRequirementsSpec_CharacterClass::clear_min() {
  min_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PasswordRequirementsSpec_CharacterClass::_internal_min() const {
  return min_;
}
inline uint32_t PasswordRequirementsSpec_CharacterClass::min() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.CharacterClass.min)
  return _internal_min();
}
inline void PasswordRequirementsSpec_CharacterClass::_internal_set_min(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  min_ = value;
}
inline void PasswordRequirementsSpec_CharacterClass::set_min(uint32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.CharacterClass.min)
}

// optional uint32 max = 3;
inline bool PasswordRequirementsSpec_CharacterClass::_internal_has_max() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec_CharacterClass::has_max() const {
  return _internal_has_max();
}
inline void PasswordRequirementsSpec_CharacterClass::clear_max() {
  max_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PasswordRequirementsSpec_CharacterClass::_internal_max() const {
  return max_;
}
inline uint32_t PasswordRequirementsSpec_CharacterClass::max() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.CharacterClass.max)
  return _internal_max();
}
inline void PasswordRequirementsSpec_CharacterClass::_internal_set_max(uint32_t value) {
  _has_bits_[0] |= 0x00000004u;
  max_ = value;
}
inline void PasswordRequirementsSpec_CharacterClass::set_max(uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.CharacterClass.max)
}

// -------------------------------------------------------------------

// PasswordRequirementsSpec

// optional uint32 priority = 1;
inline bool PasswordRequirementsSpec::_internal_has_priority() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec::has_priority() const {
  return _internal_has_priority();
}
inline void PasswordRequirementsSpec::clear_priority() {
  priority_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline uint32_t PasswordRequirementsSpec::_internal_priority() const {
  return priority_;
}
inline uint32_t PasswordRequirementsSpec::priority() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.priority)
  return _internal_priority();
}
inline void PasswordRequirementsSpec::_internal_set_priority(uint32_t value) {
  _has_bits_[0] |= 0x00000020u;
  priority_ = value;
}
inline void PasswordRequirementsSpec::set_priority(uint32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.priority)
}

// optional uint32 spec_version = 2;
inline bool PasswordRequirementsSpec::_internal_has_spec_version() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec::has_spec_version() const {
  return _internal_has_spec_version();
}
inline void PasswordRequirementsSpec::clear_spec_version() {
  spec_version_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline uint32_t PasswordRequirementsSpec::_internal_spec_version() const {
  return spec_version_;
}
inline uint32_t PasswordRequirementsSpec::spec_version() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.spec_version)
  return _internal_spec_version();
}
inline void PasswordRequirementsSpec::_internal_set_spec_version(uint32_t value) {
  _has_bits_[0] |= 0x00000040u;
  spec_version_ = value;
}
inline void PasswordRequirementsSpec::set_spec_version(uint32_t value) {
  _internal_set_spec_version(value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.spec_version)
}

// optional uint32 min_length = 4;
inline bool PasswordRequirementsSpec::_internal_has_min_length() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec::has_min_length() const {
  return _internal_has_min_length();
}
inline void PasswordRequirementsSpec::clear_min_length() {
  min_length_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline uint32_t PasswordRequirementsSpec::_internal_min_length() const {
  return min_length_;
}
inline uint32_t PasswordRequirementsSpec::min_length() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.min_length)
  return _internal_min_length();
}
inline void PasswordRequirementsSpec::_internal_set_min_length(uint32_t value) {
  _has_bits_[0] |= 0x00000080u;
  min_length_ = value;
}
inline void PasswordRequirementsSpec::set_min_length(uint32_t value) {
  _internal_set_min_length(value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.min_length)
}

// optional uint32 max_length = 5;
inline bool PasswordRequirementsSpec::_internal_has_max_length() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PasswordRequirementsSpec::has_max_length() const {
  return _internal_has_max_length();
}
inline void PasswordRequirementsSpec::clear_max_length() {
  max_length_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline uint32_t PasswordRequirementsSpec::_internal_max_length() const {
  return max_length_;
}
inline uint32_t PasswordRequirementsSpec::max_length() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.max_length)
  return _internal_max_length();
}
inline void PasswordRequirementsSpec::_internal_set_max_length(uint32_t value) {
  _has_bits_[0] |= 0x00000100u;
  max_length_ = value;
}
inline void PasswordRequirementsSpec::set_max_length(uint32_t value) {
  _internal_set_max_length(value);
  // @@protoc_insertion_point(field_set:autofill.PasswordRequirementsSpec.max_length)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass lower_case = 6;
inline bool PasswordRequirementsSpec::_internal_has_lower_case() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || lower_case_ != nullptr);
  return value;
}
inline bool PasswordRequirementsSpec::has_lower_case() const {
  return _internal_has_lower_case();
}
inline void PasswordRequirementsSpec::clear_lower_case() {
  if (lower_case_ != nullptr) lower_case_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::_internal_lower_case() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = lower_case_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass&>(
      ::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::lower_case() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.lower_case)
  return _internal_lower_case();
}
inline void PasswordRequirementsSpec::unsafe_arena_set_allocated_lower_case(
    ::autofill::PasswordRequirementsSpec_CharacterClass* lower_case) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lower_case_);
  }
  lower_case_ = lower_case;
  if (lower_case) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.PasswordRequirementsSpec.lower_case)
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_lower_case() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = lower_case_;
  lower_case_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::unsafe_arena_release_lower_case() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.lower_case)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = lower_case_;
  lower_case_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::_internal_mutable_lower_case() {
  _has_bits_[0] |= 0x00000001u;
  if (lower_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaForAllocation());
    lower_case_ = p;
  }
  return lower_case_;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_lower_case() {
  ::autofill::PasswordRequirementsSpec_CharacterClass* _msg = _internal_mutable_lower_case();
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.lower_case)
  return _msg;
}
inline void PasswordRequirementsSpec::set_allocated_lower_case(::autofill::PasswordRequirementsSpec_CharacterClass* lower_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete lower_case_;
  }
  if (lower_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lower_case);
    if (message_arena != submessage_arena) {
      lower_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lower_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lower_case_ = lower_case;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.lower_case)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass upper_case = 7;
inline bool PasswordRequirementsSpec::_internal_has_upper_case() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || upper_case_ != nullptr);
  return value;
}
inline bool PasswordRequirementsSpec::has_upper_case() const {
  return _internal_has_upper_case();
}
inline void PasswordRequirementsSpec::clear_upper_case() {
  if (upper_case_ != nullptr) upper_case_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::_internal_upper_case() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = upper_case_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass&>(
      ::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::upper_case() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.upper_case)
  return _internal_upper_case();
}
inline void PasswordRequirementsSpec::unsafe_arena_set_allocated_upper_case(
    ::autofill::PasswordRequirementsSpec_CharacterClass* upper_case) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upper_case_);
  }
  upper_case_ = upper_case;
  if (upper_case) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.PasswordRequirementsSpec.upper_case)
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_upper_case() {
  _has_bits_[0] &= ~0x00000002u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = upper_case_;
  upper_case_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::unsafe_arena_release_upper_case() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.upper_case)
  _has_bits_[0] &= ~0x00000002u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = upper_case_;
  upper_case_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::_internal_mutable_upper_case() {
  _has_bits_[0] |= 0x00000002u;
  if (upper_case_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaForAllocation());
    upper_case_ = p;
  }
  return upper_case_;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_upper_case() {
  ::autofill::PasswordRequirementsSpec_CharacterClass* _msg = _internal_mutable_upper_case();
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.upper_case)
  return _msg;
}
inline void PasswordRequirementsSpec::set_allocated_upper_case(::autofill::PasswordRequirementsSpec_CharacterClass* upper_case) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete upper_case_;
  }
  if (upper_case) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(upper_case);
    if (message_arena != submessage_arena) {
      upper_case = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upper_case, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  upper_case_ = upper_case;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.upper_case)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass alphabetic = 8;
inline bool PasswordRequirementsSpec::_internal_has_alphabetic() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || alphabetic_ != nullptr);
  return value;
}
inline bool PasswordRequirementsSpec::has_alphabetic() const {
  return _internal_has_alphabetic();
}
inline void PasswordRequirementsSpec::clear_alphabetic() {
  if (alphabetic_ != nullptr) alphabetic_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::_internal_alphabetic() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = alphabetic_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass&>(
      ::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::alphabetic() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.alphabetic)
  return _internal_alphabetic();
}
inline void PasswordRequirementsSpec::unsafe_arena_set_allocated_alphabetic(
    ::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alphabetic_);
  }
  alphabetic_ = alphabetic;
  if (alphabetic) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.PasswordRequirementsSpec.alphabetic)
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_alphabetic() {
  _has_bits_[0] &= ~0x00000004u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = alphabetic_;
  alphabetic_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::unsafe_arena_release_alphabetic() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.alphabetic)
  _has_bits_[0] &= ~0x00000004u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = alphabetic_;
  alphabetic_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::_internal_mutable_alphabetic() {
  _has_bits_[0] |= 0x00000004u;
  if (alphabetic_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaForAllocation());
    alphabetic_ = p;
  }
  return alphabetic_;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_alphabetic() {
  ::autofill::PasswordRequirementsSpec_CharacterClass* _msg = _internal_mutable_alphabetic();
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.alphabetic)
  return _msg;
}
inline void PasswordRequirementsSpec::set_allocated_alphabetic(::autofill::PasswordRequirementsSpec_CharacterClass* alphabetic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete alphabetic_;
  }
  if (alphabetic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(alphabetic);
    if (message_arena != submessage_arena) {
      alphabetic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alphabetic, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  alphabetic_ = alphabetic;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.alphabetic)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass numeric = 9;
inline bool PasswordRequirementsSpec::_internal_has_numeric() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || numeric_ != nullptr);
  return value;
}
inline bool PasswordRequirementsSpec::has_numeric() const {
  return _internal_has_numeric();
}
inline void PasswordRequirementsSpec::clear_numeric() {
  if (numeric_ != nullptr) numeric_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::_internal_numeric() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = numeric_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass&>(
      ::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::numeric() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.numeric)
  return _internal_numeric();
}
inline void PasswordRequirementsSpec::unsafe_arena_set_allocated_numeric(
    ::autofill::PasswordRequirementsSpec_CharacterClass* numeric) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numeric_);
  }
  numeric_ = numeric;
  if (numeric) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.PasswordRequirementsSpec.numeric)
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_numeric() {
  _has_bits_[0] &= ~0x00000008u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = numeric_;
  numeric_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::unsafe_arena_release_numeric() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.numeric)
  _has_bits_[0] &= ~0x00000008u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = numeric_;
  numeric_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::_internal_mutable_numeric() {
  _has_bits_[0] |= 0x00000008u;
  if (numeric_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaForAllocation());
    numeric_ = p;
  }
  return numeric_;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_numeric() {
  ::autofill::PasswordRequirementsSpec_CharacterClass* _msg = _internal_mutable_numeric();
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.numeric)
  return _msg;
}
inline void PasswordRequirementsSpec::set_allocated_numeric(::autofill::PasswordRequirementsSpec_CharacterClass* numeric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete numeric_;
  }
  if (numeric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(numeric);
    if (message_arena != submessage_arena) {
      numeric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  numeric_ = numeric;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.numeric)
}

// optional .autofill.PasswordRequirementsSpec.CharacterClass symbols = 10;
inline bool PasswordRequirementsSpec::_internal_has_symbols() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || symbols_ != nullptr);
  return value;
}
inline bool PasswordRequirementsSpec::has_symbols() const {
  return _internal_has_symbols();
}
inline void PasswordRequirementsSpec::clear_symbols() {
  if (symbols_ != nullptr) symbols_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::_internal_symbols() const {
  const ::autofill::PasswordRequirementsSpec_CharacterClass* p = symbols_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec_CharacterClass&>(
      ::autofill::_PasswordRequirementsSpec_CharacterClass_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec_CharacterClass& PasswordRequirementsSpec::symbols() const {
  // @@protoc_insertion_point(field_get:autofill.PasswordRequirementsSpec.symbols)
  return _internal_symbols();
}
inline void PasswordRequirementsSpec::unsafe_arena_set_allocated_symbols(
    ::autofill::PasswordRequirementsSpec_CharacterClass* symbols) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(symbols_);
  }
  symbols_ = symbols;
  if (symbols) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.PasswordRequirementsSpec.symbols)
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::release_symbols() {
  _has_bits_[0] &= ~0x00000010u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = symbols_;
  symbols_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::unsafe_arena_release_symbols() {
  // @@protoc_insertion_point(field_release:autofill.PasswordRequirementsSpec.symbols)
  _has_bits_[0] &= ~0x00000010u;
  ::autofill::PasswordRequirementsSpec_CharacterClass* temp = symbols_;
  symbols_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::_internal_mutable_symbols() {
  _has_bits_[0] |= 0x00000010u;
  if (symbols_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec_CharacterClass>(GetArenaForAllocation());
    symbols_ = p;
  }
  return symbols_;
}
inline ::autofill::PasswordRequirementsSpec_CharacterClass* PasswordRequirementsSpec::mutable_symbols() {
  ::autofill::PasswordRequirementsSpec_CharacterClass* _msg = _internal_mutable_symbols();
  // @@protoc_insertion_point(field_mutable:autofill.PasswordRequirementsSpec.symbols)
  return _msg;
}
inline void PasswordRequirementsSpec::set_allocated_symbols(::autofill::PasswordRequirementsSpec_CharacterClass* symbols) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete symbols_;
  }
  if (symbols) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(symbols);
    if (message_arena != submessage_arena) {
      symbols = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, symbols, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  symbols_ = symbols;
  // @@protoc_insertion_point(field_set_allocated:autofill.PasswordRequirementsSpec.symbols)
}

// -------------------------------------------------------------------

// DomainSuggestions

// optional .autofill.PasswordRequirementsSpec password_requirements = 1;
inline bool DomainSuggestions::_internal_has_password_requirements() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || password_requirements_ != nullptr);
  return value;
}
inline bool DomainSuggestions::has_password_requirements() const {
  return _internal_has_password_requirements();
}
inline void DomainSuggestions::clear_password_requirements() {
  if (password_requirements_ != nullptr) password_requirements_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::autofill::PasswordRequirementsSpec& DomainSuggestions::_internal_password_requirements() const {
  const ::autofill::PasswordRequirementsSpec* p = password_requirements_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec&>(
      ::autofill::_PasswordRequirementsSpec_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec& DomainSuggestions::password_requirements() const {
  // @@protoc_insertion_point(field_get:autofill.DomainSuggestions.password_requirements)
  return _internal_password_requirements();
}
inline void DomainSuggestions::unsafe_arena_set_allocated_password_requirements(
    ::autofill::PasswordRequirementsSpec* password_requirements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_requirements_);
  }
  password_requirements_ = password_requirements;
  if (password_requirements) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.DomainSuggestions.password_requirements)
}
inline ::autofill::PasswordRequirementsSpec* DomainSuggestions::release_password_requirements() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec* temp = password_requirements_;
  password_requirements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec* DomainSuggestions::unsafe_arena_release_password_requirements() {
  // @@protoc_insertion_point(field_release:autofill.DomainSuggestions.password_requirements)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec* temp = password_requirements_;
  password_requirements_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec* DomainSuggestions::_internal_mutable_password_requirements() {
  _has_bits_[0] |= 0x00000001u;
  if (password_requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec>(GetArenaForAllocation());
    password_requirements_ = p;
  }
  return password_requirements_;
}
inline ::autofill::PasswordRequirementsSpec* DomainSuggestions::mutable_password_requirements() {
  ::autofill::PasswordRequirementsSpec* _msg = _internal_mutable_password_requirements();
  // @@protoc_insertion_point(field_mutable:autofill.DomainSuggestions.password_requirements)
  return _msg;
}
inline void DomainSuggestions::set_allocated_password_requirements(::autofill::PasswordRequirementsSpec* password_requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete password_requirements_;
  }
  if (password_requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(password_requirements);
    if (message_arena != submessage_arena) {
      password_requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_requirements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_requirements_ = password_requirements;
  // @@protoc_insertion_point(field_set_allocated:autofill.DomainSuggestions.password_requirements)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_password_5frequirements_2eproto
