// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api_v1.proto

#include "api_v1.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace autofill {
PROTOBUF_CONSTEXPR AutofillPageResourceQueryRequest::AutofillPageResourceQueryRequest(
    ::_pbi::ConstantInitialized)
  : serialized_request_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AutofillPageResourceQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillPageResourceQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillPageResourceQueryRequestDefaultTypeInternal() {}
  union {
    AutofillPageResourceQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillPageResourceQueryRequestDefaultTypeInternal _AutofillPageResourceQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR AutofillPageQueryRequest_Form_Field::AutofillPageQueryRequest_Form_Field(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , control_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , metadata_(nullptr)
  , signature_(0u){}
struct AutofillPageQueryRequest_Form_FieldDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillPageQueryRequest_Form_FieldDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillPageQueryRequest_Form_FieldDefaultTypeInternal() {}
  union {
    AutofillPageQueryRequest_Form_Field _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillPageQueryRequest_Form_FieldDefaultTypeInternal _AutofillPageQueryRequest_Form_Field_default_instance_;
PROTOBUF_CONSTEXPR AutofillPageQueryRequest_Form::AutofillPageQueryRequest_Form(
    ::_pbi::ConstantInitialized)
  : fields_()
  , metadata_(nullptr)
  , signature_(uint64_t{0u}){}
struct AutofillPageQueryRequest_FormDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillPageQueryRequest_FormDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillPageQueryRequest_FormDefaultTypeInternal() {}
  union {
    AutofillPageQueryRequest_Form _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillPageQueryRequest_FormDefaultTypeInternal _AutofillPageQueryRequest_Form_default_instance_;
PROTOBUF_CONSTEXPR AutofillPageQueryRequest::AutofillPageQueryRequest(
    ::_pbi::ConstantInitialized)
  : forms_()
  , experiments_()
  , client_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AutofillPageQueryRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillPageQueryRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillPageQueryRequestDefaultTypeInternal() {}
  union {
    AutofillPageQueryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillPageQueryRequestDefaultTypeInternal _AutofillPageQueryRequest_default_instance_;
PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(
    ::_pbi::ConstantInitialized)
  : type_(0)
  , override_(false){}
struct AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal() {}
  union {
    AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal _AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_default_instance_;
PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion_FieldSuggestion::AutofillQueryResponse_FormSuggestion_FieldSuggestion(
    ::_pbi::ConstantInitialized)
  : predictions_()
  , password_requirements_(nullptr)
  , field_signature_(0u)
  , may_use_prefilled_placeholder_(false){}
struct AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal() {}
  union {
    AutofillQueryResponse_FormSuggestion_FieldSuggestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal _AutofillQueryResponse_FormSuggestion_FieldSuggestion_default_instance_;
PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion::AutofillQueryResponse_FormSuggestion(
    ::_pbi::ConstantInitialized)
  : field_suggestions_(){}
struct AutofillQueryResponse_FormSuggestionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillQueryResponse_FormSuggestionDefaultTypeInternal() {}
  union {
    AutofillQueryResponse_FormSuggestion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillQueryResponse_FormSuggestionDefaultTypeInternal _AutofillQueryResponse_FormSuggestion_default_instance_;
PROTOBUF_CONSTEXPR AutofillQueryResponse::AutofillQueryResponse(
    ::_pbi::ConstantInitialized)
  : form_suggestions_(){}
struct AutofillQueryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillQueryResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillQueryResponseDefaultTypeInternal() {}
  union {
    AutofillQueryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillQueryResponseDefaultTypeInternal _AutofillQueryResponse_default_instance_;
PROTOBUF_CONSTEXPR AutofillUploadRequest::AutofillUploadRequest(
    ::_pbi::ConstantInitialized)
  : upload_(nullptr){}
struct AutofillUploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AutofillUploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AutofillUploadRequestDefaultTypeInternal() {}
  union {
    AutofillUploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AutofillUploadRequestDefaultTypeInternal _AutofillUploadRequest_default_instance_;
}  // namespace autofill
namespace autofill {

// ===================================================================

class AutofillPageResourceQueryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageResourceQueryRequest>()._has_bits_);
  static void set_has_serialized_request(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillPageResourceQueryRequest::AutofillPageResourceQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillPageResourceQueryRequest)
}
AutofillPageResourceQueryRequest::AutofillPageResourceQueryRequest(const AutofillPageResourceQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  serialized_request_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serialized_request_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serialized_request()) {
    serialized_request_.Set(from._internal_serialized_request(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageResourceQueryRequest)
}

inline void AutofillPageResourceQueryRequest::SharedCtor() {
serialized_request_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serialized_request_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutofillPageResourceQueryRequest::~AutofillPageResourceQueryRequest() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageResourceQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillPageResourceQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serialized_request_.Destroy();
}

void AutofillPageResourceQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillPageResourceQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageResourceQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serialized_request_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillPageResourceQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string serialized_request = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_serialized_request();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillPageResourceQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillPageResourceQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string serialized_request = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_serialized_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillPageResourceQueryRequest)
  return target;
}

size_t AutofillPageResourceQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageResourceQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string serialized_request = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serialized_request());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageResourceQueryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillPageResourceQueryRequest*>(
      &from));
}

void AutofillPageResourceQueryRequest::MergeFrom(const AutofillPageResourceQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageResourceQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_serialized_request()) {
    _internal_set_serialized_request(from._internal_serialized_request());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillPageResourceQueryRequest::CopyFrom(const AutofillPageResourceQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageResourceQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageResourceQueryRequest::IsInitialized() const {
  return true;
}

void AutofillPageResourceQueryRequest::InternalSwap(AutofillPageResourceQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &serialized_request_, lhs_arena,
      &other->serialized_request_, rhs_arena
  );
}

std::string AutofillPageResourceQueryRequest::GetTypeName() const {
  return "autofill.AutofillPageResourceQueryRequest";
}


// ===================================================================

class AutofillPageQueryRequest_Form_Field::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageQueryRequest_Form_Field>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_control_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedFieldMetadata& metadata(const AutofillPageQueryRequest_Form_Field* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::autofill::AutofillRandomizedFieldMetadata&
AutofillPageQueryRequest_Form_Field::_Internal::metadata(const AutofillPageQueryRequest_Form_Field* msg) {
  return *msg->metadata_;
}
void AutofillPageQueryRequest_Form_Field::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
AutofillPageQueryRequest_Form_Field::AutofillPageQueryRequest_Form_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillPageQueryRequest.Form.Field)
}
AutofillPageQueryRequest_Form_Field::AutofillPageQueryRequest_Form_Field(const AutofillPageQueryRequest_Form_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_name()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  control_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    control_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_control_type()) {
    control_type_.Set(from._internal_control_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::autofill::AutofillRandomizedFieldMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageQueryRequest.Form.Field)
}

inline void AutofillPageQueryRequest_Form_Field::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
control_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  control_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(signature_));
}

AutofillPageQueryRequest_Form_Field::~AutofillPageQueryRequest_Form_Field() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageQueryRequest.Form.Field)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillPageQueryRequest_Form_Field::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  control_type_.Destroy();
  if (this != internal_default_instance()) delete metadata_;
}

void AutofillPageQueryRequest_Form_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillPageQueryRequest_Form_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageQueryRequest.Form.Field)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      control_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(metadata_ != nullptr);
      metadata_->Clear();
    }
  }
  signature_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillPageQueryRequest_Form_Field::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string control_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_control_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillPageQueryRequest_Form_Field::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillPageQueryRequest.Form.Field)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 signature = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_signature(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // optional string control_type = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_control_type(), target);
  }

  // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillPageQueryRequest.Form.Field)
  return target;
}

size_t AutofillPageQueryRequest_Form_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageQueryRequest.Form.Field)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional string control_type = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_control_type());
    }

    // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional fixed32 signature = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageQueryRequest_Form_Field::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillPageQueryRequest_Form_Field*>(
      &from));
}

void AutofillPageQueryRequest_Form_Field::MergeFrom(const AutofillPageQueryRequest_Form_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageQueryRequest.Form.Field)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_control_type(from._internal_control_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_metadata()->::autofill::AutofillRandomizedFieldMetadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000008u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillPageQueryRequest_Form_Field::CopyFrom(const AutofillPageQueryRequest_Form_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageQueryRequest.Form.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageQueryRequest_Form_Field::IsInitialized() const {
  return true;
}

void AutofillPageQueryRequest_Form_Field::InternalSwap(AutofillPageQueryRequest_Form_Field* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &control_type_, lhs_arena,
      &other->control_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillPageQueryRequest_Form_Field, signature_)
      + sizeof(AutofillPageQueryRequest_Form_Field::signature_)
      - PROTOBUF_FIELD_OFFSET(AutofillPageQueryRequest_Form_Field, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

std::string AutofillPageQueryRequest_Form_Field::GetTypeName() const {
  return "autofill.AutofillPageQueryRequest.Form.Field";
}


// ===================================================================

class AutofillPageQueryRequest_Form::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageQueryRequest_Form>()._has_bits_);
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::autofill::AutofillRandomizedFormMetadata& metadata(const AutofillPageQueryRequest_Form* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::AutofillRandomizedFormMetadata&
AutofillPageQueryRequest_Form::_Internal::metadata(const AutofillPageQueryRequest_Form* msg) {
  return *msg->metadata_;
}
void AutofillPageQueryRequest_Form::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillPageQueryRequest_Form::AutofillPageQueryRequest_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  fields_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillPageQueryRequest.Form)
}
AutofillPageQueryRequest_Form::AutofillPageQueryRequest_Form(const AutofillPageQueryRequest_Form& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::autofill::AutofillRandomizedFormMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  signature_ = from.signature_;
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageQueryRequest.Form)
}

inline void AutofillPageQueryRequest_Form::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&signature_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(signature_));
}

AutofillPageQueryRequest_Form::~AutofillPageQueryRequest_Form() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageQueryRequest.Form)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillPageQueryRequest_Form::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
}

void AutofillPageQueryRequest_Form::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillPageQueryRequest_Form::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageQueryRequest.Form)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  signature_ = uint64_t{0u};
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillPageQueryRequest_Form::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed64 signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_signature(&has_bits);
          signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fields(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillPageQueryRequest_Form::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillPageQueryRequest.Form)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 signature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_signature(), target);
  }

  // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fields_size()); i < n; i++) {
    const auto& repfield = this->_internal_fields(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillPageQueryRequest.Form)
  return target;
}

size_t AutofillPageQueryRequest_Form::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageQueryRequest.Form)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
  total_size += 1UL * this->_internal_fields_size();
  for (const auto& msg : this->fields_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional fixed64 signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageQueryRequest_Form::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillPageQueryRequest_Form*>(
      &from));
}

void AutofillPageQueryRequest_Form::MergeFrom(const AutofillPageQueryRequest_Form& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageQueryRequest.Form)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::autofill::AutofillRandomizedFormMetadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      signature_ = from.signature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillPageQueryRequest_Form::CopyFrom(const AutofillPageQueryRequest_Form& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageQueryRequest.Form)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageQueryRequest_Form::IsInitialized() const {
  return true;
}

void AutofillPageQueryRequest_Form::InternalSwap(AutofillPageQueryRequest_Form* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fields_.InternalSwap(&other->fields_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillPageQueryRequest_Form, signature_)
      + sizeof(AutofillPageQueryRequest_Form::signature_)
      - PROTOBUF_FIELD_OFFSET(AutofillPageQueryRequest_Form, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
}

std::string AutofillPageQueryRequest_Form::GetTypeName() const {
  return "autofill.AutofillPageQueryRequest.Form";
}


// ===================================================================

class AutofillPageQueryRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillPageQueryRequest>()._has_bits_);
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AutofillPageQueryRequest::AutofillPageQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  forms_(arena),
  experiments_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillPageQueryRequest)
}
AutofillPageQueryRequest::AutofillPageQueryRequest(const AutofillPageQueryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      forms_(from.forms_),
      experiments_(from.experiments_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  client_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    client_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_client_version()) {
    client_version_.Set(from._internal_client_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillPageQueryRequest)
}

inline void AutofillPageQueryRequest::SharedCtor() {
client_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  client_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AutofillPageQueryRequest::~AutofillPageQueryRequest() {
  // @@protoc_insertion_point(destructor:autofill.AutofillPageQueryRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillPageQueryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  client_version_.Destroy();
}

void AutofillPageQueryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillPageQueryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillPageQueryRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  forms_.Clear();
  experiments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    client_version_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillPageQueryRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string client_version = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_client_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_forms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 experiments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_experiments(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<uint8_t>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_experiments(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillPageQueryRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillPageQueryRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string client_version = 1 [deprecated = true];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_version(), target);
  }

  // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_forms_size()); i < n; i++) {
    const auto& repfield = this->_internal_forms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 experiments = 3;
  for (int i = 0, n = this->_internal_experiments_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_experiments(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillPageQueryRequest)
  return target;
}

size_t AutofillPageQueryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillPageQueryRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
  total_size += 1UL * this->_internal_forms_size();
  for (const auto& msg : this->forms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 experiments = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->experiments_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_experiments_size());
    total_size += data_size;
  }

  // optional string client_version = 1 [deprecated = true];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillPageQueryRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillPageQueryRequest*>(
      &from));
}

void AutofillPageQueryRequest::MergeFrom(const AutofillPageQueryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillPageQueryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  forms_.MergeFrom(from.forms_);
  experiments_.MergeFrom(from.experiments_);
  if (from._internal_has_client_version()) {
    _internal_set_client_version(from._internal_client_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillPageQueryRequest::CopyFrom(const AutofillPageQueryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillPageQueryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillPageQueryRequest::IsInitialized() const {
  return true;
}

void AutofillPageQueryRequest::InternalSwap(AutofillPageQueryRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  forms_.InternalSwap(&other->forms_);
  experiments_.InternalSwap(&other->experiments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &client_version_, lhs_arena,
      &other->client_version_, rhs_arena
  );
}

std::string AutofillPageQueryRequest::GetTypeName() const {
  return "autofill.AutofillPageQueryRequest";
}


// ===================================================================

class AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_override(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
}
AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&override_) -
    reinterpret_cast<char*>(&type_)) + sizeof(override_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
}

inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&override_) -
    reinterpret_cast<char*>(&type_)) + sizeof(override_));
}

AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::~AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&override_) -
        reinterpret_cast<char*>(&type_)) + sizeof(override_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool override = 2 [default = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_override(&has_bits);
          override_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional bool override = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_override(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  return target;
}

size_t AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional bool override = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction*>(
      &from));
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::MergeFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      override_ = from.override_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::CopyFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::IsInitialized() const {
  return true;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::InternalSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction, override_)
      + sizeof(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::override_)
      - PROTOBUF_FIELD_OFFSET(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::GetTypeName() const {
  return "autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction";
}


// ===================================================================

class AutofillQueryResponse_FormSuggestion_FieldSuggestion::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillQueryResponse_FormSuggestion_FieldSuggestion>()._has_bits_);
  static void set_has_field_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_may_use_prefilled_placeholder(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::autofill::PasswordRequirementsSpec& password_requirements(const AutofillQueryResponse_FormSuggestion_FieldSuggestion* msg);
  static void set_has_password_requirements(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::PasswordRequirementsSpec&
AutofillQueryResponse_FormSuggestion_FieldSuggestion::_Internal::password_requirements(const AutofillQueryResponse_FormSuggestion_FieldSuggestion* msg) {
  return *msg->password_requirements_;
}
void AutofillQueryResponse_FormSuggestion_FieldSuggestion::clear_password_requirements() {
  if (password_requirements_ != nullptr) password_requirements_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillQueryResponse_FormSuggestion_FieldSuggestion::AutofillQueryResponse_FormSuggestion_FieldSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  predictions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
}
AutofillQueryResponse_FormSuggestion_FieldSuggestion::AutofillQueryResponse_FormSuggestion_FieldSuggestion(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      predictions_(from.predictions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_password_requirements()) {
    password_requirements_ = new ::autofill::PasswordRequirementsSpec(*from.password_requirements_);
  } else {
    password_requirements_ = nullptr;
  }
  ::memcpy(&field_signature_, &from.field_signature_,
    static_cast<size_t>(reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
    reinterpret_cast<char*>(&field_signature_)) + sizeof(may_use_prefilled_placeholder_));
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
}

inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&password_requirements_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
    reinterpret_cast<char*>(&password_requirements_)) + sizeof(may_use_prefilled_placeholder_));
}

AutofillQueryResponse_FormSuggestion_FieldSuggestion::~AutofillQueryResponse_FormSuggestion_FieldSuggestion() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete password_requirements_;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  predictions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(password_requirements_ != nullptr);
    password_requirements_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&field_signature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&may_use_prefilled_placeholder_) -
        reinterpret_cast<char*>(&field_signature_)) + sizeof(may_use_prefilled_placeholder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillQueryResponse_FormSuggestion_FieldSuggestion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 field_signature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_field_signature(&has_bits);
          field_signature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_predictions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool may_use_prefilled_placeholder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_may_use_prefilled_placeholder(&has_bits);
          may_use_prefilled_placeholder_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_password_requirements(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillQueryResponse_FormSuggestion_FieldSuggestion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 field_signature = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_field_signature(), target);
  }

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_predictions_size()); i < n; i++) {
    const auto& repfield = this->_internal_predictions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool may_use_prefilled_placeholder = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_may_use_prefilled_placeholder(), target);
  }

  // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::password_requirements(this),
        _Internal::password_requirements(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  return target;
}

size_t AutofillQueryResponse_FormSuggestion_FieldSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
  total_size += 1UL * this->_internal_predictions_size();
  for (const auto& msg : this->predictions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *password_requirements_);
    }

    // optional fixed32 field_signature = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool may_use_prefilled_placeholder = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillQueryResponse_FormSuggestion_FieldSuggestion*>(
      &from));
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::MergeFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  predictions_.MergeFrom(from.predictions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_password_requirements()->::autofill::PasswordRequirementsSpec::MergeFrom(from._internal_password_requirements());
    }
    if (cached_has_bits & 0x00000002u) {
      field_signature_ = from.field_signature_;
    }
    if (cached_has_bits & 0x00000004u) {
      may_use_prefilled_placeholder_ = from.may_use_prefilled_placeholder_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::CopyFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::IsInitialized() const {
  return true;
}

void AutofillQueryResponse_FormSuggestion_FieldSuggestion::InternalSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  predictions_.InternalSwap(&other->predictions_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AutofillQueryResponse_FormSuggestion_FieldSuggestion, may_use_prefilled_placeholder_)
      + sizeof(AutofillQueryResponse_FormSuggestion_FieldSuggestion::may_use_prefilled_placeholder_)
      - PROTOBUF_FIELD_OFFSET(AutofillQueryResponse_FormSuggestion_FieldSuggestion, password_requirements_)>(
          reinterpret_cast<char*>(&password_requirements_),
          reinterpret_cast<char*>(&other->password_requirements_));
}

std::string AutofillQueryResponse_FormSuggestion_FieldSuggestion::GetTypeName() const {
  return "autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion";
}


// ===================================================================

class AutofillQueryResponse_FormSuggestion::_Internal {
 public:
};

AutofillQueryResponse_FormSuggestion::AutofillQueryResponse_FormSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  field_suggestions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillQueryResponse.FormSuggestion)
}
AutofillQueryResponse_FormSuggestion::AutofillQueryResponse_FormSuggestion(const AutofillQueryResponse_FormSuggestion& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      field_suggestions_(from.field_suggestions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse.FormSuggestion)
}

inline void AutofillQueryResponse_FormSuggestion::SharedCtor() {
}

AutofillQueryResponse_FormSuggestion::~AutofillQueryResponse_FormSuggestion() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse.FormSuggestion)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillQueryResponse_FormSuggestion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutofillQueryResponse_FormSuggestion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillQueryResponse_FormSuggestion::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse.FormSuggestion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_suggestions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillQueryResponse_FormSuggestion::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field_suggestions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillQueryResponse_FormSuggestion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillQueryResponse.FormSuggestion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_field_suggestions_size()); i < n; i++) {
    const auto& repfield = this->_internal_field_suggestions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillQueryResponse.FormSuggestion)
  return target;
}

size_t AutofillQueryResponse_FormSuggestion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse.FormSuggestion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
  total_size += 1UL * this->_internal_field_suggestions_size();
  for (const auto& msg : this->field_suggestions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse_FormSuggestion::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillQueryResponse_FormSuggestion*>(
      &from));
}

void AutofillQueryResponse_FormSuggestion::MergeFrom(const AutofillQueryResponse_FormSuggestion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse.FormSuggestion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  field_suggestions_.MergeFrom(from.field_suggestions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillQueryResponse_FormSuggestion::CopyFrom(const AutofillQueryResponse_FormSuggestion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse.FormSuggestion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse_FormSuggestion::IsInitialized() const {
  return true;
}

void AutofillQueryResponse_FormSuggestion::InternalSwap(AutofillQueryResponse_FormSuggestion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  field_suggestions_.InternalSwap(&other->field_suggestions_);
}

std::string AutofillQueryResponse_FormSuggestion::GetTypeName() const {
  return "autofill.AutofillQueryResponse.FormSuggestion";
}


// ===================================================================

class AutofillQueryResponse::_Internal {
 public:
};

AutofillQueryResponse::AutofillQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  form_suggestions_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillQueryResponse)
}
AutofillQueryResponse::AutofillQueryResponse(const AutofillQueryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      form_suggestions_(from.form_suggestions_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillQueryResponse)
}

inline void AutofillQueryResponse::SharedCtor() {
}

AutofillQueryResponse::~AutofillQueryResponse() {
  // @@protoc_insertion_point(destructor:autofill.AutofillQueryResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillQueryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AutofillQueryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillQueryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillQueryResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  form_suggestions_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillQueryResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_form_suggestions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillQueryResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillQueryResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_form_suggestions_size()); i < n; i++) {
    const auto& repfield = this->_internal_form_suggestions(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillQueryResponse)
  return target;
}

size_t AutofillQueryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillQueryResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
  total_size += 1UL * this->_internal_form_suggestions_size();
  for (const auto& msg : this->form_suggestions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillQueryResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillQueryResponse*>(
      &from));
}

void AutofillQueryResponse::MergeFrom(const AutofillQueryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillQueryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  form_suggestions_.MergeFrom(from.form_suggestions_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillQueryResponse::CopyFrom(const AutofillQueryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillQueryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillQueryResponse::IsInitialized() const {
  return true;
}

void AutofillQueryResponse::InternalSwap(AutofillQueryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  form_suggestions_.InternalSwap(&other->form_suggestions_);
}

std::string AutofillQueryResponse::GetTypeName() const {
  return "autofill.AutofillQueryResponse";
}


// ===================================================================

class AutofillUploadRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<AutofillUploadRequest>()._has_bits_);
  static const ::autofill::AutofillUploadContents& upload(const AutofillUploadRequest* msg);
  static void set_has_upload(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::autofill::AutofillUploadContents&
AutofillUploadRequest::_Internal::upload(const AutofillUploadRequest* msg) {
  return *msg->upload_;
}
void AutofillUploadRequest::clear_upload() {
  if (upload_ != nullptr) upload_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
AutofillUploadRequest::AutofillUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:autofill.AutofillUploadRequest)
}
AutofillUploadRequest::AutofillUploadRequest(const AutofillUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_upload()) {
    upload_ = new ::autofill::AutofillUploadContents(*from.upload_);
  } else {
    upload_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:autofill.AutofillUploadRequest)
}

inline void AutofillUploadRequest::SharedCtor() {
upload_ = nullptr;
}

AutofillUploadRequest::~AutofillUploadRequest() {
  // @@protoc_insertion_point(destructor:autofill.AutofillUploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AutofillUploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete upload_;
}

void AutofillUploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AutofillUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:autofill.AutofillUploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(upload_ != nullptr);
    upload_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AutofillUploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .autofill.AutofillUploadContents upload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_upload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AutofillUploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:autofill.AutofillUploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .autofill.AutofillUploadContents upload = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::upload(this),
        _Internal::upload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autofill.AutofillUploadRequest)
  return target;
}

size_t AutofillUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autofill.AutofillUploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .autofill.AutofillUploadContents upload = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *upload_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AutofillUploadRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AutofillUploadRequest*>(
      &from));
}

void AutofillUploadRequest::MergeFrom(const AutofillUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autofill.AutofillUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_upload()) {
    _internal_mutable_upload()->::autofill::AutofillUploadContents::MergeFrom(from._internal_upload());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AutofillUploadRequest::CopyFrom(const AutofillUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autofill.AutofillUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AutofillUploadRequest::IsInitialized() const {
  if (_internal_has_upload()) {
    if (!upload_->IsInitialized()) return false;
  }
  return true;
}

void AutofillUploadRequest::InternalSwap(AutofillUploadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(upload_, other->upload_);
}

std::string AutofillUploadRequest::GetTypeName() const {
  return "autofill.AutofillUploadRequest";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageResourceQueryRequest*
Arena::CreateMaybeMessage< ::autofill::AutofillPageResourceQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillPageResourceQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageQueryRequest_Form_Field*
Arena::CreateMaybeMessage< ::autofill::AutofillPageQueryRequest_Form_Field >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillPageQueryRequest_Form_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageQueryRequest_Form*
Arena::CreateMaybeMessage< ::autofill::AutofillPageQueryRequest_Form >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillPageQueryRequest_Form >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillPageQueryRequest*
Arena::CreateMaybeMessage< ::autofill::AutofillPageQueryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillPageQueryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction*
Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion*
Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse_FormSuggestion*
Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse_FormSuggestion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillQueryResponse_FormSuggestion >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillQueryResponse*
Arena::CreateMaybeMessage< ::autofill::AutofillQueryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillQueryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::autofill::AutofillUploadRequest*
Arena::CreateMaybeMessage< ::autofill::AutofillUploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::autofill::AutofillUploadRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
