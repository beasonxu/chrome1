// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: api_v1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_api_5fv1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_api_5fv1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "password_requirements.pb.h"
#include "server.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_api_5fv1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_api_5fv1_2eproto {
  static const uint32_t offsets[];
};
namespace autofill {
class AutofillPageQueryRequest;
struct AutofillPageQueryRequestDefaultTypeInternal;
extern AutofillPageQueryRequestDefaultTypeInternal _AutofillPageQueryRequest_default_instance_;
class AutofillPageQueryRequest_Form;
struct AutofillPageQueryRequest_FormDefaultTypeInternal;
extern AutofillPageQueryRequest_FormDefaultTypeInternal _AutofillPageQueryRequest_Form_default_instance_;
class AutofillPageQueryRequest_Form_Field;
struct AutofillPageQueryRequest_Form_FieldDefaultTypeInternal;
extern AutofillPageQueryRequest_Form_FieldDefaultTypeInternal _AutofillPageQueryRequest_Form_Field_default_instance_;
class AutofillPageResourceQueryRequest;
struct AutofillPageResourceQueryRequestDefaultTypeInternal;
extern AutofillPageResourceQueryRequestDefaultTypeInternal _AutofillPageResourceQueryRequest_default_instance_;
class AutofillQueryResponse;
struct AutofillQueryResponseDefaultTypeInternal;
extern AutofillQueryResponseDefaultTypeInternal _AutofillQueryResponse_default_instance_;
class AutofillQueryResponse_FormSuggestion;
struct AutofillQueryResponse_FormSuggestionDefaultTypeInternal;
extern AutofillQueryResponse_FormSuggestionDefaultTypeInternal _AutofillQueryResponse_FormSuggestion_default_instance_;
class AutofillQueryResponse_FormSuggestion_FieldSuggestion;
struct AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal;
extern AutofillQueryResponse_FormSuggestion_FieldSuggestionDefaultTypeInternal _AutofillQueryResponse_FormSuggestion_FieldSuggestion_default_instance_;
class AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction;
struct AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal;
extern AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPredictionDefaultTypeInternal _AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_default_instance_;
class AutofillUploadRequest;
struct AutofillUploadRequestDefaultTypeInternal;
extern AutofillUploadRequestDefaultTypeInternal _AutofillUploadRequest_default_instance_;
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill::AutofillPageQueryRequest* Arena::CreateMaybeMessage<::autofill::AutofillPageQueryRequest>(Arena*);
template<> ::autofill::AutofillPageQueryRequest_Form* Arena::CreateMaybeMessage<::autofill::AutofillPageQueryRequest_Form>(Arena*);
template<> ::autofill::AutofillPageQueryRequest_Form_Field* Arena::CreateMaybeMessage<::autofill::AutofillPageQueryRequest_Form_Field>(Arena*);
template<> ::autofill::AutofillPageResourceQueryRequest* Arena::CreateMaybeMessage<::autofill::AutofillPageResourceQueryRequest>(Arena*);
template<> ::autofill::AutofillQueryResponse* Arena::CreateMaybeMessage<::autofill::AutofillQueryResponse>(Arena*);
template<> ::autofill::AutofillQueryResponse_FormSuggestion* Arena::CreateMaybeMessage<::autofill::AutofillQueryResponse_FormSuggestion>(Arena*);
template<> ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* Arena::CreateMaybeMessage<::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion>(Arena*);
template<> ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* Arena::CreateMaybeMessage<::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction>(Arena*);
template<> ::autofill::AutofillUploadRequest* Arena::CreateMaybeMessage<::autofill::AutofillUploadRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill {

// ===================================================================

class AutofillPageResourceQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillPageResourceQueryRequest) */ {
 public:
  inline AutofillPageResourceQueryRequest() : AutofillPageResourceQueryRequest(nullptr) {}
  ~AutofillPageResourceQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR AutofillPageResourceQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillPageResourceQueryRequest(const AutofillPageResourceQueryRequest& from);
  AutofillPageResourceQueryRequest(AutofillPageResourceQueryRequest&& from) noexcept
    : AutofillPageResourceQueryRequest() {
    *this = ::std::move(from);
  }

  inline AutofillPageResourceQueryRequest& operator=(const AutofillPageResourceQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillPageResourceQueryRequest& operator=(AutofillPageResourceQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillPageResourceQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillPageResourceQueryRequest* internal_default_instance() {
    return reinterpret_cast<const AutofillPageResourceQueryRequest*>(
               &_AutofillPageResourceQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AutofillPageResourceQueryRequest& a, AutofillPageResourceQueryRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillPageResourceQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillPageResourceQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillPageResourceQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillPageResourceQueryRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillPageResourceQueryRequest& from);
  void MergeFrom(const AutofillPageResourceQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillPageResourceQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillPageResourceQueryRequest";
  }
  protected:
  explicit AutofillPageResourceQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerializedRequestFieldNumber = 1,
  };
  // optional string serialized_request = 1;
  bool has_serialized_request() const;
  private:
  bool _internal_has_serialized_request() const;
  public:
  void clear_serialized_request();
  const std::string& serialized_request() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serialized_request(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serialized_request();
  PROTOBUF_NODISCARD std::string* release_serialized_request();
  void set_allocated_serialized_request(std::string* serialized_request);
  private:
  const std::string& _internal_serialized_request() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serialized_request(const std::string& value);
  std::string* _internal_mutable_serialized_request();
  public:

  // @@protoc_insertion_point(class_scope:autofill.AutofillPageResourceQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serialized_request_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillPageQueryRequest_Form_Field final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillPageQueryRequest.Form.Field) */ {
 public:
  inline AutofillPageQueryRequest_Form_Field() : AutofillPageQueryRequest_Form_Field(nullptr) {}
  ~AutofillPageQueryRequest_Form_Field() override;
  explicit PROTOBUF_CONSTEXPR AutofillPageQueryRequest_Form_Field(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillPageQueryRequest_Form_Field(const AutofillPageQueryRequest_Form_Field& from);
  AutofillPageQueryRequest_Form_Field(AutofillPageQueryRequest_Form_Field&& from) noexcept
    : AutofillPageQueryRequest_Form_Field() {
    *this = ::std::move(from);
  }

  inline AutofillPageQueryRequest_Form_Field& operator=(const AutofillPageQueryRequest_Form_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillPageQueryRequest_Form_Field& operator=(AutofillPageQueryRequest_Form_Field&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillPageQueryRequest_Form_Field& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillPageQueryRequest_Form_Field* internal_default_instance() {
    return reinterpret_cast<const AutofillPageQueryRequest_Form_Field*>(
               &_AutofillPageQueryRequest_Form_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AutofillPageQueryRequest_Form_Field& a, AutofillPageQueryRequest_Form_Field& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillPageQueryRequest_Form_Field* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillPageQueryRequest_Form_Field* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillPageQueryRequest_Form_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillPageQueryRequest_Form_Field>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillPageQueryRequest_Form_Field& from);
  void MergeFrom(const AutofillPageQueryRequest_Form_Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillPageQueryRequest_Form_Field* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillPageQueryRequest.Form.Field";
  }
  protected:
  explicit AutofillPageQueryRequest_Form_Field(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kControlTypeFieldNumber = 3,
    kMetadataFieldNumber = 4,
    kSignatureFieldNumber = 1,
  };
  // optional string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // optional string control_type = 3;
  bool has_control_type() const;
  private:
  bool _internal_has_control_type() const;
  public:
  void clear_control_type();
  const std::string& control_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_control_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_control_type();
  PROTOBUF_NODISCARD std::string* release_control_type();
  void set_allocated_control_type(std::string* control_type);
  private:
  const std::string& _internal_control_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control_type(const std::string& value);
  std::string* _internal_mutable_control_type();
  public:

  // optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::autofill::AutofillRandomizedFieldMetadata& metadata() const;
  PROTOBUF_NODISCARD ::autofill::AutofillRandomizedFieldMetadata* release_metadata();
  ::autofill::AutofillRandomizedFieldMetadata* mutable_metadata();
  void set_allocated_metadata(::autofill::AutofillRandomizedFieldMetadata* metadata);
  private:
  const ::autofill::AutofillRandomizedFieldMetadata& _internal_metadata() const;
  ::autofill::AutofillRandomizedFieldMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::autofill::AutofillRandomizedFieldMetadata* metadata);
  ::autofill::AutofillRandomizedFieldMetadata* unsafe_arena_release_metadata();

  // optional fixed32 signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  uint32_t signature() const;
  void set_signature(uint32_t value);
  private:
  uint32_t _internal_signature() const;
  void _internal_set_signature(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.AutofillPageQueryRequest.Form.Field)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_type_;
  ::autofill::AutofillRandomizedFieldMetadata* metadata_;
  uint32_t signature_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillPageQueryRequest_Form final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillPageQueryRequest.Form) */ {
 public:
  inline AutofillPageQueryRequest_Form() : AutofillPageQueryRequest_Form(nullptr) {}
  ~AutofillPageQueryRequest_Form() override;
  explicit PROTOBUF_CONSTEXPR AutofillPageQueryRequest_Form(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillPageQueryRequest_Form(const AutofillPageQueryRequest_Form& from);
  AutofillPageQueryRequest_Form(AutofillPageQueryRequest_Form&& from) noexcept
    : AutofillPageQueryRequest_Form() {
    *this = ::std::move(from);
  }

  inline AutofillPageQueryRequest_Form& operator=(const AutofillPageQueryRequest_Form& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillPageQueryRequest_Form& operator=(AutofillPageQueryRequest_Form&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillPageQueryRequest_Form& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillPageQueryRequest_Form* internal_default_instance() {
    return reinterpret_cast<const AutofillPageQueryRequest_Form*>(
               &_AutofillPageQueryRequest_Form_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AutofillPageQueryRequest_Form& a, AutofillPageQueryRequest_Form& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillPageQueryRequest_Form* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillPageQueryRequest_Form* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillPageQueryRequest_Form* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillPageQueryRequest_Form>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillPageQueryRequest_Form& from);
  void MergeFrom(const AutofillPageQueryRequest_Form& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillPageQueryRequest_Form* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillPageQueryRequest.Form";
  }
  protected:
  explicit AutofillPageQueryRequest_Form(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillPageQueryRequest_Form_Field Field;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldsFieldNumber = 2,
    kMetadataFieldNumber = 3,
    kSignatureFieldNumber = 1,
  };
  // repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
  int fields_size() const;
  private:
  int _internal_fields_size() const;
  public:
  void clear_fields();
  ::autofill::AutofillPageQueryRequest_Form_Field* mutable_fields(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form_Field >*
      mutable_fields();
  private:
  const ::autofill::AutofillPageQueryRequest_Form_Field& _internal_fields(int index) const;
  ::autofill::AutofillPageQueryRequest_Form_Field* _internal_add_fields();
  public:
  const ::autofill::AutofillPageQueryRequest_Form_Field& fields(int index) const;
  ::autofill::AutofillPageQueryRequest_Form_Field* add_fields();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form_Field >&
      fields() const;

  // optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::autofill::AutofillRandomizedFormMetadata& metadata() const;
  PROTOBUF_NODISCARD ::autofill::AutofillRandomizedFormMetadata* release_metadata();
  ::autofill::AutofillRandomizedFormMetadata* mutable_metadata();
  void set_allocated_metadata(::autofill::AutofillRandomizedFormMetadata* metadata);
  private:
  const ::autofill::AutofillRandomizedFormMetadata& _internal_metadata() const;
  ::autofill::AutofillRandomizedFormMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::autofill::AutofillRandomizedFormMetadata* metadata);
  ::autofill::AutofillRandomizedFormMetadata* unsafe_arena_release_metadata();

  // optional fixed64 signature = 1;
  bool has_signature() const;
  private:
  bool _internal_has_signature() const;
  public:
  void clear_signature();
  uint64_t signature() const;
  void set_signature(uint64_t value);
  private:
  uint64_t _internal_signature() const;
  void _internal_set_signature(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.AutofillPageQueryRequest.Form)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form_Field > fields_;
  ::autofill::AutofillRandomizedFormMetadata* metadata_;
  uint64_t signature_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillPageQueryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillPageQueryRequest) */ {
 public:
  inline AutofillPageQueryRequest() : AutofillPageQueryRequest(nullptr) {}
  ~AutofillPageQueryRequest() override;
  explicit PROTOBUF_CONSTEXPR AutofillPageQueryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillPageQueryRequest(const AutofillPageQueryRequest& from);
  AutofillPageQueryRequest(AutofillPageQueryRequest&& from) noexcept
    : AutofillPageQueryRequest() {
    *this = ::std::move(from);
  }

  inline AutofillPageQueryRequest& operator=(const AutofillPageQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillPageQueryRequest& operator=(AutofillPageQueryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillPageQueryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillPageQueryRequest* internal_default_instance() {
    return reinterpret_cast<const AutofillPageQueryRequest*>(
               &_AutofillPageQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AutofillPageQueryRequest& a, AutofillPageQueryRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillPageQueryRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillPageQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillPageQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillPageQueryRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillPageQueryRequest& from);
  void MergeFrom(const AutofillPageQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillPageQueryRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillPageQueryRequest";
  }
  protected:
  explicit AutofillPageQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillPageQueryRequest_Form Form;

  // accessors -------------------------------------------------------

  enum : int {
    kFormsFieldNumber = 2,
    kExperimentsFieldNumber = 3,
    kClientVersionFieldNumber = 1,
  };
  // repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
  int forms_size() const;
  private:
  int _internal_forms_size() const;
  public:
  void clear_forms();
  ::autofill::AutofillPageQueryRequest_Form* mutable_forms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form >*
      mutable_forms();
  private:
  const ::autofill::AutofillPageQueryRequest_Form& _internal_forms(int index) const;
  ::autofill::AutofillPageQueryRequest_Form* _internal_add_forms();
  public:
  const ::autofill::AutofillPageQueryRequest_Form& forms(int index) const;
  ::autofill::AutofillPageQueryRequest_Form* add_forms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form >&
      forms() const;

  // repeated int64 experiments = 3;
  int experiments_size() const;
  private:
  int _internal_experiments_size() const;
  public:
  void clear_experiments();
  private:
  int64_t _internal_experiments(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_experiments() const;
  void _internal_add_experiments(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_experiments();
  public:
  int64_t experiments(int index) const;
  void set_experiments(int index, int64_t value);
  void add_experiments(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      experiments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_experiments();

  // optional string client_version = 1 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_client_version() const;
  private:
  bool _internal_has_client_version() const;
  public:
  PROTOBUF_DEPRECATED void clear_client_version();
  PROTOBUF_DEPRECATED const std::string& client_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_client_version(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_client_version();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_client_version();
  PROTOBUF_DEPRECATED void set_allocated_client_version(std::string* client_version);
  private:
  const std::string& _internal_client_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_version(const std::string& value);
  std::string* _internal_mutable_client_version();
  public:

  // @@protoc_insertion_point(class_scope:autofill.AutofillPageQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form > forms_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > experiments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_version_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction) */ {
 public:
  inline AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction() : AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(nullptr) {}
  ~AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction() override;
  explicit PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from);
  AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction&& from) noexcept
    : AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction() {
    *this = ::std::move(from);
  }

  inline AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& operator=(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& operator=(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* internal_default_instance() {
    return reinterpret_cast<const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction*>(
               &_AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& a, AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from);
  void MergeFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction";
  }
  protected:
  explicit AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kOverrideFieldNumber = 2,
  };
  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional bool override = 2 [default = false];
  bool has_override() const;
  private:
  bool _internal_has_override() const;
  public:
  void clear_override();
  bool override() const;
  void set_override(bool value);
  private:
  bool _internal_override() const;
  void _internal_set_override(bool value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t type_;
  bool override_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillQueryResponse_FormSuggestion_FieldSuggestion final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion) */ {
 public:
  inline AutofillQueryResponse_FormSuggestion_FieldSuggestion() : AutofillQueryResponse_FormSuggestion_FieldSuggestion(nullptr) {}
  ~AutofillQueryResponse_FormSuggestion_FieldSuggestion() override;
  explicit PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion_FieldSuggestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillQueryResponse_FormSuggestion_FieldSuggestion(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from);
  AutofillQueryResponse_FormSuggestion_FieldSuggestion(AutofillQueryResponse_FormSuggestion_FieldSuggestion&& from) noexcept
    : AutofillQueryResponse_FormSuggestion_FieldSuggestion() {
    *this = ::std::move(from);
  }

  inline AutofillQueryResponse_FormSuggestion_FieldSuggestion& operator=(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillQueryResponse_FormSuggestion_FieldSuggestion& operator=(AutofillQueryResponse_FormSuggestion_FieldSuggestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillQueryResponse_FormSuggestion_FieldSuggestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillQueryResponse_FormSuggestion_FieldSuggestion* internal_default_instance() {
    return reinterpret_cast<const AutofillQueryResponse_FormSuggestion_FieldSuggestion*>(
               &_AutofillQueryResponse_FormSuggestion_FieldSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AutofillQueryResponse_FormSuggestion_FieldSuggestion& a, AutofillQueryResponse_FormSuggestion_FieldSuggestion& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillQueryResponse_FormSuggestion_FieldSuggestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillQueryResponse_FormSuggestion_FieldSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillQueryResponse_FormSuggestion_FieldSuggestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from);
  void MergeFrom(const AutofillQueryResponse_FormSuggestion_FieldSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillQueryResponse_FormSuggestion_FieldSuggestion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion";
  }
  protected:
  explicit AutofillQueryResponse_FormSuggestion_FieldSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction FieldPrediction;

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionsFieldNumber = 3,
    kPasswordRequirementsFieldNumber = 5,
    kFieldSignatureFieldNumber = 1,
    kMayUsePrefilledPlaceholderFieldNumber = 4,
  };
  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
  int predictions_size() const;
  private:
  int _internal_predictions_size() const;
  public:
  void clear_predictions();
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* mutable_predictions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >*
      mutable_predictions();
  private:
  const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& _internal_predictions(int index) const;
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* _internal_add_predictions();
  public:
  const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& predictions(int index) const;
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* add_predictions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >&
      predictions() const;

  // optional .autofill.PasswordRequirementsSpec password_requirements = 5;
  bool has_password_requirements() const;
  private:
  bool _internal_has_password_requirements() const;
  public:
  void clear_password_requirements();
  const ::autofill::PasswordRequirementsSpec& password_requirements() const;
  PROTOBUF_NODISCARD ::autofill::PasswordRequirementsSpec* release_password_requirements();
  ::autofill::PasswordRequirementsSpec* mutable_password_requirements();
  void set_allocated_password_requirements(::autofill::PasswordRequirementsSpec* password_requirements);
  private:
  const ::autofill::PasswordRequirementsSpec& _internal_password_requirements() const;
  ::autofill::PasswordRequirementsSpec* _internal_mutable_password_requirements();
  public:
  void unsafe_arena_set_allocated_password_requirements(
      ::autofill::PasswordRequirementsSpec* password_requirements);
  ::autofill::PasswordRequirementsSpec* unsafe_arena_release_password_requirements();

  // optional fixed32 field_signature = 1;
  bool has_field_signature() const;
  private:
  bool _internal_has_field_signature() const;
  public:
  void clear_field_signature();
  uint32_t field_signature() const;
  void set_field_signature(uint32_t value);
  private:
  uint32_t _internal_field_signature() const;
  void _internal_set_field_signature(uint32_t value);
  public:

  // optional bool may_use_prefilled_placeholder = 4;
  bool has_may_use_prefilled_placeholder() const;
  private:
  bool _internal_has_may_use_prefilled_placeholder() const;
  public:
  void clear_may_use_prefilled_placeholder();
  bool may_use_prefilled_placeholder() const;
  void set_may_use_prefilled_placeholder(bool value);
  private:
  bool _internal_may_use_prefilled_placeholder() const;
  void _internal_set_may_use_prefilled_placeholder(bool value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction > predictions_;
  ::autofill::PasswordRequirementsSpec* password_requirements_;
  uint32_t field_signature_;
  bool may_use_prefilled_placeholder_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillQueryResponse_FormSuggestion final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillQueryResponse.FormSuggestion) */ {
 public:
  inline AutofillQueryResponse_FormSuggestion() : AutofillQueryResponse_FormSuggestion(nullptr) {}
  ~AutofillQueryResponse_FormSuggestion() override;
  explicit PROTOBUF_CONSTEXPR AutofillQueryResponse_FormSuggestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillQueryResponse_FormSuggestion(const AutofillQueryResponse_FormSuggestion& from);
  AutofillQueryResponse_FormSuggestion(AutofillQueryResponse_FormSuggestion&& from) noexcept
    : AutofillQueryResponse_FormSuggestion() {
    *this = ::std::move(from);
  }

  inline AutofillQueryResponse_FormSuggestion& operator=(const AutofillQueryResponse_FormSuggestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillQueryResponse_FormSuggestion& operator=(AutofillQueryResponse_FormSuggestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillQueryResponse_FormSuggestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillQueryResponse_FormSuggestion* internal_default_instance() {
    return reinterpret_cast<const AutofillQueryResponse_FormSuggestion*>(
               &_AutofillQueryResponse_FormSuggestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AutofillQueryResponse_FormSuggestion& a, AutofillQueryResponse_FormSuggestion& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillQueryResponse_FormSuggestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillQueryResponse_FormSuggestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillQueryResponse_FormSuggestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillQueryResponse_FormSuggestion>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillQueryResponse_FormSuggestion& from);
  void MergeFrom(const AutofillQueryResponse_FormSuggestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillQueryResponse_FormSuggestion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillQueryResponse.FormSuggestion";
  }
  protected:
  explicit AutofillQueryResponse_FormSuggestion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillQueryResponse_FormSuggestion_FieldSuggestion FieldSuggestion;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldSuggestionsFieldNumber = 1,
  };
  // repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
  int field_suggestions_size() const;
  private:
  int _internal_field_suggestions_size() const;
  public:
  void clear_field_suggestions();
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* mutable_field_suggestions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >*
      mutable_field_suggestions();
  private:
  const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion& _internal_field_suggestions(int index) const;
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* _internal_add_field_suggestions();
  public:
  const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion& field_suggestions(int index) const;
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* add_field_suggestions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >&
      field_suggestions() const;

  // @@protoc_insertion_point(class_scope:autofill.AutofillQueryResponse.FormSuggestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion > field_suggestions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillQueryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillQueryResponse) */ {
 public:
  inline AutofillQueryResponse() : AutofillQueryResponse(nullptr) {}
  ~AutofillQueryResponse() override;
  explicit PROTOBUF_CONSTEXPR AutofillQueryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillQueryResponse(const AutofillQueryResponse& from);
  AutofillQueryResponse(AutofillQueryResponse&& from) noexcept
    : AutofillQueryResponse() {
    *this = ::std::move(from);
  }

  inline AutofillQueryResponse& operator=(const AutofillQueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillQueryResponse& operator=(AutofillQueryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillQueryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillQueryResponse* internal_default_instance() {
    return reinterpret_cast<const AutofillQueryResponse*>(
               &_AutofillQueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AutofillQueryResponse& a, AutofillQueryResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillQueryResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillQueryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillQueryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillQueryResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillQueryResponse& from);
  void MergeFrom(const AutofillQueryResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillQueryResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillQueryResponse";
  }
  protected:
  explicit AutofillQueryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AutofillQueryResponse_FormSuggestion FormSuggestion;

  // accessors -------------------------------------------------------

  enum : int {
    kFormSuggestionsFieldNumber = 1,
  };
  // repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
  int form_suggestions_size() const;
  private:
  int _internal_form_suggestions_size() const;
  public:
  void clear_form_suggestions();
  ::autofill::AutofillQueryResponse_FormSuggestion* mutable_form_suggestions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion >*
      mutable_form_suggestions();
  private:
  const ::autofill::AutofillQueryResponse_FormSuggestion& _internal_form_suggestions(int index) const;
  ::autofill::AutofillQueryResponse_FormSuggestion* _internal_add_form_suggestions();
  public:
  const ::autofill::AutofillQueryResponse_FormSuggestion& form_suggestions(int index) const;
  ::autofill::AutofillQueryResponse_FormSuggestion* add_form_suggestions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion >&
      form_suggestions() const;

  // @@protoc_insertion_point(class_scope:autofill.AutofillQueryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion > form_suggestions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// -------------------------------------------------------------------

class AutofillUploadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.AutofillUploadRequest) */ {
 public:
  inline AutofillUploadRequest() : AutofillUploadRequest(nullptr) {}
  ~AutofillUploadRequest() override;
  explicit PROTOBUF_CONSTEXPR AutofillUploadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AutofillUploadRequest(const AutofillUploadRequest& from);
  AutofillUploadRequest(AutofillUploadRequest&& from) noexcept
    : AutofillUploadRequest() {
    *this = ::std::move(from);
  }

  inline AutofillUploadRequest& operator=(const AutofillUploadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AutofillUploadRequest& operator=(AutofillUploadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AutofillUploadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AutofillUploadRequest* internal_default_instance() {
    return reinterpret_cast<const AutofillUploadRequest*>(
               &_AutofillUploadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AutofillUploadRequest& a, AutofillUploadRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(AutofillUploadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AutofillUploadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AutofillUploadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AutofillUploadRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AutofillUploadRequest& from);
  void MergeFrom(const AutofillUploadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AutofillUploadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.AutofillUploadRequest";
  }
  protected:
  explicit AutofillUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUploadFieldNumber = 1,
  };
  // optional .autofill.AutofillUploadContents upload = 1;
  bool has_upload() const;
  private:
  bool _internal_has_upload() const;
  public:
  void clear_upload();
  const ::autofill::AutofillUploadContents& upload() const;
  PROTOBUF_NODISCARD ::autofill::AutofillUploadContents* release_upload();
  ::autofill::AutofillUploadContents* mutable_upload();
  void set_allocated_upload(::autofill::AutofillUploadContents* upload);
  private:
  const ::autofill::AutofillUploadContents& _internal_upload() const;
  ::autofill::AutofillUploadContents* _internal_mutable_upload();
  public:
  void unsafe_arena_set_allocated_upload(
      ::autofill::AutofillUploadContents* upload);
  ::autofill::AutofillUploadContents* unsafe_arena_release_upload();

  // @@protoc_insertion_point(class_scope:autofill.AutofillUploadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::autofill::AutofillUploadContents* upload_;
  friend struct ::TableStruct_api_5fv1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AutofillPageResourceQueryRequest

// optional string serialized_request = 1;
inline bool AutofillPageResourceQueryRequest::_internal_has_serialized_request() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillPageResourceQueryRequest::has_serialized_request() const {
  return _internal_has_serialized_request();
}
inline void AutofillPageResourceQueryRequest::clear_serialized_request() {
  serialized_request_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillPageResourceQueryRequest::serialized_request() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageResourceQueryRequest.serialized_request)
  return _internal_serialized_request();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillPageResourceQueryRequest::set_serialized_request(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 serialized_request_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.AutofillPageResourceQueryRequest.serialized_request)
}
inline std::string* AutofillPageResourceQueryRequest::mutable_serialized_request() {
  std::string* _s = _internal_mutable_serialized_request();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageResourceQueryRequest.serialized_request)
  return _s;
}
inline const std::string& AutofillPageResourceQueryRequest::_internal_serialized_request() const {
  return serialized_request_.Get();
}
inline void AutofillPageResourceQueryRequest::_internal_set_serialized_request(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  serialized_request_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillPageResourceQueryRequest::_internal_mutable_serialized_request() {
  _has_bits_[0] |= 0x00000001u;
  return serialized_request_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillPageResourceQueryRequest::release_serialized_request() {
  // @@protoc_insertion_point(field_release:autofill.AutofillPageResourceQueryRequest.serialized_request)
  if (!_internal_has_serialized_request()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = serialized_request_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_request_.IsDefault()) {
    serialized_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillPageResourceQueryRequest::set_allocated_serialized_request(std::string* serialized_request) {
  if (serialized_request != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  serialized_request_.SetAllocated(serialized_request, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serialized_request_.IsDefault()) {
    serialized_request_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillPageResourceQueryRequest.serialized_request)
}

// -------------------------------------------------------------------

// AutofillPageQueryRequest_Form_Field

// optional fixed32 signature = 1;
inline bool AutofillPageQueryRequest_Form_Field::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AutofillPageQueryRequest_Form_Field::has_signature() const {
  return _internal_has_signature();
}
inline void AutofillPageQueryRequest_Form_Field::clear_signature() {
  signature_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline uint32_t AutofillPageQueryRequest_Form_Field::_internal_signature() const {
  return signature_;
}
inline uint32_t AutofillPageQueryRequest_Form_Field::signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.Field.signature)
  return _internal_signature();
}
inline void AutofillPageQueryRequest_Form_Field::_internal_set_signature(uint32_t value) {
  _has_bits_[0] |= 0x00000008u;
  signature_ = value;
}
inline void AutofillPageQueryRequest_Form_Field::set_signature(uint32_t value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:autofill.AutofillPageQueryRequest.Form.Field.signature)
}

// optional string name = 2;
inline bool AutofillPageQueryRequest_Form_Field::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillPageQueryRequest_Form_Field::has_name() const {
  return _internal_has_name();
}
inline void AutofillPageQueryRequest_Form_Field::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillPageQueryRequest_Form_Field::name() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.Field.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillPageQueryRequest_Form_Field::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.AutofillPageQueryRequest.Form.Field.name)
}
inline std::string* AutofillPageQueryRequest_Form_Field::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.Form.Field.name)
  return _s;
}
inline const std::string& AutofillPageQueryRequest_Form_Field::_internal_name() const {
  return name_.Get();
}
inline void AutofillPageQueryRequest_Form_Field::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillPageQueryRequest_Form_Field::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillPageQueryRequest_Form_Field::release_name() {
  // @@protoc_insertion_point(field_release:autofill.AutofillPageQueryRequest.Form.Field.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillPageQueryRequest_Form_Field::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillPageQueryRequest.Form.Field.name)
}

// optional string control_type = 3;
inline bool AutofillPageQueryRequest_Form_Field::_internal_has_control_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillPageQueryRequest_Form_Field::has_control_type() const {
  return _internal_has_control_type();
}
inline void AutofillPageQueryRequest_Form_Field::clear_control_type() {
  control_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AutofillPageQueryRequest_Form_Field::control_type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.Field.control_type)
  return _internal_control_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillPageQueryRequest_Form_Field::set_control_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 control_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.AutofillPageQueryRequest.Form.Field.control_type)
}
inline std::string* AutofillPageQueryRequest_Form_Field::mutable_control_type() {
  std::string* _s = _internal_mutable_control_type();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.Form.Field.control_type)
  return _s;
}
inline const std::string& AutofillPageQueryRequest_Form_Field::_internal_control_type() const {
  return control_type_.Get();
}
inline void AutofillPageQueryRequest_Form_Field::_internal_set_control_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  control_type_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillPageQueryRequest_Form_Field::_internal_mutable_control_type() {
  _has_bits_[0] |= 0x00000002u;
  return control_type_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillPageQueryRequest_Form_Field::release_control_type() {
  // @@protoc_insertion_point(field_release:autofill.AutofillPageQueryRequest.Form.Field.control_type)
  if (!_internal_has_control_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = control_type_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (control_type_.IsDefault()) {
    control_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillPageQueryRequest_Form_Field::set_allocated_control_type(std::string* control_type) {
  if (control_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  control_type_.SetAllocated(control_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (control_type_.IsDefault()) {
    control_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillPageQueryRequest.Form.Field.control_type)
}

// optional .autofill.AutofillRandomizedFieldMetadata metadata = 4;
inline bool AutofillPageQueryRequest_Form_Field::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool AutofillPageQueryRequest_Form_Field::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::autofill::AutofillRandomizedFieldMetadata& AutofillPageQueryRequest_Form_Field::_internal_metadata() const {
  const ::autofill::AutofillRandomizedFieldMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::AutofillRandomizedFieldMetadata&>(
      ::autofill::_AutofillRandomizedFieldMetadata_default_instance_);
}
inline const ::autofill::AutofillRandomizedFieldMetadata& AutofillPageQueryRequest_Form_Field::metadata() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.Field.metadata)
  return _internal_metadata();
}
inline void AutofillPageQueryRequest_Form_Field::unsafe_arena_set_allocated_metadata(
    ::autofill::AutofillRandomizedFieldMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.AutofillPageQueryRequest.Form.Field.metadata)
}
inline ::autofill::AutofillRandomizedFieldMetadata* AutofillPageQueryRequest_Form_Field::release_metadata() {
  _has_bits_[0] &= ~0x00000004u;
  ::autofill::AutofillRandomizedFieldMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::AutofillRandomizedFieldMetadata* AutofillPageQueryRequest_Form_Field::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:autofill.AutofillPageQueryRequest.Form.Field.metadata)
  _has_bits_[0] &= ~0x00000004u;
  ::autofill::AutofillRandomizedFieldMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::autofill::AutofillRandomizedFieldMetadata* AutofillPageQueryRequest_Form_Field::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000004u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::AutofillRandomizedFieldMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::autofill::AutofillRandomizedFieldMetadata* AutofillPageQueryRequest_Form_Field::mutable_metadata() {
  ::autofill::AutofillRandomizedFieldMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.Form.Field.metadata)
  return _msg;
}
inline void AutofillPageQueryRequest_Form_Field::set_allocated_metadata(::autofill::AutofillRandomizedFieldMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillPageQueryRequest.Form.Field.metadata)
}

// -------------------------------------------------------------------

// AutofillPageQueryRequest_Form

// optional fixed64 signature = 1;
inline bool AutofillPageQueryRequest_Form::_internal_has_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillPageQueryRequest_Form::has_signature() const {
  return _internal_has_signature();
}
inline void AutofillPageQueryRequest_Form::clear_signature() {
  signature_ = uint64_t{0u};
  _has_bits_[0] &= ~0x00000002u;
}
inline uint64_t AutofillPageQueryRequest_Form::_internal_signature() const {
  return signature_;
}
inline uint64_t AutofillPageQueryRequest_Form::signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.signature)
  return _internal_signature();
}
inline void AutofillPageQueryRequest_Form::_internal_set_signature(uint64_t value) {
  _has_bits_[0] |= 0x00000002u;
  signature_ = value;
}
inline void AutofillPageQueryRequest_Form::set_signature(uint64_t value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:autofill.AutofillPageQueryRequest.Form.signature)
}

// repeated .autofill.AutofillPageQueryRequest.Form.Field fields = 2;
inline int AutofillPageQueryRequest_Form::_internal_fields_size() const {
  return fields_.size();
}
inline int AutofillPageQueryRequest_Form::fields_size() const {
  return _internal_fields_size();
}
inline void AutofillPageQueryRequest_Form::clear_fields() {
  fields_.Clear();
}
inline ::autofill::AutofillPageQueryRequest_Form_Field* AutofillPageQueryRequest_Form::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.Form.fields)
  return fields_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form_Field >*
AutofillPageQueryRequest_Form::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillPageQueryRequest.Form.fields)
  return &fields_;
}
inline const ::autofill::AutofillPageQueryRequest_Form_Field& AutofillPageQueryRequest_Form::_internal_fields(int index) const {
  return fields_.Get(index);
}
inline const ::autofill::AutofillPageQueryRequest_Form_Field& AutofillPageQueryRequest_Form::fields(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.fields)
  return _internal_fields(index);
}
inline ::autofill::AutofillPageQueryRequest_Form_Field* AutofillPageQueryRequest_Form::_internal_add_fields() {
  return fields_.Add();
}
inline ::autofill::AutofillPageQueryRequest_Form_Field* AutofillPageQueryRequest_Form::add_fields() {
  ::autofill::AutofillPageQueryRequest_Form_Field* _add = _internal_add_fields();
  // @@protoc_insertion_point(field_add:autofill.AutofillPageQueryRequest.Form.fields)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form_Field >&
AutofillPageQueryRequest_Form::fields() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillPageQueryRequest.Form.fields)
  return fields_;
}

// optional .autofill.AutofillRandomizedFormMetadata metadata = 3;
inline bool AutofillPageQueryRequest_Form::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool AutofillPageQueryRequest_Form::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::autofill::AutofillRandomizedFormMetadata& AutofillPageQueryRequest_Form::_internal_metadata() const {
  const ::autofill::AutofillRandomizedFormMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::AutofillRandomizedFormMetadata&>(
      ::autofill::_AutofillRandomizedFormMetadata_default_instance_);
}
inline const ::autofill::AutofillRandomizedFormMetadata& AutofillPageQueryRequest_Form::metadata() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.Form.metadata)
  return _internal_metadata();
}
inline void AutofillPageQueryRequest_Form::unsafe_arena_set_allocated_metadata(
    ::autofill::AutofillRandomizedFormMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.AutofillPageQueryRequest.Form.metadata)
}
inline ::autofill::AutofillRandomizedFormMetadata* AutofillPageQueryRequest_Form::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::AutofillRandomizedFormMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::AutofillRandomizedFormMetadata* AutofillPageQueryRequest_Form::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:autofill.AutofillPageQueryRequest.Form.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::AutofillRandomizedFormMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::autofill::AutofillRandomizedFormMetadata* AutofillPageQueryRequest_Form::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::AutofillRandomizedFormMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::autofill::AutofillRandomizedFormMetadata* AutofillPageQueryRequest_Form::mutable_metadata() {
  ::autofill::AutofillRandomizedFormMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.Form.metadata)
  return _msg;
}
inline void AutofillPageQueryRequest_Form::set_allocated_metadata(::autofill::AutofillRandomizedFormMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillPageQueryRequest.Form.metadata)
}

// -------------------------------------------------------------------

// AutofillPageQueryRequest

// optional string client_version = 1 [deprecated = true];
inline bool AutofillPageQueryRequest::_internal_has_client_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillPageQueryRequest::has_client_version() const {
  return _internal_has_client_version();
}
inline void AutofillPageQueryRequest::clear_client_version() {
  client_version_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AutofillPageQueryRequest::client_version() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.client_version)
  return _internal_client_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AutofillPageQueryRequest::set_client_version(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 client_version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:autofill.AutofillPageQueryRequest.client_version)
}
inline std::string* AutofillPageQueryRequest::mutable_client_version() {
  std::string* _s = _internal_mutable_client_version();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.client_version)
  return _s;
}
inline const std::string& AutofillPageQueryRequest::_internal_client_version() const {
  return client_version_.Get();
}
inline void AutofillPageQueryRequest::_internal_set_client_version(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  client_version_.Set(value, GetArenaForAllocation());
}
inline std::string* AutofillPageQueryRequest::_internal_mutable_client_version() {
  _has_bits_[0] |= 0x00000001u;
  return client_version_.Mutable(GetArenaForAllocation());
}
inline std::string* AutofillPageQueryRequest::release_client_version() {
  // @@protoc_insertion_point(field_release:autofill.AutofillPageQueryRequest.client_version)
  if (!_internal_has_client_version()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = client_version_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_version_.IsDefault()) {
    client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void AutofillPageQueryRequest::set_allocated_client_version(std::string* client_version) {
  if (client_version != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_version_.SetAllocated(client_version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_version_.IsDefault()) {
    client_version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillPageQueryRequest.client_version)
}

// repeated .autofill.AutofillPageQueryRequest.Form forms = 2;
inline int AutofillPageQueryRequest::_internal_forms_size() const {
  return forms_.size();
}
inline int AutofillPageQueryRequest::forms_size() const {
  return _internal_forms_size();
}
inline void AutofillPageQueryRequest::clear_forms() {
  forms_.Clear();
}
inline ::autofill::AutofillPageQueryRequest_Form* AutofillPageQueryRequest::mutable_forms(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillPageQueryRequest.forms)
  return forms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form >*
AutofillPageQueryRequest::mutable_forms() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillPageQueryRequest.forms)
  return &forms_;
}
inline const ::autofill::AutofillPageQueryRequest_Form& AutofillPageQueryRequest::_internal_forms(int index) const {
  return forms_.Get(index);
}
inline const ::autofill::AutofillPageQueryRequest_Form& AutofillPageQueryRequest::forms(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.forms)
  return _internal_forms(index);
}
inline ::autofill::AutofillPageQueryRequest_Form* AutofillPageQueryRequest::_internal_add_forms() {
  return forms_.Add();
}
inline ::autofill::AutofillPageQueryRequest_Form* AutofillPageQueryRequest::add_forms() {
  ::autofill::AutofillPageQueryRequest_Form* _add = _internal_add_forms();
  // @@protoc_insertion_point(field_add:autofill.AutofillPageQueryRequest.forms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillPageQueryRequest_Form >&
AutofillPageQueryRequest::forms() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillPageQueryRequest.forms)
  return forms_;
}

// repeated int64 experiments = 3;
inline int AutofillPageQueryRequest::_internal_experiments_size() const {
  return experiments_.size();
}
inline int AutofillPageQueryRequest::experiments_size() const {
  return _internal_experiments_size();
}
inline void AutofillPageQueryRequest::clear_experiments() {
  experiments_.Clear();
}
inline int64_t AutofillPageQueryRequest::_internal_experiments(int index) const {
  return experiments_.Get(index);
}
inline int64_t AutofillPageQueryRequest::experiments(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillPageQueryRequest.experiments)
  return _internal_experiments(index);
}
inline void AutofillPageQueryRequest::set_experiments(int index, int64_t value) {
  experiments_.Set(index, value);
  // @@protoc_insertion_point(field_set:autofill.AutofillPageQueryRequest.experiments)
}
inline void AutofillPageQueryRequest::_internal_add_experiments(int64_t value) {
  experiments_.Add(value);
}
inline void AutofillPageQueryRequest::add_experiments(int64_t value) {
  _internal_add_experiments(value);
  // @@protoc_insertion_point(field_add:autofill.AutofillPageQueryRequest.experiments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillPageQueryRequest::_internal_experiments() const {
  return experiments_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
AutofillPageQueryRequest::experiments() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillPageQueryRequest.experiments)
  return _internal_experiments();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillPageQueryRequest::_internal_mutable_experiments() {
  return &experiments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
AutofillPageQueryRequest::mutable_experiments() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillPageQueryRequest.experiments)
  return _internal_mutable_experiments();
}

// -------------------------------------------------------------------

// AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction

// optional int32 type = 1;
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::has_type() const {
  return _internal_has_type();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_internal_type() const {
  return type_;
}
inline int32_t AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::type() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction.type)
  return _internal_type();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction.type)
}

// optional bool override = 2 [default = false];
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_internal_has_override() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::has_override() const {
  return _internal_has_override();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::clear_override() {
  override_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_internal_override() const {
  return override_;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::override() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction.override)
  return _internal_override();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::_internal_set_override(bool value) {
  _has_bits_[0] |= 0x00000002u;
  override_ = value;
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction::set_override(bool value) {
  _internal_set_override(value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction.override)
}

// -------------------------------------------------------------------

// AutofillQueryResponse_FormSuggestion_FieldSuggestion

// optional fixed32 field_signature = 1;
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_has_field_signature() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::has_field_signature() const {
  return _internal_has_field_signature();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::clear_field_signature() {
  field_signature_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline uint32_t AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_field_signature() const {
  return field_signature_;
}
inline uint32_t AutofillQueryResponse_FormSuggestion_FieldSuggestion::field_signature() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.field_signature)
  return _internal_field_signature();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_set_field_signature(uint32_t value) {
  _has_bits_[0] |= 0x00000002u;
  field_signature_ = value;
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::set_field_signature(uint32_t value) {
  _internal_set_field_signature(value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.field_signature)
}

// repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.FieldPrediction predictions = 3;
inline int AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_predictions_size() const {
  return predictions_.size();
}
inline int AutofillQueryResponse_FormSuggestion_FieldSuggestion::predictions_size() const {
  return _internal_predictions_size();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::clear_predictions() {
  predictions_.Clear();
}
inline ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* AutofillQueryResponse_FormSuggestion_FieldSuggestion::mutable_predictions(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.predictions)
  return predictions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >*
AutofillQueryResponse_FormSuggestion_FieldSuggestion::mutable_predictions() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.predictions)
  return &predictions_;
}
inline const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_predictions(int index) const {
  return predictions_.Get(index);
}
inline const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction& AutofillQueryResponse_FormSuggestion_FieldSuggestion::predictions(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.predictions)
  return _internal_predictions(index);
}
inline ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_add_predictions() {
  return predictions_.Add();
}
inline ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* AutofillQueryResponse_FormSuggestion_FieldSuggestion::add_predictions() {
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction* _add = _internal_add_predictions();
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.predictions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion_FieldPrediction >&
AutofillQueryResponse_FormSuggestion_FieldSuggestion::predictions() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.predictions)
  return predictions_;
}

// optional bool may_use_prefilled_placeholder = 4;
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_has_may_use_prefilled_placeholder() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::has_may_use_prefilled_placeholder() const {
  return _internal_has_may_use_prefilled_placeholder();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::clear_may_use_prefilled_placeholder() {
  may_use_prefilled_placeholder_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_may_use_prefilled_placeholder() const {
  return may_use_prefilled_placeholder_;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::may_use_prefilled_placeholder() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.may_use_prefilled_placeholder)
  return _internal_may_use_prefilled_placeholder();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_set_may_use_prefilled_placeholder(bool value) {
  _has_bits_[0] |= 0x00000004u;
  may_use_prefilled_placeholder_ = value;
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::set_may_use_prefilled_placeholder(bool value) {
  _internal_set_may_use_prefilled_placeholder(value);
  // @@protoc_insertion_point(field_set:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.may_use_prefilled_placeholder)
}

// optional .autofill.PasswordRequirementsSpec password_requirements = 5;
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_has_password_requirements() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || password_requirements_ != nullptr);
  return value;
}
inline bool AutofillQueryResponse_FormSuggestion_FieldSuggestion::has_password_requirements() const {
  return _internal_has_password_requirements();
}
inline const ::autofill::PasswordRequirementsSpec& AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_password_requirements() const {
  const ::autofill::PasswordRequirementsSpec* p = password_requirements_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::PasswordRequirementsSpec&>(
      ::autofill::_PasswordRequirementsSpec_default_instance_);
}
inline const ::autofill::PasswordRequirementsSpec& AutofillQueryResponse_FormSuggestion_FieldSuggestion::password_requirements() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.password_requirements)
  return _internal_password_requirements();
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::unsafe_arena_set_allocated_password_requirements(
    ::autofill::PasswordRequirementsSpec* password_requirements) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_requirements_);
  }
  password_requirements_ = password_requirements;
  if (password_requirements) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.password_requirements)
}
inline ::autofill::PasswordRequirementsSpec* AutofillQueryResponse_FormSuggestion_FieldSuggestion::release_password_requirements() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec* temp = password_requirements_;
  password_requirements_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::PasswordRequirementsSpec* AutofillQueryResponse_FormSuggestion_FieldSuggestion::unsafe_arena_release_password_requirements() {
  // @@protoc_insertion_point(field_release:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.password_requirements)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::PasswordRequirementsSpec* temp = password_requirements_;
  password_requirements_ = nullptr;
  return temp;
}
inline ::autofill::PasswordRequirementsSpec* AutofillQueryResponse_FormSuggestion_FieldSuggestion::_internal_mutable_password_requirements() {
  _has_bits_[0] |= 0x00000001u;
  if (password_requirements_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::PasswordRequirementsSpec>(GetArenaForAllocation());
    password_requirements_ = p;
  }
  return password_requirements_;
}
inline ::autofill::PasswordRequirementsSpec* AutofillQueryResponse_FormSuggestion_FieldSuggestion::mutable_password_requirements() {
  ::autofill::PasswordRequirementsSpec* _msg = _internal_mutable_password_requirements();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.password_requirements)
  return _msg;
}
inline void AutofillQueryResponse_FormSuggestion_FieldSuggestion::set_allocated_password_requirements(::autofill::PasswordRequirementsSpec* password_requirements) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_requirements_);
  }
  if (password_requirements) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(password_requirements));
    if (message_arena != submessage_arena) {
      password_requirements = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, password_requirements, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  password_requirements_ = password_requirements;
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion.password_requirements)
}

// -------------------------------------------------------------------

// AutofillQueryResponse_FormSuggestion

// repeated .autofill.AutofillQueryResponse.FormSuggestion.FieldSuggestion field_suggestions = 1;
inline int AutofillQueryResponse_FormSuggestion::_internal_field_suggestions_size() const {
  return field_suggestions_.size();
}
inline int AutofillQueryResponse_FormSuggestion::field_suggestions_size() const {
  return _internal_field_suggestions_size();
}
inline void AutofillQueryResponse_FormSuggestion::clear_field_suggestions() {
  field_suggestions_.Clear();
}
inline ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* AutofillQueryResponse_FormSuggestion::mutable_field_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponse.FormSuggestion.field_suggestions)
  return field_suggestions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >*
AutofillQueryResponse_FormSuggestion::mutable_field_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryResponse.FormSuggestion.field_suggestions)
  return &field_suggestions_;
}
inline const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion& AutofillQueryResponse_FormSuggestion::_internal_field_suggestions(int index) const {
  return field_suggestions_.Get(index);
}
inline const ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion& AutofillQueryResponse_FormSuggestion::field_suggestions(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.FormSuggestion.field_suggestions)
  return _internal_field_suggestions(index);
}
inline ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* AutofillQueryResponse_FormSuggestion::_internal_add_field_suggestions() {
  return field_suggestions_.Add();
}
inline ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* AutofillQueryResponse_FormSuggestion::add_field_suggestions() {
  ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion* _add = _internal_add_field_suggestions();
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryResponse.FormSuggestion.field_suggestions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion_FieldSuggestion >&
AutofillQueryResponse_FormSuggestion::field_suggestions() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryResponse.FormSuggestion.field_suggestions)
  return field_suggestions_;
}

// -------------------------------------------------------------------

// AutofillQueryResponse

// repeated .autofill.AutofillQueryResponse.FormSuggestion form_suggestions = 1;
inline int AutofillQueryResponse::_internal_form_suggestions_size() const {
  return form_suggestions_.size();
}
inline int AutofillQueryResponse::form_suggestions_size() const {
  return _internal_form_suggestions_size();
}
inline void AutofillQueryResponse::clear_form_suggestions() {
  form_suggestions_.Clear();
}
inline ::autofill::AutofillQueryResponse_FormSuggestion* AutofillQueryResponse::mutable_form_suggestions(int index) {
  // @@protoc_insertion_point(field_mutable:autofill.AutofillQueryResponse.form_suggestions)
  return form_suggestions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion >*
AutofillQueryResponse::mutable_form_suggestions() {
  // @@protoc_insertion_point(field_mutable_list:autofill.AutofillQueryResponse.form_suggestions)
  return &form_suggestions_;
}
inline const ::autofill::AutofillQueryResponse_FormSuggestion& AutofillQueryResponse::_internal_form_suggestions(int index) const {
  return form_suggestions_.Get(index);
}
inline const ::autofill::AutofillQueryResponse_FormSuggestion& AutofillQueryResponse::form_suggestions(int index) const {
  // @@protoc_insertion_point(field_get:autofill.AutofillQueryResponse.form_suggestions)
  return _internal_form_suggestions(index);
}
inline ::autofill::AutofillQueryResponse_FormSuggestion* AutofillQueryResponse::_internal_add_form_suggestions() {
  return form_suggestions_.Add();
}
inline ::autofill::AutofillQueryResponse_FormSuggestion* AutofillQueryResponse::add_form_suggestions() {
  ::autofill::AutofillQueryResponse_FormSuggestion* _add = _internal_add_form_suggestions();
  // @@protoc_insertion_point(field_add:autofill.AutofillQueryResponse.form_suggestions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::autofill::AutofillQueryResponse_FormSuggestion >&
AutofillQueryResponse::form_suggestions() const {
  // @@protoc_insertion_point(field_list:autofill.AutofillQueryResponse.form_suggestions)
  return form_suggestions_;
}

// -------------------------------------------------------------------

// AutofillUploadRequest

// optional .autofill.AutofillUploadContents upload = 1;
inline bool AutofillUploadRequest::_internal_has_upload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || upload_ != nullptr);
  return value;
}
inline bool AutofillUploadRequest::has_upload() const {
  return _internal_has_upload();
}
inline const ::autofill::AutofillUploadContents& AutofillUploadRequest::_internal_upload() const {
  const ::autofill::AutofillUploadContents* p = upload_;
  return p != nullptr ? *p : reinterpret_cast<const ::autofill::AutofillUploadContents&>(
      ::autofill::_AutofillUploadContents_default_instance_);
}
inline const ::autofill::AutofillUploadContents& AutofillUploadRequest::upload() const {
  // @@protoc_insertion_point(field_get:autofill.AutofillUploadRequest.upload)
  return _internal_upload();
}
inline void AutofillUploadRequest::unsafe_arena_set_allocated_upload(
    ::autofill::AutofillUploadContents* upload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upload_);
  }
  upload_ = upload;
  if (upload) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autofill.AutofillUploadRequest.upload)
}
inline ::autofill::AutofillUploadContents* AutofillUploadRequest::release_upload() {
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::AutofillUploadContents* temp = upload_;
  upload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::autofill::AutofillUploadContents* AutofillUploadRequest::unsafe_arena_release_upload() {
  // @@protoc_insertion_point(field_release:autofill.AutofillUploadRequest.upload)
  _has_bits_[0] &= ~0x00000001u;
  ::autofill::AutofillUploadContents* temp = upload_;
  upload_ = nullptr;
  return temp;
}
inline ::autofill::AutofillUploadContents* AutofillUploadRequest::_internal_mutable_upload() {
  _has_bits_[0] |= 0x00000001u;
  if (upload_ == nullptr) {
    auto* p = CreateMaybeMessage<::autofill::AutofillUploadContents>(GetArenaForAllocation());
    upload_ = p;
  }
  return upload_;
}
inline ::autofill::AutofillUploadContents* AutofillUploadRequest::mutable_upload() {
  ::autofill::AutofillUploadContents* _msg = _internal_mutable_upload();
  // @@protoc_insertion_point(field_mutable:autofill.AutofillUploadRequest.upload)
  return _msg;
}
inline void AutofillUploadRequest::set_allocated_upload(::autofill::AutofillUploadContents* upload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(upload_);
  }
  if (upload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(upload));
    if (message_arena != submessage_arena) {
      upload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, upload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upload_ = upload;
  // @@protoc_insertion_point(field_set_allocated:autofill.AutofillUploadRequest.upload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_api_5fv1_2eproto
