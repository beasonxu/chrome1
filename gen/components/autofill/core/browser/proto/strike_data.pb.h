// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: strike_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_strike_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_strike_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_strike_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_strike_5fdata_2eproto {
  static const uint32_t offsets[];
};
namespace autofill {
class StrikeData;
struct StrikeDataDefaultTypeInternal;
extern StrikeDataDefaultTypeInternal _StrikeData_default_instance_;
}  // namespace autofill
PROTOBUF_NAMESPACE_OPEN
template<> ::autofill::StrikeData* Arena::CreateMaybeMessage<::autofill::StrikeData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace autofill {

// ===================================================================

class StrikeData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:autofill.StrikeData) */ {
 public:
  inline StrikeData() : StrikeData(nullptr) {}
  ~StrikeData() override;
  explicit PROTOBUF_CONSTEXPR StrikeData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrikeData(const StrikeData& from);
  StrikeData(StrikeData&& from) noexcept
    : StrikeData() {
    *this = ::std::move(from);
  }

  inline StrikeData& operator=(const StrikeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrikeData& operator=(StrikeData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StrikeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrikeData* internal_default_instance() {
    return reinterpret_cast<const StrikeData*>(
               &_StrikeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StrikeData& a, StrikeData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(StrikeData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrikeData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StrikeData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StrikeData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StrikeData& from);
  void MergeFrom(const StrikeData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StrikeData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "autofill.StrikeData";
  }
  protected:
  explicit StrikeData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLastUpdateTimestampFieldNumber = 2,
    kNumStrikesFieldNumber = 1,
  };
  // optional int64 last_update_timestamp = 2;
  bool has_last_update_timestamp() const;
  private:
  bool _internal_has_last_update_timestamp() const;
  public:
  void clear_last_update_timestamp();
  int64_t last_update_timestamp() const;
  void set_last_update_timestamp(int64_t value);
  private:
  int64_t _internal_last_update_timestamp() const;
  void _internal_set_last_update_timestamp(int64_t value);
  public:

  // optional int32 num_strikes = 1;
  bool has_num_strikes() const;
  private:
  bool _internal_has_num_strikes() const;
  public:
  void clear_num_strikes();
  int32_t num_strikes() const;
  void set_num_strikes(int32_t value);
  private:
  int32_t _internal_num_strikes() const;
  void _internal_set_num_strikes(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:autofill.StrikeData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t last_update_timestamp_;
  int32_t num_strikes_;
  friend struct ::TableStruct_strike_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StrikeData

// optional int32 num_strikes = 1;
inline bool StrikeData::_internal_has_num_strikes() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool StrikeData::has_num_strikes() const {
  return _internal_has_num_strikes();
}
inline void StrikeData::clear_num_strikes() {
  num_strikes_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t StrikeData::_internal_num_strikes() const {
  return num_strikes_;
}
inline int32_t StrikeData::num_strikes() const {
  // @@protoc_insertion_point(field_get:autofill.StrikeData.num_strikes)
  return _internal_num_strikes();
}
inline void StrikeData::_internal_set_num_strikes(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  num_strikes_ = value;
}
inline void StrikeData::set_num_strikes(int32_t value) {
  _internal_set_num_strikes(value);
  // @@protoc_insertion_point(field_set:autofill.StrikeData.num_strikes)
}

// optional int64 last_update_timestamp = 2;
inline bool StrikeData::_internal_has_last_update_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool StrikeData::has_last_update_timestamp() const {
  return _internal_has_last_update_timestamp();
}
inline void StrikeData::clear_last_update_timestamp() {
  last_update_timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t StrikeData::_internal_last_update_timestamp() const {
  return last_update_timestamp_;
}
inline int64_t StrikeData::last_update_timestamp() const {
  // @@protoc_insertion_point(field_get:autofill.StrikeData.last_update_timestamp)
  return _internal_last_update_timestamp();
}
inline void StrikeData::_internal_set_last_update_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  last_update_timestamp_ = value;
}
inline void StrikeData::set_last_update_timestamp(int64_t value) {
  _internal_set_last_update_timestamp(value);
  // @@protoc_insertion_point(field_set:autofill.StrikeData.last_update_timestamp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace autofill

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_strike_5fdata_2eproto
