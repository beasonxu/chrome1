// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


// This file is autogenerated by
//     base/android/jni_generator/jni_generator.py
// For
//     org/chromium/components/embedder_support/util/UrlUtilities

#ifndef org_chromium_components_embedder_support_util_UrlUtilities_JNI
#define org_chromium_components_embedder_support_util_UrlUtilities_JNI

#include <jni.h>

#include "../../../../../../../base/android/jni_generator/jni_generator_helper.h"


// Step 1: Forward declarations.


// Step 2: Constants (optional).


// Step 3: Method stubs.
namespace embedder_support {

static jboolean JNI_UrlUtilities_SameDomainOrHost(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& primaryUrl,
    const base::android::JavaParamRef<jstring>& secondaryUrl,
    jboolean includePrivateRegistries);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MM5WUf_1F(
    JNIEnv* env,
    jclass jcaller,
    jstring primaryUrl,
    jstring secondaryUrl,
    jboolean includePrivateRegistries) {
  return JNI_UrlUtilities_SameDomainOrHost(env, base::android::JavaParamRef<jstring>(env,
      primaryUrl), base::android::JavaParamRef<jstring>(env, secondaryUrl),
      includePrivateRegistries);
}

static base::android::ScopedJavaLocalRef<jstring> JNI_UrlUtilities_GetDomainAndRegistry(JNIEnv* env,
    const base::android::JavaParamRef<jstring>& url,
    jboolean includePrivateRegistries);

JNI_GENERATOR_EXPORT jstring Java_J_N_M3l9sLoY(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jboolean includePrivateRegistries) {
  return JNI_UrlUtilities_GetDomainAndRegistry(env, base::android::JavaParamRef<jstring>(env, url),
      includePrivateRegistries).Release();
}

static jboolean JNI_UrlUtilities_IsGoogleDomainUrl(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url,
    jboolean allowNonStandardPort);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MnXKAgH9(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jboolean allowNonStandardPort) {
  return JNI_UrlUtilities_IsGoogleDomainUrl(env, base::android::JavaParamRef<jstring>(env, url),
      allowNonStandardPort);
}

static jboolean JNI_UrlUtilities_IsGoogleSubDomainUrl(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mn0fHwI_00024(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  return JNI_UrlUtilities_IsGoogleSubDomainUrl(env, base::android::JavaParamRef<jstring>(env, url));
}

static jboolean JNI_UrlUtilities_IsGoogleSearchUrl(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jboolean Java_J_N_M_00024l72hrq(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  return JNI_UrlUtilities_IsGoogleSearchUrl(env, base::android::JavaParamRef<jstring>(env, url));
}

static jboolean JNI_UrlUtilities_IsGoogleHomePageUrl(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Mj1SQ9S8(
    JNIEnv* env,
    jclass jcaller,
    jstring url) {
  return JNI_UrlUtilities_IsGoogleHomePageUrl(env, base::android::JavaParamRef<jstring>(env, url));
}

static jboolean JNI_UrlUtilities_IsUrlWithinScope(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& scopeUrl);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MLKUC6KA(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jstring scopeUrl) {
  return JNI_UrlUtilities_IsUrlWithinScope(env, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, scopeUrl));
}

static jboolean JNI_UrlUtilities_UrlsMatchIgnoringFragments(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& url2);

JNI_GENERATOR_EXPORT jboolean Java_J_N_Ml0jhLAz(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jstring url2) {
  return JNI_UrlUtilities_UrlsMatchIgnoringFragments(env, base::android::JavaParamRef<jstring>(env,
      url), base::android::JavaParamRef<jstring>(env, url2));
}

static jboolean JNI_UrlUtilities_UrlsFragmentsDiffer(JNIEnv* env, const
    base::android::JavaParamRef<jstring>& url,
    const base::android::JavaParamRef<jstring>& url2);

JNI_GENERATOR_EXPORT jboolean Java_J_N_MMsz_00024c1t(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jstring url2) {
  return JNI_UrlUtilities_UrlsFragmentsDiffer(env, base::android::JavaParamRef<jstring>(env, url),
      base::android::JavaParamRef<jstring>(env, url2));
}

static base::android::ScopedJavaLocalRef<jstring> JNI_UrlUtilities_EscapeQueryParamValue(JNIEnv*
    env, const base::android::JavaParamRef<jstring>& url,
    jboolean usePlus);

JNI_GENERATOR_EXPORT jstring Java_J_N_MAuEtM2V(
    JNIEnv* env,
    jclass jcaller,
    jstring url,
    jboolean usePlus) {
  return JNI_UrlUtilities_EscapeQueryParamValue(env, base::android::JavaParamRef<jstring>(env, url),
      usePlus).Release();
}

static base::android::ScopedJavaLocalRef<jstring> JNI_UrlUtilities_GetValueForKeyInQuery(JNIEnv*
    env, const base::android::JavaParamRef<jobject>& url,
    const base::android::JavaParamRef<jstring>& key);

JNI_GENERATOR_EXPORT jstring Java_J_N_MDzOlV_1T(
    JNIEnv* env,
    jclass jcaller,
    jobject url,
    jstring key) {
  return JNI_UrlUtilities_GetValueForKeyInQuery(env, base::android::JavaParamRef<jobject>(env, url),
      base::android::JavaParamRef<jstring>(env, key)).Release();
}

static base::android::ScopedJavaLocalRef<jobject> JNI_UrlUtilities_ClearPort(JNIEnv* env, const
    base::android::JavaParamRef<jobject>& url);

JNI_GENERATOR_EXPORT jobject Java_J_N_MGM8OMf9(
    JNIEnv* env,
    jclass jcaller,
    jobject url) {
  return JNI_UrlUtilities_ClearPort(env, base::android::JavaParamRef<jobject>(env, url)).Release();
}


}  // namespace embedder_support

#endif  // org_chromium_components_embedder_support_util_UrlUtilities_JNI
