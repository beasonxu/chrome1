// components/cast_streaming/public/mojom/renderer_controller.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_RENDERER_CONTROLLER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_RENDERER_CONTROLLER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace cast_streaming {
namespace mojom {
namespace internal {

class ValidationContext;
class  RendererController_SetPlaybackController_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data renderer;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<RendererController_SetPlaybackController_Params_Data>;

  RendererController_SetPlaybackController_Params_Data();
  ~RendererController_SetPlaybackController_Params_Data() = delete;
};
static_assert(sizeof(RendererController_SetPlaybackController_Params_Data) == 16,
              "Bad sizeof(RendererController_SetPlaybackController_Params_Data)");
class  RendererController_SetPlaybackController_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RendererController_SetPlaybackController_ResponseParams_Data>;

  RendererController_SetPlaybackController_ResponseParams_Data();
  ~RendererController_SetPlaybackController_ResponseParams_Data() = delete;
};
static_assert(sizeof(RendererController_SetPlaybackController_ResponseParams_Data) == 8,
              "Bad sizeof(RendererController_SetPlaybackController_ResponseParams_Data)");

}  // namespace internal


class RendererController_SetPlaybackController_ParamsDataView {
 public:
  RendererController_SetPlaybackController_ParamsDataView() = default;

  RendererController_SetPlaybackController_ParamsDataView(
      internal::RendererController_SetPlaybackController_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeRenderer() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::media::mojom::RendererInterfaceBase>>(
            &data_->renderer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::RendererController_SetPlaybackController_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class RendererController_SetPlaybackController_ResponseParamsDataView {
 public:
  RendererController_SetPlaybackController_ResponseParamsDataView() = default;

  RendererController_SetPlaybackController_ResponseParamsDataView(
      internal::RendererController_SetPlaybackController_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RendererController_SetPlaybackController_ResponseParams_Data* data_ = nullptr;
};





}  // namespace mojom
}  // namespace cast_streaming

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_CAST_STREAMING_PUBLIC_MOJOM_RENDERER_CONTROLLER_MOJOM_PARAMS_DATA_H_