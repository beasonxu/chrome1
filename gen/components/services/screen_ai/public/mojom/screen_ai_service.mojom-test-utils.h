// components/services/screen_ai/public/mojom/screen_ai_service.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_TEST_UTILS_H_

#include "components/services/screen_ai/public/mojom/screen_ai_service.mojom.h"


namespace screen_ai {
namespace mojom {


class  ScreenAIAnnotatorInterceptorForTesting : public ScreenAIAnnotator {
  virtual ScreenAIAnnotator* GetForwardingInterface() = 0;
  void Annotate(const ::SkBitmap& image, AnnotateCallback callback) override;
};
class  ScreenAIAnnotatorAsyncWaiter {
 public:
  explicit ScreenAIAnnotatorAsyncWaiter(ScreenAIAnnotator* proxy);

  ScreenAIAnnotatorAsyncWaiter(const ScreenAIAnnotatorAsyncWaiter&) = delete;
  ScreenAIAnnotatorAsyncWaiter& operator=(const ScreenAIAnnotatorAsyncWaiter&) = delete;

  ~ScreenAIAnnotatorAsyncWaiter();
  void Annotate(
      const ::SkBitmap& image, ::ui::AXTreeUpdate* out_updates);

 private:
  ScreenAIAnnotator* const proxy_;
};


class  Screen2xMainContentExtractorInterceptorForTesting : public Screen2xMainContentExtractor {
  virtual Screen2xMainContentExtractor* GetForwardingInterface() = 0;
  void ExtractMainContent(const ::ui::AXTreeUpdate& snapshot, ExtractMainContentCallback callback) override;
};
class  Screen2xMainContentExtractorAsyncWaiter {
 public:
  explicit Screen2xMainContentExtractorAsyncWaiter(Screen2xMainContentExtractor* proxy);

  Screen2xMainContentExtractorAsyncWaiter(const Screen2xMainContentExtractorAsyncWaiter&) = delete;
  Screen2xMainContentExtractorAsyncWaiter& operator=(const Screen2xMainContentExtractorAsyncWaiter&) = delete;

  ~Screen2xMainContentExtractorAsyncWaiter();
  void ExtractMainContent(
      const ::ui::AXTreeUpdate& snapshot, std::vector<int32_t>* out_content_node_ids);

 private:
  Screen2xMainContentExtractor* const proxy_;
};


class  ScreenAIServiceInterceptorForTesting : public ScreenAIService {
  virtual ScreenAIService* GetForwardingInterface() = 0;
  void BindAnnotator(::mojo::PendingReceiver<ScreenAIAnnotator> annotator) override;
  void BindMainContentExtractor(::mojo::PendingReceiver<Screen2xMainContentExtractor> main_content_extractor) override;
};
class  ScreenAIServiceAsyncWaiter {
 public:
  explicit ScreenAIServiceAsyncWaiter(ScreenAIService* proxy);

  ScreenAIServiceAsyncWaiter(const ScreenAIServiceAsyncWaiter&) = delete;
  ScreenAIServiceAsyncWaiter& operator=(const ScreenAIServiceAsyncWaiter&) = delete;

  ~ScreenAIServiceAsyncWaiter();

 private:
  ScreenAIService* const proxy_;
};




}  // namespace mojom
}  // namespace screen_ai

#endif  // COMPONENTS_SERVICES_SCREEN_AI_PUBLIC_MOJOM_SCREEN_AI_SERVICE_MOJOM_TEST_UTILS_H_