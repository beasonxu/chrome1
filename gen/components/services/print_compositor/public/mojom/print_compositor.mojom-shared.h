// components/services/print_compositor/public/mojom/print_compositor.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/print_compositor/public/mojom/print_compositor.mojom-shared-internal.h"
#include "components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom-shared.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace printing {
namespace mojom {


}  // namespace mojom
}  // namespace printing

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace printing {
namespace mojom {


enum class PrintCompositor_Status : int32_t {
  
  kSuccess = 0,
  
  kHandleMapError = 1,
  
  kContentFormatError = 2,
  
  kCompositingFailure = 3,
  kMinValue = 0,
  kMaxValue = 3,
};

 std::ostream& operator<<(std::ostream& os, PrintCompositor_Status value);
inline bool IsKnownEnumValue(PrintCompositor_Status value) {
  return internal::PrintCompositor_Status_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PrintCompositorInterfaceBase {};

using PrintCompositorPtrDataView =
    mojo::InterfacePtrDataView<PrintCompositorInterfaceBase>;
using PrintCompositorRequestDataView =
    mojo::InterfaceRequestDataView<PrintCompositorInterfaceBase>;
using PrintCompositorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PrintCompositorInterfaceBase>;
using PrintCompositorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PrintCompositorInterfaceBase>;


}  // namespace mojom
}  // namespace printing

namespace std {

template <>
struct hash<::printing::mojom::PrintCompositor_Status>
    : public mojo::internal::EnumHashImpl<::printing::mojom::PrintCompositor_Status> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::printing::mojom::PrintCompositor_Status, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::printing::mojom::PrintCompositor_Status, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::printing::mojom::PrintCompositor_Status>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace printing {
namespace mojom {


}  // namespace mojom
}  // namespace printing

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::printing::mojom::PrintCompositor_Status> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::printing::mojom::PrintCompositor_Status value);
};

} // namespace perfetto

#endif  // COMPONENTS_SERVICES_PRINT_COMPOSITOR_PUBLIC_MOJOM_PRINT_COMPOSITOR_MOJOM_SHARED_H_