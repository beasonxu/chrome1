// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scopes_metadata.proto

#include "scopes_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace content {
PROTOBUF_CONSTEXPR LevelDBScopesKeyRange::LevelDBScopesKeyRange(
    ::_pbi::ConstantInitialized)
  : begin_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , end_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LevelDBScopesKeyRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesKeyRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesKeyRangeDefaultTypeInternal() {}
  union {
    LevelDBScopesKeyRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesKeyRangeDefaultTypeInternal _LevelDBScopesKeyRange_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesMetadata::LevelDBScopesMetadata(
    ::_pbi::ConstantInitialized)
  : version_(int64_t{0}){}
struct LevelDBScopesMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesMetadataDefaultTypeInternal() {}
  union {
    LevelDBScopesMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesMetadataDefaultTypeInternal _LevelDBScopesMetadata_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesScopeMetadata_LevelDBLeveledLock::LevelDBScopesScopeMetadata_LevelDBLeveledLock(
    ::_pbi::ConstantInitialized)
  : range_(nullptr)
  , level_(int64_t{0}){}
struct LevelDBScopesScopeMetadata_LevelDBLeveledLockDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesScopeMetadata_LevelDBLeveledLockDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesScopeMetadata_LevelDBLeveledLockDefaultTypeInternal() {}
  union {
    LevelDBScopesScopeMetadata_LevelDBLeveledLock _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesScopeMetadata_LevelDBLeveledLockDefaultTypeInternal _LevelDBScopesScopeMetadata_LevelDBLeveledLock_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesScopeMetadata::LevelDBScopesScopeMetadata(
    ::_pbi::ConstantInitialized)
  : locks_()
  , ignore_cleanup_tasks_(false){}
struct LevelDBScopesScopeMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesScopeMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesScopeMetadataDefaultTypeInternal() {}
  union {
    LevelDBScopesScopeMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesScopeMetadataDefaultTypeInternal _LevelDBScopesScopeMetadata_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesUndoTask_Put::LevelDBScopesUndoTask_Put(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LevelDBScopesUndoTask_PutDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesUndoTask_PutDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesUndoTask_PutDefaultTypeInternal() {}
  union {
    LevelDBScopesUndoTask_Put _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesUndoTask_PutDefaultTypeInternal _LevelDBScopesUndoTask_Put_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesUndoTask_Delete::LevelDBScopesUndoTask_Delete(
    ::_pbi::ConstantInitialized)
  : key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LevelDBScopesUndoTask_DeleteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesUndoTask_DeleteDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesUndoTask_DeleteDefaultTypeInternal() {}
  union {
    LevelDBScopesUndoTask_Delete _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesUndoTask_DeleteDefaultTypeInternal _LevelDBScopesUndoTask_Delete_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesUndoTask::LevelDBScopesUndoTask(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct LevelDBScopesUndoTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesUndoTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesUndoTaskDefaultTypeInternal() {}
  union {
    LevelDBScopesUndoTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesUndoTaskDefaultTypeInternal _LevelDBScopesUndoTask_default_instance_;
PROTOBUF_CONSTEXPR LevelDBScopesCleanupTask::LevelDBScopesCleanupTask(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct LevelDBScopesCleanupTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LevelDBScopesCleanupTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LevelDBScopesCleanupTaskDefaultTypeInternal() {}
  union {
    LevelDBScopesCleanupTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LevelDBScopesCleanupTaskDefaultTypeInternal _LevelDBScopesCleanupTask_default_instance_;
}  // namespace content
namespace content {

// ===================================================================

class LevelDBScopesKeyRange::_Internal {
 public:
};

LevelDBScopesKeyRange::LevelDBScopesKeyRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesKeyRange)
}
LevelDBScopesKeyRange::LevelDBScopesKeyRange(const LevelDBScopesKeyRange& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  begin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    begin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_begin().empty()) {
    begin_.Set(from._internal_begin(), 
      GetArenaForAllocation());
  }
  end_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    end_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end().empty()) {
    end_.Set(from._internal_end(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesKeyRange)
}

inline void LevelDBScopesKeyRange::SharedCtor() {
begin_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  begin_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
end_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  end_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LevelDBScopesKeyRange::~LevelDBScopesKeyRange() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesKeyRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesKeyRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  begin_.Destroy();
  end_.Destroy();
}

void LevelDBScopesKeyRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesKeyRange::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesKeyRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  begin_.ClearToEmpty();
  end_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesKeyRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes begin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_begin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_end();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesKeyRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesKeyRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes begin = 1;
  if (!this->_internal_begin().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_begin(), target);
  }

  // bytes end = 2;
  if (!this->_internal_end().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesKeyRange)
  return target;
}

size_t LevelDBScopesKeyRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesKeyRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes begin = 1;
  if (!this->_internal_begin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_begin());
  }

  // bytes end = 2;
  if (!this->_internal_end().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_end());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesKeyRange::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesKeyRange*>(
      &from));
}

void LevelDBScopesKeyRange::MergeFrom(const LevelDBScopesKeyRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesKeyRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_begin().empty()) {
    _internal_set_begin(from._internal_begin());
  }
  if (!from._internal_end().empty()) {
    _internal_set_end(from._internal_end());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesKeyRange::CopyFrom(const LevelDBScopesKeyRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesKeyRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesKeyRange::IsInitialized() const {
  return true;
}

void LevelDBScopesKeyRange::InternalSwap(LevelDBScopesKeyRange* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &begin_, lhs_arena,
      &other->begin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &end_, lhs_arena,
      &other->end_, rhs_arena
  );
}

std::string LevelDBScopesKeyRange::GetTypeName() const {
  return "content.LevelDBScopesKeyRange";
}


// ===================================================================

class LevelDBScopesMetadata::_Internal {
 public:
};

LevelDBScopesMetadata::LevelDBScopesMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesMetadata)
}
LevelDBScopesMetadata::LevelDBScopesMetadata(const LevelDBScopesMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesMetadata)
}

inline void LevelDBScopesMetadata::SharedCtor() {
version_ = int64_t{0};
}

LevelDBScopesMetadata::~LevelDBScopesMetadata() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LevelDBScopesMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesMetadata)
  return target;
}

size_t LevelDBScopesMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesMetadata*>(
      &from));
}

void LevelDBScopesMetadata::MergeFrom(const LevelDBScopesMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesMetadata::CopyFrom(const LevelDBScopesMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesMetadata::IsInitialized() const {
  return true;
}

void LevelDBScopesMetadata::InternalSwap(LevelDBScopesMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(version_, other->version_);
}

std::string LevelDBScopesMetadata::GetTypeName() const {
  return "content.LevelDBScopesMetadata";
}


// ===================================================================

class LevelDBScopesScopeMetadata_LevelDBLeveledLock::_Internal {
 public:
  static const ::content::LevelDBScopesKeyRange& range(const LevelDBScopesScopeMetadata_LevelDBLeveledLock* msg);
};

const ::content::LevelDBScopesKeyRange&
LevelDBScopesScopeMetadata_LevelDBLeveledLock::_Internal::range(const LevelDBScopesScopeMetadata_LevelDBLeveledLock* msg) {
  return *msg->range_;
}
LevelDBScopesScopeMetadata_LevelDBLeveledLock::LevelDBScopesScopeMetadata_LevelDBLeveledLock(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
}
LevelDBScopesScopeMetadata_LevelDBLeveledLock::LevelDBScopesScopeMetadata_LevelDBLeveledLock(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_range()) {
    range_ = new ::content::LevelDBScopesKeyRange(*from.range_);
  } else {
    range_ = nullptr;
  }
  level_ = from.level_;
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
}

inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&range_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&range_)) + sizeof(level_));
}

LevelDBScopesScopeMetadata_LevelDBLeveledLock::~LevelDBScopesScopeMetadata_LevelDBLeveledLock() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesScopeMetadata_LevelDBLeveledLock::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete range_;
}

void LevelDBScopesScopeMetadata_LevelDBLeveledLock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesScopeMetadata_LevelDBLeveledLock::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && range_ != nullptr) {
    delete range_;
  }
  range_ = nullptr;
  level_ = int64_t{0};
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesScopeMetadata_LevelDBLeveledLock::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.LevelDBScopesKeyRange range = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesScopeMetadata_LevelDBLeveledLock::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_level(), target);
  }

  // .content.LevelDBScopesKeyRange range = 2;
  if (this->_internal_has_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::range(this),
        _Internal::range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  return target;
}

size_t LevelDBScopesScopeMetadata_LevelDBLeveledLock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .content.LevelDBScopesKeyRange range = 2;
  if (this->_internal_has_range()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *range_);
  }

  // int64 level = 1;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesScopeMetadata_LevelDBLeveledLock::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesScopeMetadata_LevelDBLeveledLock*>(
      &from));
}

void LevelDBScopesScopeMetadata_LevelDBLeveledLock::MergeFrom(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_range()) {
    _internal_mutable_range()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_range());
  }
  if (from._internal_level() != 0) {
    _internal_set_level(from._internal_level());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesScopeMetadata_LevelDBLeveledLock::CopyFrom(const LevelDBScopesScopeMetadata_LevelDBLeveledLock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesScopeMetadata.LevelDBLeveledLock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesScopeMetadata_LevelDBLeveledLock::IsInitialized() const {
  return true;
}

void LevelDBScopesScopeMetadata_LevelDBLeveledLock::InternalSwap(LevelDBScopesScopeMetadata_LevelDBLeveledLock* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LevelDBScopesScopeMetadata_LevelDBLeveledLock, level_)
      + sizeof(LevelDBScopesScopeMetadata_LevelDBLeveledLock::level_)
      - PROTOBUF_FIELD_OFFSET(LevelDBScopesScopeMetadata_LevelDBLeveledLock, range_)>(
          reinterpret_cast<char*>(&range_),
          reinterpret_cast<char*>(&other->range_));
}

std::string LevelDBScopesScopeMetadata_LevelDBLeveledLock::GetTypeName() const {
  return "content.LevelDBScopesScopeMetadata.LevelDBLeveledLock";
}


// ===================================================================

class LevelDBScopesScopeMetadata::_Internal {
 public:
};

LevelDBScopesScopeMetadata::LevelDBScopesScopeMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  locks_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesScopeMetadata)
}
LevelDBScopesScopeMetadata::LevelDBScopesScopeMetadata(const LevelDBScopesScopeMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      locks_(from.locks_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ignore_cleanup_tasks_ = from.ignore_cleanup_tasks_;
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesScopeMetadata)
}

inline void LevelDBScopesScopeMetadata::SharedCtor() {
ignore_cleanup_tasks_ = false;
}

LevelDBScopesScopeMetadata::~LevelDBScopesScopeMetadata() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesScopeMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesScopeMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LevelDBScopesScopeMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesScopeMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesScopeMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  locks_.Clear();
  ignore_cleanup_tasks_ = false;
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesScopeMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .content.LevelDBScopesScopeMetadata.LevelDBLeveledLock locks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_locks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool ignore_cleanup_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ignore_cleanup_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesScopeMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesScopeMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .content.LevelDBScopesScopeMetadata.LevelDBLeveledLock locks = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_locks_size()); i < n; i++) {
    const auto& repfield = this->_internal_locks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool ignore_cleanup_tasks = 2;
  if (this->_internal_ignore_cleanup_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_ignore_cleanup_tasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesScopeMetadata)
  return target;
}

size_t LevelDBScopesScopeMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesScopeMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .content.LevelDBScopesScopeMetadata.LevelDBLeveledLock locks = 1;
  total_size += 1UL * this->_internal_locks_size();
  for (const auto& msg : this->locks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool ignore_cleanup_tasks = 2;
  if (this->_internal_ignore_cleanup_tasks() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesScopeMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesScopeMetadata*>(
      &from));
}

void LevelDBScopesScopeMetadata::MergeFrom(const LevelDBScopesScopeMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesScopeMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  locks_.MergeFrom(from.locks_);
  if (from._internal_ignore_cleanup_tasks() != 0) {
    _internal_set_ignore_cleanup_tasks(from._internal_ignore_cleanup_tasks());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesScopeMetadata::CopyFrom(const LevelDBScopesScopeMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesScopeMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesScopeMetadata::IsInitialized() const {
  return true;
}

void LevelDBScopesScopeMetadata::InternalSwap(LevelDBScopesScopeMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  locks_.InternalSwap(&other->locks_);
  swap(ignore_cleanup_tasks_, other->ignore_cleanup_tasks_);
}

std::string LevelDBScopesScopeMetadata::GetTypeName() const {
  return "content.LevelDBScopesScopeMetadata";
}


// ===================================================================

class LevelDBScopesUndoTask_Put::_Internal {
 public:
};

LevelDBScopesUndoTask_Put::LevelDBScopesUndoTask_Put(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesUndoTask.Put)
}
LevelDBScopesUndoTask_Put::LevelDBScopesUndoTask_Put(const LevelDBScopesUndoTask_Put& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesUndoTask.Put)
}

inline void LevelDBScopesUndoTask_Put::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LevelDBScopesUndoTask_Put::~LevelDBScopesUndoTask_Put() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesUndoTask.Put)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesUndoTask_Put::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
  value_.Destroy();
}

void LevelDBScopesUndoTask_Put::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesUndoTask_Put::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesUndoTask.Put)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  value_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesUndoTask_Put::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesUndoTask_Put::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesUndoTask.Put)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesUndoTask.Put)
  return target;
}

size_t LevelDBScopesUndoTask_Put::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesUndoTask.Put)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesUndoTask_Put::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesUndoTask_Put*>(
      &from));
}

void LevelDBScopesUndoTask_Put::MergeFrom(const LevelDBScopesUndoTask_Put& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesUndoTask.Put)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesUndoTask_Put::CopyFrom(const LevelDBScopesUndoTask_Put& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesUndoTask.Put)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesUndoTask_Put::IsInitialized() const {
  return true;
}

void LevelDBScopesUndoTask_Put::InternalSwap(LevelDBScopesUndoTask_Put* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
}

std::string LevelDBScopesUndoTask_Put::GetTypeName() const {
  return "content.LevelDBScopesUndoTask.Put";
}


// ===================================================================

class LevelDBScopesUndoTask_Delete::_Internal {
 public:
};

LevelDBScopesUndoTask_Delete::LevelDBScopesUndoTask_Delete(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesUndoTask.Delete)
}
LevelDBScopesUndoTask_Delete::LevelDBScopesUndoTask_Delete(const LevelDBScopesUndoTask_Delete& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(from._internal_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesUndoTask.Delete)
}

inline void LevelDBScopesUndoTask_Delete::SharedCtor() {
key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LevelDBScopesUndoTask_Delete::~LevelDBScopesUndoTask_Delete() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesUndoTask.Delete)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesUndoTask_Delete::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.Destroy();
}

void LevelDBScopesUndoTask_Delete::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesUndoTask_Delete::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesUndoTask.Delete)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesUndoTask_Delete::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesUndoTask_Delete::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesUndoTask.Delete)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesUndoTask.Delete)
  return target;
}

size_t LevelDBScopesUndoTask_Delete::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesUndoTask.Delete)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesUndoTask_Delete::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesUndoTask_Delete*>(
      &from));
}

void LevelDBScopesUndoTask_Delete::MergeFrom(const LevelDBScopesUndoTask_Delete& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesUndoTask.Delete)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesUndoTask_Delete::CopyFrom(const LevelDBScopesUndoTask_Delete& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesUndoTask.Delete)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesUndoTask_Delete::IsInitialized() const {
  return true;
}

void LevelDBScopesUndoTask_Delete::InternalSwap(LevelDBScopesUndoTask_Delete* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
}

std::string LevelDBScopesUndoTask_Delete::GetTypeName() const {
  return "content.LevelDBScopesUndoTask.Delete";
}


// ===================================================================

class LevelDBScopesUndoTask::_Internal {
 public:
  static const ::content::LevelDBScopesUndoTask_Put& put(const LevelDBScopesUndoTask* msg);
  static const ::content::LevelDBScopesUndoTask_Delete& delete_(const LevelDBScopesUndoTask* msg);
  static const ::content::LevelDBScopesKeyRange& delete_range(const LevelDBScopesUndoTask* msg);
};

const ::content::LevelDBScopesUndoTask_Put&
LevelDBScopesUndoTask::_Internal::put(const LevelDBScopesUndoTask* msg) {
  return *msg->operation_.put_;
}
const ::content::LevelDBScopesUndoTask_Delete&
LevelDBScopesUndoTask::_Internal::delete_(const LevelDBScopesUndoTask* msg) {
  return *msg->operation_.delete__;
}
const ::content::LevelDBScopesKeyRange&
LevelDBScopesUndoTask::_Internal::delete_range(const LevelDBScopesUndoTask* msg) {
  return *msg->operation_.delete_range_;
}
void LevelDBScopesUndoTask::set_allocated_put(::content::LevelDBScopesUndoTask_Put* put) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (put) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(put);
    if (message_arena != submessage_arena) {
      put = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, put, submessage_arena);
    }
    set_has_put();
    operation_.put_ = put;
  }
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesUndoTask.put)
}
void LevelDBScopesUndoTask::set_allocated_delete_(::content::LevelDBScopesUndoTask_Delete* delete_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_);
    if (message_arena != submessage_arena) {
      delete_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_, submessage_arena);
    }
    set_has_delete_();
    operation_.delete__ = delete_;
  }
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesUndoTask.delete)
}
void LevelDBScopesUndoTask::set_allocated_delete_range(::content::LevelDBScopesKeyRange* delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_range);
    if (message_arena != submessage_arena) {
      delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_range, submessage_arena);
    }
    set_has_delete_range();
    operation_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesUndoTask.delete_range)
}
LevelDBScopesUndoTask::LevelDBScopesUndoTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesUndoTask)
}
LevelDBScopesUndoTask::LevelDBScopesUndoTask(const LevelDBScopesUndoTask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kPut: {
      _internal_mutable_put()->::content::LevelDBScopesUndoTask_Put::MergeFrom(from._internal_put());
      break;
    }
    case kDelete: {
      _internal_mutable_delete_()->::content::LevelDBScopesUndoTask_Delete::MergeFrom(from._internal_delete_());
      break;
    }
    case kDeleteRange: {
      _internal_mutable_delete_range()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_delete_range());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesUndoTask)
}

inline void LevelDBScopesUndoTask::SharedCtor() {
clear_has_operation();
}

LevelDBScopesUndoTask::~LevelDBScopesUndoTask() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesUndoTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesUndoTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void LevelDBScopesUndoTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesUndoTask::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:content.LevelDBScopesUndoTask)
  switch (operation_case()) {
    case kPut: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.put_;
      }
      break;
    }
    case kDelete: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.delete__;
      }
      break;
    }
    case kDeleteRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.delete_range_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void LevelDBScopesUndoTask::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesUndoTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesUndoTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .content.LevelDBScopesUndoTask.Put put = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_put(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.LevelDBScopesUndoTask.Delete delete = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.LevelDBScopesKeyRange delete_range = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesUndoTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesUndoTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .content.LevelDBScopesUndoTask.Put put = 1;
  if (_internal_has_put()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::put(this),
        _Internal::put(this).GetCachedSize(), target, stream);
  }

  // .content.LevelDBScopesUndoTask.Delete delete = 2;
  if (_internal_has_delete_()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::delete_(this),
        _Internal::delete_(this).GetCachedSize(), target, stream);
  }

  // .content.LevelDBScopesKeyRange delete_range = 3;
  if (_internal_has_delete_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::delete_range(this),
        _Internal::delete_range(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesUndoTask)
  return target;
}

size_t LevelDBScopesUndoTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesUndoTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .content.LevelDBScopesUndoTask.Put put = 1;
    case kPut: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.put_);
      break;
    }
    // .content.LevelDBScopesUndoTask.Delete delete = 2;
    case kDelete: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.delete__);
      break;
    }
    // .content.LevelDBScopesKeyRange delete_range = 3;
    case kDeleteRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.delete_range_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesUndoTask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesUndoTask*>(
      &from));
}

void LevelDBScopesUndoTask::MergeFrom(const LevelDBScopesUndoTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesUndoTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kPut: {
      _internal_mutable_put()->::content::LevelDBScopesUndoTask_Put::MergeFrom(from._internal_put());
      break;
    }
    case kDelete: {
      _internal_mutable_delete_()->::content::LevelDBScopesUndoTask_Delete::MergeFrom(from._internal_delete_());
      break;
    }
    case kDeleteRange: {
      _internal_mutable_delete_range()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_delete_range());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesUndoTask::CopyFrom(const LevelDBScopesUndoTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesUndoTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesUndoTask::IsInitialized() const {
  return true;
}

void LevelDBScopesUndoTask::InternalSwap(LevelDBScopesUndoTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(operation_, other->operation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string LevelDBScopesUndoTask::GetTypeName() const {
  return "content.LevelDBScopesUndoTask";
}


// ===================================================================

class LevelDBScopesCleanupTask::_Internal {
 public:
  static const ::content::LevelDBScopesKeyRange& delete_range(const LevelDBScopesCleanupTask* msg);
  static const ::content::LevelDBScopesKeyRange& delete_range_and_compact(const LevelDBScopesCleanupTask* msg);
};

const ::content::LevelDBScopesKeyRange&
LevelDBScopesCleanupTask::_Internal::delete_range(const LevelDBScopesCleanupTask* msg) {
  return *msg->operation_.delete_range_;
}
const ::content::LevelDBScopesKeyRange&
LevelDBScopesCleanupTask::_Internal::delete_range_and_compact(const LevelDBScopesCleanupTask* msg) {
  return *msg->operation_.delete_range_and_compact_;
}
void LevelDBScopesCleanupTask::set_allocated_delete_range(::content::LevelDBScopesKeyRange* delete_range) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_range) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_range);
    if (message_arena != submessage_arena) {
      delete_range = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_range, submessage_arena);
    }
    set_has_delete_range();
    operation_.delete_range_ = delete_range;
  }
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesCleanupTask.delete_range)
}
void LevelDBScopesCleanupTask::set_allocated_delete_range_and_compact(::content::LevelDBScopesKeyRange* delete_range_and_compact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_operation();
  if (delete_range_and_compact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(delete_range_and_compact);
    if (message_arena != submessage_arena) {
      delete_range_and_compact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_range_and_compact, submessage_arena);
    }
    set_has_delete_range_and_compact();
    operation_.delete_range_and_compact_ = delete_range_and_compact;
  }
  // @@protoc_insertion_point(field_set_allocated:content.LevelDBScopesCleanupTask.delete_range_and_compact)
}
LevelDBScopesCleanupTask::LevelDBScopesCleanupTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:content.LevelDBScopesCleanupTask)
}
LevelDBScopesCleanupTask::LevelDBScopesCleanupTask(const LevelDBScopesCleanupTask& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_operation();
  switch (from.operation_case()) {
    case kDeleteRange: {
      _internal_mutable_delete_range()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_delete_range());
      break;
    }
    case kDeleteRangeAndCompact: {
      _internal_mutable_delete_range_and_compact()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_delete_range_and_compact());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:content.LevelDBScopesCleanupTask)
}

inline void LevelDBScopesCleanupTask::SharedCtor() {
clear_has_operation();
}

LevelDBScopesCleanupTask::~LevelDBScopesCleanupTask() {
  // @@protoc_insertion_point(destructor:content.LevelDBScopesCleanupTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LevelDBScopesCleanupTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_operation()) {
    clear_operation();
  }
}

void LevelDBScopesCleanupTask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LevelDBScopesCleanupTask::clear_operation() {
// @@protoc_insertion_point(one_of_clear_start:content.LevelDBScopesCleanupTask)
  switch (operation_case()) {
    case kDeleteRange: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.delete_range_;
      }
      break;
    }
    case kDeleteRangeAndCompact: {
      if (GetArenaForAllocation() == nullptr) {
        delete operation_.delete_range_and_compact_;
      }
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPERATION_NOT_SET;
}


void LevelDBScopesCleanupTask::Clear() {
// @@protoc_insertion_point(message_clear_start:content.LevelDBScopesCleanupTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_operation();
  _internal_metadata_.Clear<std::string>();
}

const char* LevelDBScopesCleanupTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .content.LevelDBScopesKeyRange delete_range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_range(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .content.LevelDBScopesKeyRange delete_range_and_compact = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_range_and_compact(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LevelDBScopesCleanupTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:content.LevelDBScopesCleanupTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .content.LevelDBScopesKeyRange delete_range = 1;
  if (_internal_has_delete_range()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::delete_range(this),
        _Internal::delete_range(this).GetCachedSize(), target, stream);
  }

  // .content.LevelDBScopesKeyRange delete_range_and_compact = 2;
  if (_internal_has_delete_range_and_compact()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::delete_range_and_compact(this),
        _Internal::delete_range_and_compact(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:content.LevelDBScopesCleanupTask)
  return target;
}

size_t LevelDBScopesCleanupTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:content.LevelDBScopesCleanupTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (operation_case()) {
    // .content.LevelDBScopesKeyRange delete_range = 1;
    case kDeleteRange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.delete_range_);
      break;
    }
    // .content.LevelDBScopesKeyRange delete_range_and_compact = 2;
    case kDeleteRangeAndCompact: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *operation_.delete_range_and_compact_);
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LevelDBScopesCleanupTask::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LevelDBScopesCleanupTask*>(
      &from));
}

void LevelDBScopesCleanupTask::MergeFrom(const LevelDBScopesCleanupTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:content.LevelDBScopesCleanupTask)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.operation_case()) {
    case kDeleteRange: {
      _internal_mutable_delete_range()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_delete_range());
      break;
    }
    case kDeleteRangeAndCompact: {
      _internal_mutable_delete_range_and_compact()->::content::LevelDBScopesKeyRange::MergeFrom(from._internal_delete_range_and_compact());
      break;
    }
    case OPERATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LevelDBScopesCleanupTask::CopyFrom(const LevelDBScopesCleanupTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:content.LevelDBScopesCleanupTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LevelDBScopesCleanupTask::IsInitialized() const {
  return true;
}

void LevelDBScopesCleanupTask::InternalSwap(LevelDBScopesCleanupTask* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(operation_, other->operation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string LevelDBScopesCleanupTask::GetTypeName() const {
  return "content.LevelDBScopesCleanupTask";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace content
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesKeyRange*
Arena::CreateMaybeMessage< ::content::LevelDBScopesKeyRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesKeyRange >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesMetadata*
Arena::CreateMaybeMessage< ::content::LevelDBScopesMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock*
Arena::CreateMaybeMessage< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesScopeMetadata_LevelDBLeveledLock >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesScopeMetadata*
Arena::CreateMaybeMessage< ::content::LevelDBScopesScopeMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesScopeMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesUndoTask_Put*
Arena::CreateMaybeMessage< ::content::LevelDBScopesUndoTask_Put >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesUndoTask_Put >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesUndoTask_Delete*
Arena::CreateMaybeMessage< ::content::LevelDBScopesUndoTask_Delete >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesUndoTask_Delete >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesUndoTask*
Arena::CreateMaybeMessage< ::content::LevelDBScopesUndoTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesUndoTask >(arena);
}
template<> PROTOBUF_NOINLINE ::content::LevelDBScopesCleanupTask*
Arena::CreateMaybeMessage< ::content::LevelDBScopesCleanupTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::content::LevelDBScopesCleanupTask >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
