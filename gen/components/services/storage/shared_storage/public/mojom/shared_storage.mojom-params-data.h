// components/services/storage/shared_storage/public/mojom/shared_storage.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_SHARED_STORAGE_PUBLIC_MOJOM_SHARED_STORAGE_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_SHARED_STORAGE_PUBLIC_MOJOM_SHARED_STORAGE_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace shared_storage_worklet {
namespace mojom {
namespace internal {

class ValidationContext;
class  SharedStorageEntriesListener_DidReadEntries_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t has_more_entries : 1;
  uint8_t pad1_[3];
  int32_t total_queued_to_send;
  mojo::internal::Pointer<mojo::internal::String_Data> error_message;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SharedStorageKeyAndOrValue_Data>>> entries;

 private:
  friend class mojo::internal::MessageFragment<SharedStorageEntriesListener_DidReadEntries_Params_Data>;

  SharedStorageEntriesListener_DidReadEntries_Params_Data();
  ~SharedStorageEntriesListener_DidReadEntries_Params_Data() = delete;
};
static_assert(sizeof(SharedStorageEntriesListener_DidReadEntries_Params_Data) == 32,
              "Bad sizeof(SharedStorageEntriesListener_DidReadEntries_Params_Data)");

}  // namespace internal


class SharedStorageEntriesListener_DidReadEntries_ParamsDataView {
 public:
  SharedStorageEntriesListener_DidReadEntries_ParamsDataView() = default;

  SharedStorageEntriesListener_DidReadEntries_ParamsDataView(
      internal::SharedStorageEntriesListener_DidReadEntries_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetErrorMessageDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadErrorMessage(UserType* output) {
    
    auto* pointer = data_->error_message.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetEntriesDataView(
      mojo::ArrayDataView<SharedStorageKeyAndOrValueDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadEntries(UserType* output) {
    
    auto* pointer = data_->entries.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::shared_storage_worklet::mojom::SharedStorageKeyAndOrValueDataView>>(
        pointer, output, message_);
  }
  bool has_more_entries() const {
    return data_->has_more_entries;
  }
  int32_t total_queued_to_send() const {
    return data_->total_queued_to_send;
  }
 private:
  internal::SharedStorageEntriesListener_DidReadEntries_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void SharedStorageEntriesListener_DidReadEntries_ParamsDataView::GetErrorMessageDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->error_message.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SharedStorageEntriesListener_DidReadEntries_ParamsDataView::GetEntriesDataView(
    mojo::ArrayDataView<SharedStorageKeyAndOrValueDataView>* output) {
  auto pointer = data_->entries.Get();
  *output = mojo::ArrayDataView<SharedStorageKeyAndOrValueDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace shared_storage_worklet

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_SHARED_STORAGE_PUBLIC_MOJOM_SHARED_STORAGE_MOJOM_PARAMS_DATA_H_