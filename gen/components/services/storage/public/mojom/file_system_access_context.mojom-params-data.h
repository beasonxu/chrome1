// components/services/storage/public/mojom/file_system_access_context.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_CONTEXT_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_CONTEXT_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  FileSystemAccessContext_SerializeHandle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data token;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessContext_SerializeHandle_Params_Data>;

  FileSystemAccessContext_SerializeHandle_Params_Data();
  ~FileSystemAccessContext_SerializeHandle_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessContext_SerializeHandle_Params_Data) == 16,
              "Bad sizeof(FileSystemAccessContext_SerializeHandle_Params_Data)");
class  FileSystemAccessContext_SerializeHandle_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> bits;

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessContext_SerializeHandle_ResponseParams_Data>;

  FileSystemAccessContext_SerializeHandle_ResponseParams_Data();
  ~FileSystemAccessContext_SerializeHandle_ResponseParams_Data() = delete;
};
static_assert(sizeof(FileSystemAccessContext_SerializeHandle_ResponseParams_Data) == 16,
              "Bad sizeof(FileSystemAccessContext_SerializeHandle_ResponseParams_Data)");
class  FileSystemAccessContext_DeserializeHandle_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Pointer<mojo::internal::Array_Data<uint8_t>> bits;
  mojo::internal::Handle_Data token;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<FileSystemAccessContext_DeserializeHandle_Params_Data>;

  FileSystemAccessContext_DeserializeHandle_Params_Data();
  ~FileSystemAccessContext_DeserializeHandle_Params_Data() = delete;
};
static_assert(sizeof(FileSystemAccessContext_DeserializeHandle_Params_Data) == 32,
              "Bad sizeof(FileSystemAccessContext_DeserializeHandle_Params_Data)");

}  // namespace internal


class FileSystemAccessContext_SerializeHandle_ParamsDataView {
 public:
  FileSystemAccessContext_SerializeHandle_ParamsDataView() = default;

  FileSystemAccessContext_SerializeHandle_ParamsDataView(
      internal::FileSystemAccessContext_SerializeHandle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessContext_SerializeHandle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessContext_SerializeHandle_ResponseParamsDataView {
 public:
  FileSystemAccessContext_SerializeHandle_ResponseParamsDataView() = default;

  FileSystemAccessContext_SerializeHandle_ResponseParamsDataView(
      internal::FileSystemAccessContext_SerializeHandle_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBitsDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBits(UserType* output) {
    
    auto* pointer = data_->bits.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
 private:
  internal::FileSystemAccessContext_SerializeHandle_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FileSystemAccessContext_DeserializeHandle_ParamsDataView {
 public:
  FileSystemAccessContext_DeserializeHandle_ParamsDataView() = default;

  FileSystemAccessContext_DeserializeHandle_ParamsDataView(
      internal::FileSystemAccessContext_DeserializeHandle_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetBitsDataView(
      mojo::ArrayDataView<uint8_t>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBits(UserType* output) {
    
    auto* pointer = data_->bits.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<uint8_t>>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeToken() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::FileSystemAccessTransferTokenInterfaceBase>>(
            &data_->token, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::FileSystemAccessContext_DeserializeHandle_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void FileSystemAccessContext_SerializeHandle_ResponseParamsDataView::GetBitsDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->bits.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}


inline void FileSystemAccessContext_DeserializeHandle_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void FileSystemAccessContext_DeserializeHandle_ParamsDataView::GetBitsDataView(
    mojo::ArrayDataView<uint8_t>* output) {
  auto pointer = data_->bits.Get();
  *output = mojo::ArrayDataView<uint8_t>(pointer, message_);
}

}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_FILE_SYSTEM_ACCESS_CONTEXT_MOJOM_PARAMS_DATA_H_