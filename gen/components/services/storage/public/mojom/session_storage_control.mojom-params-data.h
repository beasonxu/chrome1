// components/services/storage/public/mojom/session_storage_control.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_SESSION_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_SESSION_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  SessionStorageControl_BindNamespace_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_BindNamespace_Params_Data>;

  SessionStorageControl_BindNamespace_Params_Data();
  ~SessionStorageControl_BindNamespace_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_BindNamespace_Params_Data) == 24,
              "Bad sizeof(SessionStorageControl_BindNamespace_Params_Data)");
class  SessionStorageControl_BindNamespace_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_BindNamespace_ResponseParams_Data>;

  SessionStorageControl_BindNamespace_ResponseParams_Data();
  ~SessionStorageControl_BindNamespace_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_BindNamespace_ResponseParams_Data) == 16,
              "Bad sizeof(SessionStorageControl_BindNamespace_ResponseParams_Data)");
class  SessionStorageControl_BindStorageArea_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_BindStorageArea_Params_Data>;

  SessionStorageControl_BindStorageArea_Params_Data();
  ~SessionStorageControl_BindStorageArea_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_BindStorageArea_Params_Data) == 32,
              "Bad sizeof(SessionStorageControl_BindStorageArea_Params_Data)");
class  SessionStorageControl_BindStorageArea_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_BindStorageArea_ResponseParams_Data>;

  SessionStorageControl_BindStorageArea_ResponseParams_Data();
  ~SessionStorageControl_BindStorageArea_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_BindStorageArea_ResponseParams_Data) == 16,
              "Bad sizeof(SessionStorageControl_BindStorageArea_ResponseParams_Data)");
class  SessionStorageControl_GetUsage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_GetUsage_Params_Data>;

  SessionStorageControl_GetUsage_Params_Data();
  ~SessionStorageControl_GetUsage_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_GetUsage_Params_Data) == 8,
              "Bad sizeof(SessionStorageControl_GetUsage_Params_Data)");
class  SessionStorageControl_GetUsage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::SessionStorageUsageInfo_Data>>> info;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_GetUsage_ResponseParams_Data>;

  SessionStorageControl_GetUsage_ResponseParams_Data();
  ~SessionStorageControl_GetUsage_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_GetUsage_ResponseParams_Data) == 16,
              "Bad sizeof(SessionStorageControl_GetUsage_ResponseParams_Data)");
class  SessionStorageControl_DeleteStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_DeleteStorage_Params_Data>;

  SessionStorageControl_DeleteStorage_Params_Data();
  ~SessionStorageControl_DeleteStorage_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_DeleteStorage_Params_Data) == 24,
              "Bad sizeof(SessionStorageControl_DeleteStorage_Params_Data)");
class  SessionStorageControl_DeleteStorage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_DeleteStorage_ResponseParams_Data>;

  SessionStorageControl_DeleteStorage_ResponseParams_Data();
  ~SessionStorageControl_DeleteStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_DeleteStorage_ResponseParams_Data) == 8,
              "Bad sizeof(SessionStorageControl_DeleteStorage_ResponseParams_Data)");
class  SessionStorageControl_CleanUpStorage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_CleanUpStorage_Params_Data>;

  SessionStorageControl_CleanUpStorage_Params_Data();
  ~SessionStorageControl_CleanUpStorage_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_CleanUpStorage_Params_Data) == 8,
              "Bad sizeof(SessionStorageControl_CleanUpStorage_Params_Data)");
class  SessionStorageControl_CleanUpStorage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_CleanUpStorage_ResponseParams_Data>;

  SessionStorageControl_CleanUpStorage_ResponseParams_Data();
  ~SessionStorageControl_CleanUpStorage_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_CleanUpStorage_ResponseParams_Data) == 8,
              "Bad sizeof(SessionStorageControl_CleanUpStorage_ResponseParams_Data)");
class  SessionStorageControl_ScavengeUnusedNamespaces_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_ScavengeUnusedNamespaces_Params_Data>;

  SessionStorageControl_ScavengeUnusedNamespaces_Params_Data();
  ~SessionStorageControl_ScavengeUnusedNamespaces_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_ScavengeUnusedNamespaces_Params_Data) == 8,
              "Bad sizeof(SessionStorageControl_ScavengeUnusedNamespaces_Params_Data)");
class  SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data>;

  SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data();
  ~SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data) == 8,
              "Bad sizeof(SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data)");
class  SessionStorageControl_Flush_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_Flush_Params_Data>;

  SessionStorageControl_Flush_Params_Data();
  ~SessionStorageControl_Flush_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_Flush_Params_Data) == 8,
              "Bad sizeof(SessionStorageControl_Flush_Params_Data)");
class  SessionStorageControl_Flush_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_Flush_ResponseParams_Data>;

  SessionStorageControl_Flush_ResponseParams_Data();
  ~SessionStorageControl_Flush_ResponseParams_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_Flush_ResponseParams_Data) == 8,
              "Bad sizeof(SessionStorageControl_Flush_ResponseParams_Data)");
class  SessionStorageControl_PurgeMemory_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_PurgeMemory_Params_Data>;

  SessionStorageControl_PurgeMemory_Params_Data();
  ~SessionStorageControl_PurgeMemory_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_PurgeMemory_Params_Data) == 8,
              "Bad sizeof(SessionStorageControl_PurgeMemory_Params_Data)");
class  SessionStorageControl_CreateNamespace_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_CreateNamespace_Params_Data>;

  SessionStorageControl_CreateNamespace_Params_Data();
  ~SessionStorageControl_CreateNamespace_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_CreateNamespace_Params_Data) == 16,
              "Bad sizeof(SessionStorageControl_CreateNamespace_Params_Data)");
class  SessionStorageControl_CloneNamespace_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id_to_clone;
  mojo::internal::Pointer<mojo::internal::String_Data> clone_namespace_id;
  int32_t clone_type;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_CloneNamespace_Params_Data>;

  SessionStorageControl_CloneNamespace_Params_Data();
  ~SessionStorageControl_CloneNamespace_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_CloneNamespace_Params_Data) == 32,
              "Bad sizeof(SessionStorageControl_CloneNamespace_Params_Data)");
class  SessionStorageControl_DeleteNamespace_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> namespace_id;
  uint8_t should_persist : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<SessionStorageControl_DeleteNamespace_Params_Data>;

  SessionStorageControl_DeleteNamespace_Params_Data();
  ~SessionStorageControl_DeleteNamespace_Params_Data() = delete;
};
static_assert(sizeof(SessionStorageControl_DeleteNamespace_Params_Data) == 24,
              "Bad sizeof(SessionStorageControl_DeleteNamespace_Params_Data)");

}  // namespace internal


class SessionStorageControl_BindNamespace_ParamsDataView {
 public:
  SessionStorageControl_BindNamespace_ParamsDataView() = default;

  SessionStorageControl_BindNamespace_ParamsDataView(
      internal::SessionStorageControl_BindNamespace_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::SessionStorageNamespaceInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SessionStorageControl_BindNamespace_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionStorageControl_BindNamespace_ResponseParamsDataView {
 public:
  SessionStorageControl_BindNamespace_ResponseParamsDataView() = default;

  SessionStorageControl_BindNamespace_ResponseParamsDataView(
      internal::SessionStorageControl_BindNamespace_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::SessionStorageControl_BindNamespace_ResponseParams_Data* data_ = nullptr;
};



class SessionStorageControl_BindStorageArea_ParamsDataView {
 public:
  SessionStorageControl_BindStorageArea_ParamsDataView() = default;

  SessionStorageControl_BindStorageArea_ParamsDataView(
      internal::SessionStorageControl_BindStorageArea_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::StorageAreaInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::SessionStorageControl_BindStorageArea_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionStorageControl_BindStorageArea_ResponseParamsDataView {
 public:
  SessionStorageControl_BindStorageArea_ResponseParamsDataView() = default;

  SessionStorageControl_BindStorageArea_ResponseParamsDataView(
      internal::SessionStorageControl_BindStorageArea_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::SessionStorageControl_BindStorageArea_ResponseParams_Data* data_ = nullptr;
};



class SessionStorageControl_GetUsage_ParamsDataView {
 public:
  SessionStorageControl_GetUsage_ParamsDataView() = default;

  SessionStorageControl_GetUsage_ParamsDataView(
      internal::SessionStorageControl_GetUsage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_GetUsage_Params_Data* data_ = nullptr;
};



class SessionStorageControl_GetUsage_ResponseParamsDataView {
 public:
  SessionStorageControl_GetUsage_ResponseParamsDataView() = default;

  SessionStorageControl_GetUsage_ResponseParamsDataView(
      internal::SessionStorageControl_GetUsage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      mojo::ArrayDataView<SessionStorageUsageInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::SessionStorageUsageInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::SessionStorageControl_GetUsage_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionStorageControl_DeleteStorage_ParamsDataView {
 public:
  SessionStorageControl_DeleteStorage_ParamsDataView() = default;

  SessionStorageControl_DeleteStorage_ParamsDataView(
      internal::SessionStorageControl_DeleteStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SessionStorageControl_DeleteStorage_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionStorageControl_DeleteStorage_ResponseParamsDataView {
 public:
  SessionStorageControl_DeleteStorage_ResponseParamsDataView() = default;

  SessionStorageControl_DeleteStorage_ResponseParamsDataView(
      internal::SessionStorageControl_DeleteStorage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_DeleteStorage_ResponseParams_Data* data_ = nullptr;
};



class SessionStorageControl_CleanUpStorage_ParamsDataView {
 public:
  SessionStorageControl_CleanUpStorage_ParamsDataView() = default;

  SessionStorageControl_CleanUpStorage_ParamsDataView(
      internal::SessionStorageControl_CleanUpStorage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_CleanUpStorage_Params_Data* data_ = nullptr;
};



class SessionStorageControl_CleanUpStorage_ResponseParamsDataView {
 public:
  SessionStorageControl_CleanUpStorage_ResponseParamsDataView() = default;

  SessionStorageControl_CleanUpStorage_ResponseParamsDataView(
      internal::SessionStorageControl_CleanUpStorage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_CleanUpStorage_ResponseParams_Data* data_ = nullptr;
};



class SessionStorageControl_ScavengeUnusedNamespaces_ParamsDataView {
 public:
  SessionStorageControl_ScavengeUnusedNamespaces_ParamsDataView() = default;

  SessionStorageControl_ScavengeUnusedNamespaces_ParamsDataView(
      internal::SessionStorageControl_ScavengeUnusedNamespaces_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_ScavengeUnusedNamespaces_Params_Data* data_ = nullptr;
};



class SessionStorageControl_ScavengeUnusedNamespaces_ResponseParamsDataView {
 public:
  SessionStorageControl_ScavengeUnusedNamespaces_ResponseParamsDataView() = default;

  SessionStorageControl_ScavengeUnusedNamespaces_ResponseParamsDataView(
      internal::SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data* data_ = nullptr;
};



class SessionStorageControl_Flush_ParamsDataView {
 public:
  SessionStorageControl_Flush_ParamsDataView() = default;

  SessionStorageControl_Flush_ParamsDataView(
      internal::SessionStorageControl_Flush_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_Flush_Params_Data* data_ = nullptr;
};



class SessionStorageControl_Flush_ResponseParamsDataView {
 public:
  SessionStorageControl_Flush_ResponseParamsDataView() = default;

  SessionStorageControl_Flush_ResponseParamsDataView(
      internal::SessionStorageControl_Flush_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_Flush_ResponseParams_Data* data_ = nullptr;
};



class SessionStorageControl_PurgeMemory_ParamsDataView {
 public:
  SessionStorageControl_PurgeMemory_ParamsDataView() = default;

  SessionStorageControl_PurgeMemory_ParamsDataView(
      internal::SessionStorageControl_PurgeMemory_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::SessionStorageControl_PurgeMemory_Params_Data* data_ = nullptr;
};



class SessionStorageControl_CreateNamespace_ParamsDataView {
 public:
  SessionStorageControl_CreateNamespace_ParamsDataView() = default;

  SessionStorageControl_CreateNamespace_ParamsDataView(
      internal::SessionStorageControl_CreateNamespace_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::SessionStorageControl_CreateNamespace_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionStorageControl_CloneNamespace_ParamsDataView {
 public:
  SessionStorageControl_CloneNamespace_ParamsDataView() = default;

  SessionStorageControl_CloneNamespace_ParamsDataView(
      internal::SessionStorageControl_CloneNamespace_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNamespaceIdToCloneDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceIdToClone(UserType* output) {
    
    auto* pointer = data_->namespace_id_to_clone.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetCloneNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCloneNamespaceId(UserType* output) {
    
    auto* pointer = data_->clone_namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadCloneType(UserType* output) const {
    auto data_value = data_->clone_type;
    return mojo::internal::Deserialize<::storage::mojom::SessionStorageCloneType>(
        data_value, output);
  }
  SessionStorageCloneType clone_type() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::storage::mojom::SessionStorageCloneType>(data_->clone_type));
  }
 private:
  internal::SessionStorageControl_CloneNamespace_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SessionStorageControl_DeleteNamespace_ParamsDataView {
 public:
  SessionStorageControl_DeleteNamespace_ParamsDataView() = default;

  SessionStorageControl_DeleteNamespace_ParamsDataView(
      internal::SessionStorageControl_DeleteNamespace_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetNamespaceIdDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadNamespaceId(UserType* output) {
    
    auto* pointer = data_->namespace_id.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  bool should_persist() const {
    return data_->should_persist;
  }
 private:
  internal::SessionStorageControl_DeleteNamespace_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void SessionStorageControl_BindNamespace_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void SessionStorageControl_BindStorageArea_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void SessionStorageControl_BindStorageArea_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}






inline void SessionStorageControl_GetUsage_ResponseParamsDataView::GetInfoDataView(
    mojo::ArrayDataView<SessionStorageUsageInfoDataView>* output) {
  auto pointer = data_->info.Get();
  *output = mojo::ArrayDataView<SessionStorageUsageInfoDataView>(pointer, message_);
}


inline void SessionStorageControl_DeleteStorage_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}
inline void SessionStorageControl_DeleteStorage_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


















inline void SessionStorageControl_CreateNamespace_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void SessionStorageControl_CloneNamespace_ParamsDataView::GetNamespaceIdToCloneDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id_to_clone.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void SessionStorageControl_CloneNamespace_ParamsDataView::GetCloneNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->clone_namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}


inline void SessionStorageControl_DeleteNamespace_ParamsDataView::GetNamespaceIdDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->namespace_id.Get();
  *output = mojo::StringDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_SESSION_STORAGE_CONTROL_MOJOM_PARAMS_DATA_H_