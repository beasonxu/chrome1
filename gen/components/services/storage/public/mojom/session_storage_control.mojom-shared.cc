// components/services/storage/public/mojom/session_storage_control.mojom-shared.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "components/services/storage/public/mojom/session_storage_control.mojom-shared.h"

// Used to support stream output operator for enums.
// TODO(dcheng): Consider omitting this somehow if not needed.
#include <ostream>
#include <utility>

#include "base/strings/stringprintf.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/lib/validation_util.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/services/storage/public/mojom/session_storage_control.mojom-params-data.h"
namespace storage {
namespace mojom {

static NOINLINE const char* SessionStorageCloneTypeToStringHelper(SessionStorageCloneType value) {
  // Defined in a helper function to ensure that Clang generates a lookup table.
  switch(value) {
    case SessionStorageCloneType::kImmediate:
      return "kImmediate";
    case SessionStorageCloneType::kWaitForCloneOnNamespace:
      return "kWaitForCloneOnNamespace";
    default:
      return nullptr;
  }
}

std::string SessionStorageCloneTypeToString(SessionStorageCloneType value) {
  const char *str = SessionStorageCloneTypeToStringHelper(value);
  if (!str) {
    return base::StringPrintf("Unknown SessionStorageCloneType value: %i", static_cast<int32_t>(value));
  }
  return str;
}

std::ostream& operator<<(std::ostream& os, SessionStorageCloneType value) {
  return os << SessionStorageCloneTypeToString(value);
}

namespace internal {


// static
bool SessionStorageUsageInfo_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageUsageInfo_Data* object =
      static_cast<const SessionStorageUsageInfo_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->storage_key, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->storage_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id, validation_context,
                                         &namespace_id_validate_params)) {
    return false;
  }

  return true;
}

SessionStorageUsageInfo_Data::SessionStorageUsageInfo_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_BindNamespace_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_BindNamespace_Params_Data* object =
      static_cast<const SessionStorageControl_BindNamespace_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id, validation_context,
                                         &namespace_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 2, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

SessionStorageControl_BindNamespace_Params_Data::SessionStorageControl_BindNamespace_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_BindNamespace_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_BindNamespace_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_BindNamespace_ResponseParams_Data*>(data);

  return true;
}

SessionStorageControl_BindNamespace_ResponseParams_Data::SessionStorageControl_BindNamespace_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_BindStorageArea_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_BindStorageArea_Params_Data* object =
      static_cast<const SessionStorageControl_BindStorageArea_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->storage_key, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->storage_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id, validation_context,
                                         &namespace_id_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidateHandleOrInterfaceNonNullable(
          object->receiver, 3, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateHandleOrInterface(object->receiver,
                                                 validation_context)) {
    return false;
  }

  return true;
}

SessionStorageControl_BindStorageArea_Params_Data::SessionStorageControl_BindStorageArea_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_BindStorageArea_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_BindStorageArea_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_BindStorageArea_ResponseParams_Data*>(data);

  return true;
}

SessionStorageControl_BindStorageArea_ResponseParams_Data::SessionStorageControl_BindStorageArea_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_GetUsage_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_GetUsage_Params_Data* object =
      static_cast<const SessionStorageControl_GetUsage_Params_Data*>(data);

  return true;
}

SessionStorageControl_GetUsage_Params_Data::SessionStorageControl_GetUsage_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_GetUsage_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_GetUsage_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_GetUsage_ResponseParams_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->info, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams info_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->info, validation_context,
                                         &info_validate_params)) {
    return false;
  }

  return true;
}

SessionStorageControl_GetUsage_ResponseParams_Data::SessionStorageControl_GetUsage_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_DeleteStorage_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_DeleteStorage_Params_Data* object =
      static_cast<const SessionStorageControl_DeleteStorage_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->storage_key, 1, validation_context)) {
    return false;
  }
  if (!mojo::internal::ValidateStruct(object->storage_key, validation_context))
    return false;

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id, validation_context,
                                         &namespace_id_validate_params)) {
    return false;
  }

  return true;
}

SessionStorageControl_DeleteStorage_Params_Data::SessionStorageControl_DeleteStorage_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_DeleteStorage_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_DeleteStorage_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_DeleteStorage_ResponseParams_Data*>(data);

  return true;
}

SessionStorageControl_DeleteStorage_ResponseParams_Data::SessionStorageControl_DeleteStorage_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_CleanUpStorage_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_CleanUpStorage_Params_Data* object =
      static_cast<const SessionStorageControl_CleanUpStorage_Params_Data*>(data);

  return true;
}

SessionStorageControl_CleanUpStorage_Params_Data::SessionStorageControl_CleanUpStorage_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_CleanUpStorage_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_CleanUpStorage_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_CleanUpStorage_ResponseParams_Data*>(data);

  return true;
}

SessionStorageControl_CleanUpStorage_ResponseParams_Data::SessionStorageControl_CleanUpStorage_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_ScavengeUnusedNamespaces_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_ScavengeUnusedNamespaces_Params_Data* object =
      static_cast<const SessionStorageControl_ScavengeUnusedNamespaces_Params_Data*>(data);

  return true;
}

SessionStorageControl_ScavengeUnusedNamespaces_Params_Data::SessionStorageControl_ScavengeUnusedNamespaces_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data*>(data);

  return true;
}

SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data::SessionStorageControl_ScavengeUnusedNamespaces_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_Flush_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_Flush_Params_Data* object =
      static_cast<const SessionStorageControl_Flush_Params_Data*>(data);

  return true;
}

SessionStorageControl_Flush_Params_Data::SessionStorageControl_Flush_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_Flush_ResponseParams_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_Flush_ResponseParams_Data* object =
      static_cast<const SessionStorageControl_Flush_ResponseParams_Data*>(data);

  return true;
}

SessionStorageControl_Flush_ResponseParams_Data::SessionStorageControl_Flush_ResponseParams_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_PurgeMemory_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 8, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_PurgeMemory_Params_Data* object =
      static_cast<const SessionStorageControl_PurgeMemory_Params_Data*>(data);

  return true;
}

SessionStorageControl_PurgeMemory_Params_Data::SessionStorageControl_PurgeMemory_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_CreateNamespace_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 16, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_CreateNamespace_Params_Data* object =
      static_cast<const SessionStorageControl_CreateNamespace_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id, validation_context,
                                         &namespace_id_validate_params)) {
    return false;
  }

  return true;
}

SessionStorageControl_CreateNamespace_Params_Data::SessionStorageControl_CreateNamespace_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_CloneNamespace_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 32, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_CloneNamespace_Params_Data* object =
      static_cast<const SessionStorageControl_CloneNamespace_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id_to_clone, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_to_clone_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id_to_clone, validation_context,
                                         &namespace_id_to_clone_validate_params)) {
    return false;
  }

  if (!mojo::internal::ValidatePointerNonNullable(
          object->clone_namespace_id, 2, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams clone_namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->clone_namespace_id, validation_context,
                                         &clone_namespace_id_validate_params)) {
    return false;
  }


  if (!::storage::mojom::internal::SessionStorageCloneType_Data
        ::Validate(object->clone_type, validation_context))
    return false;

  return true;
}

SessionStorageControl_CloneNamespace_Params_Data::SessionStorageControl_CloneNamespace_Params_Data()
    : header_({sizeof(*this), 0}) {}


// static
bool SessionStorageControl_DeleteNamespace_Params_Data::Validate(
    const void* data,
    mojo::internal::ValidationContext* validation_context) {
  if (!data)
    return true;
  if (!ValidateUnversionedStructHeaderAndSizeAndClaimMemory(
          data, 24, validation_context)) {
    return false;
  }

  // NOTE: The memory backing |object| may be smaller than |sizeof(*object)| if
  // the message comes from an older version.
  [[maybe_unused]] const SessionStorageControl_DeleteNamespace_Params_Data* object =
      static_cast<const SessionStorageControl_DeleteNamespace_Params_Data*>(data);

  if (!mojo::internal::ValidatePointerNonNullable(
          object->namespace_id, 1, validation_context)) {
    return false;
  }
  const mojo::internal::ContainerValidateParams namespace_id_validate_params(
      0, false, nullptr);
  if (!mojo::internal::ValidateContainer(object->namespace_id, validation_context,
                                         &namespace_id_validate_params)) {
    return false;
  }

  return true;
}

SessionStorageControl_DeleteNamespace_Params_Data::SessionStorageControl_DeleteNamespace_Params_Data()
    : header_({sizeof(*this), 0}) {}

}  // namespace internal
}  // namespace mojom
}  // namespace storage

namespace perfetto {

// static
void TraceFormatTraits<::storage::mojom::SessionStorageCloneType>::WriteIntoTrace(
   perfetto::TracedValue context, ::storage::mojom::SessionStorageCloneType value) {
  return std::move(context).WriteString(::storage::mojom::SessionStorageCloneTypeToString(value));
}

} // namespace perfetto