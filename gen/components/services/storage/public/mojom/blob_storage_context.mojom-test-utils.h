// components/services/storage/public/mojom/blob_storage_context.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_BLOB_STORAGE_CONTEXT_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_BLOB_STORAGE_CONTEXT_MOJOM_TEST_UTILS_H_

#include "components/services/storage/public/mojom/blob_storage_context.mojom.h"


namespace storage {
namespace mojom {


class  BlobDataItemReaderInterceptorForTesting : public BlobDataItemReader {
  virtual BlobDataItemReader* GetForwardingInterface() = 0;
  void Read(uint64_t offset, uint64_t length, ::mojo::ScopedDataPipeProducerHandle pipe, ReadCallback callback) override;
  void ReadSideData(ReadSideDataCallback callback) override;
};
class  BlobDataItemReaderAsyncWaiter {
 public:
  explicit BlobDataItemReaderAsyncWaiter(BlobDataItemReader* proxy);

  BlobDataItemReaderAsyncWaiter(const BlobDataItemReaderAsyncWaiter&) = delete;
  BlobDataItemReaderAsyncWaiter& operator=(const BlobDataItemReaderAsyncWaiter&) = delete;

  ~BlobDataItemReaderAsyncWaiter();
  void Read(
      uint64_t offset, uint64_t length, ::mojo::ScopedDataPipeProducerHandle pipe, int32_t* out_success);
  void ReadSideData(
      int32_t* out_success, ::mojo_base::BigBuffer* out_data);

 private:
  BlobDataItemReader* const proxy_;
};


class  BlobStorageContextInterceptorForTesting : public BlobStorageContext {
  virtual BlobStorageContext* GetForwardingInterface() = 0;
  void RegisterFromDataItem(::mojo::PendingReceiver<::blink::mojom::Blob> blob, const std::string& uuid, BlobDataItemPtr item) override;
  void RegisterFromMemory(::mojo::PendingReceiver<::blink::mojom::Blob> blob, const std::string& uuid, ::mojo_base::BigBuffer data) override;
  void WriteBlobToFile(::mojo::PendingRemote<::blink::mojom::Blob> blob, const ::base::FilePath& path, bool flush_on_write, absl::optional<::base::Time> last_modified, WriteBlobToFileCallback callback) override;
};
class  BlobStorageContextAsyncWaiter {
 public:
  explicit BlobStorageContextAsyncWaiter(BlobStorageContext* proxy);

  BlobStorageContextAsyncWaiter(const BlobStorageContextAsyncWaiter&) = delete;
  BlobStorageContextAsyncWaiter& operator=(const BlobStorageContextAsyncWaiter&) = delete;

  ~BlobStorageContextAsyncWaiter();
  void WriteBlobToFile(
      ::mojo::PendingRemote<::blink::mojom::Blob> blob, const ::base::FilePath& path, bool flush_on_write, absl::optional<::base::Time> last_modified, WriteBlobToFileResult* out_result);

 private:
  BlobStorageContext* const proxy_;
};




}  // namespace mojom
}  // namespace storage

#endif  // COMPONENTS_SERVICES_STORAGE_PUBLIC_MOJOM_BLOB_STORAGE_CONTEXT_MOJOM_TEST_UTILS_H_