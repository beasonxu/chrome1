// components/services/storage/privileged/mojom/indexed_db_control.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_TEST_UTILS_H_
#define COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_TEST_UTILS_H_

#include "components/services/storage/privileged/mojom/indexed_db_control.mojom.h"


namespace storage {
namespace mojom {


class  IndexedDBObserverInterceptorForTesting : public IndexedDBObserver {
  virtual IndexedDBObserver* GetForwardingInterface() = 0;
  void OnIndexedDBListChanged(const ::storage::BucketLocator& bucket_locator) override;
  void OnIndexedDBContentChanged(const ::storage::BucketLocator& bucket_locator, const ::std::u16string& database_name, const ::std::u16string& object_store_name) override;
};
class  IndexedDBObserverAsyncWaiter {
 public:
  explicit IndexedDBObserverAsyncWaiter(IndexedDBObserver* proxy);

  IndexedDBObserverAsyncWaiter(const IndexedDBObserverAsyncWaiter&) = delete;
  IndexedDBObserverAsyncWaiter& operator=(const IndexedDBObserverAsyncWaiter&) = delete;

  ~IndexedDBObserverAsyncWaiter();

 private:
  IndexedDBObserver* const proxy_;
};


class  IndexedDBControlInterceptorForTesting : public IndexedDBControl {
  virtual IndexedDBControl* GetForwardingInterface() = 0;
  void BindIndexedDB(const ::blink::StorageKey& storage_key, ::mojo::PendingReceiver<::blink::mojom::IDBFactory> receiver) override;
  void BindIndexedDBForBucket(const ::storage::BucketLocator& bucket_locator, ::mojo::PendingReceiver<::blink::mojom::IDBFactory> receiver) override;
  void GetUsage(GetUsageCallback callback) override;
  void DeleteForStorageKey(const ::blink::StorageKey& storage_key, DeleteForStorageKeyCallback callback) override;
  void ForceClose(::storage::BucketId bucket_id, ForceCloseReason reason, ForceCloseCallback callback) override;
  void GetConnectionCount(::storage::BucketId bucket_id, GetConnectionCountCallback callback) override;
  void DownloadBucketData(::storage::BucketId bucket_id, DownloadBucketDataCallback callback) override;
  void GetAllBucketsDetails(GetAllBucketsDetailsCallback callback) override;
  void SetForceKeepSessionState() override;
  void AddObserver(::mojo::PendingRemote<IndexedDBObserver> observer) override;
  void ApplyPolicyUpdates(std::vector<::storage::mojom::StoragePolicyUpdatePtr> policy_updates) override;
  void BindTestInterface(::mojo::PendingReceiver<::storage::mojom::IndexedDBControlTest> receiver) override;
};
class  IndexedDBControlAsyncWaiter {
 public:
  explicit IndexedDBControlAsyncWaiter(IndexedDBControl* proxy);

  IndexedDBControlAsyncWaiter(const IndexedDBControlAsyncWaiter&) = delete;
  IndexedDBControlAsyncWaiter& operator=(const IndexedDBControlAsyncWaiter&) = delete;

  ~IndexedDBControlAsyncWaiter();
  void GetUsage(
      std::vector<::storage::mojom::StorageUsageInfoPtr>* out_info);
  void DeleteForStorageKey(
      const ::blink::StorageKey& storage_key, bool* out_success);
  void ForceClose(
      ::storage::BucketId bucket_id, ForceCloseReason reason);
  void GetConnectionCount(
      ::storage::BucketId bucket_id, uint64_t* out_connection_count);
  void DownloadBucketData(
      ::storage::BucketId bucket_id, bool* out_success, ::base::FilePath* out_temp_path, ::base::FilePath* out_zip_path);
  void GetAllBucketsDetails(
      bool* out_incognito, ::base::Value::List* out_details);

 private:
  IndexedDBControl* const proxy_;
};




}  // namespace mojom
}  // namespace storage

#endif  // COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_TEST_UTILS_H_