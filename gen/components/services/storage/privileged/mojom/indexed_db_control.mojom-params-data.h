// components/services/storage/privileged/mojom/indexed_db_control.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  IndexedDBObserver_OnIndexedDBListChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBObserver_OnIndexedDBListChanged_Params_Data>;

  IndexedDBObserver_OnIndexedDBListChanged_Params_Data();
  ~IndexedDBObserver_OnIndexedDBListChanged_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBObserver_OnIndexedDBListChanged_Params_Data) == 16,
              "Bad sizeof(IndexedDBObserver_OnIndexedDBListChanged_Params_Data)");
class  IndexedDBObserver_OnIndexedDBContentChanged_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> database_name;
  mojo::internal::Pointer<::mojo_base::mojom::internal::String16_Data> object_store_name;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBObserver_OnIndexedDBContentChanged_Params_Data>;

  IndexedDBObserver_OnIndexedDBContentChanged_Params_Data();
  ~IndexedDBObserver_OnIndexedDBContentChanged_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBObserver_OnIndexedDBContentChanged_Params_Data) == 32,
              "Bad sizeof(IndexedDBObserver_OnIndexedDBContentChanged_Params_Data)");
class  IndexedDBControl_BindIndexedDB_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_BindIndexedDB_Params_Data>;

  IndexedDBControl_BindIndexedDB_Params_Data();
  ~IndexedDBControl_BindIndexedDB_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_BindIndexedDB_Params_Data) == 24,
              "Bad sizeof(IndexedDBControl_BindIndexedDB_Params_Data)");
class  IndexedDBControl_BindIndexedDBForBucket_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_BindIndexedDBForBucket_Params_Data>;

  IndexedDBControl_BindIndexedDBForBucket_Params_Data();
  ~IndexedDBControl_BindIndexedDBForBucket_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_BindIndexedDBForBucket_Params_Data) == 24,
              "Bad sizeof(IndexedDBControl_BindIndexedDBForBucket_Params_Data)");
class  IndexedDBControl_GetUsage_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_GetUsage_Params_Data>;

  IndexedDBControl_GetUsage_Params_Data();
  ~IndexedDBControl_GetUsage_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetUsage_Params_Data) == 8,
              "Bad sizeof(IndexedDBControl_GetUsage_Params_Data)");
class  IndexedDBControl_GetUsage_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::storage::mojom::internal::StorageUsageInfo_Data>>> info;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_GetUsage_ResponseParams_Data>;

  IndexedDBControl_GetUsage_ResponseParams_Data();
  ~IndexedDBControl_GetUsage_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetUsage_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControl_GetUsage_ResponseParams_Data)");
class  IndexedDBControl_DeleteForStorageKey_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::blink::mojom::internal::StorageKey_Data> storage_key;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_DeleteForStorageKey_Params_Data>;

  IndexedDBControl_DeleteForStorageKey_Params_Data();
  ~IndexedDBControl_DeleteForStorageKey_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DeleteForStorageKey_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_DeleteForStorageKey_Params_Data)");
class  IndexedDBControl_DeleteForStorageKey_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_DeleteForStorageKey_ResponseParams_Data>;

  IndexedDBControl_DeleteForStorageKey_ResponseParams_Data();
  ~IndexedDBControl_DeleteForStorageKey_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DeleteForStorageKey_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControl_DeleteForStorageKey_ResponseParams_Data)");
class  IndexedDBControl_ForceClose_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketId_Data> bucket_id;
  int32_t reason;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_ForceClose_Params_Data>;

  IndexedDBControl_ForceClose_Params_Data();
  ~IndexedDBControl_ForceClose_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_ForceClose_Params_Data) == 24,
              "Bad sizeof(IndexedDBControl_ForceClose_Params_Data)");
class  IndexedDBControl_ForceClose_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_ForceClose_ResponseParams_Data>;

  IndexedDBControl_ForceClose_ResponseParams_Data();
  ~IndexedDBControl_ForceClose_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_ForceClose_ResponseParams_Data) == 8,
              "Bad sizeof(IndexedDBControl_ForceClose_ResponseParams_Data)");
class  IndexedDBControl_GetConnectionCount_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketId_Data> bucket_id;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_GetConnectionCount_Params_Data>;

  IndexedDBControl_GetConnectionCount_Params_Data();
  ~IndexedDBControl_GetConnectionCount_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetConnectionCount_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_GetConnectionCount_Params_Data)");
class  IndexedDBControl_GetConnectionCount_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t connection_count;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_GetConnectionCount_ResponseParams_Data>;

  IndexedDBControl_GetConnectionCount_ResponseParams_Data();
  ~IndexedDBControl_GetConnectionCount_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetConnectionCount_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControl_GetConnectionCount_ResponseParams_Data)");
class  IndexedDBControl_DownloadBucketData_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketId_Data> bucket_id;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_DownloadBucketData_Params_Data>;

  IndexedDBControl_DownloadBucketData_Params_Data();
  ~IndexedDBControl_DownloadBucketData_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DownloadBucketData_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_DownloadBucketData_Params_Data)");
class  IndexedDBControl_DownloadBucketData_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t success : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> temp_path;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> zip_path;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_DownloadBucketData_ResponseParams_Data>;

  IndexedDBControl_DownloadBucketData_ResponseParams_Data();
  ~IndexedDBControl_DownloadBucketData_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_DownloadBucketData_ResponseParams_Data) == 32,
              "Bad sizeof(IndexedDBControl_DownloadBucketData_ResponseParams_Data)");
class  IndexedDBControl_GetAllBucketsDetails_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_GetAllBucketsDetails_Params_Data>;

  IndexedDBControl_GetAllBucketsDetails_Params_Data();
  ~IndexedDBControl_GetAllBucketsDetails_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetAllBucketsDetails_Params_Data) == 8,
              "Bad sizeof(IndexedDBControl_GetAllBucketsDetails_Params_Data)");
class  IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t incognito : 1;
  uint8_t pad0_[7];
  mojo::internal::Pointer<::mojo_base::mojom::internal::ListValue_Data> details;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data>;

  IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data();
  ~IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data) == 24,
              "Bad sizeof(IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data)");
class  IndexedDBControl_SetForceKeepSessionState_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_SetForceKeepSessionState_Params_Data>;

  IndexedDBControl_SetForceKeepSessionState_Params_Data();
  ~IndexedDBControl_SetForceKeepSessionState_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_SetForceKeepSessionState_Params_Data) == 8,
              "Bad sizeof(IndexedDBControl_SetForceKeepSessionState_Params_Data)");
class  IndexedDBControl_AddObserver_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data observer;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_AddObserver_Params_Data>;

  IndexedDBControl_AddObserver_Params_Data();
  ~IndexedDBControl_AddObserver_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_AddObserver_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_AddObserver_Params_Data)");
class  IndexedDBControl_ApplyPolicyUpdates_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::storage::mojom::internal::StoragePolicyUpdate_Data>>> policy_updates;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_ApplyPolicyUpdates_Params_Data>;

  IndexedDBControl_ApplyPolicyUpdates_Params_Data();
  ~IndexedDBControl_ApplyPolicyUpdates_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_ApplyPolicyUpdates_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_ApplyPolicyUpdates_Params_Data)");
class  IndexedDBControl_BindTestInterface_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControl_BindTestInterface_Params_Data>;

  IndexedDBControl_BindTestInterface_Params_Data();
  ~IndexedDBControl_BindTestInterface_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControl_BindTestInterface_Params_Data) == 16,
              "Bad sizeof(IndexedDBControl_BindTestInterface_Params_Data)");

}  // namespace internal


class IndexedDBObserver_OnIndexedDBListChanged_ParamsDataView {
 public:
  IndexedDBObserver_OnIndexedDBListChanged_ParamsDataView() = default;

  IndexedDBObserver_OnIndexedDBListChanged_ParamsDataView(
      internal::IndexedDBObserver_OnIndexedDBListChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBObserver_OnIndexedDBListChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView {
 public:
  IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView() = default;

  IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView(
      internal::IndexedDBObserver_OnIndexedDBContentChanged_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
  inline void GetDatabaseNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDatabaseName(UserType* output) {
    
    auto* pointer = data_->database_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
  inline void GetObjectStoreNameDataView(
      ::mojo_base::mojom::String16DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadObjectStoreName(UserType* output) {
    
    auto* pointer = data_->object_store_name.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::String16DataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBObserver_OnIndexedDBContentChanged_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_BindIndexedDB_ParamsDataView {
 public:
  IndexedDBControl_BindIndexedDB_ParamsDataView() = default;

  IndexedDBControl_BindIndexedDB_ParamsDataView(
      internal::IndexedDBControl_BindIndexedDB_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::IDBFactoryInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IndexedDBControl_BindIndexedDB_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_BindIndexedDBForBucket_ParamsDataView {
 public:
  IndexedDBControl_BindIndexedDBForBucket_ParamsDataView() = default;

  IndexedDBControl_BindIndexedDBForBucket_ParamsDataView(
      internal::IndexedDBControl_BindIndexedDBForBucket_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::blink::mojom::IDBFactoryInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IndexedDBControl_BindIndexedDBForBucket_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_GetUsage_ParamsDataView {
 public:
  IndexedDBControl_GetUsage_ParamsDataView() = default;

  IndexedDBControl_GetUsage_ParamsDataView(
      internal::IndexedDBControl_GetUsage_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_GetUsage_Params_Data* data_ = nullptr;
};



class IndexedDBControl_GetUsage_ResponseParamsDataView {
 public:
  IndexedDBControl_GetUsage_ResponseParamsDataView() = default;

  IndexedDBControl_GetUsage_ResponseParamsDataView(
      internal::IndexedDBControl_GetUsage_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetInfoDataView(
      mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadInfo(UserType* output) {
    
    auto* pointer = data_->info.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_GetUsage_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_DeleteForStorageKey_ParamsDataView {
 public:
  IndexedDBControl_DeleteForStorageKey_ParamsDataView() = default;

  IndexedDBControl_DeleteForStorageKey_ParamsDataView(
      internal::IndexedDBControl_DeleteForStorageKey_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetStorageKeyDataView(
      ::blink::mojom::StorageKeyDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadStorageKey(UserType* output) {
    
    auto* pointer = data_->storage_key.Get();
    return mojo::internal::Deserialize<::blink::mojom::StorageKeyDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_DeleteForStorageKey_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_DeleteForStorageKey_ResponseParamsDataView {
 public:
  IndexedDBControl_DeleteForStorageKey_ResponseParamsDataView() = default;

  IndexedDBControl_DeleteForStorageKey_ResponseParamsDataView(
      internal::IndexedDBControl_DeleteForStorageKey_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
 private:
  internal::IndexedDBControl_DeleteForStorageKey_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControl_ForceClose_ParamsDataView {
 public:
  IndexedDBControl_ForceClose_ParamsDataView() = default;

  IndexedDBControl_ForceClose_ParamsDataView(
      internal::IndexedDBControl_ForceClose_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketIdDataView(
      ::storage::mojom::BucketIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketId(UserType* output) {
    
    auto* pointer = data_->bucket_id.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketIdDataView>(
        pointer, output, message_);
  }
  template <typename UserType>
  [[nodiscard]] bool ReadReason(UserType* output) const {
    auto data_value = data_->reason;
    return mojo::internal::Deserialize<::storage::mojom::ForceCloseReason>(
        data_value, output);
  }
  ForceCloseReason reason() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::storage::mojom::ForceCloseReason>(data_->reason));
  }
 private:
  internal::IndexedDBControl_ForceClose_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_ForceClose_ResponseParamsDataView {
 public:
  IndexedDBControl_ForceClose_ResponseParamsDataView() = default;

  IndexedDBControl_ForceClose_ResponseParamsDataView(
      internal::IndexedDBControl_ForceClose_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_ForceClose_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControl_GetConnectionCount_ParamsDataView {
 public:
  IndexedDBControl_GetConnectionCount_ParamsDataView() = default;

  IndexedDBControl_GetConnectionCount_ParamsDataView(
      internal::IndexedDBControl_GetConnectionCount_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketIdDataView(
      ::storage::mojom::BucketIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketId(UserType* output) {
    
    auto* pointer = data_->bucket_id.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_GetConnectionCount_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_GetConnectionCount_ResponseParamsDataView {
 public:
  IndexedDBControl_GetConnectionCount_ResponseParamsDataView() = default;

  IndexedDBControl_GetConnectionCount_ResponseParamsDataView(
      internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  uint64_t connection_count() const {
    return data_->connection_count;
  }
 private:
  internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControl_DownloadBucketData_ParamsDataView {
 public:
  IndexedDBControl_DownloadBucketData_ParamsDataView() = default;

  IndexedDBControl_DownloadBucketData_ParamsDataView(
      internal::IndexedDBControl_DownloadBucketData_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketIdDataView(
      ::storage::mojom::BucketIdDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketId(UserType* output) {
    
    auto* pointer = data_->bucket_id.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketIdDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_DownloadBucketData_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_DownloadBucketData_ResponseParamsDataView {
 public:
  IndexedDBControl_DownloadBucketData_ResponseParamsDataView() = default;

  IndexedDBControl_DownloadBucketData_ResponseParamsDataView(
      internal::IndexedDBControl_DownloadBucketData_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool success() const {
    return data_->success;
  }
  inline void GetTempPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadTempPath(UserType* output) {
    
    auto* pointer = data_->temp_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
  inline void GetZipPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadZipPath(UserType* output) {
    
    auto* pointer = data_->zip_path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_DownloadBucketData_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_GetAllBucketsDetails_ParamsDataView {
 public:
  IndexedDBControl_GetAllBucketsDetails_ParamsDataView() = default;

  IndexedDBControl_GetAllBucketsDetails_ParamsDataView(
      internal::IndexedDBControl_GetAllBucketsDetails_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_GetAllBucketsDetails_Params_Data* data_ = nullptr;
};



class IndexedDBControl_GetAllBucketsDetails_ResponseParamsDataView {
 public:
  IndexedDBControl_GetAllBucketsDetails_ResponseParamsDataView() = default;

  IndexedDBControl_GetAllBucketsDetails_ResponseParamsDataView(
      internal::IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  bool incognito() const {
    return data_->incognito;
  }
  inline void GetDetailsDataView(
      ::mojo_base::mojom::ListValueDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDetails(UserType* output) {
    
    auto* pointer = data_->details.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ListValueDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_SetForceKeepSessionState_ParamsDataView {
 public:
  IndexedDBControl_SetForceKeepSessionState_ParamsDataView() = default;

  IndexedDBControl_SetForceKeepSessionState_ParamsDataView(
      internal::IndexedDBControl_SetForceKeepSessionState_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControl_SetForceKeepSessionState_Params_Data* data_ = nullptr;
};



class IndexedDBControl_AddObserver_ParamsDataView {
 public:
  IndexedDBControl_AddObserver_ParamsDataView() = default;

  IndexedDBControl_AddObserver_ParamsDataView(
      internal::IndexedDBControl_AddObserver_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeObserver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::storage::mojom::IndexedDBObserverInterfaceBase>>(
            &data_->observer, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IndexedDBControl_AddObserver_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_ApplyPolicyUpdates_ParamsDataView {
 public:
  IndexedDBControl_ApplyPolicyUpdates_ParamsDataView() = default;

  IndexedDBControl_ApplyPolicyUpdates_ParamsDataView(
      internal::IndexedDBControl_ApplyPolicyUpdates_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPolicyUpdatesDataView(
      mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPolicyUpdates(UserType* output) {
    
    auto* pointer = data_->policy_updates.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControl_ApplyPolicyUpdates_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControl_BindTestInterface_ParamsDataView {
 public:
  IndexedDBControl_BindTestInterface_ParamsDataView() = default;

  IndexedDBControl_BindTestInterface_ParamsDataView(
      internal::IndexedDBControl_BindTestInterface_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::storage::mojom::IndexedDBControlTestInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IndexedDBControl_BindTestInterface_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void IndexedDBObserver_OnIndexedDBListChanged_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}


inline void IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}
inline void IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView::GetDatabaseNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->database_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}
inline void IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView::GetObjectStoreNameDataView(
    ::mojo_base::mojom::String16DataView* output) {
  auto pointer = data_->object_store_name.Get();
  *output = ::mojo_base::mojom::String16DataView(pointer, message_);
}


inline void IndexedDBControl_BindIndexedDB_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}


inline void IndexedDBControl_BindIndexedDBForBucket_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}




inline void IndexedDBControl_GetUsage_ResponseParamsDataView::GetInfoDataView(
    mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>* output) {
  auto pointer = data_->info.Get();
  *output = mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>(pointer, message_);
}


inline void IndexedDBControl_DeleteForStorageKey_ParamsDataView::GetStorageKeyDataView(
    ::blink::mojom::StorageKeyDataView* output) {
  auto pointer = data_->storage_key.Get();
  *output = ::blink::mojom::StorageKeyDataView(pointer, message_);
}




inline void IndexedDBControl_ForceClose_ParamsDataView::GetBucketIdDataView(
    ::storage::mojom::BucketIdDataView* output) {
  auto pointer = data_->bucket_id.Get();
  *output = ::storage::mojom::BucketIdDataView(pointer, message_);
}




inline void IndexedDBControl_GetConnectionCount_ParamsDataView::GetBucketIdDataView(
    ::storage::mojom::BucketIdDataView* output) {
  auto pointer = data_->bucket_id.Get();
  *output = ::storage::mojom::BucketIdDataView(pointer, message_);
}




inline void IndexedDBControl_DownloadBucketData_ParamsDataView::GetBucketIdDataView(
    ::storage::mojom::BucketIdDataView* output) {
  auto pointer = data_->bucket_id.Get();
  *output = ::storage::mojom::BucketIdDataView(pointer, message_);
}


inline void IndexedDBControl_DownloadBucketData_ResponseParamsDataView::GetTempPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->temp_path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}
inline void IndexedDBControl_DownloadBucketData_ResponseParamsDataView::GetZipPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->zip_path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}




inline void IndexedDBControl_GetAllBucketsDetails_ResponseParamsDataView::GetDetailsDataView(
    ::mojo_base::mojom::ListValueDataView* output) {
  auto pointer = data_->details.Get();
  *output = ::mojo_base::mojom::ListValueDataView(pointer, message_);
}






inline void IndexedDBControl_ApplyPolicyUpdates_ParamsDataView::GetPolicyUpdatesDataView(
    mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>* output) {
  auto pointer = data_->policy_updates.Get();
  *output = mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_PARAMS_DATA_H_