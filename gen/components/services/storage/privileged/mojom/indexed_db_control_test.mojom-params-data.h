// components/services/storage/privileged/mojom/indexed_db_control_test.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_TEST_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_TEST_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace storage {
namespace mojom {
namespace internal {

class ValidationContext;
class  MockFailureInjector_FailOperation_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t failure_class;
  int32_t failure_method;
  int32_t instance_num;
  int32_t call_num;

 private:
  friend class mojo::internal::MessageFragment<MockFailureInjector_FailOperation_Params_Data>;

  MockFailureInjector_FailOperation_Params_Data();
  ~MockFailureInjector_FailOperation_Params_Data() = delete;
};
static_assert(sizeof(MockFailureInjector_FailOperation_Params_Data) == 24,
              "Bad sizeof(MockFailureInjector_FailOperation_Params_Data)");
class  MockFailureInjector_FailOperation_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<MockFailureInjector_FailOperation_ResponseParams_Data>;

  MockFailureInjector_FailOperation_ResponseParams_Data();
  ~MockFailureInjector_FailOperation_ResponseParams_Data() = delete;
};
static_assert(sizeof(MockFailureInjector_FailOperation_ResponseParams_Data) == 8,
              "Bad sizeof(MockFailureInjector_FailOperation_ResponseParams_Data)");
class  IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data>;

  IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data();
  ~IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data)");
class  IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data>;

  IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_GetFilePathForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetFilePathForTesting_Params_Data>;

  IndexedDBControlTest_GetFilePathForTesting_Params_Data();
  ~IndexedDBControlTest_GetFilePathForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetFilePathForTesting_Params_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetFilePathForTesting_Params_Data)");
class  IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data>;

  IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_ResetCachesForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_ResetCachesForTesting_Params_Data>;

  IndexedDBControlTest_ResetCachesForTesting_Params_Data();
  ~IndexedDBControlTest_ResetCachesForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_ResetCachesForTesting_Params_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_ResetCachesForTesting_Params_Data)");
class  IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data>;

  IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data>;

  IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data();
  ~IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data)");
class  IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint8_t downgraded : 1;
  uint8_t padfinal_[7];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data>;

  IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data>;

  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data();
  ~IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data)");
class  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data>;

  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;
  mojo::internal::Pointer<mojo::internal::String_Data> key;
  mojo::internal::Pointer<mojo::internal::String_Data> value;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data>;

  IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data();
  ~IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data) == 32,
              "Bad sizeof(IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data)");
class  IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data>;

  IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_GetBlobCountForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetBlobCountForTesting_Params_Data>;

  IndexedDBControlTest_GetBlobCountForTesting_Params_Data();
  ~IndexedDBControlTest_GetBlobCountForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetBlobCountForTesting_Params_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetBlobCountForTesting_Params_Data)");
class  IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t num_blobs;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data>;

  IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;
  int64_t database_id;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data>;

  IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data();
  ~IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data) == 24,
              "Bad sizeof(IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data)");
class  IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int64_t next_blob_number;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data>;

  IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_GetPathForBlobForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;
  int64_t database_id;
  int64_t blob_number;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetPathForBlobForTesting_Params_Data>;

  IndexedDBControlTest_GetPathForBlobForTesting_Params_Data();
  ~IndexedDBControlTest_GetPathForBlobForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetPathForBlobForTesting_Params_Data) == 32,
              "Bad sizeof(IndexedDBControlTest_GetPathForBlobForTesting_Params_Data)");
class  IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::FilePath_Data> path;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data>;

  IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::storage::mojom::internal::BucketLocator_Data> bucket_locator;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data>;

  IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data();
  ~IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data)");
class  IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data>;

  IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data receiver;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data>;

  IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data();
  ~IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data) == 16,
              "Bad sizeof(IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data)");
class  IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data>;

  IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data();
  ~IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data)");
class  IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::String_Data> schema_version_key;
  mojo::internal::Pointer<mojo::internal::String_Data> data_version_key;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data>;

  IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data) == 24,
              "Bad sizeof(IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data)");
class  IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data>;

  IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data();
  ~IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data)");
class  IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data>;

  IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data();
  ~IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data() = delete;
};
static_assert(sizeof(IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data) == 8,
              "Bad sizeof(IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data)");

}  // namespace internal


class MockFailureInjector_FailOperation_ParamsDataView {
 public:
  MockFailureInjector_FailOperation_ParamsDataView() = default;

  MockFailureInjector_FailOperation_ParamsDataView(
      internal::MockFailureInjector_FailOperation_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadFailureClass(UserType* output) const {
    auto data_value = data_->failure_class;
    return mojo::internal::Deserialize<::storage::mojom::FailClass>(
        data_value, output);
  }
  FailClass failure_class() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::storage::mojom::FailClass>(data_->failure_class));
  }
  template <typename UserType>
  [[nodiscard]] bool ReadFailureMethod(UserType* output) const {
    auto data_value = data_->failure_method;
    return mojo::internal::Deserialize<::storage::mojom::FailMethod>(
        data_value, output);
  }
  FailMethod failure_method() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::storage::mojom::FailMethod>(data_->failure_method));
  }
  int32_t instance_num() const {
    return data_->instance_num;
  }
  int32_t call_num() const {
    return data_->call_num;
  }
 private:
  internal::MockFailureInjector_FailOperation_Params_Data* data_ = nullptr;
};



class MockFailureInjector_FailOperation_ResponseParamsDataView {
 public:
  MockFailureInjector_FailOperation_ResponseParamsDataView() = default;

  MockFailureInjector_FailOperation_ResponseParamsDataView(
      internal::MockFailureInjector_FailOperation_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::MockFailureInjector_FailOperation_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_GetBaseDataPathForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_GetBaseDataPathForTesting_ParamsDataView() = default;

  IndexedDBControlTest_GetBaseDataPathForTesting_ParamsDataView(
      internal::IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_GetBaseDataPathForTesting_Params_Data* data_ = nullptr;
};



class IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_GetFilePathForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_GetFilePathForTesting_ParamsDataView() = default;

  IndexedDBControlTest_GetFilePathForTesting_ParamsDataView(
      internal::IndexedDBControlTest_GetFilePathForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_GetFilePathForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_GetFilePathForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_GetFilePathForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_GetFilePathForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_GetFilePathForTesting_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_ResetCachesForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_ResetCachesForTesting_ParamsDataView() = default;

  IndexedDBControlTest_ResetCachesForTesting_ParamsDataView(
      internal::IndexedDBControlTest_ResetCachesForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_ResetCachesForTesting_Params_Data* data_ = nullptr;
};



class IndexedDBControlTest_ResetCachesForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_ResetCachesForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_ResetCachesForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_ResetCachesForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_ForceSchemaDowngradeForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_ForceSchemaDowngradeForTesting_ParamsDataView() = default;

  IndexedDBControlTest_ForceSchemaDowngradeForTesting_ParamsDataView(
      internal::IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_ForceSchemaDowngradeForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  bool downgraded() const {
    return data_->downgraded;
  }
 private:
  internal::IndexedDBControlTest_ForceSchemaDowngradeForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ParamsDataView() = default;

  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ParamsDataView(
      internal::IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_HasV2SchemaCorruptionForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::storage::mojom::V2SchemaCorruptionStatus>(
        data_value, output);
  }
  V2SchemaCorruptionStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::storage::mojom::V2SchemaCorruptionStatus>(data_->status));
  }
 private:
  internal::IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_WriteToIndexedDBForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_WriteToIndexedDBForTesting_ParamsDataView() = default;

  IndexedDBControlTest_WriteToIndexedDBForTesting_ParamsDataView(
      internal::IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
  inline void GetKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadKey(UserType* output) {
    
    auto* pointer = data_->key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetValueDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadValue(UserType* output) {
    
    auto* pointer = data_->value.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_WriteToIndexedDBForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_WriteToIndexedDBForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_GetBlobCountForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_GetBlobCountForTesting_ParamsDataView() = default;

  IndexedDBControlTest_GetBlobCountForTesting_ParamsDataView(
      internal::IndexedDBControlTest_GetBlobCountForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_GetBlobCountForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_GetBlobCountForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_GetBlobCountForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_GetBlobCountForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t num_blobs() const {
    return data_->num_blobs;
  }
 private:
  internal::IndexedDBControlTest_GetBlobCountForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_GetNextBlobNumberForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_GetNextBlobNumberForTesting_ParamsDataView() = default;

  IndexedDBControlTest_GetNextBlobNumberForTesting_ParamsDataView(
      internal::IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
  int64_t database_id() const {
    return data_->database_id;
  }
 private:
  internal::IndexedDBControlTest_GetNextBlobNumberForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  int64_t next_blob_number() const {
    return data_->next_blob_number;
  }
 private:
  internal::IndexedDBControlTest_GetNextBlobNumberForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_GetPathForBlobForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_GetPathForBlobForTesting_ParamsDataView() = default;

  IndexedDBControlTest_GetPathForBlobForTesting_ParamsDataView(
      internal::IndexedDBControlTest_GetPathForBlobForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
  int64_t database_id() const {
    return data_->database_id;
  }
  int64_t blob_number() const {
    return data_->blob_number;
  }
 private:
  internal::IndexedDBControlTest_GetPathForBlobForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_GetPathForBlobForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_GetPathForBlobForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_GetPathForBlobForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetPathDataView(
      ::mojo_base::mojom::FilePathDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadPath(UserType* output) {
    
    auto* pointer = data_->path.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::FilePathDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_GetPathForBlobForTesting_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_CompactBackingStoreForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_CompactBackingStoreForTesting_ParamsDataView() = default;

  IndexedDBControlTest_CompactBackingStoreForTesting_ParamsDataView(
      internal::IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetBucketLocatorDataView(
      ::storage::mojom::BucketLocatorDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBucketLocator(UserType* output) {
    
    auto* pointer = data_->bucket_locator.Get();
    return mojo::internal::Deserialize<::storage::mojom::BucketLocatorDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_CompactBackingStoreForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_CompactBackingStoreForTesting_ResponseParams_Data* data_ = nullptr;
};



class IndexedDBControlTest_BindMockFailureSingletonForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_BindMockFailureSingletonForTesting_ParamsDataView() = default;

  IndexedDBControlTest_BindMockFailureSingletonForTesting_ParamsDataView(
      internal::IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeReceiver() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::storage::mojom::MockFailureInjectorInterfaceBase>>(
            &data_->receiver, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::IndexedDBControlTest_BindMockFailureSingletonForTesting_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_GetDatabaseKeysForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_GetDatabaseKeysForTesting_ParamsDataView() = default;

  IndexedDBControlTest_GetDatabaseKeysForTesting_ParamsDataView(
      internal::IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_GetDatabaseKeysForTesting_Params_Data* data_ = nullptr;
};



class IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetSchemaVersionKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSchemaVersionKey(UserType* output) {
    
    auto* pointer = data_->schema_version_key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
  inline void GetDataVersionKeyDataView(
      mojo::StringDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadDataVersionKey(UserType* output) {
    
    auto* pointer = data_->data_version_key.Get();
    return mojo::internal::Deserialize<mojo::StringDataView>(
        pointer, output, message_);
  }
 private:
  internal::IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class IndexedDBControlTest_ForceInitializeFromFilesForTesting_ParamsDataView {
 public:
  IndexedDBControlTest_ForceInitializeFromFilesForTesting_ParamsDataView() = default;

  IndexedDBControlTest_ForceInitializeFromFilesForTesting_ParamsDataView(
      internal::IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_ForceInitializeFromFilesForTesting_Params_Data* data_ = nullptr;
};



class IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParamsDataView {
 public:
  IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParamsDataView() = default;

  IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParamsDataView(
      internal::IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::IndexedDBControlTest_ForceInitializeFromFilesForTesting_ResponseParams_Data* data_ = nullptr;
};








inline void IndexedDBControlTest_GetBaseDataPathForTesting_ResponseParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}


inline void IndexedDBControlTest_GetFilePathForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}


inline void IndexedDBControlTest_GetFilePathForTesting_ResponseParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}






inline void IndexedDBControlTest_ForceSchemaDowngradeForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}




inline void IndexedDBControlTest_HasV2SchemaCorruptionForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}




inline void IndexedDBControlTest_WriteToIndexedDBForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}
inline void IndexedDBControlTest_WriteToIndexedDBForTesting_ParamsDataView::GetKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->key.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void IndexedDBControlTest_WriteToIndexedDBForTesting_ParamsDataView::GetValueDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->value.Get();
  *output = mojo::StringDataView(pointer, message_);
}




inline void IndexedDBControlTest_GetBlobCountForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}




inline void IndexedDBControlTest_GetNextBlobNumberForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}




inline void IndexedDBControlTest_GetPathForBlobForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}


inline void IndexedDBControlTest_GetPathForBlobForTesting_ResponseParamsDataView::GetPathDataView(
    ::mojo_base::mojom::FilePathDataView* output) {
  auto pointer = data_->path.Get();
  *output = ::mojo_base::mojom::FilePathDataView(pointer, message_);
}


inline void IndexedDBControlTest_CompactBackingStoreForTesting_ParamsDataView::GetBucketLocatorDataView(
    ::storage::mojom::BucketLocatorDataView* output) {
  auto pointer = data_->bucket_locator.Get();
  *output = ::storage::mojom::BucketLocatorDataView(pointer, message_);
}








inline void IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParamsDataView::GetSchemaVersionKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->schema_version_key.Get();
  *output = mojo::StringDataView(pointer, message_);
}
inline void IndexedDBControlTest_GetDatabaseKeysForTesting_ResponseParamsDataView::GetDataVersionKeyDataView(
    mojo::StringDataView* output) {
  auto pointer = data_->data_version_key.Get();
  *output = mojo::StringDataView(pointer, message_);
}





}  // namespace mojom
}  // namespace storage

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_TEST_MOJOM_PARAMS_DATA_H_