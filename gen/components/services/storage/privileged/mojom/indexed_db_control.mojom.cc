// components/services/storage/privileged/mojom/indexed_db_control.mojom.cc is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif

#include "components/services/storage/privileged/mojom/indexed_db_control.mojom.h"

#include <math.h>
#include <stdint.h>
#include <utility>

#include "base/debug/alias.h"
#include "base/hash/md5_constexpr.h"
#include "base/run_loop.h"
#include "base/strings/string_number_conversions.h"
#include "base/trace_event/trace_event.h"
#include "base/trace_event/typed_macros.h"
#include "mojo/public/cpp/bindings/lib/generated_code_util.h"
#include "mojo/public/cpp/bindings/lib/message_internal.h"
#include "mojo/public/cpp/bindings/lib/send_message_helper.h"
#include "mojo/public/cpp/bindings/lib/proxy_to_responder.h"
#include "mojo/public/cpp/bindings/lib/serialization_util.h"
#include "mojo/public/cpp/bindings/lib/unserialized_message_context.h"
#include "mojo/public/cpp/bindings/lib/validate_params.h"
#include "mojo/public/cpp/bindings/lib/validation_errors.h"
#include "mojo/public/cpp/bindings/mojo_buildflags.h"
#include "mojo/public/interfaces/bindings/interface_control_messages.mojom.h"
#include "third_party/perfetto/include/perfetto/tracing/traced_value.h"

#include "components/services/storage/privileged/mojom/indexed_db_control.mojom-params-data.h"
#include "components/services/storage/privileged/mojom/indexed_db_control.mojom-shared-message-ids.h"

#include "components/services/storage/privileged/mojom/indexed_db_control.mojom-import-headers.h"
#include "components/services/storage/privileged/mojom/indexed_db_control.mojom-test-utils.h"


#ifndef COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_JUMBO_H_
#define COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_JUMBO_H_
#endif



namespace storage {
namespace mojom {
const char IndexedDBObserver::Name_[] = "storage.mojom.IndexedDBObserver";

IndexedDBObserver::IPCStableHashFunction IndexedDBObserver::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kIndexedDBObserver_OnIndexedDBListChanged_Name: {
      return &IndexedDBObserver::OnIndexedDBListChanged_Sym::IPCStableHash;
    }
    case internal::kIndexedDBObserver_OnIndexedDBContentChanged_Name: {
      return &IndexedDBObserver::OnIndexedDBContentChanged_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* IndexedDBObserver::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kIndexedDBObserver_OnIndexedDBListChanged_Name:
            return "Receive storage::mojom::IndexedDBObserver::OnIndexedDBListChanged";
      case internal::kIndexedDBObserver_OnIndexedDBContentChanged_Name:
            return "Receive storage::mojom::IndexedDBObserver::OnIndexedDBContentChanged";
    }
  } else {
    switch (message.name()) {
      case internal::kIndexedDBObserver_OnIndexedDBListChanged_Name:
            return "Receive reply storage::mojom::IndexedDBObserver::OnIndexedDBListChanged";
      case internal::kIndexedDBObserver_OnIndexedDBContentChanged_Name:
            return "Receive reply storage::mojom::IndexedDBObserver::OnIndexedDBContentChanged";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t IndexedDBObserver::OnIndexedDBListChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBObserver::OnIndexedDBListChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBObserver::OnIndexedDBContentChanged_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBObserver::OnIndexedDBContentChanged");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

IndexedDBObserverProxy::IndexedDBObserverProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IndexedDBObserverProxy::OnIndexedDBListChanged(
    const ::storage::BucketLocator& in_bucket_locator) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBObserver::OnIndexedDBListChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bucket_locator"), in_bucket_locator,
                        "<value of type const ::storage::BucketLocator&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBObserver_OnIndexedDBListChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBObserver_OnIndexedDBListChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->bucket_locator)::BaseType> bucket_locator_fragment(
          params.message());
  mojo::internal::Serialize<::storage::mojom::BucketLocatorDataView>(
      in_bucket_locator, bucket_locator_fragment);
  params->bucket_locator.Set(
      bucket_locator_fragment.is_null() ? nullptr : bucket_locator_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bucket_locator.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bucket_locator in IndexedDBObserver.OnIndexedDBListChanged request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBObserver::Name_);
  message.set_method_name("OnIndexedDBListChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IndexedDBObserverProxy::OnIndexedDBContentChanged(
    const ::storage::BucketLocator& in_bucket_locator, const ::std::u16string& in_database_name, const ::std::u16string& in_object_store_name) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBObserver::OnIndexedDBContentChanged", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bucket_locator"), in_bucket_locator,
                        "<value of type const ::storage::BucketLocator&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("database_name"), in_database_name,
                        "<value of type const ::std::u16string&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("object_store_name"), in_object_store_name,
                        "<value of type const ::std::u16string&>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBObserver_OnIndexedDBContentChanged_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBObserver_OnIndexedDBContentChanged_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->bucket_locator)::BaseType> bucket_locator_fragment(
          params.message());
  mojo::internal::Serialize<::storage::mojom::BucketLocatorDataView>(
      in_bucket_locator, bucket_locator_fragment);
  params->bucket_locator.Set(
      bucket_locator_fragment.is_null() ? nullptr : bucket_locator_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bucket_locator.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bucket_locator in IndexedDBObserver.OnIndexedDBContentChanged request");
  mojo::internal::MessageFragment<
      typename decltype(params->database_name)::BaseType> database_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_database_name, database_name_fragment);
  params->database_name.Set(
      database_name_fragment.is_null() ? nullptr : database_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->database_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null database_name in IndexedDBObserver.OnIndexedDBContentChanged request");
  mojo::internal::MessageFragment<
      typename decltype(params->object_store_name)::BaseType> object_store_name_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::String16DataView>(
      in_object_store_name, object_store_name_fragment);
  params->object_store_name.Set(
      object_store_name_fragment.is_null() ? nullptr : object_store_name_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->object_store_name.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null object_store_name in IndexedDBObserver.OnIndexedDBContentChanged request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBObserver::Name_);
  message.set_method_name("OnIndexedDBContentChanged");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

// static
bool IndexedDBObserverStubDispatch::Accept(
    IndexedDBObserver* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIndexedDBObserver_OnIndexedDBListChanged_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBObserver_OnIndexedDBListChanged_Params_Data* params =
          reinterpret_cast<internal::IndexedDBObserver_OnIndexedDBListChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::storage::BucketLocator p_bucket_locator{};
      IndexedDBObserver_OnIndexedDBListChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBucketLocator(&p_bucket_locator))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBObserver::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnIndexedDBListChanged(
std::move(p_bucket_locator));
      return true;
    }
    case internal::kIndexedDBObserver_OnIndexedDBContentChanged_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBObserver_OnIndexedDBContentChanged_Params_Data* params =
          reinterpret_cast<internal::IndexedDBObserver_OnIndexedDBContentChanged_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::storage::BucketLocator p_bucket_locator{};
      ::std::u16string p_database_name{};
      ::std::u16string p_object_store_name{};
      IndexedDBObserver_OnIndexedDBContentChanged_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBucketLocator(&p_bucket_locator))
        success = false;
      if (success && !input_data_view.ReadDatabaseName(&p_database_name))
        success = false;
      if (success && !input_data_view.ReadObjectStoreName(&p_object_store_name))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBObserver::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->OnIndexedDBContentChanged(
std::move(p_bucket_locator), 
std::move(p_database_name), 
std::move(p_object_store_name));
      return true;
    }
  }
  return false;
}

// static
bool IndexedDBObserverStubDispatch::AcceptWithResponder(
    IndexedDBObserver* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kIndexedDBObserver_OnIndexedDBListChanged_Name: {
      break;
    }
    case internal::kIndexedDBObserver_OnIndexedDBContentChanged_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIndexedDBObserverValidationInfo[] = {
    {&internal::IndexedDBObserver_OnIndexedDBListChanged_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IndexedDBObserver_OnIndexedDBContentChanged_Params_Data::Validate,
     nullptr /* no response */},
};

bool IndexedDBObserverRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::storage::mojom::IndexedDBObserver::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIndexedDBObserverValidationInfo);
}

const char IndexedDBControl::Name_[] = "storage.mojom.IndexedDBControl";

IndexedDBControl::IPCStableHashFunction IndexedDBControl::MessageToMethodInfo_(mojo::Message& message) {
#if !BUILDFLAG(IS_FUCHSIA)
  switch (message.name()) {
    case internal::kIndexedDBControl_BindIndexedDB_Name: {
      return &IndexedDBControl::BindIndexedDB_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_BindIndexedDBForBucket_Name: {
      return &IndexedDBControl::BindIndexedDBForBucket_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_GetUsage_Name: {
      return &IndexedDBControl::GetUsage_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_DeleteForStorageKey_Name: {
      return &IndexedDBControl::DeleteForStorageKey_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_ForceClose_Name: {
      return &IndexedDBControl::ForceClose_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_GetConnectionCount_Name: {
      return &IndexedDBControl::GetConnectionCount_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_DownloadBucketData_Name: {
      return &IndexedDBControl::DownloadBucketData_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_GetAllBucketsDetails_Name: {
      return &IndexedDBControl::GetAllBucketsDetails_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_SetForceKeepSessionState_Name: {
      return &IndexedDBControl::SetForceKeepSessionState_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_AddObserver_Name: {
      return &IndexedDBControl::AddObserver_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_ApplyPolicyUpdates_Name: {
      return &IndexedDBControl::ApplyPolicyUpdates_Sym::IPCStableHash;
    }
    case internal::kIndexedDBControl_BindTestInterface_Name: {
      return &IndexedDBControl::BindTestInterface_Sym::IPCStableHash;
    }
  }
#endif  // !BUILDFLAG(IS_FUCHSIA)
  return nullptr;
}


const char* IndexedDBControl::MessageToMethodName_(mojo::Message& message) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (!is_response) {
    switch (message.name()) {
      case internal::kIndexedDBControl_BindIndexedDB_Name:
            return "Receive storage::mojom::IndexedDBControl::BindIndexedDB";
      case internal::kIndexedDBControl_BindIndexedDBForBucket_Name:
            return "Receive storage::mojom::IndexedDBControl::BindIndexedDBForBucket";
      case internal::kIndexedDBControl_GetUsage_Name:
            return "Receive storage::mojom::IndexedDBControl::GetUsage";
      case internal::kIndexedDBControl_DeleteForStorageKey_Name:
            return "Receive storage::mojom::IndexedDBControl::DeleteForStorageKey";
      case internal::kIndexedDBControl_ForceClose_Name:
            return "Receive storage::mojom::IndexedDBControl::ForceClose";
      case internal::kIndexedDBControl_GetConnectionCount_Name:
            return "Receive storage::mojom::IndexedDBControl::GetConnectionCount";
      case internal::kIndexedDBControl_DownloadBucketData_Name:
            return "Receive storage::mojom::IndexedDBControl::DownloadBucketData";
      case internal::kIndexedDBControl_GetAllBucketsDetails_Name:
            return "Receive storage::mojom::IndexedDBControl::GetAllBucketsDetails";
      case internal::kIndexedDBControl_SetForceKeepSessionState_Name:
            return "Receive storage::mojom::IndexedDBControl::SetForceKeepSessionState";
      case internal::kIndexedDBControl_AddObserver_Name:
            return "Receive storage::mojom::IndexedDBControl::AddObserver";
      case internal::kIndexedDBControl_ApplyPolicyUpdates_Name:
            return "Receive storage::mojom::IndexedDBControl::ApplyPolicyUpdates";
      case internal::kIndexedDBControl_BindTestInterface_Name:
            return "Receive storage::mojom::IndexedDBControl::BindTestInterface";
    }
  } else {
    switch (message.name()) {
      case internal::kIndexedDBControl_BindIndexedDB_Name:
            return "Receive reply storage::mojom::IndexedDBControl::BindIndexedDB";
      case internal::kIndexedDBControl_BindIndexedDBForBucket_Name:
            return "Receive reply storage::mojom::IndexedDBControl::BindIndexedDBForBucket";
      case internal::kIndexedDBControl_GetUsage_Name:
            return "Receive reply storage::mojom::IndexedDBControl::GetUsage";
      case internal::kIndexedDBControl_DeleteForStorageKey_Name:
            return "Receive reply storage::mojom::IndexedDBControl::DeleteForStorageKey";
      case internal::kIndexedDBControl_ForceClose_Name:
            return "Receive reply storage::mojom::IndexedDBControl::ForceClose";
      case internal::kIndexedDBControl_GetConnectionCount_Name:
            return "Receive reply storage::mojom::IndexedDBControl::GetConnectionCount";
      case internal::kIndexedDBControl_DownloadBucketData_Name:
            return "Receive reply storage::mojom::IndexedDBControl::DownloadBucketData";
      case internal::kIndexedDBControl_GetAllBucketsDetails_Name:
            return "Receive reply storage::mojom::IndexedDBControl::GetAllBucketsDetails";
      case internal::kIndexedDBControl_SetForceKeepSessionState_Name:
            return "Receive reply storage::mojom::IndexedDBControl::SetForceKeepSessionState";
      case internal::kIndexedDBControl_AddObserver_Name:
            return "Receive reply storage::mojom::IndexedDBControl::AddObserver";
      case internal::kIndexedDBControl_ApplyPolicyUpdates_Name:
            return "Receive reply storage::mojom::IndexedDBControl::ApplyPolicyUpdates";
      case internal::kIndexedDBControl_BindTestInterface_Name:
            return "Receive reply storage::mojom::IndexedDBControl::BindTestInterface";
    }
  }
  return "Receive unknown mojo message";
#else
  bool is_response = message.has_flag(mojo::Message::kFlagIsResponse);
  if (is_response) {
    return "Receive mojo reply";
  } else {
    return "Receive mojo message";
  }
#endif // BUILDFLAG(MOJO_TRACE_ENABLED)
}

#if !BUILDFLAG(IS_FUCHSIA)
uint32_t IndexedDBControl::BindIndexedDB_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::BindIndexedDB");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::BindIndexedDBForBucket_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::BindIndexedDBForBucket");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::GetUsage_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::GetUsage");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::DeleteForStorageKey_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::DeleteForStorageKey");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::ForceClose_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::ForceClose");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::GetConnectionCount_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::GetConnectionCount");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::DownloadBucketData_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::DownloadBucketData");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::GetAllBucketsDetails_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::GetAllBucketsDetails");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::SetForceKeepSessionState_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::SetForceKeepSessionState");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::AddObserver_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::AddObserver");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::ApplyPolicyUpdates_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::ApplyPolicyUpdates");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
uint32_t IndexedDBControl::BindTestInterface_Sym::IPCStableHash() {
  // This method's address is used for indetifiying the mojo method name after
  // symbolization. So each IPCStableHash should have a unique address.
  // We cannot use NO_CODE_FOLDING() here - it relies on the uniqueness of
  // __LINE__ value, which is not unique accross different mojo modules.
  // The code below is very similar to NO_CODE_FOLDING, but it uses a unique
  // hash instead of __LINE__.
  constexpr uint32_t kHash = base::MD5Hash32Constexpr(
          "(Impl)storage::mojom::IndexedDBControl::BindTestInterface");
  const uint32_t hash = kHash;
  base::debug::Alias(&hash);
  return hash;
}
# endif // !BUILDFLAG(IS_FUCHSIA)

class IndexedDBControl_GetUsage_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IndexedDBControl_GetUsage_ForwardToCallback(
      IndexedDBControl::GetUsageCallback callback
      ) : callback_(std::move(callback)) {
  }

  IndexedDBControl_GetUsage_ForwardToCallback(const IndexedDBControl_GetUsage_ForwardToCallback&) = delete;
  IndexedDBControl_GetUsage_ForwardToCallback& operator=(const IndexedDBControl_GetUsage_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IndexedDBControl::GetUsageCallback callback_;
};

class IndexedDBControl_DeleteForStorageKey_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IndexedDBControl_DeleteForStorageKey_ForwardToCallback(
      IndexedDBControl::DeleteForStorageKeyCallback callback
      ) : callback_(std::move(callback)) {
  }

  IndexedDBControl_DeleteForStorageKey_ForwardToCallback(const IndexedDBControl_DeleteForStorageKey_ForwardToCallback&) = delete;
  IndexedDBControl_DeleteForStorageKey_ForwardToCallback& operator=(const IndexedDBControl_DeleteForStorageKey_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IndexedDBControl::DeleteForStorageKeyCallback callback_;
};

class IndexedDBControl_ForceClose_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IndexedDBControl_ForceClose_ForwardToCallback(
      IndexedDBControl::ForceCloseCallback callback
      ) : callback_(std::move(callback)) {
  }

  IndexedDBControl_ForceClose_ForwardToCallback(const IndexedDBControl_ForceClose_ForwardToCallback&) = delete;
  IndexedDBControl_ForceClose_ForwardToCallback& operator=(const IndexedDBControl_ForceClose_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IndexedDBControl::ForceCloseCallback callback_;
};

class IndexedDBControl_GetConnectionCount_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IndexedDBControl_GetConnectionCount_ForwardToCallback(
      IndexedDBControl::GetConnectionCountCallback callback
      ) : callback_(std::move(callback)) {
  }

  IndexedDBControl_GetConnectionCount_ForwardToCallback(const IndexedDBControl_GetConnectionCount_ForwardToCallback&) = delete;
  IndexedDBControl_GetConnectionCount_ForwardToCallback& operator=(const IndexedDBControl_GetConnectionCount_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IndexedDBControl::GetConnectionCountCallback callback_;
};

class IndexedDBControl_DownloadBucketData_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IndexedDBControl_DownloadBucketData_ForwardToCallback(
      IndexedDBControl::DownloadBucketDataCallback callback
      ) : callback_(std::move(callback)) {
  }

  IndexedDBControl_DownloadBucketData_ForwardToCallback(const IndexedDBControl_DownloadBucketData_ForwardToCallback&) = delete;
  IndexedDBControl_DownloadBucketData_ForwardToCallback& operator=(const IndexedDBControl_DownloadBucketData_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IndexedDBControl::DownloadBucketDataCallback callback_;
};

class IndexedDBControl_GetAllBucketsDetails_ForwardToCallback
    : public mojo::MessageReceiver {
 public:
  IndexedDBControl_GetAllBucketsDetails_ForwardToCallback(
      IndexedDBControl::GetAllBucketsDetailsCallback callback
      ) : callback_(std::move(callback)) {
  }

  IndexedDBControl_GetAllBucketsDetails_ForwardToCallback(const IndexedDBControl_GetAllBucketsDetails_ForwardToCallback&) = delete;
  IndexedDBControl_GetAllBucketsDetails_ForwardToCallback& operator=(const IndexedDBControl_GetAllBucketsDetails_ForwardToCallback&) = delete;

  bool Accept(mojo::Message* message) override;
 private:
  IndexedDBControl::GetAllBucketsDetailsCallback callback_;
};

IndexedDBControlProxy::IndexedDBControlProxy(mojo::MessageReceiverWithResponder* receiver)
    : receiver_(receiver) {
}

void IndexedDBControlProxy::BindIndexedDB(
    const ::blink::StorageKey& in_storage_key, ::mojo::PendingReceiver<::blink::mojom::IDBFactory> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::BindIndexedDB", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("storage_key"), in_storage_key,
                        "<value of type const ::blink::StorageKey&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::blink::mojom::IDBFactory>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_BindIndexedDB_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_BindIndexedDB_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->storage_key)::BaseType> storage_key_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::StorageKeyDataView>(
      in_storage_key, storage_key_fragment);
  params->storage_key.Set(
      storage_key_fragment.is_null() ? nullptr : storage_key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->storage_key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null storage_key in IndexedDBControl.BindIndexedDB request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::IDBFactoryInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in IndexedDBControl.BindIndexedDB request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("BindIndexedDB");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IndexedDBControlProxy::BindIndexedDBForBucket(
    const ::storage::BucketLocator& in_bucket_locator, ::mojo::PendingReceiver<::blink::mojom::IDBFactory> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::BindIndexedDBForBucket", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bucket_locator"), in_bucket_locator,
                        "<value of type const ::storage::BucketLocator&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::blink::mojom::IDBFactory>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_BindIndexedDBForBucket_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_BindIndexedDBForBucket_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->bucket_locator)::BaseType> bucket_locator_fragment(
          params.message());
  mojo::internal::Serialize<::storage::mojom::BucketLocatorDataView>(
      in_bucket_locator, bucket_locator_fragment);
  params->bucket_locator.Set(
      bucket_locator_fragment.is_null() ? nullptr : bucket_locator_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bucket_locator.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bucket_locator in IndexedDBControl.BindIndexedDBForBucket request");
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::blink::mojom::IDBFactoryInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in IndexedDBControl.BindIndexedDBForBucket request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("BindIndexedDBForBucket");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IndexedDBControlProxy::GetUsage(
    GetUsageCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send storage::mojom::IndexedDBControl::GetUsage");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_GetUsage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_GetUsage_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("GetUsage");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IndexedDBControl_GetUsage_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void IndexedDBControlProxy::DeleteForStorageKey(
    const ::blink::StorageKey& in_storage_key, DeleteForStorageKeyCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::DeleteForStorageKey", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("storage_key"), in_storage_key,
                        "<value of type const ::blink::StorageKey&>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_DeleteForStorageKey_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_DeleteForStorageKey_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->storage_key)::BaseType> storage_key_fragment(
          params.message());
  mojo::internal::Serialize<::blink::mojom::StorageKeyDataView>(
      in_storage_key, storage_key_fragment);
  params->storage_key.Set(
      storage_key_fragment.is_null() ? nullptr : storage_key_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->storage_key.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null storage_key in IndexedDBControl.DeleteForStorageKey request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("DeleteForStorageKey");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IndexedDBControl_DeleteForStorageKey_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void IndexedDBControlProxy::ForceClose(
    ::storage::BucketId in_bucket_id, ForceCloseReason in_reason, ForceCloseCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::ForceClose", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bucket_id"), in_bucket_id,
                        "<value of type ::storage::BucketId>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("reason"), in_reason,
                        "<value of type ForceCloseReason>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_ForceClose_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_ForceClose_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->bucket_id)::BaseType> bucket_id_fragment(
          params.message());
  mojo::internal::Serialize<::storage::mojom::BucketIdDataView>(
      in_bucket_id, bucket_id_fragment);
  params->bucket_id.Set(
      bucket_id_fragment.is_null() ? nullptr : bucket_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bucket_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bucket_id in IndexedDBControl.ForceClose request");
  mojo::internal::Serialize<::storage::mojom::ForceCloseReason>(
      in_reason, &params->reason);

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("ForceClose");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IndexedDBControl_ForceClose_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void IndexedDBControlProxy::GetConnectionCount(
    ::storage::BucketId in_bucket_id, GetConnectionCountCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::GetConnectionCount", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bucket_id"), in_bucket_id,
                        "<value of type ::storage::BucketId>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_GetConnectionCount_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_GetConnectionCount_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->bucket_id)::BaseType> bucket_id_fragment(
          params.message());
  mojo::internal::Serialize<::storage::mojom::BucketIdDataView>(
      in_bucket_id, bucket_id_fragment);
  params->bucket_id.Set(
      bucket_id_fragment.is_null() ? nullptr : bucket_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bucket_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bucket_id in IndexedDBControl.GetConnectionCount request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("GetConnectionCount");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IndexedDBControl_GetConnectionCount_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void IndexedDBControlProxy::DownloadBucketData(
    ::storage::BucketId in_bucket_id, DownloadBucketDataCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::DownloadBucketData", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("bucket_id"), in_bucket_id,
                        "<value of type ::storage::BucketId>");
   });
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_DownloadBucketData_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_DownloadBucketData_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->bucket_id)::BaseType> bucket_id_fragment(
          params.message());
  mojo::internal::Serialize<::storage::mojom::BucketIdDataView>(
      in_bucket_id, bucket_id_fragment);
  params->bucket_id.Set(
      bucket_id_fragment.is_null() ? nullptr : bucket_id_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->bucket_id.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null bucket_id in IndexedDBControl.DownloadBucketData request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("DownloadBucketData");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IndexedDBControl_DownloadBucketData_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void IndexedDBControlProxy::GetAllBucketsDetails(
    GetAllBucketsDetailsCallback callback) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send storage::mojom::IndexedDBControl::GetAllBucketsDetails");
#endif
  const bool kExpectsResponse = true;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_GetAllBucketsDetails_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_GetAllBucketsDetails_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("GetAllBucketsDetails");
#endif
  std::unique_ptr<mojo::MessageReceiver> responder(
      new IndexedDBControl_GetAllBucketsDetails_ForwardToCallback(
          std::move(callback)));
  ::mojo::internal::SendMojoMessage(*receiver_, message, std::move(responder));
}

void IndexedDBControlProxy::SetForceKeepSessionState(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send storage::mojom::IndexedDBControl::SetForceKeepSessionState");
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_SetForceKeepSessionState_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_SetForceKeepSessionState_Params_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("SetForceKeepSessionState");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IndexedDBControlProxy::AddObserver(
    ::mojo::PendingRemote<IndexedDBObserver> in_observer) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::AddObserver", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("observer"), in_observer,
                        "<value of type ::mojo::PendingRemote<IndexedDBObserver>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_AddObserver_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_AddObserver_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfacePtrDataView<::storage::mojom::IndexedDBObserverInterfaceBase>>(
      in_observer, &params->observer, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->observer),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid observer in IndexedDBControl.AddObserver request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("AddObserver");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IndexedDBControlProxy::ApplyPolicyUpdates(
    std::vector<::storage::mojom::StoragePolicyUpdatePtr> in_policy_updates) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::ApplyPolicyUpdates", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("policy_updates"), in_policy_updates,
                        "<value of type std::vector<::storage::mojom::StoragePolicyUpdatePtr>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_ApplyPolicyUpdates_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_ApplyPolicyUpdates_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->policy_updates)::BaseType>
      policy_updates_fragment(params.message());
  const mojo::internal::ContainerValidateParams policy_updates_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::storage::mojom::StoragePolicyUpdateDataView>>(
      in_policy_updates, policy_updates_fragment, &policy_updates_validate_params);
  params->policy_updates.Set(
      policy_updates_fragment.is_null() ? nullptr : policy_updates_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->policy_updates.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null policy_updates in IndexedDBControl.ApplyPolicyUpdates request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("ApplyPolicyUpdates");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}

void IndexedDBControlProxy::BindTestInterface(
    ::mojo::PendingReceiver<::storage::mojom::IndexedDBControlTest> in_receiver) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send storage::mojom::IndexedDBControl::BindTestInterface", "input_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("receiver"), in_receiver,
                        "<value of type ::mojo::PendingReceiver<::storage::mojom::IndexedDBControlTest>>");
   });
#endif
  const bool kExpectsResponse = false;
  const bool kIsSync = false;
  const bool kAllowInterrupt = true;
  
  const uint32_t kFlags =
      ((kExpectsResponse) ? mojo::Message::kFlagExpectsResponse : 0) |
      ((kIsSync) ? mojo::Message::kFlagIsSync : 0) |
      ((kAllowInterrupt) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_BindTestInterface_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_BindTestInterface_Params_Data> params(
          message);
  params.Allocate();
  mojo::internal::Serialize<mojo::InterfaceRequestDataView<::storage::mojom::IndexedDBControlTestInterfaceBase>>(
      in_receiver, &params->receiver, &params.message());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      !mojo::internal::IsHandleOrInterfaceValid(params->receiver),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_INVALID_HANDLE,
      "invalid receiver in IndexedDBControl.BindTestInterface request");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("BindTestInterface");
#endif
  // This return value may be ignored as false implies the Connector has
  // encountered an error, which will be visible through other means.
  ::mojo::internal::SendMojoMessage(*receiver_, message);
}
class IndexedDBControl_GetUsage_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IndexedDBControl::GetUsageCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IndexedDBControl_GetUsage_ProxyToResponder> proxy(
        new IndexedDBControl_GetUsage_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IndexedDBControl_GetUsage_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IndexedDBControl_GetUsage_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IndexedDBControl_GetUsage_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IndexedDBControl::GetUsageCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      std::vector<::storage::mojom::StorageUsageInfoPtr> in_info);
};

bool IndexedDBControl_GetUsage_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::IndexedDBControl_GetUsage_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IndexedDBControl_GetUsage_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  std::vector<::storage::mojom::StorageUsageInfoPtr> p_info{};
  IndexedDBControl_GetUsage_ResponseParamsDataView input_data_view(params, message);
  
  if (success && !input_data_view.ReadInfo(&p_info))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IndexedDBControl::Name_, 2, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_info));
  return true;
}

void IndexedDBControl_GetUsage_ProxyToResponder::Run(
    std::vector<::storage::mojom::StorageUsageInfoPtr> in_info) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply storage::mojom::IndexedDBControl::GetUsage", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("info"), in_info,
                        "<value of type std::vector<::storage::mojom::StorageUsageInfoPtr>>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_GetUsage_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_GetUsage_ResponseParams_Data> params(
          message);
  params.Allocate();
  mojo::internal::MessageFragment<
      typename decltype(params->info)::BaseType>
      info_fragment(params.message());
  const mojo::internal::ContainerValidateParams info_validate_params(
      0, false, nullptr);
  mojo::internal::Serialize<mojo::ArrayDataView<::storage::mojom::StorageUsageInfoDataView>>(
      in_info, info_fragment, &info_validate_params);
  params->info.Set(
      info_fragment.is_null() ? nullptr : info_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->info.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null info in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("GetUsage");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class IndexedDBControl_DeleteForStorageKey_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IndexedDBControl::DeleteForStorageKeyCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IndexedDBControl_DeleteForStorageKey_ProxyToResponder> proxy(
        new IndexedDBControl_DeleteForStorageKey_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IndexedDBControl_DeleteForStorageKey_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IndexedDBControl_DeleteForStorageKey_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IndexedDBControl_DeleteForStorageKey_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IndexedDBControl::DeleteForStorageKeyCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success);
};

bool IndexedDBControl_DeleteForStorageKey_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::IndexedDBControl_DeleteForStorageKey_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IndexedDBControl_DeleteForStorageKey_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  IndexedDBControl_DeleteForStorageKey_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IndexedDBControl::Name_, 3, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success));
  return true;
}

void IndexedDBControl_DeleteForStorageKey_ProxyToResponder::Run(
    bool in_success) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply storage::mojom::IndexedDBControl::DeleteForStorageKey", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_DeleteForStorageKey_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_DeleteForStorageKey_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("DeleteForStorageKey");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class IndexedDBControl_ForceClose_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IndexedDBControl::ForceCloseCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IndexedDBControl_ForceClose_ProxyToResponder> proxy(
        new IndexedDBControl_ForceClose_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IndexedDBControl_ForceClose_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IndexedDBControl_ForceClose_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IndexedDBControl_ForceClose_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IndexedDBControl::ForceCloseCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      );
};

bool IndexedDBControl_ForceClose_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::IndexedDBControl_ForceClose_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IndexedDBControl_ForceClose_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  IndexedDBControl_ForceClose_ResponseParamsDataView input_data_view(params, message);
  
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IndexedDBControl::Name_, 4, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run();
  return true;
}

void IndexedDBControl_ForceClose_ProxyToResponder::Run(
    ) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT0("mojom", "Send reply storage::mojom::IndexedDBControl::ForceClose");
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_ForceClose_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_ForceClose_ResponseParams_Data> params(
          message);
  params.Allocate();

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("ForceClose");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class IndexedDBControl_GetConnectionCount_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IndexedDBControl::GetConnectionCountCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IndexedDBControl_GetConnectionCount_ProxyToResponder> proxy(
        new IndexedDBControl_GetConnectionCount_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IndexedDBControl_GetConnectionCount_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IndexedDBControl_GetConnectionCount_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IndexedDBControl_GetConnectionCount_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IndexedDBControl::GetConnectionCountCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      uint64_t in_connection_count);
};

bool IndexedDBControl_GetConnectionCount_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  uint64_t p_connection_count{};
  IndexedDBControl_GetConnectionCount_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_connection_count = input_data_view.connection_count();
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IndexedDBControl::Name_, 5, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_connection_count));
  return true;
}

void IndexedDBControl_GetConnectionCount_ProxyToResponder::Run(
    uint64_t in_connection_count) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply storage::mojom::IndexedDBControl::GetConnectionCount", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("connection_count"), in_connection_count,
                        "<value of type uint64_t>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_GetConnectionCount_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->connection_count = in_connection_count;

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("GetConnectionCount");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class IndexedDBControl_DownloadBucketData_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IndexedDBControl::DownloadBucketDataCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IndexedDBControl_DownloadBucketData_ProxyToResponder> proxy(
        new IndexedDBControl_DownloadBucketData_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IndexedDBControl_DownloadBucketData_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IndexedDBControl_DownloadBucketData_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IndexedDBControl_DownloadBucketData_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IndexedDBControl::DownloadBucketDataCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_success, const ::base::FilePath& in_temp_path, const ::base::FilePath& in_zip_path);
};

bool IndexedDBControl_DownloadBucketData_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::IndexedDBControl_DownloadBucketData_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IndexedDBControl_DownloadBucketData_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_success{};
  ::base::FilePath p_temp_path{};
  ::base::FilePath p_zip_path{};
  IndexedDBControl_DownloadBucketData_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_success = input_data_view.success();
  if (success && !input_data_view.ReadTempPath(&p_temp_path))
    success = false;
  if (success && !input_data_view.ReadZipPath(&p_zip_path))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IndexedDBControl::Name_, 6, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_success), 
std::move(p_temp_path), 
std::move(p_zip_path));
  return true;
}

void IndexedDBControl_DownloadBucketData_ProxyToResponder::Run(
    bool in_success, const ::base::FilePath& in_temp_path, const ::base::FilePath& in_zip_path) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply storage::mojom::IndexedDBControl::DownloadBucketData", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("success"), in_success,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("temp_path"), in_temp_path,
                        "<value of type const ::base::FilePath&>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("zip_path"), in_zip_path,
                        "<value of type const ::base::FilePath&>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_DownloadBucketData_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_DownloadBucketData_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->success = in_success;
  mojo::internal::MessageFragment<
      typename decltype(params->temp_path)::BaseType> temp_path_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::FilePathDataView>(
      in_temp_path, temp_path_fragment);
  params->temp_path.Set(
      temp_path_fragment.is_null() ? nullptr : temp_path_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->temp_path.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null temp_path in ");
  mojo::internal::MessageFragment<
      typename decltype(params->zip_path)::BaseType> zip_path_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::FilePathDataView>(
      in_zip_path, zip_path_fragment);
  params->zip_path.Set(
      zip_path_fragment.is_null() ? nullptr : zip_path_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->zip_path.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null zip_path in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("DownloadBucketData");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}
class IndexedDBControl_GetAllBucketsDetails_ProxyToResponder : public ::mojo::internal::ProxyToResponder {
 public:
  static IndexedDBControl::GetAllBucketsDetailsCallback CreateCallback(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
    std::unique_ptr<IndexedDBControl_GetAllBucketsDetails_ProxyToResponder> proxy(
        new IndexedDBControl_GetAllBucketsDetails_ProxyToResponder(
            message, std::move(responder)));
    return base::BindOnce(&IndexedDBControl_GetAllBucketsDetails_ProxyToResponder::Run,
                          std::move(proxy));
  }

  ~IndexedDBControl_GetAllBucketsDetails_ProxyToResponder() {
#if DCHECK_IS_ON()
    if (responder_) {
      // If we're being destroyed without being run, we want to ensure the
      // binding endpoint has been closed. This checks for that asynchronously.
      // We pass a bound generated callback to handle the response so that any
      // resulting DCHECK stack will have useful interface type information.
      responder_->IsConnectedAsync(base::BindOnce(&OnIsConnectedComplete));
    }
#endif
  }

 private:
  IndexedDBControl_GetAllBucketsDetails_ProxyToResponder(
      ::mojo::Message& message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder)
      : ::mojo::internal::ProxyToResponder(message, std::move(responder)) {
  }

#if DCHECK_IS_ON()
  static void OnIsConnectedComplete(bool connected) {
    DCHECK(!connected)
        << "IndexedDBControl::GetAllBucketsDetailsCallback was destroyed without "
        << "first either being run or its corresponding binding being closed. "
        << "It is an error to drop response callbacks which still correspond "
        << "to an open interface pipe.";
  }
#endif

  void Run(
      bool in_incognito, ::base::Value::List in_details);
};

bool IndexedDBControl_GetAllBucketsDetails_ForwardToCallback::Accept(
    mojo::Message* message) {

  DCHECK(message->is_serialized());
  internal::IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data* params =
      reinterpret_cast<
          internal::IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data*>(
              message->mutable_payload());
  
  bool success = true;
  bool p_incognito{};
  ::base::Value::List p_details{};
  IndexedDBControl_GetAllBucketsDetails_ResponseParamsDataView input_data_view(params, message);
  
  if (success)
    p_incognito = input_data_view.incognito();
  if (success && !input_data_view.ReadDetails(&p_details))
    success = false;
  if (!success) {
    ReportValidationErrorForMessage(
        message,
        mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
        IndexedDBControl::Name_, 7, true);
    return false;
  }
  if (!callback_.is_null())
    std::move(callback_).Run(
std::move(p_incognito), 
std::move(p_details));
  return true;
}

void IndexedDBControl_GetAllBucketsDetails_ProxyToResponder::Run(
    bool in_incognito, ::base::Value::List in_details) {
#if BUILDFLAG(MOJO_TRACE_ENABLED)
  TRACE_EVENT1(
    "mojom", "Send reply storage::mojom::IndexedDBControl::GetAllBucketsDetails", "async_response_parameters",
    [&](perfetto::TracedValue context){
      auto dict = std::move(context).WriteDictionary();
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("incognito"), in_incognito,
                        "<value of type bool>");
      perfetto::WriteIntoTracedValueWithFallback(
           dict.AddItem("details"), in_details,
                        "<value of type ::base::Value::List>");
   });
#endif
  
  const uint32_t kFlags = mojo::Message::kFlagIsResponse |
      ((is_sync_) ? mojo::Message::kFlagIsSync : 0) |
      ((true) ? 0 : mojo::Message::kFlagNoInterrupt);
  
  mojo::Message message(
      internal::kIndexedDBControl_GetAllBucketsDetails_Name, kFlags, 0, 0, nullptr);
  mojo::internal::MessageFragment<
      ::storage::mojom::internal::IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data> params(
          message);
  params.Allocate();
  params->incognito = in_incognito;
  mojo::internal::MessageFragment<
      typename decltype(params->details)::BaseType> details_fragment(
          params.message());
  mojo::internal::Serialize<::mojo_base::mojom::ListValueDataView>(
      in_details, details_fragment);
  params->details.Set(
      details_fragment.is_null() ? nullptr : details_fragment.data());
  MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
      params->details.is_null(),
      mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
      "null details in ");

#if defined(ENABLE_IPC_FUZZER)
  message.set_interface_name(IndexedDBControl::Name_);
  message.set_method_name("GetAllBucketsDetails");
#endif

  message.set_request_id(request_id_);
  message.set_trace_nonce(trace_nonce_);
  ::mojo::internal::SendMojoMessage(*responder_, message);
  // SendMojoMessage() fails silently if the responder connection is closed,
  // or if the message is malformed.
  //
  // TODO(darin): If Accept() returns false due to a malformed message, that
  // may be good reason to close the connection. However, we don't have a
  // way to do that from here. We should add a way.
  responder_ = nullptr;
}

// static
bool IndexedDBControlStubDispatch::Accept(
    IndexedDBControl* impl,
    mojo::Message* message) {
  switch (message->header()->name) {
    case internal::kIndexedDBControl_BindIndexedDB_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBControl_BindIndexedDB_Params_Data* params =
          reinterpret_cast<internal::IndexedDBControl_BindIndexedDB_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::blink::StorageKey p_storage_key{};
      ::mojo::PendingReceiver<::blink::mojom::IDBFactory> p_receiver{};
      IndexedDBControl_BindIndexedDB_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadStorageKey(&p_storage_key))
        success = false;
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 0, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindIndexedDB(
std::move(p_storage_key), 
std::move(p_receiver));
      return true;
    }
    case internal::kIndexedDBControl_BindIndexedDBForBucket_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBControl_BindIndexedDBForBucket_Params_Data* params =
          reinterpret_cast<internal::IndexedDBControl_BindIndexedDBForBucket_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::storage::BucketLocator p_bucket_locator{};
      ::mojo::PendingReceiver<::blink::mojom::IDBFactory> p_receiver{};
      IndexedDBControl_BindIndexedDBForBucket_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBucketLocator(&p_bucket_locator))
        success = false;
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 1, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindIndexedDBForBucket(
std::move(p_bucket_locator), 
std::move(p_receiver));
      return true;
    }
    case internal::kIndexedDBControl_GetUsage_Name: {
      break;
    }
    case internal::kIndexedDBControl_DeleteForStorageKey_Name: {
      break;
    }
    case internal::kIndexedDBControl_ForceClose_Name: {
      break;
    }
    case internal::kIndexedDBControl_GetConnectionCount_Name: {
      break;
    }
    case internal::kIndexedDBControl_DownloadBucketData_Name: {
      break;
    }
    case internal::kIndexedDBControl_GetAllBucketsDetails_Name: {
      break;
    }
    case internal::kIndexedDBControl_SetForceKeepSessionState_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBControl_SetForceKeepSessionState_Params_Data* params =
          reinterpret_cast<internal::IndexedDBControl_SetForceKeepSessionState_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      IndexedDBControl_SetForceKeepSessionState_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 8, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->SetForceKeepSessionState();
      return true;
    }
    case internal::kIndexedDBControl_AddObserver_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBControl_AddObserver_Params_Data* params =
          reinterpret_cast<internal::IndexedDBControl_AddObserver_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingRemote<IndexedDBObserver> p_observer{};
      IndexedDBControl_AddObserver_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_observer =
            input_data_view.TakeObserver<decltype(p_observer)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 9, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->AddObserver(
std::move(p_observer));
      return true;
    }
    case internal::kIndexedDBControl_ApplyPolicyUpdates_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBControl_ApplyPolicyUpdates_Params_Data* params =
          reinterpret_cast<internal::IndexedDBControl_ApplyPolicyUpdates_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      std::vector<::storage::mojom::StoragePolicyUpdatePtr> p_policy_updates{};
      IndexedDBControl_ApplyPolicyUpdates_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadPolicyUpdates(&p_policy_updates))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 10, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ApplyPolicyUpdates(
std::move(p_policy_updates));
      return true;
    }
    case internal::kIndexedDBControl_BindTestInterface_Name: {

      DCHECK(message->is_serialized());
      internal::IndexedDBControl_BindTestInterface_Params_Data* params =
          reinterpret_cast<internal::IndexedDBControl_BindTestInterface_Params_Data*>(
              message->mutable_payload());
      
      bool success = true;
      ::mojo::PendingReceiver<::storage::mojom::IndexedDBControlTest> p_receiver{};
      IndexedDBControl_BindTestInterface_ParamsDataView input_data_view(params, message);
      
      if (success) {
        p_receiver =
            input_data_view.TakeReceiver<decltype(p_receiver)>();
      }
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 11, false);
        return false;
      }
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->BindTestInterface(
std::move(p_receiver));
      return true;
    }
  }
  return false;
}

// static
bool IndexedDBControlStubDispatch::AcceptWithResponder(
    IndexedDBControl* impl,
    mojo::Message* message,
    std::unique_ptr<mojo::MessageReceiverWithStatus> responder) {
  [[maybe_unused]] const bool message_is_sync =
      message->has_flag(mojo::Message::kFlagIsSync);
  [[maybe_unused]] const uint64_t request_id = message->request_id();
  switch (message->header()->name) {
    case internal::kIndexedDBControl_BindIndexedDB_Name: {
      break;
    }
    case internal::kIndexedDBControl_BindIndexedDBForBucket_Name: {
      break;
    }
    case internal::kIndexedDBControl_GetUsage_Name: {

      internal::IndexedDBControl_GetUsage_Params_Data* params =
          reinterpret_cast<
              internal::IndexedDBControl_GetUsage_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      IndexedDBControl_GetUsage_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 2, false);
        return false;
      }
      IndexedDBControl::GetUsageCallback callback =
          IndexedDBControl_GetUsage_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetUsage(std::move(callback));
      return true;
    }
    case internal::kIndexedDBControl_DeleteForStorageKey_Name: {

      internal::IndexedDBControl_DeleteForStorageKey_Params_Data* params =
          reinterpret_cast<
              internal::IndexedDBControl_DeleteForStorageKey_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::blink::StorageKey p_storage_key{};
      IndexedDBControl_DeleteForStorageKey_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadStorageKey(&p_storage_key))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 3, false);
        return false;
      }
      IndexedDBControl::DeleteForStorageKeyCallback callback =
          IndexedDBControl_DeleteForStorageKey_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DeleteForStorageKey(
std::move(p_storage_key), std::move(callback));
      return true;
    }
    case internal::kIndexedDBControl_ForceClose_Name: {

      internal::IndexedDBControl_ForceClose_Params_Data* params =
          reinterpret_cast<
              internal::IndexedDBControl_ForceClose_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::storage::BucketId p_bucket_id{};
      ForceCloseReason p_reason{};
      IndexedDBControl_ForceClose_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBucketId(&p_bucket_id))
        success = false;
      if (success && !input_data_view.ReadReason(&p_reason))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 4, false);
        return false;
      }
      IndexedDBControl::ForceCloseCallback callback =
          IndexedDBControl_ForceClose_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->ForceClose(
std::move(p_bucket_id), 
std::move(p_reason), std::move(callback));
      return true;
    }
    case internal::kIndexedDBControl_GetConnectionCount_Name: {

      internal::IndexedDBControl_GetConnectionCount_Params_Data* params =
          reinterpret_cast<
              internal::IndexedDBControl_GetConnectionCount_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::storage::BucketId p_bucket_id{};
      IndexedDBControl_GetConnectionCount_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBucketId(&p_bucket_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 5, false);
        return false;
      }
      IndexedDBControl::GetConnectionCountCallback callback =
          IndexedDBControl_GetConnectionCount_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetConnectionCount(
std::move(p_bucket_id), std::move(callback));
      return true;
    }
    case internal::kIndexedDBControl_DownloadBucketData_Name: {

      internal::IndexedDBControl_DownloadBucketData_Params_Data* params =
          reinterpret_cast<
              internal::IndexedDBControl_DownloadBucketData_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      ::storage::BucketId p_bucket_id{};
      IndexedDBControl_DownloadBucketData_ParamsDataView input_data_view(params, message);
      
      if (success && !input_data_view.ReadBucketId(&p_bucket_id))
        success = false;
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 6, false);
        return false;
      }
      IndexedDBControl::DownloadBucketDataCallback callback =
          IndexedDBControl_DownloadBucketData_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->DownloadBucketData(
std::move(p_bucket_id), std::move(callback));
      return true;
    }
    case internal::kIndexedDBControl_GetAllBucketsDetails_Name: {

      internal::IndexedDBControl_GetAllBucketsDetails_Params_Data* params =
          reinterpret_cast<
              internal::IndexedDBControl_GetAllBucketsDetails_Params_Data*>(
                  message->mutable_payload());
      
      bool success = true;
      IndexedDBControl_GetAllBucketsDetails_ParamsDataView input_data_view(params, message);
      
      if (!success) {
        ReportValidationErrorForMessage(
            message,
            mojo::internal::VALIDATION_ERROR_DESERIALIZATION_FAILED,
            IndexedDBControl::Name_, 7, false);
        return false;
      }
      IndexedDBControl::GetAllBucketsDetailsCallback callback =
          IndexedDBControl_GetAllBucketsDetails_ProxyToResponder::CreateCallback(
              *message, std::move(responder));
      // A null |impl| means no implementation was bound.
      DCHECK(impl);
      impl->GetAllBucketsDetails(std::move(callback));
      return true;
    }
    case internal::kIndexedDBControl_SetForceKeepSessionState_Name: {
      break;
    }
    case internal::kIndexedDBControl_AddObserver_Name: {
      break;
    }
    case internal::kIndexedDBControl_ApplyPolicyUpdates_Name: {
      break;
    }
    case internal::kIndexedDBControl_BindTestInterface_Name: {
      break;
    }
  }
  return false;
}


static const mojo::internal::GenericValidationInfo kIndexedDBControlValidationInfo[] = {
    {&internal::IndexedDBControl_BindIndexedDB_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IndexedDBControl_BindIndexedDBForBucket_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IndexedDBControl_GetUsage_Params_Data::Validate,
     &internal::IndexedDBControl_GetUsage_ResponseParams_Data::Validate},
    {&internal::IndexedDBControl_DeleteForStorageKey_Params_Data::Validate,
     &internal::IndexedDBControl_DeleteForStorageKey_ResponseParams_Data::Validate},
    {&internal::IndexedDBControl_ForceClose_Params_Data::Validate,
     &internal::IndexedDBControl_ForceClose_ResponseParams_Data::Validate},
    {&internal::IndexedDBControl_GetConnectionCount_Params_Data::Validate,
     &internal::IndexedDBControl_GetConnectionCount_ResponseParams_Data::Validate},
    {&internal::IndexedDBControl_DownloadBucketData_Params_Data::Validate,
     &internal::IndexedDBControl_DownloadBucketData_ResponseParams_Data::Validate},
    {&internal::IndexedDBControl_GetAllBucketsDetails_Params_Data::Validate,
     &internal::IndexedDBControl_GetAllBucketsDetails_ResponseParams_Data::Validate},
    {&internal::IndexedDBControl_SetForceKeepSessionState_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IndexedDBControl_AddObserver_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IndexedDBControl_ApplyPolicyUpdates_Params_Data::Validate,
     nullptr /* no response */},
    {&internal::IndexedDBControl_BindTestInterface_Params_Data::Validate,
     nullptr /* no response */},
};

bool IndexedDBControlRequestValidator::Accept(mojo::Message* message) {
  const char* name = ::storage::mojom::IndexedDBControl::Name_;
  return mojo::internal::ValidateRequestGenericPacked(message, name, kIndexedDBControlValidationInfo);
}

bool IndexedDBControlResponseValidator::Accept(mojo::Message* message) {
  const char* name = ::storage::mojom::IndexedDBControl::Name_;
  return mojo::internal::ValidateResponseGenericPacked(message, name, kIndexedDBControlValidationInfo);
}


}  // namespace mojom
}  // namespace storage


namespace mojo {

}  // namespace mojo


// Symbols declared in the -test-utils.h header are defined here instead of a
// separate .cc file to save compile time.


namespace storage {
namespace mojom {


void IndexedDBObserverInterceptorForTesting::OnIndexedDBListChanged(const ::storage::BucketLocator& bucket_locator) {
  GetForwardingInterface()->OnIndexedDBListChanged(std::move(bucket_locator));
}
void IndexedDBObserverInterceptorForTesting::OnIndexedDBContentChanged(const ::storage::BucketLocator& bucket_locator, const ::std::u16string& database_name, const ::std::u16string& object_store_name) {
  GetForwardingInterface()->OnIndexedDBContentChanged(std::move(bucket_locator), std::move(database_name), std::move(object_store_name));
}
IndexedDBObserverAsyncWaiter::IndexedDBObserverAsyncWaiter(
    IndexedDBObserver* proxy) : proxy_(proxy) {}

IndexedDBObserverAsyncWaiter::~IndexedDBObserverAsyncWaiter() = default;




void IndexedDBControlInterceptorForTesting::BindIndexedDB(const ::blink::StorageKey& storage_key, ::mojo::PendingReceiver<::blink::mojom::IDBFactory> receiver) {
  GetForwardingInterface()->BindIndexedDB(std::move(storage_key), std::move(receiver));
}
void IndexedDBControlInterceptorForTesting::BindIndexedDBForBucket(const ::storage::BucketLocator& bucket_locator, ::mojo::PendingReceiver<::blink::mojom::IDBFactory> receiver) {
  GetForwardingInterface()->BindIndexedDBForBucket(std::move(bucket_locator), std::move(receiver));
}
void IndexedDBControlInterceptorForTesting::GetUsage(GetUsageCallback callback) {
  GetForwardingInterface()->GetUsage(std::move(callback));
}
void IndexedDBControlInterceptorForTesting::DeleteForStorageKey(const ::blink::StorageKey& storage_key, DeleteForStorageKeyCallback callback) {
  GetForwardingInterface()->DeleteForStorageKey(std::move(storage_key), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::ForceClose(::storage::BucketId bucket_id, ForceCloseReason reason, ForceCloseCallback callback) {
  GetForwardingInterface()->ForceClose(std::move(bucket_id), std::move(reason), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::GetConnectionCount(::storage::BucketId bucket_id, GetConnectionCountCallback callback) {
  GetForwardingInterface()->GetConnectionCount(std::move(bucket_id), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::DownloadBucketData(::storage::BucketId bucket_id, DownloadBucketDataCallback callback) {
  GetForwardingInterface()->DownloadBucketData(std::move(bucket_id), std::move(callback));
}
void IndexedDBControlInterceptorForTesting::GetAllBucketsDetails(GetAllBucketsDetailsCallback callback) {
  GetForwardingInterface()->GetAllBucketsDetails(std::move(callback));
}
void IndexedDBControlInterceptorForTesting::SetForceKeepSessionState() {
  GetForwardingInterface()->SetForceKeepSessionState();
}
void IndexedDBControlInterceptorForTesting::AddObserver(::mojo::PendingRemote<IndexedDBObserver> observer) {
  GetForwardingInterface()->AddObserver(std::move(observer));
}
void IndexedDBControlInterceptorForTesting::ApplyPolicyUpdates(std::vector<::storage::mojom::StoragePolicyUpdatePtr> policy_updates) {
  GetForwardingInterface()->ApplyPolicyUpdates(std::move(policy_updates));
}
void IndexedDBControlInterceptorForTesting::BindTestInterface(::mojo::PendingReceiver<::storage::mojom::IndexedDBControlTest> receiver) {
  GetForwardingInterface()->BindTestInterface(std::move(receiver));
}
IndexedDBControlAsyncWaiter::IndexedDBControlAsyncWaiter(
    IndexedDBControl* proxy) : proxy_(proxy) {}

IndexedDBControlAsyncWaiter::~IndexedDBControlAsyncWaiter() = default;

void IndexedDBControlAsyncWaiter::GetUsage(
    std::vector<::storage::mojom::StorageUsageInfoPtr>* out_info) {
  base::RunLoop loop;
  proxy_->GetUsage(
      base::BindOnce(
          [](base::RunLoop* loop,
             std::vector<::storage::mojom::StorageUsageInfoPtr>* out_info
,
             std::vector<::storage::mojom::StorageUsageInfoPtr> info) {*out_info = std::move(info);
            loop->Quit();
          },
          &loop,
          out_info));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::DeleteForStorageKey(
    const ::blink::StorageKey& storage_key, bool* out_success) {
  base::RunLoop loop;
  proxy_->DeleteForStorageKey(std::move(storage_key),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             bool success) {*out_success = std::move(success);
            loop->Quit();
          },
          &loop,
          out_success));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::ForceClose(
    ::storage::BucketId bucket_id, ForceCloseReason reason) {
  base::RunLoop loop;
  proxy_->ForceClose(std::move(bucket_id),std::move(reason),
      base::BindOnce(
          [](base::RunLoop* loop) {
            loop->Quit();
          },
          &loop));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::GetConnectionCount(
    ::storage::BucketId bucket_id, uint64_t* out_connection_count) {
  base::RunLoop loop;
  proxy_->GetConnectionCount(std::move(bucket_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             uint64_t* out_connection_count
,
             uint64_t connection_count) {*out_connection_count = std::move(connection_count);
            loop->Quit();
          },
          &loop,
          out_connection_count));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::DownloadBucketData(
    ::storage::BucketId bucket_id, bool* out_success, ::base::FilePath* out_temp_path, ::base::FilePath* out_zip_path) {
  base::RunLoop loop;
  proxy_->DownloadBucketData(std::move(bucket_id),
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_success
,
             ::base::FilePath* out_temp_path
,
             ::base::FilePath* out_zip_path
,
             bool success,
             const ::base::FilePath& temp_path,
             const ::base::FilePath& zip_path) {*out_success = std::move(success);*out_temp_path = std::move(temp_path);*out_zip_path = std::move(zip_path);
            loop->Quit();
          },
          &loop,
          out_success,
          out_temp_path,
          out_zip_path));
  loop.Run();
}
void IndexedDBControlAsyncWaiter::GetAllBucketsDetails(
    bool* out_incognito, ::base::Value::List* out_details) {
  base::RunLoop loop;
  proxy_->GetAllBucketsDetails(
      base::BindOnce(
          [](base::RunLoop* loop,
             bool* out_incognito
,
             ::base::Value::List* out_details
,
             bool incognito,
             ::base::Value::List details) {*out_incognito = std::move(incognito);*out_details = std::move(details);
            loop->Quit();
          },
          &loop,
          out_incognito,
          out_details));
  loop.Run();
}





}  // namespace mojom
}  // namespace storage


#if defined(__clang__)
#pragma clang diagnostic pop
#endif