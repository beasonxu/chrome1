// components/services/storage/privileged/mojom/indexed_db_control.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/storage/privileged/mojom/indexed_db_control.mojom-shared-internal.h"
#include "components/services/storage/privileged/mojom/indexed_db_control_test.mojom-shared.h"
#include "components/services/storage/public/mojom/buckets/bucket_locator.mojom-shared.h"
#include "components/services/storage/public/mojom/buckets/bucket_id.mojom-shared.h"
#include "components/services/storage/public/mojom/storage_policy_update.mojom-shared.h"
#include "components/services/storage/public/mojom/storage_usage_info.mojom-shared.h"
#include "mojo/public/mojom/base/file_path.mojom-shared.h"
#include "mojo/public/mojom/base/string16.mojom-shared.h"
#include "mojo/public/mojom/base/values.mojom-shared.h"
#include "mojo/public/mojom/base/time.mojom-shared.h"
#include "third_party/blink/public/mojom/indexeddb/indexeddb.mojom-shared.h"
#include "third_party/blink/public/mojom/storage_key/storage_key.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace storage {
namespace mojom {


}  // namespace mojom
}  // namespace storage

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace storage {
namespace mojom {


enum class ForceCloseReason : int32_t {
  
  FORCE_CLOSE_DELETE_ORIGIN = 0,
  
  FORCE_CLOSE_BACKING_STORE_FAILURE = 1,
  
  FORCE_CLOSE_INTERNALS_PAGE = 2,
  
  FORCE_CLOSE_COPY_ORIGIN = 3,
  
  FORCE_SCHEMA_DOWNGRADE_INTERNALS_PAGE = 4,
  kMinValue = 0,
  kMaxValue = 4,
};

 std::ostream& operator<<(std::ostream& os, ForceCloseReason value);
inline bool IsKnownEnumValue(ForceCloseReason value) {
  return internal::ForceCloseReason_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class IndexedDBObserverInterfaceBase {};

using IndexedDBObserverPtrDataView =
    mojo::InterfacePtrDataView<IndexedDBObserverInterfaceBase>;
using IndexedDBObserverRequestDataView =
    mojo::InterfaceRequestDataView<IndexedDBObserverInterfaceBase>;
using IndexedDBObserverAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IndexedDBObserverInterfaceBase>;
using IndexedDBObserverAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IndexedDBObserverInterfaceBase>;
class IndexedDBControlInterfaceBase {};

using IndexedDBControlPtrDataView =
    mojo::InterfacePtrDataView<IndexedDBControlInterfaceBase>;
using IndexedDBControlRequestDataView =
    mojo::InterfaceRequestDataView<IndexedDBControlInterfaceBase>;
using IndexedDBControlAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<IndexedDBControlInterfaceBase>;
using IndexedDBControlAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<IndexedDBControlInterfaceBase>;


}  // namespace mojom
}  // namespace storage

namespace std {

template <>
struct hash<::storage::mojom::ForceCloseReason>
    : public mojo::internal::EnumHashImpl<::storage::mojom::ForceCloseReason> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::storage::mojom::ForceCloseReason, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::storage::mojom::ForceCloseReason, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::storage::mojom::ForceCloseReason>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace storage {
namespace mojom {


}  // namespace mojom
}  // namespace storage

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::storage::mojom::ForceCloseReason> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::storage::mojom::ForceCloseReason value);
};

} // namespace perfetto

#endif  // COMPONENTS_SERVICES_STORAGE_PRIVILEGED_MOJOM_INDEXED_DB_CONTROL_MOJOM_SHARED_H_