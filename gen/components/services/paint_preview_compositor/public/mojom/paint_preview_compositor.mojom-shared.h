// components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_H_
#define COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>
#include "mojo/public/cpp/bindings/array_data_view.h"
#include "mojo/public/cpp/bindings/enum_traits.h"
#include "mojo/public/cpp/bindings/interface_data_view.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/map_data_view.h"
#include "mojo/public/cpp/bindings/string_data_view.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-shared-internal.h"
#include "components/discardable_memory/public/mojom/discardable_shared_memory_manager.mojom-shared.h"
#include "components/paint_preview/common/mojom/paint_preview_types.mojom-shared.h"
#include "mojo/public/mojom/base/memory_pressure_level.mojom-shared.h"
#include "mojo/public/mojom/base/shared_memory.mojom-shared.h"
#include "mojo/public/mojom/base/unguessable_token.mojom-shared.h"
#include "sandbox/policy/mojom/sandbox.mojom-shared.h"
#include "skia/public/mojom/bitmap.mojom-shared.h"
#include "ui/gfx/geometry/mojom/geometry.mojom-shared.h"
#include "url/mojom/url.mojom-shared.h"
#include "mojo/public/cpp/bindings/lib/interface_serialization.h"






namespace paint_preview {
namespace mojom {
class PaintPreviewBeginCompositeRequestDataView;

class SubframeClipRectDataView;

class FrameDataDataView;

class PaintPreviewBeginCompositeResponseDataView;



}  // namespace mojom
}  // namespace paint_preview

namespace mojo {
namespace internal {

template <>
struct MojomTypeTraits<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView> {
  using Data = ::paint_preview::mojom::internal::PaintPreviewBeginCompositeRequest_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::paint_preview::mojom::SubframeClipRectDataView> {
  using Data = ::paint_preview::mojom::internal::SubframeClipRect_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::paint_preview::mojom::FrameDataDataView> {
  using Data = ::paint_preview::mojom::internal::FrameData_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

template <>
struct MojomTypeTraits<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView> {
  using Data = ::paint_preview::mojom::internal::PaintPreviewBeginCompositeResponse_Data;
  using DataAsArrayElement = Pointer<Data>;
  static constexpr MojomTypeCategory category = MojomTypeCategory::kStruct;
};

}  // namespace internal
}  // namespace mojo


namespace paint_preview {
namespace mojom {


enum class PaintPreviewCompositor_BeginCompositeStatus : int32_t {
  
  kSuccess = 0,
  
  kPartialSuccess = 1,
  
  kDeserializingFailure = -1,
  
  kCompositingFailure = -2,
  kMinValue = -2,
  kMaxValue = 1,
};

 std::ostream& operator<<(std::ostream& os, PaintPreviewCompositor_BeginCompositeStatus value);
inline bool IsKnownEnumValue(PaintPreviewCompositor_BeginCompositeStatus value) {
  return internal::PaintPreviewCompositor_BeginCompositeStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


enum class PaintPreviewCompositor_BitmapStatus : int32_t {
  
  kSuccess = 0,
  
  kMissingFrame = 1,
  
  kAllocFailed = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

 std::ostream& operator<<(std::ostream& os, PaintPreviewCompositor_BitmapStatus value);
inline bool IsKnownEnumValue(PaintPreviewCompositor_BitmapStatus value) {
  return internal::PaintPreviewCompositor_BitmapStatus_Data::IsKnownValue(
      static_cast<int32_t>(value));
}
// Interface base classes. They are used for type safety check.
class PaintPreviewCompositorInterfaceBase {};

using PaintPreviewCompositorPtrDataView =
    mojo::InterfacePtrDataView<PaintPreviewCompositorInterfaceBase>;
using PaintPreviewCompositorRequestDataView =
    mojo::InterfaceRequestDataView<PaintPreviewCompositorInterfaceBase>;
using PaintPreviewCompositorAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PaintPreviewCompositorInterfaceBase>;
using PaintPreviewCompositorAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PaintPreviewCompositorInterfaceBase>;
class PaintPreviewCompositorCollectionInterfaceBase {};

using PaintPreviewCompositorCollectionPtrDataView =
    mojo::InterfacePtrDataView<PaintPreviewCompositorCollectionInterfaceBase>;
using PaintPreviewCompositorCollectionRequestDataView =
    mojo::InterfaceRequestDataView<PaintPreviewCompositorCollectionInterfaceBase>;
using PaintPreviewCompositorCollectionAssociatedPtrInfoDataView =
    mojo::AssociatedInterfacePtrInfoDataView<PaintPreviewCompositorCollectionInterfaceBase>;
using PaintPreviewCompositorCollectionAssociatedRequestDataView =
    mojo::AssociatedInterfaceRequestDataView<PaintPreviewCompositorCollectionInterfaceBase>;


class PaintPreviewBeginCompositeRequestDataView {
 public:
  PaintPreviewBeginCompositeRequestDataView() = default;

  PaintPreviewBeginCompositeRequestDataView(
      internal::PaintPreviewBeginCompositeRequest_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetProtoDataView(
      ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadProto(UserType* output) {
    
    auto* pointer = data_->proto.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        pointer, output, message_);
  }
  inline void GetRecordingMapDataView(
      mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::SerializedRecordingDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRecordingMap(UserType* output) {
    
    auto* pointer = data_->recording_map.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::SerializedRecordingDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewBeginCompositeRequest_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class SubframeClipRectDataView {
 public:
  SubframeClipRectDataView() = default;

  SubframeClipRectDataView(
      internal::SubframeClipRect_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameGuid(UserType* output) {
    
    auto* pointer = data_->frame_guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectFDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClipRect(UserType* output) {
    
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectFDataView>(
        pointer, output, message_);
  }
 private:
  internal::SubframeClipRect_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class FrameDataDataView {
 public:
  FrameDataDataView() = default;

  FrameDataDataView(
      internal::FrameData_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetScrollExtentsDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScrollExtents(UserType* output) {
    
    auto* pointer = data_->scroll_extents.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetScrollOffsetsDataView(
      ::gfx::mojom::SizeDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadScrollOffsets(UserType* output) {
    
    auto* pointer = data_->scroll_offsets.Get();
    return mojo::internal::Deserialize<::gfx::mojom::SizeDataView>(
        pointer, output, message_);
  }
  inline void GetSubframesDataView(
      mojo::ArrayDataView<SubframeClipRectDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadSubframes(UserType* output) {
    
    auto* pointer = data_->subframes.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::paint_preview::mojom::SubframeClipRectDataView>>(
        pointer, output, message_);
  }
 private:
  internal::FrameData_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewBeginCompositeResponseDataView {
 public:
  PaintPreviewBeginCompositeResponseDataView() = default;

  PaintPreviewBeginCompositeResponseDataView(
      internal::PaintPreviewBeginCompositeResponse_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRootFrameGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRootFrameGuid(UserType* output) {
    
    auto* pointer = data_->root_frame_guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetFramesDataView(
      mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, FrameDataDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrames(UserType* output) {
    
    auto* pointer = data_->frames.Get();
    return mojo::internal::Deserialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::FrameDataDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewBeginCompositeResponse_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



}  // namespace mojom
}  // namespace paint_preview

namespace std {

template <>
struct hash<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus>
    : public mojo::internal::EnumHashImpl<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus> {};

template <>
struct hash<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus>
    : public mojo::internal::EnumHashImpl<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus>(input)), output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::paint_preview::mojom::internal::PaintPreviewBeginCompositeRequest_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::proto(input)) in_proto = Traits::proto(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->proto)::BaseType> proto_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView>(
        in_proto, proto_fragment);
    fragment->proto.Set(
        proto_fragment.is_null() ? nullptr : proto_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->proto.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null proto in PaintPreviewBeginCompositeRequest struct");
    decltype(Traits::recording_map(input)) in_recording_map = Traits::recording_map(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->recording_map)::BaseType>
        recording_map_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams recording_map_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::SerializedRecordingDataView>>(
        in_recording_map, recording_map_fragment, &recording_map_validate_params);
    fragment->recording_map.Set(
        recording_map_fragment.is_null() ? nullptr : recording_map_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->recording_map.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null recording_map in PaintPreviewBeginCompositeRequest struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::PaintPreviewBeginCompositeRequest_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::SubframeClipRectDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::SubframeClipRectDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::paint_preview::mojom::internal::SubframeClipRect_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::frame_guid(input)) in_frame_guid = Traits::frame_guid(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->frame_guid)::BaseType> frame_guid_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_frame_guid, frame_guid_fragment);
    fragment->frame_guid.Set(
        frame_guid_fragment.is_null() ? nullptr : frame_guid_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->frame_guid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frame_guid in SubframeClipRect struct");
    decltype(Traits::clip_rect(input)) in_clip_rect = Traits::clip_rect(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->clip_rect)::BaseType> clip_rect_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::RectFDataView>(
        in_clip_rect, clip_rect_fragment);
    fragment->clip_rect.Set(
        clip_rect_fragment.is_null() ? nullptr : clip_rect_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->clip_rect.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null clip_rect in SubframeClipRect struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::SubframeClipRect_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::SubframeClipRectDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::FrameDataDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::FrameDataDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::paint_preview::mojom::internal::FrameData_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::scroll_extents(input)) in_scroll_extents = Traits::scroll_extents(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->scroll_extents)::BaseType> scroll_extents_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_scroll_extents, scroll_extents_fragment);
    fragment->scroll_extents.Set(
        scroll_extents_fragment.is_null() ? nullptr : scroll_extents_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->scroll_extents.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null scroll_extents in FrameData struct");
    decltype(Traits::scroll_offsets(input)) in_scroll_offsets = Traits::scroll_offsets(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->scroll_offsets)::BaseType> scroll_offsets_fragment(
            fragment.message());
    mojo::internal::Serialize<::gfx::mojom::SizeDataView>(
        in_scroll_offsets, scroll_offsets_fragment);
    fragment->scroll_offsets.Set(
        scroll_offsets_fragment.is_null() ? nullptr : scroll_offsets_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->scroll_offsets.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null scroll_offsets in FrameData struct");
    decltype(Traits::subframes(input)) in_subframes = Traits::subframes(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->subframes)::BaseType>
        subframes_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams subframes_validate_params(
        0, false, nullptr);
    mojo::internal::Serialize<mojo::ArrayDataView<::paint_preview::mojom::SubframeClipRectDataView>>(
        in_subframes, subframes_fragment, &subframes_validate_params);
    fragment->subframes.Set(
        subframes_fragment.is_null() ? nullptr : subframes_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->subframes.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null subframes in FrameData struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::FrameData_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::FrameDataDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = StructTraits<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView, UserType>;

  static void Serialize(
      MaybeConstUserType& input,
      mojo::internal::MessageFragment<::paint_preview::mojom::internal::PaintPreviewBeginCompositeResponse_Data>& fragment) {
    if (CallIsNullIfExists<Traits>(input))
      return;
    fragment.Allocate();
    decltype(Traits::root_frame_guid(input)) in_root_frame_guid = Traits::root_frame_guid(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->root_frame_guid)::BaseType> root_frame_guid_fragment(
            fragment.message());
    mojo::internal::Serialize<::mojo_base::mojom::UnguessableTokenDataView>(
        in_root_frame_guid, root_frame_guid_fragment);
    fragment->root_frame_guid.Set(
        root_frame_guid_fragment.is_null() ? nullptr : root_frame_guid_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->root_frame_guid.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null root_frame_guid in PaintPreviewBeginCompositeResponse struct");
    decltype(Traits::frames(input)) in_frames = Traits::frames(input);
    mojo::internal::MessageFragment<
        typename decltype(fragment->frames)::BaseType>
        frames_fragment(fragment.message());
    const mojo::internal::ContainerValidateParams frames_validate_params(
        new mojo::internal::ContainerValidateParams(0, false, nullptr), new mojo::internal::ContainerValidateParams(0, false, nullptr));
    mojo::internal::Serialize<mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::FrameDataDataView>>(
        in_frames, frames_fragment, &frames_validate_params);
    fragment->frames.Set(
        frames_fragment.is_null() ? nullptr : frames_fragment.data());
    MOJO_INTERNAL_DLOG_SERIALIZATION_WARNING(
        fragment->frames.is_null(),
        mojo::internal::VALIDATION_ERROR_UNEXPECTED_NULL_POINTER,
        "null frames in PaintPreviewBeginCompositeResponse struct");
  }

  static bool Deserialize(::paint_preview::mojom::internal::PaintPreviewBeginCompositeResponse_Data* input,
                          UserType* output,
                          Message* message) {
    if (!input)
      return CallSetToNullIfExists<Traits>(output);

    ::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView data_view(input, message);
    return Traits::Read(data_view, output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace paint_preview {
namespace mojom {

inline void PaintPreviewBeginCompositeRequestDataView::GetProtoDataView(
    ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView* output) {
  auto pointer = data_->proto.Get();
  *output = ::mojo_base::mojom::ReadOnlySharedMemoryRegionDataView(pointer, message_);
}
inline void PaintPreviewBeginCompositeRequestDataView::GetRecordingMapDataView(
    mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::SerializedRecordingDataView>* output) {
  auto pointer = data_->recording_map.Get();
  *output = mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, ::paint_preview::mojom::SerializedRecordingDataView>(pointer, message_);
}


inline void SubframeClipRectDataView::GetFrameGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->frame_guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void SubframeClipRectDataView::GetClipRectDataView(
    ::gfx::mojom::RectFDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectFDataView(pointer, message_);
}


inline void FrameDataDataView::GetScrollExtentsDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->scroll_extents.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void FrameDataDataView::GetScrollOffsetsDataView(
    ::gfx::mojom::SizeDataView* output) {
  auto pointer = data_->scroll_offsets.Get();
  *output = ::gfx::mojom::SizeDataView(pointer, message_);
}
inline void FrameDataDataView::GetSubframesDataView(
    mojo::ArrayDataView<SubframeClipRectDataView>* output) {
  auto pointer = data_->subframes.Get();
  *output = mojo::ArrayDataView<SubframeClipRectDataView>(pointer, message_);
}


inline void PaintPreviewBeginCompositeResponseDataView::GetRootFrameGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->root_frame_guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void PaintPreviewBeginCompositeResponseDataView::GetFramesDataView(
    mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, FrameDataDataView>* output) {
  auto pointer = data_->frames.Get();
  *output = mojo::MapDataView<::mojo_base::mojom::UnguessableTokenDataView, FrameDataDataView>(pointer, message_);
}



}  // namespace mojom
}  // namespace paint_preview

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct  TraceFormatTraits<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus value);
};

} // namespace perfetto

namespace perfetto {

template <>
struct  TraceFormatTraits<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus value);
};

} // namespace perfetto

#endif  // COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_SHARED_H_