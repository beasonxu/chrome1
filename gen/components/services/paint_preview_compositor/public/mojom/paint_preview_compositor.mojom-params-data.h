// components/services/paint_preview_compositor/public/mojom/paint_preview_compositor.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace paint_preview {
namespace mojom {
namespace internal {

class ValidationContext;
class  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PaintPreviewBeginCompositeRequest_Data> request;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data>;

  PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data();
  ~PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data) == 16,
              "Bad sizeof(PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data)");
class  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::PaintPreviewBeginCompositeResponse_Data> response;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data>;

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data();
  ~PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data) == 24,
              "Bad sizeof(PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data)");
class  PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> frame_guid;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;
  float scale_factor;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data>;

  PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data();
  ~PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data) == 32,
              "Bad sizeof(PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data)");
class  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::skia::mojom::internal::BitmapN32_Data> bitmap;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data>;

  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data();
  ~PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data) == 24,
              "Bad sizeof(PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data)");
class  PaintPreviewCompositor_BeginMainFrameComposite_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::PaintPreviewBeginCompositeRequest_Data> request;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BeginMainFrameComposite_Params_Data>;

  PaintPreviewCompositor_BeginMainFrameComposite_Params_Data();
  ~PaintPreviewCompositor_BeginMainFrameComposite_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BeginMainFrameComposite_Params_Data) == 16,
              "Bad sizeof(PaintPreviewCompositor_BeginMainFrameComposite_Params_Data)");
class  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<internal::PaintPreviewBeginCompositeResponse_Data> response;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data>;

  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data();
  ~PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data) == 24,
              "Bad sizeof(PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data)");
class  PaintPreviewCompositor_BitmapForMainFrame_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::gfx::mojom::internal::Rect_Data> clip_rect;
  float scale_factor;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BitmapForMainFrame_Params_Data>;

  PaintPreviewCompositor_BitmapForMainFrame_Params_Data();
  ~PaintPreviewCompositor_BitmapForMainFrame_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BitmapForMainFrame_Params_Data) == 24,
              "Bad sizeof(PaintPreviewCompositor_BitmapForMainFrame_Params_Data)");
class  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t status;
  uint8_t pad0_[4];
  mojo::internal::Pointer<::skia::mojom::internal::BitmapN32_Data> bitmap;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data>;

  PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data();
  ~PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data) == 24,
              "Bad sizeof(PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data)");
class  PaintPreviewCompositor_SetRootFrameUrl_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::url::mojom::internal::Url_Data> url;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositor_SetRootFrameUrl_Params_Data>;

  PaintPreviewCompositor_SetRootFrameUrl_Params_Data();
  ~PaintPreviewCompositor_SetRootFrameUrl_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositor_SetRootFrameUrl_Params_Data) == 16,
              "Bad sizeof(PaintPreviewCompositor_SetRootFrameUrl_Params_Data)");
class  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Interface_Data manager;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data>;

  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data();
  ~PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data) == 16,
              "Bad sizeof(PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data)");
class  PaintPreviewCompositorCollection_CreateCompositor_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Handle_Data compositor;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositorCollection_CreateCompositor_Params_Data>;

  PaintPreviewCompositorCollection_CreateCompositor_Params_Data();
  ~PaintPreviewCompositorCollection_CreateCompositor_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositorCollection_CreateCompositor_Params_Data) == 16,
              "Bad sizeof(PaintPreviewCompositorCollection_CreateCompositor_Params_Data)");
class  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data> compositor_id;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data>;

  PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data();
  ~PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data) == 16,
              "Bad sizeof(PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data)");
class  PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t memory_pressure_level;
  uint8_t padfinal_[4];

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data>;

  PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data();
  ~PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data) == 16,
              "Bad sizeof(PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data)");
class  PaintPreviewCompositorCollection_ListCompositors_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositorCollection_ListCompositors_Params_Data>;

  PaintPreviewCompositorCollection_ListCompositors_Params_Data();
  ~PaintPreviewCompositorCollection_ListCompositors_Params_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositorCollection_ListCompositors_Params_Data) == 8,
              "Bad sizeof(PaintPreviewCompositorCollection_ListCompositors_Params_Data)");
class  PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<::mojo_base::mojom::internal::UnguessableToken_Data>>> compositor_ids;

 private:
  friend class mojo::internal::MessageFragment<PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data>;

  PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data();
  ~PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data() = delete;
};
static_assert(sizeof(PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data) == 16,
              "Bad sizeof(PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data)");

}  // namespace internal


class PaintPreviewCompositor_BeginSeparatedFrameComposite_ParamsDataView {
 public:
  PaintPreviewCompositor_BeginSeparatedFrameComposite_ParamsDataView() = default;

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ParamsDataView(
      internal::PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      PaintPreviewBeginCompositeRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_BeginSeparatedFrameComposite_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParamsDataView {
 public:
  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParamsDataView() = default;

  PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParamsDataView(
      internal::PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus>(
        data_value, output);
  }
  PaintPreviewCompositor_BeginCompositeStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus>(data_->status));
  }
  inline void GetResponseDataView(
      PaintPreviewBeginCompositeResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponse(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView, UserType>(),
    "Attempting to read the optional `response` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadResponse` instead "
    "of `ReadResponse if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->response.Get();
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BitmapForSeparatedFrame_ParamsDataView {
 public:
  PaintPreviewCompositor_BitmapForSeparatedFrame_ParamsDataView() = default;

  PaintPreviewCompositor_BitmapForSeparatedFrame_ParamsDataView(
      internal::PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetFrameGuidDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadFrameGuid(UserType* output) {
    
    auto* pointer = data_->frame_guid.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClipRect(UserType* output) {
    
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  float scale_factor() const {
    return data_->scale_factor;
  }
 private:
  internal::PaintPreviewCompositor_BitmapForSeparatedFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParamsDataView {
 public:
  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParamsDataView() = default;

  PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParamsDataView(
      internal::PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus>(
        data_value, output);
  }
  PaintPreviewCompositor_BitmapStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus>(data_->status));
  }
  inline void GetBitmapDataView(
      ::skia::mojom::BitmapN32DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBitmap(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::skia::mojom::BitmapN32DataView, UserType>(),
    "Attempting to read the optional `bitmap` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBitmap` instead "
    "of `ReadBitmap if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->bitmap.Get();
    return mojo::internal::Deserialize<::skia::mojom::BitmapN32DataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BeginMainFrameComposite_ParamsDataView {
 public:
  PaintPreviewCompositor_BeginMainFrameComposite_ParamsDataView() = default;

  PaintPreviewCompositor_BeginMainFrameComposite_ParamsDataView(
      internal::PaintPreviewCompositor_BeginMainFrameComposite_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRequestDataView(
      PaintPreviewBeginCompositeRequestDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRequest(UserType* output) {
    
    auto* pointer = data_->request.Get();
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewBeginCompositeRequestDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_BeginMainFrameComposite_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BeginMainFrameComposite_ResponseParamsDataView {
 public:
  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParamsDataView() = default;

  PaintPreviewCompositor_BeginMainFrameComposite_ResponseParamsDataView(
      internal::PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus>(
        data_value, output);
  }
  PaintPreviewCompositor_BeginCompositeStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::paint_preview::mojom::PaintPreviewCompositor_BeginCompositeStatus>(data_->status));
  }
  inline void GetResponseDataView(
      PaintPreviewBeginCompositeResponseDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadResponse(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView, UserType>(),
    "Attempting to read the optional `response` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadResponse` instead "
    "of `ReadResponse if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->response.Get();
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewBeginCompositeResponseDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_BeginMainFrameComposite_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BitmapForMainFrame_ParamsDataView {
 public:
  PaintPreviewCompositor_BitmapForMainFrame_ParamsDataView() = default;

  PaintPreviewCompositor_BitmapForMainFrame_ParamsDataView(
      internal::PaintPreviewCompositor_BitmapForMainFrame_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetClipRectDataView(
      ::gfx::mojom::RectDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadClipRect(UserType* output) {
    
    auto* pointer = data_->clip_rect.Get();
    return mojo::internal::Deserialize<::gfx::mojom::RectDataView>(
        pointer, output, message_);
  }
  float scale_factor() const {
    return data_->scale_factor;
  }
 private:
  internal::PaintPreviewCompositor_BitmapForMainFrame_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_BitmapForMainFrame_ResponseParamsDataView {
 public:
  PaintPreviewCompositor_BitmapForMainFrame_ResponseParamsDataView() = default;

  PaintPreviewCompositor_BitmapForMainFrame_ResponseParamsDataView(
      internal::PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadStatus(UserType* output) const {
    auto data_value = data_->status;
    return mojo::internal::Deserialize<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus>(
        data_value, output);
  }
  PaintPreviewCompositor_BitmapStatus status() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::paint_preview::mojom::PaintPreviewCompositor_BitmapStatus>(data_->status));
  }
  inline void GetBitmapDataView(
      ::skia::mojom::BitmapN32DataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadBitmap(UserType* output) {
    
static_assert(
    mojo::internal::IsValidUserTypeForOptionalValue<
        ::skia::mojom::BitmapN32DataView, UserType>(),
    "Attempting to read the optional `bitmap` field into a type which "
    "cannot represent a null value. Either wrap the destination object "
    "with absl::optional, ensure that any corresponding "
    "{Struct/Union/Array/String}Traits define the necessary IsNull and "
    "SetToNull methods, or use `MaybeReadBitmap` instead "
    "of `ReadBitmap if you're fine with null values being "
    "silently ignored in this case.");
    auto* pointer = data_->bitmap.Get();
    return mojo::internal::Deserialize<::skia::mojom::BitmapN32DataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_BitmapForMainFrame_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositor_SetRootFrameUrl_ParamsDataView {
 public:
  PaintPreviewCompositor_SetRootFrameUrl_ParamsDataView() = default;

  PaintPreviewCompositor_SetRootFrameUrl_ParamsDataView(
      internal::PaintPreviewCompositor_SetRootFrameUrl_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetUrlDataView(
      ::url::mojom::UrlDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadUrl(UserType* output) {
    
    auto* pointer = data_->url.Get();
    return mojo::internal::Deserialize<::url::mojom::UrlDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositor_SetRootFrameUrl_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_ParamsDataView {
 public:
  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_ParamsDataView() = default;

  PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_ParamsDataView(
      internal::PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeManager() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfacePtrDataView<::discardable_memory::mojom::DiscardableSharedMemoryManagerInterfaceBase>>(
            &data_->manager, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PaintPreviewCompositorCollection_SetDiscardableSharedMemoryManager_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositorCollection_CreateCompositor_ParamsDataView {
 public:
  PaintPreviewCompositorCollection_CreateCompositor_ParamsDataView() = default;

  PaintPreviewCompositorCollection_CreateCompositor_ParamsDataView(
      internal::PaintPreviewCompositorCollection_CreateCompositor_Params_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  UserType TakeCompositor() {
    UserType result;
    bool ret =
        mojo::internal::Deserialize<mojo::InterfaceRequestDataView<::paint_preview::mojom::PaintPreviewCompositorInterfaceBase>>(
            &data_->compositor, &result, message_);
    DCHECK(ret);
    return result;
  }
 private:
  internal::PaintPreviewCompositorCollection_CreateCompositor_Params_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositorCollection_CreateCompositor_ResponseParamsDataView {
 public:
  PaintPreviewCompositorCollection_CreateCompositor_ResponseParamsDataView() = default;

  PaintPreviewCompositorCollection_CreateCompositor_ResponseParamsDataView(
      internal::PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCompositorIdDataView(
      ::mojo_base::mojom::UnguessableTokenDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCompositorId(UserType* output) {
    
    auto* pointer = data_->compositor_id.Get();
    return mojo::internal::Deserialize<::mojo_base::mojom::UnguessableTokenDataView>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositorCollection_CreateCompositor_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};



class PaintPreviewCompositorCollection_OnMemoryPressure_ParamsDataView {
 public:
  PaintPreviewCompositorCollection_OnMemoryPressure_ParamsDataView() = default;

  PaintPreviewCompositorCollection_OnMemoryPressure_ParamsDataView(
      internal::PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
  template <typename UserType>
  [[nodiscard]] bool ReadMemoryPressureLevel(UserType* output) const {
    auto data_value = data_->memory_pressure_level;
    return mojo::internal::Deserialize<::mojo_base::mojom::MemoryPressureLevel>(
        data_value, output);
  }
  ::mojo_base::mojom::MemoryPressureLevel memory_pressure_level() const {
    return ::mojo::internal::ToKnownEnumValueHelper(
          static_cast<::mojo_base::mojom::MemoryPressureLevel>(data_->memory_pressure_level));
  }
 private:
  internal::PaintPreviewCompositorCollection_OnMemoryPressure_Params_Data* data_ = nullptr;
};



class PaintPreviewCompositorCollection_ListCompositors_ParamsDataView {
 public:
  PaintPreviewCompositorCollection_ListCompositors_ParamsDataView() = default;

  PaintPreviewCompositorCollection_ListCompositors_ParamsDataView(
      internal::PaintPreviewCompositorCollection_ListCompositors_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::PaintPreviewCompositorCollection_ListCompositors_Params_Data* data_ = nullptr;
};



class PaintPreviewCompositorCollection_ListCompositors_ResponseParamsDataView {
 public:
  PaintPreviewCompositorCollection_ListCompositors_ResponseParamsDataView() = default;

  PaintPreviewCompositorCollection_ListCompositors_ResponseParamsDataView(
      internal::PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetCompositorIdsDataView(
      mojo::ArrayDataView<::mojo_base::mojom::UnguessableTokenDataView>* output);

  template <typename UserType>
  [[nodiscard]] bool ReadCompositorIds(UserType* output) {
    
    auto* pointer = data_->compositor_ids.Get();
    return mojo::internal::Deserialize<mojo::ArrayDataView<::mojo_base::mojom::UnguessableTokenDataView>>(
        pointer, output, message_);
  }
 private:
  internal::PaintPreviewCompositorCollection_ListCompositors_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};


inline void PaintPreviewCompositor_BeginSeparatedFrameComposite_ParamsDataView::GetRequestDataView(
    PaintPreviewBeginCompositeRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = PaintPreviewBeginCompositeRequestDataView(pointer, message_);
}


inline void PaintPreviewCompositor_BeginSeparatedFrameComposite_ResponseParamsDataView::GetResponseDataView(
    PaintPreviewBeginCompositeResponseDataView* output) {
  auto pointer = data_->response.Get();
  *output = PaintPreviewBeginCompositeResponseDataView(pointer, message_);
}


inline void PaintPreviewCompositor_BitmapForSeparatedFrame_ParamsDataView::GetFrameGuidDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->frame_guid.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}
inline void PaintPreviewCompositor_BitmapForSeparatedFrame_ParamsDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void PaintPreviewCompositor_BitmapForSeparatedFrame_ResponseParamsDataView::GetBitmapDataView(
    ::skia::mojom::BitmapN32DataView* output) {
  auto pointer = data_->bitmap.Get();
  *output = ::skia::mojom::BitmapN32DataView(pointer, message_);
}


inline void PaintPreviewCompositor_BeginMainFrameComposite_ParamsDataView::GetRequestDataView(
    PaintPreviewBeginCompositeRequestDataView* output) {
  auto pointer = data_->request.Get();
  *output = PaintPreviewBeginCompositeRequestDataView(pointer, message_);
}


inline void PaintPreviewCompositor_BeginMainFrameComposite_ResponseParamsDataView::GetResponseDataView(
    PaintPreviewBeginCompositeResponseDataView* output) {
  auto pointer = data_->response.Get();
  *output = PaintPreviewBeginCompositeResponseDataView(pointer, message_);
}


inline void PaintPreviewCompositor_BitmapForMainFrame_ParamsDataView::GetClipRectDataView(
    ::gfx::mojom::RectDataView* output) {
  auto pointer = data_->clip_rect.Get();
  *output = ::gfx::mojom::RectDataView(pointer, message_);
}


inline void PaintPreviewCompositor_BitmapForMainFrame_ResponseParamsDataView::GetBitmapDataView(
    ::skia::mojom::BitmapN32DataView* output) {
  auto pointer = data_->bitmap.Get();
  *output = ::skia::mojom::BitmapN32DataView(pointer, message_);
}


inline void PaintPreviewCompositor_SetRootFrameUrl_ParamsDataView::GetUrlDataView(
    ::url::mojom::UrlDataView* output) {
  auto pointer = data_->url.Get();
  *output = ::url::mojom::UrlDataView(pointer, message_);
}






inline void PaintPreviewCompositorCollection_CreateCompositor_ResponseParamsDataView::GetCompositorIdDataView(
    ::mojo_base::mojom::UnguessableTokenDataView* output) {
  auto pointer = data_->compositor_id.Get();
  *output = ::mojo_base::mojom::UnguessableTokenDataView(pointer, message_);
}






inline void PaintPreviewCompositorCollection_ListCompositors_ResponseParamsDataView::GetCompositorIdsDataView(
    mojo::ArrayDataView<::mojo_base::mojom::UnguessableTokenDataView>* output) {
  auto pointer = data_->compositor_ids.Get();
  *output = mojo::ArrayDataView<::mojo_base::mojom::UnguessableTokenDataView>(pointer, message_);
}

}  // namespace mojom
}  // namespace paint_preview

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_SERVICES_PAINT_PREVIEW_COMPOSITOR_PUBLIC_MOJOM_PAINT_PREVIEW_COMPOSITOR_MOJOM_PARAMS_DATA_H_