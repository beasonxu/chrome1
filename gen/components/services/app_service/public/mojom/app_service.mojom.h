// components/services/app_service/public/mojom/app_service.mojom.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2013 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_H_
#define COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_H_

#include <stdint.h>

#include <limits>
#include <type_traits>
#include <utility>

#include "third_party/abseil-cpp/absl/types/optional.h"
#include "mojo/public/cpp/bindings/clone_traits.h"
#include "mojo/public/cpp/bindings/equals_traits.h"
#include "mojo/public/cpp/bindings/lib/serialization.h"
#include "mojo/public/cpp/bindings/struct_ptr.h"
#include "mojo/public/cpp/bindings/struct_traits.h"
#include "mojo/public/cpp/bindings/union_traits.h"

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/services/app_service/public/mojom/app_service.mojom-shared.h"
#include "components/services/app_service/public/mojom/app_service.mojom-forward.h"
#include "components/services/app_service/public/mojom/types.mojom-forward.h"
#include <string>
#include <vector>

#include "mojo/public/cpp/bindings/lib/control_message_handler.h"
#include "mojo/public/cpp/bindings/raw_ptr_impl_ref_traits.h"






namespace apps {
namespace mojom {

class AppServiceProxy;

template <typename ImplRefTraits>
class AppServiceStub;

class AppServiceRequestValidator;
class AppServiceResponseValidator;


class  AppService
    : public AppServiceInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = AppServiceInterfaceBase;
  using Proxy_ = AppServiceProxy;

  template <typename ImplRefTraits>
  using Stub_ = AppServiceStub<ImplRefTraits>;

  using RequestValidator_ = AppServiceRequestValidator;
  using ResponseValidator_ = AppServiceResponseValidator;
  enum MethodMinVersions : uint32_t {
    kRegisterPublisherMinVersion = 0,
    kRegisterSubscriberMinVersion = 0,
    kLaunchMinVersion = 0,
    kLaunchAppWithFilesMinVersion = 0,
    kLaunchAppWithIntentMinVersion = 0,
    kSetPermissionMinVersion = 0,
    kUninstallMinVersion = 0,
    kPauseAppMinVersion = 0,
    kUnpauseAppMinVersion = 0,
    kStopAppMinVersion = 0,
    kGetMenuModelMinVersion = 0,
    kExecuteContextMenuCommandMinVersion = 0,
    kOpenNativeSettingsMinVersion = 0,
    kAddPreferredAppMinVersion = 0,
    kRemovePreferredAppMinVersion = 0,
    kSetSupportedLinksPreferenceMinVersion = 0,
    kRemoveSupportedLinksPreferenceMinVersion = 0,
    kSetResizeLockedMinVersion = 0,
    kSetWindowModeMinVersion = 0,
    kSetRunOnOsLoginModeMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct RegisterPublisher_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RegisterSubscriber_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Launch_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LaunchAppWithFiles_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LaunchAppWithIntent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetPermission_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Uninstall_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PauseApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct UnpauseApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StopApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetMenuModel_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ExecuteContextMenuCommand_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OpenNativeSettings_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct AddPreferredApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RemovePreferredApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetSupportedLinksPreference_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct RemoveSupportedLinksPreference_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetResizeLocked_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetWindowMode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetRunOnOsLoginMode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~AppService() = default;

  
  virtual void RegisterPublisher(::mojo::PendingRemote<Publisher> publisher, ::apps::mojom::AppType app_type) = 0;

  
  virtual void RegisterSubscriber(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) = 0;

  
  virtual void Launch(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) = 0;

  
  virtual void LaunchAppWithFiles(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) = 0;


  using LaunchAppWithIntentCallback = base::OnceCallback<void(bool)>;
  
  virtual void LaunchAppWithIntent(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) = 0;

  
  virtual void SetPermission(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::PermissionPtr permission) = 0;

  
  virtual void Uninstall(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) = 0;

  
  virtual void PauseApp(::apps::mojom::AppType app_type, const std::string& app_id) = 0;

  
  virtual void UnpauseApp(::apps::mojom::AppType app_type, const std::string& app_id) = 0;

  
  virtual void StopApp(::apps::mojom::AppType app_type, const std::string& app_id) = 0;


  using GetMenuModelCallback = base::OnceCallback<void(::apps::mojom::MenuItemsPtr)>;
  
  virtual void GetMenuModel(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) = 0;

  
  virtual void ExecuteContextMenuCommand(::apps::mojom::AppType app_type, const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) = 0;

  
  virtual void OpenNativeSettings(::apps::mojom::AppType app_type, const std::string& app_id) = 0;

  
  virtual void AddPreferredApp(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, bool from_publisher) = 0;

  
  virtual void RemovePreferredApp(::apps::mojom::AppType app_type, const std::string& app_id) = 0;

  
  virtual void SetSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id, std::vector<::apps::mojom::IntentFilterPtr> all_link_filters) = 0;

  
  virtual void RemoveSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id) = 0;

  
  virtual void SetResizeLocked(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::OptionalBool locked) = 0;

  
  virtual void SetWindowMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::WindowMode window_mode) = 0;

  
  virtual void SetRunOnOsLoginMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) = 0;
};

class PublisherProxy;

template <typename ImplRefTraits>
class PublisherStub;

class PublisherRequestValidator;
class PublisherResponseValidator;


class  Publisher
    : public PublisherInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = PublisherInterfaceBase;
  using Proxy_ = PublisherProxy;

  template <typename ImplRefTraits>
  using Stub_ = PublisherStub<ImplRefTraits>;

  using RequestValidator_ = PublisherRequestValidator;
  using ResponseValidator_ = PublisherResponseValidator;
  enum MethodMinVersions : uint32_t {
    kConnectMinVersion = 0,
    kLaunchMinVersion = 0,
    kLaunchAppWithFilesMinVersion = 0,
    kLaunchAppWithIntentMinVersion = 0,
    kSetPermissionMinVersion = 0,
    kUninstallMinVersion = 0,
    kPauseAppMinVersion = 0,
    kUnpauseAppMinVersion = 0,
    kStopAppMinVersion = 0,
    kGetMenuModelMinVersion = 0,
    kExecuteContextMenuCommandMinVersion = 0,
    kOpenNativeSettingsMinVersion = 0,
    kOnPreferredAppSetMinVersion = 0,
    kOnSupportedLinksPreferenceChangedMinVersion = 0,
    kSetResizeLockedMinVersion = 0,
    kSetWindowModeMinVersion = 0,
    kSetRunOnOsLoginModeMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct Connect_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Launch_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LaunchAppWithFiles_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct LaunchAppWithIntent_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetPermission_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Uninstall_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct PauseApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct UnpauseApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct StopApp_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct GetMenuModel_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct ExecuteContextMenuCommand_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OpenNativeSettings_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnPreferredAppSet_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnSupportedLinksPreferenceChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetResizeLocked_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetWindowMode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct SetRunOnOsLoginMode_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~Publisher() = default;

  
  virtual void Connect(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) = 0;

  
  virtual void Launch(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) = 0;

  
  virtual void LaunchAppWithFiles(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) = 0;


  using LaunchAppWithIntentCallback = base::OnceCallback<void(bool)>;
  
  virtual void LaunchAppWithIntent(const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) = 0;

  
  virtual void SetPermission(const std::string& app_id, ::apps::mojom::PermissionPtr permission) = 0;

  
  virtual void Uninstall(const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) = 0;

  
  virtual void PauseApp(const std::string& app_id) = 0;

  
  virtual void UnpauseApp(const std::string& app_id) = 0;

  
  virtual void StopApp(const std::string& app_id) = 0;


  using GetMenuModelCallback = base::OnceCallback<void(::apps::mojom::MenuItemsPtr)>;
  
  virtual void GetMenuModel(const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) = 0;

  
  virtual void ExecuteContextMenuCommand(const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) = 0;

  
  virtual void OpenNativeSettings(const std::string& app_id) = 0;

  
  virtual void OnPreferredAppSet(const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, ::apps::mojom::ReplacedAppPreferencesPtr replaced_app_preferences) = 0;

  
  virtual void OnSupportedLinksPreferenceChanged(const std::string& app_id, bool open_in_app) = 0;

  
  virtual void SetResizeLocked(const std::string& app_id, ::apps::mojom::OptionalBool locked) = 0;

  
  virtual void SetWindowMode(const std::string& app_id, ::apps::mojom::WindowMode window_mode) = 0;

  
  virtual void SetRunOnOsLoginMode(const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) = 0;
};

class SubscriberProxy;

template <typename ImplRefTraits>
class SubscriberStub;

class SubscriberRequestValidator;


class  Subscriber
    : public SubscriberInterfaceBase {
 public:
  using IPCStableHashFunction = uint32_t(*)();

  static const char Name_[];
  static IPCStableHashFunction MessageToMethodInfo_(mojo::Message& message);
  static const char* MessageToMethodName_(mojo::Message& message);
  static constexpr uint32_t Version_ = 0;
  static constexpr bool PassesAssociatedKinds_ = false;
  static constexpr bool HasSyncMethods_ = false;
  static constexpr bool HasUninterruptableMethods_ = false;

  using Base_ = SubscriberInterfaceBase;
  using Proxy_ = SubscriberProxy;

  template <typename ImplRefTraits>
  using Stub_ = SubscriberStub<ImplRefTraits>;

  using RequestValidator_ = SubscriberRequestValidator;
  using ResponseValidator_ = mojo::PassThroughFilter;
  enum MethodMinVersions : uint32_t {
    kOnAppsMinVersion = 0,
    kOnCapabilityAccessesMinVersion = 0,
    kCloneMinVersion = 0,
    kOnPreferredAppsChangedMinVersion = 0,
    kInitializePreferredAppsMinVersion = 0,
  };

// crbug.com/1340245 - this causes binary size bloat on Fuchsia, and we're OK
// with not having this data in traces there.
#if !BUILDFLAG(IS_FUCHSIA)
  struct OnApps_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnCapabilityAccesses_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct Clone_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct OnPreferredAppsChanged_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
  struct InitializePreferredApps_Sym {
    NOINLINE static uint32_t IPCStableHash();
  };
#endif // !BUILDFLAG(IS_FUCHSIA)
  virtual ~Subscriber() = default;

  
  virtual void OnApps(std::vector<::apps::mojom::AppPtr> deltas, ::apps::mojom::AppType app_type, bool should_notify_initialized) = 0;

  
  virtual void OnCapabilityAccesses(std::vector<::apps::mojom::CapabilityAccessPtr> deltas) = 0;

  
  virtual void Clone(::mojo::PendingReceiver<Subscriber> receiver) = 0;

  
  virtual void OnPreferredAppsChanged(::apps::mojom::PreferredAppChangesPtr changes) = 0;

  
  virtual void InitializePreferredApps(std::vector<::apps::mojom::PreferredAppPtr> preferred_apps) = 0;
};



class  AppServiceProxy
    : public AppService {
 public:
  using InterfaceType = AppService;

  explicit AppServiceProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void RegisterPublisher(::mojo::PendingRemote<Publisher> publisher, ::apps::mojom::AppType app_type) final;
  
  void RegisterSubscriber(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) final;
  
  void Launch(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) final;
  
  void LaunchAppWithFiles(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) final;
  
  void LaunchAppWithIntent(::apps::mojom::AppType app_type, const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) final;
  
  void SetPermission(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::PermissionPtr permission) final;
  
  void Uninstall(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) final;
  
  void PauseApp(::apps::mojom::AppType app_type, const std::string& app_id) final;
  
  void UnpauseApp(::apps::mojom::AppType app_type, const std::string& app_id) final;
  
  void StopApp(::apps::mojom::AppType app_type, const std::string& app_id) final;
  
  void GetMenuModel(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) final;
  
  void ExecuteContextMenuCommand(::apps::mojom::AppType app_type, const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) final;
  
  void OpenNativeSettings(::apps::mojom::AppType app_type, const std::string& app_id) final;
  
  void AddPreferredApp(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, bool from_publisher) final;
  
  void RemovePreferredApp(::apps::mojom::AppType app_type, const std::string& app_id) final;
  
  void SetSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id, std::vector<::apps::mojom::IntentFilterPtr> all_link_filters) final;
  
  void RemoveSupportedLinksPreference(::apps::mojom::AppType app_type, const std::string& app_id) final;
  
  void SetResizeLocked(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::OptionalBool locked) final;
  
  void SetWindowMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::WindowMode window_mode) final;
  
  void SetRunOnOsLoginMode(::apps::mojom::AppType app_type, const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  PublisherProxy
    : public Publisher {
 public:
  using InterfaceType = Publisher;

  explicit PublisherProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void Connect(::mojo::PendingRemote<Subscriber> subscriber, ConnectOptionsPtr opts) final;
  
  void Launch(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info) final;
  
  void LaunchAppWithFiles(const std::string& app_id, int32_t event_flags, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::FilePathsPtr file_paths) final;
  
  void LaunchAppWithIntent(const std::string& app_id, int32_t event_flags, ::apps::mojom::IntentPtr intent, ::apps::mojom::LaunchSource launch_source, ::apps::mojom::WindowInfoPtr window_info, LaunchAppWithIntentCallback callback) final;
  
  void SetPermission(const std::string& app_id, ::apps::mojom::PermissionPtr permission) final;
  
  void Uninstall(const std::string& app_id, ::apps::mojom::UninstallSource uninstall_source, bool clear_site_data, bool report_abuse) final;
  
  void PauseApp(const std::string& app_id) final;
  
  void UnpauseApp(const std::string& app_id) final;
  
  void StopApp(const std::string& app_id) final;
  
  void GetMenuModel(const std::string& app_id, ::apps::mojom::MenuType menu_type, int64_t display_id, GetMenuModelCallback callback) final;
  
  void ExecuteContextMenuCommand(const std::string& app_id, int32_t command_id, const std::string& shortcut_id, int64_t display_id) final;
  
  void OpenNativeSettings(const std::string& app_id) final;
  
  void OnPreferredAppSet(const std::string& app_id, ::apps::mojom::IntentFilterPtr intent_filter, ::apps::mojom::IntentPtr intent, ::apps::mojom::ReplacedAppPreferencesPtr replaced_app_preferences) final;
  
  void OnSupportedLinksPreferenceChanged(const std::string& app_id, bool open_in_app) final;
  
  void SetResizeLocked(const std::string& app_id, ::apps::mojom::OptionalBool locked) final;
  
  void SetWindowMode(const std::string& app_id, ::apps::mojom::WindowMode window_mode) final;
  
  void SetRunOnOsLoginMode(const std::string& app_id, ::apps::mojom::RunOnOsLoginMode run_on_os_login_mode) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};



class  SubscriberProxy
    : public Subscriber {
 public:
  using InterfaceType = Subscriber;

  explicit SubscriberProxy(mojo::MessageReceiverWithResponder* receiver);
  
  void OnApps(std::vector<::apps::mojom::AppPtr> deltas, ::apps::mojom::AppType app_type, bool should_notify_initialized) final;
  
  void OnCapabilityAccesses(std::vector<::apps::mojom::CapabilityAccessPtr> deltas) final;
  
  void Clone(::mojo::PendingReceiver<Subscriber> receiver) final;
  
  void OnPreferredAppsChanged(::apps::mojom::PreferredAppChangesPtr changes) final;
  
  void InitializePreferredApps(std::vector<::apps::mojom::PreferredAppPtr> preferred_apps) final;

 private:
  mojo::MessageReceiverWithResponder* receiver_;
};
class  AppServiceStubDispatch {
 public:
  static bool Accept(AppService* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      AppService* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<AppService>>
class AppServiceStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  AppServiceStub() = default;
  ~AppServiceStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AppServiceStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return AppServiceStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  PublisherStubDispatch {
 public:
  static bool Accept(Publisher* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Publisher* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Publisher>>
class PublisherStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  PublisherStub() = default;
  ~PublisherStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PublisherStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return PublisherStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  SubscriberStubDispatch {
 public:
  static bool Accept(Subscriber* impl, mojo::Message* message);
  static bool AcceptWithResponder(
      Subscriber* impl,
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder);
};

template <typename ImplRefTraits =
              mojo::RawPtrImplRefTraits<Subscriber>>
class SubscriberStub
    : public mojo::MessageReceiverWithResponderStatus {
 public:
  using ImplPointerType = typename ImplRefTraits::PointerType;

  SubscriberStub() = default;
  ~SubscriberStub() override = default;

  void set_sink(ImplPointerType sink) { sink_ = std::move(sink); }
  ImplPointerType& sink() { return sink_; }

  bool Accept(mojo::Message* message) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SubscriberStubDispatch::Accept(
        ImplRefTraits::GetRawPointer(&sink_), message);
  }

  bool AcceptWithResponder(
      mojo::Message* message,
      std::unique_ptr<mojo::MessageReceiverWithStatus> responder) override {
    if (ImplRefTraits::IsNull(sink_))
      return false;
    return SubscriberStubDispatch::AcceptWithResponder(
        ImplRefTraits::GetRawPointer(&sink_), message, std::move(responder));
  }

 private:
  ImplPointerType sink_;
};
class  AppServiceRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PublisherRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  SubscriberRequestValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  AppServiceResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};
class  PublisherResponseValidator : public mojo::MessageReceiver {
 public:
  bool Accept(mojo::Message* message) override;
};





class  ConnectOptions {
 public:
  template <typename T>
  using EnableIfSame = std::enable_if_t<std::is_same<ConnectOptions, T>::value>;
  using DataView = ConnectOptionsDataView;
  using Data_ = internal::ConnectOptions_Data;

  template <typename... Args>
  static ConnectOptionsPtr New(Args&&... args) {
    return ConnectOptionsPtr(
        absl::in_place, std::forward<Args>(args)...);
  }

  template <typename U>
  static ConnectOptionsPtr From(const U& u) {
    return mojo::TypeConverter<ConnectOptionsPtr, U>::Convert(u);
  }

  template <typename U>
  U To() const {
    return mojo::TypeConverter<U, ConnectOptions>::Convert(*this);
  }


  ConnectOptions();


  ~ConnectOptions();

  // Clone() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Clone() or copy
  // constructor/assignment are available for members.
  template <typename StructPtrType = ConnectOptionsPtr>
  ConnectOptionsPtr Clone() const;

  // Equals() is a template so it is only instantiated if it is used. Thus, the
  // bindings generator does not need to know whether Equals() or == operator
  // are available for members.
  template <typename T, ConnectOptions::EnableIfSame<T>* = nullptr>
  bool Equals(const T& other) const;

  template <typename T, ConnectOptions::EnableIfSame<T>* = nullptr>
  bool operator==(const T& rhs) const { return Equals(rhs); }
  size_t Hash(size_t seed) const;
  template <typename UserType>
  static std::vector<uint8_t> Serialize(UserType* input) {
    return mojo::internal::SerializeImpl<
        ConnectOptions::DataView, std::vector<uint8_t>>(input);
  }

  template <typename UserType>
  static mojo::Message SerializeAsMessage(UserType* input) {
    return mojo::internal::SerializeAsMessageImpl<
        ConnectOptions::DataView>(input);
  }

  // The returned Message is serialized only if the message is moved
  // cross-process or cross-language. Otherwise if the message is Deserialized
  // as the same UserType |input| will just be moved to |output| in
  // DeserializeFromMessage.
  template <typename UserType>
  static mojo::Message WrapAsMessage(UserType input) {
    return mojo::Message(std::make_unique<
        internal::ConnectOptions_UnserializedMessageContext<
            UserType, ConnectOptions::DataView>>(0, 0, std::move(input)),
        MOJO_CREATE_MESSAGE_FLAG_NONE);
  }

  template <typename UserType>
  static bool Deserialize(const void* data,
                          size_t data_num_bytes,
                          UserType* output) {
    mojo::Message message;
    return mojo::internal::DeserializeImpl<ConnectOptions::DataView>(
        message, data, data_num_bytes, output, Validate);
  }

  template <typename UserType>
  static bool Deserialize(const std::vector<uint8_t>& input,
                          UserType* output) {
    return ConnectOptions::Deserialize(
        input.size() == 0 ? nullptr : &input.front(), input.size(), output);
  }

  template <typename UserType>
  static bool DeserializeFromMessage(mojo::Message input,
                                     UserType* output) {
    auto context = input.TakeUnserializedContext<
        internal::ConnectOptions_UnserializedMessageContext<
            UserType, ConnectOptions::DataView>>();
    if (context) {
      *output = std::move(context->TakeData());
      return true;
    }
    input.SerializeIfNecessary();
    return mojo::internal::DeserializeImpl<ConnectOptions::DataView>(
        input, input.payload(), input.payload_num_bytes(), output, Validate);
  }


  // Serialise this struct into a trace.
  void WriteIntoTrace(perfetto::TracedValue traced_context) const;

 private:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);
};

// The comparison operators are templates, so they are only instantiated if they
// are used. Thus, the bindings generator does not need to know whether
// comparison operators are available for members.
template <typename T, ConnectOptions::EnableIfSame<T>* = nullptr>
bool operator<(const T& lhs, const T& rhs);

template <typename T, ConnectOptions::EnableIfSame<T>* = nullptr>
bool operator<=(const T& lhs, const T& rhs) {
  return !(rhs < lhs);
}

template <typename T, ConnectOptions::EnableIfSame<T>* = nullptr>
bool operator>(const T& lhs, const T& rhs) {
  return rhs < lhs;
}

template <typename T, ConnectOptions::EnableIfSame<T>* = nullptr>
bool operator>=(const T& lhs, const T& rhs) {
  return !(lhs < rhs);
}




template <typename StructPtrType>
ConnectOptionsPtr ConnectOptions::Clone() const {
  return New(
  );
}

template <typename T, ConnectOptions::EnableIfSame<T>*>
bool ConnectOptions::Equals(const T& other_struct) const {
  return true;
}

template <typename T, ConnectOptions::EnableIfSame<T>*>
bool operator<(const T& lhs, const T& rhs) {
  return false;
}


}  // namespace mojom
}  // namespace apps

namespace mojo {


template <>
struct  StructTraits<::apps::mojom::ConnectOptions::DataView,
                                         ::apps::mojom::ConnectOptionsPtr> {
  static bool IsNull(const ::apps::mojom::ConnectOptionsPtr& input) { return !input; }
  static void SetToNull(::apps::mojom::ConnectOptionsPtr* output) { output->reset(); }

  static bool Read(::apps::mojom::ConnectOptions::DataView input, ::apps::mojom::ConnectOptionsPtr* output);
};

}  // namespace mojo

#endif  // COMPONENTS_SERVICES_APP_SERVICE_PUBLIC_MOJOM_APP_SERVICE_MOJOM_H_