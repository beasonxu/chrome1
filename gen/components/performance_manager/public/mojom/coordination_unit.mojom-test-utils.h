// components/performance_manager/public/mojom/coordination_unit.mojom-test-utils.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_COORDINATION_UNIT_MOJOM_TEST_UTILS_H_
#define COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_COORDINATION_UNIT_MOJOM_TEST_UTILS_H_

#include "components/performance_manager/public/mojom/coordination_unit.mojom.h"
#include "base/component_export.h"


namespace performance_manager {
namespace mojom {


class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM) DocumentCoordinationUnitInterceptorForTesting : public DocumentCoordinationUnit {
  virtual DocumentCoordinationUnit* GetForwardingInterface() = 0;
  void SetNetworkAlmostIdle() override;
  void SetLifecycleState(::performance_manager::mojom::LifecycleState state) override;
  void SetHasNonEmptyBeforeUnload(bool has_nonempty_beforeunload) override;
  void SetHadFormInteraction() override;
  void SetIsAdFrame(bool is_ad_frame) override;
  void OnNonPersistentNotificationCreated() override;
  void OnFirstContentfulPaint(::base::TimeDelta time_since_navigation_start) override;
  void OnWebMemoryMeasurementRequested(::performance_manager::mojom::WebMemoryMeasurement::Mode mode, OnWebMemoryMeasurementRequestedCallback callback) override;
};
class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM) DocumentCoordinationUnitAsyncWaiter {
 public:
  explicit DocumentCoordinationUnitAsyncWaiter(DocumentCoordinationUnit* proxy);

  DocumentCoordinationUnitAsyncWaiter(const DocumentCoordinationUnitAsyncWaiter&) = delete;
  DocumentCoordinationUnitAsyncWaiter& operator=(const DocumentCoordinationUnitAsyncWaiter&) = delete;

  ~DocumentCoordinationUnitAsyncWaiter();
  void OnWebMemoryMeasurementRequested(
      ::performance_manager::mojom::WebMemoryMeasurement::Mode mode, ::performance_manager::mojom::WebMemoryMeasurementPtr* out_measurement);

 private:
  DocumentCoordinationUnit* const proxy_;
};


class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM) ProcessCoordinationUnitInterceptorForTesting : public ProcessCoordinationUnit {
  virtual ProcessCoordinationUnit* GetForwardingInterface() = 0;
  void SetMainThreadTaskLoadIsLow(bool main_thread_task_load_is_low) override;
  void OnV8ContextCreated(::performance_manager::mojom::V8ContextDescriptionPtr description, ::performance_manager::mojom::IframeAttributionDataPtr iframe_attribution_data) override;
  void OnV8ContextDetached(const ::blink::V8ContextToken& v8_context_token) override;
  void OnV8ContextDestroyed(const ::blink::V8ContextToken& v8_context_token) override;
  void OnRemoteIframeAttached(const ::blink::LocalFrameToken& parent_frame_token, const ::blink::RemoteFrameToken& remote_frame_token, ::performance_manager::mojom::IframeAttributionDataPtr iframe_attribution_data) override;
  void OnRemoteIframeDetached(const ::blink::LocalFrameToken& parent_frame_token, const ::blink::RemoteFrameToken& remote_frame_token) override;
  void FireBackgroundTracingTrigger(const std::string& trigger_name) override;
};
class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM) ProcessCoordinationUnitAsyncWaiter {
 public:
  explicit ProcessCoordinationUnitAsyncWaiter(ProcessCoordinationUnit* proxy);

  ProcessCoordinationUnitAsyncWaiter(const ProcessCoordinationUnitAsyncWaiter&) = delete;
  ProcessCoordinationUnitAsyncWaiter& operator=(const ProcessCoordinationUnitAsyncWaiter&) = delete;

  ~ProcessCoordinationUnitAsyncWaiter();

 private:
  ProcessCoordinationUnit* const proxy_;
};




}  // namespace mojom
}  // namespace performance_manager

#endif  // COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_COORDINATION_UNIT_MOJOM_TEST_UTILS_H_