// components/performance_manager/public/mojom/lifecycle.mojom-shared.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_LIFECYCLE_MOJOM_SHARED_H_
#define COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_LIFECYCLE_MOJOM_SHARED_H_

#include <stdint.h>

#include <functional>
#include <iosfwd>
#include <type_traits>
#include <utility>

#include "third_party/perfetto/include/perfetto/tracing/traced_value_forward.h"

#include "components/performance_manager/public/mojom/lifecycle.mojom-shared-internal.h"



#include "base/component_export.h"




namespace performance_manager {
namespace mojom {


}  // namespace mojom
}  // namespace performance_manager

namespace mojo {
namespace internal {

}  // namespace internal
}  // namespace mojo


namespace performance_manager {
namespace mojom {


enum class LifecycleState : int32_t {
  
  kRunning = 0,
  
  kFrozen = 1,
  
  kDiscarded = 2,
  kMinValue = 0,
  kMaxValue = 2,
};

COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM_SHARED) std::ostream& operator<<(std::ostream& os, LifecycleState value);
inline bool IsKnownEnumValue(LifecycleState value) {
  return internal::LifecycleState_Data::IsKnownValue(
      static_cast<int32_t>(value));
}


}  // namespace mojom
}  // namespace performance_manager

namespace std {

template <>
struct hash<::performance_manager::mojom::LifecycleState>
    : public mojo::internal::EnumHashImpl<::performance_manager::mojom::LifecycleState> {};

}  // namespace std

namespace mojo {


namespace internal {

template <typename MaybeConstUserType>
struct Serializer<::performance_manager::mojom::LifecycleState, MaybeConstUserType> {
  using UserType = typename std::remove_const<MaybeConstUserType>::type;
  using Traits = EnumTraits<::performance_manager::mojom::LifecycleState, UserType>;

  static void Serialize(UserType input, int32_t* output) {
    *output = static_cast<int32_t>(Traits::ToMojom(input));
  }

  static bool Deserialize(int32_t input, UserType* output) {
    return Traits::FromMojom(::mojo::internal::ToKnownEnumValueHelper(
        static_cast<::performance_manager::mojom::LifecycleState>(input)), output);
  }
};

}  // namespace internal

}  // namespace mojo


namespace performance_manager {
namespace mojom {


}  // namespace mojom
}  // namespace performance_manager

// Declare TraceFormatTraits for enums, which should be defined in ::perfetto
// namespace.

namespace perfetto {

template <>
struct COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM_SHARED) TraceFormatTraits<::performance_manager::mojom::LifecycleState> {
 static void WriteIntoTrace(perfetto::TracedValue context, ::performance_manager::mojom::LifecycleState value);
};

} // namespace perfetto

#endif  // COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_LIFECYCLE_MOJOM_SHARED_H_