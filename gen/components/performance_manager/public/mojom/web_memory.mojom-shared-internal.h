// components/performance_manager/public/mojom/web_memory.mojom-shared-internal.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_WEB_MEMORY_MOJOM_SHARED_INTERNAL_H_
#define COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_WEB_MEMORY_MOJOM_SHARED_INTERNAL_H_
#include "mojo/public/cpp/bindings/lib/array_internal.h"
#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/map_data_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"
#include "mojo/public/cpp/bindings/lib/native_enum_data.h"
#include "mojo/public/interfaces/bindings/native_struct.mojom-shared-internal.h"
#include "base/component_export.h"



namespace mojo {
namespace internal {
class ValidationContext;
}
}
namespace performance_manager {
namespace mojom {
namespace internal {
class WebMemoryAttribution_Data;
class WebMemoryUsage_Data;
class WebMemoryBreakdownEntry_Data;
class WebMemoryMeasurement_Data;

struct WebMemoryAttribution_Scope_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
      case 2:
      case 3:
      case 4:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

struct WebMemoryMeasurement_Mode_Data {
 public:
  static bool constexpr kIsExtensible = false;

  static bool IsKnownValue(int32_t value) {
    switch (value) {
      case 0:
      case 1:
        return true;
    }
    return false;
  }

  static bool Validate(int32_t value,
                       mojo::internal::ValidationContext* validation_context) {
    if (kIsExtensible || IsKnownValue(value))
      return true;

    ReportValidationError(validation_context,
                          mojo::internal::VALIDATION_ERROR_UNKNOWN_ENUM_VALUE);
    return false;
  }
};

#pragma pack(push, 1)
class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM_SHARED) WebMemoryAttribution_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  int32_t scope;
  uint8_t pad0_[4];
  mojo::internal::Pointer<mojo::internal::String_Data> url;
  mojo::internal::Pointer<mojo::internal::String_Data> src;
  mojo::internal::Pointer<mojo::internal::String_Data> id;

 private:
  friend class mojo::internal::MessageFragment<WebMemoryAttribution_Data>;

  WebMemoryAttribution_Data();
  ~WebMemoryAttribution_Data() = delete;
};
static_assert(sizeof(WebMemoryAttribution_Data) == 40,
              "Bad sizeof(WebMemoryAttribution_Data)");
// Used by WebMemoryAttribution::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebMemoryAttribution_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebMemoryAttribution_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebMemoryAttribution_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebMemoryAttribution_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebMemoryAttribution_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM_SHARED) WebMemoryUsage_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  uint64_t bytes;

 private:
  friend class mojo::internal::MessageFragment<WebMemoryUsage_Data>;

  WebMemoryUsage_Data();
  ~WebMemoryUsage_Data() = delete;
};
static_assert(sizeof(WebMemoryUsage_Data) == 16,
              "Bad sizeof(WebMemoryUsage_Data)");
// Used by WebMemoryUsage::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebMemoryUsage_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebMemoryUsage_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebMemoryUsage_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebMemoryUsage_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebMemoryUsage_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM_SHARED) WebMemoryBreakdownEntry_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::WebMemoryUsage_Data> memory;
  mojo::internal::Pointer<internal::WebMemoryUsage_Data> canvas_memory;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebMemoryAttribution_Data>>> attribution;

 private:
  friend class mojo::internal::MessageFragment<WebMemoryBreakdownEntry_Data>;

  WebMemoryBreakdownEntry_Data();
  ~WebMemoryBreakdownEntry_Data() = delete;
};
static_assert(sizeof(WebMemoryBreakdownEntry_Data) == 32,
              "Bad sizeof(WebMemoryBreakdownEntry_Data)");
// Used by WebMemoryBreakdownEntry::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebMemoryBreakdownEntry_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebMemoryBreakdownEntry_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebMemoryBreakdownEntry_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebMemoryBreakdownEntry_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebMemoryBreakdownEntry_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};
class COMPONENT_EXPORT(PERFORMANCE_MANAGER_PUBLIC_MOJOM_SHARED) WebMemoryMeasurement_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<mojo::internal::Array_Data<mojo::internal::Pointer<internal::WebMemoryBreakdownEntry_Data>>> breakdown;
  mojo::internal::Pointer<internal::WebMemoryUsage_Data> detached_memory;
  mojo::internal::Pointer<internal::WebMemoryUsage_Data> shared_memory;
  mojo::internal::Pointer<internal::WebMemoryUsage_Data> blink_memory;

 private:
  friend class mojo::internal::MessageFragment<WebMemoryMeasurement_Data>;

  WebMemoryMeasurement_Data();
  ~WebMemoryMeasurement_Data() = delete;
};
static_assert(sizeof(WebMemoryMeasurement_Data) == 40,
              "Bad sizeof(WebMemoryMeasurement_Data)");
// Used by WebMemoryMeasurement::WrapAsMessage to lazily serialize the struct.
template <typename UserType, typename DataView>
struct WebMemoryMeasurement_UnserializedMessageContext
    : public mojo::internal::UnserializedMessageContext {
 public:
  static const mojo::internal::UnserializedMessageContext::Tag kMessageTag;

  WebMemoryMeasurement_UnserializedMessageContext(
    uint32_t message_name,
    uint32_t message_flags,
    UserType input)
      : mojo::internal::UnserializedMessageContext(&kMessageTag, message_name, message_flags)
      , user_data_(std::move(input)) {}
  ~WebMemoryMeasurement_UnserializedMessageContext() override = default;

  UserType TakeData() {
    return std::move(user_data_);
  }

 private:
  // mojo::internal::UnserializedMessageContext:
  void Serialize(mojo::Message& message) override {
    mojo::internal::MessageFragment<WebMemoryMeasurement_Data> fragment(message);
    mojo::internal::Serialize<DataView>(user_data_, fragment);
  }

  UserType user_data_;
};

template <typename UserType, typename DataView>
const mojo::internal::UnserializedMessageContext::Tag
    WebMemoryMeasurement_UnserializedMessageContext<UserType, DataView>::kMessageTag = {};

#pragma pack(pop)

}  // namespace internal
}  // namespace mojom
}  // namespace performance_manager

#endif  // COMPONENTS_PERFORMANCE_MANAGER_PUBLIC_MOJOM_WEB_MEMORY_MOJOM_SHARED_INTERNAL_H_