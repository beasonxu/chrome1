// components/feed/mojom/rss_link_reader.mojom-params-data.h is auto generated by mojom_bindings_generator.py, do not edit

// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef COMPONENTS_FEED_MOJOM_RSS_LINK_READER_MOJOM_PARAMS_DATA_H_
#define COMPONENTS_FEED_MOJOM_RSS_LINK_READER_MOJOM_PARAMS_DATA_H_

#include "mojo/public/cpp/bindings/lib/bindings_internal.h"
#include "mojo/public/cpp/bindings/lib/buffer.h"

#if defined(__clang__)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wunused-private-field"
#endif
namespace feed {
namespace mojom {
namespace internal {

class ValidationContext;
class  RssLinkReader_GetRssLinks_Params_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;

 private:
  friend class mojo::internal::MessageFragment<RssLinkReader_GetRssLinks_Params_Data>;

  RssLinkReader_GetRssLinks_Params_Data();
  ~RssLinkReader_GetRssLinks_Params_Data() = delete;
};
static_assert(sizeof(RssLinkReader_GetRssLinks_Params_Data) == 8,
              "Bad sizeof(RssLinkReader_GetRssLinks_Params_Data)");
class  RssLinkReader_GetRssLinks_ResponseParams_Data {
 public:
  static bool Validate(const void* data,
                       mojo::internal::ValidationContext* validation_context);

  mojo::internal::StructHeader header_;
  mojo::internal::Pointer<internal::RssLinks_Data> rss_links;

 private:
  friend class mojo::internal::MessageFragment<RssLinkReader_GetRssLinks_ResponseParams_Data>;

  RssLinkReader_GetRssLinks_ResponseParams_Data();
  ~RssLinkReader_GetRssLinks_ResponseParams_Data() = delete;
};
static_assert(sizeof(RssLinkReader_GetRssLinks_ResponseParams_Data) == 16,
              "Bad sizeof(RssLinkReader_GetRssLinks_ResponseParams_Data)");

}  // namespace internal


class RssLinkReader_GetRssLinks_ParamsDataView {
 public:
  RssLinkReader_GetRssLinks_ParamsDataView() = default;

  RssLinkReader_GetRssLinks_ParamsDataView(
      internal::RssLinkReader_GetRssLinks_Params_Data* data,
      mojo::Message* message)
      : data_(data) {}

  bool is_null() const { return !data_; }
 private:
  internal::RssLinkReader_GetRssLinks_Params_Data* data_ = nullptr;
};



class RssLinkReader_GetRssLinks_ResponseParamsDataView {
 public:
  RssLinkReader_GetRssLinks_ResponseParamsDataView() = default;

  RssLinkReader_GetRssLinks_ResponseParamsDataView(
      internal::RssLinkReader_GetRssLinks_ResponseParams_Data* data,
      mojo::Message* message)
      : data_(data), message_(message) {}

  bool is_null() const { return !data_; }
  inline void GetRssLinksDataView(
      RssLinksDataView* output);

  template <typename UserType>
  [[nodiscard]] bool ReadRssLinks(UserType* output) {
    
    auto* pointer = data_->rss_links.Get();
    return mojo::internal::Deserialize<::feed::mojom::RssLinksDataView>(
        pointer, output, message_);
  }
 private:
  internal::RssLinkReader_GetRssLinks_ResponseParams_Data* data_ = nullptr;
  mojo::Message* message_ = nullptr;
};




inline void RssLinkReader_GetRssLinks_ResponseParamsDataView::GetRssLinksDataView(
    RssLinksDataView* output) {
  auto pointer = data_->rss_links.Get();
  *output = RssLinksDataView(pointer, message_);
}

}  // namespace mojom
}  // namespace feed

#if defined(__clang__)
#pragma clang diagnostic pop
#endif

#endif  // COMPONENTS_FEED_MOJOM_RSS_LINK_READER_MOJOM_PARAMS_DATA_H_