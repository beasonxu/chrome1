// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/xsurface.proto

#include "components/feed/core/proto/v2/xsurface.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedxsurface {
PROTOBUF_CONSTEXPR OfflineBadgeContent::OfflineBadgeContent(
    ::_pbi::ConstantInitialized)
  : available_offline_(false){}
struct OfflineBadgeContentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OfflineBadgeContentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OfflineBadgeContentDefaultTypeInternal() {}
  union {
    OfflineBadgeContent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OfflineBadgeContentDefaultTypeInternal _OfflineBadgeContent_default_instance_;
PROTOBUF_CONSTEXPR WebFeedFollowState::WebFeedFollowState(
    ::_pbi::ConstantInitialized)
  : follow_state_(0)
{}
struct WebFeedFollowStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebFeedFollowStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebFeedFollowStateDefaultTypeInternal() {}
  union {
    WebFeedFollowState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebFeedFollowStateDefaultTypeInternal _WebFeedFollowState_default_instance_;
}  // namespace feedxsurface
namespace feedxsurface {
bool WebFeedFollowState_FollowState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebFeedFollowState_FollowState_strings[5] = {};

static const char WebFeedFollowState_FollowState_names[] =
  "FOLLOWED"
  "FOLLOW_IN_PROGRESS"
  "NOT_FOLLOWED"
  "UNFOLLOW_IN_PROGRESS"
  "UNSPECIFIED";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebFeedFollowState_FollowState_entries[] = {
  { {WebFeedFollowState_FollowState_names + 0, 8}, 1 },
  { {WebFeedFollowState_FollowState_names + 8, 18}, 3 },
  { {WebFeedFollowState_FollowState_names + 26, 12}, 2 },
  { {WebFeedFollowState_FollowState_names + 38, 20}, 4 },
  { {WebFeedFollowState_FollowState_names + 58, 11}, 0 },
};

static const int WebFeedFollowState_FollowState_entries_by_number[] = {
  4, // 0 -> UNSPECIFIED
  0, // 1 -> FOLLOWED
  2, // 2 -> NOT_FOLLOWED
  1, // 3 -> FOLLOW_IN_PROGRESS
  3, // 4 -> UNFOLLOW_IN_PROGRESS
};

const std::string& WebFeedFollowState_FollowState_Name(
    WebFeedFollowState_FollowState value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebFeedFollowState_FollowState_entries,
          WebFeedFollowState_FollowState_entries_by_number,
          5, WebFeedFollowState_FollowState_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebFeedFollowState_FollowState_entries,
      WebFeedFollowState_FollowState_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebFeedFollowState_FollowState_strings[idx].get();
}
bool WebFeedFollowState_FollowState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeedFollowState_FollowState* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebFeedFollowState_FollowState_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<WebFeedFollowState_FollowState>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebFeedFollowState_FollowState WebFeedFollowState::UNSPECIFIED;
constexpr WebFeedFollowState_FollowState WebFeedFollowState::FOLLOWED;
constexpr WebFeedFollowState_FollowState WebFeedFollowState::NOT_FOLLOWED;
constexpr WebFeedFollowState_FollowState WebFeedFollowState::FOLLOW_IN_PROGRESS;
constexpr WebFeedFollowState_FollowState WebFeedFollowState::UNFOLLOW_IN_PROGRESS;
constexpr WebFeedFollowState_FollowState WebFeedFollowState::FollowState_MIN;
constexpr WebFeedFollowState_FollowState WebFeedFollowState::FollowState_MAX;
constexpr int WebFeedFollowState::FollowState_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class OfflineBadgeContent::_Internal {
 public:
  using HasBits = decltype(std::declval<OfflineBadgeContent>()._has_bits_);
  static void set_has_available_offline(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

OfflineBadgeContent::OfflineBadgeContent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedxsurface.OfflineBadgeContent)
}
OfflineBadgeContent::OfflineBadgeContent(const OfflineBadgeContent& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  available_offline_ = from.available_offline_;
  // @@protoc_insertion_point(copy_constructor:feedxsurface.OfflineBadgeContent)
}

inline void OfflineBadgeContent::SharedCtor() {
available_offline_ = false;
}

OfflineBadgeContent::~OfflineBadgeContent() {
  // @@protoc_insertion_point(destructor:feedxsurface.OfflineBadgeContent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OfflineBadgeContent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OfflineBadgeContent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OfflineBadgeContent::Clear() {
// @@protoc_insertion_point(message_clear_start:feedxsurface.OfflineBadgeContent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  available_offline_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* OfflineBadgeContent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool available_offline = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_available_offline(&has_bits);
          available_offline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OfflineBadgeContent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedxsurface.OfflineBadgeContent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool available_offline = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_available_offline(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedxsurface.OfflineBadgeContent)
  return target;
}

size_t OfflineBadgeContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedxsurface.OfflineBadgeContent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool available_offline = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OfflineBadgeContent::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const OfflineBadgeContent*>(
      &from));
}

void OfflineBadgeContent::MergeFrom(const OfflineBadgeContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedxsurface.OfflineBadgeContent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_available_offline()) {
    _internal_set_available_offline(from._internal_available_offline());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void OfflineBadgeContent::CopyFrom(const OfflineBadgeContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedxsurface.OfflineBadgeContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineBadgeContent::IsInitialized() const {
  return true;
}

void OfflineBadgeContent::InternalSwap(OfflineBadgeContent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(available_offline_, other->available_offline_);
}

std::string OfflineBadgeContent::GetTypeName() const {
  return "feedxsurface.OfflineBadgeContent";
}


// ===================================================================

class WebFeedFollowState::_Internal {
 public:
  using HasBits = decltype(std::declval<WebFeedFollowState>()._has_bits_);
  static void set_has_follow_state(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WebFeedFollowState::WebFeedFollowState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedxsurface.WebFeedFollowState)
}
WebFeedFollowState::WebFeedFollowState(const WebFeedFollowState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  follow_state_ = from.follow_state_;
  // @@protoc_insertion_point(copy_constructor:feedxsurface.WebFeedFollowState)
}

inline void WebFeedFollowState::SharedCtor() {
follow_state_ = 0;
}

WebFeedFollowState::~WebFeedFollowState() {
  // @@protoc_insertion_point(destructor:feedxsurface.WebFeedFollowState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebFeedFollowState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WebFeedFollowState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebFeedFollowState::Clear() {
// @@protoc_insertion_point(message_clear_start:feedxsurface.WebFeedFollowState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  follow_state_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* WebFeedFollowState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedxsurface.WebFeedFollowState.FollowState follow_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedxsurface::WebFeedFollowState_FollowState_IsValid(val))) {
            _internal_set_follow_state(static_cast<::feedxsurface::WebFeedFollowState_FollowState>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebFeedFollowState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedxsurface.WebFeedFollowState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedxsurface.WebFeedFollowState.FollowState follow_state = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_follow_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedxsurface.WebFeedFollowState)
  return target;
}

size_t WebFeedFollowState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedxsurface.WebFeedFollowState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .feedxsurface.WebFeedFollowState.FollowState follow_state = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_follow_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebFeedFollowState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebFeedFollowState*>(
      &from));
}

void WebFeedFollowState::MergeFrom(const WebFeedFollowState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedxsurface.WebFeedFollowState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_follow_state()) {
    _internal_set_follow_state(from._internal_follow_state());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebFeedFollowState::CopyFrom(const WebFeedFollowState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedxsurface.WebFeedFollowState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFeedFollowState::IsInitialized() const {
  return true;
}

void WebFeedFollowState::InternalSwap(WebFeedFollowState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(follow_state_, other->follow_state_);
}

std::string WebFeedFollowState::GetTypeName() const {
  return "feedxsurface.WebFeedFollowState";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedxsurface
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedxsurface::OfflineBadgeContent*
Arena::CreateMaybeMessage< ::feedxsurface::OfflineBadgeContent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedxsurface::OfflineBadgeContent >(arena);
}
template<> PROTOBUF_NOINLINE ::feedxsurface::WebFeedFollowState*
Arena::CreateMaybeMessage< ::feedxsurface::WebFeedFollowState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedxsurface::WebFeedFollowState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
