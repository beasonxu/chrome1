// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/capability.pb.h"
#include "components/feed/core/proto/v2/wire/client_info.pb.h"
#include "components/feed/core/proto/v2/wire/client_user_profiles.pb.h"
#include "components/feed/core/proto/v2/wire/consistency_token.pb.h"
#include "components/feed/core/proto/v2/wire/diagnostic_info.pb.h"
#include "components/feed/core/proto/v2/wire/feed_query.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5frequest_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class FeedRequest;
struct FeedRequestDefaultTypeInternal;
extern FeedRequestDefaultTypeInternal _FeedRequest_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::FeedRequest* Arena::CreateMaybeMessage<::feedwire::FeedRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class FeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedRequest) */ {
 public:
  inline FeedRequest() : FeedRequest(nullptr) {}
  ~FeedRequest() override;
  explicit PROTOBUF_CONSTEXPR FeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedRequest(const FeedRequest& from);
  FeedRequest(FeedRequest&& from) noexcept
    : FeedRequest() {
    *this = ::std::move(from);
  }

  inline FeedRequest& operator=(const FeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedRequest& operator=(FeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedRequest* internal_default_instance() {
    return reinterpret_cast<const FeedRequest*>(
               &_FeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeedRequest& a, FeedRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedRequest& from);
  void MergeFrom(const FeedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedRequest";
  }
  protected:
  explicit FeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientCapabilityFieldNumber = 4,
    kClientInfoFieldNumber = 1,
    kFeedQueryFieldNumber = 2,
    kConsistencyTokenFieldNumber = 5,
    kDiagnosticInfoFieldNumber = 14,
    kClientUserProfilesFieldNumber = 16,
  };
  // repeated .feedwire.Capability client_capability = 4;
  int client_capability_size() const;
  private:
  int _internal_client_capability_size() const;
  public:
  void clear_client_capability();
  private:
  ::feedwire::Capability _internal_client_capability(int index) const;
  void _internal_add_client_capability(::feedwire::Capability value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_client_capability();
  public:
  ::feedwire::Capability client_capability(int index) const;
  void set_client_capability(int index, ::feedwire::Capability value);
  void add_client_capability(::feedwire::Capability value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& client_capability() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_client_capability();

  // optional .feedwire.ClientInfo client_info = 1;
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::feedwire::ClientInfo& client_info() const;
  PROTOBUF_NODISCARD ::feedwire::ClientInfo* release_client_info();
  ::feedwire::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::feedwire::ClientInfo* client_info);
  private:
  const ::feedwire::ClientInfo& _internal_client_info() const;
  ::feedwire::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::feedwire::ClientInfo* client_info);
  ::feedwire::ClientInfo* unsafe_arena_release_client_info();

  // optional .feedwire.FeedQuery feed_query = 2;
  bool has_feed_query() const;
  private:
  bool _internal_has_feed_query() const;
  public:
  void clear_feed_query();
  const ::feedwire::FeedQuery& feed_query() const;
  PROTOBUF_NODISCARD ::feedwire::FeedQuery* release_feed_query();
  ::feedwire::FeedQuery* mutable_feed_query();
  void set_allocated_feed_query(::feedwire::FeedQuery* feed_query);
  private:
  const ::feedwire::FeedQuery& _internal_feed_query() const;
  ::feedwire::FeedQuery* _internal_mutable_feed_query();
  public:
  void unsafe_arena_set_allocated_feed_query(
      ::feedwire::FeedQuery* feed_query);
  ::feedwire::FeedQuery* unsafe_arena_release_feed_query();

  // optional .feedwire.ConsistencyToken consistency_token = 5;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // optional .feedwire.DiagnosticInfo diagnostic_info = 14;
  bool has_diagnostic_info() const;
  private:
  bool _internal_has_diagnostic_info() const;
  public:
  void clear_diagnostic_info();
  const ::feedwire::DiagnosticInfo& diagnostic_info() const;
  PROTOBUF_NODISCARD ::feedwire::DiagnosticInfo* release_diagnostic_info();
  ::feedwire::DiagnosticInfo* mutable_diagnostic_info();
  void set_allocated_diagnostic_info(::feedwire::DiagnosticInfo* diagnostic_info);
  private:
  const ::feedwire::DiagnosticInfo& _internal_diagnostic_info() const;
  ::feedwire::DiagnosticInfo* _internal_mutable_diagnostic_info();
  public:
  void unsafe_arena_set_allocated_diagnostic_info(
      ::feedwire::DiagnosticInfo* diagnostic_info);
  ::feedwire::DiagnosticInfo* unsafe_arena_release_diagnostic_info();

  // optional .feedwire.ClientUserProfiles client_user_profiles = 16;
  bool has_client_user_profiles() const;
  private:
  bool _internal_has_client_user_profiles() const;
  public:
  void clear_client_user_profiles();
  const ::feedwire::ClientUserProfiles& client_user_profiles() const;
  PROTOBUF_NODISCARD ::feedwire::ClientUserProfiles* release_client_user_profiles();
  ::feedwire::ClientUserProfiles* mutable_client_user_profiles();
  void set_allocated_client_user_profiles(::feedwire::ClientUserProfiles* client_user_profiles);
  private:
  const ::feedwire::ClientUserProfiles& _internal_client_user_profiles() const;
  ::feedwire::ClientUserProfiles* _internal_mutable_client_user_profiles();
  public:
  void unsafe_arena_set_allocated_client_user_profiles(
      ::feedwire::ClientUserProfiles* client_user_profiles);
  ::feedwire::ClientUserProfiles* unsafe_arena_release_client_user_profiles();

  // @@protoc_insertion_point(class_scope:feedwire.FeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> client_capability_;
  ::feedwire::ClientInfo* client_info_;
  ::feedwire::FeedQuery* feed_query_;
  ::feedwire::ConsistencyToken* consistency_token_;
  ::feedwire::DiagnosticInfo* diagnostic_info_;
  ::feedwire::ClientUserProfiles* client_user_profiles_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeedRequest

// optional .feedwire.ClientInfo client_info = 1;
inline bool FeedRequest::_internal_has_client_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || client_info_ != nullptr);
  return value;
}
inline bool FeedRequest::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::feedwire::ClientInfo& FeedRequest::_internal_client_info() const {
  const ::feedwire::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ClientInfo&>(
      ::feedwire::_ClientInfo_default_instance_);
}
inline const ::feedwire::ClientInfo& FeedRequest::client_info() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedRequest.client_info)
  return _internal_client_info();
}
inline void FeedRequest::unsafe_arena_set_allocated_client_info(
    ::feedwire::ClientInfo* client_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedRequest.client_info)
}
inline ::feedwire::ClientInfo* FeedRequest::release_client_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ClientInfo* FeedRequest::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:feedwire.FeedRequest.client_info)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::feedwire::ClientInfo* FeedRequest::_internal_mutable_client_info() {
  _has_bits_[0] |= 0x00000001u;
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ClientInfo>(GetArenaForAllocation());
    client_info_ = p;
  }
  return client_info_;
}
inline ::feedwire::ClientInfo* FeedRequest::mutable_client_info() {
  ::feedwire::ClientInfo* _msg = _internal_mutable_client_info();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedRequest.client_info)
  return _msg;
}
inline void FeedRequest::set_allocated_client_info(::feedwire::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info));
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedRequest.client_info)
}

// optional .feedwire.FeedQuery feed_query = 2;
inline bool FeedRequest::_internal_has_feed_query() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || feed_query_ != nullptr);
  return value;
}
inline bool FeedRequest::has_feed_query() const {
  return _internal_has_feed_query();
}
inline const ::feedwire::FeedQuery& FeedRequest::_internal_feed_query() const {
  const ::feedwire::FeedQuery* p = feed_query_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::FeedQuery&>(
      ::feedwire::_FeedQuery_default_instance_);
}
inline const ::feedwire::FeedQuery& FeedRequest::feed_query() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedRequest.feed_query)
  return _internal_feed_query();
}
inline void FeedRequest::unsafe_arena_set_allocated_feed_query(
    ::feedwire::FeedQuery* feed_query) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_query_);
  }
  feed_query_ = feed_query;
  if (feed_query) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedRequest.feed_query)
}
inline ::feedwire::FeedQuery* FeedRequest::release_feed_query() {
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::FeedQuery* temp = feed_query_;
  feed_query_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::FeedQuery* FeedRequest::unsafe_arena_release_feed_query() {
  // @@protoc_insertion_point(field_release:feedwire.FeedRequest.feed_query)
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::FeedQuery* temp = feed_query_;
  feed_query_ = nullptr;
  return temp;
}
inline ::feedwire::FeedQuery* FeedRequest::_internal_mutable_feed_query() {
  _has_bits_[0] |= 0x00000002u;
  if (feed_query_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::FeedQuery>(GetArenaForAllocation());
    feed_query_ = p;
  }
  return feed_query_;
}
inline ::feedwire::FeedQuery* FeedRequest::mutable_feed_query() {
  ::feedwire::FeedQuery* _msg = _internal_mutable_feed_query();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedRequest.feed_query)
  return _msg;
}
inline void FeedRequest::set_allocated_feed_query(::feedwire::FeedQuery* feed_query) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_query_);
  }
  if (feed_query) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_query));
    if (message_arena != submessage_arena) {
      feed_query = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_query, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  feed_query_ = feed_query;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedRequest.feed_query)
}

// repeated .feedwire.Capability client_capability = 4;
inline int FeedRequest::_internal_client_capability_size() const {
  return client_capability_.size();
}
inline int FeedRequest::client_capability_size() const {
  return _internal_client_capability_size();
}
inline void FeedRequest::clear_client_capability() {
  client_capability_.Clear();
}
inline ::feedwire::Capability FeedRequest::_internal_client_capability(int index) const {
  return static_cast< ::feedwire::Capability >(client_capability_.Get(index));
}
inline ::feedwire::Capability FeedRequest::client_capability(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.FeedRequest.client_capability)
  return _internal_client_capability(index);
}
inline void FeedRequest::set_client_capability(int index, ::feedwire::Capability value) {
  assert(::feedwire::Capability_IsValid(value));
  client_capability_.Set(index, value);
  // @@protoc_insertion_point(field_set:feedwire.FeedRequest.client_capability)
}
inline void FeedRequest::_internal_add_client_capability(::feedwire::Capability value) {
  assert(::feedwire::Capability_IsValid(value));
  client_capability_.Add(value);
}
inline void FeedRequest::add_client_capability(::feedwire::Capability value) {
  _internal_add_client_capability(value);
  // @@protoc_insertion_point(field_add:feedwire.FeedRequest.client_capability)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
FeedRequest::client_capability() const {
  // @@protoc_insertion_point(field_list:feedwire.FeedRequest.client_capability)
  return client_capability_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FeedRequest::_internal_mutable_client_capability() {
  return &client_capability_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
FeedRequest::mutable_client_capability() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.FeedRequest.client_capability)
  return _internal_mutable_client_capability();
}

// optional .feedwire.ConsistencyToken consistency_token = 5;
inline bool FeedRequest::_internal_has_consistency_token() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || consistency_token_ != nullptr);
  return value;
}
inline bool FeedRequest::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& FeedRequest::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& FeedRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedRequest.consistency_token)
  return _internal_consistency_token();
}
inline void FeedRequest::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedRequest.consistency_token)
}
inline ::feedwire::ConsistencyToken* FeedRequest::release_consistency_token() {
  _has_bits_[0] &= ~0x00000004u;
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* FeedRequest::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.FeedRequest.consistency_token)
  _has_bits_[0] &= ~0x00000004u;
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* FeedRequest::_internal_mutable_consistency_token() {
  _has_bits_[0] |= 0x00000004u;
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* FeedRequest::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedRequest.consistency_token)
  return _msg;
}
inline void FeedRequest::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedRequest.consistency_token)
}

// optional .feedwire.DiagnosticInfo diagnostic_info = 14;
inline bool FeedRequest::_internal_has_diagnostic_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || diagnostic_info_ != nullptr);
  return value;
}
inline bool FeedRequest::has_diagnostic_info() const {
  return _internal_has_diagnostic_info();
}
inline const ::feedwire::DiagnosticInfo& FeedRequest::_internal_diagnostic_info() const {
  const ::feedwire::DiagnosticInfo* p = diagnostic_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::DiagnosticInfo&>(
      ::feedwire::_DiagnosticInfo_default_instance_);
}
inline const ::feedwire::DiagnosticInfo& FeedRequest::diagnostic_info() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedRequest.diagnostic_info)
  return _internal_diagnostic_info();
}
inline void FeedRequest::unsafe_arena_set_allocated_diagnostic_info(
    ::feedwire::DiagnosticInfo* diagnostic_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostic_info_);
  }
  diagnostic_info_ = diagnostic_info;
  if (diagnostic_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedRequest.diagnostic_info)
}
inline ::feedwire::DiagnosticInfo* FeedRequest::release_diagnostic_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::DiagnosticInfo* temp = diagnostic_info_;
  diagnostic_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::DiagnosticInfo* FeedRequest::unsafe_arena_release_diagnostic_info() {
  // @@protoc_insertion_point(field_release:feedwire.FeedRequest.diagnostic_info)
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::DiagnosticInfo* temp = diagnostic_info_;
  diagnostic_info_ = nullptr;
  return temp;
}
inline ::feedwire::DiagnosticInfo* FeedRequest::_internal_mutable_diagnostic_info() {
  _has_bits_[0] |= 0x00000008u;
  if (diagnostic_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::DiagnosticInfo>(GetArenaForAllocation());
    diagnostic_info_ = p;
  }
  return diagnostic_info_;
}
inline ::feedwire::DiagnosticInfo* FeedRequest::mutable_diagnostic_info() {
  ::feedwire::DiagnosticInfo* _msg = _internal_mutable_diagnostic_info();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedRequest.diagnostic_info)
  return _msg;
}
inline void FeedRequest::set_allocated_diagnostic_info(::feedwire::DiagnosticInfo* diagnostic_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostic_info_);
  }
  if (diagnostic_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(diagnostic_info));
    if (message_arena != submessage_arena) {
      diagnostic_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, diagnostic_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  diagnostic_info_ = diagnostic_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedRequest.diagnostic_info)
}

// optional .feedwire.ClientUserProfiles client_user_profiles = 16;
inline bool FeedRequest::_internal_has_client_user_profiles() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || client_user_profiles_ != nullptr);
  return value;
}
inline bool FeedRequest::has_client_user_profiles() const {
  return _internal_has_client_user_profiles();
}
inline const ::feedwire::ClientUserProfiles& FeedRequest::_internal_client_user_profiles() const {
  const ::feedwire::ClientUserProfiles* p = client_user_profiles_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ClientUserProfiles&>(
      ::feedwire::_ClientUserProfiles_default_instance_);
}
inline const ::feedwire::ClientUserProfiles& FeedRequest::client_user_profiles() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedRequest.client_user_profiles)
  return _internal_client_user_profiles();
}
inline void FeedRequest::unsafe_arena_set_allocated_client_user_profiles(
    ::feedwire::ClientUserProfiles* client_user_profiles) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_user_profiles_);
  }
  client_user_profiles_ = client_user_profiles;
  if (client_user_profiles) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedRequest.client_user_profiles)
}
inline ::feedwire::ClientUserProfiles* FeedRequest::release_client_user_profiles() {
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::ClientUserProfiles* temp = client_user_profiles_;
  client_user_profiles_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ClientUserProfiles* FeedRequest::unsafe_arena_release_client_user_profiles() {
  // @@protoc_insertion_point(field_release:feedwire.FeedRequest.client_user_profiles)
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::ClientUserProfiles* temp = client_user_profiles_;
  client_user_profiles_ = nullptr;
  return temp;
}
inline ::feedwire::ClientUserProfiles* FeedRequest::_internal_mutable_client_user_profiles() {
  _has_bits_[0] |= 0x00000010u;
  if (client_user_profiles_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ClientUserProfiles>(GetArenaForAllocation());
    client_user_profiles_ = p;
  }
  return client_user_profiles_;
}
inline ::feedwire::ClientUserProfiles* FeedRequest::mutable_client_user_profiles() {
  ::feedwire::ClientUserProfiles* _msg = _internal_mutable_client_user_profiles();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedRequest.client_user_profiles)
  return _msg;
}
inline void FeedRequest::set_allocated_client_user_profiles(::feedwire::ClientUserProfiles* client_user_profiles) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_user_profiles_);
  }
  if (client_user_profiles) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_user_profiles));
    if (message_arena != submessage_arena) {
      client_user_profiles = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_user_profiles, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  client_user_profiles_ = client_user_profiles;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedRequest.client_user_profiles)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5frequest_2eproto
