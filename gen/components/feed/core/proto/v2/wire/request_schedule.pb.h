// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/request_schedule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/duration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class RequestSchedule;
struct RequestScheduleDefaultTypeInternal;
extern RequestScheduleDefaultTypeInternal _RequestSchedule_default_instance_;
class RequestSchedule_TimeBasedSchedule;
struct RequestSchedule_TimeBasedScheduleDefaultTypeInternal;
extern RequestSchedule_TimeBasedScheduleDefaultTypeInternal _RequestSchedule_TimeBasedSchedule_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::RequestSchedule* Arena::CreateMaybeMessage<::feedwire::RequestSchedule>(Arena*);
template<> ::feedwire::RequestSchedule_TimeBasedSchedule* Arena::CreateMaybeMessage<::feedwire::RequestSchedule_TimeBasedSchedule>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class RequestSchedule_TimeBasedSchedule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.RequestSchedule.TimeBasedSchedule) */ {
 public:
  inline RequestSchedule_TimeBasedSchedule() : RequestSchedule_TimeBasedSchedule(nullptr) {}
  ~RequestSchedule_TimeBasedSchedule() override;
  explicit PROTOBUF_CONSTEXPR RequestSchedule_TimeBasedSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSchedule_TimeBasedSchedule(const RequestSchedule_TimeBasedSchedule& from);
  RequestSchedule_TimeBasedSchedule(RequestSchedule_TimeBasedSchedule&& from) noexcept
    : RequestSchedule_TimeBasedSchedule() {
    *this = ::std::move(from);
  }

  inline RequestSchedule_TimeBasedSchedule& operator=(const RequestSchedule_TimeBasedSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSchedule_TimeBasedSchedule& operator=(RequestSchedule_TimeBasedSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestSchedule_TimeBasedSchedule& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestSchedule_TimeBasedSchedule* internal_default_instance() {
    return reinterpret_cast<const RequestSchedule_TimeBasedSchedule*>(
               &_RequestSchedule_TimeBasedSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestSchedule_TimeBasedSchedule& a, RequestSchedule_TimeBasedSchedule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequestSchedule_TimeBasedSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSchedule_TimeBasedSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestSchedule_TimeBasedSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestSchedule_TimeBasedSchedule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestSchedule_TimeBasedSchedule& from);
  void MergeFrom(const RequestSchedule_TimeBasedSchedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestSchedule_TimeBasedSchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.RequestSchedule.TimeBasedSchedule";
  }
  protected:
  explicit RequestSchedule_TimeBasedSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRefreshTimeFromResponseTimeFieldNumber = 1,
  };
  // repeated .feedwire.Duration refresh_time_from_response_time = 1;
  int refresh_time_from_response_time_size() const;
  private:
  int _internal_refresh_time_from_response_time_size() const;
  public:
  void clear_refresh_time_from_response_time();
  ::feedwire::Duration* mutable_refresh_time_from_response_time(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Duration >*
      mutable_refresh_time_from_response_time();
  private:
  const ::feedwire::Duration& _internal_refresh_time_from_response_time(int index) const;
  ::feedwire::Duration* _internal_add_refresh_time_from_response_time();
  public:
  const ::feedwire::Duration& refresh_time_from_response_time(int index) const;
  ::feedwire::Duration* add_refresh_time_from_response_time();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Duration >&
      refresh_time_from_response_time() const;

  // @@protoc_insertion_point(class_scope:feedwire.RequestSchedule.TimeBasedSchedule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Duration > refresh_time_from_response_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto;
};
// -------------------------------------------------------------------

class RequestSchedule final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.RequestSchedule) */ {
 public:
  inline RequestSchedule() : RequestSchedule(nullptr) {}
  ~RequestSchedule() override;
  explicit PROTOBUF_CONSTEXPR RequestSchedule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestSchedule(const RequestSchedule& from);
  RequestSchedule(RequestSchedule&& from) noexcept
    : RequestSchedule() {
    *this = ::std::move(from);
  }

  inline RequestSchedule& operator=(const RequestSchedule& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestSchedule& operator=(RequestSchedule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestSchedule& default_instance() {
    return *internal_default_instance();
  }
  enum ScheduleCase {
    kTimeBasedSchedule = 1,
    SCHEDULE_NOT_SET = 0,
  };

  static inline const RequestSchedule* internal_default_instance() {
    return reinterpret_cast<const RequestSchedule*>(
               &_RequestSchedule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RequestSchedule& a, RequestSchedule& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(RequestSchedule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestSchedule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestSchedule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestSchedule>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestSchedule& from);
  void MergeFrom(const RequestSchedule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestSchedule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.RequestSchedule";
  }
  protected:
  explicit RequestSchedule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef RequestSchedule_TimeBasedSchedule TimeBasedSchedule;

  // accessors -------------------------------------------------------

  enum : int {
    kTimeBasedScheduleFieldNumber = 1,
  };
  // .feedwire.RequestSchedule.TimeBasedSchedule time_based_schedule = 1;
  bool has_time_based_schedule() const;
  private:
  bool _internal_has_time_based_schedule() const;
  public:
  void clear_time_based_schedule();
  const ::feedwire::RequestSchedule_TimeBasedSchedule& time_based_schedule() const;
  PROTOBUF_NODISCARD ::feedwire::RequestSchedule_TimeBasedSchedule* release_time_based_schedule();
  ::feedwire::RequestSchedule_TimeBasedSchedule* mutable_time_based_schedule();
  void set_allocated_time_based_schedule(::feedwire::RequestSchedule_TimeBasedSchedule* time_based_schedule);
  private:
  const ::feedwire::RequestSchedule_TimeBasedSchedule& _internal_time_based_schedule() const;
  ::feedwire::RequestSchedule_TimeBasedSchedule* _internal_mutable_time_based_schedule();
  public:
  void unsafe_arena_set_allocated_time_based_schedule(
      ::feedwire::RequestSchedule_TimeBasedSchedule* time_based_schedule);
  ::feedwire::RequestSchedule_TimeBasedSchedule* unsafe_arena_release_time_based_schedule();

  void clear_schedule();
  ScheduleCase schedule_case() const;
  // @@protoc_insertion_point(class_scope:feedwire.RequestSchedule)
 private:
  class _Internal;
  void set_has_time_based_schedule();

  inline bool has_schedule() const;
  inline void clear_has_schedule();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union ScheduleUnion {
    constexpr ScheduleUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::feedwire::RequestSchedule_TimeBasedSchedule* time_based_schedule_;
  } schedule_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestSchedule_TimeBasedSchedule

// repeated .feedwire.Duration refresh_time_from_response_time = 1;
inline int RequestSchedule_TimeBasedSchedule::_internal_refresh_time_from_response_time_size() const {
  return refresh_time_from_response_time_.size();
}
inline int RequestSchedule_TimeBasedSchedule::refresh_time_from_response_time_size() const {
  return _internal_refresh_time_from_response_time_size();
}
inline ::feedwire::Duration* RequestSchedule_TimeBasedSchedule::mutable_refresh_time_from_response_time(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.RequestSchedule.TimeBasedSchedule.refresh_time_from_response_time)
  return refresh_time_from_response_time_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Duration >*
RequestSchedule_TimeBasedSchedule::mutable_refresh_time_from_response_time() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.RequestSchedule.TimeBasedSchedule.refresh_time_from_response_time)
  return &refresh_time_from_response_time_;
}
inline const ::feedwire::Duration& RequestSchedule_TimeBasedSchedule::_internal_refresh_time_from_response_time(int index) const {
  return refresh_time_from_response_time_.Get(index);
}
inline const ::feedwire::Duration& RequestSchedule_TimeBasedSchedule::refresh_time_from_response_time(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.RequestSchedule.TimeBasedSchedule.refresh_time_from_response_time)
  return _internal_refresh_time_from_response_time(index);
}
inline ::feedwire::Duration* RequestSchedule_TimeBasedSchedule::_internal_add_refresh_time_from_response_time() {
  return refresh_time_from_response_time_.Add();
}
inline ::feedwire::Duration* RequestSchedule_TimeBasedSchedule::add_refresh_time_from_response_time() {
  ::feedwire::Duration* _add = _internal_add_refresh_time_from_response_time();
  // @@protoc_insertion_point(field_add:feedwire.RequestSchedule.TimeBasedSchedule.refresh_time_from_response_time)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Duration >&
RequestSchedule_TimeBasedSchedule::refresh_time_from_response_time() const {
  // @@protoc_insertion_point(field_list:feedwire.RequestSchedule.TimeBasedSchedule.refresh_time_from_response_time)
  return refresh_time_from_response_time_;
}

// -------------------------------------------------------------------

// RequestSchedule

// .feedwire.RequestSchedule.TimeBasedSchedule time_based_schedule = 1;
inline bool RequestSchedule::_internal_has_time_based_schedule() const {
  return schedule_case() == kTimeBasedSchedule;
}
inline bool RequestSchedule::has_time_based_schedule() const {
  return _internal_has_time_based_schedule();
}
inline void RequestSchedule::set_has_time_based_schedule() {
  _oneof_case_[0] = kTimeBasedSchedule;
}
inline void RequestSchedule::clear_time_based_schedule() {
  if (_internal_has_time_based_schedule()) {
    if (GetArenaForAllocation() == nullptr) {
      delete schedule_.time_based_schedule_;
    }
    clear_has_schedule();
  }
}
inline ::feedwire::RequestSchedule_TimeBasedSchedule* RequestSchedule::release_time_based_schedule() {
  // @@protoc_insertion_point(field_release:feedwire.RequestSchedule.time_based_schedule)
  if (_internal_has_time_based_schedule()) {
    clear_has_schedule();
    ::feedwire::RequestSchedule_TimeBasedSchedule* temp = schedule_.time_based_schedule_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    schedule_.time_based_schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::RequestSchedule_TimeBasedSchedule& RequestSchedule::_internal_time_based_schedule() const {
  return _internal_has_time_based_schedule()
      ? *schedule_.time_based_schedule_
      : reinterpret_cast< ::feedwire::RequestSchedule_TimeBasedSchedule&>(::feedwire::_RequestSchedule_TimeBasedSchedule_default_instance_);
}
inline const ::feedwire::RequestSchedule_TimeBasedSchedule& RequestSchedule::time_based_schedule() const {
  // @@protoc_insertion_point(field_get:feedwire.RequestSchedule.time_based_schedule)
  return _internal_time_based_schedule();
}
inline ::feedwire::RequestSchedule_TimeBasedSchedule* RequestSchedule::unsafe_arena_release_time_based_schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.RequestSchedule.time_based_schedule)
  if (_internal_has_time_based_schedule()) {
    clear_has_schedule();
    ::feedwire::RequestSchedule_TimeBasedSchedule* temp = schedule_.time_based_schedule_;
    schedule_.time_based_schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void RequestSchedule::unsafe_arena_set_allocated_time_based_schedule(::feedwire::RequestSchedule_TimeBasedSchedule* time_based_schedule) {
  clear_schedule();
  if (time_based_schedule) {
    set_has_time_based_schedule();
    schedule_.time_based_schedule_ = time_based_schedule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.RequestSchedule.time_based_schedule)
}
inline ::feedwire::RequestSchedule_TimeBasedSchedule* RequestSchedule::_internal_mutable_time_based_schedule() {
  if (!_internal_has_time_based_schedule()) {
    clear_schedule();
    set_has_time_based_schedule();
    schedule_.time_based_schedule_ = CreateMaybeMessage< ::feedwire::RequestSchedule_TimeBasedSchedule >(GetArenaForAllocation());
  }
  return schedule_.time_based_schedule_;
}
inline ::feedwire::RequestSchedule_TimeBasedSchedule* RequestSchedule::mutable_time_based_schedule() {
  ::feedwire::RequestSchedule_TimeBasedSchedule* _msg = _internal_mutable_time_based_schedule();
  // @@protoc_insertion_point(field_mutable:feedwire.RequestSchedule.time_based_schedule)
  return _msg;
}

inline bool RequestSchedule::has_schedule() const {
  return schedule_case() != SCHEDULE_NOT_SET;
}
inline void RequestSchedule::clear_has_schedule() {
  _oneof_case_[0] = SCHEDULE_NOT_SET;
}
inline RequestSchedule::ScheduleCase RequestSchedule::schedule_case() const {
  return RequestSchedule::ScheduleCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2frequest_5fschedule_2eproto
