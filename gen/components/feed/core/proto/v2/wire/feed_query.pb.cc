// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_query.proto

#include "components/feed/core/proto/v2/wire/feed_query.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR FeedQuery_Tokens::FeedQuery_Tokens(
    ::_pbi::ConstantInitialized)
  : tokens_(){}
struct FeedQuery_TokensDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedQuery_TokensDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedQuery_TokensDefaultTypeInternal() {}
  union {
    FeedQuery_Tokens _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedQuery_TokensDefaultTypeInternal _FeedQuery_Tokens_default_instance_;
PROTOBUF_CONSTEXPR FeedQuery::FeedQuery(
    ::_pbi::ConstantInitialized)
  : feed_entry_point_data_(nullptr)
  , chrome_fulfillment_info_(nullptr)
  , reason_(0)

  , order_by_(0)

  , _oneof_case_{}{}
struct FeedQueryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedQueryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedQueryDefaultTypeInternal() {}
  union {
    FeedQuery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedQueryDefaultTypeInternal _FeedQuery_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool FeedQuery_RequestReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 13:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FeedQuery_RequestReason_strings[7] = {};

static const char FeedQuery_RequestReason_names[] =
  "APP_CLOSE_REFRESH"
  "INTERACTIVE_WEB_FEED"
  "MANUAL_REFRESH"
  "NEXT_PAGE_SCROLL"
  "PREFETCHED_WEB_FEED"
  "SCHEDULED_REFRESH"
  "UNKNOWN_REQUEST_REASON";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FeedQuery_RequestReason_entries[] = {
  { {FeedQuery_RequestReason_names + 0, 17}, 13 },
  { {FeedQuery_RequestReason_names + 17, 20}, 9 },
  { {FeedQuery_RequestReason_names + 37, 14}, 1 },
  { {FeedQuery_RequestReason_names + 51, 16}, 3 },
  { {FeedQuery_RequestReason_names + 67, 19}, 8 },
  { {FeedQuery_RequestReason_names + 86, 17}, 2 },
  { {FeedQuery_RequestReason_names + 103, 22}, 0 },
};

static const int FeedQuery_RequestReason_entries_by_number[] = {
  6, // 0 -> UNKNOWN_REQUEST_REASON
  2, // 1 -> MANUAL_REFRESH
  5, // 2 -> SCHEDULED_REFRESH
  3, // 3 -> NEXT_PAGE_SCROLL
  4, // 8 -> PREFETCHED_WEB_FEED
  1, // 9 -> INTERACTIVE_WEB_FEED
  0, // 13 -> APP_CLOSE_REFRESH
};

const std::string& FeedQuery_RequestReason_Name(
    FeedQuery_RequestReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FeedQuery_RequestReason_entries,
          FeedQuery_RequestReason_entries_by_number,
          7, FeedQuery_RequestReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FeedQuery_RequestReason_entries,
      FeedQuery_RequestReason_entries_by_number,
      7, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FeedQuery_RequestReason_strings[idx].get();
}
bool FeedQuery_RequestReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedQuery_RequestReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FeedQuery_RequestReason_entries, 7, name, &int_value);
  if (success) {
    *value = static_cast<FeedQuery_RequestReason>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FeedQuery_RequestReason FeedQuery::UNKNOWN_REQUEST_REASON;
constexpr FeedQuery_RequestReason FeedQuery::MANUAL_REFRESH;
constexpr FeedQuery_RequestReason FeedQuery::SCHEDULED_REFRESH;
constexpr FeedQuery_RequestReason FeedQuery::APP_CLOSE_REFRESH;
constexpr FeedQuery_RequestReason FeedQuery::NEXT_PAGE_SCROLL;
constexpr FeedQuery_RequestReason FeedQuery::PREFETCHED_WEB_FEED;
constexpr FeedQuery_RequestReason FeedQuery::INTERACTIVE_WEB_FEED;
constexpr FeedQuery_RequestReason FeedQuery::RequestReason_MIN;
constexpr FeedQuery_RequestReason FeedQuery::RequestReason_MAX;
constexpr int FeedQuery::RequestReason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool FeedQuery_ContentOrder_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> FeedQuery_ContentOrder_strings[3] = {};

static const char FeedQuery_ContentOrder_names[] =
  "CONTENT_ORDER_UNSPECIFIED"
  "GROUPED"
  "RECENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry FeedQuery_ContentOrder_entries[] = {
  { {FeedQuery_ContentOrder_names + 0, 25}, 0 },
  { {FeedQuery_ContentOrder_names + 25, 7}, 4 },
  { {FeedQuery_ContentOrder_names + 32, 6}, 2 },
};

static const int FeedQuery_ContentOrder_entries_by_number[] = {
  0, // 0 -> CONTENT_ORDER_UNSPECIFIED
  2, // 2 -> RECENT
  1, // 4 -> GROUPED
};

const std::string& FeedQuery_ContentOrder_Name(
    FeedQuery_ContentOrder value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          FeedQuery_ContentOrder_entries,
          FeedQuery_ContentOrder_entries_by_number,
          3, FeedQuery_ContentOrder_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      FeedQuery_ContentOrder_entries,
      FeedQuery_ContentOrder_entries_by_number,
      3, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     FeedQuery_ContentOrder_strings[idx].get();
}
bool FeedQuery_ContentOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedQuery_ContentOrder* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      FeedQuery_ContentOrder_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<FeedQuery_ContentOrder>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FeedQuery_ContentOrder FeedQuery::CONTENT_ORDER_UNSPECIFIED;
constexpr FeedQuery_ContentOrder FeedQuery::RECENT;
constexpr FeedQuery_ContentOrder FeedQuery::GROUPED;
constexpr FeedQuery_ContentOrder FeedQuery::ContentOrder_MIN;
constexpr FeedQuery_ContentOrder FeedQuery::ContentOrder_MAX;
constexpr int FeedQuery::ContentOrder_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FeedQuery_Tokens::_Internal {
 public:
};

void FeedQuery_Tokens::clear_tokens() {
  tokens_.Clear();
}
FeedQuery_Tokens::FeedQuery_Tokens(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  tokens_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.FeedQuery.Tokens)
}
FeedQuery_Tokens::FeedQuery_Tokens(const FeedQuery_Tokens& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      tokens_(from.tokens_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.FeedQuery.Tokens)
}

inline void FeedQuery_Tokens::SharedCtor() {
}

FeedQuery_Tokens::~FeedQuery_Tokens() {
  // @@protoc_insertion_point(destructor:feedwire.FeedQuery.Tokens)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedQuery_Tokens::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FeedQuery_Tokens::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedQuery_Tokens::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.FeedQuery.Tokens)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tokens_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeedQuery_Tokens::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.Token tokens = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tokens(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedQuery_Tokens::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.FeedQuery.Tokens)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.Token tokens = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tokens_size()); i < n; i++) {
    const auto& repfield = this->_internal_tokens(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.FeedQuery.Tokens)
  return target;
}

size_t FeedQuery_Tokens::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.FeedQuery.Tokens)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.Token tokens = 1;
  total_size += 1UL * this->_internal_tokens_size();
  for (const auto& msg : this->tokens_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedQuery_Tokens::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeedQuery_Tokens*>(
      &from));
}

void FeedQuery_Tokens::MergeFrom(const FeedQuery_Tokens& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.FeedQuery.Tokens)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tokens_.MergeFrom(from.tokens_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeedQuery_Tokens::CopyFrom(const FeedQuery_Tokens& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.FeedQuery.Tokens)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedQuery_Tokens::IsInitialized() const {
  return true;
}

void FeedQuery_Tokens::InternalSwap(FeedQuery_Tokens* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tokens_.InternalSwap(&other->tokens_);
}

std::string FeedQuery_Tokens::GetTypeName() const {
  return "feedwire.FeedQuery.Tokens";
}


// ===================================================================

class FeedQuery::_Internal {
 public:
  using HasBits = decltype(std::declval<FeedQuery>()._has_bits_);
  static const ::feedwire::Token& next_page_token(const FeedQuery* msg);
  static const ::feedwire::Token& web_feed_token(const FeedQuery* msg);
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_order_by(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::feedwire::FeedEntryPointData& feed_entry_point_data(const FeedQuery* msg);
  static void set_has_feed_entry_point_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::feedwire::ChromeFulfillmentInfo& chrome_fulfillment_info(const FeedQuery* msg);
  static void set_has_chrome_fulfillment_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::feedwire::Token&
FeedQuery::_Internal::next_page_token(const FeedQuery* msg) {
  return *msg->token_.next_page_token_;
}
const ::feedwire::Token&
FeedQuery::_Internal::web_feed_token(const FeedQuery* msg) {
  return *msg->token_.web_feed_token_;
}
const ::feedwire::FeedEntryPointData&
FeedQuery::_Internal::feed_entry_point_data(const FeedQuery* msg) {
  return *msg->feed_entry_point_data_;
}
const ::feedwire::ChromeFulfillmentInfo&
FeedQuery::_Internal::chrome_fulfillment_info(const FeedQuery* msg) {
  return *msg->chrome_fulfillment_info_;
}
void FeedQuery::set_allocated_next_page_token(::feedwire::Token* next_page_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_token();
  if (next_page_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_page_token));
    if (message_arena != submessage_arena) {
      next_page_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_page_token, submessage_arena);
    }
    set_has_next_page_token();
    token_.next_page_token_ = next_page_token;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedQuery.next_page_token)
}
void FeedQuery::clear_next_page_token() {
  if (_internal_has_next_page_token()) {
    if (GetArenaForAllocation() == nullptr) {
      delete token_.next_page_token_;
    }
    clear_has_token();
  }
}
void FeedQuery::set_allocated_web_feed_token(::feedwire::Token* web_feed_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_token();
  if (web_feed_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_feed_token));
    if (message_arena != submessage_arena) {
      web_feed_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_feed_token, submessage_arena);
    }
    set_has_web_feed_token();
    token_.web_feed_token_ = web_feed_token;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedQuery.web_feed_token)
}
void FeedQuery::clear_web_feed_token() {
  if (_internal_has_web_feed_token()) {
    if (GetArenaForAllocation() == nullptr) {
      delete token_.web_feed_token_;
    }
    clear_has_token();
  }
}
void FeedQuery::clear_feed_entry_point_data() {
  if (feed_entry_point_data_ != nullptr) feed_entry_point_data_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void FeedQuery::clear_chrome_fulfillment_info() {
  if (chrome_fulfillment_info_ != nullptr) chrome_fulfillment_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
FeedQuery::FeedQuery(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.FeedQuery)
}
FeedQuery::FeedQuery(const FeedQuery& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_feed_entry_point_data()) {
    feed_entry_point_data_ = new ::feedwire::FeedEntryPointData(*from.feed_entry_point_data_);
  } else {
    feed_entry_point_data_ = nullptr;
  }
  if (from._internal_has_chrome_fulfillment_info()) {
    chrome_fulfillment_info_ = new ::feedwire::ChromeFulfillmentInfo(*from.chrome_fulfillment_info_);
  } else {
    chrome_fulfillment_info_ = nullptr;
  }
  ::memcpy(&reason_, &from.reason_,
    static_cast<size_t>(reinterpret_cast<char*>(&order_by_) -
    reinterpret_cast<char*>(&reason_)) + sizeof(order_by_));
  clear_has_token();
  switch (from.token_case()) {
    case kNextPageToken: {
      _internal_mutable_next_page_token()->::feedwire::Token::MergeFrom(from._internal_next_page_token());
      break;
    }
    case kWebFeedToken: {
      _internal_mutable_web_feed_token()->::feedwire::Token::MergeFrom(from._internal_web_feed_token());
      break;
    }
    case TOKEN_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.FeedQuery)
}

inline void FeedQuery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&feed_entry_point_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_by_) -
    reinterpret_cast<char*>(&feed_entry_point_data_)) + sizeof(order_by_));
clear_has_token();
}

FeedQuery::~FeedQuery() {
  // @@protoc_insertion_point(destructor:feedwire.FeedQuery)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedQuery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete feed_entry_point_data_;
  if (this != internal_default_instance()) delete chrome_fulfillment_info_;
  if (has_token()) {
    clear_token();
  }
}

void FeedQuery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FeedQuery::clear_token() {
// @@protoc_insertion_point(one_of_clear_start:feedwire.FeedQuery)
  switch (token_case()) {
    case kNextPageToken: {
      if (GetArenaForAllocation() == nullptr) {
        delete token_.next_page_token_;
      }
      break;
    }
    case kWebFeedToken: {
      if (GetArenaForAllocation() == nullptr) {
        delete token_.web_feed_token_;
      }
      break;
    }
    case TOKEN_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TOKEN_NOT_SET;
}


void FeedQuery::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.FeedQuery)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(feed_entry_point_data_ != nullptr);
      feed_entry_point_data_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(chrome_fulfillment_info_ != nullptr);
      chrome_fulfillment_info_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&reason_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&order_by_) -
        reinterpret_cast<char*>(&reason_)) + sizeof(order_by_));
  }
  clear_token();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* FeedQuery::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.FeedQuery.RequestReason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::FeedQuery_RequestReason_IsValid(val))) {
            _internal_set_reason(static_cast<::feedwire::FeedQuery_RequestReason>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // .feedwire.Token next_page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_page_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.Token web_feed_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_feed_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.FeedQuery.ContentOrder order_by = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::FeedQuery_ContentOrder_IsValid(val))) {
            _internal_set_order_by(static_cast<::feedwire::FeedQuery_ContentOrder>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.FeedEntryPointData feed_entry_point_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_feed_entry_point_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.ChromeFulfillmentInfo chrome_fulfillment_info = 341477699;
      case 341477699:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_chrome_fulfillment_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedQuery::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.FeedQuery)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.FeedQuery.RequestReason reason = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  switch (token_case()) {
    case kNextPageToken: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::next_page_token(this),
          _Internal::next_page_token(this).GetCachedSize(), target, stream);
      break;
    }
    case kWebFeedToken: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, _Internal::web_feed_token(this),
          _Internal::web_feed_token(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  // optional .feedwire.FeedQuery.ContentOrder order_by = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_order_by(), target);
  }

  // optional .feedwire.FeedEntryPointData feed_entry_point_data = 9;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::feed_entry_point_data(this),
        _Internal::feed_entry_point_data(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.ChromeFulfillmentInfo chrome_fulfillment_info = 341477699;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(341477699, _Internal::chrome_fulfillment_info(this),
        _Internal::chrome_fulfillment_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.FeedQuery)
  return target;
}

size_t FeedQuery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.FeedQuery)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .feedwire.FeedEntryPointData feed_entry_point_data = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *feed_entry_point_data_);
    }

    // optional .feedwire.ChromeFulfillmentInfo chrome_fulfillment_info = 341477699;
    if (cached_has_bits & 0x00000002u) {
      total_size += 5 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *chrome_fulfillment_info_);
    }

    // optional .feedwire.FeedQuery.RequestReason reason = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_reason());
    }

    // optional .feedwire.FeedQuery.ContentOrder order_by = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_order_by());
    }

  }
  switch (token_case()) {
    // .feedwire.Token next_page_token = 3;
    case kNextPageToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *token_.next_page_token_);
      break;
    }
    // .feedwire.Token web_feed_token = 4;
    case kWebFeedToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *token_.web_feed_token_);
      break;
    }
    case TOKEN_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FeedQuery::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FeedQuery*>(
      &from));
}

void FeedQuery::MergeFrom(const FeedQuery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.FeedQuery)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_feed_entry_point_data()->::feedwire::FeedEntryPointData::MergeFrom(from._internal_feed_entry_point_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_chrome_fulfillment_info()->::feedwire::ChromeFulfillmentInfo::MergeFrom(from._internal_chrome_fulfillment_info());
    }
    if (cached_has_bits & 0x00000004u) {
      reason_ = from.reason_;
    }
    if (cached_has_bits & 0x00000008u) {
      order_by_ = from.order_by_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.token_case()) {
    case kNextPageToken: {
      _internal_mutable_next_page_token()->::feedwire::Token::MergeFrom(from._internal_next_page_token());
      break;
    }
    case kWebFeedToken: {
      _internal_mutable_web_feed_token()->::feedwire::Token::MergeFrom(from._internal_web_feed_token());
      break;
    }
    case TOKEN_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FeedQuery::CopyFrom(const FeedQuery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.FeedQuery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedQuery::IsInitialized() const {
  return true;
}

void FeedQuery::InternalSwap(FeedQuery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedQuery, order_by_)
      + sizeof(FeedQuery::order_by_)
      - PROTOBUF_FIELD_OFFSET(FeedQuery, feed_entry_point_data_)>(
          reinterpret_cast<char*>(&feed_entry_point_data_),
          reinterpret_cast<char*>(&other->feed_entry_point_data_));
  swap(token_, other->token_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FeedQuery::GetTypeName() const {
  return "feedwire.FeedQuery";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::FeedQuery_Tokens*
Arena::CreateMaybeMessage< ::feedwire::FeedQuery_Tokens >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::FeedQuery_Tokens >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::FeedQuery*
Arena::CreateMaybeMessage< ::feedwire::FeedQuery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::FeedQuery >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
