// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/info_card.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class InfoCardServingInfo;
struct InfoCardServingInfoDefaultTypeInternal;
extern InfoCardServingInfoDefaultTypeInternal _InfoCardServingInfo_default_instance_;
class InfoCardTrackingState;
struct InfoCardTrackingStateDefaultTypeInternal;
extern InfoCardTrackingStateDefaultTypeInternal _InfoCardTrackingState_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::InfoCardServingInfo* Arena::CreateMaybeMessage<::feedwire::InfoCardServingInfo>(Arena*);
template<> ::feedwire::InfoCardTrackingState* Arena::CreateMaybeMessage<::feedwire::InfoCardTrackingState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum InfoCardType : int {
  INFO_CARD_NONE = 0,
  INFO_CARD_MAIN_PRIVACY_NOTICE = 1,
  INFO_CARD_YOUTUBE_PRIVACY_NOTICE = 2,
  INFO_CARD_FOLLOWING_FEED_ONBOARDING_INTRO = 3,
  INFO_CARD_FOLLOWING_FEED_FOLLOW_FROM_PAGE_EDUCATION = 4
};
bool InfoCardType_IsValid(int value);
constexpr InfoCardType InfoCardType_MIN = INFO_CARD_NONE;
constexpr InfoCardType InfoCardType_MAX = INFO_CARD_FOLLOWING_FEED_FOLLOW_FROM_PAGE_EDUCATION;
constexpr int InfoCardType_ARRAYSIZE = InfoCardType_MAX + 1;

const std::string& InfoCardType_Name(InfoCardType value);
template<typename T>
inline const std::string& InfoCardType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InfoCardType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InfoCardType_Name.");
  return InfoCardType_Name(static_cast<InfoCardType>(enum_t_value));
}
bool InfoCardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InfoCardType* value);
// ===================================================================

class InfoCardTrackingState final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.InfoCardTrackingState) */ {
 public:
  inline InfoCardTrackingState() : InfoCardTrackingState(nullptr) {}
  ~InfoCardTrackingState() override;
  explicit PROTOBUF_CONSTEXPR InfoCardTrackingState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoCardTrackingState(const InfoCardTrackingState& from);
  InfoCardTrackingState(InfoCardTrackingState&& from) noexcept
    : InfoCardTrackingState() {
    *this = ::std::move(from);
  }

  inline InfoCardTrackingState& operator=(const InfoCardTrackingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoCardTrackingState& operator=(InfoCardTrackingState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InfoCardTrackingState& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoCardTrackingState* internal_default_instance() {
    return reinterpret_cast<const InfoCardTrackingState*>(
               &_InfoCardTrackingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InfoCardTrackingState& a, InfoCardTrackingState& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(InfoCardTrackingState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoCardTrackingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoCardTrackingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoCardTrackingState>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InfoCardTrackingState& from);
  void MergeFrom(const InfoCardTrackingState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoCardTrackingState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.InfoCardTrackingState";
  }
  protected:
  explicit InfoCardTrackingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kExplicitlyDismissedCountFieldNumber = 2,
    kViewCountFieldNumber = 3,
    kClickCountFieldNumber = 4,
    kFirstViewTimestampFieldNumber = 5,
    kLastViewTimestampFieldNumber = 6,
  };
  // optional int32 type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional int32 explicitly_dismissed_count = 2;
  bool has_explicitly_dismissed_count() const;
  private:
  bool _internal_has_explicitly_dismissed_count() const;
  public:
  void clear_explicitly_dismissed_count();
  int32_t explicitly_dismissed_count() const;
  void set_explicitly_dismissed_count(int32_t value);
  private:
  int32_t _internal_explicitly_dismissed_count() const;
  void _internal_set_explicitly_dismissed_count(int32_t value);
  public:

  // optional int32 view_count = 3;
  bool has_view_count() const;
  private:
  bool _internal_has_view_count() const;
  public:
  void clear_view_count();
  int32_t view_count() const;
  void set_view_count(int32_t value);
  private:
  int32_t _internal_view_count() const;
  void _internal_set_view_count(int32_t value);
  public:

  // optional int32 click_count = 4;
  bool has_click_count() const;
  private:
  bool _internal_has_click_count() const;
  public:
  void clear_click_count();
  int32_t click_count() const;
  void set_click_count(int32_t value);
  private:
  int32_t _internal_click_count() const;
  void _internal_set_click_count(int32_t value);
  public:

  // optional int64 first_view_timestamp = 5;
  bool has_first_view_timestamp() const;
  private:
  bool _internal_has_first_view_timestamp() const;
  public:
  void clear_first_view_timestamp();
  int64_t first_view_timestamp() const;
  void set_first_view_timestamp(int64_t value);
  private:
  int64_t _internal_first_view_timestamp() const;
  void _internal_set_first_view_timestamp(int64_t value);
  public:

  // optional int64 last_view_timestamp = 6;
  bool has_last_view_timestamp() const;
  private:
  bool _internal_has_last_view_timestamp() const;
  public:
  void clear_last_view_timestamp();
  int64_t last_view_timestamp() const;
  void set_last_view_timestamp(int64_t value);
  private:
  int64_t _internal_last_view_timestamp() const;
  void _internal_set_last_view_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.InfoCardTrackingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t type_;
  int32_t explicitly_dismissed_count_;
  int32_t view_count_;
  int32_t click_count_;
  int64_t first_view_timestamp_;
  int64_t last_view_timestamp_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto;
};
// -------------------------------------------------------------------

class InfoCardServingInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.InfoCardServingInfo) */ {
 public:
  inline InfoCardServingInfo() : InfoCardServingInfo(nullptr) {}
  ~InfoCardServingInfo() override;
  explicit PROTOBUF_CONSTEXPR InfoCardServingInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InfoCardServingInfo(const InfoCardServingInfo& from);
  InfoCardServingInfo(InfoCardServingInfo&& from) noexcept
    : InfoCardServingInfo() {
    *this = ::std::move(from);
  }

  inline InfoCardServingInfo& operator=(const InfoCardServingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoCardServingInfo& operator=(InfoCardServingInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InfoCardServingInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoCardServingInfo* internal_default_instance() {
    return reinterpret_cast<const InfoCardServingInfo*>(
               &_InfoCardServingInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InfoCardServingInfo& a, InfoCardServingInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(InfoCardServingInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoCardServingInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoCardServingInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InfoCardServingInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InfoCardServingInfo& from);
  void MergeFrom(const InfoCardServingInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InfoCardServingInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.InfoCardServingInfo";
  }
  protected:
  explicit InfoCardServingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFulfilledInfoCardTypesFieldNumber = 1,
    kKnownInfoCardTypesFieldNumber = 2,
  };
  // repeated int32 fulfilled_info_card_types = 1;
  int fulfilled_info_card_types_size() const;
  private:
  int _internal_fulfilled_info_card_types_size() const;
  public:
  void clear_fulfilled_info_card_types();
  private:
  int32_t _internal_fulfilled_info_card_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_fulfilled_info_card_types() const;
  void _internal_add_fulfilled_info_card_types(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_fulfilled_info_card_types();
  public:
  int32_t fulfilled_info_card_types(int index) const;
  void set_fulfilled_info_card_types(int index, int32_t value);
  void add_fulfilled_info_card_types(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      fulfilled_info_card_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_fulfilled_info_card_types();

  // repeated int64 known_info_card_types = 2;
  int known_info_card_types_size() const;
  private:
  int _internal_known_info_card_types_size() const;
  public:
  void clear_known_info_card_types();
  private:
  int64_t _internal_known_info_card_types(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      _internal_known_info_card_types() const;
  void _internal_add_known_info_card_types(int64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      _internal_mutable_known_info_card_types();
  public:
  int64_t known_info_card_types(int index) const;
  void set_known_info_card_types(int index, int64_t value);
  void add_known_info_card_types(int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
      known_info_card_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
      mutable_known_info_card_types();

  // @@protoc_insertion_point(class_scope:feedwire.InfoCardServingInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > fulfilled_info_card_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t > known_info_card_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InfoCardTrackingState

// optional int32 type = 1;
inline bool InfoCardTrackingState::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InfoCardTrackingState::has_type() const {
  return _internal_has_type();
}
inline void InfoCardTrackingState::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t InfoCardTrackingState::_internal_type() const {
  return type_;
}
inline int32_t InfoCardTrackingState::type() const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardTrackingState.type)
  return _internal_type();
}
inline void InfoCardTrackingState::_internal_set_type(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void InfoCardTrackingState::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardTrackingState.type)
}

// optional int32 explicitly_dismissed_count = 2;
inline bool InfoCardTrackingState::_internal_has_explicitly_dismissed_count() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InfoCardTrackingState::has_explicitly_dismissed_count() const {
  return _internal_has_explicitly_dismissed_count();
}
inline void InfoCardTrackingState::clear_explicitly_dismissed_count() {
  explicitly_dismissed_count_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t InfoCardTrackingState::_internal_explicitly_dismissed_count() const {
  return explicitly_dismissed_count_;
}
inline int32_t InfoCardTrackingState::explicitly_dismissed_count() const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardTrackingState.explicitly_dismissed_count)
  return _internal_explicitly_dismissed_count();
}
inline void InfoCardTrackingState::_internal_set_explicitly_dismissed_count(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  explicitly_dismissed_count_ = value;
}
inline void InfoCardTrackingState::set_explicitly_dismissed_count(int32_t value) {
  _internal_set_explicitly_dismissed_count(value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardTrackingState.explicitly_dismissed_count)
}

// optional int32 view_count = 3;
inline bool InfoCardTrackingState::_internal_has_view_count() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InfoCardTrackingState::has_view_count() const {
  return _internal_has_view_count();
}
inline void InfoCardTrackingState::clear_view_count() {
  view_count_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t InfoCardTrackingState::_internal_view_count() const {
  return view_count_;
}
inline int32_t InfoCardTrackingState::view_count() const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardTrackingState.view_count)
  return _internal_view_count();
}
inline void InfoCardTrackingState::_internal_set_view_count(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  view_count_ = value;
}
inline void InfoCardTrackingState::set_view_count(int32_t value) {
  _internal_set_view_count(value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardTrackingState.view_count)
}

// optional int32 click_count = 4;
inline bool InfoCardTrackingState::_internal_has_click_count() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InfoCardTrackingState::has_click_count() const {
  return _internal_has_click_count();
}
inline void InfoCardTrackingState::clear_click_count() {
  click_count_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t InfoCardTrackingState::_internal_click_count() const {
  return click_count_;
}
inline int32_t InfoCardTrackingState::click_count() const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardTrackingState.click_count)
  return _internal_click_count();
}
inline void InfoCardTrackingState::_internal_set_click_count(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  click_count_ = value;
}
inline void InfoCardTrackingState::set_click_count(int32_t value) {
  _internal_set_click_count(value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardTrackingState.click_count)
}

// optional int64 first_view_timestamp = 5;
inline bool InfoCardTrackingState::_internal_has_first_view_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InfoCardTrackingState::has_first_view_timestamp() const {
  return _internal_has_first_view_timestamp();
}
inline void InfoCardTrackingState::clear_first_view_timestamp() {
  first_view_timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000010u;
}
inline int64_t InfoCardTrackingState::_internal_first_view_timestamp() const {
  return first_view_timestamp_;
}
inline int64_t InfoCardTrackingState::first_view_timestamp() const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardTrackingState.first_view_timestamp)
  return _internal_first_view_timestamp();
}
inline void InfoCardTrackingState::_internal_set_first_view_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000010u;
  first_view_timestamp_ = value;
}
inline void InfoCardTrackingState::set_first_view_timestamp(int64_t value) {
  _internal_set_first_view_timestamp(value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardTrackingState.first_view_timestamp)
}

// optional int64 last_view_timestamp = 6;
inline bool InfoCardTrackingState::_internal_has_last_view_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool InfoCardTrackingState::has_last_view_timestamp() const {
  return _internal_has_last_view_timestamp();
}
inline void InfoCardTrackingState::clear_last_view_timestamp() {
  last_view_timestamp_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t InfoCardTrackingState::_internal_last_view_timestamp() const {
  return last_view_timestamp_;
}
inline int64_t InfoCardTrackingState::last_view_timestamp() const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardTrackingState.last_view_timestamp)
  return _internal_last_view_timestamp();
}
inline void InfoCardTrackingState::_internal_set_last_view_timestamp(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  last_view_timestamp_ = value;
}
inline void InfoCardTrackingState::set_last_view_timestamp(int64_t value) {
  _internal_set_last_view_timestamp(value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardTrackingState.last_view_timestamp)
}

// -------------------------------------------------------------------

// InfoCardServingInfo

// repeated int32 fulfilled_info_card_types = 1;
inline int InfoCardServingInfo::_internal_fulfilled_info_card_types_size() const {
  return fulfilled_info_card_types_.size();
}
inline int InfoCardServingInfo::fulfilled_info_card_types_size() const {
  return _internal_fulfilled_info_card_types_size();
}
inline void InfoCardServingInfo::clear_fulfilled_info_card_types() {
  fulfilled_info_card_types_.Clear();
}
inline int32_t InfoCardServingInfo::_internal_fulfilled_info_card_types(int index) const {
  return fulfilled_info_card_types_.Get(index);
}
inline int32_t InfoCardServingInfo::fulfilled_info_card_types(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardServingInfo.fulfilled_info_card_types)
  return _internal_fulfilled_info_card_types(index);
}
inline void InfoCardServingInfo::set_fulfilled_info_card_types(int index, int32_t value) {
  fulfilled_info_card_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardServingInfo.fulfilled_info_card_types)
}
inline void InfoCardServingInfo::_internal_add_fulfilled_info_card_types(int32_t value) {
  fulfilled_info_card_types_.Add(value);
}
inline void InfoCardServingInfo::add_fulfilled_info_card_types(int32_t value) {
  _internal_add_fulfilled_info_card_types(value);
  // @@protoc_insertion_point(field_add:feedwire.InfoCardServingInfo.fulfilled_info_card_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
InfoCardServingInfo::_internal_fulfilled_info_card_types() const {
  return fulfilled_info_card_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
InfoCardServingInfo::fulfilled_info_card_types() const {
  // @@protoc_insertion_point(field_list:feedwire.InfoCardServingInfo.fulfilled_info_card_types)
  return _internal_fulfilled_info_card_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
InfoCardServingInfo::_internal_mutable_fulfilled_info_card_types() {
  return &fulfilled_info_card_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
InfoCardServingInfo::mutable_fulfilled_info_card_types() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.InfoCardServingInfo.fulfilled_info_card_types)
  return _internal_mutable_fulfilled_info_card_types();
}

// repeated int64 known_info_card_types = 2;
inline int InfoCardServingInfo::_internal_known_info_card_types_size() const {
  return known_info_card_types_.size();
}
inline int InfoCardServingInfo::known_info_card_types_size() const {
  return _internal_known_info_card_types_size();
}
inline void InfoCardServingInfo::clear_known_info_card_types() {
  known_info_card_types_.Clear();
}
inline int64_t InfoCardServingInfo::_internal_known_info_card_types(int index) const {
  return known_info_card_types_.Get(index);
}
inline int64_t InfoCardServingInfo::known_info_card_types(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.InfoCardServingInfo.known_info_card_types)
  return _internal_known_info_card_types(index);
}
inline void InfoCardServingInfo::set_known_info_card_types(int index, int64_t value) {
  known_info_card_types_.Set(index, value);
  // @@protoc_insertion_point(field_set:feedwire.InfoCardServingInfo.known_info_card_types)
}
inline void InfoCardServingInfo::_internal_add_known_info_card_types(int64_t value) {
  known_info_card_types_.Add(value);
}
inline void InfoCardServingInfo::add_known_info_card_types(int64_t value) {
  _internal_add_known_info_card_types(value);
  // @@protoc_insertion_point(field_add:feedwire.InfoCardServingInfo.known_info_card_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
InfoCardServingInfo::_internal_known_info_card_types() const {
  return known_info_card_types_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >&
InfoCardServingInfo::known_info_card_types() const {
  // @@protoc_insertion_point(field_list:feedwire.InfoCardServingInfo.known_info_card_types)
  return _internal_known_info_card_types();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
InfoCardServingInfo::_internal_mutable_known_info_card_types() {
  return &known_info_card_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int64_t >*
InfoCardServingInfo::mutable_known_info_card_types() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.InfoCardServingInfo.known_info_card_types)
  return _internal_mutable_known_info_card_types();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::InfoCardType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2finfo_5fcard_2eproto
