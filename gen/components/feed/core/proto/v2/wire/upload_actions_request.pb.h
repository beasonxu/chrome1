// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/upload_actions_request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5frequest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5frequest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/action_diagnostic_info.pb.h"
#include "components/feed/core/proto/v2/wire/client_info.pb.h"
#include "components/feed/core/proto/v2/wire/consistency_token.pb.h"
#include "components/feed/core/proto/v2/wire/feed_action.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5frequest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5frequest_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class UploadActionsRequest;
struct UploadActionsRequestDefaultTypeInternal;
extern UploadActionsRequestDefaultTypeInternal _UploadActionsRequest_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::UploadActionsRequest* Arena::CreateMaybeMessage<::feedwire::UploadActionsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class UploadActionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.UploadActionsRequest) */ {
 public:
  inline UploadActionsRequest() : UploadActionsRequest(nullptr) {}
  ~UploadActionsRequest() override;
  explicit PROTOBUF_CONSTEXPR UploadActionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadActionsRequest(const UploadActionsRequest& from);
  UploadActionsRequest(UploadActionsRequest&& from) noexcept
    : UploadActionsRequest() {
    *this = ::std::move(from);
  }

  inline UploadActionsRequest& operator=(const UploadActionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadActionsRequest& operator=(UploadActionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UploadActionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadActionsRequest* internal_default_instance() {
    return reinterpret_cast<const UploadActionsRequest*>(
               &_UploadActionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadActionsRequest& a, UploadActionsRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UploadActionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadActionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadActionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadActionsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UploadActionsRequest& from);
  void MergeFrom(const UploadActionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UploadActionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.UploadActionsRequest";
  }
  protected:
  explicit UploadActionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeedActionsFieldNumber = 1,
    kConsistencyTokenFieldNumber = 2,
    kActionDiagnosticInfoFieldNumber = 5,
    kClientInfoFieldNumber = 6,
  };
  // repeated .feedwire.FeedAction feed_actions = 1;
  int feed_actions_size() const;
  private:
  int _internal_feed_actions_size() const;
  public:
  void clear_feed_actions();
  ::feedwire::FeedAction* mutable_feed_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::FeedAction >*
      mutable_feed_actions();
  private:
  const ::feedwire::FeedAction& _internal_feed_actions(int index) const;
  ::feedwire::FeedAction* _internal_add_feed_actions();
  public:
  const ::feedwire::FeedAction& feed_actions(int index) const;
  ::feedwire::FeedAction* add_feed_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::FeedAction >&
      feed_actions() const;

  // .feedwire.ConsistencyToken consistency_token = 2;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // .feedwire.ActionDiagnosticInfo action_diagnostic_info = 5;
  bool has_action_diagnostic_info() const;
  private:
  bool _internal_has_action_diagnostic_info() const;
  public:
  void clear_action_diagnostic_info();
  const ::feedwire::ActionDiagnosticInfo& action_diagnostic_info() const;
  PROTOBUF_NODISCARD ::feedwire::ActionDiagnosticInfo* release_action_diagnostic_info();
  ::feedwire::ActionDiagnosticInfo* mutable_action_diagnostic_info();
  void set_allocated_action_diagnostic_info(::feedwire::ActionDiagnosticInfo* action_diagnostic_info);
  private:
  const ::feedwire::ActionDiagnosticInfo& _internal_action_diagnostic_info() const;
  ::feedwire::ActionDiagnosticInfo* _internal_mutable_action_diagnostic_info();
  public:
  void unsafe_arena_set_allocated_action_diagnostic_info(
      ::feedwire::ActionDiagnosticInfo* action_diagnostic_info);
  ::feedwire::ActionDiagnosticInfo* unsafe_arena_release_action_diagnostic_info();

  // .feedwire.ClientInfo client_info = 6;
  bool has_client_info() const;
  private:
  bool _internal_has_client_info() const;
  public:
  void clear_client_info();
  const ::feedwire::ClientInfo& client_info() const;
  PROTOBUF_NODISCARD ::feedwire::ClientInfo* release_client_info();
  ::feedwire::ClientInfo* mutable_client_info();
  void set_allocated_client_info(::feedwire::ClientInfo* client_info);
  private:
  const ::feedwire::ClientInfo& _internal_client_info() const;
  ::feedwire::ClientInfo* _internal_mutable_client_info();
  public:
  void unsafe_arena_set_allocated_client_info(
      ::feedwire::ClientInfo* client_info);
  ::feedwire::ClientInfo* unsafe_arena_release_client_info();

  // @@protoc_insertion_point(class_scope:feedwire.UploadActionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::FeedAction > feed_actions_;
  ::feedwire::ConsistencyToken* consistency_token_;
  ::feedwire::ActionDiagnosticInfo* action_diagnostic_info_;
  ::feedwire::ClientInfo* client_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5frequest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadActionsRequest

// repeated .feedwire.FeedAction feed_actions = 1;
inline int UploadActionsRequest::_internal_feed_actions_size() const {
  return feed_actions_.size();
}
inline int UploadActionsRequest::feed_actions_size() const {
  return _internal_feed_actions_size();
}
inline ::feedwire::FeedAction* UploadActionsRequest::mutable_feed_actions(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.UploadActionsRequest.feed_actions)
  return feed_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::FeedAction >*
UploadActionsRequest::mutable_feed_actions() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.UploadActionsRequest.feed_actions)
  return &feed_actions_;
}
inline const ::feedwire::FeedAction& UploadActionsRequest::_internal_feed_actions(int index) const {
  return feed_actions_.Get(index);
}
inline const ::feedwire::FeedAction& UploadActionsRequest::feed_actions(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.UploadActionsRequest.feed_actions)
  return _internal_feed_actions(index);
}
inline ::feedwire::FeedAction* UploadActionsRequest::_internal_add_feed_actions() {
  return feed_actions_.Add();
}
inline ::feedwire::FeedAction* UploadActionsRequest::add_feed_actions() {
  ::feedwire::FeedAction* _add = _internal_add_feed_actions();
  // @@protoc_insertion_point(field_add:feedwire.UploadActionsRequest.feed_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::FeedAction >&
UploadActionsRequest::feed_actions() const {
  // @@protoc_insertion_point(field_list:feedwire.UploadActionsRequest.feed_actions)
  return feed_actions_;
}

// .feedwire.ConsistencyToken consistency_token = 2;
inline bool UploadActionsRequest::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool UploadActionsRequest::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& UploadActionsRequest::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& UploadActionsRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.UploadActionsRequest.consistency_token)
  return _internal_consistency_token();
}
inline void UploadActionsRequest::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.UploadActionsRequest.consistency_token)
}
inline ::feedwire::ConsistencyToken* UploadActionsRequest::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* UploadActionsRequest::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.UploadActionsRequest.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* UploadActionsRequest::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* UploadActionsRequest::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.UploadActionsRequest.consistency_token)
  return _msg;
}
inline void UploadActionsRequest::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.UploadActionsRequest.consistency_token)
}

// .feedwire.ActionDiagnosticInfo action_diagnostic_info = 5;
inline bool UploadActionsRequest::_internal_has_action_diagnostic_info() const {
  return this != internal_default_instance() && action_diagnostic_info_ != nullptr;
}
inline bool UploadActionsRequest::has_action_diagnostic_info() const {
  return _internal_has_action_diagnostic_info();
}
inline const ::feedwire::ActionDiagnosticInfo& UploadActionsRequest::_internal_action_diagnostic_info() const {
  const ::feedwire::ActionDiagnosticInfo* p = action_diagnostic_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ActionDiagnosticInfo&>(
      ::feedwire::_ActionDiagnosticInfo_default_instance_);
}
inline const ::feedwire::ActionDiagnosticInfo& UploadActionsRequest::action_diagnostic_info() const {
  // @@protoc_insertion_point(field_get:feedwire.UploadActionsRequest.action_diagnostic_info)
  return _internal_action_diagnostic_info();
}
inline void UploadActionsRequest::unsafe_arena_set_allocated_action_diagnostic_info(
    ::feedwire::ActionDiagnosticInfo* action_diagnostic_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_diagnostic_info_);
  }
  action_diagnostic_info_ = action_diagnostic_info;
  if (action_diagnostic_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.UploadActionsRequest.action_diagnostic_info)
}
inline ::feedwire::ActionDiagnosticInfo* UploadActionsRequest::release_action_diagnostic_info() {
  
  ::feedwire::ActionDiagnosticInfo* temp = action_diagnostic_info_;
  action_diagnostic_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ActionDiagnosticInfo* UploadActionsRequest::unsafe_arena_release_action_diagnostic_info() {
  // @@protoc_insertion_point(field_release:feedwire.UploadActionsRequest.action_diagnostic_info)
  
  ::feedwire::ActionDiagnosticInfo* temp = action_diagnostic_info_;
  action_diagnostic_info_ = nullptr;
  return temp;
}
inline ::feedwire::ActionDiagnosticInfo* UploadActionsRequest::_internal_mutable_action_diagnostic_info() {
  
  if (action_diagnostic_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ActionDiagnosticInfo>(GetArenaForAllocation());
    action_diagnostic_info_ = p;
  }
  return action_diagnostic_info_;
}
inline ::feedwire::ActionDiagnosticInfo* UploadActionsRequest::mutable_action_diagnostic_info() {
  ::feedwire::ActionDiagnosticInfo* _msg = _internal_mutable_action_diagnostic_info();
  // @@protoc_insertion_point(field_mutable:feedwire.UploadActionsRequest.action_diagnostic_info)
  return _msg;
}
inline void UploadActionsRequest::set_allocated_action_diagnostic_info(::feedwire::ActionDiagnosticInfo* action_diagnostic_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_diagnostic_info_);
  }
  if (action_diagnostic_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_diagnostic_info));
    if (message_arena != submessage_arena) {
      action_diagnostic_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_diagnostic_info, submessage_arena);
    }
    
  } else {
    
  }
  action_diagnostic_info_ = action_diagnostic_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.UploadActionsRequest.action_diagnostic_info)
}

// .feedwire.ClientInfo client_info = 6;
inline bool UploadActionsRequest::_internal_has_client_info() const {
  return this != internal_default_instance() && client_info_ != nullptr;
}
inline bool UploadActionsRequest::has_client_info() const {
  return _internal_has_client_info();
}
inline const ::feedwire::ClientInfo& UploadActionsRequest::_internal_client_info() const {
  const ::feedwire::ClientInfo* p = client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ClientInfo&>(
      ::feedwire::_ClientInfo_default_instance_);
}
inline const ::feedwire::ClientInfo& UploadActionsRequest::client_info() const {
  // @@protoc_insertion_point(field_get:feedwire.UploadActionsRequest.client_info)
  return _internal_client_info();
}
inline void UploadActionsRequest::unsafe_arena_set_allocated_client_info(
    ::feedwire::ClientInfo* client_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  client_info_ = client_info;
  if (client_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.UploadActionsRequest.client_info)
}
inline ::feedwire::ClientInfo* UploadActionsRequest::release_client_info() {
  
  ::feedwire::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ClientInfo* UploadActionsRequest::unsafe_arena_release_client_info() {
  // @@protoc_insertion_point(field_release:feedwire.UploadActionsRequest.client_info)
  
  ::feedwire::ClientInfo* temp = client_info_;
  client_info_ = nullptr;
  return temp;
}
inline ::feedwire::ClientInfo* UploadActionsRequest::_internal_mutable_client_info() {
  
  if (client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ClientInfo>(GetArenaForAllocation());
    client_info_ = p;
  }
  return client_info_;
}
inline ::feedwire::ClientInfo* UploadActionsRequest::mutable_client_info() {
  ::feedwire::ClientInfo* _msg = _internal_mutable_client_info();
  // @@protoc_insertion_point(field_mutable:feedwire.UploadActionsRequest.client_info)
  return _msg;
}
inline void UploadActionsRequest::set_allocated_client_info(::feedwire::ClientInfo* client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info_);
  }
  if (client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_info));
    if (message_arena != submessage_arena) {
      client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_info, submessage_arena);
    }
    
  } else {
    
  }
  client_info_ = client_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.UploadActionsRequest.client_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fupload_5factions_5frequest_2eproto
