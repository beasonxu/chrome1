// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/web_feeds.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/consistency_token.pb.h"
#include "components/feed/core/proto/v2/wire/web_feed_matcher.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
namespace webfeed {
class FollowWebFeedRequest;
struct FollowWebFeedRequestDefaultTypeInternal;
extern FollowWebFeedRequestDefaultTypeInternal _FollowWebFeedRequest_default_instance_;
class FollowWebFeedResponse;
struct FollowWebFeedResponseDefaultTypeInternal;
extern FollowWebFeedResponseDefaultTypeInternal _FollowWebFeedResponse_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class ListRecommendedWebFeedsRequest;
struct ListRecommendedWebFeedsRequestDefaultTypeInternal;
extern ListRecommendedWebFeedsRequestDefaultTypeInternal _ListRecommendedWebFeedsRequest_default_instance_;
class ListRecommendedWebFeedsResponse;
struct ListRecommendedWebFeedsResponseDefaultTypeInternal;
extern ListRecommendedWebFeedsResponseDefaultTypeInternal _ListRecommendedWebFeedsResponse_default_instance_;
class ListWebFeedsRequest;
struct ListWebFeedsRequestDefaultTypeInternal;
extern ListWebFeedsRequestDefaultTypeInternal _ListWebFeedsRequest_default_instance_;
class ListWebFeedsResponse;
struct ListWebFeedsResponseDefaultTypeInternal;
extern ListWebFeedsResponseDefaultTypeInternal _ListWebFeedsResponse_default_instance_;
class UnfollowWebFeedRequest;
struct UnfollowWebFeedRequestDefaultTypeInternal;
extern UnfollowWebFeedRequestDefaultTypeInternal _UnfollowWebFeedRequest_default_instance_;
class UnfollowWebFeedResponse;
struct UnfollowWebFeedResponseDefaultTypeInternal;
extern UnfollowWebFeedResponseDefaultTypeInternal _UnfollowWebFeedResponse_default_instance_;
class WebFeed;
struct WebFeedDefaultTypeInternal;
extern WebFeedDefaultTypeInternal _WebFeed_default_instance_;
}  // namespace webfeed
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::webfeed::FollowWebFeedRequest* Arena::CreateMaybeMessage<::feedwire::webfeed::FollowWebFeedRequest>(Arena*);
template<> ::feedwire::webfeed::FollowWebFeedResponse* Arena::CreateMaybeMessage<::feedwire::webfeed::FollowWebFeedResponse>(Arena*);
template<> ::feedwire::webfeed::Image* Arena::CreateMaybeMessage<::feedwire::webfeed::Image>(Arena*);
template<> ::feedwire::webfeed::ListRecommendedWebFeedsRequest* Arena::CreateMaybeMessage<::feedwire::webfeed::ListRecommendedWebFeedsRequest>(Arena*);
template<> ::feedwire::webfeed::ListRecommendedWebFeedsResponse* Arena::CreateMaybeMessage<::feedwire::webfeed::ListRecommendedWebFeedsResponse>(Arena*);
template<> ::feedwire::webfeed::ListWebFeedsRequest* Arena::CreateMaybeMessage<::feedwire::webfeed::ListWebFeedsRequest>(Arena*);
template<> ::feedwire::webfeed::ListWebFeedsResponse* Arena::CreateMaybeMessage<::feedwire::webfeed::ListWebFeedsResponse>(Arena*);
template<> ::feedwire::webfeed::UnfollowWebFeedRequest* Arena::CreateMaybeMessage<::feedwire::webfeed::UnfollowWebFeedRequest>(Arena*);
template<> ::feedwire::webfeed::UnfollowWebFeedResponse* Arena::CreateMaybeMessage<::feedwire::webfeed::UnfollowWebFeedResponse>(Arena*);
template<> ::feedwire::webfeed::WebFeed* Arena::CreateMaybeMessage<::feedwire::webfeed::WebFeed>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {
namespace webfeed {

enum WebFeed_State : int {
  WebFeed_State_STATE_UNSPECIFIED = 0,
  WebFeed_State_INACTIVE = 1,
  WebFeed_State_ACTIVE = 2,
  WebFeed_State_WAITING_FOR_CONTENT = 4,
  WebFeed_State_WebFeed_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WebFeed_State_WebFeed_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WebFeed_State_IsValid(int value);
constexpr WebFeed_State WebFeed_State_State_MIN = WebFeed_State_STATE_UNSPECIFIED;
constexpr WebFeed_State WebFeed_State_State_MAX = WebFeed_State_WAITING_FOR_CONTENT;
constexpr int WebFeed_State_State_ARRAYSIZE = WebFeed_State_State_MAX + 1;

const std::string& WebFeed_State_Name(WebFeed_State value);
template<typename T>
inline const std::string& WebFeed_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebFeed_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebFeed_State_Name.");
  return WebFeed_State_Name(static_cast<WebFeed_State>(enum_t_value));
}
bool WebFeed_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeed_State* value);
enum WebFeedChangeReason : int {
  WEB_FEED_CHANGE_REASON_UNSPECIFIED = 0,
  WEB_PAGE_MENU = 1,
  WEB_PAGE_ACCELERATOR = 2,
  MANAGEMENT = 3,
  IN_FEED_RECOMMENDATION = 4,
  BACK_OF_CARD_UNFOLLOW = 5,
  WebFeedChangeReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  WebFeedChangeReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool WebFeedChangeReason_IsValid(int value);
constexpr WebFeedChangeReason WebFeedChangeReason_MIN = WEB_FEED_CHANGE_REASON_UNSPECIFIED;
constexpr WebFeedChangeReason WebFeedChangeReason_MAX = BACK_OF_CARD_UNFOLLOW;
constexpr int WebFeedChangeReason_ARRAYSIZE = WebFeedChangeReason_MAX + 1;

const std::string& WebFeedChangeReason_Name(WebFeedChangeReason value);
template<typename T>
inline const std::string& WebFeedChangeReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, WebFeedChangeReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function WebFeedChangeReason_Name.");
  return WebFeedChangeReason_Name(static_cast<WebFeedChangeReason>(enum_t_value));
}
bool WebFeedChangeReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeedChangeReason* value);
// ===================================================================

class WebFeed final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.WebFeed) */ {
 public:
  inline WebFeed() : WebFeed(nullptr) {}
  ~WebFeed() override;
  explicit PROTOBUF_CONSTEXPR WebFeed(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WebFeed(const WebFeed& from);
  WebFeed(WebFeed&& from) noexcept
    : WebFeed() {
    *this = ::std::move(from);
  }

  inline WebFeed& operator=(const WebFeed& from) {
    CopyFrom(from);
    return *this;
  }
  inline WebFeed& operator=(WebFeed&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const WebFeed& default_instance() {
    return *internal_default_instance();
  }
  static inline const WebFeed* internal_default_instance() {
    return reinterpret_cast<const WebFeed*>(
               &_WebFeed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WebFeed& a, WebFeed& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(WebFeed* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WebFeed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WebFeed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WebFeed>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const WebFeed& from);
  void MergeFrom(const WebFeed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WebFeed* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.WebFeed";
  }
  protected:
  explicit WebFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef WebFeed_State State;
  static constexpr State STATE_UNSPECIFIED =
    WebFeed_State_STATE_UNSPECIFIED;
  static constexpr State INACTIVE =
    WebFeed_State_INACTIVE;
  static constexpr State ACTIVE =
    WebFeed_State_ACTIVE;
  static constexpr State WAITING_FOR_CONTENT =
    WebFeed_State_WAITING_FOR_CONTENT;
  static inline bool State_IsValid(int value) {
    return WebFeed_State_IsValid(value);
  }
  static constexpr State State_MIN =
    WebFeed_State_State_MIN;
  static constexpr State State_MAX =
    WebFeed_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    WebFeed_State_State_ARRAYSIZE;
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return WebFeed_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return WebFeed_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kWebFeedMatchersFieldNumber = 10,
    kNameFieldNumber = 1,
    kTitleFieldNumber = 2,
    kSubtitleFieldNumber = 3,
    kDetailTextFieldNumber = 4,
    kVisitUriFieldNumber = 5,
    kRssUriFieldNumber = 6,
    kFaviconFieldNumber = 7,
    kFollowerCountFieldNumber = 8,
    kStateFieldNumber = 9,
  };
  // repeated .feedwire.webfeed.WebFeedMatcher web_feed_matchers = 10;
  int web_feed_matchers_size() const;
  private:
  int _internal_web_feed_matchers_size() const;
  public:
  void clear_web_feed_matchers();
  ::feedwire::webfeed::WebFeedMatcher* mutable_web_feed_matchers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeedMatcher >*
      mutable_web_feed_matchers();
  private:
  const ::feedwire::webfeed::WebFeedMatcher& _internal_web_feed_matchers(int index) const;
  ::feedwire::webfeed::WebFeedMatcher* _internal_add_web_feed_matchers();
  public:
  const ::feedwire::webfeed::WebFeedMatcher& web_feed_matchers(int index) const;
  ::feedwire::webfeed::WebFeedMatcher* add_web_feed_matchers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeedMatcher >&
      web_feed_matchers() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string subtitle = 3;
  void clear_subtitle();
  const std::string& subtitle() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtitle(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtitle();
  PROTOBUF_NODISCARD std::string* release_subtitle();
  void set_allocated_subtitle(std::string* subtitle);
  private:
  const std::string& _internal_subtitle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtitle(const std::string& value);
  std::string* _internal_mutable_subtitle();
  public:

  // string detail_text = 4;
  void clear_detail_text();
  const std::string& detail_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_detail_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_detail_text();
  PROTOBUF_NODISCARD std::string* release_detail_text();
  void set_allocated_detail_text(std::string* detail_text);
  private:
  const std::string& _internal_detail_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_detail_text(const std::string& value);
  std::string* _internal_mutable_detail_text();
  public:

  // string visit_uri = 5;
  void clear_visit_uri();
  const std::string& visit_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_visit_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_visit_uri();
  PROTOBUF_NODISCARD std::string* release_visit_uri();
  void set_allocated_visit_uri(std::string* visit_uri);
  private:
  const std::string& _internal_visit_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_visit_uri(const std::string& value);
  std::string* _internal_mutable_visit_uri();
  public:

  // string rss_uri = 6;
  void clear_rss_uri();
  const std::string& rss_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rss_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rss_uri();
  PROTOBUF_NODISCARD std::string* release_rss_uri();
  void set_allocated_rss_uri(std::string* rss_uri);
  private:
  const std::string& _internal_rss_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rss_uri(const std::string& value);
  std::string* _internal_mutable_rss_uri();
  public:

  // .feedwire.webfeed.Image favicon = 7;
  bool has_favicon() const;
  private:
  bool _internal_has_favicon() const;
  public:
  void clear_favicon();
  const ::feedwire::webfeed::Image& favicon() const;
  PROTOBUF_NODISCARD ::feedwire::webfeed::Image* release_favicon();
  ::feedwire::webfeed::Image* mutable_favicon();
  void set_allocated_favicon(::feedwire::webfeed::Image* favicon);
  private:
  const ::feedwire::webfeed::Image& _internal_favicon() const;
  ::feedwire::webfeed::Image* _internal_mutable_favicon();
  public:
  void unsafe_arena_set_allocated_favicon(
      ::feedwire::webfeed::Image* favicon);
  ::feedwire::webfeed::Image* unsafe_arena_release_favicon();

  // int64 follower_count = 8;
  void clear_follower_count();
  int64_t follower_count() const;
  void set_follower_count(int64_t value);
  private:
  int64_t _internal_follower_count() const;
  void _internal_set_follower_count(int64_t value);
  public:

  // .feedwire.webfeed.WebFeed.State state = 9;
  void clear_state();
  ::feedwire::webfeed::WebFeed_State state() const;
  void set_state(::feedwire::webfeed::WebFeed_State value);
  private:
  ::feedwire::webfeed::WebFeed_State _internal_state() const;
  void _internal_set_state(::feedwire::webfeed::WebFeed_State value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.WebFeed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeedMatcher > web_feed_matchers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtitle_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr detail_text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr visit_uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rss_uri_;
  ::feedwire::webfeed::Image* favicon_;
  int64_t follower_count_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const Image& default_instance() {
    return *internal_default_instance();
  }
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.Image)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class ListWebFeedsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.ListWebFeedsRequest) */ {
 public:
  inline ListWebFeedsRequest() : ListWebFeedsRequest(nullptr) {}
  ~ListWebFeedsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListWebFeedsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWebFeedsRequest(const ListWebFeedsRequest& from);
  ListWebFeedsRequest(ListWebFeedsRequest&& from) noexcept
    : ListWebFeedsRequest() {
    *this = ::std::move(from);
  }

  inline ListWebFeedsRequest& operator=(const ListWebFeedsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWebFeedsRequest& operator=(ListWebFeedsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListWebFeedsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWebFeedsRequest* internal_default_instance() {
    return reinterpret_cast<const ListWebFeedsRequest*>(
               &_ListWebFeedsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListWebFeedsRequest& a, ListWebFeedsRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ListWebFeedsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWebFeedsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListWebFeedsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListWebFeedsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListWebFeedsRequest& from);
  void MergeFrom(const ListWebFeedsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListWebFeedsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.ListWebFeedsRequest";
  }
  protected:
  explicit ListWebFeedsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsistencyTokenFieldNumber = 1,
  };
  // .feedwire.ConsistencyToken consistency_token = 1;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.ListWebFeedsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::feedwire::ConsistencyToken* consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class ListWebFeedsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.ListWebFeedsResponse) */ {
 public:
  inline ListWebFeedsResponse() : ListWebFeedsResponse(nullptr) {}
  ~ListWebFeedsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListWebFeedsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListWebFeedsResponse(const ListWebFeedsResponse& from);
  ListWebFeedsResponse(ListWebFeedsResponse&& from) noexcept
    : ListWebFeedsResponse() {
    *this = ::std::move(from);
  }

  inline ListWebFeedsResponse& operator=(const ListWebFeedsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListWebFeedsResponse& operator=(ListWebFeedsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListWebFeedsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListWebFeedsResponse* internal_default_instance() {
    return reinterpret_cast<const ListWebFeedsResponse*>(
               &_ListWebFeedsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListWebFeedsResponse& a, ListWebFeedsResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ListWebFeedsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListWebFeedsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListWebFeedsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListWebFeedsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListWebFeedsResponse& from);
  void MergeFrom(const ListWebFeedsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListWebFeedsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.ListWebFeedsResponse";
  }
  protected:
  explicit ListWebFeedsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebFeedsFieldNumber = 1,
  };
  // repeated .feedwire.webfeed.WebFeed web_feeds = 1;
  int web_feeds_size() const;
  private:
  int _internal_web_feeds_size() const;
  public:
  void clear_web_feeds();
  ::feedwire::webfeed::WebFeed* mutable_web_feeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >*
      mutable_web_feeds();
  private:
  const ::feedwire::webfeed::WebFeed& _internal_web_feeds(int index) const;
  ::feedwire::webfeed::WebFeed* _internal_add_web_feeds();
  public:
  const ::feedwire::webfeed::WebFeed& web_feeds(int index) const;
  ::feedwire::webfeed::WebFeed* add_web_feeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >&
      web_feeds() const;

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.ListWebFeedsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed > web_feeds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class FollowWebFeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.FollowWebFeedRequest) */ {
 public:
  inline FollowWebFeedRequest() : FollowWebFeedRequest(nullptr) {}
  ~FollowWebFeedRequest() override;
  explicit PROTOBUF_CONSTEXPR FollowWebFeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowWebFeedRequest(const FollowWebFeedRequest& from);
  FollowWebFeedRequest(FollowWebFeedRequest&& from) noexcept
    : FollowWebFeedRequest() {
    *this = ::std::move(from);
  }

  inline FollowWebFeedRequest& operator=(const FollowWebFeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowWebFeedRequest& operator=(FollowWebFeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FollowWebFeedRequest& default_instance() {
    return *internal_default_instance();
  }
  enum IdentifierCase {
    kName = 1,
    kWebPageUri = 2,
    IDENTIFIER_NOT_SET = 0,
  };

  static inline const FollowWebFeedRequest* internal_default_instance() {
    return reinterpret_cast<const FollowWebFeedRequest*>(
               &_FollowWebFeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FollowWebFeedRequest& a, FollowWebFeedRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FollowWebFeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowWebFeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FollowWebFeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FollowWebFeedRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FollowWebFeedRequest& from);
  void MergeFrom(const FollowWebFeedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FollowWebFeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.FollowWebFeedRequest";
  }
  protected:
  explicit FollowWebFeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageRssUrisFieldNumber = 3,
    kCanonicalUriFieldNumber = 5,
    kConsistencyTokenFieldNumber = 4,
    kChangeReasonFieldNumber = 6,
    kNameFieldNumber = 1,
    kWebPageUriFieldNumber = 2,
  };
  // repeated string page_rss_uris = 3;
  int page_rss_uris_size() const;
  private:
  int _internal_page_rss_uris_size() const;
  public:
  void clear_page_rss_uris();
  const std::string& page_rss_uris(int index) const;
  std::string* mutable_page_rss_uris(int index);
  void set_page_rss_uris(int index, const std::string& value);
  void set_page_rss_uris(int index, std::string&& value);
  void set_page_rss_uris(int index, const char* value);
  void set_page_rss_uris(int index, const char* value, size_t size);
  std::string* add_page_rss_uris();
  void add_page_rss_uris(const std::string& value);
  void add_page_rss_uris(std::string&& value);
  void add_page_rss_uris(const char* value);
  void add_page_rss_uris(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& page_rss_uris() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_page_rss_uris();
  private:
  const std::string& _internal_page_rss_uris(int index) const;
  std::string* _internal_add_page_rss_uris();
  public:

  // string canonical_uri = 5;
  void clear_canonical_uri();
  const std::string& canonical_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_canonical_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_canonical_uri();
  PROTOBUF_NODISCARD std::string* release_canonical_uri();
  void set_allocated_canonical_uri(std::string* canonical_uri);
  private:
  const std::string& _internal_canonical_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_canonical_uri(const std::string& value);
  std::string* _internal_mutable_canonical_uri();
  public:

  // .feedwire.ConsistencyToken consistency_token = 4;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // .feedwire.webfeed.WebFeedChangeReason change_reason = 6;
  void clear_change_reason();
  ::feedwire::webfeed::WebFeedChangeReason change_reason() const;
  void set_change_reason(::feedwire::webfeed::WebFeedChangeReason value);
  private:
  ::feedwire::webfeed::WebFeedChangeReason _internal_change_reason() const;
  void _internal_set_change_reason(::feedwire::webfeed::WebFeedChangeReason value);
  public:

  // string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string web_page_uri = 2;
  bool has_web_page_uri() const;
  private:
  bool _internal_has_web_page_uri() const;
  public:
  void clear_web_page_uri();
  const std::string& web_page_uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_web_page_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_web_page_uri();
  PROTOBUF_NODISCARD std::string* release_web_page_uri();
  void set_allocated_web_page_uri(std::string* web_page_uri);
  private:
  const std::string& _internal_web_page_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_web_page_uri(const std::string& value);
  std::string* _internal_mutable_web_page_uri();
  public:

  void clear_identifier();
  IdentifierCase identifier_case() const;
  // @@protoc_insertion_point(class_scope:feedwire.webfeed.FollowWebFeedRequest)
 private:
  class _Internal;
  void set_has_name();
  void set_has_web_page_uri();

  inline bool has_identifier() const;
  inline void clear_has_identifier();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> page_rss_uris_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr canonical_uri_;
  ::feedwire::ConsistencyToken* consistency_token_;
  int change_reason_;
  union IdentifierUnion {
    constexpr IdentifierUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr web_page_uri_;
  } identifier_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class FollowWebFeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.FollowWebFeedResponse) */ {
 public:
  inline FollowWebFeedResponse() : FollowWebFeedResponse(nullptr) {}
  ~FollowWebFeedResponse() override;
  explicit PROTOBUF_CONSTEXPR FollowWebFeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FollowWebFeedResponse(const FollowWebFeedResponse& from);
  FollowWebFeedResponse(FollowWebFeedResponse&& from) noexcept
    : FollowWebFeedResponse() {
    *this = ::std::move(from);
  }

  inline FollowWebFeedResponse& operator=(const FollowWebFeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FollowWebFeedResponse& operator=(FollowWebFeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const FollowWebFeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FollowWebFeedResponse* internal_default_instance() {
    return reinterpret_cast<const FollowWebFeedResponse*>(
               &_FollowWebFeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FollowWebFeedResponse& a, FollowWebFeedResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FollowWebFeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FollowWebFeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FollowWebFeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FollowWebFeedResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FollowWebFeedResponse& from);
  void MergeFrom(const FollowWebFeedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FollowWebFeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.FollowWebFeedResponse";
  }
  protected:
  explicit FollowWebFeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebFeedFieldNumber = 1,
    kConsistencyTokenFieldNumber = 2,
  };
  // .feedwire.webfeed.WebFeed web_feed = 1;
  bool has_web_feed() const;
  private:
  bool _internal_has_web_feed() const;
  public:
  void clear_web_feed();
  const ::feedwire::webfeed::WebFeed& web_feed() const;
  PROTOBUF_NODISCARD ::feedwire::webfeed::WebFeed* release_web_feed();
  ::feedwire::webfeed::WebFeed* mutable_web_feed();
  void set_allocated_web_feed(::feedwire::webfeed::WebFeed* web_feed);
  private:
  const ::feedwire::webfeed::WebFeed& _internal_web_feed() const;
  ::feedwire::webfeed::WebFeed* _internal_mutable_web_feed();
  public:
  void unsafe_arena_set_allocated_web_feed(
      ::feedwire::webfeed::WebFeed* web_feed);
  ::feedwire::webfeed::WebFeed* unsafe_arena_release_web_feed();

  // .feedwire.ConsistencyToken consistency_token = 2;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.FollowWebFeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::feedwire::webfeed::WebFeed* web_feed_;
  ::feedwire::ConsistencyToken* consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class UnfollowWebFeedRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.UnfollowWebFeedRequest) */ {
 public:
  inline UnfollowWebFeedRequest() : UnfollowWebFeedRequest(nullptr) {}
  ~UnfollowWebFeedRequest() override;
  explicit PROTOBUF_CONSTEXPR UnfollowWebFeedRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnfollowWebFeedRequest(const UnfollowWebFeedRequest& from);
  UnfollowWebFeedRequest(UnfollowWebFeedRequest&& from) noexcept
    : UnfollowWebFeedRequest() {
    *this = ::std::move(from);
  }

  inline UnfollowWebFeedRequest& operator=(const UnfollowWebFeedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfollowWebFeedRequest& operator=(UnfollowWebFeedRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UnfollowWebFeedRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnfollowWebFeedRequest* internal_default_instance() {
    return reinterpret_cast<const UnfollowWebFeedRequest*>(
               &_UnfollowWebFeedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnfollowWebFeedRequest& a, UnfollowWebFeedRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UnfollowWebFeedRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfollowWebFeedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnfollowWebFeedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnfollowWebFeedRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnfollowWebFeedRequest& from);
  void MergeFrom(const UnfollowWebFeedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnfollowWebFeedRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.UnfollowWebFeedRequest";
  }
  protected:
  explicit UnfollowWebFeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kConsistencyTokenFieldNumber = 2,
    kChangeReasonFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .feedwire.ConsistencyToken consistency_token = 2;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // .feedwire.webfeed.WebFeedChangeReason change_reason = 3;
  void clear_change_reason();
  ::feedwire::webfeed::WebFeedChangeReason change_reason() const;
  void set_change_reason(::feedwire::webfeed::WebFeedChangeReason value);
  private:
  ::feedwire::webfeed::WebFeedChangeReason _internal_change_reason() const;
  void _internal_set_change_reason(::feedwire::webfeed::WebFeedChangeReason value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.UnfollowWebFeedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::feedwire::ConsistencyToken* consistency_token_;
  int change_reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class UnfollowWebFeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.UnfollowWebFeedResponse) */ {
 public:
  inline UnfollowWebFeedResponse() : UnfollowWebFeedResponse(nullptr) {}
  ~UnfollowWebFeedResponse() override;
  explicit PROTOBUF_CONSTEXPR UnfollowWebFeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnfollowWebFeedResponse(const UnfollowWebFeedResponse& from);
  UnfollowWebFeedResponse(UnfollowWebFeedResponse&& from) noexcept
    : UnfollowWebFeedResponse() {
    *this = ::std::move(from);
  }

  inline UnfollowWebFeedResponse& operator=(const UnfollowWebFeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnfollowWebFeedResponse& operator=(UnfollowWebFeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const UnfollowWebFeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnfollowWebFeedResponse* internal_default_instance() {
    return reinterpret_cast<const UnfollowWebFeedResponse*>(
               &_UnfollowWebFeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnfollowWebFeedResponse& a, UnfollowWebFeedResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(UnfollowWebFeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnfollowWebFeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnfollowWebFeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnfollowWebFeedResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnfollowWebFeedResponse& from);
  void MergeFrom(const UnfollowWebFeedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnfollowWebFeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.UnfollowWebFeedResponse";
  }
  protected:
  explicit UnfollowWebFeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsistencyTokenFieldNumber = 1,
  };
  // .feedwire.ConsistencyToken consistency_token = 1;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.UnfollowWebFeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::feedwire::ConsistencyToken* consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class ListRecommendedWebFeedsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.ListRecommendedWebFeedsRequest) */ {
 public:
  inline ListRecommendedWebFeedsRequest() : ListRecommendedWebFeedsRequest(nullptr) {}
  ~ListRecommendedWebFeedsRequest() override;
  explicit PROTOBUF_CONSTEXPR ListRecommendedWebFeedsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRecommendedWebFeedsRequest(const ListRecommendedWebFeedsRequest& from);
  ListRecommendedWebFeedsRequest(ListRecommendedWebFeedsRequest&& from) noexcept
    : ListRecommendedWebFeedsRequest() {
    *this = ::std::move(from);
  }

  inline ListRecommendedWebFeedsRequest& operator=(const ListRecommendedWebFeedsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRecommendedWebFeedsRequest& operator=(ListRecommendedWebFeedsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListRecommendedWebFeedsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRecommendedWebFeedsRequest* internal_default_instance() {
    return reinterpret_cast<const ListRecommendedWebFeedsRequest*>(
               &_ListRecommendedWebFeedsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListRecommendedWebFeedsRequest& a, ListRecommendedWebFeedsRequest& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ListRecommendedWebFeedsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRecommendedWebFeedsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRecommendedWebFeedsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRecommendedWebFeedsRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListRecommendedWebFeedsRequest& from);
  void MergeFrom(const ListRecommendedWebFeedsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListRecommendedWebFeedsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.ListRecommendedWebFeedsRequest";
  }
  protected:
  explicit ListRecommendedWebFeedsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsistencyTokenFieldNumber = 1,
  };
  // .feedwire.ConsistencyToken consistency_token = 1;
  bool has_consistency_token() const;
  private:
  bool _internal_has_consistency_token() const;
  public:
  void clear_consistency_token();
  const ::feedwire::ConsistencyToken& consistency_token() const;
  PROTOBUF_NODISCARD ::feedwire::ConsistencyToken* release_consistency_token();
  ::feedwire::ConsistencyToken* mutable_consistency_token();
  void set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token);
  private:
  const ::feedwire::ConsistencyToken& _internal_consistency_token() const;
  ::feedwire::ConsistencyToken* _internal_mutable_consistency_token();
  public:
  void unsafe_arena_set_allocated_consistency_token(
      ::feedwire::ConsistencyToken* consistency_token);
  ::feedwire::ConsistencyToken* unsafe_arena_release_consistency_token();

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.ListRecommendedWebFeedsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::feedwire::ConsistencyToken* consistency_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// -------------------------------------------------------------------

class ListRecommendedWebFeedsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.webfeed.ListRecommendedWebFeedsResponse) */ {
 public:
  inline ListRecommendedWebFeedsResponse() : ListRecommendedWebFeedsResponse(nullptr) {}
  ~ListRecommendedWebFeedsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListRecommendedWebFeedsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRecommendedWebFeedsResponse(const ListRecommendedWebFeedsResponse& from);
  ListRecommendedWebFeedsResponse(ListRecommendedWebFeedsResponse&& from) noexcept
    : ListRecommendedWebFeedsResponse() {
    *this = ::std::move(from);
  }

  inline ListRecommendedWebFeedsResponse& operator=(const ListRecommendedWebFeedsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRecommendedWebFeedsResponse& operator=(ListRecommendedWebFeedsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ListRecommendedWebFeedsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRecommendedWebFeedsResponse* internal_default_instance() {
    return reinterpret_cast<const ListRecommendedWebFeedsResponse*>(
               &_ListRecommendedWebFeedsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListRecommendedWebFeedsResponse& a, ListRecommendedWebFeedsResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ListRecommendedWebFeedsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRecommendedWebFeedsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRecommendedWebFeedsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRecommendedWebFeedsResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListRecommendedWebFeedsResponse& from);
  void MergeFrom(const ListRecommendedWebFeedsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListRecommendedWebFeedsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.webfeed.ListRecommendedWebFeedsResponse";
  }
  protected:
  explicit ListRecommendedWebFeedsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecommendedWebFeedsFieldNumber = 1,
  };
  // repeated .feedwire.webfeed.WebFeed recommended_web_feeds = 1;
  int recommended_web_feeds_size() const;
  private:
  int _internal_recommended_web_feeds_size() const;
  public:
  void clear_recommended_web_feeds();
  ::feedwire::webfeed::WebFeed* mutable_recommended_web_feeds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >*
      mutable_recommended_web_feeds();
  private:
  const ::feedwire::webfeed::WebFeed& _internal_recommended_web_feeds(int index) const;
  ::feedwire::webfeed::WebFeed* _internal_add_recommended_web_feeds();
  public:
  const ::feedwire::webfeed::WebFeed& recommended_web_feeds(int index) const;
  ::feedwire::webfeed::WebFeed* add_recommended_web_feeds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >&
      recommended_web_feeds() const;

  // @@protoc_insertion_point(class_scope:feedwire.webfeed.ListRecommendedWebFeedsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed > recommended_web_feeds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WebFeed

// string name = 1;
inline void WebFeed::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& WebFeed::name() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebFeed::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.name)
}
inline std::string* WebFeed::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.name)
  return _s;
}
inline const std::string& WebFeed::_internal_name() const {
  return name_.Get();
}
inline void WebFeed::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* WebFeed::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* WebFeed::release_name() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.name)
  return name_.Release();
}
inline void WebFeed::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.name)
}

// string title = 2;
inline void WebFeed::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& WebFeed::title() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebFeed::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.title)
}
inline std::string* WebFeed::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.title)
  return _s;
}
inline const std::string& WebFeed::_internal_title() const {
  return title_.Get();
}
inline void WebFeed::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* WebFeed::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* WebFeed::release_title() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.title)
  return title_.Release();
}
inline void WebFeed::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.title)
}

// string subtitle = 3;
inline void WebFeed::clear_subtitle() {
  subtitle_.ClearToEmpty();
}
inline const std::string& WebFeed::subtitle() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.subtitle)
  return _internal_subtitle();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebFeed::set_subtitle(ArgT0&& arg0, ArgT... args) {
 
 subtitle_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.subtitle)
}
inline std::string* WebFeed::mutable_subtitle() {
  std::string* _s = _internal_mutable_subtitle();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.subtitle)
  return _s;
}
inline const std::string& WebFeed::_internal_subtitle() const {
  return subtitle_.Get();
}
inline void WebFeed::_internal_set_subtitle(const std::string& value) {
  
  subtitle_.Set(value, GetArenaForAllocation());
}
inline std::string* WebFeed::_internal_mutable_subtitle() {
  
  return subtitle_.Mutable(GetArenaForAllocation());
}
inline std::string* WebFeed::release_subtitle() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.subtitle)
  return subtitle_.Release();
}
inline void WebFeed::set_allocated_subtitle(std::string* subtitle) {
  if (subtitle != nullptr) {
    
  } else {
    
  }
  subtitle_.SetAllocated(subtitle, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subtitle_.IsDefault()) {
    subtitle_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.subtitle)
}

// string detail_text = 4;
inline void WebFeed::clear_detail_text() {
  detail_text_.ClearToEmpty();
}
inline const std::string& WebFeed::detail_text() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.detail_text)
  return _internal_detail_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebFeed::set_detail_text(ArgT0&& arg0, ArgT... args) {
 
 detail_text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.detail_text)
}
inline std::string* WebFeed::mutable_detail_text() {
  std::string* _s = _internal_mutable_detail_text();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.detail_text)
  return _s;
}
inline const std::string& WebFeed::_internal_detail_text() const {
  return detail_text_.Get();
}
inline void WebFeed::_internal_set_detail_text(const std::string& value) {
  
  detail_text_.Set(value, GetArenaForAllocation());
}
inline std::string* WebFeed::_internal_mutable_detail_text() {
  
  return detail_text_.Mutable(GetArenaForAllocation());
}
inline std::string* WebFeed::release_detail_text() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.detail_text)
  return detail_text_.Release();
}
inline void WebFeed::set_allocated_detail_text(std::string* detail_text) {
  if (detail_text != nullptr) {
    
  } else {
    
  }
  detail_text_.SetAllocated(detail_text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (detail_text_.IsDefault()) {
    detail_text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.detail_text)
}

// string visit_uri = 5;
inline void WebFeed::clear_visit_uri() {
  visit_uri_.ClearToEmpty();
}
inline const std::string& WebFeed::visit_uri() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.visit_uri)
  return _internal_visit_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebFeed::set_visit_uri(ArgT0&& arg0, ArgT... args) {
 
 visit_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.visit_uri)
}
inline std::string* WebFeed::mutable_visit_uri() {
  std::string* _s = _internal_mutable_visit_uri();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.visit_uri)
  return _s;
}
inline const std::string& WebFeed::_internal_visit_uri() const {
  return visit_uri_.Get();
}
inline void WebFeed::_internal_set_visit_uri(const std::string& value) {
  
  visit_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* WebFeed::_internal_mutable_visit_uri() {
  
  return visit_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* WebFeed::release_visit_uri() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.visit_uri)
  return visit_uri_.Release();
}
inline void WebFeed::set_allocated_visit_uri(std::string* visit_uri) {
  if (visit_uri != nullptr) {
    
  } else {
    
  }
  visit_uri_.SetAllocated(visit_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (visit_uri_.IsDefault()) {
    visit_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.visit_uri)
}

// string rss_uri = 6;
inline void WebFeed::clear_rss_uri() {
  rss_uri_.ClearToEmpty();
}
inline const std::string& WebFeed::rss_uri() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.rss_uri)
  return _internal_rss_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WebFeed::set_rss_uri(ArgT0&& arg0, ArgT... args) {
 
 rss_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.rss_uri)
}
inline std::string* WebFeed::mutable_rss_uri() {
  std::string* _s = _internal_mutable_rss_uri();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.rss_uri)
  return _s;
}
inline const std::string& WebFeed::_internal_rss_uri() const {
  return rss_uri_.Get();
}
inline void WebFeed::_internal_set_rss_uri(const std::string& value) {
  
  rss_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* WebFeed::_internal_mutable_rss_uri() {
  
  return rss_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* WebFeed::release_rss_uri() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.rss_uri)
  return rss_uri_.Release();
}
inline void WebFeed::set_allocated_rss_uri(std::string* rss_uri) {
  if (rss_uri != nullptr) {
    
  } else {
    
  }
  rss_uri_.SetAllocated(rss_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rss_uri_.IsDefault()) {
    rss_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.rss_uri)
}

// .feedwire.webfeed.Image favicon = 7;
inline bool WebFeed::_internal_has_favicon() const {
  return this != internal_default_instance() && favicon_ != nullptr;
}
inline bool WebFeed::has_favicon() const {
  return _internal_has_favicon();
}
inline void WebFeed::clear_favicon() {
  if (GetArenaForAllocation() == nullptr && favicon_ != nullptr) {
    delete favicon_;
  }
  favicon_ = nullptr;
}
inline const ::feedwire::webfeed::Image& WebFeed::_internal_favicon() const {
  const ::feedwire::webfeed::Image* p = favicon_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::webfeed::Image&>(
      ::feedwire::webfeed::_Image_default_instance_);
}
inline const ::feedwire::webfeed::Image& WebFeed::favicon() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.favicon)
  return _internal_favicon();
}
inline void WebFeed::unsafe_arena_set_allocated_favicon(
    ::feedwire::webfeed::Image* favicon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(favicon_);
  }
  favicon_ = favicon;
  if (favicon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.WebFeed.favicon)
}
inline ::feedwire::webfeed::Image* WebFeed::release_favicon() {
  
  ::feedwire::webfeed::Image* temp = favicon_;
  favicon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::webfeed::Image* WebFeed::unsafe_arena_release_favicon() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.WebFeed.favicon)
  
  ::feedwire::webfeed::Image* temp = favicon_;
  favicon_ = nullptr;
  return temp;
}
inline ::feedwire::webfeed::Image* WebFeed::_internal_mutable_favicon() {
  
  if (favicon_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::webfeed::Image>(GetArenaForAllocation());
    favicon_ = p;
  }
  return favicon_;
}
inline ::feedwire::webfeed::Image* WebFeed::mutable_favicon() {
  ::feedwire::webfeed::Image* _msg = _internal_mutable_favicon();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.favicon)
  return _msg;
}
inline void WebFeed::set_allocated_favicon(::feedwire::webfeed::Image* favicon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete favicon_;
  }
  if (favicon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(favicon);
    if (message_arena != submessage_arena) {
      favicon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, favicon, submessage_arena);
    }
    
  } else {
    
  }
  favicon_ = favicon;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.WebFeed.favicon)
}

// int64 follower_count = 8;
inline void WebFeed::clear_follower_count() {
  follower_count_ = int64_t{0};
}
inline int64_t WebFeed::_internal_follower_count() const {
  return follower_count_;
}
inline int64_t WebFeed::follower_count() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.follower_count)
  return _internal_follower_count();
}
inline void WebFeed::_internal_set_follower_count(int64_t value) {
  
  follower_count_ = value;
}
inline void WebFeed::set_follower_count(int64_t value) {
  _internal_set_follower_count(value);
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.follower_count)
}

// .feedwire.webfeed.WebFeed.State state = 9;
inline void WebFeed::clear_state() {
  state_ = 0;
}
inline ::feedwire::webfeed::WebFeed_State WebFeed::_internal_state() const {
  return static_cast< ::feedwire::webfeed::WebFeed_State >(state_);
}
inline ::feedwire::webfeed::WebFeed_State WebFeed::state() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.state)
  return _internal_state();
}
inline void WebFeed::_internal_set_state(::feedwire::webfeed::WebFeed_State value) {
  
  state_ = value;
}
inline void WebFeed::set_state(::feedwire::webfeed::WebFeed_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:feedwire.webfeed.WebFeed.state)
}

// repeated .feedwire.webfeed.WebFeedMatcher web_feed_matchers = 10;
inline int WebFeed::_internal_web_feed_matchers_size() const {
  return web_feed_matchers_.size();
}
inline int WebFeed::web_feed_matchers_size() const {
  return _internal_web_feed_matchers_size();
}
inline ::feedwire::webfeed::WebFeedMatcher* WebFeed::mutable_web_feed_matchers(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.WebFeed.web_feed_matchers)
  return web_feed_matchers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeedMatcher >*
WebFeed::mutable_web_feed_matchers() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.webfeed.WebFeed.web_feed_matchers)
  return &web_feed_matchers_;
}
inline const ::feedwire::webfeed::WebFeedMatcher& WebFeed::_internal_web_feed_matchers(int index) const {
  return web_feed_matchers_.Get(index);
}
inline const ::feedwire::webfeed::WebFeedMatcher& WebFeed::web_feed_matchers(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.WebFeed.web_feed_matchers)
  return _internal_web_feed_matchers(index);
}
inline ::feedwire::webfeed::WebFeedMatcher* WebFeed::_internal_add_web_feed_matchers() {
  return web_feed_matchers_.Add();
}
inline ::feedwire::webfeed::WebFeedMatcher* WebFeed::add_web_feed_matchers() {
  ::feedwire::webfeed::WebFeedMatcher* _add = _internal_add_web_feed_matchers();
  // @@protoc_insertion_point(field_add:feedwire.webfeed.WebFeed.web_feed_matchers)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeedMatcher >&
WebFeed::web_feed_matchers() const {
  // @@protoc_insertion_point(field_list:feedwire.webfeed.WebFeed.web_feed_matchers)
  return web_feed_matchers_;
}

// -------------------------------------------------------------------

// Image

// string uri = 1;
inline void Image::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Image::uri() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.Image.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_uri(ArgT0&& arg0, ArgT... args) {
 
 uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.Image.uri)
}
inline std::string* Image::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.Image.uri)
  return _s;
}
inline const std::string& Image::_internal_uri() const {
  return uri_.Get();
}
inline void Image::_internal_set_uri(const std::string& value) {
  
  uri_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_uri() {
  
  return uri_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_uri() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.Image.uri)
  return uri_.Release();
}
inline void Image::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (uri_.IsDefault()) {
    uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.Image.uri)
}

// -------------------------------------------------------------------

// ListWebFeedsRequest

// .feedwire.ConsistencyToken consistency_token = 1;
inline bool ListWebFeedsRequest::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool ListWebFeedsRequest::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& ListWebFeedsRequest::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& ListWebFeedsRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.ListWebFeedsRequest.consistency_token)
  return _internal_consistency_token();
}
inline void ListWebFeedsRequest::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.ListWebFeedsRequest.consistency_token)
}
inline ::feedwire::ConsistencyToken* ListWebFeedsRequest::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* ListWebFeedsRequest::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.ListWebFeedsRequest.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* ListWebFeedsRequest::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* ListWebFeedsRequest::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.ListWebFeedsRequest.consistency_token)
  return _msg;
}
inline void ListWebFeedsRequest::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.ListWebFeedsRequest.consistency_token)
}

// -------------------------------------------------------------------

// ListWebFeedsResponse

// repeated .feedwire.webfeed.WebFeed web_feeds = 1;
inline int ListWebFeedsResponse::_internal_web_feeds_size() const {
  return web_feeds_.size();
}
inline int ListWebFeedsResponse::web_feeds_size() const {
  return _internal_web_feeds_size();
}
inline void ListWebFeedsResponse::clear_web_feeds() {
  web_feeds_.Clear();
}
inline ::feedwire::webfeed::WebFeed* ListWebFeedsResponse::mutable_web_feeds(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.ListWebFeedsResponse.web_feeds)
  return web_feeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >*
ListWebFeedsResponse::mutable_web_feeds() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.webfeed.ListWebFeedsResponse.web_feeds)
  return &web_feeds_;
}
inline const ::feedwire::webfeed::WebFeed& ListWebFeedsResponse::_internal_web_feeds(int index) const {
  return web_feeds_.Get(index);
}
inline const ::feedwire::webfeed::WebFeed& ListWebFeedsResponse::web_feeds(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.ListWebFeedsResponse.web_feeds)
  return _internal_web_feeds(index);
}
inline ::feedwire::webfeed::WebFeed* ListWebFeedsResponse::_internal_add_web_feeds() {
  return web_feeds_.Add();
}
inline ::feedwire::webfeed::WebFeed* ListWebFeedsResponse::add_web_feeds() {
  ::feedwire::webfeed::WebFeed* _add = _internal_add_web_feeds();
  // @@protoc_insertion_point(field_add:feedwire.webfeed.ListWebFeedsResponse.web_feeds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >&
ListWebFeedsResponse::web_feeds() const {
  // @@protoc_insertion_point(field_list:feedwire.webfeed.ListWebFeedsResponse.web_feeds)
  return web_feeds_;
}

// -------------------------------------------------------------------

// FollowWebFeedRequest

// string name = 1;
inline bool FollowWebFeedRequest::_internal_has_name() const {
  return identifier_case() == kName;
}
inline bool FollowWebFeedRequest::has_name() const {
  return _internal_has_name();
}
inline void FollowWebFeedRequest::set_has_name() {
  _oneof_case_[0] = kName;
}
inline void FollowWebFeedRequest::clear_name() {
  if (_internal_has_name()) {
    identifier_.name_.Destroy();
    clear_has_identifier();
  }
}
inline const std::string& FollowWebFeedRequest::name() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline void FollowWebFeedRequest::set_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.InitDefault();
  }
  identifier_.name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.FollowWebFeedRequest.name)
}
inline std::string* FollowWebFeedRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedRequest.name)
  return _s;
}
inline const std::string& FollowWebFeedRequest::_internal_name() const {
  if (_internal_has_name()) {
    return identifier_.name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FollowWebFeedRequest::_internal_set_name(const std::string& value) {
  if (!_internal_has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.InitDefault();
  }
  identifier_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowWebFeedRequest::_internal_mutable_name() {
  if (!_internal_has_name()) {
    clear_identifier();
    set_has_name();
    identifier_.name_.InitDefault();
  }
  return identifier_.name_.Mutable(      GetArenaForAllocation());
}
inline std::string* FollowWebFeedRequest::release_name() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.FollowWebFeedRequest.name)
  if (_internal_has_name()) {
    clear_has_identifier();
    return identifier_.name_.Release();
  } else {
    return nullptr;
  }
}
inline void FollowWebFeedRequest::set_allocated_name(std::string* name) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (name != nullptr) {
    set_has_name();
    identifier_.name_.InitAllocated(name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.FollowWebFeedRequest.name)
}

// string web_page_uri = 2;
inline bool FollowWebFeedRequest::_internal_has_web_page_uri() const {
  return identifier_case() == kWebPageUri;
}
inline bool FollowWebFeedRequest::has_web_page_uri() const {
  return _internal_has_web_page_uri();
}
inline void FollowWebFeedRequest::set_has_web_page_uri() {
  _oneof_case_[0] = kWebPageUri;
}
inline void FollowWebFeedRequest::clear_web_page_uri() {
  if (_internal_has_web_page_uri()) {
    identifier_.web_page_uri_.Destroy();
    clear_has_identifier();
  }
}
inline const std::string& FollowWebFeedRequest::web_page_uri() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedRequest.web_page_uri)
  return _internal_web_page_uri();
}
template <typename ArgT0, typename... ArgT>
inline void FollowWebFeedRequest::set_web_page_uri(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_web_page_uri()) {
    clear_identifier();
    set_has_web_page_uri();
    identifier_.web_page_uri_.InitDefault();
  }
  identifier_.web_page_uri_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.FollowWebFeedRequest.web_page_uri)
}
inline std::string* FollowWebFeedRequest::mutable_web_page_uri() {
  std::string* _s = _internal_mutable_web_page_uri();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedRequest.web_page_uri)
  return _s;
}
inline const std::string& FollowWebFeedRequest::_internal_web_page_uri() const {
  if (_internal_has_web_page_uri()) {
    return identifier_.web_page_uri_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FollowWebFeedRequest::_internal_set_web_page_uri(const std::string& value) {
  if (!_internal_has_web_page_uri()) {
    clear_identifier();
    set_has_web_page_uri();
    identifier_.web_page_uri_.InitDefault();
  }
  identifier_.web_page_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowWebFeedRequest::_internal_mutable_web_page_uri() {
  if (!_internal_has_web_page_uri()) {
    clear_identifier();
    set_has_web_page_uri();
    identifier_.web_page_uri_.InitDefault();
  }
  return identifier_.web_page_uri_.Mutable(      GetArenaForAllocation());
}
inline std::string* FollowWebFeedRequest::release_web_page_uri() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.FollowWebFeedRequest.web_page_uri)
  if (_internal_has_web_page_uri()) {
    clear_has_identifier();
    return identifier_.web_page_uri_.Release();
  } else {
    return nullptr;
  }
}
inline void FollowWebFeedRequest::set_allocated_web_page_uri(std::string* web_page_uri) {
  if (has_identifier()) {
    clear_identifier();
  }
  if (web_page_uri != nullptr) {
    set_has_web_page_uri();
    identifier_.web_page_uri_.InitAllocated(web_page_uri, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.FollowWebFeedRequest.web_page_uri)
}

// string canonical_uri = 5;
inline void FollowWebFeedRequest::clear_canonical_uri() {
  canonical_uri_.ClearToEmpty();
}
inline const std::string& FollowWebFeedRequest::canonical_uri() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedRequest.canonical_uri)
  return _internal_canonical_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FollowWebFeedRequest::set_canonical_uri(ArgT0&& arg0, ArgT... args) {
 
 canonical_uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.FollowWebFeedRequest.canonical_uri)
}
inline std::string* FollowWebFeedRequest::mutable_canonical_uri() {
  std::string* _s = _internal_mutable_canonical_uri();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedRequest.canonical_uri)
  return _s;
}
inline const std::string& FollowWebFeedRequest::_internal_canonical_uri() const {
  return canonical_uri_.Get();
}
inline void FollowWebFeedRequest::_internal_set_canonical_uri(const std::string& value) {
  
  canonical_uri_.Set(value, GetArenaForAllocation());
}
inline std::string* FollowWebFeedRequest::_internal_mutable_canonical_uri() {
  
  return canonical_uri_.Mutable(GetArenaForAllocation());
}
inline std::string* FollowWebFeedRequest::release_canonical_uri() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.FollowWebFeedRequest.canonical_uri)
  return canonical_uri_.Release();
}
inline void FollowWebFeedRequest::set_allocated_canonical_uri(std::string* canonical_uri) {
  if (canonical_uri != nullptr) {
    
  } else {
    
  }
  canonical_uri_.SetAllocated(canonical_uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (canonical_uri_.IsDefault()) {
    canonical_uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.FollowWebFeedRequest.canonical_uri)
}

// repeated string page_rss_uris = 3;
inline int FollowWebFeedRequest::_internal_page_rss_uris_size() const {
  return page_rss_uris_.size();
}
inline int FollowWebFeedRequest::page_rss_uris_size() const {
  return _internal_page_rss_uris_size();
}
inline void FollowWebFeedRequest::clear_page_rss_uris() {
  page_rss_uris_.Clear();
}
inline std::string* FollowWebFeedRequest::add_page_rss_uris() {
  std::string* _s = _internal_add_page_rss_uris();
  // @@protoc_insertion_point(field_add_mutable:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
  return _s;
}
inline const std::string& FollowWebFeedRequest::_internal_page_rss_uris(int index) const {
  return page_rss_uris_.Get(index);
}
inline const std::string& FollowWebFeedRequest::page_rss_uris(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
  return _internal_page_rss_uris(index);
}
inline std::string* FollowWebFeedRequest::mutable_page_rss_uris(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
  return page_rss_uris_.Mutable(index);
}
inline void FollowWebFeedRequest::set_page_rss_uris(int index, const std::string& value) {
  page_rss_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline void FollowWebFeedRequest::set_page_rss_uris(int index, std::string&& value) {
  page_rss_uris_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline void FollowWebFeedRequest::set_page_rss_uris(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  page_rss_uris_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline void FollowWebFeedRequest::set_page_rss_uris(int index, const char* value, size_t size) {
  page_rss_uris_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline std::string* FollowWebFeedRequest::_internal_add_page_rss_uris() {
  return page_rss_uris_.Add();
}
inline void FollowWebFeedRequest::add_page_rss_uris(const std::string& value) {
  page_rss_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline void FollowWebFeedRequest::add_page_rss_uris(std::string&& value) {
  page_rss_uris_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline void FollowWebFeedRequest::add_page_rss_uris(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  page_rss_uris_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline void FollowWebFeedRequest::add_page_rss_uris(const char* value, size_t size) {
  page_rss_uris_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FollowWebFeedRequest::page_rss_uris() const {
  // @@protoc_insertion_point(field_list:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
  return page_rss_uris_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FollowWebFeedRequest::mutable_page_rss_uris() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.webfeed.FollowWebFeedRequest.page_rss_uris)
  return &page_rss_uris_;
}

// .feedwire.ConsistencyToken consistency_token = 4;
inline bool FollowWebFeedRequest::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool FollowWebFeedRequest::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& FollowWebFeedRequest::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& FollowWebFeedRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedRequest.consistency_token)
  return _internal_consistency_token();
}
inline void FollowWebFeedRequest::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.FollowWebFeedRequest.consistency_token)
}
inline ::feedwire::ConsistencyToken* FollowWebFeedRequest::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* FollowWebFeedRequest::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.FollowWebFeedRequest.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* FollowWebFeedRequest::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* FollowWebFeedRequest::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedRequest.consistency_token)
  return _msg;
}
inline void FollowWebFeedRequest::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.FollowWebFeedRequest.consistency_token)
}

// .feedwire.webfeed.WebFeedChangeReason change_reason = 6;
inline void FollowWebFeedRequest::clear_change_reason() {
  change_reason_ = 0;
}
inline ::feedwire::webfeed::WebFeedChangeReason FollowWebFeedRequest::_internal_change_reason() const {
  return static_cast< ::feedwire::webfeed::WebFeedChangeReason >(change_reason_);
}
inline ::feedwire::webfeed::WebFeedChangeReason FollowWebFeedRequest::change_reason() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedRequest.change_reason)
  return _internal_change_reason();
}
inline void FollowWebFeedRequest::_internal_set_change_reason(::feedwire::webfeed::WebFeedChangeReason value) {
  
  change_reason_ = value;
}
inline void FollowWebFeedRequest::set_change_reason(::feedwire::webfeed::WebFeedChangeReason value) {
  _internal_set_change_reason(value);
  // @@protoc_insertion_point(field_set:feedwire.webfeed.FollowWebFeedRequest.change_reason)
}

inline bool FollowWebFeedRequest::has_identifier() const {
  return identifier_case() != IDENTIFIER_NOT_SET;
}
inline void FollowWebFeedRequest::clear_has_identifier() {
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}
inline FollowWebFeedRequest::IdentifierCase FollowWebFeedRequest::identifier_case() const {
  return FollowWebFeedRequest::IdentifierCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FollowWebFeedResponse

// .feedwire.webfeed.WebFeed web_feed = 1;
inline bool FollowWebFeedResponse::_internal_has_web_feed() const {
  return this != internal_default_instance() && web_feed_ != nullptr;
}
inline bool FollowWebFeedResponse::has_web_feed() const {
  return _internal_has_web_feed();
}
inline void FollowWebFeedResponse::clear_web_feed() {
  if (GetArenaForAllocation() == nullptr && web_feed_ != nullptr) {
    delete web_feed_;
  }
  web_feed_ = nullptr;
}
inline const ::feedwire::webfeed::WebFeed& FollowWebFeedResponse::_internal_web_feed() const {
  const ::feedwire::webfeed::WebFeed* p = web_feed_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::webfeed::WebFeed&>(
      ::feedwire::webfeed::_WebFeed_default_instance_);
}
inline const ::feedwire::webfeed::WebFeed& FollowWebFeedResponse::web_feed() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedResponse.web_feed)
  return _internal_web_feed();
}
inline void FollowWebFeedResponse::unsafe_arena_set_allocated_web_feed(
    ::feedwire::webfeed::WebFeed* web_feed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(web_feed_);
  }
  web_feed_ = web_feed;
  if (web_feed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.FollowWebFeedResponse.web_feed)
}
inline ::feedwire::webfeed::WebFeed* FollowWebFeedResponse::release_web_feed() {
  
  ::feedwire::webfeed::WebFeed* temp = web_feed_;
  web_feed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::webfeed::WebFeed* FollowWebFeedResponse::unsafe_arena_release_web_feed() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.FollowWebFeedResponse.web_feed)
  
  ::feedwire::webfeed::WebFeed* temp = web_feed_;
  web_feed_ = nullptr;
  return temp;
}
inline ::feedwire::webfeed::WebFeed* FollowWebFeedResponse::_internal_mutable_web_feed() {
  
  if (web_feed_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::webfeed::WebFeed>(GetArenaForAllocation());
    web_feed_ = p;
  }
  return web_feed_;
}
inline ::feedwire::webfeed::WebFeed* FollowWebFeedResponse::mutable_web_feed() {
  ::feedwire::webfeed::WebFeed* _msg = _internal_mutable_web_feed();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedResponse.web_feed)
  return _msg;
}
inline void FollowWebFeedResponse::set_allocated_web_feed(::feedwire::webfeed::WebFeed* web_feed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete web_feed_;
  }
  if (web_feed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(web_feed);
    if (message_arena != submessage_arena) {
      web_feed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, web_feed, submessage_arena);
    }
    
  } else {
    
  }
  web_feed_ = web_feed;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.FollowWebFeedResponse.web_feed)
}

// .feedwire.ConsistencyToken consistency_token = 2;
inline bool FollowWebFeedResponse::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool FollowWebFeedResponse::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& FollowWebFeedResponse::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& FollowWebFeedResponse::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.FollowWebFeedResponse.consistency_token)
  return _internal_consistency_token();
}
inline void FollowWebFeedResponse::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.FollowWebFeedResponse.consistency_token)
}
inline ::feedwire::ConsistencyToken* FollowWebFeedResponse::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* FollowWebFeedResponse::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.FollowWebFeedResponse.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* FollowWebFeedResponse::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* FollowWebFeedResponse::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.FollowWebFeedResponse.consistency_token)
  return _msg;
}
inline void FollowWebFeedResponse::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.FollowWebFeedResponse.consistency_token)
}

// -------------------------------------------------------------------

// UnfollowWebFeedRequest

// string name = 1;
inline void UnfollowWebFeedRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UnfollowWebFeedRequest::name() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.UnfollowWebFeedRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnfollowWebFeedRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.webfeed.UnfollowWebFeedRequest.name)
}
inline std::string* UnfollowWebFeedRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.UnfollowWebFeedRequest.name)
  return _s;
}
inline const std::string& UnfollowWebFeedRequest::_internal_name() const {
  return name_.Get();
}
inline void UnfollowWebFeedRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* UnfollowWebFeedRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* UnfollowWebFeedRequest::release_name() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.UnfollowWebFeedRequest.name)
  return name_.Release();
}
inline void UnfollowWebFeedRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.UnfollowWebFeedRequest.name)
}

// .feedwire.ConsistencyToken consistency_token = 2;
inline bool UnfollowWebFeedRequest::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool UnfollowWebFeedRequest::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& UnfollowWebFeedRequest::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& UnfollowWebFeedRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.UnfollowWebFeedRequest.consistency_token)
  return _internal_consistency_token();
}
inline void UnfollowWebFeedRequest::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.UnfollowWebFeedRequest.consistency_token)
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedRequest::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedRequest::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.UnfollowWebFeedRequest.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedRequest::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedRequest::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.UnfollowWebFeedRequest.consistency_token)
  return _msg;
}
inline void UnfollowWebFeedRequest::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.UnfollowWebFeedRequest.consistency_token)
}

// .feedwire.webfeed.WebFeedChangeReason change_reason = 3;
inline void UnfollowWebFeedRequest::clear_change_reason() {
  change_reason_ = 0;
}
inline ::feedwire::webfeed::WebFeedChangeReason UnfollowWebFeedRequest::_internal_change_reason() const {
  return static_cast< ::feedwire::webfeed::WebFeedChangeReason >(change_reason_);
}
inline ::feedwire::webfeed::WebFeedChangeReason UnfollowWebFeedRequest::change_reason() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.UnfollowWebFeedRequest.change_reason)
  return _internal_change_reason();
}
inline void UnfollowWebFeedRequest::_internal_set_change_reason(::feedwire::webfeed::WebFeedChangeReason value) {
  
  change_reason_ = value;
}
inline void UnfollowWebFeedRequest::set_change_reason(::feedwire::webfeed::WebFeedChangeReason value) {
  _internal_set_change_reason(value);
  // @@protoc_insertion_point(field_set:feedwire.webfeed.UnfollowWebFeedRequest.change_reason)
}

// -------------------------------------------------------------------

// UnfollowWebFeedResponse

// .feedwire.ConsistencyToken consistency_token = 1;
inline bool UnfollowWebFeedResponse::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool UnfollowWebFeedResponse::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& UnfollowWebFeedResponse::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& UnfollowWebFeedResponse::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.UnfollowWebFeedResponse.consistency_token)
  return _internal_consistency_token();
}
inline void UnfollowWebFeedResponse::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.UnfollowWebFeedResponse.consistency_token)
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedResponse::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedResponse::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.UnfollowWebFeedResponse.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedResponse::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* UnfollowWebFeedResponse::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.UnfollowWebFeedResponse.consistency_token)
  return _msg;
}
inline void UnfollowWebFeedResponse::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.UnfollowWebFeedResponse.consistency_token)
}

// -------------------------------------------------------------------

// ListRecommendedWebFeedsRequest

// .feedwire.ConsistencyToken consistency_token = 1;
inline bool ListRecommendedWebFeedsRequest::_internal_has_consistency_token() const {
  return this != internal_default_instance() && consistency_token_ != nullptr;
}
inline bool ListRecommendedWebFeedsRequest::has_consistency_token() const {
  return _internal_has_consistency_token();
}
inline const ::feedwire::ConsistencyToken& ListRecommendedWebFeedsRequest::_internal_consistency_token() const {
  const ::feedwire::ConsistencyToken* p = consistency_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ConsistencyToken&>(
      ::feedwire::_ConsistencyToken_default_instance_);
}
inline const ::feedwire::ConsistencyToken& ListRecommendedWebFeedsRequest::consistency_token() const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.ListRecommendedWebFeedsRequest.consistency_token)
  return _internal_consistency_token();
}
inline void ListRecommendedWebFeedsRequest::unsafe_arena_set_allocated_consistency_token(
    ::feedwire::ConsistencyToken* consistency_token) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  consistency_token_ = consistency_token;
  if (consistency_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.webfeed.ListRecommendedWebFeedsRequest.consistency_token)
}
inline ::feedwire::ConsistencyToken* ListRecommendedWebFeedsRequest::release_consistency_token() {
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ConsistencyToken* ListRecommendedWebFeedsRequest::unsafe_arena_release_consistency_token() {
  // @@protoc_insertion_point(field_release:feedwire.webfeed.ListRecommendedWebFeedsRequest.consistency_token)
  
  ::feedwire::ConsistencyToken* temp = consistency_token_;
  consistency_token_ = nullptr;
  return temp;
}
inline ::feedwire::ConsistencyToken* ListRecommendedWebFeedsRequest::_internal_mutable_consistency_token() {
  
  if (consistency_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ConsistencyToken>(GetArenaForAllocation());
    consistency_token_ = p;
  }
  return consistency_token_;
}
inline ::feedwire::ConsistencyToken* ListRecommendedWebFeedsRequest::mutable_consistency_token() {
  ::feedwire::ConsistencyToken* _msg = _internal_mutable_consistency_token();
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.ListRecommendedWebFeedsRequest.consistency_token)
  return _msg;
}
inline void ListRecommendedWebFeedsRequest::set_allocated_consistency_token(::feedwire::ConsistencyToken* consistency_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token_);
  }
  if (consistency_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consistency_token));
    if (message_arena != submessage_arena) {
      consistency_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consistency_token, submessage_arena);
    }
    
  } else {
    
  }
  consistency_token_ = consistency_token;
  // @@protoc_insertion_point(field_set_allocated:feedwire.webfeed.ListRecommendedWebFeedsRequest.consistency_token)
}

// -------------------------------------------------------------------

// ListRecommendedWebFeedsResponse

// repeated .feedwire.webfeed.WebFeed recommended_web_feeds = 1;
inline int ListRecommendedWebFeedsResponse::_internal_recommended_web_feeds_size() const {
  return recommended_web_feeds_.size();
}
inline int ListRecommendedWebFeedsResponse::recommended_web_feeds_size() const {
  return _internal_recommended_web_feeds_size();
}
inline void ListRecommendedWebFeedsResponse::clear_recommended_web_feeds() {
  recommended_web_feeds_.Clear();
}
inline ::feedwire::webfeed::WebFeed* ListRecommendedWebFeedsResponse::mutable_recommended_web_feeds(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.webfeed.ListRecommendedWebFeedsResponse.recommended_web_feeds)
  return recommended_web_feeds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >*
ListRecommendedWebFeedsResponse::mutable_recommended_web_feeds() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.webfeed.ListRecommendedWebFeedsResponse.recommended_web_feeds)
  return &recommended_web_feeds_;
}
inline const ::feedwire::webfeed::WebFeed& ListRecommendedWebFeedsResponse::_internal_recommended_web_feeds(int index) const {
  return recommended_web_feeds_.Get(index);
}
inline const ::feedwire::webfeed::WebFeed& ListRecommendedWebFeedsResponse::recommended_web_feeds(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.webfeed.ListRecommendedWebFeedsResponse.recommended_web_feeds)
  return _internal_recommended_web_feeds(index);
}
inline ::feedwire::webfeed::WebFeed* ListRecommendedWebFeedsResponse::_internal_add_recommended_web_feeds() {
  return recommended_web_feeds_.Add();
}
inline ::feedwire::webfeed::WebFeed* ListRecommendedWebFeedsResponse::add_recommended_web_feeds() {
  ::feedwire::webfeed::WebFeed* _add = _internal_add_recommended_web_feeds();
  // @@protoc_insertion_point(field_add:feedwire.webfeed.ListRecommendedWebFeedsResponse.recommended_web_feeds)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::webfeed::WebFeed >&
ListRecommendedWebFeedsResponse::recommended_web_feeds() const {
  // @@protoc_insertion_point(field_list:feedwire.webfeed.ListRecommendedWebFeedsResponse.recommended_web_feeds)
  return recommended_web_feeds_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace webfeed
}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::webfeed::WebFeed_State> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::webfeed::WebFeedChangeReason> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fweb_5ffeeds_2eproto
