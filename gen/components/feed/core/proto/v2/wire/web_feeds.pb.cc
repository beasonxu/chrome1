// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/web_feeds.proto

#include "components/feed/core/proto/v2/wire/web_feeds.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
namespace webfeed {
PROTOBUF_CONSTEXPR WebFeed::WebFeed(
    ::_pbi::ConstantInitialized)
  : web_feed_matchers_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , subtitle_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , detail_text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , visit_uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rss_uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , favicon_(nullptr)
  , follower_count_(int64_t{0})
  , state_(0)
{}
struct WebFeedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebFeedDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebFeedDefaultTypeInternal() {}
  union {
    WebFeed _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebFeedDefaultTypeInternal _WebFeed_default_instance_;
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized)
  : uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR ListWebFeedsRequest::ListWebFeedsRequest(
    ::_pbi::ConstantInitialized)
  : consistency_token_(nullptr){}
struct ListWebFeedsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListWebFeedsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListWebFeedsRequestDefaultTypeInternal() {}
  union {
    ListWebFeedsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListWebFeedsRequestDefaultTypeInternal _ListWebFeedsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListWebFeedsResponse::ListWebFeedsResponse(
    ::_pbi::ConstantInitialized)
  : web_feeds_(){}
struct ListWebFeedsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListWebFeedsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListWebFeedsResponseDefaultTypeInternal() {}
  union {
    ListWebFeedsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListWebFeedsResponseDefaultTypeInternal _ListWebFeedsResponse_default_instance_;
PROTOBUF_CONSTEXPR FollowWebFeedRequest::FollowWebFeedRequest(
    ::_pbi::ConstantInitialized)
  : page_rss_uris_()
  , canonical_uri_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , consistency_token_(nullptr)
  , change_reason_(0)

  , _oneof_case_{}{}
struct FollowWebFeedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowWebFeedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowWebFeedRequestDefaultTypeInternal() {}
  union {
    FollowWebFeedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowWebFeedRequestDefaultTypeInternal _FollowWebFeedRequest_default_instance_;
PROTOBUF_CONSTEXPR FollowWebFeedResponse::FollowWebFeedResponse(
    ::_pbi::ConstantInitialized)
  : web_feed_(nullptr)
  , consistency_token_(nullptr){}
struct FollowWebFeedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FollowWebFeedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FollowWebFeedResponseDefaultTypeInternal() {}
  union {
    FollowWebFeedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FollowWebFeedResponseDefaultTypeInternal _FollowWebFeedResponse_default_instance_;
PROTOBUF_CONSTEXPR UnfollowWebFeedRequest::UnfollowWebFeedRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , consistency_token_(nullptr)
  , change_reason_(0)
{}
struct UnfollowWebFeedRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnfollowWebFeedRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnfollowWebFeedRequestDefaultTypeInternal() {}
  union {
    UnfollowWebFeedRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnfollowWebFeedRequestDefaultTypeInternal _UnfollowWebFeedRequest_default_instance_;
PROTOBUF_CONSTEXPR UnfollowWebFeedResponse::UnfollowWebFeedResponse(
    ::_pbi::ConstantInitialized)
  : consistency_token_(nullptr){}
struct UnfollowWebFeedResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnfollowWebFeedResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnfollowWebFeedResponseDefaultTypeInternal() {}
  union {
    UnfollowWebFeedResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnfollowWebFeedResponseDefaultTypeInternal _UnfollowWebFeedResponse_default_instance_;
PROTOBUF_CONSTEXPR ListRecommendedWebFeedsRequest::ListRecommendedWebFeedsRequest(
    ::_pbi::ConstantInitialized)
  : consistency_token_(nullptr){}
struct ListRecommendedWebFeedsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRecommendedWebFeedsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRecommendedWebFeedsRequestDefaultTypeInternal() {}
  union {
    ListRecommendedWebFeedsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRecommendedWebFeedsRequestDefaultTypeInternal _ListRecommendedWebFeedsRequest_default_instance_;
PROTOBUF_CONSTEXPR ListRecommendedWebFeedsResponse::ListRecommendedWebFeedsResponse(
    ::_pbi::ConstantInitialized)
  : recommended_web_feeds_(){}
struct ListRecommendedWebFeedsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListRecommendedWebFeedsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListRecommendedWebFeedsResponseDefaultTypeInternal() {}
  union {
    ListRecommendedWebFeedsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListRecommendedWebFeedsResponseDefaultTypeInternal _ListRecommendedWebFeedsResponse_default_instance_;
}  // namespace webfeed
}  // namespace feedwire
namespace feedwire {
namespace webfeed {
bool WebFeed_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebFeed_State_strings[4] = {};

static const char WebFeed_State_names[] =
  "ACTIVE"
  "INACTIVE"
  "STATE_UNSPECIFIED"
  "WAITING_FOR_CONTENT";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebFeed_State_entries[] = {
  { {WebFeed_State_names + 0, 6}, 2 },
  { {WebFeed_State_names + 6, 8}, 1 },
  { {WebFeed_State_names + 14, 17}, 0 },
  { {WebFeed_State_names + 31, 19}, 4 },
};

static const int WebFeed_State_entries_by_number[] = {
  2, // 0 -> STATE_UNSPECIFIED
  1, // 1 -> INACTIVE
  0, // 2 -> ACTIVE
  3, // 4 -> WAITING_FOR_CONTENT
};

const std::string& WebFeed_State_Name(
    WebFeed_State value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebFeed_State_entries,
          WebFeed_State_entries_by_number,
          4, WebFeed_State_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebFeed_State_entries,
      WebFeed_State_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebFeed_State_strings[idx].get();
}
bool WebFeed_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeed_State* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebFeed_State_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<WebFeed_State>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr WebFeed_State WebFeed::STATE_UNSPECIFIED;
constexpr WebFeed_State WebFeed::INACTIVE;
constexpr WebFeed_State WebFeed::ACTIVE;
constexpr WebFeed_State WebFeed::WAITING_FOR_CONTENT;
constexpr WebFeed_State WebFeed::State_MIN;
constexpr WebFeed_State WebFeed::State_MAX;
constexpr int WebFeed::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool WebFeedChangeReason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> WebFeedChangeReason_strings[6] = {};

static const char WebFeedChangeReason_names[] =
  "BACK_OF_CARD_UNFOLLOW"
  "IN_FEED_RECOMMENDATION"
  "MANAGEMENT"
  "WEB_FEED_CHANGE_REASON_UNSPECIFIED"
  "WEB_PAGE_ACCELERATOR"
  "WEB_PAGE_MENU";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry WebFeedChangeReason_entries[] = {
  { {WebFeedChangeReason_names + 0, 21}, 5 },
  { {WebFeedChangeReason_names + 21, 22}, 4 },
  { {WebFeedChangeReason_names + 43, 10}, 3 },
  { {WebFeedChangeReason_names + 53, 34}, 0 },
  { {WebFeedChangeReason_names + 87, 20}, 2 },
  { {WebFeedChangeReason_names + 107, 13}, 1 },
};

static const int WebFeedChangeReason_entries_by_number[] = {
  3, // 0 -> WEB_FEED_CHANGE_REASON_UNSPECIFIED
  5, // 1 -> WEB_PAGE_MENU
  4, // 2 -> WEB_PAGE_ACCELERATOR
  2, // 3 -> MANAGEMENT
  1, // 4 -> IN_FEED_RECOMMENDATION
  0, // 5 -> BACK_OF_CARD_UNFOLLOW
};

const std::string& WebFeedChangeReason_Name(
    WebFeedChangeReason value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          WebFeedChangeReason_entries,
          WebFeedChangeReason_entries_by_number,
          6, WebFeedChangeReason_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      WebFeedChangeReason_entries,
      WebFeedChangeReason_entries_by_number,
      6, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     WebFeedChangeReason_strings[idx].get();
}
bool WebFeedChangeReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, WebFeedChangeReason* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      WebFeedChangeReason_entries, 6, name, &int_value);
  if (success) {
    *value = static_cast<WebFeedChangeReason>(int_value);
  }
  return success;
}

// ===================================================================

class WebFeed::_Internal {
 public:
  static const ::feedwire::webfeed::Image& favicon(const WebFeed* msg);
};

const ::feedwire::webfeed::Image&
WebFeed::_Internal::favicon(const WebFeed* msg) {
  return *msg->favicon_;
}
void WebFeed::clear_web_feed_matchers() {
  web_feed_matchers_.Clear();
}
WebFeed::WebFeed(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  web_feed_matchers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.WebFeed)
}
WebFeed::WebFeed(const WebFeed& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      web_feed_matchers_(from.web_feed_matchers_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  subtitle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subtitle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtitle().empty()) {
    subtitle_.Set(from._internal_subtitle(), 
      GetArenaForAllocation());
  }
  detail_text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    detail_text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_detail_text().empty()) {
    detail_text_.Set(from._internal_detail_text(), 
      GetArenaForAllocation());
  }
  visit_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    visit_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_visit_uri().empty()) {
    visit_uri_.Set(from._internal_visit_uri(), 
      GetArenaForAllocation());
  }
  rss_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rss_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rss_uri().empty()) {
    rss_uri_.Set(from._internal_rss_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_favicon()) {
    favicon_ = new ::feedwire::webfeed::Image(*from.favicon_);
  } else {
    favicon_ = nullptr;
  }
  ::memcpy(&follower_count_, &from.follower_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&follower_count_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.WebFeed)
}

inline void WebFeed::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subtitle_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subtitle_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
detail_text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  detail_text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
visit_uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  visit_uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rss_uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rss_uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&favicon_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&favicon_)) + sizeof(state_));
}

WebFeed::~WebFeed() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.WebFeed)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WebFeed::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  title_.Destroy();
  subtitle_.Destroy();
  detail_text_.Destroy();
  visit_uri_.Destroy();
  rss_uri_.Destroy();
  if (this != internal_default_instance()) delete favicon_;
}

void WebFeed::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WebFeed::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.WebFeed)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  web_feed_matchers_.Clear();
  name_.ClearToEmpty();
  title_.ClearToEmpty();
  subtitle_.ClearToEmpty();
  detail_text_.ClearToEmpty();
  visit_uri_.ClearToEmpty();
  rss_uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && favicon_ != nullptr) {
    delete favicon_;
  }
  favicon_ = nullptr;
  ::memset(&follower_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&follower_count_)) + sizeof(state_));
  _internal_metadata_.Clear<std::string>();
}

const char* WebFeed::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string title = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string subtitle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subtitle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string detail_text = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_detail_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string visit_uri = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_visit_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string rss_uri = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_rss_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .feedwire.webfeed.Image favicon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_favicon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 follower_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          follower_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.webfeed.WebFeed.State state = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::feedwire::webfeed::WebFeed_State>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.webfeed.WebFeedMatcher web_feed_matchers = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_web_feed_matchers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WebFeed::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.WebFeed)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeed.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeed.title");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_title(), target);
  }

  // string subtitle = 3;
  if (!this->_internal_subtitle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtitle().data(), static_cast<int>(this->_internal_subtitle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeed.subtitle");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subtitle(), target);
  }

  // string detail_text = 4;
  if (!this->_internal_detail_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_detail_text().data(), static_cast<int>(this->_internal_detail_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeed.detail_text");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_detail_text(), target);
  }

  // string visit_uri = 5;
  if (!this->_internal_visit_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_visit_uri().data(), static_cast<int>(this->_internal_visit_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeed.visit_uri");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_visit_uri(), target);
  }

  // string rss_uri = 6;
  if (!this->_internal_rss_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rss_uri().data(), static_cast<int>(this->_internal_rss_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.WebFeed.rss_uri");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_rss_uri(), target);
  }

  // .feedwire.webfeed.Image favicon = 7;
  if (this->_internal_has_favicon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::favicon(this),
        _Internal::favicon(this).GetCachedSize(), target, stream);
  }

  // int64 follower_count = 8;
  if (this->_internal_follower_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_follower_count(), target);
  }

  // .feedwire.webfeed.WebFeed.State state = 9;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_state(), target);
  }

  // repeated .feedwire.webfeed.WebFeedMatcher web_feed_matchers = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_web_feed_matchers_size()); i < n; i++) {
    const auto& repfield = this->_internal_web_feed_matchers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.WebFeed)
  return target;
}

size_t WebFeed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.WebFeed)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeedMatcher web_feed_matchers = 10;
  total_size += 1UL * this->_internal_web_feed_matchers_size();
  for (const auto& msg : this->web_feed_matchers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string title = 2;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string subtitle = 3;
  if (!this->_internal_subtitle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtitle());
  }

  // string detail_text = 4;
  if (!this->_internal_detail_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_detail_text());
  }

  // string visit_uri = 5;
  if (!this->_internal_visit_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_visit_uri());
  }

  // string rss_uri = 6;
  if (!this->_internal_rss_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rss_uri());
  }

  // .feedwire.webfeed.Image favicon = 7;
  if (this->_internal_has_favicon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *favicon_);
  }

  // int64 follower_count = 8;
  if (this->_internal_follower_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_follower_count());
  }

  // .feedwire.webfeed.WebFeed.State state = 9;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WebFeed::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const WebFeed*>(
      &from));
}

void WebFeed::MergeFrom(const WebFeed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.WebFeed)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  web_feed_matchers_.MergeFrom(from.web_feed_matchers_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_subtitle().empty()) {
    _internal_set_subtitle(from._internal_subtitle());
  }
  if (!from._internal_detail_text().empty()) {
    _internal_set_detail_text(from._internal_detail_text());
  }
  if (!from._internal_visit_uri().empty()) {
    _internal_set_visit_uri(from._internal_visit_uri());
  }
  if (!from._internal_rss_uri().empty()) {
    _internal_set_rss_uri(from._internal_rss_uri());
  }
  if (from._internal_has_favicon()) {
    _internal_mutable_favicon()->::feedwire::webfeed::Image::MergeFrom(from._internal_favicon());
  }
  if (from._internal_follower_count() != 0) {
    _internal_set_follower_count(from._internal_follower_count());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void WebFeed::CopyFrom(const WebFeed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.WebFeed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebFeed::IsInitialized() const {
  return true;
}

void WebFeed::InternalSwap(WebFeed* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  web_feed_matchers_.InternalSwap(&other->web_feed_matchers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &subtitle_, lhs_arena,
      &other->subtitle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &detail_text_, lhs_arena,
      &other->detail_text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &visit_uri_, lhs_arena,
      &other->visit_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rss_uri_, lhs_arena,
      &other->rss_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WebFeed, state_)
      + sizeof(WebFeed::state_)
      - PROTOBUF_FIELD_OFFSET(WebFeed, favicon_)>(
          reinterpret_cast<char*>(&favicon_),
          reinterpret_cast<char*>(&other->favicon_));
}

std::string WebFeed::GetTypeName() const {
  return "feedwire.webfeed.WebFeed";
}


// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    uri_.Set(from._internal_uri(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.Image)
}

inline void Image::SharedCtor() {
uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  uri_.Destroy();
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.Image.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Image::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Image*>(
      &from));
}

void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uri().empty()) {
    _internal_set_uri(from._internal_uri());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &uri_, lhs_arena,
      &other->uri_, rhs_arena
  );
}

std::string Image::GetTypeName() const {
  return "feedwire.webfeed.Image";
}


// ===================================================================

class ListWebFeedsRequest::_Internal {
 public:
  static const ::feedwire::ConsistencyToken& consistency_token(const ListWebFeedsRequest* msg);
};

const ::feedwire::ConsistencyToken&
ListWebFeedsRequest::_Internal::consistency_token(const ListWebFeedsRequest* msg) {
  return *msg->consistency_token_;
}
void ListWebFeedsRequest::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
ListWebFeedsRequest::ListWebFeedsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.ListWebFeedsRequest)
}
ListWebFeedsRequest::ListWebFeedsRequest(const ListWebFeedsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.ListWebFeedsRequest)
}

inline void ListWebFeedsRequest::SharedCtor() {
consistency_token_ = nullptr;
}

ListWebFeedsRequest::~ListWebFeedsRequest() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.ListWebFeedsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListWebFeedsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete consistency_token_;
}

void ListWebFeedsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListWebFeedsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.ListWebFeedsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ListWebFeedsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.ConsistencyToken consistency_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWebFeedsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.ListWebFeedsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.ConsistencyToken consistency_token = 1;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.ListWebFeedsRequest)
  return target;
}

size_t ListWebFeedsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.ListWebFeedsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .feedwire.ConsistencyToken consistency_token = 1;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWebFeedsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListWebFeedsRequest*>(
      &from));
}

void ListWebFeedsRequest::MergeFrom(const ListWebFeedsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.ListWebFeedsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListWebFeedsRequest::CopyFrom(const ListWebFeedsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.ListWebFeedsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWebFeedsRequest::IsInitialized() const {
  return true;
}

void ListWebFeedsRequest::InternalSwap(ListWebFeedsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(consistency_token_, other->consistency_token_);
}

std::string ListWebFeedsRequest::GetTypeName() const {
  return "feedwire.webfeed.ListWebFeedsRequest";
}


// ===================================================================

class ListWebFeedsResponse::_Internal {
 public:
};

ListWebFeedsResponse::ListWebFeedsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  web_feeds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.ListWebFeedsResponse)
}
ListWebFeedsResponse::ListWebFeedsResponse(const ListWebFeedsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      web_feeds_(from.web_feeds_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.ListWebFeedsResponse)
}

inline void ListWebFeedsResponse::SharedCtor() {
}

ListWebFeedsResponse::~ListWebFeedsResponse() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.ListWebFeedsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListWebFeedsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListWebFeedsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListWebFeedsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.ListWebFeedsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  web_feeds_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ListWebFeedsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.webfeed.WebFeed web_feeds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_web_feeds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListWebFeedsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.ListWebFeedsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeed web_feeds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_web_feeds_size()); i < n; i++) {
    const auto& repfield = this->_internal_web_feeds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.ListWebFeedsResponse)
  return target;
}

size_t ListWebFeedsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.ListWebFeedsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeed web_feeds = 1;
  total_size += 1UL * this->_internal_web_feeds_size();
  for (const auto& msg : this->web_feeds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListWebFeedsResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListWebFeedsResponse*>(
      &from));
}

void ListWebFeedsResponse::MergeFrom(const ListWebFeedsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.ListWebFeedsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  web_feeds_.MergeFrom(from.web_feeds_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListWebFeedsResponse::CopyFrom(const ListWebFeedsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.ListWebFeedsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListWebFeedsResponse::IsInitialized() const {
  return true;
}

void ListWebFeedsResponse::InternalSwap(ListWebFeedsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  web_feeds_.InternalSwap(&other->web_feeds_);
}

std::string ListWebFeedsResponse::GetTypeName() const {
  return "feedwire.webfeed.ListWebFeedsResponse";
}


// ===================================================================

class FollowWebFeedRequest::_Internal {
 public:
  static const ::feedwire::ConsistencyToken& consistency_token(const FollowWebFeedRequest* msg);
};

const ::feedwire::ConsistencyToken&
FollowWebFeedRequest::_Internal::consistency_token(const FollowWebFeedRequest* msg) {
  return *msg->consistency_token_;
}
void FollowWebFeedRequest::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
FollowWebFeedRequest::FollowWebFeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  page_rss_uris_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.FollowWebFeedRequest)
}
FollowWebFeedRequest::FollowWebFeedRequest(const FollowWebFeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      page_rss_uris_(from.page_rss_uris_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  canonical_uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    canonical_uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_canonical_uri().empty()) {
    canonical_uri_.Set(from._internal_canonical_uri(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  change_reason_ = from.change_reason_;
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case kWebPageUri: {
      _internal_set_web_page_uri(from._internal_web_page_uri());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.FollowWebFeedRequest)
}

inline void FollowWebFeedRequest::SharedCtor() {
canonical_uri_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  canonical_uri_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&consistency_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_reason_) -
    reinterpret_cast<char*>(&consistency_token_)) + sizeof(change_reason_));
clear_has_identifier();
}

FollowWebFeedRequest::~FollowWebFeedRequest() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.FollowWebFeedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowWebFeedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  canonical_uri_.Destroy();
  if (this != internal_default_instance()) delete consistency_token_;
  if (has_identifier()) {
    clear_identifier();
  }
}

void FollowWebFeedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FollowWebFeedRequest::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:feedwire.webfeed.FollowWebFeedRequest)
  switch (identifier_case()) {
    case kName: {
      identifier_.name_.Destroy();
      break;
    }
    case kWebPageUri: {
      identifier_.web_page_uri_.Destroy();
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void FollowWebFeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.FollowWebFeedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  page_rss_uris_.Clear();
  canonical_uri_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  change_reason_ = 0;
  clear_identifier();
  _internal_metadata_.Clear<std::string>();
}

const char* FollowWebFeedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // string web_page_uri = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_web_page_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string page_rss_uris = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_page_rss_uris();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .feedwire.ConsistencyToken consistency_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string canonical_uri = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_canonical_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .feedwire.webfeed.WebFeedChangeReason change_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_change_reason(static_cast<::feedwire::webfeed::WebFeedChangeReason>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FollowWebFeedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.FollowWebFeedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (_internal_has_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.FollowWebFeedRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string web_page_uri = 2;
  if (_internal_has_web_page_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_web_page_uri().data(), static_cast<int>(this->_internal_web_page_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.FollowWebFeedRequest.web_page_uri");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_web_page_uri(), target);
  }

  // repeated string page_rss_uris = 3;
  for (int i = 0, n = this->_internal_page_rss_uris_size(); i < n; i++) {
    const auto& s = this->_internal_page_rss_uris(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.FollowWebFeedRequest.page_rss_uris");
    target = stream->WriteString(3, s, target);
  }

  // .feedwire.ConsistencyToken consistency_token = 4;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  // string canonical_uri = 5;
  if (!this->_internal_canonical_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_canonical_uri().data(), static_cast<int>(this->_internal_canonical_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.FollowWebFeedRequest.canonical_uri");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_canonical_uri(), target);
  }

  // .feedwire.webfeed.WebFeedChangeReason change_reason = 6;
  if (this->_internal_change_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_change_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.FollowWebFeedRequest)
  return target;
}

size_t FollowWebFeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.FollowWebFeedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string page_rss_uris = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(page_rss_uris_.size());
  for (int i = 0, n = page_rss_uris_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      page_rss_uris_.Get(i));
  }

  // string canonical_uri = 5;
  if (!this->_internal_canonical_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_canonical_uri());
  }

  // .feedwire.ConsistencyToken consistency_token = 4;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  // .feedwire.webfeed.WebFeedChangeReason change_reason = 6;
  if (this->_internal_change_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_reason());
  }

  switch (identifier_case()) {
    // string name = 1;
    case kName: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
      break;
    }
    // string web_page_uri = 2;
    case kWebPageUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_web_page_uri());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FollowWebFeedRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FollowWebFeedRequest*>(
      &from));
}

void FollowWebFeedRequest::MergeFrom(const FollowWebFeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.FollowWebFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  page_rss_uris_.MergeFrom(from.page_rss_uris_);
  if (!from._internal_canonical_uri().empty()) {
    _internal_set_canonical_uri(from._internal_canonical_uri());
  }
  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  if (from._internal_change_reason() != 0) {
    _internal_set_change_reason(from._internal_change_reason());
  }
  switch (from.identifier_case()) {
    case kName: {
      _internal_set_name(from._internal_name());
      break;
    }
    case kWebPageUri: {
      _internal_set_web_page_uri(from._internal_web_page_uri());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FollowWebFeedRequest::CopyFrom(const FollowWebFeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.FollowWebFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowWebFeedRequest::IsInitialized() const {
  return true;
}

void FollowWebFeedRequest::InternalSwap(FollowWebFeedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  page_rss_uris_.InternalSwap(&other->page_rss_uris_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &canonical_uri_, lhs_arena,
      &other->canonical_uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowWebFeedRequest, change_reason_)
      + sizeof(FollowWebFeedRequest::change_reason_)
      - PROTOBUF_FIELD_OFFSET(FollowWebFeedRequest, consistency_token_)>(
          reinterpret_cast<char*>(&consistency_token_),
          reinterpret_cast<char*>(&other->consistency_token_));
  swap(identifier_, other->identifier_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string FollowWebFeedRequest::GetTypeName() const {
  return "feedwire.webfeed.FollowWebFeedRequest";
}


// ===================================================================

class FollowWebFeedResponse::_Internal {
 public:
  static const ::feedwire::webfeed::WebFeed& web_feed(const FollowWebFeedResponse* msg);
  static const ::feedwire::ConsistencyToken& consistency_token(const FollowWebFeedResponse* msg);
};

const ::feedwire::webfeed::WebFeed&
FollowWebFeedResponse::_Internal::web_feed(const FollowWebFeedResponse* msg) {
  return *msg->web_feed_;
}
const ::feedwire::ConsistencyToken&
FollowWebFeedResponse::_Internal::consistency_token(const FollowWebFeedResponse* msg) {
  return *msg->consistency_token_;
}
void FollowWebFeedResponse::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
FollowWebFeedResponse::FollowWebFeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.FollowWebFeedResponse)
}
FollowWebFeedResponse::FollowWebFeedResponse(const FollowWebFeedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_web_feed()) {
    web_feed_ = new ::feedwire::webfeed::WebFeed(*from.web_feed_);
  } else {
    web_feed_ = nullptr;
  }
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.FollowWebFeedResponse)
}

inline void FollowWebFeedResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&web_feed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&consistency_token_) -
    reinterpret_cast<char*>(&web_feed_)) + sizeof(consistency_token_));
}

FollowWebFeedResponse::~FollowWebFeedResponse() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.FollowWebFeedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FollowWebFeedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete web_feed_;
  if (this != internal_default_instance()) delete consistency_token_;
}

void FollowWebFeedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FollowWebFeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.FollowWebFeedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && web_feed_ != nullptr) {
    delete web_feed_;
  }
  web_feed_ = nullptr;
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* FollowWebFeedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.webfeed.WebFeed web_feed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_feed(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.ConsistencyToken consistency_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FollowWebFeedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.FollowWebFeedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.webfeed.WebFeed web_feed = 1;
  if (this->_internal_has_web_feed()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::web_feed(this),
        _Internal::web_feed(this).GetCachedSize(), target, stream);
  }

  // .feedwire.ConsistencyToken consistency_token = 2;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.FollowWebFeedResponse)
  return target;
}

size_t FollowWebFeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.FollowWebFeedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .feedwire.webfeed.WebFeed web_feed = 1;
  if (this->_internal_has_web_feed()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *web_feed_);
  }

  // .feedwire.ConsistencyToken consistency_token = 2;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FollowWebFeedResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const FollowWebFeedResponse*>(
      &from));
}

void FollowWebFeedResponse::MergeFrom(const FollowWebFeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.FollowWebFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_web_feed()) {
    _internal_mutable_web_feed()->::feedwire::webfeed::WebFeed::MergeFrom(from._internal_web_feed());
  }
  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void FollowWebFeedResponse::CopyFrom(const FollowWebFeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.FollowWebFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FollowWebFeedResponse::IsInitialized() const {
  return true;
}

void FollowWebFeedResponse::InternalSwap(FollowWebFeedResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FollowWebFeedResponse, consistency_token_)
      + sizeof(FollowWebFeedResponse::consistency_token_)
      - PROTOBUF_FIELD_OFFSET(FollowWebFeedResponse, web_feed_)>(
          reinterpret_cast<char*>(&web_feed_),
          reinterpret_cast<char*>(&other->web_feed_));
}

std::string FollowWebFeedResponse::GetTypeName() const {
  return "feedwire.webfeed.FollowWebFeedResponse";
}


// ===================================================================

class UnfollowWebFeedRequest::_Internal {
 public:
  static const ::feedwire::ConsistencyToken& consistency_token(const UnfollowWebFeedRequest* msg);
};

const ::feedwire::ConsistencyToken&
UnfollowWebFeedRequest::_Internal::consistency_token(const UnfollowWebFeedRequest* msg) {
  return *msg->consistency_token_;
}
void UnfollowWebFeedRequest::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
UnfollowWebFeedRequest::UnfollowWebFeedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.UnfollowWebFeedRequest)
}
UnfollowWebFeedRequest::UnfollowWebFeedRequest(const UnfollowWebFeedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  change_reason_ = from.change_reason_;
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.UnfollowWebFeedRequest)
}

inline void UnfollowWebFeedRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&consistency_token_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&change_reason_) -
    reinterpret_cast<char*>(&consistency_token_)) + sizeof(change_reason_));
}

UnfollowWebFeedRequest::~UnfollowWebFeedRequest() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.UnfollowWebFeedRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnfollowWebFeedRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete consistency_token_;
}

void UnfollowWebFeedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnfollowWebFeedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.UnfollowWebFeedRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  change_reason_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* UnfollowWebFeedRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else
          goto handle_unusual;
        continue;
      // .feedwire.ConsistencyToken consistency_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.webfeed.WebFeedChangeReason change_reason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_change_reason(static_cast<::feedwire::webfeed::WebFeedChangeReason>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnfollowWebFeedRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.UnfollowWebFeedRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "feedwire.webfeed.UnfollowWebFeedRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .feedwire.ConsistencyToken consistency_token = 2;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  // .feedwire.webfeed.WebFeedChangeReason change_reason = 3;
  if (this->_internal_change_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_change_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.UnfollowWebFeedRequest)
  return target;
}

size_t UnfollowWebFeedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.UnfollowWebFeedRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .feedwire.ConsistencyToken consistency_token = 2;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  // .feedwire.webfeed.WebFeedChangeReason change_reason = 3;
  if (this->_internal_change_reason() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_change_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfollowWebFeedRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnfollowWebFeedRequest*>(
      &from));
}

void UnfollowWebFeedRequest::MergeFrom(const UnfollowWebFeedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.UnfollowWebFeedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  if (from._internal_change_reason() != 0) {
    _internal_set_change_reason(from._internal_change_reason());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnfollowWebFeedRequest::CopyFrom(const UnfollowWebFeedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.UnfollowWebFeedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfollowWebFeedRequest::IsInitialized() const {
  return true;
}

void UnfollowWebFeedRequest::InternalSwap(UnfollowWebFeedRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnfollowWebFeedRequest, change_reason_)
      + sizeof(UnfollowWebFeedRequest::change_reason_)
      - PROTOBUF_FIELD_OFFSET(UnfollowWebFeedRequest, consistency_token_)>(
          reinterpret_cast<char*>(&consistency_token_),
          reinterpret_cast<char*>(&other->consistency_token_));
}

std::string UnfollowWebFeedRequest::GetTypeName() const {
  return "feedwire.webfeed.UnfollowWebFeedRequest";
}


// ===================================================================

class UnfollowWebFeedResponse::_Internal {
 public:
  static const ::feedwire::ConsistencyToken& consistency_token(const UnfollowWebFeedResponse* msg);
};

const ::feedwire::ConsistencyToken&
UnfollowWebFeedResponse::_Internal::consistency_token(const UnfollowWebFeedResponse* msg) {
  return *msg->consistency_token_;
}
void UnfollowWebFeedResponse::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
UnfollowWebFeedResponse::UnfollowWebFeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.UnfollowWebFeedResponse)
}
UnfollowWebFeedResponse::UnfollowWebFeedResponse(const UnfollowWebFeedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.UnfollowWebFeedResponse)
}

inline void UnfollowWebFeedResponse::SharedCtor() {
consistency_token_ = nullptr;
}

UnfollowWebFeedResponse::~UnfollowWebFeedResponse() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.UnfollowWebFeedResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnfollowWebFeedResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete consistency_token_;
}

void UnfollowWebFeedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnfollowWebFeedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.UnfollowWebFeedResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* UnfollowWebFeedResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.ConsistencyToken consistency_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnfollowWebFeedResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.UnfollowWebFeedResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.ConsistencyToken consistency_token = 1;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.UnfollowWebFeedResponse)
  return target;
}

size_t UnfollowWebFeedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.UnfollowWebFeedResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .feedwire.ConsistencyToken consistency_token = 1;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnfollowWebFeedResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnfollowWebFeedResponse*>(
      &from));
}

void UnfollowWebFeedResponse::MergeFrom(const UnfollowWebFeedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.UnfollowWebFeedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnfollowWebFeedResponse::CopyFrom(const UnfollowWebFeedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.UnfollowWebFeedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnfollowWebFeedResponse::IsInitialized() const {
  return true;
}

void UnfollowWebFeedResponse::InternalSwap(UnfollowWebFeedResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(consistency_token_, other->consistency_token_);
}

std::string UnfollowWebFeedResponse::GetTypeName() const {
  return "feedwire.webfeed.UnfollowWebFeedResponse";
}


// ===================================================================

class ListRecommendedWebFeedsRequest::_Internal {
 public:
  static const ::feedwire::ConsistencyToken& consistency_token(const ListRecommendedWebFeedsRequest* msg);
};

const ::feedwire::ConsistencyToken&
ListRecommendedWebFeedsRequest::_Internal::consistency_token(const ListRecommendedWebFeedsRequest* msg) {
  return *msg->consistency_token_;
}
void ListRecommendedWebFeedsRequest::clear_consistency_token() {
  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
}
ListRecommendedWebFeedsRequest::ListRecommendedWebFeedsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.ListRecommendedWebFeedsRequest)
}
ListRecommendedWebFeedsRequest::ListRecommendedWebFeedsRequest(const ListRecommendedWebFeedsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_consistency_token()) {
    consistency_token_ = new ::feedwire::ConsistencyToken(*from.consistency_token_);
  } else {
    consistency_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.ListRecommendedWebFeedsRequest)
}

inline void ListRecommendedWebFeedsRequest::SharedCtor() {
consistency_token_ = nullptr;
}

ListRecommendedWebFeedsRequest::~ListRecommendedWebFeedsRequest() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRecommendedWebFeedsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete consistency_token_;
}

void ListRecommendedWebFeedsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRecommendedWebFeedsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && consistency_token_ != nullptr) {
    delete consistency_token_;
  }
  consistency_token_ = nullptr;
  _internal_metadata_.Clear<std::string>();
}

const char* ListRecommendedWebFeedsRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .feedwire.ConsistencyToken consistency_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_consistency_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRecommendedWebFeedsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .feedwire.ConsistencyToken consistency_token = 1;
  if (this->_internal_has_consistency_token()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::consistency_token(this),
        _Internal::consistency_token(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  return target;
}

size_t ListRecommendedWebFeedsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .feedwire.ConsistencyToken consistency_token = 1;
  if (this->_internal_has_consistency_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consistency_token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRecommendedWebFeedsRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListRecommendedWebFeedsRequest*>(
      &from));
}

void ListRecommendedWebFeedsRequest::MergeFrom(const ListRecommendedWebFeedsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_consistency_token()) {
    _internal_mutable_consistency_token()->::feedwire::ConsistencyToken::MergeFrom(from._internal_consistency_token());
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListRecommendedWebFeedsRequest::CopyFrom(const ListRecommendedWebFeedsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.ListRecommendedWebFeedsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRecommendedWebFeedsRequest::IsInitialized() const {
  return true;
}

void ListRecommendedWebFeedsRequest::InternalSwap(ListRecommendedWebFeedsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(consistency_token_, other->consistency_token_);
}

std::string ListRecommendedWebFeedsRequest::GetTypeName() const {
  return "feedwire.webfeed.ListRecommendedWebFeedsRequest";
}


// ===================================================================

class ListRecommendedWebFeedsResponse::_Internal {
 public:
};

ListRecommendedWebFeedsResponse::ListRecommendedWebFeedsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  recommended_web_feeds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.webfeed.ListRecommendedWebFeedsResponse)
}
ListRecommendedWebFeedsResponse::ListRecommendedWebFeedsResponse(const ListRecommendedWebFeedsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      recommended_web_feeds_(from.recommended_web_feeds_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.webfeed.ListRecommendedWebFeedsResponse)
}

inline void ListRecommendedWebFeedsResponse::SharedCtor() {
}

ListRecommendedWebFeedsResponse::~ListRecommendedWebFeedsResponse() {
  // @@protoc_insertion_point(destructor:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListRecommendedWebFeedsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListRecommendedWebFeedsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListRecommendedWebFeedsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  recommended_web_feeds_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ListRecommendedWebFeedsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .feedwire.webfeed.WebFeed recommended_web_feeds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_recommended_web_feeds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListRecommendedWebFeedsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeed recommended_web_feeds = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_recommended_web_feeds_size()); i < n; i++) {
    const auto& repfield = this->_internal_recommended_web_feeds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  return target;
}

size_t ListRecommendedWebFeedsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.webfeed.WebFeed recommended_web_feeds = 1;
  total_size += 1UL * this->_internal_recommended_web_feeds_size();
  for (const auto& msg : this->recommended_web_feeds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListRecommendedWebFeedsResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListRecommendedWebFeedsResponse*>(
      &from));
}

void ListRecommendedWebFeedsResponse::MergeFrom(const ListRecommendedWebFeedsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  recommended_web_feeds_.MergeFrom(from.recommended_web_feeds_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListRecommendedWebFeedsResponse::CopyFrom(const ListRecommendedWebFeedsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.webfeed.ListRecommendedWebFeedsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRecommendedWebFeedsResponse::IsInitialized() const {
  return true;
}

void ListRecommendedWebFeedsResponse::InternalSwap(ListRecommendedWebFeedsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  recommended_web_feeds_.InternalSwap(&other->recommended_web_feeds_);
}

std::string ListRecommendedWebFeedsResponse::GetTypeName() const {
  return "feedwire.webfeed.ListRecommendedWebFeedsResponse";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace webfeed
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::WebFeed*
Arena::CreateMaybeMessage< ::feedwire::webfeed::WebFeed >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::WebFeed >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::Image*
Arena::CreateMaybeMessage< ::feedwire::webfeed::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::ListWebFeedsRequest*
Arena::CreateMaybeMessage< ::feedwire::webfeed::ListWebFeedsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::ListWebFeedsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::ListWebFeedsResponse*
Arena::CreateMaybeMessage< ::feedwire::webfeed::ListWebFeedsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::ListWebFeedsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::FollowWebFeedRequest*
Arena::CreateMaybeMessage< ::feedwire::webfeed::FollowWebFeedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::FollowWebFeedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::FollowWebFeedResponse*
Arena::CreateMaybeMessage< ::feedwire::webfeed::FollowWebFeedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::FollowWebFeedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::UnfollowWebFeedRequest*
Arena::CreateMaybeMessage< ::feedwire::webfeed::UnfollowWebFeedRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::UnfollowWebFeedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::UnfollowWebFeedResponse*
Arena::CreateMaybeMessage< ::feedwire::webfeed::UnfollowWebFeedResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::UnfollowWebFeedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::ListRecommendedWebFeedsRequest*
Arena::CreateMaybeMessage< ::feedwire::webfeed::ListRecommendedWebFeedsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::ListRecommendedWebFeedsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::webfeed::ListRecommendedWebFeedsResponse*
Arena::CreateMaybeMessage< ::feedwire::webfeed::ListRecommendedWebFeedsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::webfeed::ListRecommendedWebFeedsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
