// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/client_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/chrome_client_info.pb.h"
#include "components/feed/core/proto/v2/wire/device.pb.h"
#include "components/feed/core/proto/v2/wire/display_info.pb.h"
#include "components/feed/core/proto/v2/wire/version.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class ClientInfo;
struct ClientInfoDefaultTypeInternal;
extern ClientInfoDefaultTypeInternal _ClientInfo_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::ClientInfo* Arena::CreateMaybeMessage<::feedwire::ClientInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum ClientInfo_PlatformType : int {
  ClientInfo_PlatformType_UNKNOWN_PLATFORM = 0,
  ClientInfo_PlatformType_ANDROID_ID = 1,
  ClientInfo_PlatformType_IOS = 2
};
bool ClientInfo_PlatformType_IsValid(int value);
constexpr ClientInfo_PlatformType ClientInfo_PlatformType_PlatformType_MIN = ClientInfo_PlatformType_UNKNOWN_PLATFORM;
constexpr ClientInfo_PlatformType ClientInfo_PlatformType_PlatformType_MAX = ClientInfo_PlatformType_IOS;
constexpr int ClientInfo_PlatformType_PlatformType_ARRAYSIZE = ClientInfo_PlatformType_PlatformType_MAX + 1;

const std::string& ClientInfo_PlatformType_Name(ClientInfo_PlatformType value);
template<typename T>
inline const std::string& ClientInfo_PlatformType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientInfo_PlatformType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientInfo_PlatformType_Name.");
  return ClientInfo_PlatformType_Name(static_cast<ClientInfo_PlatformType>(enum_t_value));
}
bool ClientInfo_PlatformType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientInfo_PlatformType* value);
enum ClientInfo_AppType : int {
  ClientInfo_AppType_CHROME_ANDROID = 3
};
bool ClientInfo_AppType_IsValid(int value);
constexpr ClientInfo_AppType ClientInfo_AppType_AppType_MIN = ClientInfo_AppType_CHROME_ANDROID;
constexpr ClientInfo_AppType ClientInfo_AppType_AppType_MAX = ClientInfo_AppType_CHROME_ANDROID;
constexpr int ClientInfo_AppType_AppType_ARRAYSIZE = ClientInfo_AppType_AppType_MAX + 1;

const std::string& ClientInfo_AppType_Name(ClientInfo_AppType value);
template<typename T>
inline const std::string& ClientInfo_AppType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientInfo_AppType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientInfo_AppType_Name.");
  return ClientInfo_AppType_Name(static_cast<ClientInfo_AppType>(enum_t_value));
}
bool ClientInfo_AppType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientInfo_AppType* value);
// ===================================================================

class ClientInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ClientInfo) */ {
 public:
  inline ClientInfo() : ClientInfo(nullptr) {}
  ~ClientInfo() override;
  explicit PROTOBUF_CONSTEXPR ClientInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClientInfo(const ClientInfo& from);
  ClientInfo(ClientInfo&& from) noexcept
    : ClientInfo() {
    *this = ::std::move(from);
  }

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientInfo& operator=(ClientInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ClientInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientInfo* internal_default_instance() {
    return reinterpret_cast<const ClientInfo*>(
               &_ClientInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientInfo& a, ClientInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ClientInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ClientInfo";
  }
  protected:
  explicit ClientInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef ClientInfo_PlatformType PlatformType;
  static constexpr PlatformType UNKNOWN_PLATFORM =
    ClientInfo_PlatformType_UNKNOWN_PLATFORM;
  static constexpr PlatformType ANDROID_ID =
    ClientInfo_PlatformType_ANDROID_ID;
  static constexpr PlatformType IOS =
    ClientInfo_PlatformType_IOS;
  static inline bool PlatformType_IsValid(int value) {
    return ClientInfo_PlatformType_IsValid(value);
  }
  static constexpr PlatformType PlatformType_MIN =
    ClientInfo_PlatformType_PlatformType_MIN;
  static constexpr PlatformType PlatformType_MAX =
    ClientInfo_PlatformType_PlatformType_MAX;
  static constexpr int PlatformType_ARRAYSIZE =
    ClientInfo_PlatformType_PlatformType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& PlatformType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, PlatformType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function PlatformType_Name.");
    return ClientInfo_PlatformType_Name(enum_t_value);
  }
  static inline bool PlatformType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      PlatformType* value) {
    return ClientInfo_PlatformType_Parse(name, value);
  }

  typedef ClientInfo_AppType AppType;
  static constexpr AppType CHROME_ANDROID =
    ClientInfo_AppType_CHROME_ANDROID;
  static inline bool AppType_IsValid(int value) {
    return ClientInfo_AppType_IsValid(value);
  }
  static constexpr AppType AppType_MIN =
    ClientInfo_AppType_AppType_MIN;
  static constexpr AppType AppType_MAX =
    ClientInfo_AppType_AppType_MAX;
  static constexpr int AppType_ARRAYSIZE =
    ClientInfo_AppType_AppType_ARRAYSIZE;
  template<typename T>
  static inline const std::string& AppType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AppType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AppType_Name.");
    return ClientInfo_AppType_Name(enum_t_value);
  }
  static inline bool AppType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AppType* value) {
    return ClientInfo_AppType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayInfoFieldNumber = 6,
    kLocaleFieldNumber = 5,
    kClientInstanceIdFieldNumber = 7,
    kAdvertisingIdFieldNumber = 8,
    kPlatformVersionFieldNumber = 2,
    kAppVersionFieldNumber = 4,
    kDeviceFieldNumber = 10,
    kChromeClientInfoFieldNumber = 338478298,
    kPlatformTypeFieldNumber = 1,
    kAppTypeFieldNumber = 3,
  };
  // repeated .feedwire.DisplayInfo display_info = 6;
  int display_info_size() const;
  private:
  int _internal_display_info_size() const;
  public:
  void clear_display_info();
  ::feedwire::DisplayInfo* mutable_display_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DisplayInfo >*
      mutable_display_info();
  private:
  const ::feedwire::DisplayInfo& _internal_display_info(int index) const;
  ::feedwire::DisplayInfo* _internal_add_display_info();
  public:
  const ::feedwire::DisplayInfo& display_info(int index) const;
  ::feedwire::DisplayInfo* add_display_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DisplayInfo >&
      display_info() const;

  // optional string locale = 5;
  bool has_locale() const;
  private:
  bool _internal_has_locale() const;
  public:
  void clear_locale();
  const std::string& locale() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_locale(ArgT0&& arg0, ArgT... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* locale);
  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(const std::string& value);
  std::string* _internal_mutable_locale();
  public:

  // optional string client_instance_id = 7;
  bool has_client_instance_id() const;
  private:
  bool _internal_has_client_instance_id() const;
  public:
  void clear_client_instance_id();
  const std::string& client_instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_instance_id();
  PROTOBUF_NODISCARD std::string* release_client_instance_id();
  void set_allocated_client_instance_id(std::string* client_instance_id);
  private:
  const std::string& _internal_client_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_instance_id(const std::string& value);
  std::string* _internal_mutable_client_instance_id();
  public:

  // optional string advertising_id = 8;
  bool has_advertising_id() const;
  private:
  bool _internal_has_advertising_id() const;
  public:
  void clear_advertising_id();
  const std::string& advertising_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_advertising_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_advertising_id();
  PROTOBUF_NODISCARD std::string* release_advertising_id();
  void set_allocated_advertising_id(std::string* advertising_id);
  private:
  const std::string& _internal_advertising_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_advertising_id(const std::string& value);
  std::string* _internal_mutable_advertising_id();
  public:

  // optional .feedwire.Version platform_version = 2;
  bool has_platform_version() const;
  private:
  bool _internal_has_platform_version() const;
  public:
  void clear_platform_version();
  const ::feedwire::Version& platform_version() const;
  PROTOBUF_NODISCARD ::feedwire::Version* release_platform_version();
  ::feedwire::Version* mutable_platform_version();
  void set_allocated_platform_version(::feedwire::Version* platform_version);
  private:
  const ::feedwire::Version& _internal_platform_version() const;
  ::feedwire::Version* _internal_mutable_platform_version();
  public:
  void unsafe_arena_set_allocated_platform_version(
      ::feedwire::Version* platform_version);
  ::feedwire::Version* unsafe_arena_release_platform_version();

  // optional .feedwire.Version app_version = 4;
  bool has_app_version() const;
  private:
  bool _internal_has_app_version() const;
  public:
  void clear_app_version();
  const ::feedwire::Version& app_version() const;
  PROTOBUF_NODISCARD ::feedwire::Version* release_app_version();
  ::feedwire::Version* mutable_app_version();
  void set_allocated_app_version(::feedwire::Version* app_version);
  private:
  const ::feedwire::Version& _internal_app_version() const;
  ::feedwire::Version* _internal_mutable_app_version();
  public:
  void unsafe_arena_set_allocated_app_version(
      ::feedwire::Version* app_version);
  ::feedwire::Version* unsafe_arena_release_app_version();

  // optional .feedwire.Device device = 10;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::feedwire::Device& device() const;
  PROTOBUF_NODISCARD ::feedwire::Device* release_device();
  ::feedwire::Device* mutable_device();
  void set_allocated_device(::feedwire::Device* device);
  private:
  const ::feedwire::Device& _internal_device() const;
  ::feedwire::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::feedwire::Device* device);
  ::feedwire::Device* unsafe_arena_release_device();

  // optional .feedwire.ChromeClientInfo chrome_client_info = 338478298;
  bool has_chrome_client_info() const;
  private:
  bool _internal_has_chrome_client_info() const;
  public:
  void clear_chrome_client_info();
  const ::feedwire::ChromeClientInfo& chrome_client_info() const;
  PROTOBUF_NODISCARD ::feedwire::ChromeClientInfo* release_chrome_client_info();
  ::feedwire::ChromeClientInfo* mutable_chrome_client_info();
  void set_allocated_chrome_client_info(::feedwire::ChromeClientInfo* chrome_client_info);
  private:
  const ::feedwire::ChromeClientInfo& _internal_chrome_client_info() const;
  ::feedwire::ChromeClientInfo* _internal_mutable_chrome_client_info();
  public:
  void unsafe_arena_set_allocated_chrome_client_info(
      ::feedwire::ChromeClientInfo* chrome_client_info);
  ::feedwire::ChromeClientInfo* unsafe_arena_release_chrome_client_info();

  // optional .feedwire.ClientInfo.PlatformType platform_type = 1;
  bool has_platform_type() const;
  private:
  bool _internal_has_platform_type() const;
  public:
  void clear_platform_type();
  ::feedwire::ClientInfo_PlatformType platform_type() const;
  void set_platform_type(::feedwire::ClientInfo_PlatformType value);
  private:
  ::feedwire::ClientInfo_PlatformType _internal_platform_type() const;
  void _internal_set_platform_type(::feedwire::ClientInfo_PlatformType value);
  public:

  // optional .feedwire.ClientInfo.AppType app_type = 3;
  bool has_app_type() const;
  private:
  bool _internal_has_app_type() const;
  public:
  void clear_app_type();
  ::feedwire::ClientInfo_AppType app_type() const;
  void set_app_type(::feedwire::ClientInfo_AppType value);
  private:
  ::feedwire::ClientInfo_AppType _internal_app_type() const;
  void _internal_set_app_type(::feedwire::ClientInfo_AppType value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ClientInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DisplayInfo > display_info_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr advertising_id_;
  ::feedwire::Version* platform_version_;
  ::feedwire::Version* app_version_;
  ::feedwire::Device* device_;
  ::feedwire::ChromeClientInfo* chrome_client_info_;
  int platform_type_;
  int app_type_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientInfo

// optional .feedwire.ClientInfo.PlatformType platform_type = 1;
inline bool ClientInfo::_internal_has_platform_type() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ClientInfo::has_platform_type() const {
  return _internal_has_platform_type();
}
inline void ClientInfo::clear_platform_type() {
  platform_type_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::feedwire::ClientInfo_PlatformType ClientInfo::_internal_platform_type() const {
  return static_cast< ::feedwire::ClientInfo_PlatformType >(platform_type_);
}
inline ::feedwire::ClientInfo_PlatformType ClientInfo::platform_type() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.platform_type)
  return _internal_platform_type();
}
inline void ClientInfo::_internal_set_platform_type(::feedwire::ClientInfo_PlatformType value) {
  assert(::feedwire::ClientInfo_PlatformType_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  platform_type_ = value;
}
inline void ClientInfo::set_platform_type(::feedwire::ClientInfo_PlatformType value) {
  _internal_set_platform_type(value);
  // @@protoc_insertion_point(field_set:feedwire.ClientInfo.platform_type)
}

// optional .feedwire.Version platform_version = 2;
inline bool ClientInfo::_internal_has_platform_version() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || platform_version_ != nullptr);
  return value;
}
inline bool ClientInfo::has_platform_version() const {
  return _internal_has_platform_version();
}
inline const ::feedwire::Version& ClientInfo::_internal_platform_version() const {
  const ::feedwire::Version* p = platform_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::Version&>(
      ::feedwire::_Version_default_instance_);
}
inline const ::feedwire::Version& ClientInfo::platform_version() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.platform_version)
  return _internal_platform_version();
}
inline void ClientInfo::unsafe_arena_set_allocated_platform_version(
    ::feedwire::Version* platform_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(platform_version_);
  }
  platform_version_ = platform_version;
  if (platform_version) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ClientInfo.platform_version)
}
inline ::feedwire::Version* ClientInfo::release_platform_version() {
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::Version* temp = platform_version_;
  platform_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::Version* ClientInfo::unsafe_arena_release_platform_version() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.platform_version)
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::Version* temp = platform_version_;
  platform_version_ = nullptr;
  return temp;
}
inline ::feedwire::Version* ClientInfo::_internal_mutable_platform_version() {
  _has_bits_[0] |= 0x00000008u;
  if (platform_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::Version>(GetArenaForAllocation());
    platform_version_ = p;
  }
  return platform_version_;
}
inline ::feedwire::Version* ClientInfo::mutable_platform_version() {
  ::feedwire::Version* _msg = _internal_mutable_platform_version();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.platform_version)
  return _msg;
}
inline void ClientInfo::set_allocated_platform_version(::feedwire::Version* platform_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(platform_version_);
  }
  if (platform_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(platform_version));
    if (message_arena != submessage_arena) {
      platform_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, platform_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  platform_version_ = platform_version;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.platform_version)
}

// optional .feedwire.ClientInfo.AppType app_type = 3;
inline bool ClientInfo::_internal_has_app_type() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ClientInfo::has_app_type() const {
  return _internal_has_app_type();
}
inline void ClientInfo::clear_app_type() {
  app_type_ = 3;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::feedwire::ClientInfo_AppType ClientInfo::_internal_app_type() const {
  return static_cast< ::feedwire::ClientInfo_AppType >(app_type_);
}
inline ::feedwire::ClientInfo_AppType ClientInfo::app_type() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.app_type)
  return _internal_app_type();
}
inline void ClientInfo::_internal_set_app_type(::feedwire::ClientInfo_AppType value) {
  assert(::feedwire::ClientInfo_AppType_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  app_type_ = value;
}
inline void ClientInfo::set_app_type(::feedwire::ClientInfo_AppType value) {
  _internal_set_app_type(value);
  // @@protoc_insertion_point(field_set:feedwire.ClientInfo.app_type)
}

// optional .feedwire.Version app_version = 4;
inline bool ClientInfo::_internal_has_app_version() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || app_version_ != nullptr);
  return value;
}
inline bool ClientInfo::has_app_version() const {
  return _internal_has_app_version();
}
inline const ::feedwire::Version& ClientInfo::_internal_app_version() const {
  const ::feedwire::Version* p = app_version_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::Version&>(
      ::feedwire::_Version_default_instance_);
}
inline const ::feedwire::Version& ClientInfo::app_version() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.app_version)
  return _internal_app_version();
}
inline void ClientInfo::unsafe_arena_set_allocated_app_version(
    ::feedwire::Version* app_version) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_version_);
  }
  app_version_ = app_version;
  if (app_version) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ClientInfo.app_version)
}
inline ::feedwire::Version* ClientInfo::release_app_version() {
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::Version* temp = app_version_;
  app_version_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::Version* ClientInfo::unsafe_arena_release_app_version() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.app_version)
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::Version* temp = app_version_;
  app_version_ = nullptr;
  return temp;
}
inline ::feedwire::Version* ClientInfo::_internal_mutable_app_version() {
  _has_bits_[0] |= 0x00000010u;
  if (app_version_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::Version>(GetArenaForAllocation());
    app_version_ = p;
  }
  return app_version_;
}
inline ::feedwire::Version* ClientInfo::mutable_app_version() {
  ::feedwire::Version* _msg = _internal_mutable_app_version();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.app_version)
  return _msg;
}
inline void ClientInfo::set_allocated_app_version(::feedwire::Version* app_version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_version_);
  }
  if (app_version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_version));
    if (message_arena != submessage_arena) {
      app_version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  app_version_ = app_version;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.app_version)
}

// optional string locale = 5;
inline bool ClientInfo::_internal_has_locale() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ClientInfo::has_locale() const {
  return _internal_has_locale();
}
inline void ClientInfo::clear_locale() {
  locale_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ClientInfo::locale() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.locale)
  return _internal_locale();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientInfo::set_locale(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 locale_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.ClientInfo.locale)
}
inline std::string* ClientInfo::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.locale)
  return _s;
}
inline const std::string& ClientInfo::_internal_locale() const {
  return locale_.Get();
}
inline void ClientInfo::_internal_set_locale(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  locale_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientInfo::_internal_mutable_locale() {
  _has_bits_[0] |= 0x00000001u;
  return locale_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientInfo::release_locale() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.locale)
  if (!_internal_has_locale()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = locale_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientInfo::set_allocated_locale(std::string* locale) {
  if (locale != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  locale_.SetAllocated(locale, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (locale_.IsDefault()) {
    locale_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.locale)
}

// repeated .feedwire.DisplayInfo display_info = 6;
inline int ClientInfo::_internal_display_info_size() const {
  return display_info_.size();
}
inline int ClientInfo::display_info_size() const {
  return _internal_display_info_size();
}
inline ::feedwire::DisplayInfo* ClientInfo::mutable_display_info(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.display_info)
  return display_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DisplayInfo >*
ClientInfo::mutable_display_info() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.ClientInfo.display_info)
  return &display_info_;
}
inline const ::feedwire::DisplayInfo& ClientInfo::_internal_display_info(int index) const {
  return display_info_.Get(index);
}
inline const ::feedwire::DisplayInfo& ClientInfo::display_info(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.display_info)
  return _internal_display_info(index);
}
inline ::feedwire::DisplayInfo* ClientInfo::_internal_add_display_info() {
  return display_info_.Add();
}
inline ::feedwire::DisplayInfo* ClientInfo::add_display_info() {
  ::feedwire::DisplayInfo* _add = _internal_add_display_info();
  // @@protoc_insertion_point(field_add:feedwire.ClientInfo.display_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DisplayInfo >&
ClientInfo::display_info() const {
  // @@protoc_insertion_point(field_list:feedwire.ClientInfo.display_info)
  return display_info_;
}

// optional string client_instance_id = 7;
inline bool ClientInfo::_internal_has_client_instance_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ClientInfo::has_client_instance_id() const {
  return _internal_has_client_instance_id();
}
inline void ClientInfo::clear_client_instance_id() {
  client_instance_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ClientInfo::client_instance_id() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.client_instance_id)
  return _internal_client_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientInfo::set_client_instance_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 client_instance_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.ClientInfo.client_instance_id)
}
inline std::string* ClientInfo::mutable_client_instance_id() {
  std::string* _s = _internal_mutable_client_instance_id();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.client_instance_id)
  return _s;
}
inline const std::string& ClientInfo::_internal_client_instance_id() const {
  return client_instance_id_.Get();
}
inline void ClientInfo::_internal_set_client_instance_id(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  client_instance_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientInfo::_internal_mutable_client_instance_id() {
  _has_bits_[0] |= 0x00000002u;
  return client_instance_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientInfo::release_client_instance_id() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.client_instance_id)
  if (!_internal_has_client_instance_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = client_instance_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_instance_id_.IsDefault()) {
    client_instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientInfo::set_allocated_client_instance_id(std::string* client_instance_id) {
  if (client_instance_id != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_instance_id_.SetAllocated(client_instance_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (client_instance_id_.IsDefault()) {
    client_instance_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.client_instance_id)
}

// optional string advertising_id = 8;
inline bool ClientInfo::_internal_has_advertising_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ClientInfo::has_advertising_id() const {
  return _internal_has_advertising_id();
}
inline void ClientInfo::clear_advertising_id() {
  advertising_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ClientInfo::advertising_id() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.advertising_id)
  return _internal_advertising_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ClientInfo::set_advertising_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 advertising_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.ClientInfo.advertising_id)
}
inline std::string* ClientInfo::mutable_advertising_id() {
  std::string* _s = _internal_mutable_advertising_id();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.advertising_id)
  return _s;
}
inline const std::string& ClientInfo::_internal_advertising_id() const {
  return advertising_id_.Get();
}
inline void ClientInfo::_internal_set_advertising_id(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  advertising_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ClientInfo::_internal_mutable_advertising_id() {
  _has_bits_[0] |= 0x00000004u;
  return advertising_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ClientInfo::release_advertising_id() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.advertising_id)
  if (!_internal_has_advertising_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = advertising_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (advertising_id_.IsDefault()) {
    advertising_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ClientInfo::set_allocated_advertising_id(std::string* advertising_id) {
  if (advertising_id != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  advertising_id_.SetAllocated(advertising_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (advertising_id_.IsDefault()) {
    advertising_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.advertising_id)
}

// optional .feedwire.Device device = 10;
inline bool ClientInfo::_internal_has_device() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || device_ != nullptr);
  return value;
}
inline bool ClientInfo::has_device() const {
  return _internal_has_device();
}
inline const ::feedwire::Device& ClientInfo::_internal_device() const {
  const ::feedwire::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::Device&>(
      ::feedwire::_Device_default_instance_);
}
inline const ::feedwire::Device& ClientInfo::device() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.device)
  return _internal_device();
}
inline void ClientInfo::unsafe_arena_set_allocated_device(
    ::feedwire::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ClientInfo.device)
}
inline ::feedwire::Device* ClientInfo::release_device() {
  _has_bits_[0] &= ~0x00000020u;
  ::feedwire::Device* temp = device_;
  device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::Device* ClientInfo::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.device)
  _has_bits_[0] &= ~0x00000020u;
  ::feedwire::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::feedwire::Device* ClientInfo::_internal_mutable_device() {
  _has_bits_[0] |= 0x00000020u;
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::Device>(GetArenaForAllocation());
    device_ = p;
  }
  return device_;
}
inline ::feedwire::Device* ClientInfo::mutable_device() {
  ::feedwire::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.device)
  return _msg;
}
inline void ClientInfo::set_allocated_device(::feedwire::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.device)
}

// optional .feedwire.ChromeClientInfo chrome_client_info = 338478298;
inline bool ClientInfo::_internal_has_chrome_client_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || chrome_client_info_ != nullptr);
  return value;
}
inline bool ClientInfo::has_chrome_client_info() const {
  return _internal_has_chrome_client_info();
}
inline const ::feedwire::ChromeClientInfo& ClientInfo::_internal_chrome_client_info() const {
  const ::feedwire::ChromeClientInfo* p = chrome_client_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ChromeClientInfo&>(
      ::feedwire::_ChromeClientInfo_default_instance_);
}
inline const ::feedwire::ChromeClientInfo& ClientInfo::chrome_client_info() const {
  // @@protoc_insertion_point(field_get:feedwire.ClientInfo.chrome_client_info)
  return _internal_chrome_client_info();
}
inline void ClientInfo::unsafe_arena_set_allocated_chrome_client_info(
    ::feedwire::ChromeClientInfo* chrome_client_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_client_info_);
  }
  chrome_client_info_ = chrome_client_info;
  if (chrome_client_info) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.ClientInfo.chrome_client_info)
}
inline ::feedwire::ChromeClientInfo* ClientInfo::release_chrome_client_info() {
  _has_bits_[0] &= ~0x00000040u;
  ::feedwire::ChromeClientInfo* temp = chrome_client_info_;
  chrome_client_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ChromeClientInfo* ClientInfo::unsafe_arena_release_chrome_client_info() {
  // @@protoc_insertion_point(field_release:feedwire.ClientInfo.chrome_client_info)
  _has_bits_[0] &= ~0x00000040u;
  ::feedwire::ChromeClientInfo* temp = chrome_client_info_;
  chrome_client_info_ = nullptr;
  return temp;
}
inline ::feedwire::ChromeClientInfo* ClientInfo::_internal_mutable_chrome_client_info() {
  _has_bits_[0] |= 0x00000040u;
  if (chrome_client_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ChromeClientInfo>(GetArenaForAllocation());
    chrome_client_info_ = p;
  }
  return chrome_client_info_;
}
inline ::feedwire::ChromeClientInfo* ClientInfo::mutable_chrome_client_info() {
  ::feedwire::ChromeClientInfo* _msg = _internal_mutable_chrome_client_info();
  // @@protoc_insertion_point(field_mutable:feedwire.ClientInfo.chrome_client_info)
  return _msg;
}
inline void ClientInfo::set_allocated_chrome_client_info(::feedwire::ChromeClientInfo* chrome_client_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_client_info_);
  }
  if (chrome_client_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_client_info));
    if (message_arena != submessage_arena) {
      chrome_client_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_client_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  chrome_client_info_ = chrome_client_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.ClientInfo.chrome_client_info)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::ClientInfo_PlatformType> : ::std::true_type {};
template <> struct is_proto_enum< ::feedwire::ClientInfo_AppType> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fclient_5finfo_2eproto
