// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/data_operation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fdata_5foperation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fdata_5foperation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/feature.pb.h"
#include "components/feed/core/proto/v2/wire/payload_metadata.pb.h"
#include "components/feed/core/proto/v2/wire/render_data.pb.h"
#include "components/feed/core/proto/v2/wire/request_schedule.pb.h"
#include "components/feed/core/proto/v2/wire/token.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fdata_5foperation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fdata_5foperation_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class DataOperation;
struct DataOperationDefaultTypeInternal;
extern DataOperationDefaultTypeInternal _DataOperation_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::DataOperation* Arena::CreateMaybeMessage<::feedwire::DataOperation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum DataOperation_Operation : int {
  DataOperation_Operation_UNKNOWN_OPERATION = 0,
  DataOperation_Operation_CLEAR_ALL = 1,
  DataOperation_Operation_UPDATE_OR_APPEND = 2,
  DataOperation_Operation_REMOVE = 3
};
bool DataOperation_Operation_IsValid(int value);
constexpr DataOperation_Operation DataOperation_Operation_Operation_MIN = DataOperation_Operation_UNKNOWN_OPERATION;
constexpr DataOperation_Operation DataOperation_Operation_Operation_MAX = DataOperation_Operation_REMOVE;
constexpr int DataOperation_Operation_Operation_ARRAYSIZE = DataOperation_Operation_Operation_MAX + 1;

const std::string& DataOperation_Operation_Name(DataOperation_Operation value);
template<typename T>
inline const std::string& DataOperation_Operation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DataOperation_Operation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DataOperation_Operation_Name.");
  return DataOperation_Operation_Name(static_cast<DataOperation_Operation>(enum_t_value));
}
bool DataOperation_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataOperation_Operation* value);
// ===================================================================

class DataOperation final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.DataOperation) */ {
 public:
  inline DataOperation() : DataOperation(nullptr) {}
  ~DataOperation() override;
  explicit PROTOBUF_CONSTEXPR DataOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataOperation(const DataOperation& from);
  DataOperation(DataOperation&& from) noexcept
    : DataOperation() {
    *this = ::std::move(from);
  }

  inline DataOperation& operator=(const DataOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataOperation& operator=(DataOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DataOperation& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kFeature = 3,
    kNextPageToken = 5,
    kRenderData = 6,
    kRequestSchedule = 9,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const DataOperation* internal_default_instance() {
    return reinterpret_cast<const DataOperation*>(
               &_DataOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataOperation& a, DataOperation& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(DataOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataOperation>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DataOperation& from);
  void MergeFrom(const DataOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DataOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.DataOperation";
  }
  protected:
  explicit DataOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef DataOperation_Operation Operation;
  static constexpr Operation UNKNOWN_OPERATION =
    DataOperation_Operation_UNKNOWN_OPERATION;
  static constexpr Operation CLEAR_ALL =
    DataOperation_Operation_CLEAR_ALL;
  static constexpr Operation UPDATE_OR_APPEND =
    DataOperation_Operation_UPDATE_OR_APPEND;
  static constexpr Operation REMOVE =
    DataOperation_Operation_REMOVE;
  static inline bool Operation_IsValid(int value) {
    return DataOperation_Operation_IsValid(value);
  }
  static constexpr Operation Operation_MIN =
    DataOperation_Operation_Operation_MIN;
  static constexpr Operation Operation_MAX =
    DataOperation_Operation_Operation_MAX;
  static constexpr int Operation_ARRAYSIZE =
    DataOperation_Operation_Operation_ARRAYSIZE;
  template<typename T>
  static inline const std::string& Operation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Operation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Operation_Name.");
    return DataOperation_Operation_Name(enum_t_value);
  }
  static inline bool Operation_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Operation* value) {
    return DataOperation_Operation_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMetadataFieldNumber = 2,
    kOperationFieldNumber = 1,
    kFeatureFieldNumber = 3,
    kNextPageTokenFieldNumber = 5,
    kRenderDataFieldNumber = 6,
    kRequestScheduleFieldNumber = 9,
  };
  // optional .feedwire.PayloadMetadata metadata = 2;
  bool has_metadata() const;
  private:
  bool _internal_has_metadata() const;
  public:
  void clear_metadata();
  const ::feedwire::PayloadMetadata& metadata() const;
  PROTOBUF_NODISCARD ::feedwire::PayloadMetadata* release_metadata();
  ::feedwire::PayloadMetadata* mutable_metadata();
  void set_allocated_metadata(::feedwire::PayloadMetadata* metadata);
  private:
  const ::feedwire::PayloadMetadata& _internal_metadata() const;
  ::feedwire::PayloadMetadata* _internal_mutable_metadata();
  public:
  void unsafe_arena_set_allocated_metadata(
      ::feedwire::PayloadMetadata* metadata);
  ::feedwire::PayloadMetadata* unsafe_arena_release_metadata();

  // optional .feedwire.DataOperation.Operation operation = 1;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::feedwire::DataOperation_Operation operation() const;
  void set_operation(::feedwire::DataOperation_Operation value);
  private:
  ::feedwire::DataOperation_Operation _internal_operation() const;
  void _internal_set_operation(::feedwire::DataOperation_Operation value);
  public:

  // .feedwire.Feature feature = 3;
  bool has_feature() const;
  private:
  bool _internal_has_feature() const;
  public:
  void clear_feature();
  const ::feedwire::Feature& feature() const;
  PROTOBUF_NODISCARD ::feedwire::Feature* release_feature();
  ::feedwire::Feature* mutable_feature();
  void set_allocated_feature(::feedwire::Feature* feature);
  private:
  const ::feedwire::Feature& _internal_feature() const;
  ::feedwire::Feature* _internal_mutable_feature();
  public:
  void unsafe_arena_set_allocated_feature(
      ::feedwire::Feature* feature);
  ::feedwire::Feature* unsafe_arena_release_feature();

  // .feedwire.Token next_page_token = 5;
  bool has_next_page_token() const;
  private:
  bool _internal_has_next_page_token() const;
  public:
  void clear_next_page_token();
  const ::feedwire::Token& next_page_token() const;
  PROTOBUF_NODISCARD ::feedwire::Token* release_next_page_token();
  ::feedwire::Token* mutable_next_page_token();
  void set_allocated_next_page_token(::feedwire::Token* next_page_token);
  private:
  const ::feedwire::Token& _internal_next_page_token() const;
  ::feedwire::Token* _internal_mutable_next_page_token();
  public:
  void unsafe_arena_set_allocated_next_page_token(
      ::feedwire::Token* next_page_token);
  ::feedwire::Token* unsafe_arena_release_next_page_token();

  // .feedwire.RenderData render_data = 6;
  bool has_render_data() const;
  private:
  bool _internal_has_render_data() const;
  public:
  void clear_render_data();
  const ::feedwire::RenderData& render_data() const;
  PROTOBUF_NODISCARD ::feedwire::RenderData* release_render_data();
  ::feedwire::RenderData* mutable_render_data();
  void set_allocated_render_data(::feedwire::RenderData* render_data);
  private:
  const ::feedwire::RenderData& _internal_render_data() const;
  ::feedwire::RenderData* _internal_mutable_render_data();
  public:
  void unsafe_arena_set_allocated_render_data(
      ::feedwire::RenderData* render_data);
  ::feedwire::RenderData* unsafe_arena_release_render_data();

  // .feedwire.RequestSchedule request_schedule = 9;
  bool has_request_schedule() const;
  private:
  bool _internal_has_request_schedule() const;
  public:
  void clear_request_schedule();
  const ::feedwire::RequestSchedule& request_schedule() const;
  PROTOBUF_NODISCARD ::feedwire::RequestSchedule* release_request_schedule();
  ::feedwire::RequestSchedule* mutable_request_schedule();
  void set_allocated_request_schedule(::feedwire::RequestSchedule* request_schedule);
  private:
  const ::feedwire::RequestSchedule& _internal_request_schedule() const;
  ::feedwire::RequestSchedule* _internal_mutable_request_schedule();
  public:
  void unsafe_arena_set_allocated_request_schedule(
      ::feedwire::RequestSchedule* request_schedule);
  ::feedwire::RequestSchedule* unsafe_arena_release_request_schedule();

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:feedwire.DataOperation)
 private:
  class _Internal;
  void set_has_feature();
  void set_has_next_page_token();
  void set_has_render_data();
  void set_has_request_schedule();

  inline bool has_payload() const;
  inline void clear_has_payload();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::PayloadMetadata* metadata_;
  int operation_;
  union PayloadUnion {
    constexpr PayloadUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::feedwire::Feature* feature_;
    ::feedwire::Token* next_page_token_;
    ::feedwire::RenderData* render_data_;
    ::feedwire::RequestSchedule* request_schedule_;
  } payload_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fdata_5foperation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataOperation

// .feedwire.Feature feature = 3;
inline bool DataOperation::_internal_has_feature() const {
  return payload_case() == kFeature;
}
inline bool DataOperation::has_feature() const {
  return _internal_has_feature();
}
inline void DataOperation::set_has_feature() {
  _oneof_case_[0] = kFeature;
}
inline ::feedwire::Feature* DataOperation::release_feature() {
  // @@protoc_insertion_point(field_release:feedwire.DataOperation.feature)
  if (_internal_has_feature()) {
    clear_has_payload();
    ::feedwire::Feature* temp = payload_.feature_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.feature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::Feature& DataOperation::_internal_feature() const {
  return _internal_has_feature()
      ? *payload_.feature_
      : reinterpret_cast< ::feedwire::Feature&>(::feedwire::_Feature_default_instance_);
}
inline const ::feedwire::Feature& DataOperation::feature() const {
  // @@protoc_insertion_point(field_get:feedwire.DataOperation.feature)
  return _internal_feature();
}
inline ::feedwire::Feature* DataOperation::unsafe_arena_release_feature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.DataOperation.feature)
  if (_internal_has_feature()) {
    clear_has_payload();
    ::feedwire::Feature* temp = payload_.feature_;
    payload_.feature_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataOperation::unsafe_arena_set_allocated_feature(::feedwire::Feature* feature) {
  clear_payload();
  if (feature) {
    set_has_feature();
    payload_.feature_ = feature;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.DataOperation.feature)
}
inline ::feedwire::Feature* DataOperation::_internal_mutable_feature() {
  if (!_internal_has_feature()) {
    clear_payload();
    set_has_feature();
    payload_.feature_ = CreateMaybeMessage< ::feedwire::Feature >(GetArenaForAllocation());
  }
  return payload_.feature_;
}
inline ::feedwire::Feature* DataOperation::mutable_feature() {
  ::feedwire::Feature* _msg = _internal_mutable_feature();
  // @@protoc_insertion_point(field_mutable:feedwire.DataOperation.feature)
  return _msg;
}

// .feedwire.Token next_page_token = 5;
inline bool DataOperation::_internal_has_next_page_token() const {
  return payload_case() == kNextPageToken;
}
inline bool DataOperation::has_next_page_token() const {
  return _internal_has_next_page_token();
}
inline void DataOperation::set_has_next_page_token() {
  _oneof_case_[0] = kNextPageToken;
}
inline ::feedwire::Token* DataOperation::release_next_page_token() {
  // @@protoc_insertion_point(field_release:feedwire.DataOperation.next_page_token)
  if (_internal_has_next_page_token()) {
    clear_has_payload();
    ::feedwire::Token* temp = payload_.next_page_token_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.next_page_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::Token& DataOperation::_internal_next_page_token() const {
  return _internal_has_next_page_token()
      ? *payload_.next_page_token_
      : reinterpret_cast< ::feedwire::Token&>(::feedwire::_Token_default_instance_);
}
inline const ::feedwire::Token& DataOperation::next_page_token() const {
  // @@protoc_insertion_point(field_get:feedwire.DataOperation.next_page_token)
  return _internal_next_page_token();
}
inline ::feedwire::Token* DataOperation::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.DataOperation.next_page_token)
  if (_internal_has_next_page_token()) {
    clear_has_payload();
    ::feedwire::Token* temp = payload_.next_page_token_;
    payload_.next_page_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataOperation::unsafe_arena_set_allocated_next_page_token(::feedwire::Token* next_page_token) {
  clear_payload();
  if (next_page_token) {
    set_has_next_page_token();
    payload_.next_page_token_ = next_page_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.DataOperation.next_page_token)
}
inline ::feedwire::Token* DataOperation::_internal_mutable_next_page_token() {
  if (!_internal_has_next_page_token()) {
    clear_payload();
    set_has_next_page_token();
    payload_.next_page_token_ = CreateMaybeMessage< ::feedwire::Token >(GetArenaForAllocation());
  }
  return payload_.next_page_token_;
}
inline ::feedwire::Token* DataOperation::mutable_next_page_token() {
  ::feedwire::Token* _msg = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:feedwire.DataOperation.next_page_token)
  return _msg;
}

// .feedwire.RenderData render_data = 6;
inline bool DataOperation::_internal_has_render_data() const {
  return payload_case() == kRenderData;
}
inline bool DataOperation::has_render_data() const {
  return _internal_has_render_data();
}
inline void DataOperation::set_has_render_data() {
  _oneof_case_[0] = kRenderData;
}
inline ::feedwire::RenderData* DataOperation::release_render_data() {
  // @@protoc_insertion_point(field_release:feedwire.DataOperation.render_data)
  if (_internal_has_render_data()) {
    clear_has_payload();
    ::feedwire::RenderData* temp = payload_.render_data_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.render_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::RenderData& DataOperation::_internal_render_data() const {
  return _internal_has_render_data()
      ? *payload_.render_data_
      : reinterpret_cast< ::feedwire::RenderData&>(::feedwire::_RenderData_default_instance_);
}
inline const ::feedwire::RenderData& DataOperation::render_data() const {
  // @@protoc_insertion_point(field_get:feedwire.DataOperation.render_data)
  return _internal_render_data();
}
inline ::feedwire::RenderData* DataOperation::unsafe_arena_release_render_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.DataOperation.render_data)
  if (_internal_has_render_data()) {
    clear_has_payload();
    ::feedwire::RenderData* temp = payload_.render_data_;
    payload_.render_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataOperation::unsafe_arena_set_allocated_render_data(::feedwire::RenderData* render_data) {
  clear_payload();
  if (render_data) {
    set_has_render_data();
    payload_.render_data_ = render_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.DataOperation.render_data)
}
inline ::feedwire::RenderData* DataOperation::_internal_mutable_render_data() {
  if (!_internal_has_render_data()) {
    clear_payload();
    set_has_render_data();
    payload_.render_data_ = CreateMaybeMessage< ::feedwire::RenderData >(GetArenaForAllocation());
  }
  return payload_.render_data_;
}
inline ::feedwire::RenderData* DataOperation::mutable_render_data() {
  ::feedwire::RenderData* _msg = _internal_mutable_render_data();
  // @@protoc_insertion_point(field_mutable:feedwire.DataOperation.render_data)
  return _msg;
}

// .feedwire.RequestSchedule request_schedule = 9;
inline bool DataOperation::_internal_has_request_schedule() const {
  return payload_case() == kRequestSchedule;
}
inline bool DataOperation::has_request_schedule() const {
  return _internal_has_request_schedule();
}
inline void DataOperation::set_has_request_schedule() {
  _oneof_case_[0] = kRequestSchedule;
}
inline ::feedwire::RequestSchedule* DataOperation::release_request_schedule() {
  // @@protoc_insertion_point(field_release:feedwire.DataOperation.request_schedule)
  if (_internal_has_request_schedule()) {
    clear_has_payload();
    ::feedwire::RequestSchedule* temp = payload_.request_schedule_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    payload_.request_schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::feedwire::RequestSchedule& DataOperation::_internal_request_schedule() const {
  return _internal_has_request_schedule()
      ? *payload_.request_schedule_
      : reinterpret_cast< ::feedwire::RequestSchedule&>(::feedwire::_RequestSchedule_default_instance_);
}
inline const ::feedwire::RequestSchedule& DataOperation::request_schedule() const {
  // @@protoc_insertion_point(field_get:feedwire.DataOperation.request_schedule)
  return _internal_request_schedule();
}
inline ::feedwire::RequestSchedule* DataOperation::unsafe_arena_release_request_schedule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:feedwire.DataOperation.request_schedule)
  if (_internal_has_request_schedule()) {
    clear_has_payload();
    ::feedwire::RequestSchedule* temp = payload_.request_schedule_;
    payload_.request_schedule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DataOperation::unsafe_arena_set_allocated_request_schedule(::feedwire::RequestSchedule* request_schedule) {
  clear_payload();
  if (request_schedule) {
    set_has_request_schedule();
    payload_.request_schedule_ = request_schedule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.DataOperation.request_schedule)
}
inline ::feedwire::RequestSchedule* DataOperation::_internal_mutable_request_schedule() {
  if (!_internal_has_request_schedule()) {
    clear_payload();
    set_has_request_schedule();
    payload_.request_schedule_ = CreateMaybeMessage< ::feedwire::RequestSchedule >(GetArenaForAllocation());
  }
  return payload_.request_schedule_;
}
inline ::feedwire::RequestSchedule* DataOperation::mutable_request_schedule() {
  ::feedwire::RequestSchedule* _msg = _internal_mutable_request_schedule();
  // @@protoc_insertion_point(field_mutable:feedwire.DataOperation.request_schedule)
  return _msg;
}

// optional .feedwire.DataOperation.Operation operation = 1;
inline bool DataOperation::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataOperation::has_operation() const {
  return _internal_has_operation();
}
inline void DataOperation::clear_operation() {
  operation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::feedwire::DataOperation_Operation DataOperation::_internal_operation() const {
  return static_cast< ::feedwire::DataOperation_Operation >(operation_);
}
inline ::feedwire::DataOperation_Operation DataOperation::operation() const {
  // @@protoc_insertion_point(field_get:feedwire.DataOperation.operation)
  return _internal_operation();
}
inline void DataOperation::_internal_set_operation(::feedwire::DataOperation_Operation value) {
  assert(::feedwire::DataOperation_Operation_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void DataOperation::set_operation(::feedwire::DataOperation_Operation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:feedwire.DataOperation.operation)
}

// optional .feedwire.PayloadMetadata metadata = 2;
inline bool DataOperation::_internal_has_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || metadata_ != nullptr);
  return value;
}
inline bool DataOperation::has_metadata() const {
  return _internal_has_metadata();
}
inline const ::feedwire::PayloadMetadata& DataOperation::_internal_metadata() const {
  const ::feedwire::PayloadMetadata* p = metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::PayloadMetadata&>(
      ::feedwire::_PayloadMetadata_default_instance_);
}
inline const ::feedwire::PayloadMetadata& DataOperation::metadata() const {
  // @@protoc_insertion_point(field_get:feedwire.DataOperation.metadata)
  return _internal_metadata();
}
inline void DataOperation::unsafe_arena_set_allocated_metadata(
    ::feedwire::PayloadMetadata* metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  metadata_ = metadata;
  if (metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.DataOperation.metadata)
}
inline ::feedwire::PayloadMetadata* DataOperation::release_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::PayloadMetadata* temp = metadata_;
  metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::PayloadMetadata* DataOperation::unsafe_arena_release_metadata() {
  // @@protoc_insertion_point(field_release:feedwire.DataOperation.metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::PayloadMetadata* temp = metadata_;
  metadata_ = nullptr;
  return temp;
}
inline ::feedwire::PayloadMetadata* DataOperation::_internal_mutable_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::PayloadMetadata>(GetArenaForAllocation());
    metadata_ = p;
  }
  return metadata_;
}
inline ::feedwire::PayloadMetadata* DataOperation::mutable_metadata() {
  ::feedwire::PayloadMetadata* _msg = _internal_mutable_metadata();
  // @@protoc_insertion_point(field_mutable:feedwire.DataOperation.metadata)
  return _msg;
}
inline void DataOperation::set_allocated_metadata(::feedwire::PayloadMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata_);
  }
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metadata));
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  metadata_ = metadata;
  // @@protoc_insertion_point(field_set_allocated:feedwire.DataOperation.metadata)
}

inline bool DataOperation::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void DataOperation::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline DataOperation::PayloadCase DataOperation::payload_case() const {
  return DataOperation::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::DataOperation_Operation> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fdata_5foperation_2eproto
