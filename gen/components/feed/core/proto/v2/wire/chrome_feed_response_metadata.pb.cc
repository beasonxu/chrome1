// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/chrome_feed_response_metadata.proto

#include "components/feed/core/proto/v2/wire/chrome_feed_response_metadata.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR ChromeFeedResponseMetadata::ChromeFeedResponseMetadata(
    ::_pbi::ConstantInitialized)
  : experiments_()
  , session_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , privacy_notice_fulfilled_(false)
  , logging_enabled_(false)
  , web_and_app_activity_enabled_(false)
  , discover_personalization_enabled_(false){}
struct ChromeFeedResponseMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChromeFeedResponseMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChromeFeedResponseMetadataDefaultTypeInternal() {}
  union {
    ChromeFeedResponseMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChromeFeedResponseMetadataDefaultTypeInternal _ChromeFeedResponseMetadata_default_instance_;
PROTOBUF_CONSTEXPR Experiment::Experiment(
    ::_pbi::ConstantInitialized)
  : trial_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , group_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ExperimentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExperimentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExperimentDefaultTypeInternal() {}
  union {
    Experiment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExperimentDefaultTypeInternal _Experiment_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class ChromeFeedResponseMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<ChromeFeedResponseMetadata>()._has_bits_);
  static void set_has_privacy_notice_fulfilled(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_logging_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_session_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_web_and_app_activity_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_discover_personalization_enabled(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ChromeFeedResponseMetadata::ChromeFeedResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  experiments_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.ChromeFeedResponseMetadata)
}
ChromeFeedResponseMetadata::ChromeFeedResponseMetadata(const ChromeFeedResponseMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_),
      experiments_(from.experiments_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  session_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    session_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_session_id()) {
    session_id_.Set(from._internal_session_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&privacy_notice_fulfilled_, &from.privacy_notice_fulfilled_,
    static_cast<size_t>(reinterpret_cast<char*>(&discover_personalization_enabled_) -
    reinterpret_cast<char*>(&privacy_notice_fulfilled_)) + sizeof(discover_personalization_enabled_));
  // @@protoc_insertion_point(copy_constructor:feedwire.ChromeFeedResponseMetadata)
}

inline void ChromeFeedResponseMetadata::SharedCtor() {
session_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  session_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&privacy_notice_fulfilled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&discover_personalization_enabled_) -
    reinterpret_cast<char*>(&privacy_notice_fulfilled_)) + sizeof(discover_personalization_enabled_));
}

ChromeFeedResponseMetadata::~ChromeFeedResponseMetadata() {
  // @@protoc_insertion_point(destructor:feedwire.ChromeFeedResponseMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChromeFeedResponseMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.Destroy();
}

void ChromeFeedResponseMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChromeFeedResponseMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.ChromeFeedResponseMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  experiments_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    session_id_.ClearNonDefaultToEmpty();
  }
  ::memset(&privacy_notice_fulfilled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&discover_personalization_enabled_) -
      reinterpret_cast<char*>(&privacy_notice_fulfilled_)) + sizeof(discover_personalization_enabled_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChromeFeedResponseMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool privacy_notice_fulfilled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_privacy_notice_fulfilled(&has_bits);
          privacy_notice_fulfilled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool logging_enabled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_logging_enabled(&has_bits);
          logging_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .feedwire.Experiment experiments = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_experiments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional bool web_and_app_activity_enabled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_web_and_app_activity_enabled(&has_bits);
          web_and_app_activity_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool discover_personalization_enabled = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_discover_personalization_enabled(&has_bits);
          discover_personalization_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChromeFeedResponseMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.ChromeFeedResponseMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool privacy_notice_fulfilled = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_privacy_notice_fulfilled(), target);
  }

  // optional bool logging_enabled = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_logging_enabled(), target);
  }

  // optional string session_id = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // repeated .feedwire.Experiment experiments = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_experiments_size()); i < n; i++) {
    const auto& repfield = this->_internal_experiments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional bool web_and_app_activity_enabled = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_web_and_app_activity_enabled(), target);
  }

  // optional bool discover_personalization_enabled = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_discover_personalization_enabled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.ChromeFeedResponseMetadata)
  return target;
}

size_t ChromeFeedResponseMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.ChromeFeedResponseMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .feedwire.Experiment experiments = 4;
  total_size += 1UL * this->_internal_experiments_size();
  for (const auto& msg : this->experiments_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string session_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_session_id());
    }

    // optional bool privacy_notice_fulfilled = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool logging_enabled = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool web_and_app_activity_enabled = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool discover_personalization_enabled = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChromeFeedResponseMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChromeFeedResponseMetadata*>(
      &from));
}

void ChromeFeedResponseMetadata::MergeFrom(const ChromeFeedResponseMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.ChromeFeedResponseMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  experiments_.MergeFrom(from.experiments_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_session_id(from._internal_session_id());
    }
    if (cached_has_bits & 0x00000002u) {
      privacy_notice_fulfilled_ = from.privacy_notice_fulfilled_;
    }
    if (cached_has_bits & 0x00000004u) {
      logging_enabled_ = from.logging_enabled_;
    }
    if (cached_has_bits & 0x00000008u) {
      web_and_app_activity_enabled_ = from.web_and_app_activity_enabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      discover_personalization_enabled_ = from.discover_personalization_enabled_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChromeFeedResponseMetadata::CopyFrom(const ChromeFeedResponseMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.ChromeFeedResponseMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChromeFeedResponseMetadata::IsInitialized() const {
  return true;
}

void ChromeFeedResponseMetadata::InternalSwap(ChromeFeedResponseMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  experiments_.InternalSwap(&other->experiments_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &session_id_, lhs_arena,
      &other->session_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChromeFeedResponseMetadata, discover_personalization_enabled_)
      + sizeof(ChromeFeedResponseMetadata::discover_personalization_enabled_)
      - PROTOBUF_FIELD_OFFSET(ChromeFeedResponseMetadata, privacy_notice_fulfilled_)>(
          reinterpret_cast<char*>(&privacy_notice_fulfilled_),
          reinterpret_cast<char*>(&other->privacy_notice_fulfilled_));
}

std::string ChromeFeedResponseMetadata::GetTypeName() const {
  return "feedwire.ChromeFeedResponseMetadata";
}


// ===================================================================

class Experiment::_Internal {
 public:
  using HasBits = decltype(std::declval<Experiment>()._has_bits_);
  static void set_has_trial_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_group_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Experiment::Experiment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.Experiment)
}
Experiment::Experiment(const Experiment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  trial_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    trial_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_trial_name()) {
    trial_name_.Set(from._internal_trial_name(), 
      GetArenaForAllocation());
  }
  group_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    group_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_group_name()) {
    group_name_.Set(from._internal_group_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.Experiment)
}

inline void Experiment::SharedCtor() {
trial_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  trial_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
group_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  group_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Experiment::~Experiment() {
  // @@protoc_insertion_point(destructor:feedwire.Experiment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Experiment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  trial_name_.Destroy();
  group_name_.Destroy();
}

void Experiment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Experiment::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.Experiment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trial_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      group_name_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Experiment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string trial_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trial_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string group_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_group_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Experiment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.Experiment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string trial_name = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trial_name(), target);
  }

  // optional string group_name = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_group_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.Experiment)
  return target;
}

size_t Experiment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.Experiment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string trial_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_trial_name());
    }

    // optional string group_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_group_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Experiment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Experiment*>(
      &from));
}

void Experiment::MergeFrom(const Experiment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.Experiment)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trial_name(from._internal_trial_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_group_name(from._internal_group_name());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Experiment::CopyFrom(const Experiment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.Experiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Experiment::IsInitialized() const {
  return true;
}

void Experiment::InternalSwap(Experiment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &trial_name_, lhs_arena,
      &other->trial_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &group_name_, lhs_arena,
      &other->group_name_, rhs_arena
  );
}

std::string Experiment::GetTypeName() const {
  return "feedwire.Experiment";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::ChromeFeedResponseMetadata*
Arena::CreateMaybeMessage< ::feedwire::ChromeFeedResponseMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::ChromeFeedResponseMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::Experiment*
Arena::CreateMaybeMessage< ::feedwire::Experiment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::Experiment >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
