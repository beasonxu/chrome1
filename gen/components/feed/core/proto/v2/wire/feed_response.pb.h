// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_response.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/chrome_feed_response_metadata.pb.h"
#include "components/feed/core/proto/v2/wire/content_lifetime.pb.h"
#include "components/feed/core/proto/v2/wire/data_operation.pb.h"
#include "components/feed/core/proto/v2/wire/eventid.pb.h"
#include "components/feed/core/proto/v2/wire/info_card.pb.h"
#include "components/feed/core/proto/v2/wire/server_experiment_data.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class FeedResponse;
struct FeedResponseDefaultTypeInternal;
extern FeedResponseDefaultTypeInternal _FeedResponse_default_instance_;
class FeedResponseMetadata;
struct FeedResponseMetadataDefaultTypeInternal;
extern FeedResponseMetadataDefaultTypeInternal _FeedResponseMetadata_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::FeedResponse* Arena::CreateMaybeMessage<::feedwire::FeedResponse>(Arena*);
template<> ::feedwire::FeedResponseMetadata* Arena::CreateMaybeMessage<::feedwire::FeedResponseMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class FeedResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedResponse) */ {
 public:
  inline FeedResponse() : FeedResponse(nullptr) {}
  ~FeedResponse() override;
  explicit PROTOBUF_CONSTEXPR FeedResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedResponse(const FeedResponse& from);
  FeedResponse(FeedResponse&& from) noexcept
    : FeedResponse() {
    *this = ::std::move(from);
  }

  inline FeedResponse& operator=(const FeedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedResponse& operator=(FeedResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedResponse* internal_default_instance() {
    return reinterpret_cast<const FeedResponse*>(
               &_FeedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeedResponse& a, FeedResponse& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedResponse& from);
  void MergeFrom(const FeedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedResponse";
  }
  protected:
  explicit FeedResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataOperationFieldNumber = 1,
    kFeedResponseMetadataFieldNumber = 2,
  };
  // repeated .feedwire.DataOperation data_operation = 1;
  int data_operation_size() const;
  private:
  int _internal_data_operation_size() const;
  public:
  void clear_data_operation();
  ::feedwire::DataOperation* mutable_data_operation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DataOperation >*
      mutable_data_operation();
  private:
  const ::feedwire::DataOperation& _internal_data_operation(int index) const;
  ::feedwire::DataOperation* _internal_add_data_operation();
  public:
  const ::feedwire::DataOperation& data_operation(int index) const;
  ::feedwire::DataOperation* add_data_operation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DataOperation >&
      data_operation() const;

  // optional .feedwire.FeedResponseMetadata feed_response_metadata = 2;
  bool has_feed_response_metadata() const;
  private:
  bool _internal_has_feed_response_metadata() const;
  public:
  void clear_feed_response_metadata();
  const ::feedwire::FeedResponseMetadata& feed_response_metadata() const;
  PROTOBUF_NODISCARD ::feedwire::FeedResponseMetadata* release_feed_response_metadata();
  ::feedwire::FeedResponseMetadata* mutable_feed_response_metadata();
  void set_allocated_feed_response_metadata(::feedwire::FeedResponseMetadata* feed_response_metadata);
  private:
  const ::feedwire::FeedResponseMetadata& _internal_feed_response_metadata() const;
  ::feedwire::FeedResponseMetadata* _internal_mutable_feed_response_metadata();
  public:
  void unsafe_arena_set_allocated_feed_response_metadata(
      ::feedwire::FeedResponseMetadata* feed_response_metadata);
  ::feedwire::FeedResponseMetadata* unsafe_arena_release_feed_response_metadata();

  // @@protoc_insertion_point(class_scope:feedwire.FeedResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DataOperation > data_operation_;
  ::feedwire::FeedResponseMetadata* feed_response_metadata_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto;
};
// -------------------------------------------------------------------

class FeedResponseMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedResponseMetadata) */ {
 public:
  inline FeedResponseMetadata() : FeedResponseMetadata(nullptr) {}
  ~FeedResponseMetadata() override;
  explicit PROTOBUF_CONSTEXPR FeedResponseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedResponseMetadata(const FeedResponseMetadata& from);
  FeedResponseMetadata(FeedResponseMetadata&& from) noexcept
    : FeedResponseMetadata() {
    *this = ::std::move(from);
  }

  inline FeedResponseMetadata& operator=(const FeedResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedResponseMetadata& operator=(FeedResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const FeedResponseMetadata*>(
               &_FeedResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedResponseMetadata& a, FeedResponseMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedResponseMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedResponseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedResponseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedResponseMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedResponseMetadata& from);
  void MergeFrom(const FeedResponseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedResponseMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedResponseMetadata";
  }
  protected:
  explicit FeedResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventIdFieldNumber = 2,
    kServerExperimentDataFieldNumber = 5,
    kContentLifetimeFieldNumber = 6,
    kInfoCardServingInfoFieldNumber = 7,
    kChromeFeedResponseMetadataFieldNumber = 326233599,
    kResponseTimeMsFieldNumber = 1,
    kPinnedContentFulfilledFieldNumber = 4,
  };
  // optional .feedwire.EventIdMessage event_id = 2;
  bool has_event_id() const;
  private:
  bool _internal_has_event_id() const;
  public:
  void clear_event_id();
  const ::feedwire::EventIdMessage& event_id() const;
  PROTOBUF_NODISCARD ::feedwire::EventIdMessage* release_event_id();
  ::feedwire::EventIdMessage* mutable_event_id();
  void set_allocated_event_id(::feedwire::EventIdMessage* event_id);
  private:
  const ::feedwire::EventIdMessage& _internal_event_id() const;
  ::feedwire::EventIdMessage* _internal_mutable_event_id();
  public:
  void unsafe_arena_set_allocated_event_id(
      ::feedwire::EventIdMessage* event_id);
  ::feedwire::EventIdMessage* unsafe_arena_release_event_id();

  // optional .feedwire.ServerExperimentData server_experiment_data = 5;
  bool has_server_experiment_data() const;
  private:
  bool _internal_has_server_experiment_data() const;
  public:
  void clear_server_experiment_data();
  const ::feedwire::ServerExperimentData& server_experiment_data() const;
  PROTOBUF_NODISCARD ::feedwire::ServerExperimentData* release_server_experiment_data();
  ::feedwire::ServerExperimentData* mutable_server_experiment_data();
  void set_allocated_server_experiment_data(::feedwire::ServerExperimentData* server_experiment_data);
  private:
  const ::feedwire::ServerExperimentData& _internal_server_experiment_data() const;
  ::feedwire::ServerExperimentData* _internal_mutable_server_experiment_data();
  public:
  void unsafe_arena_set_allocated_server_experiment_data(
      ::feedwire::ServerExperimentData* server_experiment_data);
  ::feedwire::ServerExperimentData* unsafe_arena_release_server_experiment_data();

  // optional .feedwire.ContentLifetime content_lifetime = 6;
  bool has_content_lifetime() const;
  private:
  bool _internal_has_content_lifetime() const;
  public:
  void clear_content_lifetime();
  const ::feedwire::ContentLifetime& content_lifetime() const;
  PROTOBUF_NODISCARD ::feedwire::ContentLifetime* release_content_lifetime();
  ::feedwire::ContentLifetime* mutable_content_lifetime();
  void set_allocated_content_lifetime(::feedwire::ContentLifetime* content_lifetime);
  private:
  const ::feedwire::ContentLifetime& _internal_content_lifetime() const;
  ::feedwire::ContentLifetime* _internal_mutable_content_lifetime();
  public:
  void unsafe_arena_set_allocated_content_lifetime(
      ::feedwire::ContentLifetime* content_lifetime);
  ::feedwire::ContentLifetime* unsafe_arena_release_content_lifetime();

  // optional .feedwire.InfoCardServingInfo info_card_serving_info = 7;
  bool has_info_card_serving_info() const;
  private:
  bool _internal_has_info_card_serving_info() const;
  public:
  void clear_info_card_serving_info();
  const ::feedwire::InfoCardServingInfo& info_card_serving_info() const;
  PROTOBUF_NODISCARD ::feedwire::InfoCardServingInfo* release_info_card_serving_info();
  ::feedwire::InfoCardServingInfo* mutable_info_card_serving_info();
  void set_allocated_info_card_serving_info(::feedwire::InfoCardServingInfo* info_card_serving_info);
  private:
  const ::feedwire::InfoCardServingInfo& _internal_info_card_serving_info() const;
  ::feedwire::InfoCardServingInfo* _internal_mutable_info_card_serving_info();
  public:
  void unsafe_arena_set_allocated_info_card_serving_info(
      ::feedwire::InfoCardServingInfo* info_card_serving_info);
  ::feedwire::InfoCardServingInfo* unsafe_arena_release_info_card_serving_info();

  // optional .feedwire.ChromeFeedResponseMetadata chrome_feed_response_metadata = 326233599;
  bool has_chrome_feed_response_metadata() const;
  private:
  bool _internal_has_chrome_feed_response_metadata() const;
  public:
  void clear_chrome_feed_response_metadata();
  const ::feedwire::ChromeFeedResponseMetadata& chrome_feed_response_metadata() const;
  PROTOBUF_NODISCARD ::feedwire::ChromeFeedResponseMetadata* release_chrome_feed_response_metadata();
  ::feedwire::ChromeFeedResponseMetadata* mutable_chrome_feed_response_metadata();
  void set_allocated_chrome_feed_response_metadata(::feedwire::ChromeFeedResponseMetadata* chrome_feed_response_metadata);
  private:
  const ::feedwire::ChromeFeedResponseMetadata& _internal_chrome_feed_response_metadata() const;
  ::feedwire::ChromeFeedResponseMetadata* _internal_mutable_chrome_feed_response_metadata();
  public:
  void unsafe_arena_set_allocated_chrome_feed_response_metadata(
      ::feedwire::ChromeFeedResponseMetadata* chrome_feed_response_metadata);
  ::feedwire::ChromeFeedResponseMetadata* unsafe_arena_release_chrome_feed_response_metadata();

  // optional int64 response_time_ms = 1;
  bool has_response_time_ms() const;
  private:
  bool _internal_has_response_time_ms() const;
  public:
  void clear_response_time_ms();
  int64_t response_time_ms() const;
  void set_response_time_ms(int64_t value);
  private:
  int64_t _internal_response_time_ms() const;
  void _internal_set_response_time_ms(int64_t value);
  public:

  // optional bool pinned_content_fulfilled = 4;
  bool has_pinned_content_fulfilled() const;
  private:
  bool _internal_has_pinned_content_fulfilled() const;
  public:
  void clear_pinned_content_fulfilled();
  bool pinned_content_fulfilled() const;
  void set_pinned_content_fulfilled(bool value);
  private:
  bool _internal_pinned_content_fulfilled() const;
  void _internal_set_pinned_content_fulfilled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.FeedResponseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::EventIdMessage* event_id_;
  ::feedwire::ServerExperimentData* server_experiment_data_;
  ::feedwire::ContentLifetime* content_lifetime_;
  ::feedwire::InfoCardServingInfo* info_card_serving_info_;
  ::feedwire::ChromeFeedResponseMetadata* chrome_feed_response_metadata_;
  int64_t response_time_ms_;
  bool pinned_content_fulfilled_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeedResponse

// repeated .feedwire.DataOperation data_operation = 1;
inline int FeedResponse::_internal_data_operation_size() const {
  return data_operation_.size();
}
inline int FeedResponse::data_operation_size() const {
  return _internal_data_operation_size();
}
inline ::feedwire::DataOperation* FeedResponse::mutable_data_operation(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponse.data_operation)
  return data_operation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DataOperation >*
FeedResponse::mutable_data_operation() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.FeedResponse.data_operation)
  return &data_operation_;
}
inline const ::feedwire::DataOperation& FeedResponse::_internal_data_operation(int index) const {
  return data_operation_.Get(index);
}
inline const ::feedwire::DataOperation& FeedResponse::data_operation(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponse.data_operation)
  return _internal_data_operation(index);
}
inline ::feedwire::DataOperation* FeedResponse::_internal_add_data_operation() {
  return data_operation_.Add();
}
inline ::feedwire::DataOperation* FeedResponse::add_data_operation() {
  ::feedwire::DataOperation* _add = _internal_add_data_operation();
  // @@protoc_insertion_point(field_add:feedwire.FeedResponse.data_operation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::DataOperation >&
FeedResponse::data_operation() const {
  // @@protoc_insertion_point(field_list:feedwire.FeedResponse.data_operation)
  return data_operation_;
}

// optional .feedwire.FeedResponseMetadata feed_response_metadata = 2;
inline bool FeedResponse::_internal_has_feed_response_metadata() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || feed_response_metadata_ != nullptr);
  return value;
}
inline bool FeedResponse::has_feed_response_metadata() const {
  return _internal_has_feed_response_metadata();
}
inline void FeedResponse::clear_feed_response_metadata() {
  if (feed_response_metadata_ != nullptr) feed_response_metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::feedwire::FeedResponseMetadata& FeedResponse::_internal_feed_response_metadata() const {
  const ::feedwire::FeedResponseMetadata* p = feed_response_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::FeedResponseMetadata&>(
      ::feedwire::_FeedResponseMetadata_default_instance_);
}
inline const ::feedwire::FeedResponseMetadata& FeedResponse::feed_response_metadata() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponse.feed_response_metadata)
  return _internal_feed_response_metadata();
}
inline void FeedResponse::unsafe_arena_set_allocated_feed_response_metadata(
    ::feedwire::FeedResponseMetadata* feed_response_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_response_metadata_);
  }
  feed_response_metadata_ = feed_response_metadata;
  if (feed_response_metadata) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedResponse.feed_response_metadata)
}
inline ::feedwire::FeedResponseMetadata* FeedResponse::release_feed_response_metadata() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::FeedResponseMetadata* temp = feed_response_metadata_;
  feed_response_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::FeedResponseMetadata* FeedResponse::unsafe_arena_release_feed_response_metadata() {
  // @@protoc_insertion_point(field_release:feedwire.FeedResponse.feed_response_metadata)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::FeedResponseMetadata* temp = feed_response_metadata_;
  feed_response_metadata_ = nullptr;
  return temp;
}
inline ::feedwire::FeedResponseMetadata* FeedResponse::_internal_mutable_feed_response_metadata() {
  _has_bits_[0] |= 0x00000001u;
  if (feed_response_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::FeedResponseMetadata>(GetArenaForAllocation());
    feed_response_metadata_ = p;
  }
  return feed_response_metadata_;
}
inline ::feedwire::FeedResponseMetadata* FeedResponse::mutable_feed_response_metadata() {
  ::feedwire::FeedResponseMetadata* _msg = _internal_mutable_feed_response_metadata();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponse.feed_response_metadata)
  return _msg;
}
inline void FeedResponse::set_allocated_feed_response_metadata(::feedwire::FeedResponseMetadata* feed_response_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete feed_response_metadata_;
  }
  if (feed_response_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(feed_response_metadata);
    if (message_arena != submessage_arena) {
      feed_response_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed_response_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  feed_response_metadata_ = feed_response_metadata;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedResponse.feed_response_metadata)
}

// -------------------------------------------------------------------

// FeedResponseMetadata

// optional int64 response_time_ms = 1;
inline bool FeedResponseMetadata::_internal_has_response_time_ms() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FeedResponseMetadata::has_response_time_ms() const {
  return _internal_has_response_time_ms();
}
inline void FeedResponseMetadata::clear_response_time_ms() {
  response_time_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000020u;
}
inline int64_t FeedResponseMetadata::_internal_response_time_ms() const {
  return response_time_ms_;
}
inline int64_t FeedResponseMetadata::response_time_ms() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.response_time_ms)
  return _internal_response_time_ms();
}
inline void FeedResponseMetadata::_internal_set_response_time_ms(int64_t value) {
  _has_bits_[0] |= 0x00000020u;
  response_time_ms_ = value;
}
inline void FeedResponseMetadata::set_response_time_ms(int64_t value) {
  _internal_set_response_time_ms(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedResponseMetadata.response_time_ms)
}

// optional .feedwire.EventIdMessage event_id = 2;
inline bool FeedResponseMetadata::_internal_has_event_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || event_id_ != nullptr);
  return value;
}
inline bool FeedResponseMetadata::has_event_id() const {
  return _internal_has_event_id();
}
inline const ::feedwire::EventIdMessage& FeedResponseMetadata::_internal_event_id() const {
  const ::feedwire::EventIdMessage* p = event_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::EventIdMessage&>(
      ::feedwire::_EventIdMessage_default_instance_);
}
inline const ::feedwire::EventIdMessage& FeedResponseMetadata::event_id() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.event_id)
  return _internal_event_id();
}
inline void FeedResponseMetadata::unsafe_arena_set_allocated_event_id(
    ::feedwire::EventIdMessage* event_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_id_);
  }
  event_id_ = event_id;
  if (event_id) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedResponseMetadata.event_id)
}
inline ::feedwire::EventIdMessage* FeedResponseMetadata::release_event_id() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::EventIdMessage* temp = event_id_;
  event_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::EventIdMessage* FeedResponseMetadata::unsafe_arena_release_event_id() {
  // @@protoc_insertion_point(field_release:feedwire.FeedResponseMetadata.event_id)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::EventIdMessage* temp = event_id_;
  event_id_ = nullptr;
  return temp;
}
inline ::feedwire::EventIdMessage* FeedResponseMetadata::_internal_mutable_event_id() {
  _has_bits_[0] |= 0x00000001u;
  if (event_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::EventIdMessage>(GetArenaForAllocation());
    event_id_ = p;
  }
  return event_id_;
}
inline ::feedwire::EventIdMessage* FeedResponseMetadata::mutable_event_id() {
  ::feedwire::EventIdMessage* _msg = _internal_mutable_event_id();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponseMetadata.event_id)
  return _msg;
}
inline void FeedResponseMetadata::set_allocated_event_id(::feedwire::EventIdMessage* event_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_id_);
  }
  if (event_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_id));
    if (message_arena != submessage_arena) {
      event_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  event_id_ = event_id;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedResponseMetadata.event_id)
}

// optional bool pinned_content_fulfilled = 4;
inline bool FeedResponseMetadata::_internal_has_pinned_content_fulfilled() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool FeedResponseMetadata::has_pinned_content_fulfilled() const {
  return _internal_has_pinned_content_fulfilled();
}
inline void FeedResponseMetadata::clear_pinned_content_fulfilled() {
  pinned_content_fulfilled_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool FeedResponseMetadata::_internal_pinned_content_fulfilled() const {
  return pinned_content_fulfilled_;
}
inline bool FeedResponseMetadata::pinned_content_fulfilled() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.pinned_content_fulfilled)
  return _internal_pinned_content_fulfilled();
}
inline void FeedResponseMetadata::_internal_set_pinned_content_fulfilled(bool value) {
  _has_bits_[0] |= 0x00000040u;
  pinned_content_fulfilled_ = value;
}
inline void FeedResponseMetadata::set_pinned_content_fulfilled(bool value) {
  _internal_set_pinned_content_fulfilled(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedResponseMetadata.pinned_content_fulfilled)
}

// optional .feedwire.ServerExperimentData server_experiment_data = 5;
inline bool FeedResponseMetadata::_internal_has_server_experiment_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || server_experiment_data_ != nullptr);
  return value;
}
inline bool FeedResponseMetadata::has_server_experiment_data() const {
  return _internal_has_server_experiment_data();
}
inline const ::feedwire::ServerExperimentData& FeedResponseMetadata::_internal_server_experiment_data() const {
  const ::feedwire::ServerExperimentData* p = server_experiment_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ServerExperimentData&>(
      ::feedwire::_ServerExperimentData_default_instance_);
}
inline const ::feedwire::ServerExperimentData& FeedResponseMetadata::server_experiment_data() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.server_experiment_data)
  return _internal_server_experiment_data();
}
inline void FeedResponseMetadata::unsafe_arena_set_allocated_server_experiment_data(
    ::feedwire::ServerExperimentData* server_experiment_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_experiment_data_);
  }
  server_experiment_data_ = server_experiment_data;
  if (server_experiment_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedResponseMetadata.server_experiment_data)
}
inline ::feedwire::ServerExperimentData* FeedResponseMetadata::release_server_experiment_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::ServerExperimentData* temp = server_experiment_data_;
  server_experiment_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ServerExperimentData* FeedResponseMetadata::unsafe_arena_release_server_experiment_data() {
  // @@protoc_insertion_point(field_release:feedwire.FeedResponseMetadata.server_experiment_data)
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::ServerExperimentData* temp = server_experiment_data_;
  server_experiment_data_ = nullptr;
  return temp;
}
inline ::feedwire::ServerExperimentData* FeedResponseMetadata::_internal_mutable_server_experiment_data() {
  _has_bits_[0] |= 0x00000002u;
  if (server_experiment_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ServerExperimentData>(GetArenaForAllocation());
    server_experiment_data_ = p;
  }
  return server_experiment_data_;
}
inline ::feedwire::ServerExperimentData* FeedResponseMetadata::mutable_server_experiment_data() {
  ::feedwire::ServerExperimentData* _msg = _internal_mutable_server_experiment_data();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponseMetadata.server_experiment_data)
  return _msg;
}
inline void FeedResponseMetadata::set_allocated_server_experiment_data(::feedwire::ServerExperimentData* server_experiment_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_experiment_data_);
  }
  if (server_experiment_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(server_experiment_data));
    if (message_arena != submessage_arena) {
      server_experiment_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server_experiment_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  server_experiment_data_ = server_experiment_data;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedResponseMetadata.server_experiment_data)
}

// optional .feedwire.ContentLifetime content_lifetime = 6;
inline bool FeedResponseMetadata::_internal_has_content_lifetime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || content_lifetime_ != nullptr);
  return value;
}
inline bool FeedResponseMetadata::has_content_lifetime() const {
  return _internal_has_content_lifetime();
}
inline const ::feedwire::ContentLifetime& FeedResponseMetadata::_internal_content_lifetime() const {
  const ::feedwire::ContentLifetime* p = content_lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ContentLifetime&>(
      ::feedwire::_ContentLifetime_default_instance_);
}
inline const ::feedwire::ContentLifetime& FeedResponseMetadata::content_lifetime() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.content_lifetime)
  return _internal_content_lifetime();
}
inline void FeedResponseMetadata::unsafe_arena_set_allocated_content_lifetime(
    ::feedwire::ContentLifetime* content_lifetime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_lifetime_);
  }
  content_lifetime_ = content_lifetime;
  if (content_lifetime) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedResponseMetadata.content_lifetime)
}
inline ::feedwire::ContentLifetime* FeedResponseMetadata::release_content_lifetime() {
  _has_bits_[0] &= ~0x00000004u;
  ::feedwire::ContentLifetime* temp = content_lifetime_;
  content_lifetime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ContentLifetime* FeedResponseMetadata::unsafe_arena_release_content_lifetime() {
  // @@protoc_insertion_point(field_release:feedwire.FeedResponseMetadata.content_lifetime)
  _has_bits_[0] &= ~0x00000004u;
  ::feedwire::ContentLifetime* temp = content_lifetime_;
  content_lifetime_ = nullptr;
  return temp;
}
inline ::feedwire::ContentLifetime* FeedResponseMetadata::_internal_mutable_content_lifetime() {
  _has_bits_[0] |= 0x00000004u;
  if (content_lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ContentLifetime>(GetArenaForAllocation());
    content_lifetime_ = p;
  }
  return content_lifetime_;
}
inline ::feedwire::ContentLifetime* FeedResponseMetadata::mutable_content_lifetime() {
  ::feedwire::ContentLifetime* _msg = _internal_mutable_content_lifetime();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponseMetadata.content_lifetime)
  return _msg;
}
inline void FeedResponseMetadata::set_allocated_content_lifetime(::feedwire::ContentLifetime* content_lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_lifetime_);
  }
  if (content_lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_lifetime));
    if (message_arena != submessage_arena) {
      content_lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content_lifetime, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  content_lifetime_ = content_lifetime;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedResponseMetadata.content_lifetime)
}

// optional .feedwire.InfoCardServingInfo info_card_serving_info = 7;
inline bool FeedResponseMetadata::_internal_has_info_card_serving_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || info_card_serving_info_ != nullptr);
  return value;
}
inline bool FeedResponseMetadata::has_info_card_serving_info() const {
  return _internal_has_info_card_serving_info();
}
inline const ::feedwire::InfoCardServingInfo& FeedResponseMetadata::_internal_info_card_serving_info() const {
  const ::feedwire::InfoCardServingInfo* p = info_card_serving_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::InfoCardServingInfo&>(
      ::feedwire::_InfoCardServingInfo_default_instance_);
}
inline const ::feedwire::InfoCardServingInfo& FeedResponseMetadata::info_card_serving_info() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.info_card_serving_info)
  return _internal_info_card_serving_info();
}
inline void FeedResponseMetadata::unsafe_arena_set_allocated_info_card_serving_info(
    ::feedwire::InfoCardServingInfo* info_card_serving_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_card_serving_info_);
  }
  info_card_serving_info_ = info_card_serving_info;
  if (info_card_serving_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedResponseMetadata.info_card_serving_info)
}
inline ::feedwire::InfoCardServingInfo* FeedResponseMetadata::release_info_card_serving_info() {
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::InfoCardServingInfo* temp = info_card_serving_info_;
  info_card_serving_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::InfoCardServingInfo* FeedResponseMetadata::unsafe_arena_release_info_card_serving_info() {
  // @@protoc_insertion_point(field_release:feedwire.FeedResponseMetadata.info_card_serving_info)
  _has_bits_[0] &= ~0x00000008u;
  ::feedwire::InfoCardServingInfo* temp = info_card_serving_info_;
  info_card_serving_info_ = nullptr;
  return temp;
}
inline ::feedwire::InfoCardServingInfo* FeedResponseMetadata::_internal_mutable_info_card_serving_info() {
  _has_bits_[0] |= 0x00000008u;
  if (info_card_serving_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::InfoCardServingInfo>(GetArenaForAllocation());
    info_card_serving_info_ = p;
  }
  return info_card_serving_info_;
}
inline ::feedwire::InfoCardServingInfo* FeedResponseMetadata::mutable_info_card_serving_info() {
  ::feedwire::InfoCardServingInfo* _msg = _internal_mutable_info_card_serving_info();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponseMetadata.info_card_serving_info)
  return _msg;
}
inline void FeedResponseMetadata::set_allocated_info_card_serving_info(::feedwire::InfoCardServingInfo* info_card_serving_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_card_serving_info_);
  }
  if (info_card_serving_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_card_serving_info));
    if (message_arena != submessage_arena) {
      info_card_serving_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info_card_serving_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  info_card_serving_info_ = info_card_serving_info;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedResponseMetadata.info_card_serving_info)
}

// optional .feedwire.ChromeFeedResponseMetadata chrome_feed_response_metadata = 326233599;
inline bool FeedResponseMetadata::_internal_has_chrome_feed_response_metadata() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || chrome_feed_response_metadata_ != nullptr);
  return value;
}
inline bool FeedResponseMetadata::has_chrome_feed_response_metadata() const {
  return _internal_has_chrome_feed_response_metadata();
}
inline const ::feedwire::ChromeFeedResponseMetadata& FeedResponseMetadata::_internal_chrome_feed_response_metadata() const {
  const ::feedwire::ChromeFeedResponseMetadata* p = chrome_feed_response_metadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ChromeFeedResponseMetadata&>(
      ::feedwire::_ChromeFeedResponseMetadata_default_instance_);
}
inline const ::feedwire::ChromeFeedResponseMetadata& FeedResponseMetadata::chrome_feed_response_metadata() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedResponseMetadata.chrome_feed_response_metadata)
  return _internal_chrome_feed_response_metadata();
}
inline void FeedResponseMetadata::unsafe_arena_set_allocated_chrome_feed_response_metadata(
    ::feedwire::ChromeFeedResponseMetadata* chrome_feed_response_metadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_feed_response_metadata_);
  }
  chrome_feed_response_metadata_ = chrome_feed_response_metadata;
  if (chrome_feed_response_metadata) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedResponseMetadata.chrome_feed_response_metadata)
}
inline ::feedwire::ChromeFeedResponseMetadata* FeedResponseMetadata::release_chrome_feed_response_metadata() {
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::ChromeFeedResponseMetadata* temp = chrome_feed_response_metadata_;
  chrome_feed_response_metadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ChromeFeedResponseMetadata* FeedResponseMetadata::unsafe_arena_release_chrome_feed_response_metadata() {
  // @@protoc_insertion_point(field_release:feedwire.FeedResponseMetadata.chrome_feed_response_metadata)
  _has_bits_[0] &= ~0x00000010u;
  ::feedwire::ChromeFeedResponseMetadata* temp = chrome_feed_response_metadata_;
  chrome_feed_response_metadata_ = nullptr;
  return temp;
}
inline ::feedwire::ChromeFeedResponseMetadata* FeedResponseMetadata::_internal_mutable_chrome_feed_response_metadata() {
  _has_bits_[0] |= 0x00000010u;
  if (chrome_feed_response_metadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ChromeFeedResponseMetadata>(GetArenaForAllocation());
    chrome_feed_response_metadata_ = p;
  }
  return chrome_feed_response_metadata_;
}
inline ::feedwire::ChromeFeedResponseMetadata* FeedResponseMetadata::mutable_chrome_feed_response_metadata() {
  ::feedwire::ChromeFeedResponseMetadata* _msg = _internal_mutable_chrome_feed_response_metadata();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedResponseMetadata.chrome_feed_response_metadata)
  return _msg;
}
inline void FeedResponseMetadata::set_allocated_chrome_feed_response_metadata(::feedwire::ChromeFeedResponseMetadata* chrome_feed_response_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_feed_response_metadata_);
  }
  if (chrome_feed_response_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chrome_feed_response_metadata));
    if (message_arena != submessage_arena) {
      chrome_feed_response_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chrome_feed_response_metadata, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  chrome_feed_response_metadata_ = chrome_feed_response_metadata;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedResponseMetadata.chrome_feed_response_metadata)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5fresponse_2eproto
