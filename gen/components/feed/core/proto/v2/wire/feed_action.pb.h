// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/feed_action.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "components/feed/core/proto/v2/wire/action_payload.pb.h"
#include "components/feed/core/proto/v2/wire/action_surface.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class FeedAction;
struct FeedActionDefaultTypeInternal;
extern FeedActionDefaultTypeInternal _FeedAction_default_instance_;
class FeedAction_ClientData;
struct FeedAction_ClientDataDefaultTypeInternal;
extern FeedAction_ClientDataDefaultTypeInternal _FeedAction_ClientData_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::FeedAction* Arena::CreateMaybeMessage<::feedwire::FeedAction>(Arena*);
template<> ::feedwire::FeedAction_ClientData* Arena::CreateMaybeMessage<::feedwire::FeedAction_ClientData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

enum FeedAction_ClientData_ActionOrigin : int {
  FeedAction_ClientData_ActionOrigin_UNKNOWN_ORIGIN = 0,
  FeedAction_ClientData_ActionOrigin_CLIENT_SESSION = 1,
  FeedAction_ClientData_ActionOrigin_CLIENT_CACHE = 2
};
bool FeedAction_ClientData_ActionOrigin_IsValid(int value);
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData_ActionOrigin_ActionOrigin_MIN = FeedAction_ClientData_ActionOrigin_UNKNOWN_ORIGIN;
constexpr FeedAction_ClientData_ActionOrigin FeedAction_ClientData_ActionOrigin_ActionOrigin_MAX = FeedAction_ClientData_ActionOrigin_CLIENT_CACHE;
constexpr int FeedAction_ClientData_ActionOrigin_ActionOrigin_ARRAYSIZE = FeedAction_ClientData_ActionOrigin_ActionOrigin_MAX + 1;

const std::string& FeedAction_ClientData_ActionOrigin_Name(FeedAction_ClientData_ActionOrigin value);
template<typename T>
inline const std::string& FeedAction_ClientData_ActionOrigin_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FeedAction_ClientData_ActionOrigin>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FeedAction_ClientData_ActionOrigin_Name.");
  return FeedAction_ClientData_ActionOrigin_Name(static_cast<FeedAction_ClientData_ActionOrigin>(enum_t_value));
}
bool FeedAction_ClientData_ActionOrigin_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FeedAction_ClientData_ActionOrigin* value);
// ===================================================================

class FeedAction_ClientData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedAction.ClientData) */ {
 public:
  inline FeedAction_ClientData() : FeedAction_ClientData(nullptr) {}
  ~FeedAction_ClientData() override;
  explicit PROTOBUF_CONSTEXPR FeedAction_ClientData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedAction_ClientData(const FeedAction_ClientData& from);
  FeedAction_ClientData(FeedAction_ClientData&& from) noexcept
    : FeedAction_ClientData() {
    *this = ::std::move(from);
  }

  inline FeedAction_ClientData& operator=(const FeedAction_ClientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedAction_ClientData& operator=(FeedAction_ClientData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedAction_ClientData& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedAction_ClientData* internal_default_instance() {
    return reinterpret_cast<const FeedAction_ClientData*>(
               &_FeedAction_ClientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeedAction_ClientData& a, FeedAction_ClientData& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedAction_ClientData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedAction_ClientData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedAction_ClientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedAction_ClientData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedAction_ClientData& from);
  void MergeFrom(const FeedAction_ClientData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedAction_ClientData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedAction.ClientData";
  }
  protected:
  explicit FeedAction_ClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FeedAction_ClientData_ActionOrigin ActionOrigin;
  static constexpr ActionOrigin UNKNOWN_ORIGIN =
    FeedAction_ClientData_ActionOrigin_UNKNOWN_ORIGIN;
  static constexpr ActionOrigin CLIENT_SESSION =
    FeedAction_ClientData_ActionOrigin_CLIENT_SESSION;
  static constexpr ActionOrigin CLIENT_CACHE =
    FeedAction_ClientData_ActionOrigin_CLIENT_CACHE;
  static inline bool ActionOrigin_IsValid(int value) {
    return FeedAction_ClientData_ActionOrigin_IsValid(value);
  }
  static constexpr ActionOrigin ActionOrigin_MIN =
    FeedAction_ClientData_ActionOrigin_ActionOrigin_MIN;
  static constexpr ActionOrigin ActionOrigin_MAX =
    FeedAction_ClientData_ActionOrigin_ActionOrigin_MAX;
  static constexpr int ActionOrigin_ARRAYSIZE =
    FeedAction_ClientData_ActionOrigin_ActionOrigin_ARRAYSIZE;
  template<typename T>
  static inline const std::string& ActionOrigin_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ActionOrigin>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ActionOrigin_Name.");
    return FeedAction_ClientData_ActionOrigin_Name(enum_t_value);
  }
  static inline bool ActionOrigin_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ActionOrigin* value) {
    return FeedAction_ClientData_ActionOrigin_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampSecondsFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
    kDurationMsFieldNumber = 3,
    kActionOriginFieldNumber = 4,
    kActionSurfaceFieldNumber = 5,
  };
  // optional int64 timestamp_seconds = 1;
  bool has_timestamp_seconds() const;
  private:
  bool _internal_has_timestamp_seconds() const;
  public:
  void clear_timestamp_seconds();
  int64_t timestamp_seconds() const;
  void set_timestamp_seconds(int64_t value);
  private:
  int64_t _internal_timestamp_seconds() const;
  void _internal_set_timestamp_seconds(int64_t value);
  public:

  // optional int64 sequence_number = 2;
  bool has_sequence_number() const;
  private:
  bool _internal_has_sequence_number() const;
  public:
  void clear_sequence_number();
  int64_t sequence_number() const;
  void set_sequence_number(int64_t value);
  private:
  int64_t _internal_sequence_number() const;
  void _internal_set_sequence_number(int64_t value);
  public:

  // optional int64 duration_ms = 3;
  bool has_duration_ms() const;
  private:
  bool _internal_has_duration_ms() const;
  public:
  void clear_duration_ms();
  int64_t duration_ms() const;
  void set_duration_ms(int64_t value);
  private:
  int64_t _internal_duration_ms() const;
  void _internal_set_duration_ms(int64_t value);
  public:

  // optional .feedwire.FeedAction.ClientData.ActionOrigin action_origin = 4;
  bool has_action_origin() const;
  private:
  bool _internal_has_action_origin() const;
  public:
  void clear_action_origin();
  ::feedwire::FeedAction_ClientData_ActionOrigin action_origin() const;
  void set_action_origin(::feedwire::FeedAction_ClientData_ActionOrigin value);
  private:
  ::feedwire::FeedAction_ClientData_ActionOrigin _internal_action_origin() const;
  void _internal_set_action_origin(::feedwire::FeedAction_ClientData_ActionOrigin value);
  public:

  // optional .feedwire.ActionSurface action_surface = 5;
  bool has_action_surface() const;
  private:
  bool _internal_has_action_surface() const;
  public:
  void clear_action_surface();
  ::feedwire::ActionSurface action_surface() const;
  void set_action_surface(::feedwire::ActionSurface value);
  private:
  ::feedwire::ActionSurface _internal_action_surface() const;
  void _internal_set_action_surface(::feedwire::ActionSurface value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.FeedAction.ClientData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int64_t timestamp_seconds_;
  int64_t sequence_number_;
  int64_t duration_ms_;
  int action_origin_;
  int action_surface_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto;
};
// -------------------------------------------------------------------

class FeedAction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.FeedAction) */ {
 public:
  inline FeedAction() : FeedAction(nullptr) {}
  ~FeedAction() override;
  explicit PROTOBUF_CONSTEXPR FeedAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FeedAction(const FeedAction& from);
  FeedAction(FeedAction&& from) noexcept
    : FeedAction() {
    *this = ::std::move(from);
  }

  inline FeedAction& operator=(const FeedAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedAction& operator=(FeedAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const FeedAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedAction* internal_default_instance() {
    return reinterpret_cast<const FeedAction*>(
               &_FeedAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedAction& a, FeedAction& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(FeedAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const FeedAction& from);
  void MergeFrom(const FeedAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FeedAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.FeedAction";
  }
  protected:
  explicit FeedAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef FeedAction_ClientData ClientData;

  // accessors -------------------------------------------------------

  enum : int {
    kActionPayloadFieldNumber = 2,
    kClientDataFieldNumber = 3,
  };
  // optional .feedwire.ActionPayload action_payload = 2;
  bool has_action_payload() const;
  private:
  bool _internal_has_action_payload() const;
  public:
  void clear_action_payload();
  const ::feedwire::ActionPayload& action_payload() const;
  PROTOBUF_NODISCARD ::feedwire::ActionPayload* release_action_payload();
  ::feedwire::ActionPayload* mutable_action_payload();
  void set_allocated_action_payload(::feedwire::ActionPayload* action_payload);
  private:
  const ::feedwire::ActionPayload& _internal_action_payload() const;
  ::feedwire::ActionPayload* _internal_mutable_action_payload();
  public:
  void unsafe_arena_set_allocated_action_payload(
      ::feedwire::ActionPayload* action_payload);
  ::feedwire::ActionPayload* unsafe_arena_release_action_payload();

  // optional .feedwire.FeedAction.ClientData client_data = 3;
  bool has_client_data() const;
  private:
  bool _internal_has_client_data() const;
  public:
  void clear_client_data();
  const ::feedwire::FeedAction_ClientData& client_data() const;
  PROTOBUF_NODISCARD ::feedwire::FeedAction_ClientData* release_client_data();
  ::feedwire::FeedAction_ClientData* mutable_client_data();
  void set_allocated_client_data(::feedwire::FeedAction_ClientData* client_data);
  private:
  const ::feedwire::FeedAction_ClientData& _internal_client_data() const;
  ::feedwire::FeedAction_ClientData* _internal_mutable_client_data();
  public:
  void unsafe_arena_set_allocated_client_data(
      ::feedwire::FeedAction_ClientData* client_data);
  ::feedwire::FeedAction_ClientData* unsafe_arena_release_client_data();

  // @@protoc_insertion_point(class_scope:feedwire.FeedAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::feedwire::ActionPayload* action_payload_;
  ::feedwire::FeedAction_ClientData* client_data_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FeedAction_ClientData

// optional int64 timestamp_seconds = 1;
inline bool FeedAction_ClientData::_internal_has_timestamp_seconds() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FeedAction_ClientData::has_timestamp_seconds() const {
  return _internal_has_timestamp_seconds();
}
inline void FeedAction_ClientData::clear_timestamp_seconds() {
  timestamp_seconds_ = int64_t{0};
  _has_bits_[0] &= ~0x00000001u;
}
inline int64_t FeedAction_ClientData::_internal_timestamp_seconds() const {
  return timestamp_seconds_;
}
inline int64_t FeedAction_ClientData::timestamp_seconds() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.ClientData.timestamp_seconds)
  return _internal_timestamp_seconds();
}
inline void FeedAction_ClientData::_internal_set_timestamp_seconds(int64_t value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_seconds_ = value;
}
inline void FeedAction_ClientData::set_timestamp_seconds(int64_t value) {
  _internal_set_timestamp_seconds(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedAction.ClientData.timestamp_seconds)
}

// optional int64 sequence_number = 2;
inline bool FeedAction_ClientData::_internal_has_sequence_number() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FeedAction_ClientData::has_sequence_number() const {
  return _internal_has_sequence_number();
}
inline void FeedAction_ClientData::clear_sequence_number() {
  sequence_number_ = int64_t{0};
  _has_bits_[0] &= ~0x00000002u;
}
inline int64_t FeedAction_ClientData::_internal_sequence_number() const {
  return sequence_number_;
}
inline int64_t FeedAction_ClientData::sequence_number() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.ClientData.sequence_number)
  return _internal_sequence_number();
}
inline void FeedAction_ClientData::_internal_set_sequence_number(int64_t value) {
  _has_bits_[0] |= 0x00000002u;
  sequence_number_ = value;
}
inline void FeedAction_ClientData::set_sequence_number(int64_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedAction.ClientData.sequence_number)
}

// optional int64 duration_ms = 3;
inline bool FeedAction_ClientData::_internal_has_duration_ms() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FeedAction_ClientData::has_duration_ms() const {
  return _internal_has_duration_ms();
}
inline void FeedAction_ClientData::clear_duration_ms() {
  duration_ms_ = int64_t{0};
  _has_bits_[0] &= ~0x00000004u;
}
inline int64_t FeedAction_ClientData::_internal_duration_ms() const {
  return duration_ms_;
}
inline int64_t FeedAction_ClientData::duration_ms() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.ClientData.duration_ms)
  return _internal_duration_ms();
}
inline void FeedAction_ClientData::_internal_set_duration_ms(int64_t value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ms_ = value;
}
inline void FeedAction_ClientData::set_duration_ms(int64_t value) {
  _internal_set_duration_ms(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedAction.ClientData.duration_ms)
}

// optional .feedwire.FeedAction.ClientData.ActionOrigin action_origin = 4;
inline bool FeedAction_ClientData::_internal_has_action_origin() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FeedAction_ClientData::has_action_origin() const {
  return _internal_has_action_origin();
}
inline void FeedAction_ClientData::clear_action_origin() {
  action_origin_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::feedwire::FeedAction_ClientData_ActionOrigin FeedAction_ClientData::_internal_action_origin() const {
  return static_cast< ::feedwire::FeedAction_ClientData_ActionOrigin >(action_origin_);
}
inline ::feedwire::FeedAction_ClientData_ActionOrigin FeedAction_ClientData::action_origin() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.ClientData.action_origin)
  return _internal_action_origin();
}
inline void FeedAction_ClientData::_internal_set_action_origin(::feedwire::FeedAction_ClientData_ActionOrigin value) {
  assert(::feedwire::FeedAction_ClientData_ActionOrigin_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  action_origin_ = value;
}
inline void FeedAction_ClientData::set_action_origin(::feedwire::FeedAction_ClientData_ActionOrigin value) {
  _internal_set_action_origin(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedAction.ClientData.action_origin)
}

// optional .feedwire.ActionSurface action_surface = 5;
inline bool FeedAction_ClientData::_internal_has_action_surface() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FeedAction_ClientData::has_action_surface() const {
  return _internal_has_action_surface();
}
inline void FeedAction_ClientData::clear_action_surface() {
  action_surface_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::feedwire::ActionSurface FeedAction_ClientData::_internal_action_surface() const {
  return static_cast< ::feedwire::ActionSurface >(action_surface_);
}
inline ::feedwire::ActionSurface FeedAction_ClientData::action_surface() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.ClientData.action_surface)
  return _internal_action_surface();
}
inline void FeedAction_ClientData::_internal_set_action_surface(::feedwire::ActionSurface value) {
  assert(::feedwire::ActionSurface_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  action_surface_ = value;
}
inline void FeedAction_ClientData::set_action_surface(::feedwire::ActionSurface value) {
  _internal_set_action_surface(value);
  // @@protoc_insertion_point(field_set:feedwire.FeedAction.ClientData.action_surface)
}

// -------------------------------------------------------------------

// FeedAction

// optional .feedwire.ActionPayload action_payload = 2;
inline bool FeedAction::_internal_has_action_payload() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_payload_ != nullptr);
  return value;
}
inline bool FeedAction::has_action_payload() const {
  return _internal_has_action_payload();
}
inline const ::feedwire::ActionPayload& FeedAction::_internal_action_payload() const {
  const ::feedwire::ActionPayload* p = action_payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::ActionPayload&>(
      ::feedwire::_ActionPayload_default_instance_);
}
inline const ::feedwire::ActionPayload& FeedAction::action_payload() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.action_payload)
  return _internal_action_payload();
}
inline void FeedAction::unsafe_arena_set_allocated_action_payload(
    ::feedwire::ActionPayload* action_payload) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_payload_);
  }
  action_payload_ = action_payload;
  if (action_payload) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedAction.action_payload)
}
inline ::feedwire::ActionPayload* FeedAction::release_action_payload() {
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::ActionPayload* temp = action_payload_;
  action_payload_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::ActionPayload* FeedAction::unsafe_arena_release_action_payload() {
  // @@protoc_insertion_point(field_release:feedwire.FeedAction.action_payload)
  _has_bits_[0] &= ~0x00000001u;
  ::feedwire::ActionPayload* temp = action_payload_;
  action_payload_ = nullptr;
  return temp;
}
inline ::feedwire::ActionPayload* FeedAction::_internal_mutable_action_payload() {
  _has_bits_[0] |= 0x00000001u;
  if (action_payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::ActionPayload>(GetArenaForAllocation());
    action_payload_ = p;
  }
  return action_payload_;
}
inline ::feedwire::ActionPayload* FeedAction::mutable_action_payload() {
  ::feedwire::ActionPayload* _msg = _internal_mutable_action_payload();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedAction.action_payload)
  return _msg;
}
inline void FeedAction::set_allocated_action_payload(::feedwire::ActionPayload* action_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_payload_);
  }
  if (action_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_payload));
    if (message_arena != submessage_arena) {
      action_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_payload, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_payload_ = action_payload;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedAction.action_payload)
}

// optional .feedwire.FeedAction.ClientData client_data = 3;
inline bool FeedAction::_internal_has_client_data() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || client_data_ != nullptr);
  return value;
}
inline bool FeedAction::has_client_data() const {
  return _internal_has_client_data();
}
inline void FeedAction::clear_client_data() {
  if (client_data_ != nullptr) client_data_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::feedwire::FeedAction_ClientData& FeedAction::_internal_client_data() const {
  const ::feedwire::FeedAction_ClientData* p = client_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::feedwire::FeedAction_ClientData&>(
      ::feedwire::_FeedAction_ClientData_default_instance_);
}
inline const ::feedwire::FeedAction_ClientData& FeedAction::client_data() const {
  // @@protoc_insertion_point(field_get:feedwire.FeedAction.client_data)
  return _internal_client_data();
}
inline void FeedAction::unsafe_arena_set_allocated_client_data(
    ::feedwire::FeedAction_ClientData* client_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_data_);
  }
  client_data_ = client_data;
  if (client_data) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:feedwire.FeedAction.client_data)
}
inline ::feedwire::FeedAction_ClientData* FeedAction::release_client_data() {
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::FeedAction_ClientData* temp = client_data_;
  client_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::feedwire::FeedAction_ClientData* FeedAction::unsafe_arena_release_client_data() {
  // @@protoc_insertion_point(field_release:feedwire.FeedAction.client_data)
  _has_bits_[0] &= ~0x00000002u;
  ::feedwire::FeedAction_ClientData* temp = client_data_;
  client_data_ = nullptr;
  return temp;
}
inline ::feedwire::FeedAction_ClientData* FeedAction::_internal_mutable_client_data() {
  _has_bits_[0] |= 0x00000002u;
  if (client_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::feedwire::FeedAction_ClientData>(GetArenaForAllocation());
    client_data_ = p;
  }
  return client_data_;
}
inline ::feedwire::FeedAction_ClientData* FeedAction::mutable_client_data() {
  ::feedwire::FeedAction_ClientData* _msg = _internal_mutable_client_data();
  // @@protoc_insertion_point(field_mutable:feedwire.FeedAction.client_data)
  return _msg;
}
inline void FeedAction::set_allocated_client_data(::feedwire::FeedAction_ClientData* client_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete client_data_;
  }
  if (client_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(client_data);
    if (message_arena != submessage_arena) {
      client_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_data, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  client_data_ = client_data;
  // @@protoc_insertion_point(field_set_allocated:feedwire.FeedAction.client_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::feedwire::FeedAction_ClientData_ActionOrigin> : ::std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2ffeed_5faction_2eproto
