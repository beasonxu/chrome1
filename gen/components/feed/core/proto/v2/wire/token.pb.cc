// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/token.proto

#include "components/feed/core/proto/v2/wire/token.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR Token::Token(
    ::_pbi::ConstantInitialized)
  : in_place_update_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , story_token_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , parent_id_(nullptr)
  , web_feed_token_(nullptr)
  , next_page_token_(nullptr){}
struct TokenDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TokenDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TokenDefaultTypeInternal() {}
  union {
    Token _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TokenDefaultTypeInternal _Token_default_instance_;
}  // namespace feedwire
namespace feedwire {

// ===================================================================

class Token::_Internal {
 public:
  using HasBits = decltype(std::declval<Token>()._has_bits_);
  static const ::feedwire::ContentId& parent_id(const Token* msg);
  static void set_has_parent_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::feedwire::WebFeedToken& web_feed_token(const Token* msg);
  static void set_has_web_feed_token(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::feedwire::NextPageToken& next_page_token(const Token* msg);
  static void set_has_next_page_token(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_in_place_update_token(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_story_token(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::feedwire::ContentId&
Token::_Internal::parent_id(const Token* msg) {
  return *msg->parent_id_;
}
const ::feedwire::WebFeedToken&
Token::_Internal::web_feed_token(const Token* msg) {
  return *msg->web_feed_token_;
}
const ::feedwire::NextPageToken&
Token::_Internal::next_page_token(const Token* msg) {
  return *msg->next_page_token_;
}
void Token::clear_parent_id() {
  if (parent_id_ != nullptr) parent_id_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void Token::clear_web_feed_token() {
  if (web_feed_token_ != nullptr) web_feed_token_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
void Token::clear_next_page_token() {
  if (next_page_token_ != nullptr) next_page_token_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
Token::Token(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.Token)
}
Token::Token(const Token& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  in_place_update_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    in_place_update_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_in_place_update_token()) {
    in_place_update_token_.Set(from._internal_in_place_update_token(), 
      GetArenaForAllocation());
  }
  story_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    story_token_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_story_token()) {
    story_token_.Set(from._internal_story_token(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_parent_id()) {
    parent_id_ = new ::feedwire::ContentId(*from.parent_id_);
  } else {
    parent_id_ = nullptr;
  }
  if (from._internal_has_web_feed_token()) {
    web_feed_token_ = new ::feedwire::WebFeedToken(*from.web_feed_token_);
  } else {
    web_feed_token_ = nullptr;
  }
  if (from._internal_has_next_page_token()) {
    next_page_token_ = new ::feedwire::NextPageToken(*from.next_page_token_);
  } else {
    next_page_token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.Token)
}

inline void Token::SharedCtor() {
in_place_update_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  in_place_update_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
story_token_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  story_token_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parent_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_page_token_) -
    reinterpret_cast<char*>(&parent_id_)) + sizeof(next_page_token_));
}

Token::~Token() {
  // @@protoc_insertion_point(destructor:feedwire.Token)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Token::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  in_place_update_token_.Destroy();
  story_token_.Destroy();
  if (this != internal_default_instance()) delete parent_id_;
  if (this != internal_default_instance()) delete web_feed_token_;
  if (this != internal_default_instance()) delete next_page_token_;
}

void Token::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Token::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.Token)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      in_place_update_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      story_token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(parent_id_ != nullptr);
      parent_id_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(web_feed_token_ != nullptr);
      web_feed_token_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(next_page_token_ != nullptr);
      next_page_token_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Token::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.ContentId parent_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_parent_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.WebFeedToken web_feed_token = 1001;
      case 1001:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_web_feed_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.NextPageToken next_page_token = 1002;
      case 1002:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_page_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes in_place_update_token = 1003;
      case 1003:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_in_place_update_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bytes story_token = 1004;
      case 1004:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_story_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Token::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.Token)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.ContentId parent_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::parent_id(this),
        _Internal::parent_id(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.WebFeedToken web_feed_token = 1001;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1001, _Internal::web_feed_token(this),
        _Internal::web_feed_token(this).GetCachedSize(), target, stream);
  }

  // optional .feedwire.NextPageToken next_page_token = 1002;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1002, _Internal::next_page_token(this),
        _Internal::next_page_token(this).GetCachedSize(), target, stream);
  }

  // optional bytes in_place_update_token = 1003;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        1003, this->_internal_in_place_update_token(), target);
  }

  // optional bytes story_token = 1004;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        1004, this->_internal_story_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.Token)
  return target;
}

size_t Token::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.Token)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes in_place_update_token = 1003;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_in_place_update_token());
    }

    // optional bytes story_token = 1004;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_story_token());
    }

    // optional .feedwire.ContentId parent_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *parent_id_);
    }

    // optional .feedwire.WebFeedToken web_feed_token = 1001;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *web_feed_token_);
    }

    // optional .feedwire.NextPageToken next_page_token = 1002;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *next_page_token_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Token::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Token*>(
      &from));
}

void Token::MergeFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.Token)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_in_place_update_token(from._internal_in_place_update_token());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_story_token(from._internal_story_token());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_parent_id()->::feedwire::ContentId::MergeFrom(from._internal_parent_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_web_feed_token()->::feedwire::WebFeedToken::MergeFrom(from._internal_web_feed_token());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_next_page_token()->::feedwire::NextPageToken::MergeFrom(from._internal_next_page_token());
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Token::CopyFrom(const Token& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.Token)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Token::IsInitialized() const {
  return true;
}

void Token::InternalSwap(Token* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &in_place_update_token_, lhs_arena,
      &other->in_place_update_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &story_token_, lhs_arena,
      &other->story_token_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Token, next_page_token_)
      + sizeof(Token::next_page_token_)
      - PROTOBUF_FIELD_OFFSET(Token, parent_id_)>(
          reinterpret_cast<char*>(&parent_id_),
          reinterpret_cast<char*>(&other->parent_id_));
}

std::string Token::GetTypeName() const {
  return "feedwire.Token";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::Token*
Arena::CreateMaybeMessage< ::feedwire::Token >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::Token >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
