// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/data_operation.proto

#include "components/feed/core/proto/v2/wire/data_operation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR DataOperation::DataOperation(
    ::_pbi::ConstantInitialized)
  : metadata_(nullptr)
  , operation_(0)

  , _oneof_case_{}{}
struct DataOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataOperationDefaultTypeInternal() {}
  union {
    DataOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataOperationDefaultTypeInternal _DataOperation_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool DataOperation_Operation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> DataOperation_Operation_strings[4] = {};

static const char DataOperation_Operation_names[] =
  "CLEAR_ALL"
  "REMOVE"
  "UNKNOWN_OPERATION"
  "UPDATE_OR_APPEND";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DataOperation_Operation_entries[] = {
  { {DataOperation_Operation_names + 0, 9}, 1 },
  { {DataOperation_Operation_names + 9, 6}, 3 },
  { {DataOperation_Operation_names + 15, 17}, 0 },
  { {DataOperation_Operation_names + 32, 16}, 2 },
};

static const int DataOperation_Operation_entries_by_number[] = {
  2, // 0 -> UNKNOWN_OPERATION
  0, // 1 -> CLEAR_ALL
  3, // 2 -> UPDATE_OR_APPEND
  1, // 3 -> REMOVE
};

const std::string& DataOperation_Operation_Name(
    DataOperation_Operation value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DataOperation_Operation_entries,
          DataOperation_Operation_entries_by_number,
          4, DataOperation_Operation_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DataOperation_Operation_entries,
      DataOperation_Operation_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     DataOperation_Operation_strings[idx].get();
}
bool DataOperation_Operation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DataOperation_Operation* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DataOperation_Operation_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<DataOperation_Operation>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataOperation_Operation DataOperation::UNKNOWN_OPERATION;
constexpr DataOperation_Operation DataOperation::CLEAR_ALL;
constexpr DataOperation_Operation DataOperation::UPDATE_OR_APPEND;
constexpr DataOperation_Operation DataOperation::REMOVE;
constexpr DataOperation_Operation DataOperation::Operation_MIN;
constexpr DataOperation_Operation DataOperation::Operation_MAX;
constexpr int DataOperation::Operation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class DataOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<DataOperation>()._has_bits_);
  static const ::feedwire::Feature& feature(const DataOperation* msg);
  static const ::feedwire::Token& next_page_token(const DataOperation* msg);
  static const ::feedwire::RenderData& render_data(const DataOperation* msg);
  static const ::feedwire::RequestSchedule& request_schedule(const DataOperation* msg);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::feedwire::PayloadMetadata& metadata(const DataOperation* msg);
  static void set_has_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::feedwire::Feature&
DataOperation::_Internal::feature(const DataOperation* msg) {
  return *msg->payload_.feature_;
}
const ::feedwire::Token&
DataOperation::_Internal::next_page_token(const DataOperation* msg) {
  return *msg->payload_.next_page_token_;
}
const ::feedwire::RenderData&
DataOperation::_Internal::render_data(const DataOperation* msg) {
  return *msg->payload_.render_data_;
}
const ::feedwire::RequestSchedule&
DataOperation::_Internal::request_schedule(const DataOperation* msg) {
  return *msg->payload_.request_schedule_;
}
const ::feedwire::PayloadMetadata&
DataOperation::_Internal::metadata(const DataOperation* msg) {
  return *msg->metadata_;
}
void DataOperation::set_allocated_feature(::feedwire::Feature* feature) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (feature) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feature));
    if (message_arena != submessage_arena) {
      feature = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feature, submessage_arena);
    }
    set_has_feature();
    payload_.feature_ = feature;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.DataOperation.feature)
}
void DataOperation::clear_feature() {
  if (_internal_has_feature()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.feature_;
    }
    clear_has_payload();
  }
}
void DataOperation::set_allocated_next_page_token(::feedwire::Token* next_page_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (next_page_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(next_page_token));
    if (message_arena != submessage_arena) {
      next_page_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, next_page_token, submessage_arena);
    }
    set_has_next_page_token();
    payload_.next_page_token_ = next_page_token;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.DataOperation.next_page_token)
}
void DataOperation::clear_next_page_token() {
  if (_internal_has_next_page_token()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.next_page_token_;
    }
    clear_has_payload();
  }
}
void DataOperation::set_allocated_render_data(::feedwire::RenderData* render_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (render_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_data));
    if (message_arena != submessage_arena) {
      render_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_data, submessage_arena);
    }
    set_has_render_data();
    payload_.render_data_ = render_data;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.DataOperation.render_data)
}
void DataOperation::clear_render_data() {
  if (_internal_has_render_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.render_data_;
    }
    clear_has_payload();
  }
}
void DataOperation::set_allocated_request_schedule(::feedwire::RequestSchedule* request_schedule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_payload();
  if (request_schedule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_schedule));
    if (message_arena != submessage_arena) {
      request_schedule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request_schedule, submessage_arena);
    }
    set_has_request_schedule();
    payload_.request_schedule_ = request_schedule;
  }
  // @@protoc_insertion_point(field_set_allocated:feedwire.DataOperation.request_schedule)
}
void DataOperation::clear_request_schedule() {
  if (_internal_has_request_schedule()) {
    if (GetArenaForAllocation() == nullptr) {
      delete payload_.request_schedule_;
    }
    clear_has_payload();
  }
}
void DataOperation::clear_metadata() {
  if (metadata_ != nullptr) metadata_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
DataOperation::DataOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.DataOperation)
}
DataOperation::DataOperation(const DataOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    metadata_ = new ::feedwire::PayloadMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  operation_ = from.operation_;
  clear_has_payload();
  switch (from.payload_case()) {
    case kFeature: {
      _internal_mutable_feature()->::feedwire::Feature::MergeFrom(from._internal_feature());
      break;
    }
    case kNextPageToken: {
      _internal_mutable_next_page_token()->::feedwire::Token::MergeFrom(from._internal_next_page_token());
      break;
    }
    case kRenderData: {
      _internal_mutable_render_data()->::feedwire::RenderData::MergeFrom(from._internal_render_data());
      break;
    }
    case kRequestSchedule: {
      _internal_mutable_request_schedule()->::feedwire::RequestSchedule::MergeFrom(from._internal_request_schedule());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:feedwire.DataOperation)
}

inline void DataOperation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&metadata_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&metadata_)) + sizeof(operation_));
clear_has_payload();
}

DataOperation::~DataOperation() {
  // @@protoc_insertion_point(destructor:feedwire.DataOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete metadata_;
  if (has_payload()) {
    clear_payload();
  }
}

void DataOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DataOperation::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:feedwire.DataOperation)
  switch (payload_case()) {
    case kFeature: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.feature_;
      }
      break;
    }
    case kNextPageToken: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.next_page_token_;
      }
      break;
    }
    case kRenderData: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.render_data_;
      }
      break;
    }
    case kRequestSchedule: {
      if (GetArenaForAllocation() == nullptr) {
        delete payload_.request_schedule_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void DataOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.DataOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(metadata_ != nullptr);
    metadata_->Clear();
  }
  operation_ = 0;
  clear_payload();
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DataOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .feedwire.DataOperation.Operation operation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::feedwire::DataOperation_Operation_IsValid(val))) {
            _internal_set_operation(static_cast<::feedwire::DataOperation_Operation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .feedwire.PayloadMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.Feature feature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.Token next_page_token = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_next_page_token(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.RenderData render_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .feedwire.RequestSchedule request_schedule = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_request_schedule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.DataOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .feedwire.DataOperation.Operation operation = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operation(), target);
  }

  // optional .feedwire.PayloadMetadata metadata = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  switch (payload_case()) {
    case kFeature: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, _Internal::feature(this),
          _Internal::feature(this).GetCachedSize(), target, stream);
      break;
    }
    case kNextPageToken: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, _Internal::next_page_token(this),
          _Internal::next_page_token(this).GetCachedSize(), target, stream);
      break;
    }
    case kRenderData: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, _Internal::render_data(this),
          _Internal::render_data(this).GetCachedSize(), target, stream);
      break;
    }
    case kRequestSchedule: {
      target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(9, _Internal::request_schedule(this),
          _Internal::request_schedule(this).GetCachedSize(), target, stream);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.DataOperation)
  return target;
}

size_t DataOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.DataOperation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .feedwire.PayloadMetadata metadata = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *metadata_);
    }

    // optional .feedwire.DataOperation.Operation operation = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  switch (payload_case()) {
    // .feedwire.Feature feature = 3;
    case kFeature: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.feature_);
      break;
    }
    // .feedwire.Token next_page_token = 5;
    case kNextPageToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.next_page_token_);
      break;
    }
    // .feedwire.RenderData render_data = 6;
    case kRenderData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.render_data_);
      break;
    }
    // .feedwire.RequestSchedule request_schedule = 9;
    case kRequestSchedule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.request_schedule_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataOperation::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DataOperation*>(
      &from));
}

void DataOperation::MergeFrom(const DataOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.DataOperation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_metadata()->::feedwire::PayloadMetadata::MergeFrom(from._internal_metadata());
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  switch (from.payload_case()) {
    case kFeature: {
      _internal_mutable_feature()->::feedwire::Feature::MergeFrom(from._internal_feature());
      break;
    }
    case kNextPageToken: {
      _internal_mutable_next_page_token()->::feedwire::Token::MergeFrom(from._internal_next_page_token());
      break;
    }
    case kRenderData: {
      _internal_mutable_render_data()->::feedwire::RenderData::MergeFrom(from._internal_render_data());
      break;
    }
    case kRequestSchedule: {
      _internal_mutable_request_schedule()->::feedwire::RequestSchedule::MergeFrom(from._internal_request_schedule());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DataOperation::CopyFrom(const DataOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.DataOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataOperation::IsInitialized() const {
  return true;
}

void DataOperation::InternalSwap(DataOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataOperation, operation_)
      + sizeof(DataOperation::operation_)
      - PROTOBUF_FIELD_OFFSET(DataOperation, metadata_)>(
          reinterpret_cast<char*>(&metadata_),
          reinterpret_cast<char*>(&other->metadata_));
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

std::string DataOperation::GetTypeName() const {
  return "feedwire.DataOperation";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::DataOperation*
Arena::CreateMaybeMessage< ::feedwire::DataOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::DataOperation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
