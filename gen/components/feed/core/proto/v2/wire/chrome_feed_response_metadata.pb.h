// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/chrome_feed_response_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class ChromeFeedResponseMetadata;
struct ChromeFeedResponseMetadataDefaultTypeInternal;
extern ChromeFeedResponseMetadataDefaultTypeInternal _ChromeFeedResponseMetadata_default_instance_;
class Experiment;
struct ExperimentDefaultTypeInternal;
extern ExperimentDefaultTypeInternal _Experiment_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::ChromeFeedResponseMetadata* Arena::CreateMaybeMessage<::feedwire::ChromeFeedResponseMetadata>(Arena*);
template<> ::feedwire::Experiment* Arena::CreateMaybeMessage<::feedwire::Experiment>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class ChromeFeedResponseMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ChromeFeedResponseMetadata) */ {
 public:
  inline ChromeFeedResponseMetadata() : ChromeFeedResponseMetadata(nullptr) {}
  ~ChromeFeedResponseMetadata() override;
  explicit PROTOBUF_CONSTEXPR ChromeFeedResponseMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeFeedResponseMetadata(const ChromeFeedResponseMetadata& from);
  ChromeFeedResponseMetadata(ChromeFeedResponseMetadata&& from) noexcept
    : ChromeFeedResponseMetadata() {
    *this = ::std::move(from);
  }

  inline ChromeFeedResponseMetadata& operator=(const ChromeFeedResponseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeFeedResponseMetadata& operator=(ChromeFeedResponseMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeFeedResponseMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeFeedResponseMetadata* internal_default_instance() {
    return reinterpret_cast<const ChromeFeedResponseMetadata*>(
               &_ChromeFeedResponseMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeFeedResponseMetadata& a, ChromeFeedResponseMetadata& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeFeedResponseMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeFeedResponseMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeFeedResponseMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeFeedResponseMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeFeedResponseMetadata& from);
  void MergeFrom(const ChromeFeedResponseMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeFeedResponseMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ChromeFeedResponseMetadata";
  }
  protected:
  explicit ChromeFeedResponseMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExperimentsFieldNumber = 4,
    kSessionIdFieldNumber = 3,
    kPrivacyNoticeFulfilledFieldNumber = 1,
    kLoggingEnabledFieldNumber = 2,
    kWebAndAppActivityEnabledFieldNumber = 5,
    kDiscoverPersonalizationEnabledFieldNumber = 6,
  };
  // repeated .feedwire.Experiment experiments = 4;
  int experiments_size() const;
  private:
  int _internal_experiments_size() const;
  public:
  void clear_experiments();
  ::feedwire::Experiment* mutable_experiments(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Experiment >*
      mutable_experiments();
  private:
  const ::feedwire::Experiment& _internal_experiments(int index) const;
  ::feedwire::Experiment* _internal_add_experiments();
  public:
  const ::feedwire::Experiment& experiments(int index) const;
  ::feedwire::Experiment* add_experiments();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Experiment >&
      experiments() const;

  // optional string session_id = 3;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_NODISCARD std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // optional bool privacy_notice_fulfilled = 1;
  bool has_privacy_notice_fulfilled() const;
  private:
  bool _internal_has_privacy_notice_fulfilled() const;
  public:
  void clear_privacy_notice_fulfilled();
  bool privacy_notice_fulfilled() const;
  void set_privacy_notice_fulfilled(bool value);
  private:
  bool _internal_privacy_notice_fulfilled() const;
  void _internal_set_privacy_notice_fulfilled(bool value);
  public:

  // optional bool logging_enabled = 2;
  bool has_logging_enabled() const;
  private:
  bool _internal_has_logging_enabled() const;
  public:
  void clear_logging_enabled();
  bool logging_enabled() const;
  void set_logging_enabled(bool value);
  private:
  bool _internal_logging_enabled() const;
  void _internal_set_logging_enabled(bool value);
  public:

  // optional bool web_and_app_activity_enabled = 5;
  bool has_web_and_app_activity_enabled() const;
  private:
  bool _internal_has_web_and_app_activity_enabled() const;
  public:
  void clear_web_and_app_activity_enabled();
  bool web_and_app_activity_enabled() const;
  void set_web_and_app_activity_enabled(bool value);
  private:
  bool _internal_web_and_app_activity_enabled() const;
  void _internal_set_web_and_app_activity_enabled(bool value);
  public:

  // optional bool discover_personalization_enabled = 6;
  bool has_discover_personalization_enabled() const;
  private:
  bool _internal_has_discover_personalization_enabled() const;
  public:
  void clear_discover_personalization_enabled();
  bool discover_personalization_enabled() const;
  void set_discover_personalization_enabled(bool value);
  private:
  bool _internal_discover_personalization_enabled() const;
  void _internal_set_discover_personalization_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ChromeFeedResponseMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Experiment > experiments_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  bool privacy_notice_fulfilled_;
  bool logging_enabled_;
  bool web_and_app_activity_enabled_;
  bool discover_personalization_enabled_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto;
};
// -------------------------------------------------------------------

class Experiment final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.Experiment) */ {
 public:
  inline Experiment() : Experiment(nullptr) {}
  ~Experiment() override;
  explicit PROTOBUF_CONSTEXPR Experiment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Experiment(const Experiment& from);
  Experiment(Experiment&& from) noexcept
    : Experiment() {
    *this = ::std::move(from);
  }

  inline Experiment& operator=(const Experiment& from) {
    CopyFrom(from);
    return *this;
  }
  inline Experiment& operator=(Experiment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Experiment& default_instance() {
    return *internal_default_instance();
  }
  static inline const Experiment* internal_default_instance() {
    return reinterpret_cast<const Experiment*>(
               &_Experiment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Experiment& a, Experiment& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(Experiment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Experiment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Experiment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Experiment>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Experiment& from);
  void MergeFrom(const Experiment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Experiment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.Experiment";
  }
  protected:
  explicit Experiment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrialNameFieldNumber = 1,
    kGroupNameFieldNumber = 2,
  };
  // optional string trial_name = 1;
  bool has_trial_name() const;
  private:
  bool _internal_has_trial_name() const;
  public:
  void clear_trial_name();
  const std::string& trial_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_trial_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_trial_name();
  PROTOBUF_NODISCARD std::string* release_trial_name();
  void set_allocated_trial_name(std::string* trial_name);
  private:
  const std::string& _internal_trial_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trial_name(const std::string& value);
  std::string* _internal_mutable_trial_name();
  public:

  // optional string group_name = 2;
  bool has_group_name() const;
  private:
  bool _internal_has_group_name() const;
  public:
  void clear_group_name();
  const std::string& group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group_name();
  PROTOBUF_NODISCARD std::string* release_group_name();
  void set_allocated_group_name(std::string* group_name);
  private:
  const std::string& _internal_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group_name(const std::string& value);
  std::string* _internal_mutable_group_name();
  public:

  // @@protoc_insertion_point(class_scope:feedwire.Experiment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trial_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_name_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeFeedResponseMetadata

// optional bool privacy_notice_fulfilled = 1;
inline bool ChromeFeedResponseMetadata::_internal_has_privacy_notice_fulfilled() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ChromeFeedResponseMetadata::has_privacy_notice_fulfilled() const {
  return _internal_has_privacy_notice_fulfilled();
}
inline void ChromeFeedResponseMetadata::clear_privacy_notice_fulfilled() {
  privacy_notice_fulfilled_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool ChromeFeedResponseMetadata::_internal_privacy_notice_fulfilled() const {
  return privacy_notice_fulfilled_;
}
inline bool ChromeFeedResponseMetadata::privacy_notice_fulfilled() const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFeedResponseMetadata.privacy_notice_fulfilled)
  return _internal_privacy_notice_fulfilled();
}
inline void ChromeFeedResponseMetadata::_internal_set_privacy_notice_fulfilled(bool value) {
  _has_bits_[0] |= 0x00000002u;
  privacy_notice_fulfilled_ = value;
}
inline void ChromeFeedResponseMetadata::set_privacy_notice_fulfilled(bool value) {
  _internal_set_privacy_notice_fulfilled(value);
  // @@protoc_insertion_point(field_set:feedwire.ChromeFeedResponseMetadata.privacy_notice_fulfilled)
}

// optional bool logging_enabled = 2;
inline bool ChromeFeedResponseMetadata::_internal_has_logging_enabled() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ChromeFeedResponseMetadata::has_logging_enabled() const {
  return _internal_has_logging_enabled();
}
inline void ChromeFeedResponseMetadata::clear_logging_enabled() {
  logging_enabled_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ChromeFeedResponseMetadata::_internal_logging_enabled() const {
  return logging_enabled_;
}
inline bool ChromeFeedResponseMetadata::logging_enabled() const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFeedResponseMetadata.logging_enabled)
  return _internal_logging_enabled();
}
inline void ChromeFeedResponseMetadata::_internal_set_logging_enabled(bool value) {
  _has_bits_[0] |= 0x00000004u;
  logging_enabled_ = value;
}
inline void ChromeFeedResponseMetadata::set_logging_enabled(bool value) {
  _internal_set_logging_enabled(value);
  // @@protoc_insertion_point(field_set:feedwire.ChromeFeedResponseMetadata.logging_enabled)
}

// optional string session_id = 3;
inline bool ChromeFeedResponseMetadata::_internal_has_session_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeFeedResponseMetadata::has_session_id() const {
  return _internal_has_session_id();
}
inline void ChromeFeedResponseMetadata::clear_session_id() {
  session_id_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChromeFeedResponseMetadata::session_id() const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFeedResponseMetadata.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChromeFeedResponseMetadata::set_session_id(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 session_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.ChromeFeedResponseMetadata.session_id)
}
inline std::string* ChromeFeedResponseMetadata::mutable_session_id() {
  std::string* _s = _internal_mutable_session_id();
  // @@protoc_insertion_point(field_mutable:feedwire.ChromeFeedResponseMetadata.session_id)
  return _s;
}
inline const std::string& ChromeFeedResponseMetadata::_internal_session_id() const {
  return session_id_.Get();
}
inline void ChromeFeedResponseMetadata::_internal_set_session_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ChromeFeedResponseMetadata::_internal_mutable_session_id() {
  _has_bits_[0] |= 0x00000001u;
  return session_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ChromeFeedResponseMetadata::release_session_id() {
  // @@protoc_insertion_point(field_release:feedwire.ChromeFeedResponseMetadata.session_id)
  if (!_internal_has_session_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = session_id_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ChromeFeedResponseMetadata::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  session_id_.SetAllocated(session_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (session_id_.IsDefault()) {
    session_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.ChromeFeedResponseMetadata.session_id)
}

// repeated .feedwire.Experiment experiments = 4;
inline int ChromeFeedResponseMetadata::_internal_experiments_size() const {
  return experiments_.size();
}
inline int ChromeFeedResponseMetadata::experiments_size() const {
  return _internal_experiments_size();
}
inline void ChromeFeedResponseMetadata::clear_experiments() {
  experiments_.Clear();
}
inline ::feedwire::Experiment* ChromeFeedResponseMetadata::mutable_experiments(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.ChromeFeedResponseMetadata.experiments)
  return experiments_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Experiment >*
ChromeFeedResponseMetadata::mutable_experiments() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.ChromeFeedResponseMetadata.experiments)
  return &experiments_;
}
inline const ::feedwire::Experiment& ChromeFeedResponseMetadata::_internal_experiments(int index) const {
  return experiments_.Get(index);
}
inline const ::feedwire::Experiment& ChromeFeedResponseMetadata::experiments(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFeedResponseMetadata.experiments)
  return _internal_experiments(index);
}
inline ::feedwire::Experiment* ChromeFeedResponseMetadata::_internal_add_experiments() {
  return experiments_.Add();
}
inline ::feedwire::Experiment* ChromeFeedResponseMetadata::add_experiments() {
  ::feedwire::Experiment* _add = _internal_add_experiments();
  // @@protoc_insertion_point(field_add:feedwire.ChromeFeedResponseMetadata.experiments)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::Experiment >&
ChromeFeedResponseMetadata::experiments() const {
  // @@protoc_insertion_point(field_list:feedwire.ChromeFeedResponseMetadata.experiments)
  return experiments_;
}

// optional bool web_and_app_activity_enabled = 5;
inline bool ChromeFeedResponseMetadata::_internal_has_web_and_app_activity_enabled() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ChromeFeedResponseMetadata::has_web_and_app_activity_enabled() const {
  return _internal_has_web_and_app_activity_enabled();
}
inline void ChromeFeedResponseMetadata::clear_web_and_app_activity_enabled() {
  web_and_app_activity_enabled_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ChromeFeedResponseMetadata::_internal_web_and_app_activity_enabled() const {
  return web_and_app_activity_enabled_;
}
inline bool ChromeFeedResponseMetadata::web_and_app_activity_enabled() const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFeedResponseMetadata.web_and_app_activity_enabled)
  return _internal_web_and_app_activity_enabled();
}
inline void ChromeFeedResponseMetadata::_internal_set_web_and_app_activity_enabled(bool value) {
  _has_bits_[0] |= 0x00000008u;
  web_and_app_activity_enabled_ = value;
}
inline void ChromeFeedResponseMetadata::set_web_and_app_activity_enabled(bool value) {
  _internal_set_web_and_app_activity_enabled(value);
  // @@protoc_insertion_point(field_set:feedwire.ChromeFeedResponseMetadata.web_and_app_activity_enabled)
}

// optional bool discover_personalization_enabled = 6;
inline bool ChromeFeedResponseMetadata::_internal_has_discover_personalization_enabled() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ChromeFeedResponseMetadata::has_discover_personalization_enabled() const {
  return _internal_has_discover_personalization_enabled();
}
inline void ChromeFeedResponseMetadata::clear_discover_personalization_enabled() {
  discover_personalization_enabled_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool ChromeFeedResponseMetadata::_internal_discover_personalization_enabled() const {
  return discover_personalization_enabled_;
}
inline bool ChromeFeedResponseMetadata::discover_personalization_enabled() const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFeedResponseMetadata.discover_personalization_enabled)
  return _internal_discover_personalization_enabled();
}
inline void ChromeFeedResponseMetadata::_internal_set_discover_personalization_enabled(bool value) {
  _has_bits_[0] |= 0x00000010u;
  discover_personalization_enabled_ = value;
}
inline void ChromeFeedResponseMetadata::set_discover_personalization_enabled(bool value) {
  _internal_set_discover_personalization_enabled(value);
  // @@protoc_insertion_point(field_set:feedwire.ChromeFeedResponseMetadata.discover_personalization_enabled)
}

// -------------------------------------------------------------------

// Experiment

// optional string trial_name = 1;
inline bool Experiment::_internal_has_trial_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Experiment::has_trial_name() const {
  return _internal_has_trial_name();
}
inline void Experiment::clear_trial_name() {
  trial_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Experiment::trial_name() const {
  // @@protoc_insertion_point(field_get:feedwire.Experiment.trial_name)
  return _internal_trial_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Experiment::set_trial_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 trial_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.Experiment.trial_name)
}
inline std::string* Experiment::mutable_trial_name() {
  std::string* _s = _internal_mutable_trial_name();
  // @@protoc_insertion_point(field_mutable:feedwire.Experiment.trial_name)
  return _s;
}
inline const std::string& Experiment::_internal_trial_name() const {
  return trial_name_.Get();
}
inline void Experiment::_internal_set_trial_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trial_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Experiment::_internal_mutable_trial_name() {
  _has_bits_[0] |= 0x00000001u;
  return trial_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Experiment::release_trial_name() {
  // @@protoc_insertion_point(field_release:feedwire.Experiment.trial_name)
  if (!_internal_has_trial_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = trial_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trial_name_.IsDefault()) {
    trial_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Experiment::set_allocated_trial_name(std::string* trial_name) {
  if (trial_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trial_name_.SetAllocated(trial_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (trial_name_.IsDefault()) {
    trial_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.Experiment.trial_name)
}

// optional string group_name = 2;
inline bool Experiment::_internal_has_group_name() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Experiment::has_group_name() const {
  return _internal_has_group_name();
}
inline void Experiment::clear_group_name() {
  group_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Experiment::group_name() const {
  // @@protoc_insertion_point(field_get:feedwire.Experiment.group_name)
  return _internal_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Experiment::set_group_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 group_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:feedwire.Experiment.group_name)
}
inline std::string* Experiment::mutable_group_name() {
  std::string* _s = _internal_mutable_group_name();
  // @@protoc_insertion_point(field_mutable:feedwire.Experiment.group_name)
  return _s;
}
inline const std::string& Experiment::_internal_group_name() const {
  return group_name_.Get();
}
inline void Experiment::_internal_set_group_name(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  group_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Experiment::_internal_mutable_group_name() {
  _has_bits_[0] |= 0x00000002u;
  return group_name_.Mutable(GetArenaForAllocation());
}
inline std::string* Experiment::release_group_name() {
  // @@protoc_insertion_point(field_release:feedwire.Experiment.group_name)
  if (!_internal_has_group_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = group_name_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_name_.IsDefault()) {
    group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Experiment::set_allocated_group_name(std::string* group_name) {
  if (group_name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  group_name_.SetAllocated(group_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (group_name_.IsDefault()) {
    group_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:feedwire.Experiment.group_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffeed_5fresponse_5fmetadata_2eproto
