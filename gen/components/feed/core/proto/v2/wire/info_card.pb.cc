// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/info_card.proto

#include "components/feed/core/proto/v2/wire/info_card.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace feedwire {
PROTOBUF_CONSTEXPR InfoCardTrackingState::InfoCardTrackingState(
    ::_pbi::ConstantInitialized)
  : type_(0)
  , explicitly_dismissed_count_(0)
  , view_count_(0)
  , click_count_(0)
  , first_view_timestamp_(int64_t{0})
  , last_view_timestamp_(int64_t{0}){}
struct InfoCardTrackingStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoCardTrackingStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoCardTrackingStateDefaultTypeInternal() {}
  union {
    InfoCardTrackingState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoCardTrackingStateDefaultTypeInternal _InfoCardTrackingState_default_instance_;
PROTOBUF_CONSTEXPR InfoCardServingInfo::InfoCardServingInfo(
    ::_pbi::ConstantInitialized)
  : fulfilled_info_card_types_()
  , known_info_card_types_(){}
struct InfoCardServingInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoCardServingInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoCardServingInfoDefaultTypeInternal() {}
  union {
    InfoCardServingInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT_WITH_PTR PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoCardServingInfoDefaultTypeInternal _InfoCardServingInfo_default_instance_;
}  // namespace feedwire
namespace feedwire {
bool InfoCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> InfoCardType_strings[5] = {};

static const char InfoCardType_names[] =
  "INFO_CARD_FOLLOWING_FEED_FOLLOW_FROM_PAGE_EDUCATION"
  "INFO_CARD_FOLLOWING_FEED_ONBOARDING_INTRO"
  "INFO_CARD_MAIN_PRIVACY_NOTICE"
  "INFO_CARD_NONE"
  "INFO_CARD_YOUTUBE_PRIVACY_NOTICE";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InfoCardType_entries[] = {
  { {InfoCardType_names + 0, 51}, 4 },
  { {InfoCardType_names + 51, 41}, 3 },
  { {InfoCardType_names + 92, 29}, 1 },
  { {InfoCardType_names + 121, 14}, 0 },
  { {InfoCardType_names + 135, 32}, 2 },
};

static const int InfoCardType_entries_by_number[] = {
  3, // 0 -> INFO_CARD_NONE
  2, // 1 -> INFO_CARD_MAIN_PRIVACY_NOTICE
  4, // 2 -> INFO_CARD_YOUTUBE_PRIVACY_NOTICE
  1, // 3 -> INFO_CARD_FOLLOWING_FEED_ONBOARDING_INTRO
  0, // 4 -> INFO_CARD_FOLLOWING_FEED_FOLLOW_FROM_PAGE_EDUCATION
};

const std::string& InfoCardType_Name(
    InfoCardType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InfoCardType_entries,
          InfoCardType_entries_by_number,
          5, InfoCardType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InfoCardType_entries,
      InfoCardType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     InfoCardType_strings[idx].get();
}
bool InfoCardType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InfoCardType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InfoCardType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<InfoCardType>(int_value);
  }
  return success;
}

// ===================================================================

class InfoCardTrackingState::_Internal {
 public:
  using HasBits = decltype(std::declval<InfoCardTrackingState>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_explicitly_dismissed_count(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_view_count(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_click_count(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_first_view_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_last_view_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

InfoCardTrackingState::InfoCardTrackingState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.InfoCardTrackingState)
}
InfoCardTrackingState::InfoCardTrackingState(const InfoCardTrackingState& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_view_timestamp_) -
    reinterpret_cast<char*>(&type_)) + sizeof(last_view_timestamp_));
  // @@protoc_insertion_point(copy_constructor:feedwire.InfoCardTrackingState)
}

inline void InfoCardTrackingState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&last_view_timestamp_) -
    reinterpret_cast<char*>(&type_)) + sizeof(last_view_timestamp_));
}

InfoCardTrackingState::~InfoCardTrackingState() {
  // @@protoc_insertion_point(destructor:feedwire.InfoCardTrackingState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoCardTrackingState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InfoCardTrackingState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoCardTrackingState::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.InfoCardTrackingState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&last_view_timestamp_) -
        reinterpret_cast<char*>(&type_)) + sizeof(last_view_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InfoCardTrackingState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 explicitly_dismissed_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_explicitly_dismissed_count(&has_bits);
          explicitly_dismissed_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 view_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_view_count(&has_bits);
          view_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 click_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_click_count(&has_bits);
          click_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 first_view_timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_first_view_timestamp(&has_bits);
          first_view_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int64 last_view_timestamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _Internal::set_has_last_view_timestamp(&has_bits);
          last_view_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoCardTrackingState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.InfoCardTrackingState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional int32 explicitly_dismissed_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_explicitly_dismissed_count(), target);
  }

  // optional int32 view_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_view_count(), target);
  }

  // optional int32 click_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_click_count(), target);
  }

  // optional int64 first_view_timestamp = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_first_view_timestamp(), target);
  }

  // optional int64 last_view_timestamp = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_last_view_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.InfoCardTrackingState)
  return target;
}

size_t InfoCardTrackingState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.InfoCardTrackingState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
    }

    // optional int32 explicitly_dismissed_count = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_explicitly_dismissed_count());
    }

    // optional int32 view_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_view_count());
    }

    // optional int32 click_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_click_count());
    }

    // optional int64 first_view_timestamp = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_first_view_timestamp());
    }

    // optional int64 last_view_timestamp = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_view_timestamp());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoCardTrackingState::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InfoCardTrackingState*>(
      &from));
}

void InfoCardTrackingState::MergeFrom(const InfoCardTrackingState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.InfoCardTrackingState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      explicitly_dismissed_count_ = from.explicitly_dismissed_count_;
    }
    if (cached_has_bits & 0x00000004u) {
      view_count_ = from.view_count_;
    }
    if (cached_has_bits & 0x00000008u) {
      click_count_ = from.click_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      first_view_timestamp_ = from.first_view_timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      last_view_timestamp_ = from.last_view_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InfoCardTrackingState::CopyFrom(const InfoCardTrackingState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.InfoCardTrackingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoCardTrackingState::IsInitialized() const {
  return true;
}

void InfoCardTrackingState::InternalSwap(InfoCardTrackingState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InfoCardTrackingState, last_view_timestamp_)
      + sizeof(InfoCardTrackingState::last_view_timestamp_)
      - PROTOBUF_FIELD_OFFSET(InfoCardTrackingState, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

std::string InfoCardTrackingState::GetTypeName() const {
  return "feedwire.InfoCardTrackingState";
}


// ===================================================================

class InfoCardServingInfo::_Internal {
 public:
};

InfoCardServingInfo::InfoCardServingInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned),
  fulfilled_info_card_types_(arena),
  known_info_card_types_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:feedwire.InfoCardServingInfo)
}
InfoCardServingInfo::InfoCardServingInfo(const InfoCardServingInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      fulfilled_info_card_types_(from.fulfilled_info_card_types_),
      known_info_card_types_(from.known_info_card_types_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:feedwire.InfoCardServingInfo)
}

inline void InfoCardServingInfo::SharedCtor() {
}

InfoCardServingInfo::~InfoCardServingInfo() {
  // @@protoc_insertion_point(destructor:feedwire.InfoCardServingInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoCardServingInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InfoCardServingInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoCardServingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:feedwire.InfoCardServingInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fulfilled_info_card_types_.Clear();
  known_info_card_types_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InfoCardServingInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 fulfilled_info_card_types = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_fulfilled_info_card_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_fulfilled_info_card_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 known_info_card_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_known_info_card_types(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_known_info_card_types(), ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoCardServingInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:feedwire.InfoCardServingInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 fulfilled_info_card_types = 1;
  for (int i = 0, n = this->_internal_fulfilled_info_card_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_fulfilled_info_card_types(i), target);
  }

  // repeated int64 known_info_card_types = 2;
  for (int i = 0, n = this->_internal_known_info_card_types_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_known_info_card_types(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:feedwire.InfoCardServingInfo)
  return target;
}

size_t InfoCardServingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:feedwire.InfoCardServingInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 fulfilled_info_card_types = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->fulfilled_info_card_types_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_fulfilled_info_card_types_size());
    total_size += data_size;
  }

  // repeated int64 known_info_card_types = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->known_info_card_types_);
    total_size += 1 *
                  ::_pbi::FromIntSize(this->_internal_known_info_card_types_size());
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InfoCardServingInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InfoCardServingInfo*>(
      &from));
}

void InfoCardServingInfo::MergeFrom(const InfoCardServingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:feedwire.InfoCardServingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  fulfilled_info_card_types_.MergeFrom(from.fulfilled_info_card_types_);
  known_info_card_types_.MergeFrom(from.known_info_card_types_);
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InfoCardServingInfo::CopyFrom(const InfoCardServingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:feedwire.InfoCardServingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoCardServingInfo::IsInitialized() const {
  return true;
}

void InfoCardServingInfo::InternalSwap(InfoCardServingInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  fulfilled_info_card_types_.InternalSwap(&other->fulfilled_info_card_types_);
  known_info_card_types_.InternalSwap(&other->known_info_card_types_);
}

std::string InfoCardServingInfo::GetTypeName() const {
  return "feedwire.InfoCardServingInfo";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::feedwire::InfoCardTrackingState*
Arena::CreateMaybeMessage< ::feedwire::InfoCardTrackingState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::InfoCardTrackingState >(arena);
}
template<> PROTOBUF_NOINLINE ::feedwire::InfoCardServingInfo*
Arena::CreateMaybeMessage< ::feedwire::InfoCardServingInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::feedwire::InfoCardServingInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
