// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: components/feed/core/proto/v2/wire/chrome_fulfillment_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffulfillment_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffulfillment_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "components/feed/core/proto/v2/wire/info_card.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffulfillment_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffulfillment_5finfo_2eproto {
  static const uint32_t offsets[];
};
namespace feedwire {
class ChromeFulfillmentInfo;
struct ChromeFulfillmentInfoDefaultTypeInternal;
extern ChromeFulfillmentInfoDefaultTypeInternal _ChromeFulfillmentInfo_default_instance_;
}  // namespace feedwire
PROTOBUF_NAMESPACE_OPEN
template<> ::feedwire::ChromeFulfillmentInfo* Arena::CreateMaybeMessage<::feedwire::ChromeFulfillmentInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace feedwire {

// ===================================================================

class ChromeFulfillmentInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:feedwire.ChromeFulfillmentInfo) */ {
 public:
  inline ChromeFulfillmentInfo() : ChromeFulfillmentInfo(nullptr) {}
  ~ChromeFulfillmentInfo() override;
  explicit PROTOBUF_CONSTEXPR ChromeFulfillmentInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChromeFulfillmentInfo(const ChromeFulfillmentInfo& from);
  ChromeFulfillmentInfo(ChromeFulfillmentInfo&& from) noexcept
    : ChromeFulfillmentInfo() {
    *this = ::std::move(from);
  }

  inline ChromeFulfillmentInfo& operator=(const ChromeFulfillmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChromeFulfillmentInfo& operator=(ChromeFulfillmentInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChromeFulfillmentInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChromeFulfillmentInfo* internal_default_instance() {
    return reinterpret_cast<const ChromeFulfillmentInfo*>(
               &_ChromeFulfillmentInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ChromeFulfillmentInfo& a, ChromeFulfillmentInfo& b) {
    a.Swap(&b);
  }
  PROTOBUF_NOINLINE void Swap(ChromeFulfillmentInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChromeFulfillmentInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChromeFulfillmentInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChromeFulfillmentInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChromeFulfillmentInfo& from);
  void MergeFrom(const ChromeFulfillmentInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChromeFulfillmentInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "feedwire.ChromeFulfillmentInfo";
  }
  protected:
  explicit ChromeFulfillmentInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAcknowledgedNoticeKeyFieldNumber = 2,
    kInfoCardTrackingStateFieldNumber = 3,
    kNoticeCardAcknowledgedFieldNumber = 1,
  };
  // repeated string acknowledged_notice_key = 2;
  int acknowledged_notice_key_size() const;
  private:
  int _internal_acknowledged_notice_key_size() const;
  public:
  void clear_acknowledged_notice_key();
  const std::string& acknowledged_notice_key(int index) const;
  std::string* mutable_acknowledged_notice_key(int index);
  void set_acknowledged_notice_key(int index, const std::string& value);
  void set_acknowledged_notice_key(int index, std::string&& value);
  void set_acknowledged_notice_key(int index, const char* value);
  void set_acknowledged_notice_key(int index, const char* value, size_t size);
  std::string* add_acknowledged_notice_key();
  void add_acknowledged_notice_key(const std::string& value);
  void add_acknowledged_notice_key(std::string&& value);
  void add_acknowledged_notice_key(const char* value);
  void add_acknowledged_notice_key(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& acknowledged_notice_key() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_acknowledged_notice_key();
  private:
  const std::string& _internal_acknowledged_notice_key(int index) const;
  std::string* _internal_add_acknowledged_notice_key();
  public:

  // repeated .feedwire.InfoCardTrackingState info_card_tracking_state = 3;
  int info_card_tracking_state_size() const;
  private:
  int _internal_info_card_tracking_state_size() const;
  public:
  void clear_info_card_tracking_state();
  ::feedwire::InfoCardTrackingState* mutable_info_card_tracking_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::InfoCardTrackingState >*
      mutable_info_card_tracking_state();
  private:
  const ::feedwire::InfoCardTrackingState& _internal_info_card_tracking_state(int index) const;
  ::feedwire::InfoCardTrackingState* _internal_add_info_card_tracking_state();
  public:
  const ::feedwire::InfoCardTrackingState& info_card_tracking_state(int index) const;
  ::feedwire::InfoCardTrackingState* add_info_card_tracking_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::InfoCardTrackingState >&
      info_card_tracking_state() const;

  // optional bool notice_card_acknowledged = 1;
  bool has_notice_card_acknowledged() const;
  private:
  bool _internal_has_notice_card_acknowledged() const;
  public:
  void clear_notice_card_acknowledged();
  bool notice_card_acknowledged() const;
  void set_notice_card_acknowledged(bool value);
  private:
  bool _internal_notice_card_acknowledged() const;
  void _internal_set_notice_card_acknowledged(bool value);
  public:

  // @@protoc_insertion_point(class_scope:feedwire.ChromeFulfillmentInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> acknowledged_notice_key_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::InfoCardTrackingState > info_card_tracking_state_;
  bool notice_card_acknowledged_;
  friend struct ::TableStruct_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffulfillment_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChromeFulfillmentInfo

// optional bool notice_card_acknowledged = 1;
inline bool ChromeFulfillmentInfo::_internal_has_notice_card_acknowledged() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ChromeFulfillmentInfo::has_notice_card_acknowledged() const {
  return _internal_has_notice_card_acknowledged();
}
inline void ChromeFulfillmentInfo::clear_notice_card_acknowledged() {
  notice_card_acknowledged_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ChromeFulfillmentInfo::_internal_notice_card_acknowledged() const {
  return notice_card_acknowledged_;
}
inline bool ChromeFulfillmentInfo::notice_card_acknowledged() const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFulfillmentInfo.notice_card_acknowledged)
  return _internal_notice_card_acknowledged();
}
inline void ChromeFulfillmentInfo::_internal_set_notice_card_acknowledged(bool value) {
  _has_bits_[0] |= 0x00000001u;
  notice_card_acknowledged_ = value;
}
inline void ChromeFulfillmentInfo::set_notice_card_acknowledged(bool value) {
  _internal_set_notice_card_acknowledged(value);
  // @@protoc_insertion_point(field_set:feedwire.ChromeFulfillmentInfo.notice_card_acknowledged)
}

// repeated string acknowledged_notice_key = 2;
inline int ChromeFulfillmentInfo::_internal_acknowledged_notice_key_size() const {
  return acknowledged_notice_key_.size();
}
inline int ChromeFulfillmentInfo::acknowledged_notice_key_size() const {
  return _internal_acknowledged_notice_key_size();
}
inline void ChromeFulfillmentInfo::clear_acknowledged_notice_key() {
  acknowledged_notice_key_.Clear();
}
inline std::string* ChromeFulfillmentInfo::add_acknowledged_notice_key() {
  std::string* _s = _internal_add_acknowledged_notice_key();
  // @@protoc_insertion_point(field_add_mutable:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
  return _s;
}
inline const std::string& ChromeFulfillmentInfo::_internal_acknowledged_notice_key(int index) const {
  return acknowledged_notice_key_.Get(index);
}
inline const std::string& ChromeFulfillmentInfo::acknowledged_notice_key(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
  return _internal_acknowledged_notice_key(index);
}
inline std::string* ChromeFulfillmentInfo::mutable_acknowledged_notice_key(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
  return acknowledged_notice_key_.Mutable(index);
}
inline void ChromeFulfillmentInfo::set_acknowledged_notice_key(int index, const std::string& value) {
  acknowledged_notice_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline void ChromeFulfillmentInfo::set_acknowledged_notice_key(int index, std::string&& value) {
  acknowledged_notice_key_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline void ChromeFulfillmentInfo::set_acknowledged_notice_key(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acknowledged_notice_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline void ChromeFulfillmentInfo::set_acknowledged_notice_key(int index, const char* value, size_t size) {
  acknowledged_notice_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline std::string* ChromeFulfillmentInfo::_internal_add_acknowledged_notice_key() {
  return acknowledged_notice_key_.Add();
}
inline void ChromeFulfillmentInfo::add_acknowledged_notice_key(const std::string& value) {
  acknowledged_notice_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline void ChromeFulfillmentInfo::add_acknowledged_notice_key(std::string&& value) {
  acknowledged_notice_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline void ChromeFulfillmentInfo::add_acknowledged_notice_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  acknowledged_notice_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline void ChromeFulfillmentInfo::add_acknowledged_notice_key(const char* value, size_t size) {
  acknowledged_notice_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ChromeFulfillmentInfo::acknowledged_notice_key() const {
  // @@protoc_insertion_point(field_list:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
  return acknowledged_notice_key_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ChromeFulfillmentInfo::mutable_acknowledged_notice_key() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.ChromeFulfillmentInfo.acknowledged_notice_key)
  return &acknowledged_notice_key_;
}

// repeated .feedwire.InfoCardTrackingState info_card_tracking_state = 3;
inline int ChromeFulfillmentInfo::_internal_info_card_tracking_state_size() const {
  return info_card_tracking_state_.size();
}
inline int ChromeFulfillmentInfo::info_card_tracking_state_size() const {
  return _internal_info_card_tracking_state_size();
}
inline ::feedwire::InfoCardTrackingState* ChromeFulfillmentInfo::mutable_info_card_tracking_state(int index) {
  // @@protoc_insertion_point(field_mutable:feedwire.ChromeFulfillmentInfo.info_card_tracking_state)
  return info_card_tracking_state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::InfoCardTrackingState >*
ChromeFulfillmentInfo::mutable_info_card_tracking_state() {
  // @@protoc_insertion_point(field_mutable_list:feedwire.ChromeFulfillmentInfo.info_card_tracking_state)
  return &info_card_tracking_state_;
}
inline const ::feedwire::InfoCardTrackingState& ChromeFulfillmentInfo::_internal_info_card_tracking_state(int index) const {
  return info_card_tracking_state_.Get(index);
}
inline const ::feedwire::InfoCardTrackingState& ChromeFulfillmentInfo::info_card_tracking_state(int index) const {
  // @@protoc_insertion_point(field_get:feedwire.ChromeFulfillmentInfo.info_card_tracking_state)
  return _internal_info_card_tracking_state(index);
}
inline ::feedwire::InfoCardTrackingState* ChromeFulfillmentInfo::_internal_add_info_card_tracking_state() {
  return info_card_tracking_state_.Add();
}
inline ::feedwire::InfoCardTrackingState* ChromeFulfillmentInfo::add_info_card_tracking_state() {
  ::feedwire::InfoCardTrackingState* _add = _internal_add_info_card_tracking_state();
  // @@protoc_insertion_point(field_add:feedwire.ChromeFulfillmentInfo.info_card_tracking_state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::feedwire::InfoCardTrackingState >&
ChromeFulfillmentInfo::info_card_tracking_state() const {
  // @@protoc_insertion_point(field_list:feedwire.ChromeFulfillmentInfo.info_card_tracking_state)
  return info_card_tracking_state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace feedwire

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_components_2ffeed_2fcore_2fproto_2fv2_2fwire_2fchrome_5ffulfillment_5finfo_2eproto
